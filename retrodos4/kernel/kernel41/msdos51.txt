     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/09/2023 - Retro DOS v4.1 ((Previous: 29/12/2022))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11 (2.15)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E92A77                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2022]" ; 28/12/2022
  3269 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3269 000000CA 2076342E3120627920-
  3269 000000D3 4572646F67616E2054-
  3269 000000DC 616E205B323032335D 
  3270 000000E5 0D0A2400                	db	13,10,"$", 0 
  3271                                  
  3272                                  ;============================================================================
  3273                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3274                                  ;============================================================================
  3275                                  ; 11/07/2018 - Retro DOS v3.0
  3276                                  
  3277                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3278 000000E9 90                      align 2
  3279                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3280                                  
  3281                                  ; Standard Functions
  3282                                  ;DISPATCH  LABEL WORD
  3283                                  DISPATCH:
  3284                                  	; 16/07/2018 - Retro DOS v3.0
  3285                                  	; (MSDOS 3.3)
  3286                                  
  3287                                  ; 29/04/2019
  3288                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3289                                  
  3290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3291                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3292                                  
  3293 000000EA [5F62]                          short_addr  _$ABORT			    ;  0      0
  3294 000000EC [A716]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3295 000000EE [B016]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3296 000000F0 [6217]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3297 000000F2 [7D17]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3298 000000F4 [8317]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3299 000000F6 [EF15]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3300 000000F8 [1B16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3301 000000FA [C013]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3302 000000FC [1914]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3303 000000FE [2514]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3304 00000100 [9717]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3305 00000102 [A117]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3306 00000104 [E30F]                          short_addr  _$DISK_RESET		    ; 13      D
  3307 00000106 [B90E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3308 00000108 [7D1E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3309 0000010A [4718]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3310 0000010C [8F1F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3311 0000010E [2120]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3312 00000110 [E617]                          short_addr  _$FCB_DELETE		    ; 19     13
  3313 00000112 [7B1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3314 00000114 [801F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3315 00000116 [611F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3316 00000118 [B718]                          short_addr  _$FCB_RENAME		    ; 23     17
  3317                                  	; 16/07/2018
  3318                                          ;short_addr _CPMFUNC			    ; 24     18	
  3319 0000011A [6506]                          short_addr  NO_OP			    ; 24     18
  3320 0000011C [B40E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3321 0000011E [A90E]                          short_addr  _$SET_DMA			    ; 26     1A
  3322                                  
  3323                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3324                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3325                                  ;                                                                          ;
  3326 00000120 [6F0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3327 00000122 [710F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3328                                  ;                                                                          ;
  3329                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3330                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3331                                  
  3332                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3333                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3334                                  
  3335                                  ; 08/07/2018 - Retro DOS v3.0
  3336                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3337                                  
  3338 00000124 [6506]                  	short_addr  NO_OP			    ; 29     1D
  3339 00000126 [6506]                  	short_addr  NO_OP			    ; 30     1E
  3340                                  
  3341                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3342                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3343                                  ;                                                                          ;
  3344 00000128 [B30F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3345                                  ;                                                                          ;
  3346                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3347                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3348                                          ;short_addr _CPMFUNC			    ; 32     20
  3349                                  
  3350                                  ; 08/07/2018 - Retro DOS v3.0
  3351                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3352                                  
  3353 0000012A [6506]                  	short_addr  NO_OP			    ; 32     20
  3354                                  
  3355 0000012C [851F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3356 0000012E [8A1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3357 00000130 [F817]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3358 00000132 [CE17]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3359                                  
  3360                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3361                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3362                                  
  3363                                  ; Extended Functions
  3364 00000134 [DB0E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3365                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3366                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3367                                  ;                                                                          ;
  3368 00000136 [EF10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3369                                  ;                                                                          ;
  3370                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3371                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3372 00000138 [761F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3373 0000013A [711F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3374 0000013C [640F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3375 0000013E [7B0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3376 00000140 [980A]                          short_addr  _$SET_DATE                      ; 43     2B
  3377 00000142 [B70A]                          short_addr  _$GET_TIME                      ; 44     2C
  3378 00000144 [C80A]                          short_addr  _$SET_TIME                      ; 45     2D
  3379 00000146 [870C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3380                                  
  3381                                  ; Extended functionality group
  3382 00000148 [950E]                          short_addr  _$GET_DMA                       ; 47     2F
  3383 0000014A [5D0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3384 0000014C [0362]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3387                                  ;                                                                          ;
  3388 0000014E [B50F]                          short_addr  _$GET_DPB			    ; 50     32
  3389                                  ;                                                                          ;
  3390                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3391                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3392 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3393 00000152 [9B0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3394 00000154 [CB0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3395 00000156 [6C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3396 00000158 [080F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3397 0000015A [8E0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3398                                  ; XENIX CALLS
  3399                                  ;   Directory Group
  3400 0000015C [7B22]                          short_addr  _$MKDIR			    ; 57     39
  3401 0000015E [C721]                          short_addr  _$RMDIR			    ; 58     3A
  3402 00000160 [0222]                          short_addr  _$CHDIR			    ; 59     3B
  3403                                  ;   File Group
  3404 00000162 [2170]                          short_addr  _$CREAT			    ; 60     3C
  3405 00000164 [4A6F]                          short_addr  _$OPEN			    ; 61     3D
  3406 00000166 [7B67]                          short_addr  _$CLOSE		 	    ; 62     3E
  3407 00000168 [8C68]                          short_addr  _$READ			    ; 63     3F
  3408 0000016A [F268]                          short_addr  _$WRITE			    ; 64     40
  3409 0000016C [7170]                          short_addr  _$UNLINK			    ; 65     41
  3410 0000016E [F768]                          short_addr  _$LSEEK			    ; 66     42
  3411 00000170 [2E70]                          short_addr  _$CHMOD			    ; 67     43
  3412 00000172 [DC22]                          short_addr  _$IOCTL			    ; 68     44
  3413 00000174 [AC69]                          short_addr  _$DUP			    ; 69     45
  3414 00000176 [CA69]                          short_addr  _$DUP2			    ; 70     46
  3415 00000178 [5821]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3416                                  ;   Memory Group
  3417 0000017A [F662]                          short_addr  _$ALLOC			    ; 72     48
  3418 0000017C [7064]                          short_addr  _$DEALLOC                       ; 73     49
  3419 0000017E [4C64]                          short_addr  _$SETBLOCK                      ; 74     4A
  3420                                  ;   Process Group
  3421 00000180 [DD5B]                          short_addr  _$EXEC			    ; 75     4B
  3422 00000182 [3B62]                          short_addr  _$EXIT			    ; 76     4C
  3423 00000184 [D35B]                          short_addr  _$WAIT			    ; 77     4D
  3424 00000186 [9420]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3425                                  ;   Special Group
  3426 00000188 [EA20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3427                                  ; SPECIAL SYSTEM GROUP
  3428                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3429                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3430                                  ;                                                                          ;
  3431 0000018A [BD02]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3432 0000018C [C902]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3433 0000018E [A70F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3434 00000190 [1810]                          short_addr  _$SETDPB			    ; 83     53
  3435                                  ;                                                                          ;
  3436                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438 00000192 [820C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3439                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3440                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3441                                  ;                                                                          ;
  3442 00000194 [DE10]                          short_addr  _$DUP_PDB                       ; 85     55
  3443                                  ;                                                                          ;
  3444                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3445                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3446 00000196 [9770]                          short_addr  _$RENAME			    ; 86     56
  3447 00000198 [5E69]                          short_addr  _$FILE_TIMES                    ; 87     57
  3448 0000019A [A564]                          short_addr  _$ALLOCOPER                     ; 88     58
  3449                                  
  3450                                  ; 08/07/2018 - Retro DOS v3.0
  3451                                  ; -------------------------------------------------------------------------;
  3452                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3453                                  
  3454                                  ; Network extention system calls
  3455 0000019C [1C0F]                          short_addr  _$GetExtendedError              ; 89     59
  3456 0000019E [2271]                          short_addr  _$CreateTempFile                ; 90     5A
  3457 000001A0 [0A71]                          short_addr  _$CreateNewFile                 ; 91     5B
  3458 000001A2 [0373]                          short_addr  _$LockOper                      ; 92     5C
  3459 000001A4 [8B65]                          short_addr  _$ServerCall                    ; 93     5D
  3460 000001A6 [946A]                          short_addr  _$UserOper                      ; 94     5E
  3461 000001A8 [F969]                          short_addr  _$AssignOper                    ; 95     5F
  3462 000001AA [E56E]                          short_addr  _$NameTrans                     ; 96     60
  3463 000001AC [6506]                  	short_addr  NO_OP			    ; 97     61
  3464 000001AE [C902]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3465                                  ; the next call is reserved for hangool sys call
  3466                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3467 000001B0 [490F]                  	short_addr  _$ECS_Call			    ; 99     63
  3468                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3469                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3470                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3471                                  ;                                                                          ;
  3472 000001B2 [D502]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3473                                  ;                                                                          ;
  3474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3476 000001B4 [190D]                          short_addr  _$GetExtCntry                   ; 101    65
  3477 000001B6 [180E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3478 000001B8 [C867]                          short_addr  _$ExtHandle                     ; 103    67
  3479 000001BA [AE67]                          short_addr  _$COMMIT                        ; 104    68
  3480                                  
  3481                                  ; 08/07/2018
  3482                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3483                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3484                                  
  3485                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3486 000001BC [E111]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3487 000001BE [AE67]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3488 000001C0 [6506]                  	short_addr  NO_OP                           ; 107    6B   
  3489                                  						    ; IFS_IOCTL no longer 
  3490                                  						    ; supported
  3491 000001C2 [B871]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3492                                  
  3493                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3494                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3495                                  ;                                                                          ;
  3496                                  ;ifdef ROMEXEC
  3497                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3498                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3499                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3500                                  ;endif
  3501                                  ;                                                                          ;
  3502                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3503                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3504                                  
  3505                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3508                                  
  3509                                  ; 08/07/2018 - Retro DOS v3.0
  3510                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3511                                  
  3512                                  ;	If 	Installed
  3513                                  
  3514                                  align 2
  3515                                  
  3516                                  ;PUBLIC FOO
  3517                                  
  3518                                  FOO:	; LABEL WORD
  3519 000001C4 [2207]                          short_addr  Leave2F
  3520                                  
  3521 000001C6 [C801]                  DTab:	DW  DOSTable
  3522                                  
  3523                                  	;PUBLIC FOO,DTAB
  3524                                  
  3525                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3526                                  
  3527                                  ; 29/04/2019
  3528                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3529                                  
  3530                                  
  3531                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3532                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3533                                         
  3534                                  DOSTable:  ; LABEL  WORD
  3535 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3536 000001C9 [5109]                          short_addr  DOSInstall          ;   0 install check
  3537 000001CB [992F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3538 000001CD [FD0E]                          short_addr  RECSET              ;   2   RECSET
  3539 000001CF [4B09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3540 000001D1 [0151]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3541 000001D3 [B216]                          short_addr  OUTT                ;   5   OUT
  3542 000001D5 [D753]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3543 000001D7 [5D59]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3544 000001D9 [9730]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3545 000001DB [225B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3546 000001DD [B773]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3547 000001DF [E22C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3548 000001E1 [CC2C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3549 000001E3 [0F0B]                          short_addr  DATE16              ;   13  DATE16
  3550 000001E5 [4D12]                          short_addr  Idle		;   14      empty slot
  3551 000001E7 [5659]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3552 000001E9 [4D12]                          short_addr  Idle		;   16      empty slot
  3553 000001EB [1A12]                          short_addr  StrCpy              ;   17  StrCpy
  3554 000001ED [3212]                          short_addr  StrLen              ;   18  StrLen
  3555 000001EF [AC50]                          short_addr  UCase		;   19  UCase
  3556 000001F1 [9A59]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3557 000001F3 [F95A]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3558 000001F5 [F666]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3559 000001F7 [596B]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3560 000001F9 [8F04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3561 000001FB [046B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3562 000001FD [0A6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3563 000001FF [B90B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3564 00000201 [530C]                          short_addr  DSUM                ;   28  DSUM
  3565 00000203 [AD0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3566 00000205 [F811]                          short_addr  StrCmp              ;   30  StrCmp
  3567 00000207 [476A]                          short_addr  InitCDS             ;   31  initcds
  3568 00000209 [C366]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3569 0000020B [E56E]                          short_addr  _$NameTrans		;   33  $NameTrans
  3570 0000020D [8C06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3571 0000020F [3A42]                          short_addr  DEVNAME             ;   35  DEVNAME
  3572 00000211 [4D12]                          short_addr  Idle                ;   36  Idle
  3573 00000213 [4012]                          short_addr  DStrLen             ;   37  DStrLen
  3574 00000215 [F112]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3575 00000217 [7B67]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3576 00000219 [F712]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3577 0000021B [8C68]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3578 0000021D [B112]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3579 0000021F [3413]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3580 00000221 [2313]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3581 00000223 [5113]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3582                                          
  3583                                  	; 29/04/2019 - Retro DOS v4.0
  3584 00000225 [5513]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3585                                  
  3586 00000227 [6506]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3587                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3588                                  
  3589                                  DOSTableEnd:  ; LABEL BYTE
  3590                                  
  3591                                  	;ENDIF
  3592                                  
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  ; BREAK   <Copyright notice and version>
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  ;CODSTRT EQU	$
  3598                                  
  3599                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3600                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3601                                  
  3602                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3603                                  ;       module. The reason is so that the data alignments are the same in
  3604                                  ;       IBM-DOS and MS-DOS up through header.
  3605                                  
  3606                                  	;PUBLIC	HEADER
  3607                                  
  3608                                  HEADER:	; LABEL	BYTE
  3609                                          ;IF	DEBUG
  3610                                          ;DB	13,10,"Debugging DOS version "
  3611                                          ;DB	MAJOR_VERSION + "0"
  3612                                          ;DB	"."
  3613                                          ;DB	(MINOR_VERSION / 10) + "0"
  3614                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3615                                          ;ENDIF
  3616                                  
  3617                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3618                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3619                                  %if 0
  3620                                          ;IF	NOT IBM
  3621                                          DB	13,10,"MS-DOS version "
  3622                                          DB	MAJOR_VERSION + "0"
  3623                                          DB	"."
  3624                                          DB	(MINOR_VERSION / 10) + "0"
  3625                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3626                                          DB	(MINOR_VERSION % 10) + "0"
  3627                                  
  3628                                          ;IF	HIGHMEM
  3629                                          ;DB	"H"
  3630                                          ;ENDIF
  3631                                  
  3632                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3633                                  	; 30/04/2019 - Retro DOS v4.0
  3634                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3635                                  
  3636                                  	;ENDIF
  3637                                  
  3638                                  %endif
  3639                                  
  3640                                  ;IF DEBUG
  3641                                  ;	DB	13,10,"$"
  3642                                  ;ENDIF
  3643                                  
  3644                                  ;include copyrigh.inc
  3645                                  
  3646                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3647                                  
  3648                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3649                                  	;DB	"Licensed Material - Property of Microsoft "
  3650                                  	;DB	"All rights reserved "
  3651                                  
  3652                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3653                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3654                                  
  3655                                  ; 28/12/2022 - Retro DOS v4.1
  3656                                  %if 0
  3657                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3658                                  ms_copyright:
  3659                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3660                                  	db	'Licensed Material - Property of Microsoft '
  3661                                  	db	'All rights reserved '
  3662                                  
  3663                                  %endif
  3664                                  	; 28/12/2022 - Retro DOS v4.1
  3665                                  ms_copyright:
  3666 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3666 00000232 56657273696F6E2035-
  3666 0000023B 2E30               
  3667 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3667 00000246 687420313938312D31-
  3667 0000024F 393931204D6963726F-
  3667 00000258 736F667420436F7270-
  3667 00000261 2E0D0A2400         
  3668                                  
  3669                                  ;============================================================================
  3670                                  ; MSCODE.ASM
  3671                                  ;============================================================================
  3672                                  
  3673                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3674                                  ; 03/03/2018
  3675                                  
  3676                                  ;
  3677                                  ; MSCODE.ASM -- MSDOS code
  3678                                  ;
  3679                                  
  3680                                  ;INCLUDE DOSSEG.ASM
  3681                                  ;INCLUDE STDSW.ASM
  3682                                  
  3683                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3684                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3685                                  
  3686                                  ;.xcref
  3687                                  ;INCLUDE DOSSYM.ASM
  3688                                  ;INCLUDE DEVSYM.ASM
  3689                                  ;.cref
  3690                                  ;.list
  3691                                  
  3692                                  ;IFNDEF  KANJI
  3693                                  ;KANJI   EQU     0       ; FALSE
  3694                                  ;ENDIF
  3695                                  
  3696                                  ;IFNDEF  IBM
  3697                                  ;IBM     EQU     0
  3698                                  ;ENDIF
  3699                                  
  3700                                  ;IFNDEF  HIGHMEM
  3701                                  ;HIGHMEM  EQU     0
  3702                                  ;ENDIF
  3703                                  
  3704                                          ;i_need  USER_SP,WORD
  3705                                          ;i_need  USER_SS,WORD
  3706                                          ;i_need  SAVEDS,WORD
  3707                                          ;i_need  SAVEBX,WORD
  3708                                          ;i_need  INDOS,BYTE
  3709                                          ;i_need  NSP,WORD
  3710                                          ;i_need  NSS,WORD
  3711                                          ;i_need  CURRENTPDB,WORD
  3712                                          ;i_need  AUXSTACK,BYTE
  3713                                          ;i_need  CONSWAP,BYTE
  3714                                          ;i_need  IDLEINT,BYTE
  3715                                          ;i_need  NOSETDIR,BYTE
  3716                                          ;i_need  ERRORMODE,BYTE
  3717                                          ;i_need  IOSTACK,BYTE
  3718                                          ;i_need  WPERR,BYTE
  3719                                          ;i_need  DSKSTACK,BYTE
  3720                                          ;i_need  CNTCFLAG,BYTE
  3721                                          ;i_need  LEAVEADDR,WORD
  3722                                          ;i_need  NULLDEVPT,DWORD
  3723                                  
  3724                                          ;IF NOT IBM
  3725                                          ;i_need  OEM_HANDLER,DWORD
  3726                                          ;ENDIF
  3727                                  
  3728                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3729                                  
  3730                                  ;============================================================================
  3731                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3732                                  ;============================================================================
  3733                                  ; 11/07/2018 - Retro DOS v3.0
  3734                                  ; 01/05/2019 - Retro DOS v4.0
  3735                                  
  3736                                  ; DosCode SEGMENT
  3737                                  
  3738                                  ; ==========================================================================
  3739                                  ;
  3740                                  ; $Set_CTRL_C_Trapping
  3741                                  ;
  3742                                  ; Function:
  3743                                  ;	Enable disable ^C checking in dispatcher
  3744                                  ;
  3745                                  ; Inputs:
  3746                                  ;		AL = 0 read ^C status
  3747                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3748                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3749                                  ;		AL = 5 get DOS boot drive
  3750                                  ;		AL = 6 Get version number
  3751                                  ;			RETURNS:
  3752                                  ;				BH = Minor version number
  3753                                  ;				BL = Major version number
  3754                                  ;				DL = DOS internal revision
  3755                                  ;				DH = DOS type flags
  3756                                  ;					Bit 3 	- DOS in ROM
  3757                                  ;					Bit 4 	- DOS in HMA
  3758                                  ;					Bit 0-2, 5-7 - Reserved
  3759                                  ; Outputs:
  3760                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3761                                  ;
  3762                                  ; History:
  3763                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3764                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3765                                  ; ==========================================================================
  3766                                  
  3767                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3768                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3769                                  
  3770                                  _$SET_CTRL_C_TRAPPING:
  3771                                  	; 01/05/2019 - Retro DOS v4.0
  3772                                  
  3773 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3774 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3775                                  
  3776 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3777 0000026C CF                      	iret
  3778                                  scct_1:
  3779 0000026D 1E                      	push	DS
  3780                                  
  3781                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3782 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3783                                  	
  3784 00000273 50                      	push	AX			; DL only register that can change
  3785 00000274 56                      	push	SI
  3786                                  
  3787 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3788 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3789 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3790 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3791                                  
  3792 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3793 00000280 EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3794                                  scct_2:
  3795 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3796 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3797                                  
  3798 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3799 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3800 0000028A EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3801                                  scct_3:
  3802 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3803 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3804                                  
  3805 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3806 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3807 00000294 EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3808                                  scct_4:
  3809 00000296 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3810 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3811 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3812 0000029F EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3813                                  scct_5:
  3814 000002A1 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3815 000002A4 7511                    	jne	short scct_9s		; If not equal then not get version
  3816                                  	
  3817                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3818                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3819 000002A6 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3820 000002A9 B200                    	mov	dl,0
  3821                                  	;mov	DL,DOSREVNM ; 0
  3822                                  
  3823 000002AB 30F6                    	xor	dh,dh			; assume vanilla DOS
  3824 000002AD 803E[F711]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3825                                  	;je	short @F
  3826 000002B2 7403                    	je	short scct_6
  3827 000002B4 80CE10                  	or	dh,10h
  3828                                  	;or	DH,DOSINHMA ; 10h
  3829                                  ;@@:
  3830                                  scct_6:
  3831                                  
  3832                                  ;ifdef ROMDOS
  3833                                  ;	or	DH, DOSINROM
  3834                                  ;endif ; ROMDOS
  3835                                  
  3836                                  scct_9s:
  3837 000002B7 5E                      	pop	SI
  3838 000002B8 58                      	pop	AX
  3839 000002B9 1F                      	pop	DS
  3840                                  scct_9f:
  3841 000002BA CF                      	iret
  3842                                  
  3843                                  SetCtrlShortEntry:			; This allows a conditional entry
  3844                                  					; from main dispatch code
  3845 000002BB EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3846                                  
  3847                                  ; ==========================================================================
  3848                                  ;									   
  3849                                  ; The following two routines are dispatched to directly with ints disabled
  3850                                  ; immediately after the int 21h entry.	no DIS state is set.
  3851                                  ;
  3852                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3853                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3854                                  ;
  3855                                  ; ==========================================================================
  3856                                  
  3857                                  _$SET_CURRENT_PDB:
  3858 000002BD 1E                      	push	DS
  3859                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3860 000002BE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3861 000002C3 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3862 000002C7 1F                      	pop	DS
  3863 000002C8 CF                      	iret
  3864                                  
  3865                                  ; ==========================================================================
  3866                                  ;
  3867                                  ; $get_current_PDB returns in BX the current process
  3868                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3869                                  ;
  3870                                  ; ==========================================================================
  3871                                  
  3872                                  _$GET_CURRENT_PDB:
  3873 000002C9 1E                      	push	DS
  3874                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3875 000002CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3876 000002CF 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3877 000002D3 1F                      	pop	DS
  3878 000002D4 CF                      	iret
  3879                                  
  3880                                  ; ==========================================================================
  3881                                  ;
  3882                                  ; Sets the Printer Flag to whatever is in AL.
  3883                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3884                                  ;
  3885                                  ; ==========================================================================
  3886                                  
  3887                                  _$SET_PRINTER_FLAG:
  3888 000002D5 1E                      	push	ds
  3889                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3890 000002D6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3891 000002DB A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3892 000002DE 1F                      	pop	ds
  3893 000002DF CF                      	iret
  3894                                  
  3895                                  ; 01/05/2019 - Retro DOS v4.0
  3896                                  ; 08/07/2018 - Retro DOS v3.0
  3897                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3898                                  
  3899                                  ; ----------------------------------------------------------------------------
  3900                                  ; BREAK   <System call entry points and dispatcher>
  3901                                  ; ----------------------------------------------------------------------------
  3902                                  
  3903                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3904                                  
  3905                                  ; ==========================================================================
  3906                                  ;
  3907                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3908                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3909                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3910                                  ;
  3911                                  ; ==========================================================================
  3912                                  
  3913                                  SYSTEM_CALL:    ; PROC NEAR
  3914                                  
  3915                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3916                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3917                                  
  3918                                  ;entry	QUIT				
  3919                                  QUIT:				; INT 20H entry point	
  3920                                  	;MOV	AH,0
  3921 000002E0 30E4                    	xor	ah,ah ; 08/07/2018
  3922 000002E2 EB36                    	JMP     SHORT SAVREGS
  3923                                  
  3924                                  ; ---------------------------------------------------------------------------
  3925                                  
  3926                                  	; The system call in AH is out of the range that we know how
  3927                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3928                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3929                                  	; error as this may break some programs compatability.
  3930                                  
  3931                                  BADCALL:
  3932                                          ;MOV	AL,0
  3933 000002E4 30C0                    	xor	al,al ; 08/07/2018
  3934                                  IRETT:	; 06/05/2019
  3935                                  _IRET:
  3936 000002E6 CF                              IRET
  3937                                  
  3938                                  ; ---------------------------------------------------------------------------
  3939                                  
  3940                                  ; 01/05/2019 - Retro DOS v4.0
  3941                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3942                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3943                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3944                                  
  3945                                  	; An alternative method of entering the system is to perform a
  3946                                  	; CALL 5 in the program segment prefix with the contents of CL
  3947                                  	; indicating what system call the user would like. A subset of
  3948                                  	; the possible system calls is allowed here only the
  3949                                  	; CPM-compatible calls may get dispatched.
  3950                                  
  3951                                  		; System call entry point and dispatcher
  3952                                  CALL_ENTRY:
  3953 000002E7 1E                      	push	DS
  3954                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3955 000002E8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3956 000002ED 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3957                                  
  3958 000002F1 58                              POP     AX                      ; IP from the long call at 5
  3959 000002F2 58                              POP     AX                      ; Segment from the long call at 5
  3960 000002F3 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3961                                  
  3962                                  		; Re-order the stack to simulate an interrupt 21.
  3963                                  
  3964 000002F7 9C                      	PUSHF				; Start re-ordering the stack
  3965 000002F8 FA                      	CLI
  3966 000002F9 50                              PUSH    AX                      ; Save segment
  3967 000002FA FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3968                                  	; 04/11/2022
  3969                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3970                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3971 000002FE FF36[EC05]              	push	word [SAVEDS]
  3972 00000302 1F                      	pop	ds
  3973                                  	;
  3974                                  	;cmp	cl,36
  3975 00000303 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3976 00000306 77DC                            JA      SHORT BADCALL
  3977 00000308 88CC                            MOV     AH,CL
  3978                                  	; 08/07/2018
  3979 0000030A EB0E                    	jmp	short SAVREGS
  3980                                  
  3981                                  ; ---------------------------------------------------------------------------
  3982                                  
  3983                                  ; 01/05/2019 - Retro DOS v4.0
  3984                                  
  3985                                  	; This is the normal INT 21 entry point. We first perform a
  3986                                  	; quick test to see if we need to perform expensive DOS-entry
  3987                                  	; functions. Certain system calls are done without interrupts
  3988                                  	; being enabled.
  3989                                  
  3990                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3991                                  
  3992                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3993                                  ; 04/11/2022
  3994                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3995                                  
  3996                                  COMMAND:
  3997                                  	; 22/12/2022
  3998 0000030C FA                      	cli
  3999                                  
  4000                                  	; 01/05/2019 - Retro DOS v4.0
  4001                                  	; 08/07/2018 - Retro DOS v3.0
  4002                                  
  4003                                  ; 22/12/2022
  4004                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4005                                  	;IF	NOT IBM
  4006 0000030D 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4007 00000310 7203                    	JB	SHORT NOTOEM
  4008 00000312 E98401                  	JMP	_$SET_OEM_HANDLER
  4009                                  
  4010                                  NOTOEM:
  4011                                  	;ENDIF
  4012                                  
  4013                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4014                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4015                                  
  4016                                  	; 22/12/2022
  4017                                  	;cli	; 08/07/2018
  4018                                  
  4019                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4020                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4021                                  	; 04/11/2022
  4022 00000315 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4023                                  	;JBE	SHORT SAVREGS
  4024 00000318 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4025                                  
  4026                                  	; 31/05/2019
  4027                                  
  4028                                  	; The following set of calls are issued by the server at
  4029                                  	; *arbitrary* times and, therefore, must be executed on
  4030                                  	; the user's entry stack and executed with interrupts off.
  4031                                  
  4032                                  SAVREGS:
  4033                                  	; 01/05/2019 - Retro DOS v4.0
  4034                                  	; 10/08/2018
  4035                                  	; 08/07/2018 - Retro DOS v3.0
  4036 0000031A 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4037                                  	;;je	_$SET_CTRL_C_TRAPPING
  4038                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4039 0000031D 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4040                                  	; 04/11/2022
  4041 0000031F 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4042 00000321 80FC64                  	cmp	ah,64h			; Check Max case number
  4043 00000324 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4044 00000326 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4045 00000328 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4046 0000032B 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4047 0000032D 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4048 00000330 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4049 00000332 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4050 00000335 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4051                                  
  4052                                  SaveAllRegs:
  4053                                  	; 01/05/2019 - Retro DOS v4.0
  4054                                  
  4055 00000337 06                              push	ES
  4056 00000338 1E                      	push	DS
  4057 00000339 55                      	push	BP
  4058 0000033A 57                      	push	DI
  4059 0000033B 56                      	push	SI
  4060 0000033C 52                      	push	DX
  4061 0000033D 51                      	push	CX
  4062 0000033E 53                      	push	BX
  4063 0000033F 50                      	push	AX
  4064                                  
  4065 00000340 8CD8                    	mov	AX,DS
  4066                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4067 00000342 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4068 00000347 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4069 0000034A 891E[EA05]              	mov	[SAVEBX],BX
  4070                                  
  4071                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4072                                  	
  4073                                  	; 08/07/2018 - Retro DOS v3.0        
  4074                                  	;xor     ax,ax
  4075                                  	;mov     [USER_ID],ax
  4076                                  	;mov     ax,[CurrentPDB]
  4077                                  	;mov     [PROC_ID],ax
  4078                                  
  4079                                  	; 01/05/2019
  4080                                  
  4081                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4082                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4083                                  	; this!!!
  4084                                  
  4085 0000034E A1[8405]                	MOV     AX,[USER_SP]
  4086 00000351 A3[F205]                        MOV     [NSP],AX
  4087 00000354 A1[8605]                        MOV     AX,[USER_SS]
  4088 00000357 A3[F005]                        MOV     [NSS],AX
  4089                                  
  4090 0000035A 31C0                    	xor	AX,AX ; 0
  4091 0000035C A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4092                                  
  4093 0000035F F606[2F10]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4094 00000364 7503                    	jnz	short set_indos_flag	; if win386 present
  4095 00000366 A3[3E03]                	mov	[USER_ID],AX
  4096                                  set_indos_flag:
  4097 00000369 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4098                                  
  4099 0000036D 8926[8405]                      MOV     [USER_SP],SP
  4100 00000371 8C16[8605]                      MOV     [USER_SS],SS
  4101                                  
  4102 00000375 A1[3003]                	mov	AX,[CurrentPDB]
  4103 00000378 A3[3C03]                	mov	[PROC_ID],AX
  4104 0000037B 8ED8                    	mov	DS,AX
  4105 0000037D 58                      	pop	AX
  4106 0000037E 50                      	push	AX
  4107                                  
  4108                                  	; save user stack in his area for later returns (possibly from EXEC)
  4109                                  
  4110 0000037F 89262E00                        MOV     [PDB.USER_STACK],SP
  4111 00000383 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4112                                  
  4113                                  	; 18/07/2018
  4114                                  	;mov	byte [CS:FSHARING], 0
  4115                                  
  4116                                  	;MOV     BX,CS			; no holes here.
  4117                                  	;MOV     SS,BX
  4118                                  
  4119                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4120 00000387 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4121                                  					;entry	REDISP
  4122                                  REDISP:
  4123 0000038C BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4124 0000038F FB                              STI                             ; stack is in our space now...
  4125                                  
  4126 00000390 8CD3                    	mov	bx,ss
  4127 00000392 8EDB                    	mov	ds,bx
  4128                                  
  4129 00000394 93                      	xchg	ax,bx
  4130                                  
  4131 00000395 31C0                    	xor	ax,ax ; 0
  4132                                  
  4133                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4134                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4135                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4136                                  
  4137                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4138                                  
  4139                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4140                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4141                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4142                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4143                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4144                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4145                                  	;inc	ax
  4146                                  	;;inc	AL			; AL = 1
  4147                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4148                                  
  4149                                  	; 15/12/2022
  4150 00000397 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4152 0000039A 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4153 000003A0 A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	byte [IDLEINT],1
  4155 000003A3 A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4156 000003A6 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4157 000003A9 40                      	inc	ax
  4158                                  	;inc	al			; AL = 1
  4159 000003AA A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4160                                  
  4161 000003AD 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4162                                  
  4163 000003AE 88E3                    	MOV     BL,AH			
  4164 000003B0 D1E3                            SHL     BX,1			; 2 bytes per call in table
  4165                                         
  4166 000003B2 FC                      	CLD
  4167                                  		; Since the DOS maintains mucho state information across system
  4168                                  		; calls, we must be very careful about which stack we use.
  4169                                  		; First, all abort operations must be on the disk stack. This
  4170                                  		; is due to the fact that we may be hitting the disk (close
  4171                                  		; operations, flushing) and may need to report an INT 24.
  4172                                          
  4173 000003B3 08E4                    	OR      AH,AH
  4174 000003B5 7416                            JZ      SHORT DSKROUT		; ABORT
  4175                                  
  4176                                          ;CMP	AH,12
  4177                                          ;JBE	SHORT IOROUT		; Character I/O
  4178                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4179                                          ;JZ	SHORT IOROUT
  4180                                          ;CMP	AH,SET_CURRENT_PDB
  4181                                          ;JNZ	SHORT DSKROUT
  4182                                  
  4183                                  		; Second, PRINT and PSPRINT and the server issue
  4184                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4185                                  		; This call MUST, therefore, use the AUXSTACK.
  4186                                  
  4187                                  	; 10/08/2018
  4188 000003B7 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4189 000003BA 743D                    	je      short DISPCALL
  4190                                  	
  4191                                  	; 01/05/2019
  4192                                  	
  4193                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4194                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4195                                  
  4196 000003BC 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4197 000003BF 770C                    	ja      short DSKROUT
  4198                                  
  4199                                  IOROUT:
  4200                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4201                                  	; (ss: prefix was not needed here! ds=ss)
  4202                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4203                                  	; 15/12/2022
  4204 000003C1 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4205 000003C6 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4206 000003C8 BC[A00A]                        MOV     SP,IOSTACK
  4207 000003CB EB2C                            JMP     SHORT DISPCALL
  4208                                  
  4209                                  		; We are on a system call that is classified as "the rest".
  4210                                  		; We place ourselves onto the DSKSTACK and away we go.
  4211                                  		; We know at this point:
  4212                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4213                                  		;    ErrorMode and WpErr
  4214                                  		; *  That there can be no critical sections in effect.
  4215                                  		;    We signal the server to remove all the resources.
  4216                                  
  4217                                  DSKROUT:
  4218                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4219                                  	; 08/07/2018 - Retro DOS v3.0
  4220 000003CD A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4221 000003D0 C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4222                                  	
  4223 000003D5 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4224 000003DA C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4225                                  	                   		; make sure flags are reset
  4226                                  
  4227                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4228                                  	; (ss: prefix was not needed here! ds=ss)
  4229                                  
  4230                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4231                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4232                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4233                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4234                                                                          ; make sure flags are reset
  4235 000003DF 50                      	push    ax
  4236 000003E0 B482                    	mov     ah,82h			; Release all resource information
  4237 000003E2 CD2A                    	int     2Ah 		; Microsoft Networks 
  4238                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4239 000003E4 58                      	pop     ax
  4240                                  
  4241                                  		; Since we are going to be running on the DSKStack and since
  4242                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4243                                  		; generation of INT 28's.
  4244                                  
  4245                                  	; 15/12/2022
  4246                                  	;mov     byte [ss:IDLEINT],0
  4247                                  	;
  4248                                          ;mov	sp,DSKSTACK
  4249                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4250                                          ;jz	short DISPCALL
  4251                                  
  4252 000003E5 C606[5803]00            	mov     byte [IDLEINT],0
  4253                                  
  4254 000003EA BC[2009]                	MOV     SP,DSKSTACK
  4255 000003ED F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4256 000003F2 7405                    	JZ      SHORT DISPCALL
  4257                                  
  4258 000003F4 50                              PUSH    AX
  4259                                          ;invoke	DSKSTATCHK
  4260 000003F5 E8224D                          CALL	DSKSTATCHK
  4261 000003F8 58                      	POP     AX
  4262                                  DISPCALL:
  4263                                  	; 01/05/2019 - Retro DOS v4.0
  4264 000003F9 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4265                                  
  4266                                  	; 15/12/2022
  4267 000003FE 871E[EA05]              	xchg	bx,[SAVEBX]
  4268 00000402 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4269                                  
  4270                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4271                                  	; (ss: prefix was not needed here! ds=ss)        
  4272                                  	;xchg	bx,[ss:SAVEBX]
  4273                                  	;mov	ds,[ss:SAVEDS]
  4274                                  
  4275 00000406 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4276                                  
  4277                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4278                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4279                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4280                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4281                                  	; because this bit is used to indicate to the next int 21 call that
  4282                                  	; the previous int 21 was an exec.
  4283                                  	;
  4284                                  	; So do not add any code between the call above and the label 
  4285                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4286                                  
  4287                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4288 0000040B 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4289                                  
  4290                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4291                                  ; DOSCODE:41F7h
  4292                                  
  4293                                  ;entry LEAVE
  4294                                  ;;;_LEAVE:				; Exit from a system call
  4295                                  LeaveDOS: ; 18/07/2018 
  4296                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4297 00000411 FA                      	CLI
  4298                                  
  4299                                  	; 01/05/2019
  4300                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4301 00000412 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4302 00000417 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4303 0000041C 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4304                                  
  4305                                  LeaveA20On:
  4306 0000041E FE0E[2103]                      DEC     BYTE [INDOS]
  4307                                          ; 04/11/2022
  4308 00000422 8E16[8605]              	mov	ss,[USER_SS]
  4309 00000426 8B26[8405]              	MOV     SP,[USER_SP]
  4310                                  	;MOV	SS,[USER_SS]
  4311 0000042A 89E5                    	MOV     BP,SP
  4312                                  	;MOV	[BP.user_AX],AL	
  4313                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4314                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4315                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4316                                  	; 15/12/2022
  4317 0000042C 884600                  	MOV	[BP],AL
  4318 0000042F A1[F205]                	MOV     AX,[NSP]
  4319 00000432 A3[8405]                        MOV     [USER_SP],AX
  4320 00000435 A1[F005]                        MOV     AX,[NSS]
  4321 00000438 A3[8605]                        MOV     [USER_SS],AX
  4322                                  
  4323 0000043B 58                      	pop	AX
  4324 0000043C 5B                      	pop	BX
  4325 0000043D 59                      	pop	CX
  4326 0000043E 5A                      	pop	DX
  4327 0000043F 5E                      	pop	SI
  4328 00000440 5F                      	pop	DI
  4329 00000441 5D                      	pop	BP
  4330 00000442 1F                      	pop	DS
  4331 00000443 07                      	pop	ES
  4332                                  
  4333 00000444 CF                              IRET
  4334                                  
  4335                                  disa20:	   				; M068 - Start
  4336 00000445 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4337 00000449 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4338 0000044D 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4339                                  					;    a20 off
  4340                                  					; Y: turn a20 off and dec a20off_count
  4341 0000044F FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4342                                   					; Start - M004
  4343 00000453 1E                      	push	ds			; segment of stub
  4344 00000454 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4345 00000457 53                      	push	bx
  4346 00000458 CB                      	retf	  			; go to stub
  4347                                  					; End - M004
  4348                                  ;SYSTEM_CALL ENDP
  4349                                  
  4350                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4351                                  ; 04/11/2022
  4352                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4353                                  
  4354                                  ; ==========================================================================
  4355                                  ;
  4356                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4357                                  ; the stack prior to giving the user control
  4358                                  ;
  4359                                  ; ==========================================================================
  4360                                  
  4361                                  ; 01/05/2019 - Retro DOS v4.0
  4362                                  
  4363                                          ;procedure restore_world,NEAR
  4364                                  restore_world:
  4365                                  	;getdseg <es>		; es -> dosdata
  4366 00000459 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4367                                  
  4368 0000045E 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4369                                  
  4370 00000463 58                              POP     AX
  4371 00000464 5B                              POP     BX
  4372 00000465 59                              POP     CX
  4373 00000466 5A                              POP     DX
  4374 00000467 5E                              POP     SI
  4375 00000468 5F                              POP     DI
  4376 00000469 5D                              POP     BP
  4377 0000046A 1F                              POP     DS
  4378                                  
  4379 0000046B 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4380                                  
  4381                                  ;restore_world	ENDP
  4382                                  
  4383                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4384                                  
  4385                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4386                                  ; 04/11/2022
  4387                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4388                                  
  4389                                  ; ==========================================================================
  4390                                  ;
  4391                                  ; Save_World saves complete registers on the stack
  4392                                  ;
  4393                                  ; ==========================================================================
  4394                                  
  4395                                          ;procedure save_world,NEAR
  4396                                  save_world:
  4397                                  	;getdseg <es>		; es -> dosdata
  4398 00000470 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4399                                  
  4400 00000475 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4401                                  
  4402                                  	; 12/05/2019
  4403                                          
  4404 0000047A 1E                      	PUSH    DS
  4405 0000047B 55                              PUSH    BP
  4406 0000047C 57                              PUSH    DI
  4407 0000047D 56                              PUSH    SI
  4408 0000047E 52                              PUSH    DX
  4409 0000047F 51                              PUSH    CX
  4410 00000480 53                              PUSH    BX
  4411 00000481 50                              PUSH    AX
  4412                                  
  4413 00000482 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4414                                  
  4415 00000487 55                      	push	BP		
  4416 00000488 89E5                    	mov	BP,SP
  4417 0000048A 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4418 0000048D 5D                      	pop	BP
  4419                                  	
  4420 0000048E C3                      	retn
  4421                                  
  4422                                  ;save_world	ENDP
  4423                                  
  4424                                  ; 01/05/2019
  4425                                  
  4426                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4427                                  ; 04/11/2022
  4428                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4429                                  
  4430                                  ; ==========================================================================
  4431                                  ;
  4432                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4433                                  ;
  4434                                  ; ==========================================================================
  4435                                  
  4436                                          ;procedure get_user_stack,NEAR
  4437                                  Get_User_Stack:
  4438                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4439 0000048F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4440 00000494 C536[8405]                      lds	si,[USER_SP]
  4441 00000498 C3                      	retn
  4442                                  
  4443                                  ;get_user_stack  ENDP
  4444                                  
  4445                                  ; 22/12/2022
  4446                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4447                                  ;%if 0
  4448                                  
  4449                                  ; ---------------------------------------------------------------------------
  4450                                  ;
  4451                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4452                                  ; Inputs:
  4453                                  ;	User registers, User Stack, INTS disabled
  4454                                  ;	If CALL F8, DS:DX is new handler address
  4455                                  ; Function:
  4456                                  ;	Process OEM INT 21 extensions
  4457                                  ; Outputs:
  4458                                  ;	Jumps to OEM_HANDLER if appropriate
  4459                                  ;
  4460                                  ; ---------------------------------------------------------------------------
  4461                                  
  4462                                  ;IF	NOT IBM
  4463                                  
  4464                                  _$SET_OEM_HANDLER:
  4465                                  	; 01/05/2019 - Retro DOS v4.0
  4466                                  	
  4467                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4468                                  	;(jb	short NOTOOEM)
  4469                                  
  4470 00000499 06                      	push	es ; *
  4471                                  	;getdseg <es>			; es -> dosdata
  4472 0000049A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4473                                  
  4474 0000049F 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4475                                  						; (message) request	
  4476                                  	; AH = 0F8h = SET OEM HANDLER
  4477                                  
  4478 000004A1 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4479 000004A6 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4480                                  
  4481 000004AB 07                      	pop	es ; *
  4482                                  
  4483 000004AC CF                      	IRET                            ; Quick return, Have altered no registers
  4484                                  
  4485                                  check_trueversion_request:
  4486                                  	; 18/07/2019 - Retro DOS v3.0
  4487                                  
  4488                                  	; Retro DOS v2.0 - 20/04/2018
  4489 000004AD 83F8FF                  	CMP	AX,0FFFFh
  4490                                  	; 18/07/2018
  4491 000004B0 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4492                                  
  4493                                  	; 01/05/2019
  4494 000004B2 07                      	pop	es ; *
  4495                                  
  4496 000004B3 B40E                    	mov	ah,0Eh
  4497                                  
  4498                                  	; Retro DOS v4.0 feature only!
  4499 000004B5 81FBA101                	cmp	bx,417  ; Signature to bypass
  4500                                  			; Retro DOS true version message	
  4501 000004B9 7414                    	je	short true_version_iret
  4502                                  
  4503 000004BB 56                      	push	si
  4504 000004BC 53                      	push	bx
  4505                                  
  4506 000004BD BE[BF00]                	mov	si,RETRODOSMSG
  4507                                  wrdosmsg:
  4508                                  	;movb	ah,0Eh
  4509 000004C0 BB0700                  	mov	bx,7
  4510                                  wrdosmsg_nxt:
  4511 000004C3 2EAC                    	cs	lodsb
  4512 000004C5 3C24                    	cmp	al,'$'
  4513 000004C7 7404                    	je	short wrdosmsg_ok		
  4514 000004C9 CD10                    	int	10h
  4515 000004CB EBF6                    	jmp	short wrdosmsg_nxt
  4516                                  
  4517                                  wrdosmsg_ok:
  4518 000004CD 5B                      	pop	bx
  4519 000004CE 5E                      	pop	si
  4520                                  
  4521                                  true_version_iret:
  4522                                  	; ah = 0Eh
  4523                                  	;mov	al,40h ; Retro DOS v4.0
  4524                                  	; 
  4525 000004CF B041                    	mov	al,41h ; Retro DOS v4.1 
  4526 000004D1 CF                      	iret
  4527                                  
  4528                                  	; If above F8 try to jump to handler
  4529                                  
  4530                                  DO_OEM_FUNC:
  4531                                  	; 01/05/2019
  4532 000004D2 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4533 000004D8 7504                    	JNE     short OEM_JMP
  4534 000004DA 07                      	pop	es ; *
  4535 000004DB E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4536                                  OEM_JMP:
  4537 000004DE 06                      	push	es
  4538 000004DF 1F                      	pop	ds ; DOSDATA segment !
  4539 000004E0 07                      	pop	es ; *
  4540                                  
  4541                                  	; 22/12/2022
  4542 000004E1 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4543                                  
  4544 000004E2 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4545                                  
  4546                                  ;       ENDIF
  4547                                  
  4548                                  ; ---------------------------------------------------------------------------
  4549                                  
  4550                                  ;%endif
  4551                                  
  4552                                  ;============================================================================
  4553                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4554                                  ;============================================================================
  4555                                  ; 17/07/2018 - Retro DOS v3.0
  4556                                  
  4557                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4558                                  ;	NAME	IBMCODE
  4559                                  
  4560                                  ;BREAK <NullDev -- Driver for null device>
  4561                                  
  4562                                  ; ROMDOS note:
  4563                                  ;	NUL device driver used to be here, but it was removed and placed in
  4564                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4565                                  ;	header, which is also in DOSDATA.
  4566                                  
  4567                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4568                                  
  4569                                  ;----------------------------------------------------------------------------
  4570                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4571                                  ;----------------------------------------------------------------------------
  4572                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4573                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4574                                  
  4575                                  ;Public MSC001S,MSC001E
  4576                                  ;MSC001S label byte
  4577                                  	;IF	IBM
  4578                                  ; Codes returned by BIOS
  4579                                  ERRIN:
  4580 000004E6 02                      	DB	2			; NO RESPONSE
  4581 000004E7 06                      	DB	6			; SEEK FAILURE
  4582 000004E8 0C                      	DB	12			; GENERAL ERROR
  4583 000004E9 04                      	DB	4			; BAD CRC
  4584 000004EA 08                      	DB	8			; SECTOR NOT FOUND
  4585 000004EB 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4586                                  ERROUT:
  4587                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4588 000004EC 80                      	DB	80H			; NO RESPONSE
  4589 000004ED 40                      	DB	40H			; Seek failure
  4590 000004EE 02                      	DB	2			; Address Mark not found
  4591 000004EF 10                      	DB	10H			; BAD CRC
  4592 000004F0 04                      	DB	4			; SECTOR NOT FOUND
  4593 000004F1 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4594                                  
  4595                                  NUMERR	EQU	$-ERROUT
  4596                                  	;ENDIF
  4597                                  ;MSC001E label byte
  4598                                  ;----------------------------------------------------------------------------
  4599                                  
  4600                                  ;============================================================================
  4601                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4602                                  ;============================================================================
  4603                                  ; 18/07/2018 - Retro DOS v3.0
  4604                                  ; 15/05/2019 - Retro DOS v4.0
  4605                                  
  4606                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4607                                  
  4608                                  ;   AbsSetup - setup for abs disk functions
  4609                                  ;----------------------------------------------------------------------------
  4610                                  
  4611                                  AbsSetup:
  4612 000004F2 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4613 000004F7 FB                      	STI
  4614 000004F8 FC                      	CLD
  4615 000004F9 1E                      	PUSH	DS
  4616 000004FA 16                      	push	ss
  4617 000004FB 1F                      	pop	ds
  4618 000004FC E80C01                  	CALL	GETBP
  4619 000004FF 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4620                                  	;mov	word [es:bp+1Fh]
  4621 00000501 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4622                                  errdriv:
  4623 00000507 1F                      	POP	DS
  4624 00000508 7301                    	jnc	short AbsSetup2
  4625                                  AbsSetup_retn:
  4626 0000050A C3                      	retn
  4627                                  
  4628                                  AbsSetup2:
  4629                                  	; 15/05/2019 - Retro DOS v4.0
  4630                                  	; MSDOS 6.0
  4631                                  					; SS override
  4632 0000050B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4633 00000512 E83F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4634 00000515 72F3                    	jc	short AbsSetup_retn
  4635 00000517 E89256                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4636                                  
  4637                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4638 0000051A 1E                      	PUSH	DS
  4639 0000051B 56                      	PUSH	SI
  4640 0000051C 50                      	PUSH	AX
  4641                                  
  4642 0000051D 16                      	push	ss
  4643 0000051E 1F                      	pop	ds
  4644                                  	
  4645 0000051F BE[BE03]                	MOV	SI,OPENBUF
  4646 00000522 8804                    	MOV	[SI],AL
  4647 00000524 800441                  	ADD	BYTE [SI],"A"
  4648 00000527 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4649 0000052C B80003                  	MOV	AX,0300H
  4650 0000052F F8                      	CLC
  4651 00000530 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4652                                  		
  4653                                  		; 04/11/2022
  4654                                  		; (INT 2Ah - AX = 0300h)
  4655                                  		; Microsoft Networks - CHECK DIRECT I/O
  4656                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4657                                  		;    only drive specifier--must include the colon)
  4658                                  		; Return: CF clear if absolute disk access allowed
  4659                                  
  4660 00000532 58                      	POP	AX
  4661 00000533 5E                      	POP	SI
  4662 00000534 1F                      	POP	DS
  4663 00000535 73D3                    	jnc	short AbsSetup_retn
  4664                                  
  4665                                  	;mov	word [ss:EXTERR],32h
  4666 00000537 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4667 0000053E C3                      	retn
  4668                                  
  4669                                  ;---------------------------------------------------------------------------
  4670                                  ;
  4671                                  ; Procedure Name : ABSDRD
  4672                                  ;
  4673                                  ; Interrupt 25 handler. Performs absolute disk read.
  4674                                  ; Inputs:	AL - 0-based drive number
  4675                                  ;		DS:BX point to destination buffer
  4676                                  ;		CX number of logical sectors to read
  4677                                  ;		DX starting logical sector number (0-based)
  4678                                  ; Outputs:	Original flags still on stack
  4679                                  ;		Carry set
  4680                                  ;		    AH error from BIOS
  4681                                  ;		    AL same as low byte of DI from INT 24
  4682                                  ;
  4683                                  ;---------------------------------------------------------------------------
  4684                                          ;procedure   ABSDRD,FAR
  4685                                  ABSDRD:
  4686                                  	; 15/05/2019 - Retro DOS v4.0
  4687                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4688                                  	; 04/11/2022
  4689                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4690                                  	
  4691                                  	; MSDOS 6.0
  4692 0000053F FA                      	CLI
  4693                                  	
  4694                                  ;	set up ds to point to DOSDATA
  4695                                  
  4696 00000540 50                      	push	ax			; preserve AX value
  4697 00000541 8CD8                    	mov	ax,ds			; store DS value in AX
  4698                                  	;getdseg <ds>
  4699 00000543 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4700 00000548 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4701 0000054B 58                      	pop	ax			; restore AX value
  4702                                  
  4703                                  	; M072:
  4704                                  	; We shall save es on the user stack here. We need to use ES in
  4705                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4706                                  	; time in order to restore the user stack.
  4707                                  
  4708 0000054C 06                      	push	es  ; ****		; M072
  4709                                  
  4710 0000054D 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4711 00000551 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4712                                  
  4713                                  ; 	set up ss to point to DOSDATA
  4714                                  ;
  4715                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4716                                  ; version of the getdseg macro with the SS register! An interrupt will
  4717                                  ; sneak through.
  4718                                  
  4719                                  ;ifndef ROMDOS
  4720                                  	;getdseg <ss>			; cli in entry of routine
  4721 00000555 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4722                                  ;else
  4723                                  ;	mov	ds, cs:[BioDataSeg]
  4724                                  ;	assume	ds:bdata
  4725                                  ;
  4726                                  ;	mov	ss, ds:[DosDataSg]
  4727                                  ;	assume	ss:DOSDATA
  4728                                  ;
  4729                                  ;endif ; ROMDOS
  4730                                  
  4731 0000055A BC[2009]                	MOV	SP,DSKSTACK
  4732                                  
  4733 0000055D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4734                                  
  4735 00000561 06                      	push	es ; *** (MSDOS 6.21)
  4736 00000562 E80BFF                  	call	save_world		; save all regs
  4737                                  
  4738 00000565 06                      	PUSH	ES ; **
  4739 00000566 E889FF                  	CALL	AbsSetup
  4740 00000569 723D                    	JC	short ILEAVE
  4741                                  
  4742                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4743                                  	;  the secondary cache. The secondary cache does not check for media
  4744                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4745                                  	;  read, and get data from the previous disk. To get around this,
  4746                                  	;  we just won't use the secondary cache for absolute disk reads.
  4747                                  	;                                                      -mw 8/5/88
  4748                                  
  4749                                  	;EnterCrit critDisk
  4750 0000056B E8E80D                  	call	ECritDisk
  4751 0000056E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4752                                  	;LeaveCrit critDisk
  4753 00000574 E8FA0D                  	call	LCritDisk
  4754                                  
  4755                                          ;invoke	DSKREAD
  4756 00000577 E84A32                  	CALL	DSKREAD
  4757 0000057A 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4758                                  
  4759 0000057C 89F9                            mov     cx,di
  4760 0000057E 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4761 00000583 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4762                                  
  4763                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4764                                  ;            sectors, also termed an "Extent".)
  4765                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4766                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4767                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4768                                  ;
  4769                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4770                                  ;	buffers must be "read" into the transfer memory block, so that the
  4771                                  ;       transfer memory reflects the most recent data.
  4772                                  
  4773                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4774 00000588 E88934                          call	DskRdBufScan
  4775 0000058B EB1B                    	jmp     short ILEAVE
  4776                                  
  4777                                  TLEAVE:
  4778 0000058D 7419                    	JZ	short ILEAVE
  4779                                  
  4780                                  ERR_LEAVE:				; M039
  4781                                  	; 15/07/2018 - Retro DOS v3.0
  4782                                          ;IF	IBM
  4783                                  ; Translate the error code to ancient 1.1 codes
  4784 0000058F 06                              PUSH    ES ; *
  4785 00000590 0E                              PUSH    CS
  4786 00000591 07                              POP     ES
  4787 00000592 30E4                            XOR     AH,AH			; Nul error code
  4788                                  	;mov	cx,6
  4789 00000594 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4790 00000597 BF[E604]                        MOV     DI,ERRIN		; Point to error conditions
  4791 0000059A F2AE                            REPNE   SCASB
  4792 0000059C 7504                            JNZ     SHORT LEAVECODE		; Not found
  4793                                  	;mov	ah,[ES:DI+5]
  4794 0000059E 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4795                                  LEAVECODE:
  4796 000005A2 07                              POP     ES ; *
  4797                                  	; 15/05/2019 - Retro DOS v4.0
  4798 000005A3 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4799                                          ;ENDIF
  4800                                  
  4801 000005A7 F9                              STC
  4802                                  ILEAVE:
  4803                                  	; 15/05/2019
  4804 000005A8 07                              POP     ES ; **
  4805 000005A9 E8ADFE                  	call	restore_world
  4806 000005AC 07                              pop	es ; *** (MSDOS 6.21)
  4807 000005AD FA                      	CLI
  4808 000005AE 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4809 000005B2 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4810 000005B7 16                              push	ss			; M072 - Start
  4811 000005B8 07                      	pop	es			; es - dosdata
  4812 000005B9 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4813 000005BE 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4814 000005C3 07                      	pop	es  ; ****		; Note es was saved on user
  4815                                  					; stack at entry 
  4816                                  					; M072 - End
  4817 000005C4 FB                              STI
  4818 000005C5 CB                      	RETF   ; ! FAR return !
  4819                                  
  4820                                  ;ABSDRD	ENDP
  4821                                  
  4822                                  ;---------------------------------------------------------------------------
  4823                                  ;
  4824                                  ; Procedure Name : ABSDWRT
  4825                                  ;
  4826                                  ; Interrupt 26 handler. Performs absolute disk write.
  4827                                  ; Inputs:	AL - 0-based drive number
  4828                                  ;		DS:BX point to source buffer
  4829                                  ;		CX number of logical sectors to write
  4830                                  ;		DX starting logical sector number (0-based)
  4831                                  ; Outputs:	Original flags still on stack
  4832                                  ;		Carry set
  4833                                  ;		    AH error from BIOS
  4834                                  ;		    AL same as low byte of DI from INT 24
  4835                                  ;
  4836                                  ;---------------------------------------------------------------------------
  4837                                          ;procedure   ABSDWRT,FAR
  4838                                  ABSDWRT:
  4839                                  	; 15/05/2019 - Retro DOS v4.0
  4840                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4841                                  	; 04/11/2022
  4842                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4843                                  
  4844 000005C6 FA                      	CLI
  4845                                  
  4846                                  ;	set up ds to point to DOSDATA
  4847                                  
  4848 000005C7 50                      	push	ax
  4849 000005C8 8CD8                    	mov	ax,ds
  4850                                  	;getdseg <ds>
  4851 000005CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4852 000005CF A3[0A0D]                	mov	[TEMPSEG],ax
  4853 000005D2 58                      	pop	ax
  4854                                  
  4855                                  	; M072:
  4856                                  	; We shall save es on the user stack here. We need to use ES in
  4857                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4858                                  	; time in order to restore the user stack.
  4859                                  
  4860 000005D3 06                      	push	es ; ****		; M072
  4861                                  
  4862 000005D4 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4863 000005D8 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4864                                  
  4865                                  	; set up ss to point to DOSDATA
  4866                                  	;
  4867                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4868                                  	; ROMDOS version of the getdseg macro with the SS register!
  4869                                  	; An interrupt will sneak through.
  4870                                  
  4871                                  ;ifndef ROMDOS
  4872                                  	;getdseg <ss>			; cli in entry of routine
  4873 000005DC 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4874                                  ;else
  4875                                  ;	mov	ds, cs:[BioDataSeg]
  4876                                  ;	assume	ds:bdata
  4877                                  ;
  4878                                  ;	mov	ss, ds:[DosDataSg]
  4879                                  ;	assume	ss:DOSDATA
  4880                                  ;
  4881                                  ;endif ; ROMDOS
  4882                                  
  4883 000005E1 BC[2009]                	MOV	SP,DSKSTACK
  4884                                  		; we are now switched to DOS's disk stack
  4885                                  
  4886 000005E4 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4887                                  
  4888 000005E8 06                      	push	es ; *** (MSDOS 6.21)
  4889                                  
  4890 000005E9 E884FE                  	call	save_world	      	; save all regs
  4891                                  
  4892 000005EC 06                      	PUSH	ES ; **
  4893 000005ED E802FF                  	CALL	AbsSetup
  4894 000005F0 72B6                    	JC	short ILEAVE
  4895                                  
  4896                                  	;EnterCrit critDisk
  4897 000005F2 E8610D                  	call	ECritDisk
  4898 000005F5 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4899 000005FB E89C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4900                                  	;LeaveCrit critDisk
  4901 000005FE E8700D                  	call	LCritDisk
  4902                                  
  4903                                  ;M039
  4904                                  ;       DS:BX = transfer address (source data address).
  4905                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4906                                  ;	     sectors, also termed an "Extent".)
  4907                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4908                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4909                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4910                                  ;
  4911                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4912                                  ;       written. Note that all the above registers are preserved for
  4913                                  ;       DSKWRITE.
  4914                                  
  4915 00000601 1E                              push    ds
  4916                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4917 00000602 E82637                  	call	DskWrtBufPurge
  4918 00000605 1F                              pop     ds
  4919                                  ;M039
  4920                                  	;invoke	DSKWRITE
  4921 00000606 E8E431                  	call	DSKWRITE
  4922 00000609 EB82                    	JMP	short TLEAVE
  4923                                  
  4924                                  ;ABSDWRT ENDP
  4925                                  
  4926                                  ;----------------------------------------------------------------------------
  4927                                  ;
  4928                                  ; Procedure Name : GETBP
  4929                                  ;
  4930                                  ; Inputs:
  4931                                  ;	AL = Logical unit number (A = 0)
  4932                                  ; Function:
  4933                                  ;	Find Drive Parameter Block
  4934                                  ; Outputs:
  4935                                  ;	ES:BP points to DPB
  4936                                  ;	[THISDPB] = ES:BP
  4937                                  ;	Carry set if unit number bad or unit is a NET device.
  4938                                  ;		Later case sets extended error error_I24_not_supported
  4939                                  ; No other registers alteredjjj
  4940                                  ;
  4941                                  ;----------------------------------------------------------------------------
  4942                                  
  4943                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4944                                  GETBP:
  4945                                  	; 15/05/2019 - Retro DOS v4.0
  4946                                  	; 11/07/2018 - Retro DOS v3.0
  4947 0000060B 50                      	PUSH	AX
  4948 0000060C 0401                    	ADD	AL, 1		; No increment; need carry flag
  4949 0000060E 7216                    	JC	SHORT SKIPGET
  4950 00000610 E8F164                  	CALL	GETTHISDRV
  4951                                  	; MSDOS 6.0
  4952 00000613 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4953 00000615 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4954 00000617 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4955 0000061A 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4956 0000061C F9                      	STC				;DCR.			;AN000;
  4957 0000061D A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4958 00000620 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4959                                  SKIPGET:
  4960 00000626 58                      	POP	AX
  4961 00000627 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4962                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4963                                  	;jnc	short getbp_t
  4964                                  	;retn
  4965                                  getbp_t:
  4966 00000629 C42E[A205]              	LES	BP,[THISCDS]
  4967                                  	; 15/12/2022
  4968 0000062D 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4969                                  	; 07/12/2022
  4970                                  	;TEST	WORD [ES:BP+43H],8000H
  4971                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4972 00000632 7408                    	JZ	SHORT GETBP_CDS
  4973 00000634 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4974 0000063A F9                      	STC
  4975                                  GETBP_RETN:
  4976 0000063B C3                      	RETN
  4977                                  
  4978                                  GETBP_CDS:
  4979                                  	;LES	BP,[ES:BP+45H]
  4980 0000063C 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4981                                  GOTDPB:
  4982                                  	; Load THISDPB from ES:BP
  4983 00000640 892E[8A05]              	MOV	[THISDPB],BP
  4984 00000644 8C06[8C05]              	MOV	[THISDPB+2],ES
  4985 00000648 C3                      	RETN
  4986                                  
  4987                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4988                                  
  4989                                  ;----------------------------------------------------------------------------
  4990                                  ;
  4991                                  ; Procedure Name : SYS_RETURN
  4992                                  ;
  4993                                  ; These are the general system call exit mechanisms. All internal system
  4994                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4995                                  ; is to set the user's flags and set his AX register for return.
  4996                                  ;
  4997                                  ;----------------------------------------------------------------------------
  4998                                  
  4999                                          ;procedure   SYS_RETURN,NEAR
  5000                                  SYS_RETURN:        
  5001                                          ;entry	SYS_RET_OK
  5002                                  SYS_RET_OK:   
  5003 00000649 E843FE                  	call    Get_User_Stack
  5004                                  		; turn off user's carry flag
  5005                                  SYS_RET_OK_clc: ; 25/06/2019 
  5006                                          ;;and	word [SI+16h],0FFFEh 
  5007                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5008                                          ; 25/06/2019
  5009 0000064C 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5010 00000650 EB10                    	JMP     SHORT DO_RET
  5011                                  
  5012                                          ;entry   SYS_RET_ERR
  5013                                  SYS_RET_ERR:        
  5014 00000652 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5015 00000654 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5016 00000657 E81A00                  	CALL	ErrorMap
  5017                                  
  5018                                  	;entry	From_GetSet
  5019                                  From_GetSet:
  5020 0000065A E832FE                          call    Get_User_Stack
  5021                                  		 ; signal carry to user
  5022                                  	;;or	word [SI+16h],1
  5023                                  	;OR	word [SI+user_env.user_F],f_Carry
  5024                                  	; 25/06/2019
  5025 0000065D 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5026 00000661 F9                      	STC			; also, signal internal error
  5027                                  DO_RET:
  5028                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5029 00000662 8904                    	MOV	[SI],AX
  5030 00000664 C3                      	RETN
  5031                                  
  5032                                  	;entry	FCB_RET_OK
  5033                                  FCB_RET_OK:
  5034                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5035                                  NO_OP:
  5036 00000665 30C0                    	XOR	AL,AL
  5037 00000667 C3                      	retn
  5038                                  
  5039                                  	;entry	FCB_RET_ERR
  5040                                  FCB_RET_ERR:
  5041 00000668 30E4                    	XOR	AH,AH
  5042 0000066A 36A3[2403]              	mov	[ss:EXTERR],AX
  5043 0000066E E80300                  	CALL	ErrorMap
  5044 00000671 B0FF                    	MOV	AL,-1
  5045 00000673 C3                      	retn
  5046                                  
  5047                                  	;entry	ErrorMap
  5048                                  ErrorMap:
  5049 00000674 56                      	PUSH	SI
  5050                                  				; ERR_TABLE_21 is now in DOSDATA
  5051 00000675 BE[DA0D]                	MOV	SI,ERR_TABLE_21
  5052                                  				; SS override for FAILERR and EXTERR
  5053 00000678 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5054 0000067E 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5055                                  		 ; Ooops, this is the REAL reason
  5056                                  	;mov	word [SS:EXTERR],53h
  5057 00000680 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5058                                  EXTENDED_NORMAL:
  5059 00000687 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5060 0000068A 5E                      	POP	SI
  5061 0000068B C3                      	retn
  5062                                  
  5063                                  	;EndProc SYS_RETURN
  5064                                  
  5065                                  ;---------------------------------------------------------------------------
  5066                                  ;
  5067                                  ; Procedure Name : CAL_LK
  5068                                  ;
  5069                                  ; Inputs:
  5070                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5071                                  ;		(DS NEED not be DOSDATA)
  5072                                  ;	[EXTERR] is set with error
  5073                                  ; Function:
  5074                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5075                                  ; Outputs:
  5076                                  ;	[EXTERR_CLASS] set
  5077                                  ;	[EXTERR_ACTION] set
  5078                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5079                                  ; Destroys SI, FLAGS
  5080                                  ;
  5081                                  ;---------------------------------------------------------------------------
  5082                                  
  5083                                  	;procedure CAL_LK,NEAR
  5084                                  CAL_LK:
  5085 0000068C 1E                      	PUSH	DS
  5086 0000068D 50                      	PUSH	AX
  5087 0000068E 53                      	PUSH	BX
  5088                                  
  5089                                  ;M048	Context DS		; DS:SI -> Table
  5090                                  ;
  5091                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5092                                  ; is DOSDATA
  5093                                  
  5094                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5095                                  	; 15/05/2019 - Retro DOS v4.0
  5096 0000068F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5097                                  
  5098                                  	; 18/07/2018
  5099                                  	;push	ss
  5100                                  	;pop	ds
  5101                                  
  5102 00000694 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5103                                  TABLK1:
  5104 00000698 AC                      	LODSB
  5105                                  
  5106 00000699 3CFF                    	CMP	AL,0FFH
  5107 0000069B 7409                    	JZ	short GOT_VALS	; End of table
  5108 0000069D 38D8                    	CMP	AL,BL
  5109 0000069F 7405                    	JZ	short GOT_VALS	; Got entry
  5110 000006A1 83C603                  	ADD	SI,3		; Next table entry
  5111                                  	; 15/08/2018
  5112 000006A4 EBF2                    	JMP	short TABLK1
  5113                                  
  5114                                  GOT_VALS:
  5115 000006A6 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5116                                  
  5117 000006A7 80FCFF                  	CMP	AH,0FFH
  5118 000006AA 7404                    	JZ	short NO_SET_ACT
  5119 000006AC 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5120                                  NO_SET_ACT:
  5121 000006B0 3CFF                    	CMP	AL,0FFH
  5122 000006B2 7403                    	JZ	short NO_SET_CLS
  5123 000006B4 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5124                                  NO_SET_CLS:
  5125 000006B7 AC                      	LODSB			; Get LOCUS
  5126                                  
  5127 000006B8 3CFF                    	CMP	AL,0FFH
  5128 000006BA 7403                    	JZ	short NO_SET_LOC
  5129 000006BC A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5130                                  NO_SET_LOC:
  5131 000006BF 5B                      	POP	BX
  5132 000006C0 58                      	POP	AX
  5133 000006C1 1F                      	POP	DS
  5134 000006C2 C3                      	retn
  5135                                  
  5136                                  	;EndProc CAL_LK
  5137                                  
  5138                                  ;---------------------------------------------------------------------------
  5139                                  ;
  5140                                  ; Procedure Name : ETAB_LK
  5141                                  ;
  5142                                  ; Inputs:
  5143                                  ;	AX is error code
  5144                                  ;	[USER_IN_AX] has AH value of system call involved
  5145                                  ; Function:
  5146                                  ;	Make sure error code is appropriate to this call.
  5147                                  ; Outputs:
  5148                                  ;	AX MAY be mapped error code
  5149                                  ;	[EXTERR] = Input AX
  5150                                  ; Destroys ONLY AX and FLAGS
  5151                                  ;
  5152                                  ;---------------------------------------------------------------------------
  5153                                  
  5154                                  	;procedure ETAB_LK,NEAR
  5155                                  
  5156                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5157 000006C3 1E                      	PUSH	DS
  5158 000006C4 56                      	PUSH	SI
  5159 000006C5 51                      	PUSH	CX
  5160 000006C6 53                      	PUSH	BX
  5161                                  
  5162                                  	;Context DS			; SS is DOSDATA
  5163                                  
  5164 000006C7 16                      	push	ss
  5165 000006C8 1F                      	pop	ds
  5166                                  
  5167 000006C9 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5168                                  
  5169                                  					; I21_MAP_E_TAB is now in DOSCODE
  5170 000006CC BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5171 000006CF 88C7                    	MOV	BH,AL			; Real code to BH
  5172 000006D1 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5173                                  TABLK2:
  5174                                  	; 15/05/2019 - Retro DOS v4.0
  5175 000006D5 2E                      	cs
  5176 000006D6 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5177                                  	
  5178                                  	; 18/07/2018 - Retro DOS v3.0
  5179                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5180                                  
  5181 000006D7 3CFF                    	CMP	AL,0FFH 		; End of table?
  5182 000006D9 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5183 000006DB 38D8                    	CMP	AL,BL			; Found call?
  5184 000006DD 740C                    	JZ	short GOT_CALL		; Yes
  5185 000006DF 86E0                    	XCHG	AH,AL			; Count to AL
  5186 000006E1 30E4                    	XOR	AH,AH			; Make word for add
  5187 000006E3 01C6                    	ADD	SI,AX			; Next table entry
  5188 000006E5 EBEE                    	JMP	short TABLK2
  5189                                  
  5190                                  NOT_IN_TABLE:
  5191 000006E7 88F8                    	MOV	AL,BH			; Restore original code
  5192 000006E9 EB0C                    	JMP	SHORT NO_MAP
  5193                                  
  5194                                  GOT_CALL:
  5195 000006EB 88E1                    	MOV	CL,AH
  5196 000006ED 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5197                                  CHECK_CODE:
  5198                                  	; 15/05/2019 - Retro DOS v4.0
  5199 000006EF 2E                      	cs
  5200 000006F0 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5201                                  
  5202                                  	; 18/07/2018
  5203                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5204                                  
  5205 000006F1 38F8                    	CMP	AL,BH			; Code OK?
  5206 000006F3 7402                    	JZ	short NO_MAP		; Yes
  5207 000006F5 E2F8                    	LOOP	CHECK_CODE
  5208                                  NO_MAP:
  5209 000006F7 30E4                    	XOR	AH,AH			; AX is now valid code
  5210 000006F9 5B                      	POP	BX
  5211 000006FA 59                      	POP	CX
  5212 000006FB 5E                      	POP	SI
  5213 000006FC 1F                      	POP	DS
  5214 000006FD C3                      	retn
  5215                                  
  5216                                  	;EndProc ETAB_LK
  5217                                  
  5218                                  ; 18/07/2018 - Retro DOS v3.0
  5219                                  ;---------------------------------------------------------------------------
  5220                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5221                                  
  5222                                  ;IF installed ; (*)
  5223                                  
  5224                                  ;---------------------------------------------------------------------------
  5225                                  ;
  5226                                  ; Procedure Name : SetBad
  5227                                  ;
  5228                                  ; SetBad sets up info for bad functions
  5229                                  ;
  5230                                  ;---------------------------------------------------------------------------
  5231                                  
  5232                                  SetBad:
  5233                                  	;mov	ax,1
  5234 000006FE B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5235                                  
  5236                                  	; MSDOS 3.3
  5237                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5238                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5239                                  
  5240                                  ;	set up ds to point to DOSDATA
  5241                                  
  5242                                  	; 15/05/2019 - Retro DOS v4.0
  5243                                  	; MSDOS 6.0
  5244 00000701 1E                      	push	ds
  5245                                  
  5246                                  	;getdseg <ds>
  5247 00000702 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5248                                  
  5249 00000707 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5250                                  
  5251 0000070C 1F                      	pop	ds	  	;hkn; restore ds
  5252                                  
  5253 0000070D F9                      	STC
  5254 0000070E C3                      	retn
  5255                                  
  5256                                  ;--------------------------------------------------------------------------
  5257                                  ;
  5258                                  ; Procedure Name : BadCall
  5259                                  ;
  5260                                  ; BadCall is the initial routine for bad function calls
  5261                                  ;
  5262                                  ;--------------------------------------------------------------------------
  5263                                  
  5264                                  BadCall:
  5265 0000070F E8ECFF                  	call	SetBad
  5266 00000712 CB                      	retf
  5267                                  
  5268                                  ;--------------------------------------------------------------------------
  5269                                  ;
  5270                                  ; OKCall always sets carry to off.
  5271                                  ;
  5272                                  ;-----------------------------------------------------------------------
  5273                                  
  5274                                  OKCall:
  5275 00000713 F8                      	CLC
  5276 00000714 CB                      	retf
  5277                                  
  5278                                  ;---------------------------------------------------------------------------
  5279                                  ;
  5280                                  ; Procedure Name : INT2F
  5281                                  ;
  5282                                  ; INT 2F handler works as follows:
  5283                                  ;   PUSH    AX
  5284                                  ;   MOV     AX,multiplex:function
  5285                                  ;   INT     2F
  5286                                  ;   POP     ...
  5287                                  ; The handler itself needs to make the AX available for the various routines.
  5288                                  ;
  5289                                  ;----------------------------------------------------------------------------
  5290                                  
  5291                                  ; 15/05/2019 - Retro DOS v4.0
  5292                                  
  5293                                  ;KERNEL_SEGMENT equ 70h
  5294                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5295                                  DOSBIODATASEG equ 70h
  5296                                  
  5297                                  ; retrodos4.s - offset in BIOSDATA
  5298                                  bios_i2f equ 5
  5299                                  
  5300                                  ;PUBLIC	Int2F
  5301                                  ;INT2F	PROC	FAR
  5302                                  
  5303                                  ; 15/05/2019
  5304                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5305                                  
  5306                                  ; 04/11/2022
  5307                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5308                                  
  5309                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5310                                  	; 18/07/2018 - Retro DOS v3.0
  5311                                  INT2F:
  5312                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5313                                  INT2FNT:
  5314                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5315 00000715 FB                      	STI
  5316                                  	;cmp	ah,11h
  5317 00000716 80FC11                  	CMP	AH,MultNET
  5318 00000719 750A                    	JNZ	short INT2FSHR
  5319                                  TestInstall:
  5320 0000071B 08C0                    	OR	AL,AL
  5321 0000071D 7403                    	JZ	short Leave2F
  5322                                  BadFunc:
  5323 0000071F E8DCFF                  	CALL	SetBad
  5324                                  
  5325                                  	;entry	Leave2F
  5326                                  Leave2F:
  5327 00000722 CA0200                  	RETF	2			; long return + clear flags off stack
  5328                                  
  5329                                  INT2FSHR:
  5330                                  	;cmp	ah,10h
  5331 00000725 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5332 00000728 74F1                    	JZ	short TestInstall	; yes, check for installation
  5333                                  INT2FNLS:
  5334                                  	;cmp	ah,14h
  5335 0000072A 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5336 0000072D 74EC                    	JZ	short TestInstall	; yes check for installation
  5337                                  INT2FDOS:
  5338                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5339                                  
  5340                                  	; 18/07/2018
  5341                                  	; MSDOS 3.3
  5342                                  	;;cmp	ah,12h	
  5343                                  	;CMP	AH,MultDOS
  5344                                  	;jz	short DispatchDOS
  5345                                  	;iret
  5346                                  
  5347                                  	; 15/05/2019
  5348                                  	; MSDOS 6.0
  5349                                  	;cmp	ah,12h	; 07/12/2022
  5350 0000072F 80FC12                  	CMP	AH,MultDOS
  5351 00000732 7503                    	JNZ	short check_win		;check if win386 broadcast
  5352 00000734 E9FC01                  	jmp	DispatchDOS
  5353                                  
  5354                                  	; .... win386 .... 
  5355                                  
  5356                                  check_win:
  5357                                  	;cmp	ah,16h
  5358 00000737 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5359 0000073A 7408                    	je	short Win386_Msg
  5360                                  
  5361                                  	; M044
  5362                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5363                                  	; of Windows. If so, do special action of going and saving last para
  5364                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5365                                  	; bug
  5366                                  
  5367 0000073C 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5368                                  	;jne	short next_i2f		; no, chain on
  5369                                  	; 15/12/2022
  5370                                  	;jmp	winold_swap		; yes, do desired action
  5371 0000073F 7442                    	je	short winold_swap
  5372 00000741 E90701                  	jmp	next_i2f
  5373                                  
  5374                                  	; 15/12/2022
  5375                                  ;next_i2f:
  5376                                  ;	;;;jmp	bios_i2f
  5377                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5378                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5379                                  ;	; 04/11/2022
  5380                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5381                                  
  5382                                  ;	IRET				; This assume that we are at the head
  5383                                  					; of the list
  5384                                  ;INT2F	ENDP
  5385                                  
  5386                                  ; 15/05/2019 - Retro DOS v4.0
  5387                                  
  5388                                  ; We have received a message from Win386. There are three possible
  5389                                  ; messages we could get from Win386:
  5390                                  ;
  5391                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5392                                  ;		  to the Win386 startup info structure.
  5393                                  ; Exit		- for this, we clear the IsWin386 flag.
  5394                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5395                                  ;		  has already been handled. this is indicated by setting
  5396                                  ;		  CX to a non-zero value.
  5397                                  
  5398                                  Win386_Msg:
  5399 00000744 1E                      	push	ds
  5400                                  
  5401                                  	;getdseg <DS>			; ds is DOSDATA
  5402 00000745 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5403                                  
  5404                                  	; For WIN386 2.xx instance data
  5405                                  
  5406 0000074A 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5407 0000074C 7503                    	jne	short Win386_Msg_exit
  5408 0000074E E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5409                                  Win386_Msg_exit:
  5410 00000751 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5411 00000753 7503                    	jne	short Win386_Msg_devcall
  5412 00000755 E92E01                  	jmp	Win386_Leaving
  5413                                  Win386_Msg_devcall:
  5414 00000758 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5415 0000075A 7503                    	jne	short Win386_Msg_init
  5416 0000075C E96501                  	jmp	Win386_Query
  5417                                  Win386_Msg_init:
  5418 0000075F 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5419 00000761 7403                    	je	short Win386_Starting
  5420 00000763 E9E400                  	jmp	win_nexti2f		; no, return
  5421                                  Win386_Starting:
  5422                                  	; 17/12/2022
  5423 00000766 F6C201                  	test	dl,1
  5424                                  	;test	dx,1			; is this really win386?
  5425 00000769 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5426 0000076B E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5427                                  Win386_vchk:
  5428                                  	; M018 -- start of block changes
  5429                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5430                                  	; than 030Ah, we skip the VxD presence check
  5431                                  
  5432                                  ;M067 -- Begin changes
  5433                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5434                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5435                                  ;So, we null out the VxD ptr before the check.
  5436                                  
  5437                                  	;mov	word [Win386_Info+6],0
  5438 0000076E C706[E70F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5439                                  	;mov	word [Win386_Info+8],0
  5440 00000774 C706[E90F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5441                                  
  5442                                  ;M067 -- End changes
  5443                                  
  5444                                  ;ifdef JAPAN
  5445                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5446                                  ;else
  5447 0000077A 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5448                                  ;endif
  5449                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5450 0000077E 724E                    	jb	short Win386_vxd
  5451 00000780 E9DF00                  	jmp	noVxD31
  5452                                  
  5453                                  	; 15/12/2022
  5454                                  winold_swap:
  5455 00000783 1E                      	push	ds
  5456 00000784 06                      	push	es
  5457 00000785 56                      	push	si
  5458 00000786 57                      	push	di
  5459 00000787 51                      	push	cx
  5460                                  
  5461                                  	;getdseg <ds>			;ds = DOSDATA
  5462 00000788 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5463                                  
  5464 0000078D 3C01                    	cmp	al,1			;swap Windows out call
  5465 0000078F 751B                    	jne	short swapin		;no, check if Swap in call
  5466 00000791 E89201                  	call	getwinlast
  5467 00000794 1E                      	push	ds
  5468 00000795 07                      	pop	es
  5469 00000796 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5470 00000798 31F6                    	xor	si,si
  5471 0000079A BF[0600]                	mov	di,WinoldPatch1
  5472 0000079D B90800                  	mov	cx,8
  5473 000007A0 FC                      	cld
  5474 000007A1 51                      	push	cx
  5475 000007A2 F3A4                    	rep	movsb			;save first 8 bytes
  5476 000007A4 59                      	pop	cx
  5477 000007A5 BF[CC0D]                	mov	di,WinoldPatch2
  5478 000007A8 F3A4                    	rep	movsb			;save next 8 bytes
  5479 000007AA EB1B                    	jmp	short winold_done
  5480                                  swapin:
  5481 000007AC 3C02                    	cmp	al,2			;swap Windows in call?
  5482 000007AE 7517                    	jne	short winold_done	;no, something else, pass it on
  5483 000007B0 E87301                  	call	getwinlast
  5484 000007B3 8EC6                    	mov	es,si
  5485 000007B5 31FF                    	xor	di,di
  5486 000007B7 BE[0600]                	mov	si,WinoldPatch1
  5487 000007BA B90800                  	mov	cx,8
  5488 000007BD FC                      	cld
  5489 000007BE 51                      	push	cx
  5490 000007BF F3A4                    	rep	movsb			;restore first 8 bytes
  5491 000007C1 59                      	pop	cx
  5492 000007C2 BE[CC0D]                	mov	si,WinoldPatch2
  5493 000007C5 F3A4                    	rep	movsb			;restore next 8 bytes
  5494                                  winold_done:
  5495 000007C7 59                      	pop	cx
  5496 000007C8 5F                      	pop	di
  5497 000007C9 5E                      	pop	si
  5498 000007CA 07                      	pop	es
  5499 000007CB 1F                      	pop	ds
  5500 000007CC EB7D                    	jmp	short next_i2f		;chain on
  5501                                  	; 15/12/2022
  5502                                  	;jmp	next_i2f	
  5503                                  
  5504                                  Win386_vxd:
  5505 000007CE 50                      	push	ax
  5506 000007CF 53                      	push	bx
  5507 000007D0 51                      	push	cx
  5508 000007D1 52                      	push	dx
  5509 000007D2 56                      	push	si
  5510 000007D3 57                      	push	di			; save regs !!dont change order!!
  5511                                  
  5512 000007D4 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5513 000007D8 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5514 000007DB 7421                    	je	short Vxd31		; N: continue
  5515                                  					; Y: save arena associated with 
  5516                                  					;    umb_head
  5517                                  
  5518 000007DD C606[D90D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5519                                  					; umb_arena
  5520 000007E2 1E                      	push	ds
  5521 000007E3 06                      	push	es
  5522                                  
  5523 000007E4 8CD8                    	mov	ax,ds
  5524 000007E6 8EC0                    	mov	es,ax			; es - > dosdata
  5525                                  
  5526 000007E8 8EDB                    	mov	ds,bx
  5527 000007EA 31F6                    	xor	si,si			; ds:si -> umb_head
  5528                                  
  5529 000007EC FC                      	cld
  5530                                  
  5531 000007ED BF[FA11]                	mov	di,UmbSave1
  5532 000007F0 B90B00                  	mov	cx,11
  5533 000007F3 F3A4                    	rep	movsb
  5534                                  
  5535 000007F5 BF[D40D]                	mov	di,UmbSave2
  5536                                  	;mov	cx,5
  5537                                  	; 18/12/2022
  5538 000007F8 B105                    	mov	cl,5
  5539 000007FA F3A4                    	rep	movsb	
  5540                                  
  5541 000007FC 07                      	pop	es
  5542 000007FD 1F                      	pop	ds			; M062 - End
  5543                                  
  5544                                  Vxd31:
  5545                                  	;test	byte [DOS_FLAG],2
  5546 000007FE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5547 00000803 7408                    	jz	short Dont_Supress		; M066
  5548 00000805 5F                      	pop	di				; M066
  5549 00000806 5E                      	pop	si				; M066
  5550 00000807 5A                      	pop	dx				; M066
  5551 00000808 59                      	pop	cx				; M066
  5552 00000809 5B                      	pop	bx				; M066
  5553 0000080A 58                      	pop	ax				; M066
  5554 0000080B EB55                    	jmp	short noVxD31			; M066
  5555                                  
  5556                                  	; We check here if the VxD is available in the root of the boot drive. 
  5557                                  	; We do an extended open to suppress any error messages
  5558                                  	
  5559                                  Dont_Supress:
  5560 0000080D A0[6900]                	mov	al,[BOOTDRIVE]
  5561 00000810 0440                    	add	al,'A' - 1		; get drive letter
  5562 00000812 A2[3010]                	mov	[VxDpath],al		; path is root of bootdrive
  5563                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5564                                  	;mov	al,0			; no extended attributes
  5565                                  	; 18/12/2022
  5566 00000815 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5567 00000818 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5568                                  					; no inherit, suppress crit err
  5569 0000081B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5570 0000081E BA0100                  	mov	dx,1			; fail if file does not exist
  5571 00000821 BE[3010]                	mov	si,VxDpath	
  5572                                  					; path of VxD file
  5573 00000824 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5574                                  
  5575 00000827 CD21                    	int	21h			; do extended open
  5576                                  
  5577 00000829 5F                      	pop	di
  5578 0000082A 5E                      	pop	si
  5579 0000082B 5A                      	pop	dx
  5580 0000082C 59                      	pop	cx
  5581                                  
  5582 0000082D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5583                                  
  5584                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5585                                  	; to indicate error to Windows after displaying message to user that 
  5586                                  	; VxD needs to be present to run Windows in enhanced mode.
  5587                                  
  5588 0000082F 52                      	push	dx
  5589 00000830 1E                      	push	ds
  5590 00000831 56                      	push	si
  5591 00000832 BE[CF09]                	mov	si,NoVxDErrMsg
  5592 00000835 0E                      	push	cs
  5593 00000836 1F                      	pop	ds
  5594 00000837 B96300                  	mov	cx,VxDMesLen ; 99	;
  5595 0000083A B402                    	mov	ah,2			; write char to console
  5596 0000083C FC                      	cld
  5597                                  vxdlp:
  5598 0000083D AC                      	lodsb
  5599 0000083E 86D0                    	xchg	dl,al			; get char in dl
  5600 00000840 CD21                    	int	21h
  5601 00000842 E2F9                    	loop	vxdlp
  5602                                  
  5603 00000844 5E                      	pop	si
  5604 00000845 1F                      	pop	ds
  5605 00000846 5A                      	pop	dx
  5606 00000847 5B                      	pop	bx
  5607 00000848 58                      	pop	ax			;all registers restored
  5608 00000849 41                      	inc	cx			;cx != 0 to indicate error
  5609                                  	; 15/12/22022
  5610                                  	;jmp	win_nexti2f		;chain on
  5611                                  	;jmp	short win_nexti2f
  5612                                  
  5613                                  	; 15/12/2022
  5614                                  win_nexti2f:
  5615 0000084A 1F                      	pop	ds
  5616                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5617                                  	; 15/12/2022
  5618                                  next_i2f:
  5619                                  	;;;jmp	bios_i2f
  5620                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5621                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5622                                  	; 04/11/2022
  5623 0000084B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5624                                  
  5625                                  VxDthere:
  5626 00000850 89C3                    	mov	bx,ax
  5627 00000852 B43E                    	mov	ah,CLOSE ; 3Eh
  5628 00000854 CD21                    	int	21h			;close the file
  5629                                  
  5630                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5631                                  
  5632                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5633                                  	;mov	bx,Win386_Info
  5634                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5635                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5636                                  	; 15/12/2022
  5637 00000856 C706[E70F][3010]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5638 0000085C 8C1E[E90F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5639                                  
  5640 00000860 5B                      	pop	bx
  5641 00000861 58                      	pop	ax
  5642                                  noVxD31:
  5643                                  	; M018; End of block changes
  5644                                  
  5645 00000862 800E[2F10]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5646 00000867 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5647                                  
  5648                                  	; M002;
  5649                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5650                                  
  5651 0000086C 52                      	push	dx			; M002
  5652 0000086D 89DA                    	mov	dx,bx			; M002
  5653                                  					; point ES:BX to Win386_Info ; M002
  5654 0000086F BB[E10F]                	mov	bx,Win386_Info 
  5655 00000872 895702                  	mov	[bx+2],dx		; M002
  5656 00000875 8C4704                  	mov	[bx+4],es		; M002
  5657 00000878 5A                      	pop	dx			; M002
  5658 00000879 1E                      	push	ds			; M002
  5659 0000087A 07                      	pop	es			; M002
  5660                                  	;jmp	win_nexti2f		; M002
  5661                                  	; 15/12/2022
  5662 0000087B EBCD                    	jmp	short win_nexti2f
  5663                                  
  5664                                  	; 15/12/2022
  5665                                  	; Code to return Win386 2.xx instance table
  5666                                  OldWin386Init:
  5667 0000087D 58                      	pop	ax			; discard ds pushed on stack
  5668 0000087E BE[CD11]                	mov	si,OldInstanceJunk 
  5669                                  					; ds:si = instance table
  5670 00000881 B84852                  	mov	ax,5248h ; 'RH'		; indicate instance data present
  5671                                  	;jmp	next_i2f
  5672                                  	; 15/12/2022
  5673 00000884 EBC5                    	jmp	short next_i2f
  5674                                  
  5675                                  Win386_Leaving:
  5676                                  	; 15/12/2022
  5677 00000886 F6C201                  	test 	dl,1
  5678                                  	;test	dx,1			; is this really win386?
  5679                                  	;jz	short Win386_Leaving_c
  5680                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5681                                  	; 15/12/2022
  5682 00000889 75BF                    	jnz	short win_nexti2f	
  5683                                  
  5684                                  Win386_Leaving_c:
  5685                                  					; M062 - Start
  5686 0000088B 803E[D90D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5687                                  					;    up.
  5688 00000890 7526                    	jne	short noumb		; N: not saved 
  5689 00000892 C606[D90D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5690                                  					;    previously saved umb_head
  5691 00000897 50                      	push	ax
  5692 00000898 06                      	push	es
  5693 00000899 51                      	push	cx
  5694 0000089A 56                      	push	si
  5695 0000089B 57                      	push	di
  5696                                  
  5697 0000089C A1[8C00]                	mov	ax,[UMB_HEAD]	
  5698 0000089F 8EC0                    	mov	es,ax
  5699 000008A1 31FF                    	xor	di,di			; es:di -> umb_head
  5700                                  
  5701 000008A3 FC                      	cld
  5702                                  
  5703 000008A4 BE[FA11]                	mov	si,UmbSave1
  5704 000008A7 B90B00                  	mov	cx,11
  5705 000008AA F3A4                    	rep	movsb
  5706 000008AC BE[D40D]                	mov	si,UmbSave2
  5707                                  	;mov	cx,5
  5708                                  	; 18/12/2022
  5709 000008AF B105                    	mov	cl,5
  5710 000008B1 F3A4                    	rep	movsb
  5711                                  
  5712 000008B3 5F                      	pop	di
  5713 000008B4 5E                      	pop	si
  5714 000008B5 59                      	pop	cx
  5715 000008B6 07                      	pop	es
  5716 000008B7 58                      	pop	ax
  5717                                  noumb:					; M062 - End
  5718 000008B8 8026[2F10]00            	and	byte [IsWin386],0	; Win386 is gone
  5719 000008BD 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5720 000008C2 EB86                    	jmp	short win_nexti2f
  5721                                  
  5722                                  ;	; 15/12/2022
  5723                                  ;	; Code to return Win386 2.xx instance table
  5724                                  ;OldWin386Init:
  5725                                  ;	pop	ax			; discard ds pushed on stack
  5726                                  ;	mov	si,OldInstanceJunk 
  5727                                  ;					; ds:si = instance table
  5728                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5729                                  ;	;jmp	next_i2f
  5730                                  ;	; 15/12/2022
  5731                                  ;	jmp	short _next_i2f
  5732                                  
  5733                                  Win386_Query:
  5734 000008C4 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5735 000008C7 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5736 000008C9 09C9                    	or	cx,cx			; is it an instance query?
  5737 000008CB 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5738 000008CD 41                      	inc	cx			; indicate that data is instanced
  5739                                  ;
  5740                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5741                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5742                                  ; M001;  
  5743                                  ; M001; OFFSETS STRUC
  5744                                  ; M001; 	Major_version	db	?
  5745                                  ; M001; 	Minor_version	db	?
  5746                                  ; M001; 	SaveDS		dw	?
  5747                                  ; M001; 	SaveBX		dw	?
  5748                                  ; M001; 	Indos		dw	?
  5749                                  ; M001; 	User_id		dw	?
  5750                                  ; M001; 	CritPatch	dw	?
  5751                                  ; M001; OFFSETS	ENDS
  5752                                  ; M001; 
  5753                                  ; M001; User_Id is the only variable really important for proper functioning  
  5754                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5755                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5756                                  ; M001; pass this table because Win386 depends on this table to get the 
  5757                                  ; M001; User_Id offset.
  5758                                  ; M001; 
  5759 000008CE BB[2110]                	mov	bx,Win386_DOSVars	; M001 
  5760 000008D1 1E                      	push	ds			; M001
  5761 000008D2 07                      	pop	es			; es:bx points at offset table ; M001
  5762 000008D3 EB41                    	jmp	short PopIret		; M001
  5763                                  
  5764                                  ; 15/12/2022
  5765                                  ;	; Code to return Win386 2.xx instance table
  5766                                  ;OldWin386Init:
  5767                                  ;	pop	ax			; discard ds pushed on stack
  5768                                  ;	mov	si,OldInstanceJunk 
  5769                                  ;					; ds:si = instance table
  5770                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5771                                  ;	;jmp	next_i2f
  5772                                  ;	; 15/12/2022
  5773                                  ;	jmp	short _next_i2f
  5774                                  
  5775                                  dosmgr_func:
  5776 000008D5 49                      	dec	cx
  5777 000008D6 7436                    	jz	short win386_patch	; call to patch DOS
  5778 000008D8 49                      	dec	cx
  5779 000008D9 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5780 000008DB 49                      	dec	cx
  5781 000008DC 743A                    	jz	short win386_size	; get size of DOS data structures
  5782 000008DE 49                      	dec	cx
  5783 000008DF 7441                    	jz	short win386_inst	; instance more data
  5784 000008E1 49                      	dec	cx
  5785 000008E2 7532                    	jnz	short PopIret		; no functions above this
  5786                                  
  5787                                  	; Get DOS device driver size -- es:di points at device driver header
  5788                                  	; In DOS 4.x, the para before the device header contains an arena 
  5789                                  	; header for the driver.
  5790                                  
  5791 000008E4 8CC0                    	mov	ax,es			; ax = device header segment
  5792                                  
  5793                                  	; We check to see if we have a memory arena for this device driver. 
  5794                                  	; The way to do this would be to look at the previous para to see if
  5795                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5796                                  	; in the arena is the same as the device header segment. These two 
  5797                                  	; checks together should take care of all cases
  5798                                  
  5799 000008E6 48                      	dec	ax			; get arena header
  5800 000008E7 06                      	push	es
  5801 000008E8 8EC0                    	mov	es,ax			; arena header for device driver
  5802                                  
  5803 000008EA 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5804 000008EE 7517                    	jnz	short cantsize		; no, cant size this driver
  5805 000008F0 40                      	inc	ax			; get back device header segment
  5806 000008F1 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5807 000008F5 7510                    	jnz	short cantsize		; no, not a proper arena
  5808                                  
  5809 000008F7 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5810 000008FB 07                      	pop	es
  5811                                  
  5812                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5813                                  	; Speed is not critical and so we choose the shortest method 
  5814                                  	; -- use "mul"
  5815                                  
  5816 000008FC BB1000                  	mov	bx,16
  5817 000008FF F7E3                    	mul	bx
  5818 00000901 89C1                    	mov	cx,ax
  5819 00000903 89D3                    	mov	bx,dx
  5820 00000905 EB09                    	jmp	short win386_done	; return with device driver size
  5821                                  cantsize:
  5822 00000907 07                      	pop	es
  5823 00000908 31C0                    	xor	ax,ax
  5824 0000090A 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5825 0000090C EB08                    	jmp	short PopIret		; return
  5826                                  
  5827                                  win386_patch:
  5828                                  	; dx contains bits marking the patches to be applied. We return 
  5829                                  	; the field with all bits set to indicate that all patches have been
  5830                                  	; done
  5831                                  
  5832 0000090E 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5833                                   	;jmp	short win386_done	; done, return
  5834                                  	; 15/12/2022
  5835                                  	; 15/12/2022
  5836                                  win386_done:
  5837 00000910 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5838 00000913 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5839                                  PopIret:
  5840 00000916 1F                      	pop	ds
  5841 00000917 CF                      	iret	
  5842                                  
  5843                                  win386_size:
  5844                                  	;Return the size of DOS data structures -- currently only CDS size
  5845                                  
  5846                                  	; 17/12/2022
  5847 00000918 F6C201                  	test	dl,1
  5848                                  	;test	dx,1			; check for CDS size bit
  5849 0000091B 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5850                                  
  5851 0000091D B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5852 00000920 EBEE                    	jmp	short win386_done	; return with the size
  5853                                  
  5854                                  win386_inst:
  5855                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device 
  5856                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5857                                  	; this by returning a status of not previously instanced. The basic 
  5858                                  	; structure of these things have not changed and so the current 
  5859                                  	; DOSMGR code should be able to work it out
  5860                                  
  5861 00000922 31D2                    	xor	dx,dx			; make sure dx has a not done value
  5862 00000924 EBF0                    	jmp	short PopIret		; skip done indication
  5863                                  
  5864                                  	; 15/12/2022
  5865                                  ;win386_done:
  5866                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5867                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5868                                  ;PopIret:
  5869                                  ;	pop	ds
  5870                                  ;	iret				; return back up the chain
  5871                                  
  5872                                  	; 15/12/2022
  5873                                  ;win_nexti2f:
  5874                                  	;pop	ds
  5875                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5876                                  
  5877                                  ;End WIN386 support
  5878                                  
  5879                                  ; 15/05/2019
  5880                                  
  5881                                  ;M044; Start of changes
  5882                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5883                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5884                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5885                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5886                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5887                                  ; in leading to a crash. Winoldap issues callouts when it swaps WIndows out
  5888                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5889                                  ; last para of the Windows memory block and then restore this para on the
  5890                                  ; Windows swapin callout. 
  5891                                  
  5892                                  getwinlast:
  5893                                  	; 07/12/2022
  5894 00000926 8B36[3003]              	mov	si,[CurrentPDB]
  5895 0000092A 4E                      	dec	si
  5896 0000092B 8EC6                    	mov	es,si
  5897 0000092D 2603360300              	add	si,[es:3]
  5898 00000932 C3                      	retn
  5899                                  
  5900                                  ; 15/12/2022
  5901                                  %if 0
  5902                                  winold_swap:
  5903                                  	push	ds
  5904                                  	push	es
  5905                                  	push	si
  5906                                  	push	di
  5907                                  	push	cx
  5908                                  
  5909                                  	;getdseg <ds>			;ds = DOSDATA
  5910                                  	mov	ds,[cs:DosDSeg]
  5911                                  
  5912                                  	cmp	al,1			;swap Windows out call
  5913                                  	jne	short swapin		;no, check if Swap in call
  5914                                  	call	getwinlast
  5915                                  	push	ds
  5916                                  	pop	es
  5917                                  	mov	ds,si			;ds = memory arena of Windows
  5918                                  	xor	si,si
  5919                                  	mov	di,WinoldPatch1
  5920                                  	mov	cx,8
  5921                                  	cld
  5922                                  	push	cx
  5923                                  	rep	movsb			;save first 8 bytes
  5924                                  	pop	cx
  5925                                  	mov	di,WinoldPatch2
  5926                                  	rep	movsb			;save next 8 bytes
  5927                                  	jmp	short winold_done
  5928                                  swapin:
  5929                                  	cmp	al,2			;swap Windows in call?
  5930                                  	jne	short winold_done	;no, something else, pass it on
  5931                                  	call	getwinlast
  5932                                  	mov	es,si
  5933                                  	xor	di,di
  5934                                  	mov	si,WinoldPatch1
  5935                                  	mov	cx,8
  5936                                  	cld
  5937                                  	push	cx
  5938                                  	rep	movsb			;restore first 8 bytes
  5939                                  	pop	cx
  5940                                  	mov	si,WinoldPatch2
  5941                                  	rep	movsb			;restore next 8 bytes
  5942                                  winold_done:
  5943                                  	pop	cx
  5944                                  	pop	di
  5945                                  	pop	si
  5946                                  	pop	es
  5947                                  	pop	ds
  5948                                  	jmp	next_i2f		;chain on
  5949                                  
  5950                                  %endif
  5951                                  
  5952                                  ;M044; End of changes
  5953                                  
  5954                                  ; 15/05/2019
  5955                                  
  5956                                  DispatchDOS:
  5957 00000933 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5958 00000938 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5959 0000093D 50                      	PUSH	AX			; push index
  5960 0000093E 55                      	PUSH	BP
  5961 0000093F 89E5                    	MOV	BP,SP
  5962                                  		; stack looks like:
  5963                                  		;   0	BP
  5964                                  		;   2	DISPATCH
  5965                                  		;   4	TABLE
  5966                                  		;   6	RETURN
  5967                                  		;   8	LONG-RETURN
  5968                                  		;   C	FLAGS
  5969                                  		;   E	AX
  5970                                  	
  5971 00000941 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5972 00000944 5D                      	POP	BP
  5973 00000945 E81F09                  	call	TableDispatch
  5974 00000948 E9D4FD                  	JMP	BadFunc 		; return indicates invalid function
  5975                                  
  5976                                  INT2F_etcetera:
  5977                                  	;entry	DosGetGroup
  5978                                  DosGetGroup:
  5979                                  	; MSDOS 3.3
  5980                                  	;push	cs
  5981                                  	;pop	ds
  5982                                  	;retn
  5983                                  
  5984                                  	; MSDOS 6.0
  5985                                  ;SR; Cannot use CS now
  5986                                  ;
  5987                                  ;	PUSH	CS
  5988                                  ;	POP	DS
  5989                                  
  5990                                  	; 04/11/2022
  5991                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5992                                  
  5993                                  	;getdseg <ds>
  5994 0000094B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5995 00000950 C3                      	retn
  5996                                  
  5997                                  	;entry	DOSInstall
  5998                                  DOSInstall:
  5999 00000951 B0FF                    	MOV	AL,0FFh
  6000 00000953 C3                      	retn
  6001                                  
  6002                                  ;ENDIF ; (*)
  6003                                  
  6004                                  
  6005                                  ; 15/05/2019 - Retro DOS v4.0
  6006                                  
  6007                                  ;------------------------------------------------------------------------
  6008                                  ;
  6009                                  ; Procedure Name : RW32_CONVERT
  6010                                  ;
  6011                                  ;Input: same as ABSDRD and ABSDWRT
  6012                                  ;	 ES:BP -> DPB
  6013                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6014                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6015                                  ;	 carry clear, parms ok
  6016                                  ;
  6017                                  ;------------------------------------------------------------------------
  6018                                  
  6019                                  RW32_CONVERT:
  6020 00000954 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6021 00000957 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6022 00000959 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6023 0000095A 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6024 0000095B 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6025 0000095F 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6026 00000963 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6027 00000966 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6028                                  	;INC	DL			;>32mb			;AN000;
  6029                                  	; 17/12/2022
  6030 00000968 42                      	inc	dx
  6031 00000969 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6032 0000096B F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6033 0000096D 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6034                                  letold:
  6035 0000096F 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6036 00000970 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6037 00000971 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6038                                  
  6039 00000973 1E                      	push	ds
  6040                                  	;getdseg <ds>
  6041 00000974 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6042 00000979 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6043 0000097F 1F                      	pop	ds
  6044                                  
  6045 00000980 F9                      	STC				;>32mb			;AN000;
  6046 00000981 C3                      	retn				;>32mb			;AN000;
  6047                                  
  6048                                  new32format:
  6049                                  	;mov	dx,[bx+2]
  6050 00000982 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6051                                  
  6052 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6053                                  	;getdseg <ds>
  6054 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6055 0000098B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6056 0000098F 1F                      	pop	ds
  6057                                  
  6058 00000990 8B17                    	mov	dx,[bx]
  6059                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6060                                  	;mov	cx,[bx+4]
  6061 00000992 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6062                                  	;lds	bx,[bx+6]
  6063 00000995 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6064                                  old_style:				;>32mb			;AN000;
  6065 00000998 F8                      	CLC				;>32mb			;AN000;
  6066 00000999 C3                      	retn				;>32mb			;AN000;
  6067                                  
  6068                                  ;------------------------------------------------------------------------
  6069                                  ;
  6070                                  ; Procedure Name : Fastxxx_Purge
  6071                                  ;
  6072                                  ; Input: None
  6073                                  ; Functions: Purge Fastopen/ Cache Buffers
  6074                                  ; Output: None
  6075                                  ;
  6076                                  ;------------------------------------------------------------------------
  6077                                  
  6078                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6079                                  
  6080                                  Fastxxx_Purge:
  6081 0000099A 50                      	PUSH	AX			; save regs.	;AN000;
  6082 0000099B 56                      	PUSH	SI						;AN000;
  6083 0000099C 52                      	PUSH	DX						;AN000;
  6084                                  topen:
  6085 0000099D 1E                      	push	ds			; set up ds to DOSDATA
  6086                                  	;getdseg <ds>
  6087 0000099E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6088                                  
  6089 000009A3 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6090                                  					; fastopen installed ?	;AN000;
  6091 000009A8 1F                      	pop	ds
  6092 000009A9 740B                    	JZ	short nofast		; no			;AN000;
  6093 000009AB B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6094                                  dofast:
  6095 000009AD B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6096                                  	;;mov	dl,[es:bp+0]
  6097                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6098                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6099                                  	; 15/12/2022
  6100 000009AF 268A5600                	mov	dl,[es:bp]
  6101                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6102 000009B3 E8B11D                  	call	Fast_Dispatch
  6103                                  nofast:
  6104 000009B6 5A                      	POP	DX						;AN000;
  6105 000009B7 5E                      	POP	SI			; restore regs		;AN000;
  6106 000009B8 58                      	POP	AX			 			;AN000;
  6107 000009B9 C3                      	retn				; exit
  6108                                  
  6109                                  ;============================================================================
  6110                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6111                                  ;============================================================================
  6112                                  ; 29/04/2019 - Retro DOS v4.0
  6113                                  
  6114                                  ;include dossym.inc
  6115                                  ;include dosmac.inc
  6116                                  ;include doscntry.inc
  6117                                  
  6118                                  ; DOSCODE Segment
  6119                                  
  6120                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6121                                  ; ---------------------------------------------------------------------------
  6122                                  ;include divmes.inc
  6123                                  
  6124                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6125                                  ; -------------------------------------
  6126                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6127                                  
  6128                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6129                                  	;PUBLIC	DIVMES
  6130                                  
  6131 000009BA 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6131 000009C3 6F766572666C6F770D-
  6131 000009CC 0A                 
  6132                                  
  6133                                  	;PUBLIC	DivMesLen
  6134                                  DivMesLen:
  6135 000009CD 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6136                                  
  6137                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6138                                  ; -------------------------------------
  6139                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6140                                  
  6141                                  ; (MSDOS 6.0)
  6142                                  ; VxD not found error message
  6143                                  
  6144                                  NoVxDErrMsg:
  6145 000009CF 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6145 000009D8 686176652074686520-
  6145 000009E1 66696C652057494E41-
  6145 000009EA 32302E33383620696E-
  6145 000009F3 2074686520726F6F74-
  6145 000009FC 206F6620796F757220-
  6145 00000A05 626F6F742064726976-
  6145 00000A0E 65                 
  6146 00000A0F 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6146 00000A18 57696E646F77732069-
  6146 00000A21 6E20456E68616E6365-
  6146 00000A2A 64204D6F64650D0A   
  6147                                  
  6148                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6149                                  
  6150                                  ; 13/05/2019 - Retro DOS v4.0
  6151                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6152                                  
  6153                                  ;include yesno.asm  (MNSDOS 6.0)
  6154                                  ; -------------------------------------
  6155                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6156                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6157                                  
  6158                                  ; This is for country Yes and No
  6159                                  
  6160 00000A32 59                      NLS_YES:	db 'Y'
  6161 00000A33 4E                      NLS_NO:		db 'N'
  6162 00000A34 79                      NLS_yes2:	db 'y'
  6163 00000A35 6E                      NLS_no2:	db 'n'
  6164                                  
  6165                                  ; ---------------------------------------------------------------------------
  6166                                  
  6167                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6168                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6169                                  
  6170                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6171                                  
  6172                                  ; The following two tables implement the current buffered input editing
  6173                                  ; routines. The tables are pairwise associated in reverse order for ease
  6174                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6175                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6176                                  
  6177                                  	;PUBLIC	CANCHAR
  6178                                  CANCHAR:
  6179 00000A36 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6180                                  	
  6181                                  	;PUBLIC	ESCCHAR
  6182                                  ESCCHAR:
  6183 00000A37 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6184                                  	
  6185                                  	;IF	NOT Rainbow
  6186                                  
  6187                                  ESCTAB:	; LABEL BYTE
  6188                                  
  6189                                  	;IF	IBM
  6190 00000A38 40                      	DB	64		; Ctrl-Z - F6
  6191 00000A39 4D                      	DB	77		; Copy one char - -->
  6192 00000A3A 3B                      	DB	59		; Copy one char - F1
  6193 00000A3B 53                      	DB	83		; Skip one char - DEL
  6194 00000A3C 3C                      	DB	60		; Copy to char - F2
  6195 00000A3D 3E                      	DB	62		; Skip to char - F4
  6196 00000A3E 3D                      	DB	61		; Copy line - F3
  6197 00000A3F 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6198 00000A40 3F                      	DB	63		; Reedit line (new template) - F5
  6199 00000A41 4B                      	DB	75		; Backspace - <--
  6200 00000A42 52                      	DB	82		; Enter insert mode - INS (toggle)
  6201 00000A43 52                      	DB	82		; Exit insert mode - INS (toggle)
  6202 00000A44 41                      	DB	65		; Escape character - F7
  6203 00000A45 41                      	DB	65		; End of table
  6204                                  	;ENDIF
  6205                                  
  6206                                  ESCEND: ; LABEL BYTE
  6207                                  
  6208                                  ESCTABLEN EQU ESCEND-ESCTAB
  6209                                  
  6210                                  ESCFUNC: ; LABEL WORD
  6211                                  	
  6212 00000A46 [6014]                  	short_addr  GETCH	; Ignore the escape sequence
  6213 00000A48 [5015]                  	short_addr  TWOESC
  6214 00000A4A [D815]                  	short_addr  EXITINS
  6215 00000A4C [D815]                  	short_addr  ENTERINS
  6216 00000A4E [DA14]                  	short_addr  BACKSP
  6217 00000A50 [C415]                  	short_addr  REEDIT
  6218 00000A52 [C714]                  	short_addr  KILNEW
  6219 00000A54 [5715]                  	short_addr  COPYLIN
  6220 00000A56 [8A15]                  	short_addr  SKIPSTR
  6221 00000A58 [5D15]                  	short_addr  COPYSTR
  6222 00000A5A [8015]                  	short_addr  SKIPONE
  6223 00000A5C [6215]                  	short_addr  COPYONE
  6224 00000A5E [6215]                  	short_addr  COPYONE
  6225 00000A60 [E015]                  	short_addr  CTRLZ
  6226                                  
  6227                                  	;ENDIF
  6228                                  
  6229                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6230                                  ; ---------------------------------------------------------------------------
  6231                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6232                                  
  6233                                  ; OEMFunction key is expected to process a single function
  6234                                  ;   key input from a device and dispatch to the proper
  6235                                  ;   routines leaving all registers UNTOUCHED.
  6236                                  ;
  6237                                  ; Inputs:   CS, SS are DOSGROUP
  6238                                  ; Outputs:  None. This function is expected to JMP to onw of
  6239                                  ;           the following labels:
  6240                                  ;
  6241                                  ;           GetCh       - ignore the sequence
  6242                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6243                                  ;           ExitIns     - toggle insert mode
  6244                                  ;           EnterIns    - toggle insert mode
  6245                                  ;           BackSp      - move backwards one space
  6246                                  ;           ReEdit      - reedit the line with a new template
  6247                                  ;           KilNew      - discard the current line and start from scratch
  6248                                  ;           CopyLin     - copy the rest of the template into the line
  6249                                  ;           SkipStr     - read the next character and skip to it in the template
  6250                                  ;           CopyStr     - read next char and copy from template to line until char
  6251                                  ;           SkipOne     - advance position in template one character
  6252                                  ;           CopyOne     - copy next character in template into line
  6253                                  ;           CtrlZ       - place a ^Z into the template
  6254                                  ; Registers that are allowed to be modified by this function are:
  6255                                  ;           AX, CX, BP
  6256                                  
  6257                                  ; 13/05/2019 - Retro DOS v4.0
  6258                                  ; -------------------------------------
  6259                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6260                                  
  6261                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6262                                  ; -------------------------------------
  6263                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6264                                  
  6265                                  OEMFunctionKey:
  6266 00000A62 E85B09                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6267 00000A65 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6268 00000A67 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6269 00000A68 BF[380A]                	MOV     DI,ESCTAB		; offset of second byte table
  6270 00000A6B 06                      	push	es
  6271 00000A6C 0E                      	push	cs
  6272 00000A6D 07                      	pop	es
  6273 00000A6E F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6274 00000A70 07                      	pop	es
  6275 00000A71 5F                      	POP     DI                      ; restore DI
  6276 00000A72 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6277 00000A74 89CD                    	MOV     BP,CX                   ; move to indexable register
  6278                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6279 00000A76 2EFFA6[460A]            	JMP	word [CS:BP+ESCFUNC]
  6280                                  
  6281                                  ;DOSCODE ENDS
  6282                                  	
  6283                                  ;============================================================================
  6284                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6285                                  ;============================================================================
  6286                                  ; Retro DOS v3.0 - 18/07/2018
  6287                                  
  6288                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6289                                  ;----------------------------------------------------------------------------
  6290                                  ; Retro DOS v2.0 - 13/03/2018
  6291                                  
  6292                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6293                                  
  6294                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6295                                  
  6296                                  ;**	$GET_DATE - Get Current Date
  6297                                  ;----------------------------------------
  6298                                  ;	ENTRY	none
  6299                                  ;	EXIT	(cx:dx) = current date
  6300                                  ;	USES	all
  6301                                  
  6302                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6303                                  
  6304                                  _$GET_DATE:	;System call 42
  6305                                  
  6306 00000A7B 16                              PUSH    SS
  6307 00000A7C 1F                              POP     DS
  6308 00000A7D E8B900                          CALL	READTIME        ;Check for rollover to next day
  6309 00000A80 A1[5203]                        MOV     AX,[YEAR]
  6310                                  
  6311                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6312                                  
  6313 00000A83 8B1E[5003]                      MOV     BX,[DAY]	; fetch both day and month
  6314 00000A87 E805FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6315                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6316 00000A8A 895C06                  	MOV	[SI+user_env.user_DX],BX
  6317 00000A8D 05BC07                          ADD     AX,1980         ;Put bias back
  6318                                          ;MOV    [SI+4],AX  	;CX=year
  6319 00000A90 894404                  	MOV	[SI+user_env.user_CX],AX
  6320 00000A93 36A0[5603]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6321                                  RET20:	; 05/11/2022
  6322                                  RET24:	; 18/12/2022
  6323 00000A97 C3                      	RETN
  6324                                  
  6325                                  ;**	$SET_DATE - Set Current Date
  6326                                  ;----------------------------------------
  6327                                  ;	ENTRY	(cx:dx) = current date
  6328                                  ;	EXIT	(al) = -1 iff bad date
  6329                                  ;		(al) = 0 if ok
  6330                                  ;	USES	all
  6331                                  
  6332                                  _$SET_DATE:			;System call 43
  6333                                  
  6334 00000A98 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6335 00000A9A 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6336                                  	;JC	SHORT RET24	;Error if not big enough
  6337                                          ; 05/11/2022
  6338 00000A9E 72F7                    	jc	short RET20
  6339 00000AA0 83F977                  	CMP     CX,119          ;Year must be less than 2100
  6340 00000AA3 77F2                            JA      SHORT RET24
  6341 00000AA5 08F6                            OR      DH,DH
  6342                                          ;JZ	SHORT RET24
  6343                                   	; 05/11/2022
  6344 00000AA7 74EE                    	jz	short RET20
  6345 00000AA9 08D2                            OR      DL,DL
  6346                                          ;JZ	SHORT RET24	;Error if either month or day is 0
  6347                                  	; 05/11/2022
  6348 00000AAB 74EA                    	jz	short RET20
  6349 00000AAD 80FE0C                          CMP     DH,12           ;Check against max. month
  6350 00000AB0 77E5                            JA      SHORT RET24
  6351 00000AB2 16                              PUSH    SS
  6352 00000AB3 1F                              POP     DS
  6353                                  	;CALL	DODATE
  6354                                  	; 18/12/2022
  6355 00000AB4 E91801                  	jmp	DODATE
  6356                                  ;RET24:  
  6357                                  	;RETN
  6358                                  
  6359                                  ;**	$GET_TIME - Get Current Time
  6360                                  ;----------------------------------------
  6361                                  ;	ENTRY	none
  6362                                  ;	EXIT	(cx:dx) = current time
  6363                                  ;	USES	all
  6364                                  
  6365                                  _$GET_TIME:			;System call 44
  6366                                  
  6367 00000AB7 16                              PUSH    SS
  6368 00000AB8 1F                              POP     DS
  6369 00000AB9 E87D00                  	CALL	READTIME
  6370 00000ABC E8D0F9                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6371                                         ;MOV     [SI+6],DX
  6372 00000ABF 895406                  	MOV	[SI+user_env.user_DX],DX
  6373                                         ;MOV     [SI+4],CX
  6374 00000AC2 894C04                  	MOV	[SI+user_env.user_CX],CX
  6375 00000AC5 30C0                            XOR     AL,AL
  6376                                  RET26:  
  6377 00000AC7 C3                      	RETN
  6378                                  
  6379                                  ;**	$SET_TIME - Set Current Time
  6380                                  ;----------------------------------------
  6381                                  ;	ENTRY	(cx:dx) = time
  6382                                  ;	EXIT	(al) = 0 if 0k
  6383                                  ;		(al) = -1 if invalid
  6384                                  ;	USES	ALL
  6385                                  
  6386                                  _$SET_TIME:			;System call 45
  6387                                  
  6388 00000AC8 B0FF                            MOV     AL,-1           ;Flag in case of error
  6389 00000ACA 80FD18                          CMP     CH,24           ;Check hours
  6390 00000ACD 73F8                            JAE     SHORT RET26
  6391 00000ACF 80F93C                          CMP     CL,60           ;Check minutes
  6392 00000AD2 73F3                            JAE     SHORT RET26
  6393 00000AD4 80FE3C                          CMP     DH,60           ;Check seconds
  6394 00000AD7 73EE                            JAE     SHORT RET26
  6395 00000AD9 80FA64                          CMP     DL,100          ;Check 1/100's
  6396 00000ADC 73E9                            JAE     SHORT RET26
  6397 00000ADE 51                              PUSH    CX
  6398 00000ADF 52                              PUSH    DX
  6399 00000AE0 16                              PUSH    SS
  6400 00000AE1 1F                              POP     DS
  6401 00000AE2 BB[B603]                        MOV     BX,TIMEBUF
  6402 00000AE5 B90600                          MOV     CX,6
  6403 00000AE8 31D2                            XOR     DX,DX
  6404 00000AEA 89D0                            MOV     AX,DX
  6405 00000AEC 53                              PUSH    BX
  6406 00000AED E85D3C                  	CALL	SETREAD
  6407 00000AF0 1E                              PUSH    DS
  6408 00000AF1 C536[2E00]                      LDS     SI,[BCLOCK]
  6409 00000AF5 E8DF3B                  	CALL	DEVIOCALL2      ;Get correct day count
  6410 00000AF8 1F                              POP     DS
  6411 00000AF9 5B                              POP     BX
  6412 00000AFA E8833C                  	CALL	SETWRITE
  6413 00000AFD 8F06[BA03]                      POP     WORD [TIMEBUF+4]
  6414 00000B01 8F06[B803]                      POP     WORD [TIMEBUF+2]
  6415 00000B05 C536[2E00]                      LDS     SI,[BCLOCK]
  6416 00000B09 E8CB3B                  	CALL	DEVIOCALL2      ;Set the time
  6417 00000B0C 30C0                            XOR     AL,AL
  6418 00000B0E C3                              RETN
  6419                                  
  6420                                  ; 11/07/2018 - Retro DOS v3.0
  6421                                  ; Retro DOS v2.0 - 14/03/2018
  6422                                  
  6423                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6424                                  
  6425                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6426                                  ;----------------------------------------------------------
  6427                                  ; Date16 returns the current date in AX, current time in DX
  6428                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6429                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6430                                  
  6431                                  DATE16:
  6432                                  	
  6433                                  ;M048	Context DS
  6434                                  ;
  6435                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6436                                  ; is DOSDATA
  6437                                  
  6438                                  	;push	ss
  6439                                  	;pop	ds
  6440                                  
  6441                                  	;getdseg <ds>		; M048
  6442                                  
  6443                                  	; 13/05/2019 - Retro DOS v4.0
  6444 00000B0F 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6445                                  
  6446 00000B14 51                              PUSH    CX
  6447 00000B15 06                              PUSH    ES
  6448 00000B16 E82000                          CALL    READTIME
  6449 00000B19 07                              POP     ES
  6450 00000B1A D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6451 00000B1C D0E1                            SHL     CL,1
  6452 00000B1E D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6453 00000B20 D1E1                            SHL     CX,1
  6454 00000B22 D1E1                            SHL     CX,1
  6455 00000B24 D0EE                            SHR     DH,1            ;Count every two seconds
  6456 00000B26 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6457 00000B28 89CA                            MOV     DX,CX
  6458                                  
  6459                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6460                                  
  6461 00000B2A A1[5103]                        MOV     AX,[MONTH]	;Fetch month and year
  6462 00000B2D B104                            MOV     CL,4
  6463 00000B2F D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6464 00000B31 D1E0                            SHL     AX,1
  6465 00000B33 59                              POP     CX
  6466 00000B34 0A06[5003]                      OR      AL,[DAY]
  6467                                  RET21:
  6468 00000B38 C3                              RETN
  6469                                  
  6470                                  ;----------------------------------------------------------
  6471                                  
  6472                                  READTIME:
  6473                                  
  6474                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6475                                  ;Uses AX, CX, DX.
  6476                                  
  6477 00000B39 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6478 00000B3F 56                              PUSH    SI
  6479 00000B40 53                              PUSH    BX
  6480                                  
  6481 00000B41 BB[B603]                        MOV     BX,TIMEBUF
  6482                                  
  6483 00000B44 B90600                          MOV     CX,6
  6484 00000B47 31D2                            XOR     DX,DX
  6485 00000B49 89D0                            MOV     AX,DX
  6486 00000B4B E8FF3B                  	CALL	SETREAD
  6487 00000B4E 1E                              PUSH    DS
  6488 00000B4F C536[2E00]                      LDS     SI,[BCLOCK]
  6489 00000B53 E8813B                  	CALL	DEVIOCALL2      ;Get correct date and time
  6490 00000B56 1F                              POP     DS
  6491 00000B57 5B                              POP     BX
  6492 00000B58 5E                              POP     SI
  6493 00000B59 A1[B603]                        MOV     AX,[TIMEBUF]
  6494 00000B5C 8B0E[B803]                      MOV     CX,[TIMEBUF+2]
  6495 00000B60 8B16[BA03]                      MOV     DX,[TIMEBUF+4]
  6496 00000B64 3B06[5403]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6497                                          ;JZ	SHORT RET22
  6498 00000B68 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6499                                  	;cmp	ax,43830
  6500 00000B6A 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6501 00000B6D 733D                            JAE     SHORT RET22	;Ignore if too large
  6502 00000B6F A3[5403]                        MOV     [DAYCNT],AX
  6503 00000B72 56                              PUSH    SI
  6504 00000B73 51                              PUSH    CX
  6505 00000B74 52                              PUSH    DX              ;Save time
  6506 00000B75 31D2                            XOR     DX,DX
  6507                                  	;mov	cx,1461
  6508 00000B77 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6509 00000B7A F7F1                            DIV     CX              ;Compute number of 4-year units
  6510 00000B7C D1E0                            SHL     AX,1
  6511 00000B7E D1E0                            SHL     AX,1
  6512 00000B80 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6513 00000B82 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6514                                  
  6515 00000B84 BE[140D]                        MOV     SI,YRTAB        ;Table of days in each year
  6516                                  
  6517 00000B87 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6518 00000B8A D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6519 00000B8C 7304                            JNC     SHORT SK	;Extra half-year?
  6520 00000B8E 81C2C800                        ADD     DX,200
  6521                                  SK:
  6522 00000B92 E82400                          CALL    SETYEAR
  6523 00000B95 B101                            MOV     CL,1            ;At least at first month in year
  6524                                  
  6525 00000B97 BE[1C0D]                        MOV     SI,MONTAB       ;Table of days in each month
  6526                                          
  6527 00000B9A E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6528 00000B9D 880E[5103]                      MOV     [MONTH],CL
  6529 00000BA1 42                              INC     DX              ;Remainder is day of month (start with one)
  6530 00000BA2 8816[5003]                      MOV     [DAY],DL
  6531 00000BA6 E89700                          CALL    WKDAY           ;Set day of week
  6532 00000BA9 5A                              POP     DX
  6533 00000BAA 59                              POP     CX
  6534 00000BAB 5E                              POP     SI
  6535                                  RET22:  
  6536 00000BAC C3                      	RETN
  6537                                  
  6538                                  ;----------------------------------------------------------
  6539                                  
  6540                                  DSLIDE:
  6541 00000BAD B400                            MOV     AH,0
  6542                                  DSLIDE1:
  6543 00000BAF AC                              LODSB			;Get count of days
  6544 00000BB0 39C2                            CMP     DX,AX           ;See if it will fit
  6545                                          ;JB	SHORT RET23	;If not, done
  6546 00000BB2 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6547 00000BB4 29C2                            SUB     DX,AX
  6548 00000BB6 41                              INC     CX              ;Count one more month/year
  6549 00000BB7 EBF6                            JMP     SHORT DSLIDE1
  6550                                  
  6551                                  ;----------------------------------------------------------
  6552                                  
  6553                                  SETYEAR:
  6554                                  
  6555                                  ;Set year with value in CX. Adjust length of February for this year.
  6556                                  
  6557                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6558                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6559                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6560                                  ;	preserve DS as CHKYR is also called as a routine.
  6561                                  
  6562                                  	; MSDOS 6.0 (18/07/2018) ; *
  6563                                  
  6564                                  	;GETDSEG DS
  6565                                  
  6566                                  	;PUSH	CS  ; *
  6567                                  	;POP	DS  ; *
  6568                                  
  6569                                  	; 13/05/2019 - Retro DOS v4.0
  6570 00000BB9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6571                                  
  6572                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6573                                  	; 05/11/2022 
  6574                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6575                                  
  6576 00000BBE 880E[5203]                      MOV     [YEAR],CL
  6577                                  CHKYR:
  6578 00000BC2 F6C103                          TEST    CL,3            ;Check for leap year
  6579 00000BC5 B01C                            MOV     AL,28
  6580 00000BC7 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6581 00000BC9 FEC0                            INC     AL              ;Add leap day
  6582                                  SAVFEB:
  6583 00000BCB A2[1D0D]                	mov	[february],al
  6584                                          ;MOV	[MONTAB+1],AL   ;Store for February
  6585                                  RET23:  
  6586 00000BCE C3                      	RETN
  6587                                  
  6588                                  ;----------------------------------------------------------
  6589                                  
  6590                                  DODATE:
  6591 00000BCF E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6592 00000BD2 88F0                            MOV     AL,DH
  6593                                  
  6594 00000BD4 BB[1B0D]                        MOV     BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6595                                  
  6596 00000BD7 D7                              XLAT                    ;Look up days in month
  6597 00000BD8 38D0                            CMP     AL,DL
  6598 00000BDA B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6599                                          ;JB	SHORT RET25	;Error if too many days
  6600 00000BDC 72F0                            jb	short RET23 ; 18/07/2018
  6601 00000BDE E8D8FF                  	CALL    SETYEAR
  6602                                  ;
  6603                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6604                                  ;
  6605 00000BE1 8916[5003]                      MOV     [DAY],DX	;Set both day and month
  6606 00000BE5 D1E9                            SHR     CX,1
  6607 00000BE7 D1E9                            SHR     CX,1
  6608                                  	;mov	ax,1461
  6609 00000BE9 B8B505                          MOV     AX,FOURYEARS
  6610 00000BEC 89D3                            MOV     BX,DX
  6611 00000BEE F7E1                            MUL     CX
  6612 00000BF0 8A0E[5203]                      MOV     CL,[YEAR]
  6613 00000BF4 80E103                          AND     CL,3
  6614                                  
  6615 00000BF7 BE[140D]                        MOV     SI,YRTAB
  6616                                  
  6617 00000BFA 89C2                            MOV     DX,AX
  6618 00000BFC D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6619 00000BFE E85200                          CALL    DSUM            ;Add up the days in each year
  6620 00000C01 88F9                            MOV     CL,BH           ;Month of year
  6621                                  
  6622 00000C03 BE[1C0D]                        MOV     SI,MONTAB
  6623                                  
  6624 00000C06 49                              DEC     CX              ;Account for months starting with one
  6625 00000C07 E84900                          CALL    DSUM            ;Add up days in each month
  6626 00000C0A 88D9                            MOV     CL,BL           ;Day of month
  6627 00000C0C 49                              DEC     CX              ;Account for days starting with one
  6628 00000C0D 01CA                            ADD     DX,CX           ;Add in to day total
  6629 00000C0F 92                              XCHG    AX,DX           ;Get day count in AX
  6630 00000C10 A3[5403]                        MOV     [DAYCNT],AX
  6631 00000C13 56                              PUSH    SI
  6632 00000C14 53                              PUSH    BX
  6633 00000C15 50                              PUSH    AX
  6634                                  
  6635 00000C16 BB[B603]                        MOV     BX,TIMEBUF
  6636                                  
  6637 00000C19 B90600                          MOV     CX,6
  6638 00000C1C 31D2                            XOR     DX,DX
  6639 00000C1E 89D0                            MOV     AX,DX
  6640 00000C20 53                              PUSH    BX
  6641 00000C21 E8293B                  	CALL	SETREAD
  6642                                  
  6643 00000C24 1E                              PUSH    DS
  6644 00000C25 C536[2E00]                      LDS     SI,[BCLOCK]
  6645 00000C29 E8AB3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6646 00000C2C 1F                              POP     DS
  6647 00000C2D 5B                              POP     BX
  6648 00000C2E E84F3B                  	CALL	SETWRITE
  6649 00000C31 8F06[B603]                      POP     WORD [TIMEBUF]
  6650 00000C35 1E                              PUSH    DS
  6651 00000C36 C536[2E00]                      LDS     SI,[BCLOCK]
  6652 00000C3A E89A3A                  	CALL	DEVIOCALL2      ;Set the date
  6653 00000C3D 1F                              POP     DS
  6654 00000C3E 5B                              POP     BX
  6655 00000C3F 5E                              POP     SI
  6656                                  WKDAY:
  6657 00000C40 A1[5403]                        MOV     AX,[DAYCNT]
  6658 00000C43 31D2                            XOR     DX,DX
  6659 00000C45 B90700                          MOV     CX,7
  6660 00000C48 40                              INC     AX
  6661 00000C49 40                              INC     AX              ;First day was Tuesday
  6662 00000C4A F7F1                            DIV     CX              ;Compute day of week
  6663 00000C4C 8816[5603]                      MOV     [WEEKDAY],DL
  6664 00000C50 30C0                            XOR     AL,AL           ;Flag OK
  6665                                  RET25:
  6666 00000C52 C3                      	RETN
  6667                                  
  6668                                  ;----------------------------------------------------------
  6669                                  
  6670                                  ;**	DSUM - Compute the sum of a string of bytes
  6671                                  ;
  6672                                  ;	ENTRY	(cx) = byte count
  6673                                  ;		(ds:si) = byte address
  6674                                  ;		(dx) = sum register, initialized by caller
  6675                                  ;	EXIT	(dx) updated
  6676                                  ;	USES	ax, cx, dx, si, flags
  6677                                  
  6678                                  DSUM:
  6679 00000C53 B400                            MOV     AH,0
  6680 00000C55 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6681                                         ;JCXZ	RET25 ; 18/07/2018
  6682                                  DSUM1:
  6683 00000C57 AC                              LODSB
  6684 00000C58 01C2                            ADD     DX,AX
  6685 00000C5A E2FB                            LOOP    DSUM1
  6686                                  DSUM9:
  6687 00000C5C C3                              RETN
  6688                                  
  6689                                  ;============================================================================
  6690                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6691                                  ;============================================================================
  6692                                  ; 29/04/2019 - Retro DOS v4.0
  6693                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6694                                  
  6695                                  ; 12/03/2018 - Retro DOS v2.0 
  6696                                  
  6697                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6698                                  ;NAME	GETSET
  6699                                  
  6700                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6701                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6702                                  
  6703                                  ;USERNUM:
  6704                                  ;	DW	0			; 24 bit user number
  6705                                  ;       DB      0
  6706                                  ;;	IF      IBM
  6707                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6708                                  ;;	ELSE
  6709                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6710                                  ;;	ENDIF
  6711                                  
  6712                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6713                                  ;; 08/07/2018 - Retro DOS v3.0
  6714                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6715                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6716                                  
  6717                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6718                                  ;----------------------------------------------------------------------------
  6719                                  
  6720                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6721                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6722                                  
  6723                                  _$GET_VERSION:
  6724                                  
  6725                                  ; Inputs:
  6726                                  ;       None
  6727                                  ; Function:
  6728                                  ;       Return MS-DOS version number
  6729                                  ; Outputs:
  6730                                  ;       OEM number in BH
  6731                                  ;       User number in BL:CX (24 bits)
  6732                                  ;       Version number as AL.AH in binary
  6733                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6734                                  
  6735                                  ; MSDOS 6.0
  6736                                  ;
  6737                                  ;	Fake_Count is used to lie about the version numbers to support
  6738                                  ;	old binarys. See ms_table.asm for more info.
  6739                                  ;
  6740                                  ;		if input al = 00
  6741                                  ;		  (bh) = OEM number			
  6742                                  ;		else if input al = 01
  6743                                  ;		  (bh) = version flags
  6744                                  ;		 
  6745                                  ;		       	 bits 0-2 = DOS internal revision
  6746                                  ;		       	 bits 3-7 = DOS type flags
  6747                                  ;		              bit 3    = DOS is in ROM
  6748                                  ;		              bit 4    = DOS in in HMA
  6749                                  ;		              bits 5-7 = reserved
  6750                                  ;               M007 change - only bit 3 is now valid. Other bits
  6751                                  ;               are 0 when AL = 1
  6752                                  
  6753                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6754                                  	;--------------------------------------
  6755                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6756                                  
  6757 00000C5D 16                              PUSH    SS
  6758 00000C5E 1F                              POP     DS
  6759 00000C5F 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6760 00000C63 8B0E[B203]                      MOV     CX,[USERNUM]
  6761                                  
  6762                                  	; 13/05/2019 - Retro DOS v4.0
  6763                                  
  6764                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6765                                  	;DOS flags
  6766                                  
  6767 00000C67 3C01                    	cmp	AL,1
  6768 00000C69 7502                    	jne	short Norm_Vers
  6769                                  
  6770                                  ;ifdef ROMDOS
  6771                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6772                                  ;				(DOSINROM = 8)
  6773                                  ;else
  6774 00000C6B 30FF                            xor     bh,bh		; Otherwise return 0
  6775                                  ;endif				;M007 end
  6776                                  
  6777                                  Norm_Vers:
  6778                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6779                                  
  6780                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6781                                  	; 13/05/2019 - Retro DOS v4.0
  6782 00000C6D 1E                      	push	ds		; Get the version number from the
  6783 00000C6E 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6784                                  	;mov	ax,[40h]
  6785 00000C72 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6786                                  	; 07/12/2022
  6787 00000C75 1F                      	pop	ds
  6788 00000C76 E816F8                  	call	Get_User_Stack
  6789                                  				; Put values for return registers
  6790                                  				; in the proper place on the user's	 
  6791                                  				; stack addressed by DS:SI
  6792                                          ;MOV	[SI+user_env.user_AX],AX
  6793 00000C79 8904                            MOV	[SI],AX			 
  6794                                  	;MOV	[SI+2],BX		 
  6795 00000C7B 895C02                  	mov	[SI+user_env.user_BX],BX 
  6796                                          ;MOV	[SI+4],CX
  6797 00000C7E 894C04                  	mov	[SI+user_env.user_CX],CX
  6798                                  
  6799 00000C81 C3                      	RETN
  6800                                  
  6801                                  ; 18/07/2018 - Retro DOS v3.0
  6802                                  
  6803                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6804                                  ;----------------------------------------------------------------------------
  6805                                  
  6806                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6807                                  ;
  6808                                  ;	ENTRY	none
  6809                                  ;	EXIT	(al) = value of VERIFY flag
  6810                                  ;	USES	all
  6811                                  
  6812                                  
  6813                                  _$GET_VERIFY_ON_WRITE:
  6814                                  
  6815                                  ;hkn; SS override
  6816 00000C82 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6817 00000C86 C3                      	retn
  6818                                  
  6819                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6820                                  ;
  6821                                  ;	ENTRY	(al) = value of VERIFY flag
  6822                                  ;	EXIT	none
  6823                                  ;	USES	all
  6824                                  
  6825                                  _$SET_VERIFY_ON_WRITE:
  6826                                  
  6827 00000C87 2401                    	AND	AL,1
  6828                                  ;hkn; SS override
  6829 00000C89 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6830                                  RET27:	; 18/07/2018
  6831 00000C8D C3                      	retn
  6832                                  
  6833                                  ; 19/07/2018 - Retro DOS v3.0
  6834                                  
  6835                                  ;BREAK <$International - return country-dependent information>
  6836                                  ;----------------------------------------------------------------------------
  6837                                  ;
  6838                                  ; Procedure Name : $INTERNATIONAL
  6839                                  ;
  6840                                  ; Inputs:
  6841                                  ;	MOV	AH,International
  6842                                  ;	MOV	AL,country	(al = 0 => current country)
  6843                                  ;      [MOV	BX,country]
  6844                                  ;	LDS	DX,block
  6845                                  ;	INT	21
  6846                                  ; Function:
  6847                                  ;	give users an idea of what country the application is running
  6848                                  ; Outputs:
  6849                                  ;	IF DX != -1 on input (get country)
  6850                                  ;	  AL = 0 means return current country table.
  6851                                  ;	  0<AL<0FFH means return country table for country AL
  6852                                  ;	  AL = 0FF means return country table for country BX
  6853                                  ;	  No Carry:
  6854                                  ;	     Register BX will contain the 16-bit country code.
  6855                                  ;	     Register AL will contain the low 8 bits of the country code.
  6856                                  ;	     The block pointed to by DS:DX is filled in with the information
  6857                                  ;	     for the particular country.
  6858                                  ;		BYTE  Size of this table excluding this byte and the next
  6859                                  ;		BYTE  Country code represented by this table
  6860                                  ;			A sequence of n bytes, where n is the number specified
  6861                                  ;			by the first byte above and is not > internat_block_max,
  6862                                  ;			in the correct order for being returned by the
  6863                                  ;			INTERNATIONAL call as follows:
  6864                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6865                                  ;		5 BYTE	Currency symbol null terminated
  6866                                  ;		2 BYTE	thousands separator null terminated
  6867                                  ;		2 BYTE	Decimal point null terminated
  6868                                  ;		2 BYTE	Date separator null terminated
  6869                                  ;		2 BYTE	Time separator null terminated
  6870                                  ;		1 BYTE	Bit field.  Currency format.
  6871                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6872                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6873                                  ;		1 BYTE	No. of significant decimal digits in currency
  6874                                  ;		1 BYTE	Bit field.  Time format.
  6875                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6876                                  ;		DWORD	Call address of case conversion routine
  6877                                  ;		2 BYTE	Data list separator null terminated.
  6878                                  ;	  Carry:
  6879                                  ;	     Register AX has the error code.
  6880                                  ;	IF DX = -1 on input (set current country)
  6881                                  ;	  AL = 0 is an error
  6882                                  ;	  0<AL<0FFH means set current country to country AL
  6883                                  ;	  AL = 0FF means set current country to country BX
  6884                                  ;	  No Carry:
  6885                                  ;	    Current country SET
  6886                                  ;	    Register AL will contain the low 8 bits of the country code.
  6887                                  ;	  Carry:
  6888                                  ;	     Register AX has the error code.
  6889                                  ;-----------------------------------------------------------------------------
  6890                                  
  6891                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6892                                  
  6893                                  ; 13/05/2019 - Retro DOS v4.0
  6894                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6895                                  
  6896                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6897                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6898                                  
  6899                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6900                                  	 
  6901 00000C8E 3CFF                    	CMP	AL,0FFH
  6902 00000C90 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6903 00000C92 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6904 00000C94 30FF                    	XOR	BH,BH
  6905                                  BX_HAS_CODE:
  6906 00000C96 1E                      	PUSH	DS
  6907 00000C97 07                      	POP	ES
  6908 00000C98 52                      	PUSH	DX
  6909 00000C99 5F                      	POP	DI			; User buffer to ES:DI
  6910                                  
  6911                                  ;hkn; SS is DOSDATA
  6912                                  ;	context DS
  6913                                  
  6914 00000C9A 16                      	push	ss
  6915 00000C9B 1F                      	pop	ds
  6916                                  
  6917 00000C9C 83FFFF                  	CMP	DI,-1
  6918 00000C9F 7465                    	JZ	short international_set
  6919 00000CA1 09DB                    	OR	BX,BX
  6920 00000CA3 7505                    	JNZ	short international_find
  6921                                  
  6922                                  ;hkn; country_cdpg is in DOSDATA segment.
  6923 00000CA5 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6924                                  
  6925 00000CA8 EB41                    	JMP	SHORT international_copy
  6926                                  
  6927                                  international_find:
  6928 00000CAA BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6929 00000CAD E80B00                  	CALL	international_get
  6930 00000CB0 725C                    	JC	short errtn
  6931 00000CB2 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6932 00000CB5 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6933 00000CB7 89D3                    	MOV	BX,DX			 ; put country back
  6934 00000CB9 EB40                    	JMP	SHORT international_ok3
  6935                                  
  6936                                  international_get:
  6937 00000CBB BE[0512]                	MOV	SI,COUNTRY_CDPG
  6938                                  
  6939                                  ;hkn; country_cdpg is in DOSDATA segment.
  6940                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6941                                  
  6942                                  	; MSDOS 3.3
  6943                                  	;;cmp	bx,[SI+63h]
  6944                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6945                                  	;jz	short RET27
  6946                                  
  6947                                  	; 13/05/2019 - Retro DOS v4.0
  6948                                  
  6949                                  	; MSDOS 6.0
  6950                                  	;cmp	bx,[ss:si+68h]
  6951 00000CBE 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6952 00000CC2 74C9                    	jz	short RET27			; return if equal
  6953                                  
  6954 00000CC4 89DA                    	MOV	DX,BX
  6955 00000CC6 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6956                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6957 00000CC8 B80014                  	mov	ax,1400h
  6958 00000CCB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6959                                  			; Return: AL = 00h not installed, OK to install
  6960                                  			; 01h not installed, not OK
  6961                                  			; FFh installed
  6962 00000CCD 3CFF                    	CMP	AL,0FFH
  6963 00000CCF 7516                    	JNZ	short interr		; not in memory
  6964                                  	;cmp	bp,0
  6965 00000CD1 09ED                    	or	bp,bp			; GetCntry ?
  6966 00000CD3 7507                    	JNZ	short stcdpg
  6967                                  	
  6968                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6969 00000CD5 B80414                  	mov     ax,1404h
  6970 00000CD8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6971                                  			; BX = code page, DX = country code,
  6972                                  			; DS:SI -> internal code page structure
  6973                                  			; ES:DI -> user buffer
  6974                                  			; Return: AL = status
  6975                                  
  6976 00000CDA EB05                    	JMP	short chkok
  6977                                  	
  6978                                  	;nop
  6979                                  
  6980                                  stcdpg:
  6981                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6982 00000CDC B80314                  	mov     ax,1403h
  6983 00000CDF CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6984                                  			; DS:SI -> internal code page structure
  6985                                  			; BX = code page, DX = country code
  6986                                  			; Return: AL = status
  6987                                  chkok:
  6988 00000CE1 08C0                    	or	al,al			; success ?
  6989                                  	;retz				; yes
  6990 00000CE3 74A8                    	jz	short RET27
  6991                                  
  6992                                  setcarry:
  6993 00000CE5 F9                      	STC				; set carry
  6994 00000CE6 C3                      	retn
  6995                                  interr:
  6996 00000CE7 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6997 00000CE9 EBFA                    	JMP	short setcarry
  6998                                  
  6999                                  international_copy:
  7000                                  
  7001                                  ;hkn; country_cdpg is in DOSDATA segment.
  7002                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7003                                  
  7004                                  	; MSDOS 3.3
  7005                                  	;;mov	bx,[SI+63h]
  7006                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7007                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7008                                  
  7009                                  	; 13/05/2019 - Retro DOS v4.0
  7010                                  
  7011                                  	; MSDOS 6.0
  7012                                  	;mov	bx,[ss:si+68h]
  7013 00000CEB 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7014 00000CEF BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7015                                  
  7016                                  	;mov	cx,24
  7017 00000CF2 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7018                                  
  7019                                  	; MSDOS 6.0
  7020                                  
  7021                                  ;hkn;	must set up DS to SS so that international info can be copied
  7022                                  	
  7023 00000CF5 1E                      	push	ds
  7024                                  
  7025 00000CF6 16                      	push	ss			; cs -> ss
  7026 00000CF7 1F                      	pop	ds
  7027                                  
  7028 00000CF8 F3A4                    	REP	MOVSB			; copy country info
  7029                                  
  7030                                  	; MSDOS 6.0
  7031                                  
  7032 00000CFA 1F                      	pop	ds	;hkn;	restore ds
  7033                                  
  7034                                  international_ok3:
  7035 00000CFB E891F7                  	call	Get_User_Stack
  7036                                  ;ASSUME	DS:NOTHING
  7037                                  	;MOV	[SI+2],BX
  7038 00000CFE 895C02                  	MOV	[SI+user_env.user_BX],BX
  7039                                  international_ok:
  7040 00000D01 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7041                                  ;SYS_RET_OK_jmp:
  7042                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7043                                  nono:	; 15/12/2022
  7044                                  SYS_RET_OK_jmp:
  7045 00000D03 E943F9                  	jmp	SYS_RET_OK
  7046                                  
  7047                                  international_set:
  7048                                  
  7049                                  ;hkn; ASSUME	DS:DOSGROUP
  7050                                  ;ASSUME	DS:DOSDATA
  7051                                  
  7052 00000D06 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7053 00000D09 E8AFFF                  	CALL	international_get
  7054 00000D0C 73F3                    	JNC	short international_ok
  7055                                  errtn:
  7056 00000D0E 3CFF                    	CMP	AL,0FFH
  7057 00000D10 7403                    	JZ	short errtn2
  7058                                  errtn1:
  7059 00000D12 E93DF9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7060                                  errtn2:
  7061                                  	;error	error_invalid_function	; NLSFUNC not existent
  7062                                  
  7063                                  	;mov	al,1
  7064 00000D15 B001                    	mov	al,error_invalid_function 
  7065 00000D17 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7066                                  ;errtn3:
  7067                                  ;	jmp	SYS_RET_ERR
  7068                                  
  7069                                  ;EndProc $INTERNATIONAL
  7070                                  
  7071                                  ; 19/07/2018
  7072                                  
  7073                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7074                                  
  7075                                  ;----------------------------------------------------------------------------
  7076                                  ;
  7077                                  ; Procedure Name : $GetExtCntry
  7078                                  ;
  7079                                  ; Inputs:
  7080                                  ;	if AL >= 20H
  7081                                  ;	  AL= 20H    capitalize single char, DL= char
  7082                                  ;	      21H    capitalize string, CX= string length
  7083                                  ;	      22H    capitalize ASCIIZ string
  7084                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7085                                  ;	      80H bit 0 = use normal upper case table
  7086                                  ;		      1 = use file upper case table
  7087                                  ;	   DS:DX points to string
  7088                                  ;
  7089                                  ;	else
  7090                                  ;
  7091                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7092                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7093                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7094                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7095                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7096                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7097                                  ;	INT	21
  7098                                  ; Function:
  7099                                  ;	give users extended country dependent information
  7100                                  ;	or capitalize chars
  7101                                  ; Outputs:
  7102                                  ;	  No Carry:
  7103                                  ;	     extended country info is succesfully returned
  7104                                  ;	  Carry:
  7105                                  ;	     Register AX has the error code.
  7106                                  ;	     AX=0, NO	 for YES/NO CHECK
  7107                                  ;		1, YES
  7108                                  ;----------------------------------------------------------------------------
  7109                                  
  7110                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7111                                  
  7112                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7113                                  
  7114                                  	; MSDOS 6.0
  7115                                  _$GetExtCntry:
  7116 00000D19 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7117 00000D1B 7269                    	JB	short notcap
  7118                                  capcap: 				;
  7119 00000D1D A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7120 00000D1F 7505                    	JNZ	short fileupper		; file upper case
  7121                                  
  7122                                  ;hkn; UCASE_TAB in DOSDATA
  7123 00000D21 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7124 00000D24 EB03                    	JMP	SHORT capit
  7125                                  
  7126                                  fileupper:
  7127                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7128 00000D26 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7129                                  capit:					;
  7130 00000D29 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7131 00000D2B 750D                    	JNZ	short chkyes		; no
  7132 00000D2D 88D0                    	MOV	AL,DL			; set up AL
  7133 00000D2F E89F43                  	call	GETLET3 		; upper case it
  7134 00000D32 E85AF7                  	call	Get_User_Stack		; get user stack
  7135                                  	;mov	[si+6],al
  7136 00000D35 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7137 00000D38 EBC9                    	JMP	SHORT nono		; done
  7138                                  chkyes: 				;
  7139 00000D3A 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7140 00000D3C 7522                    	JNZ	short capstring		; no
  7141                                  
  7142 00000D3E 31C0                    	XOR	AX,AX			; presume NO
  7143                                  		      
  7144                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7145                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7146                                  
  7147                                  	; 06/08/2018 - Retro DOS v3.0
  7148                                  	; 13/05/2019 - Retro DOS v4.0
  7149                                  	;cmp	dl,'Y'
  7150 00000D40 2E3A16[320A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7151 00000D45 7416                    	JZ	short yesyes		; yes
  7152                                  	;cmp	dl,'y'
  7153 00000D47 2E3A16[340A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7154 00000D4C 740F                    	JZ	short yesyes		; yes
  7155                                  	;cmp	dl,'N'
  7156 00000D4E 2E3A16[330A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7157 00000D53 74AE                    	JZ	short nono		; no
  7158                                  	;cmp	dl,'n'
  7159 00000D55 2E3A16[350A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7160 00000D5A 74A7                    	JZ	short nono		; no
  7161                                  ;dbcs_char:				;
  7162 00000D5C 40                      	INC	AX			; not YES or NO
  7163                                  yesyes: 				;
  7164 00000D5D 40                      	INC	AX			; return 1
  7165                                  	; 15/12/2022
  7166                                  ;nono:	
  7167 00000D5E EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7168                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7169                                  	;jmp	SYS_RET_OK		; done
  7170                                  
  7171                                  capstring:				;
  7172 00000D60 89D6                    	MOV	SI,DX			; si=dx
  7173 00000D62 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7174 00000D64 750F                    	JNZ	short capascii		; no
  7175 00000D66 09C9                    	OR	CX,CX			; check count 0
  7176 00000D68 7499                    	JZ	short nono		; yes finished
  7177                                  concap: 				;
  7178 00000D6A AC                      	LODSB				; get char
  7179 00000D6B E86343                  	call	GETLET3 		; upper case it
  7180 00000D6E 8844FF                  	MOV	byte [SI-1],AL		; store back
  7181                                  ;next99: 				;
  7182 00000D71 E2F7                    	LOOP	concap			; continue
  7183 00000D73 EB8E                    	JMP	short nono		; done
  7184                                  capascii:				;
  7185 00000D75 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7186 00000D77 7545                    	JNZ	short capinval		; no
  7187                                  concap2:				;
  7188 00000D79 AC                      	LODSB				; get char
  7189 00000D7A 08C0                    	or	al,al			; end of string ?
  7190 00000D7C 7485                    	JZ	short nono		; yes
  7191 00000D7E E85043                  	call	GETLET3 		; upper case it
  7192 00000D81 8844FF                  	MOV	[SI-1],AL		; store back
  7193 00000D84 EBF3                    	JMP	short concap2 		; continue
  7194                                  
  7195                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7196                                  
  7197                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7198                                  ; _$GetExtCntry:
  7199                                  
  7200                                  notcap:
  7201 00000D86 83F905                  	CMP	CX,5			; minimum size is 5
  7202 00000D89 7279                    	jb	short sizeerror
  7203                                  
  7204                                  GEC_CONT:
  7205                                  ;hkn; SS is DOSDATA
  7206                                  	;context DS
  7207                                  
  7208 00000D8B 16                      	push	ss
  7209                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7210 00000D8C 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7211                                  	
  7212                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7213 00000D8D BE[0512]                	MOV	SI,COUNTRY_CDPG
  7214                                  
  7215 00000D90 83FAFF                  	CMP	DX,-1			; active country ?
  7216 00000D93 7503                    	JNZ	short GETCDPG 		; no
  7217                                  
  7218                                  ;hkn; use DS override to accesss country_cdpg fields
  7219                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7220                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7221 00000D95 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7222                                  					; get active country id;smr;use DS
  7223                                  GETCDPG:
  7224 00000D98 83FBFF                  	CMP	BX,-1			; active code page?
  7225 00000D9B 7503                    	JNZ	short CHKAGAIN		; no, check again
  7226                                  
  7227                                  ;hkn; use DS override to accesss country_cdpg fields
  7228                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7229                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7230 00000D9D 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7231                                  					; get active code page id;smr;Use DS
  7232                                  CHKAGAIN:
  7233                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7234 00000DA0 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7235                                  					; same as active country id?;smr;use DS
  7236 00000DA3 7552                    	JNZ	short CHKNLS		; no
  7237                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7238 00000DA5 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7239                                  					; same as active code pg id?;smr;use DS
  7240 00000DA8 754D                    	JNZ	short CHKNLS		; no
  7241                                  CHKTYPE:
  7242                                  	;mov	bx,[si+48h]
  7243 00000DAA 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7244                                  					; bx = sys code page id;smr;use DS
  7245 00000DAD 51                      	PUSH	CX			; save cx
  7246                                  	;mov	cx,[si+4Ah]
  7247 00000DAE 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7248                                  	;mov	si,COUNTRY_CDPG+76
  7249 00000DB1 BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7250                                  NXTENTRY:
  7251 00000DB4 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7252 00000DB6 740B                    	JZ	short FOUNDIT
  7253 00000DB8 83C605                  	ADD	SI,5			; next entry
  7254 00000DBB E2F7                    	LOOP	NXTENTRY
  7255 00000DBD 59                      	POP	CX
  7256                                  capinval:
  7257                                  	;error	error_invalid_function	; info type not found
  7258                                  	;mov	al,1
  7259 00000DBE B001                    	mov	al,error_invalid_function
  7260                                  ;SYS_RET_ERR_jmp:
  7261                                  	;jmp	SYS_RET_ERR
  7262                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7263                                  SYS_RET_ERR_jmp:
  7264 00000DC0 E98FF8                  	jmp	SYS_RET_ERR	
  7265                                  
  7266                                  FOUNDIT:
  7267 00000DC3 A4                      	MOVSB				; move info id byte
  7268 00000DC4 59                      	POP	CX			; restore char count
  7269                                  	;cmp	al,1
  7270 00000DC5 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7271 00000DC7 7415                    	JZ	short setsize
  7272 00000DC9 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7273 00000DCC B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7274                                  OK_RETN:
  7275 00000DCF F3A4                    	REP	MOVSB			; copy info
  7276 00000DD1 89C1                    	MOV	CX,AX			; CX = actual length returned
  7277 00000DD3 89D8                    	MOV	AX,BX			; return sys code page in ax
  7278                                  GETDONE:
  7279 00000DD5 E8B7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7280                                  	;mov	[si+4],cx 
  7281 00000DD8 894C04                  	MOV	[SI+user_env.user_CX],CX
  7282                                  	;jmp	SYS_RET_OK
  7283                                  	; 15/12/2022
  7284                                  	; 25/06/2019
  7285 00000DDB E96EF8                  	jmp	SYS_RET_OK_clc
  7286                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7287                                  	; 15/12/2022
  7288                                  ;nono_jmp:
  7289                                  	;jmp	short nono
  7290                                  setsize:
  7291 00000DDE 83E903                  	SUB	CX,3			; size after length field
  7292 00000DE1 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7293 00000DE3 7302                    	JAE	short setsize2		; no
  7294 00000DE5 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7295                                  setsize2:
  7296 00000DE7 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7297 00000DEA 83C702                  	ADD	DI,2			; update index
  7298 00000DED 83C602                  	ADD	SI,2
  7299 00000DF0 89C8                    	MOV	AX,CX
  7300 00000DF2 83C003                  	ADD	AX,3			; AX has the actual length
  7301 00000DF5 EBD8                    	JMP	short OK_RETN 		; go move it
  7302                                  CHKNLS:
  7303 00000DF7 30E4                    	XOR	AH,AH
  7304 00000DF9 50                      	PUSH	AX			; save info type
  7305 00000DFA 5D                      	POP	BP			; bp = info type
  7306                                  	
  7307                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7308 00000DFB B80014                  	mov     ax,1400h
  7309 00000DFE CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7310                                  			; Return: AL = 00h not installed, OK to install
  7311                                  			; 01h not installed, not OK
  7312                                  			; FFh installed
  7313 00000E00 3CFF                    	CMP	AL,0FFH
  7314 00000E02 7404                    	JZ	short NLSNXT		; in memory
  7315                                  
  7316                                  sizeerror:
  7317                                  	;error	error_invalid_function
  7318                                  	;mov	al,1
  7319 00000E04 B001                    	mov	al,error_invalid_function
  7320                                  	;jmp	SYS_RET_ERR
  7321                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7322                                  sys_ret_err_jmp2:
  7323 00000E06 EBB8                    	jmp	short SYS_RET_ERR_jmp
  7324                                  
  7325                                  NLSNXT: 
  7326                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7327 00000E08 B80214                  	mov     ax,1402h
  7328 00000E0B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7329                                  			; BP = subfunction, BX = code page
  7330                                  			; DX = country code, DS:SI -> internal code page structure
  7331                                  			; ES:DI -> user buffer, CX = size of user buffer
  7332                                  			; Return: AL = status
  7333                                  			; 00h successful
  7334                                  			; else DOS error code
  7335                                  
  7336 00000E0D 3C00                    	CMP	AL,0			; success ?
  7337 00000E0F 7505                    	JNZ	short NLSERROR
  7338                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7339 00000E11 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7340                                  			; ax = sys code page id;smr;use ds;
  7341                                  			;BUGBUG;check whether DS is OK after the above calls
  7342 00000E14 EBBF                    	JMP	short GETDONE
  7343                                  seterr:
  7344                                  	; 15/12/2022
  7345                                  NLSERROR:
  7346                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7347                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7348                                  	;jmp	short sys_ret_err_jmp2
  7349                                  	; 15/12/2022
  7350 00000E16 EBA8                    	jmp	short SYS_RET_ERR_jmp
  7351                                  
  7352                                  ;EndProc $GetExtCntry
  7353                                  
  7354                                  ; 13/05/2019 - Retro DOS v4.0
  7355                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7356                                  
  7357                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7358                                  ;----------------------------------------------------------------------------
  7359                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7360                                  ;
  7361                                  ;   System call format:
  7362                                  ;
  7363                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7364                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7365                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7366                                  ;	INT	21
  7367                                  ;
  7368                                  ;	ENTRY	(al) = n
  7369                                  ;		(bx) = code page
  7370                                  ;	EXIT	'C' clear
  7371                                  ;		  global code page is set	(set global code page)
  7372                                  ;		  (BX) = active code page id	(get global code page)
  7373                                  ;		  (DX) = system code page id	(get global code page)
  7374                                  ;		'C' set
  7375                                  ;		  (AX) = error code
  7376                                  
  7377                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7378                                  
  7379                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7380                                  	; DOSCODE:4BC9h
  7381                                  
  7382                                  _$GetSetCdPg:
  7383                                  
  7384                                  ;hkn; SS is DOSDATA
  7385                                  	;context DS
  7386                                  
  7387 00000E18 16                      	push	ss
  7388 00000E19 1F                      	pop	ds
  7389                                  
  7390                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7391 00000E1A BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7392                                  
  7393 00000E1D 3C01                    	CMP	AL,1		       ; get global code page
  7394 00000E1F 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7395                                  	
  7396                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7397                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7398 00000E21 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7399                                  					; get active code page id;smr;use ds
  7400                                  	;mov	dx,[si+48h]
  7401 00000E24 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7402                                  				  	; get sys code page id;smr;use ds
  7403 00000E27 E865F6                  	call	Get_User_Stack
  7404                                  ;ASSUME DS:NOTHING
  7405                                  	;mov	[si+2],bx
  7406 00000E2A 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7407                                  	;mov	[si+6],dx
  7408 00000E2D 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7409                                  OK_RETURN:
  7410                                  	; 15/12/2022
  7411                                  	;transfer SYS_RET_OK
  7412 00000E30 E916F8                  	jmp	SYS_RET_OK
  7413                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7414                                  	;jmp	short nono_jmp
  7415                                  
  7416                                  ;hkn; ASSUME DS:DOSGROUP
  7417                                  ;ASSUME	DS:DOSDATA
  7418                                  
  7419                                  setglpg:
  7420 00000E33 3C02                    	CMP	AL,2
  7421 00000E35 7531                    	JNZ	short nomem
  7422                                  	
  7423                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7424                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7425 00000E37 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7426                                  	
  7427                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7428 00000E3A B80014                  	mov     ax,1400h
  7429 00000E3D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7430                                  			; Return: AL = 00h not installed, OK to install
  7431                                  			; 01h not installed, not OK
  7432                                  			; FFh installed
  7433 00000E3F 3CFF                    	CMP	AL,0FFH
  7434 00000E41 7525                    	JNZ	short nomem		; not in memory
  7435                                  
  7436                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7437 00000E43 B80114                  	mov     ax,1401h
  7438 00000E46 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7439                                  			; DS:SI -> internal code page structure
  7440                                  			; BX = new code page, DX = country code???
  7441                                  			; Return: AL = status
  7442                                  			; 00h successful
  7443                                  			; else DOS error code
  7444                                  	;cmp	al,0
  7445 00000E48 08C0                    	or	al,al			; success ?
  7446 00000E4A 74E4                    	JZ	short OK_RETURN		; yes
  7447                                  
  7448 00000E4C 3C41                    	CMP	AL,65			; set device code page failed
  7449 00000E4E 75C6                    	JNZ	short seterr
  7450 00000E50 B84100                  	MOV	AX,65
  7451 00000E53 A3[2403]                	MOV	[EXTERR],AX
  7452                                  	;mov	byte [EXTERR_ACTION],6
  7453                                  	;mov	byte [EXTERR_CLASS],5
  7454                                  	;mov	byte [EXTERR_LOCUS],4
  7455 00000E56 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7456 00000E5B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7457 00000E60 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7458                                  	;transfer From_GetSet
  7459 00000E65 E9F2F7                  	jmp	From_GetSet
  7460                                  
  7461                                  	; 15/12/2022
  7462                                  ;seterr:
  7463                                  	;;;transfer SYS_RET_ERR
  7464                                  	;;jmp	SYS_RET_ERR
  7465                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7466                                  	;jmp	short NLSERROR
  7467                                  
  7468                                  nomem:
  7469                                  	;error	error_invalid_function ; function not defined
  7470                                  	;mov	al,1
  7471 00000E68 B001                    	mov	al,error_invalid_function
  7472 00000E6A EBAA                    	jmp	short seterr
  7473                                  
  7474                                  ;EndProc $GetSetCdPg
  7475                                  
  7476                                  ; 13/05/2019 - Retro DOS v4.0
  7477                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7478                                  
  7479                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7480                                  ;----------------------------------------------------------------------------
  7481                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7482                                  ;
  7483                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7484                                  ;		drive.
  7485                                  ;
  7486                                  ;	This call returns the same info in the same registers (except for the
  7487                                  ;	FAT pointer) as the old FAT pointer calls
  7488                                  ;
  7489                                  ;	ENTRY	DL = Drive number
  7490                                  ;	EXIT	AX = Sectors per allocation unit
  7491                                  ;		   = -1 if bad drive specified
  7492                                  ;		On User Stack
  7493                                  ;		    BX = Number of free allocation units
  7494                                  ;		    DX = Total Number of allocation units on disk
  7495                                  ;		    CX = Sector size
  7496                                  
  7497                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7498                                  
  7499                                  _$GET_DRIVE_FREESPACE:
  7500                                  
  7501                                  ;hkn; SS is DOSDATA
  7502                                  	;context DS
  7503 00000E6C 16                      	push	ss
  7504 00000E6D 1F                      	pop	ds
  7505                                  
  7506 00000E6E 88D0                    	MOV	AL,DL
  7507                                  	;invoke	GetThisDrv		; Get drive
  7508 00000E70 E8915C                  	call	GETTHISDRV
  7509                                  SET_AX_RET:
  7510 00000E73 7218                    	JC	short BADFDRV
  7511                                  	;invoke	DISK_INFO
  7512 00000E75 E8D01E                  	call	DISK_INFO
  7513 00000E78 87D3                    	XCHG	DX,BX
  7514 00000E7A 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7515 00000E7C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7516                                  DoSt:
  7517 00000E7E E80EF6                  	call	Get_User_Stack
  7518                                  ;ASSUME	DS:NOTHING
  7519                                  	;mov	[si+6],dx
  7520                                  	;mov	[si+4],cx
  7521                                  	;mov	[si+2],bx
  7522 00000E81 895406                  	MOV	[SI+user_env.user_DX],DX
  7523 00000E84 894C04                  	MOV	[SI+user_env.user_CX],CX
  7524 00000E87 895C02                  	MOV	[SI+user_env.user_BX],BX
  7525                                  	;MOV	[SI+user_env.user_AX],AX
  7526 00000E8A 8904                    	mov     [si],ax
  7527                                  	;return
  7528 00000E8C C3                      	retn
  7529                                  
  7530                                  BADFDRV:
  7531                                  	; MSDOS 3.3
  7532                                  	;;mov	al,0Fh
  7533                                  	;mov	al,error_invalid_drive	; Assume error
  7534                                  
  7535                                  	; 13/05/2019 - Retro DOS v4.0
  7536                                  
  7537                                  	; MSDOS 6.0 & MSDOS 3.3
  7538                                  	;invoke	FCB_RET_ERR
  7539 00000E8D E8D8F7                  	call	FCB_RET_ERR
  7540                                  	
  7541 00000E90 B8FFFF                  	MOV	AX,-1
  7542 00000E93 EBE9                    	JMP	short DoSt
  7543                                  
  7544                                  ;EndProc $GET_DRIVE_FREESPACE
  7545                                  
  7546                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7547                                  ;----------------------------------------------------------------------------
  7548                                  ;**	$Get_DMA - Get Disk Transfer Address
  7549                                  ;
  7550                                  ;	ENTRY	none
  7551                                  ;	EXIT	ES:BX is current transfer address
  7552                                  ;	USES	all
  7553                                  
  7554                                  _$GET_DMA:
  7555 00000E95 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7556 00000E9A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7557 00000E9F E8EDF5                  	call	Get_User_Stack
  7558                                  	;mov	[si+2],bx
  7559                                  	;mov	[si+10h],cx
  7560 00000EA2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7561 00000EA5 894C10                  	MOV	[SI+user_env.user_ES],CX
  7562 00000EA8 C3                      	retn
  7563                                  
  7564                                  ;**	$Set_DMA - Set Disk Transfer Address
  7565                                  ;----------------------------------------------------------------------------
  7566                                  ;	ENTRY	DS:DX is current transfer address
  7567                                  ;	EXIT	none
  7568                                  ;	USES	all
  7569                                  
  7570                                  _$SET_DMA:
  7571 00000EA9 368916[2C03]            	MOV	[SS:DMAADD],DX
  7572 00000EAE 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7573 00000EB3 C3                      	retn
  7574                                  
  7575                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7576                                  ;------------------------------------------------------------------------------
  7577                                  
  7578                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7579                                  ;-----------------------------------------------------
  7580                                  ;	ENTRY	none
  7581                                  ;	EXIT	(AL) = drive number
  7582                                  ;	USES	all
  7583                                  
  7584                                  _$GET_DEFAULT_DRIVE:
  7585 00000EB4 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7586 00000EB8 C3                      	retn
  7587                                  
  7588                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7589                                  ;-----------------------------------------------------
  7590                                  ;	ENTRY	(DL) = Drive number for new default drive
  7591                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7592                                  
  7593                                  _$SET_DEFAULT_DRIVE:
  7594 00000EB9 88D0                    	MOV	AL,DL
  7595 00000EBB FEC0                    	INC	AL			; A=1, B=2...
  7596 00000EBD E8285C                  	call	GetVisDrv		; see if visible drive
  7597 00000EC0 7204                    	JC	short SETRET		; errors do not set
  7598 00000EC2 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7599                                  
  7600                                  SETRET:
  7601 00000EC6 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7602 00000ECA C3                      	retn
  7603                                  
  7604                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7605                                  ;----------------------------------------------------------------------------
  7606                                  
  7607                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7608                                  ;---------------------------------------------------
  7609                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7610                                  ;	contents of an interrupt vector.
  7611                                  ;
  7612                                  ;	ENTRY	(AL) = interrupt number
  7613                                  ;	EXIT	(ES:BX) = current interrupt vector
  7614                                  
  7615                                  _$GET_INTERRUPT_VECTOR:
  7616 00000ECB E82F00                  	CALL	RECSET
  7617 00000ECE 26C41F                  	LES	BX,[ES:BX]
  7618 00000ED1 E8BBF5                  	call	Get_User_Stack
  7619                                  	;mov	[si+2],bx
  7620                                  	;mov	[si+10h],es
  7621 00000ED4 895C02                  	MOV	[SI+user_env.user_BX],BX
  7622 00000ED7 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7623 00000EDA C3                      	retn
  7624                                  
  7625                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7626                                  ;---------------------------------------------------
  7627                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7628                                  ;	contents of an interrupt vector.
  7629                                  ;
  7630                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7631                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7632                                  ;	for explanation.
  7633                                  ;
  7634                                  ;	ENTRY	(AL) = interrupt number
  7635                                  ;		(ds:dx) = desired new vector value
  7636                                  ;	EXIT	none
  7637                                  ;	USES	all
  7638                                  
  7639                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7640                                  ; 13/05/2019 - Retro DOS v4.0
  7641                                  
  7642                                  _$SET_INTERRUPT_VECTOR:
  7643 00000EDB E81F00                  	CALL	RECSET
  7644 00000EDE FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7645 00000EDF 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7646 00000EE2 268C5F02                	MOV	[ES:BX+2],DS
  7647 00000EE6 FB                      	STI
  7648                                  					; M004, M068 - Start
  7649                                  	; MSDOS 6.0
  7650 00000EE7 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7651                                  					; Q: was the previous call an int 21
  7652                                  					;    exec call
  7653                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7654                                  	;jnz	short siv_1		; Y: go set count
  7655                                  	;retn				; N: return
  7656                                  	; 15/12/2022
  7657 00000EED 740D                    	jz	short siv_2
  7658                                  siv_1:	
  7659 00000EEF 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7660 00000EF5 7505                    	jne	short siv_2		 ; N: done 
  7661                                  	; 20/09/2023
  7662 00000EF7 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]	
  7663                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7664                                  					 ; dispatcher to turn A20 Off before 
  7665                                  					 ; returning to user.
  7666                                  siv_2:
  7667                                  	; 07/12/2022
  7668 00000EFC C3                      	retn				; M004, M068 - End
  7669                                  	
  7670                                  RECSET:
  7671 00000EFD 31DB                    	XOR	BX,BX
  7672 00000EFF 8EC3                    	MOV	ES,BX
  7673 00000F01 88C3                    	MOV	BL,AL
  7674 00000F03 D1E3                    	SHL	BX,1
  7675 00000F05 D1E3                    	SHL	BX,1
  7676 00000F07 C3                      	retn
  7677                                  
  7678                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7679                                  ;-------------------------------------------------------------------------------------
  7680                                  
  7681                                  ;**	$Char_Oper - Manipulate Switch Character
  7682                                  ;
  7683                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7684                                  ;
  7685                                  ;	ENTRY	AL = function:
  7686                                  ;		    0 - read switch char
  7687                                  ;		    1 - set switch char (char in DL)
  7688                                  ;		    2 - read device availability
  7689                                  ;			Always returns available
  7690                                  ;		    3 - set device availability
  7691                                  ;			No longer supported (NOP)
  7692                                  ;	EXIT	(al) = 0xff iff error
  7693                                  ;		(al) != 0xff if ok
  7694                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7695                                  ;	USES	AL, DL
  7696                                  ;
  7697                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7698                                  ;		The character / is always returned for subfunction 0,
  7699                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7700                                  
  7701                                  ; 13/05/2019 - Retro DOS v4.0
  7702                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7703                                  
  7704                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7705                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7706                                  
  7707                                  _$CHAR_OPER:
  7708                                  	; MSDOS 6.0
  7709 00000F08 08C0                    	or	al,al				; get switch?
  7710 00000F0A B22F                    	mov	dl,'/'				; assume yes
  7711 00000F0C 7407                    	jz	short chop_1			; jump if yes
  7712 00000F0E 3C02                    	cmp	al,2				; check device availability?
  7713 00000F10 B2FF                    	mov	dl,-1				; assume yes
  7714 00000F12 7401                    	jz	short chop_1			; jump if yes
  7715 00000F14 C3                      	retn					; otherwise just quit
  7716                                  
  7717                                  ; subfunctions requiring return of value to user come here. DL holds
  7718                                  ; value to return
  7719                                  
  7720                                  chop_1:
  7721 00000F15 E877F5                  	call	Get_User_Stack
  7722 00000F18 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7723 00000F1B C3                      	retn
  7724                                  
  7725                                  	; MSDOS 3.3
  7726                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7727                                  	;push	ss
  7728                                  	;pop	ds
  7729                                  	;cmp	al,1
  7730                                  	;jb	short chop_1
  7731                                  	;jz	short chop_2
  7732                                  	;cmp	al,3
  7733                                  	;jb	short chop_3
  7734                                  	;jz	short chop_5
  7735                                  	;mov	al,0FFh
  7736                                  	;retn
  7737                                  ;chop_1:
  7738                                  	;mov	dl,[chSwitch]
  7739                                  	;jmp	short chop_4
  7740                                  ;chop_2:
  7741                                  	;mov	[chSwitch],dl
  7742                                  	;retn
  7743                                  ;chop_3:
  7744                                  	;mov	dl, FFh
  7745                                  ;chop_4:
  7746                                  	;call	Get_User_Stack
  7747                                  	;mov	[si+6],dx
  7748                                  ;chop_5:
  7749                                  	;retn
  7750                                  
  7751                                  ;**	$GetExtendedError - Return Extended error code
  7752                                  ;----------------------------------------------------------------------------
  7753                                  ;	This function reads up the extended error info from the static
  7754                                  ;	variables where it was stored.
  7755                                  ;
  7756                                  ;	ENTRY	none
  7757                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7758                                  ;		BL = recommended action
  7759                                  ;		BH = class of error
  7760                                  ;		CH = locus of error
  7761                                  ;		ES:DI = may be pointer
  7762                                  ;	USES	ALL
  7763                                  
  7764                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7765                                  
  7766                                  _$GetExtendedError:
  7767 00000F1C 16                      	push	ss
  7768 00000F1D 1F                      	pop	ds
  7769 00000F1E A1[2403]                	MOV	AX,[EXTERR]
  7770 00000F21 C43E[2803]              	LES	DI,[EXTERRPT]
  7771 00000F25 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7772 00000F29 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7773 00000F2D E85FF5                  	call	Get_User_Stack
  7774                                  	;mov	[si+0Ah],di
  7775 00000F30 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7776                                  	;mov	[si+10h],es
  7777 00000F33 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7778                                  	;mov	[si+2],bx
  7779 00000F36 895C02                  	MOV	[SI+user_env.user_BX],BX
  7780                                  	;mov	[si+4],cx
  7781 00000F39 894C04                  	MOV	[SI+user_env.user_CX],CX
  7782                                  jmp_SYS_RET_OK:
  7783                                  	; 15/12/2022
  7784                                  	;jmp	SYS_RET_OK
  7785                                  	; 25/06/2019
  7786 00000F3C E90DF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7787                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7788                                  ;jmp_SYS_RET_OK:
  7789                                  	;jmp	SYS_RET_OK
  7790                                  
  7791                                  ; --------------------------------------------------------------------------
  7792                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7793                                  	; DOSCODE:4CF3h
  7794                                  ;patch_or_unknown:
  7795                                  ;get_code_page:
  7796 00000F3F 56                      	push    si
  7797 00000F40 BE[0512]                	mov     si, COUNTRY_CDPG
  7798                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7799 00000F43 368B446A                	mov     ax, [ss:si+6Ah]
  7800 00000F47 5E                      	pop     si
  7801 00000F48 C3                      	retn
  7802                                  ; --------------------------------------------------------------------------	
  7803                                  
  7804                                  ; 29/04/2019 - Retro DOS v4.0
  7805                                  
  7806                                  ;BREAK	<ECS_call - Extended Code System support function>
  7807                                  ;---------------------------------------------------------------------------
  7808                                  ; Inputs:
  7809                                  ;	AL = 0	get lead byte table
  7810                                  ;		on return DS:SI has the table location
  7811                                  ;
  7812                                  ;	AL = 1	set / reset interim console flag
  7813                                  ;		DL = flag (00H or 01H)
  7814                                  ;		no return
  7815                                  ;
  7816                                  ;	AL = 2	get interim console flag
  7817                                  ;		on return DL = current flag value
  7818                                  ;
  7819                                  ;	AL = OTHER then error, and returns with:
  7820                                  ;		AX = error_invalid_function
  7821                                  ;
  7822                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7823                                  ;	 SS:SP WILL BE PRESERVED!
  7824                                  ;---------------------------------------------------------------------------
  7825                                  
  7826                                  _$ECS_Call:
  7827 00000F49 08C0                    	or	al,al			; AL = 0 (get table)?
  7828                                  	;jnz	short _okok
  7829                                  	; 15/12/2022
  7830 00000F4B 7403                    	jz	short get_lbt
  7831                                  ;_okok:
  7832 00000F4D E9F9F6                  	jmp	SYS_RET_OK
  7833                                  get_lbt:
  7834 00000F50 E83CF5                  	call	Get_User_Stack		; *
  7835                                  
  7836                                  ;hkn; dbcs_table moved low to dosdata
  7837                                  	;mov	word [si+8],DBCS_TAB+2
  7838 00000F53 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7839                                  
  7840 00000F58 06                      	push	es
  7841                                  	;getdseg <es>			; es = DOSDATA
  7842 00000F59 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7843                                  	;mov	[si+14],es
  7844 00000F5E 8C440E                  	mov	[SI+user_env.user_DS],es
  7845 00000F61 07                      	pop	es
  7846                                  
  7847                                  	; 15/12/2022
  7848 00000F62 EBD8                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7849                                  ;_okok:
  7850                                  	; 15/12/2022	
  7851                                  	;;transfer SYS_RET_OK
  7852                                  	;jmp	short jmp_SYS_RET_OK
  7853                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7854                                  	;;jmp	SYS_RET_OK
  7855                                  	;jmp	short jmp_SYS_RET_OK
  7856                                  
  7857                                  ;============================================================================
  7858                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7859                                  ;============================================================================
  7860                                  ; 19/07/2018 - Retro DOS v3.0
  7861                                  ; 15/05/2019 - Retro DOS v4.0
  7862                                  
  7863                                  ; System calls for parsing command lines
  7864                                  ;
  7865                                  ;   $PARSE_FILE_DESCRIPTOR
  7866                                  ;
  7867                                  ;   Modification history:
  7868                                  ;
  7869                                  ;       Created: ARR 30 March 1983
  7870                                  ;               EE PathParse 10 Sept 1983
  7871                                  ;
  7872                                  
  7873                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7874                                  ;---------------------------------------------------------------------------
  7875                                  ; Inputs:
  7876                                  ;       DS:SI Points to a command line
  7877                                  ;       ES:DI Points to an empty FCB
  7878                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7879                                  ;                   = 0 Parse stops if separator encountered
  7880                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7881                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7882                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7883                                  ;                   = 0  "       "      "       - put blanks in FCB
  7884                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7885                                  ;                   = 0  "       "      "        - put blanks in FCB
  7886                                  ; Function:
  7887                                  ;       Parse command line into FCB
  7888                                  ; Returns:
  7889                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7890                                  ;       DS:SI points to first character after filename
  7891                                  ;---------------------------------------------------------------------------
  7892                                  
  7893                                  _$PARSE_FILE_DESCRIPTOR:
  7894 00000F64 E80C40                  	call	MAKEFCB
  7895 00000F67 56                      	PUSH    SI
  7896 00000F68 E824F5                  	call	Get_User_Stack
  7897                                  	;pop	word [si+8]
  7898 00000F6B 8F4408                  	POP     word [SI+user_env.user_SI]
  7899 00000F6E C3                      	retn
  7900                                  
  7901                                  ;============================================================================
  7902                                  ; MISC.ASM, MSDOS 6.0, 1991
  7903                                  ;============================================================================
  7904                                  ; 19/07/2018 - Retro DOS v3.0
  7905                                  
  7906                                  ; 29/04/2019 - Retro DOS v4.0
  7907                                  
  7908                                  ;ENTRYPOINTSEG	EQU	0CH
  7909                                  ;MAXDIF		EQU	0FFFH
  7910                                  ;SAVEXIT 	EQU	10
  7911                                  ;WRAPOFFSET	EQU	0FEF0h
  7912                                  
  7913                                  ;
  7914                                  ;----------------------------------------------------------------------------
  7915                                  ;
  7916                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7917                                  ;
  7918                                  ;	Return Stuff sort of like old get fat call
  7919                                  ;
  7920                                  ;	ENTRY	none
  7921                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7922                                  ;			GOD help anyone who tries to do ANYTHING except
  7923                                  ;			READ this ONE byte.
  7924                                  ;		DX = Total Number of allocation units on disk
  7925                                  ;		CX = Sector size
  7926                                  ;		AL = Sectors per allocation unit
  7927                                  ;		   = -1 if bad drive specified
  7928                                  ;	USES	all
  7929                                  ;
  7930                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7931                                  ;
  7932                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7933                                  ;
  7934                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7935                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7936                                  ;			GOD help anyone who tries to do ANYTHING except
  7937                                  ;			READ this ONE byte.
  7938                                  ;		DX = Total Number of allocation units on disk
  7939                                  ;		CX = Sector size
  7940                                  ;		AL = Sectors per allocation unit
  7941                                  ;		   = -1 if bad drive specified
  7942                                  ;	USES	all
  7943                                  ;
  7944                                  ;----------------------------------------------------------------------------
  7945                                  ;
  7946                                  
  7947                                  _$SLEAZEFUNC:
  7948                                  	; 15/05/2019 - Retro DOS v4.0
  7949 00000F6F B200                    	MOV	DL,0
  7950                                  _$SLEAZEFUNCDL:
  7951 00000F71 16                      	push	ss
  7952 00000F72 1F                      	pop	ds
  7953                                  	
  7954 00000F73 88D0                    	MOV	AL,DL
  7955 00000F75 E88C5B                  	call	GETTHISDRV		; Get CDS structure
  7956                                  SET_AL_RET:
  7957                                  	; MSDOS 3.3
  7958                                  	;;mov	al, 0Fh
  7959                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7960                                  	
  7961                                  	; MSDOS 6.0 & MSDOS 3.3
  7962 00000F78 721E                    	JC	short BADSLDRIVE
  7963                                  
  7964 00000F7A E8CB1D                  	call	DISK_INFO
  7965                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7966 00000F7D 7219                    	jc	short BADSLDRIVE
  7967 00000F7F 8826[9805]              	MOV	[FATBYTE],AH
  7968                                  
  7969                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7970                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7971                                  ; CALL AGAIN
  7972                                  
  7973 00000F83 BF[9805]                	MOV	DI,FATBYTE
  7974 00000F86 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7975 00000F88 E804F5                  	call	Get_User_Stack
  7976                                  	;mov	[si+4],cx
  7977                                  	;mov	[si+6],bx
  7978                                  	;mov	[si+2],di
  7979 00000F8B 894C04                  	MOV	[SI+user_env.user_CX],CX
  7980 00000F8E 895C06                  	MOV	[SI+user_env.user_DX],BX
  7981 00000F91 897C02                  	MOV	[SI+user_env.user_BX],DI
  7982                                  	
  7983                                  	;mov	[si+0Eh],ss
  7984 00000F94 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7985                                  
  7986 00000F97 C3                      	retn
  7987                                  
  7988                                  BADSLDRIVE:
  7989 00000F98 E9CDF6                  	jmp	FCB_RET_ERR
  7990                                  
  7991                                  ;
  7992                                  ;----------------------------------------------------------------------------
  7993                                  ;
  7994                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7995                                  ;
  7996                                  ;	Returns location of DOS status for interrupt routines
  7997                                  ;									   ;
  7998                                  ;	ENTRY	none
  7999                                  ;	EXIT	(es:bx) = flag location
  8000                                  ;	USES	all
  8001                                  ;
  8002                                  ;----------------------------------------------------------------------------
  8003                                  ;
  8004                                  
  8005                                  _$GET_INDOS_FLAG:
  8006 00000F9B E8F1F4                          CALL	Get_User_Stack
  8007                                          ;MOV	WORD [SI+2],INDOS
  8008 00000F9E C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8009                                          ;MOV	[SI+10H],SS
  8010 00000FA3 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8011 00000FA6 C3                      	RETN 
  8012                                  
  8013                                  ;
  8014                                  ;----------------------------------------------------------------------------
  8015                                  ;
  8016                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8017                                  ;
  8018                                  ;	Return a pointer to interesting DOS variables This call is version
  8019                                  ;	dependent and is subject to change without notice in future versions.
  8020                                  ;	Use at risk.
  8021                                  ;
  8022                                  ;	ENTRY	none
  8023                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8024                                  ;	uses	ALL
  8025                                  ;
  8026                                  ;----------------------------------------------------------------------------
  8027                                  ;
  8028                                  
  8029                                  _$GET_IN_VARS:
  8030 00000FA7 E8E5F4                          CALL	Get_User_Stack
  8031                                          ;MOV	WORD [SI+2],SYSINITVAR
  8032                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8033 00000FAA C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8034                                          ;MOV	[SI+10H],SS
  8035 00000FAF 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8036 00000FB2 C3                      	RETN
  8037                                  
  8038                                  ;
  8039                                  ;----------------------------------------------------------------------------
  8040                                  ;
  8041                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8042                                  ;
  8043                                  ;	Return pointer to drive parameter table for default drive
  8044                                  ;
  8045                                  ;	ENTRY	none
  8046                                  ;	EXIT	(ds:bx) = DPB address
  8047                                  ;	USES	all
  8048                                  ;
  8049                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8050                                  ;
  8051                                  ;	Return pointer to a specified drive parameter table
  8052                                  ;
  8053                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8054                                  ;	EXIT	(al) = 0 iff ok
  8055                                  ;		  (ds:bx) = DPB address
  8056                                  ;		(al) = -1 if bad drive
  8057                                  ;	USES	all
  8058                                  ;
  8059                                  ;----------------------------------------------------------------------------
  8060                                  ;
  8061                                  
  8062                                  ; 15/05/2019 - Retro DOS v4.0
  8063                                  
  8064                                  _$GET_DEFAULT_DPB:
  8065 00000FB3 B200                    	MOV	DL,0
  8066                                  _$GET_DPB:
  8067 00000FB5 16                      	push	ss
  8068 00000FB6 1F                      	pop	ds
  8069                                  
  8070 00000FB7 88D0                    	MOV	AL,DL
  8071 00000FB9 E8485B                  	call	GETTHISDRV		; Get CDS structure
  8072 00000FBC 7222                    	JC	short ISNODRV 		; no valid drive
  8073 00000FBE C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8074                                  	;;test	word [es:di+43h],8000h
  8075                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8076                                  	;test	byte [es:di+44h],80h
  8077 00000FC2 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8078 00000FC7 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8079 00000FC9 E88A03                  	call	ECritDisk
  8080 00000FCC E86C47                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8081 00000FCF E89F03                  	call	LCritDisk
  8082 00000FD2 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8083                                  					;   have.
  8084 00000FD4 E8B8F4                  	call	Get_User_Stack
  8085                                  	;mov	[si+2],bp
  8086 00000FD7 896C02                  	MOV	[SI+user_env.user_BX],BP
  8087                                  	;mov	[si+0Eh],es
  8088 00000FDA 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8089 00000FDD 30C0                    	XOR	AL,AL
  8090 00000FDF C3                      	retn
  8091                                  ISNODRV:
  8092 00000FE0 B0FF                    	MOV	AL,-1
  8093 00000FE2 C3                      	retn
  8094                                  
  8095                                  ;
  8096                                  ;----------------------------------------------------------------------------
  8097                                  ;
  8098                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8099                                  ;
  8100                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8101                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8102                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8103                                  ;
  8104                                  ;	ENTRY	none
  8105                                  ;	EXIT	none
  8106                                  ;	USES	all
  8107                                  ;
  8108                                  ;----------------------------------------------------------------------------
  8109                                  ;
  8110                                  
  8111                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8112                                  	; DOSCODE:4D94h
  8113                                  _$DISK_RESET:
  8114                                  	; 15/05/2019 - Retro DOS v4.0
  8115 00000FE3 B0FF                    	mov	al,0FFh	; -1
  8116 00000FE5 16                      	push	ss
  8117 00000FE6 1F                      	pop	ds
  8118                                  	; 06/11/2022
  8119                                  	;MOV	AL,-1
  8120 00000FE7 E86C03                  	call	ECritDisk
  8121                                  	; MSDOS 6.0
  8122                                  	;;or	word [DOS34_FLAG],4
  8123                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8124 00000FEA 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8125 00000FEF E8C84A                  	call	FLUSHBUF
  8126                                  	; MSDOS 6.0
  8127                                  	;and	word [DOS34_FLAG],0FFFBh
  8128                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8129                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8130                                  	; 15/12/2022
  8131 00000FF2 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8132 00000FF7 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8133                                  ;
  8134                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8135                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8136                                  ; let's do it.
  8137                                  ;
  8138                                  ; Invalidate 'last-buffer' used
  8139                                  ;
  8140 00000FFD BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8141 00001000 891E[2000]              	MOV	[LastBuffer+2],BX
  8142 00001004 891E[1E00]              	MOV	[LastBuffer],BX
  8143                                  
  8144                                  	; MSDOS 3.3 
  8145                                  	; IBMDOS.COM, Offset 1C66h
  8146                                  	;;;;
  8147                                  	;lds	si,[BUFFHEAD]
  8148                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8149                                  				; .buf_flags, AH = 0, reset/clear
  8150                                  ;DRST_1:
  8151                                  	;;mov	[si+4],ax
  8152                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8153                                  	;lds	si,[SI]
  8154                                  	;cmp	si,bx ; -1
  8155                                  	;je	short DRST_2
  8156                                  	;;mov	[si+4],ax
  8157                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8158                                  	;lds	si,[SI]
  8159                                  	;cmp	si,bx
  8160                                  	;jne	short DRST_1
  8161                                  	;;;;
  8162                                  ;DRST_2:
  8163 00001008 E86603                  	call	LCritDisk
  8164 0000100B B8FFFF                  	MOV	AX,-1
  8165                                  	; 07/12/2022
  8166                                  	;mov	ax,0FFFFh
  8167                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8168 0000100E 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8169 0000100F B82011                  	mov     ax,1120h
  8170 00001012 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8171                                  			; DS = DOS CS
  8172                                  			; Return: CF clear (successful)
  8173 00001014 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8174                                  	
  8175 00001015 C3                      	retn
  8176                                  
  8177                                  	; 19/07/2018 - Retro DOS v3.0
  8178                                  
  8179                                  ;
  8180                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8181                                  ;
  8182                                  ;----------------------------------------------------------------------------
  8183                                  ;
  8184                                  ;**	$SetDPB - Create a DPB
  8185                                  ;
  8186                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8187                                  ;
  8188                                  ;	ENTRY	ES:BP Points to DPB
  8189                                  ;		DS:SI Points to BPB
  8190                                  ;	EXIT	DPB setup
  8191                                  ;	USES	ALL but BP, DS, ES
  8192                                  ;
  8193                                  ;----------------------------------------------------------------------------
  8194                                  ;
  8195                                  
  8196                                  ; 10/05/2019 - Retro DOS v4.0
  8197                                  
  8198                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8199                                  
  8200                                  ; MSDOS 6.0
  8201 00001016 0300                    word3:	dw	3			; M008 -- word value for divides
  8202                                  
  8203                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8204                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8205                                  
  8206                                  ;procedure   $SETDPB,NEAR
  8207                                  
  8208                                  _$SETDPB:
  8209 00001018 89EF                    	MOV	DI,BP
  8210 0000101A 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8211 0000101D AD                      	LODSW
  8212 0000101E AB                      	STOSW				; dpb_sector_size
  8213                                  	; MSDOS 6.0
  8214                                  	;cmp	byte [si+3],0
  8215 0000101F 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8216 00001023 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8217                                  	;mov	byte [es:di+4],0
  8218 00001025 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8219 0000102A EB70                    	JMP	short setend			     ; NO		;AN000;
  8220                                  
  8221                                  yesfat: ; 10/08/2018
  8222 0000102C 89C2                    	MOV	DX,AX
  8223 0000102E AC                      	LODSB
  8224                                  	;DEC	AL
  8225                                  	; 17/12/2022
  8226 0000102F 48                      	dec	ax
  8227 00001030 AA                      	STOSB				; dpb_cluster_mask
  8228                                  	;INC	AL
  8229 00001031 40                      	inc	ax
  8230 00001032 30E4                    	XOR	AH,AH
  8231                                  LOG2LOOP:
  8232 00001034 A801                    	test	AL,1
  8233 00001036 7506                    	JNZ	short SAVLOG
  8234 00001038 FEC4                    	INC	AH
  8235 0000103A D0E8                    	SHR	AL,1
  8236 0000103C EBF6                    	JMP	SHORT LOG2LOOP
  8237                                  SAVLOG:
  8238 0000103E 88E0                    	MOV	AL,AH
  8239 00001040 AA                      	STOSB				; dpb_cluster_shift
  8240 00001041 88C3                    	MOV	BL,AL
  8241 00001043 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8242 00001044 AC                      	LODSB
  8243 00001045 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8244                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8245                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8246 00001046 88C7                    	MOV	BH,AL
  8247 00001048 AD                      	LODSW
  8248 00001049 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8249 0000104A B105                    	MOV	CL,5
  8250 0000104C D3EA                    	SHR	DX,CL			; Directory entries per sector
  8251 0000104E 48                      	DEC	AX
  8252 0000104F 01D0                    	ADD	AX,DX			; Cause Round Up
  8253 00001051 89D1                    	MOV	CX,DX
  8254 00001053 31D2                    	XOR	DX,DX
  8255 00001055 F7F1                    	DIV	CX
  8256 00001057 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8257 00001059 47                      	INC	DI
  8258 0000105A 47                      	INC	DI			; Skip dpb_first_sector
  8259 0000105B A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8260 0000105C AC                      	LODSB
  8261                                  	;mov	[es:bp+17h],al
  8262 0000105D 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8263 00001061 AD                      	LODSW				; Number of sectors in a FAT
  8264                                  	
  8265                                  	;;;
  8266                                  	;MSDOS 3.3
  8267                                  	;
  8268                                  	;STOSB		; DPB.FAT_SIZE
  8269                                  	;MUL	BH
  8270                                  	
  8271                                  	;MSDOS 6.0
  8272                                  	;
  8273 00001062 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8274 00001063 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8275 00001065 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8276 00001067 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8277                                  	;;;
  8278                                  	
  8279                                  	;add	ax,[es:bp+6]
  8280 00001069 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8281 0000106D AB                      	STOSW				; dpb_dir_sector
  8282 0000106E 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8283                                  	;mov	[es:bp+0Bh],ax
  8284 00001070 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8285                                  	
  8286                                  	; MSDOS 6.0
  8287 00001074 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8288                                  	;;cmp	word [es:bp+0Dh],0
  8289                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8290                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8291                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8292                                  	; 15/12/2022
  8293                                  	; 28/07/2019
  8294 00001076 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8295 0000107A 09DB                    	or	bx,bx
  8296 0000107C 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8297                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8298                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8299                                  	
  8300                                  
  8301 0000107E 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8302                                  	;mov	bx,[si+8]
  8303 00001080 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8304                                  	;mov	dx,[si+10]
  8305 00001083 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8306 00001086 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8307 00001088 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8308 0000108B 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8309 0000108D 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8310                                  rott:					;AN000;;F.C. >32mb
  8311 0000108F F8                      	CLC				;AN000;;F.C. >32mb
  8312 00001090 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8313 00001092 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8314 00001094 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8315                                  norot:					;AN000;
  8316                                  	; 15/12/2022
  8317                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8318 00001096 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8319                                  normal_dpb:
  8320                                  	;;sub	ax,[es:bp+0Dh]
  8321                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8322                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8323                                  	; 15/12/2022
  8324                                  	; bx = [es:bp+DSKSIZ]
  8325                                  	;sub	ax,bx ; 28/07/2019
  8326                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8327                                  	; 15/12/2022
  8328 00001098 29C3                    	sub	bx,ax
  8329                                  	;NEG	AX			; Sectors in data area
  8330                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8331                                  	; 15/12/2022
  8332                                  	; CL = cluster shift
  8333                                  	; BX = number of data sectors 
  8334                                  	;SHR	AX,CL			; Div by sectors/cluster
  8335 0000109A D3EB                    	shr	bx,cl 
  8336                                  setend:
  8337                                  ;	M008 - CAS
  8338                                  ;
  8339                                  	; 15/12/2022
  8340 0000109C 43                      	inc	bx
  8341                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8342                                  ;
  8343                                  ;	There has been a bug in our fatsize calculation for so long
  8344                                  ;	  that we can't correct it now without causing some user to
  8345                                  ;	  experience data loss. There are even cases where allowing
  8346                                  ;	  the number of clusters to exceed the fats is the optimal
  8347                                  ;	  case -- where adding 2 more fat sectors would make the
  8348                                  ;	  data field smaller so that there's nothing to use the extra
  8349                                  ;	  fat sectors for.
  8350                                  ;
  8351                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8352                                  ;	  still report that there was a cluster left when the disk was
  8353                                  ;	  actually full. Very graceful failure for a corrupt system
  8354                                  ;	  configuration. There may be worse cases that were never
  8355                                  ;	  properly traced back to this bug. The problem cases only
  8356                                  ;	  occurred when partition sizes were very near FAT sector
  8357                                  ;	  rounding boundaries, which were rare cases.
  8358                                  ;
  8359                                  ;	Also, it's possible that some third-party partition program might
  8360                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8361                                  ;	  scheme. In this hypothetical case, the number of allocation
  8362                                  ;	  clusters which don't actually have FAT entries to represent
  8363                                  ;	  them might be larger and might create a more catastrophic
  8364                                  ;	  failure. So we'll provide the safeguard of limiting the
  8365                                  ;	  max_cluster to the amount that will fit in the FATs.
  8366                                  ;
  8367                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8368                                  
  8369                                  ;	make sure the number of fat sectors is actually enough to
  8370                                  ;	  hold that many clusters. otherwise, back the number of
  8371                                  ;	  clusters down
  8372                                  
  8373                                  	; 15/12/2022
  8374                                  	; bx = number of clusters
  8375                                  
  8376                                  	; 19/07/2018 - Retro DOS v3.0
  8377                                  	; MSDOS 6.0
  8378                                  	; 15/12/2022
  8379                                  	;mov	bx,ax			; remember calculated # clusters
  8380                                  
  8381                                  	; 01/08/2018 (MSDOS 3.3)
  8382                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8383                                  	;xor	ah,ah 
  8384                                  
  8385                                  	; 10/05/2019 - Retro DOS v4.0
  8386                                  	;mov	ax,[ES:BP+0Fh]
  8387 0000109D 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8388                                  
  8389                                  	;mul	word [es:bp+2]	
  8390 000010A1 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8391 000010A5 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8392 000010A9 720D                    	jb	short setend_fat12
  8393 000010AB D1EA                    	shr	dx,1
  8394                                  
  8395                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8396                                  	; 15/12/2022
  8397                                  ;cs3 7/2/92
  8398 000010AD 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8399                                  					; than enough for the maximum FAT,
  8400                                  					; so go ahead and use the calculated
  8401                                  					; number of clusters.
  8402                                  ;cs3 7/2/92
  8403                                  
  8404 000010AF D1D8                    	rcr	ax,1			; find number of entries
  8405 000010B1 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8406                                  ;					;  into 12-bit fatland?
  8407 000010B4 7215                    	jb	short setend_faterr	; then go ahead and let the
  8408                                  ;					;  inconsistency pass through
  8409                                  ;					;  rather than lose data by
  8410                                  ;					;  correcting the fat type
  8411 000010B6 EB0E                    	jmp	short setend_fat16
  8412                                  
  8413                                  setend_fat12:
  8414 000010B8 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8415 000010BA 11D2                    	adc	dx,dx
  8416                                  
  8417                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8418                                  ;cs3 7/2/92
  8419                                  	; 15/12/2022
  8420 000010BC 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8421 000010BF 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8422                                  					; here. Check for it and use
  8423                                  					; the calculated size in this case.
  8424                                  ;cs3 7/2/92
  8425                                  
  8426 000010C1 2EF736[1610]            	div	word [cs:word3]
  8427                                  
  8428                                  setend_fat16:
  8429 000010C6 48                      	dec	ax			; limit at 1
  8430 000010C7 39D8                    	cmp	ax,bx			; is fat big enough?
  8431 000010C9 7602                    	jbe	short setend_fat	; use max value that'll fit
  8432                                  
  8433                                  setend_faterr:
  8434 000010CB 89D8                    	mov	ax,bx			; use calculated value
  8435                                  
  8436                                  setend_fat:
  8437                                  
  8438                                  ;	now ax = maximum legal cluster
  8439                                  
  8440                                  ;	end M008
  8441                                  
  8442                                  	;mov	[es:bp+0Dh], ax
  8443 000010CD 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8444                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8445                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8446 000010D1 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8447                                  					; Init so first ALLOC starts at
  8448                                  					; begining of FAT
  8449                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8450                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8451 000010D7 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8452                                  
  8453 000010DD C3                      	retn
  8454                                  
  8455                                  ;EndProc $SETDPB
  8456                                  
  8457                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8458                                  
  8459                                  ;
  8460                                  ;----------------------------------------------------------------------------
  8461                                  ;
  8462                                  ;**	$Dup_PDB
  8463                                  ;
  8464                                  ; Inputs:   DX is new segment address of process
  8465                                  ;	    SI is end of new allocation block
  8466                                  ;
  8467                                  ;----------------------------------------------------------------------------
  8468                                  ;
  8469                                  
  8470                                  _$DUP_PDB:
  8471                                  
  8472                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8473                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8474                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8475                                  
  8476                                  	; MSDOS 3.3
  8477                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8478                                  	;MOV	DS,[CS:CurrentPDB]
  8479                                  
  8480                                  	; 15/05/2019 - Retro DOS v4.0
  8481                                  	; MSDOS 6.0
  8482 000010DE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8483 000010E3 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8484 000010E8 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8485                                  
  8486 000010EC 56                      	PUSH	SI
  8487 000010ED EB0A                    	JMP	SHORT CreateCopy
  8488                                  
  8489                                  ;
  8490                                  ;----------------------------------------------------------------------------
  8491                                  ;
  8492                                  ; Inputs:
  8493                                  ;	DX = Segment number of new base
  8494                                  ; Function:
  8495                                  ;	Set up program base and copy term and ^C from int area
  8496                                  ; Returns:
  8497                                  ;	None
  8498                                  ; Called at DOS init
  8499                                  ;
  8500                                  ;----------------------------------------------------------------------------
  8501                                  ;
  8502                                  
  8503                                  ; 15/05/2019 - Retro DOS v4.0
  8504                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8505                                  
  8506                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8507                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8508                                  
  8509                                  _$CREATE_PROCESS_DATA_BLOCK:
  8510                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8511 000010EF E89DF3                  	CALL	Get_User_Stack
  8512                                  	;mov	ds,[si+14h]
  8513 000010F2 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8514                                  	;push	word [2]
  8515 000010F5 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8516                                  CreateCopy:
  8517 000010F9 8EC2                    	MOV	ES,DX
  8518                                  
  8519 000010FB 31F6                    	XOR	SI,SI			; copy entire PDB
  8520 000010FD 89F7                    	MOV	DI,SI
  8521 000010FF B98000                  	MOV	CX,128
  8522 00001102 F3A5                    	REP	MOVSW
  8523                                  
  8524                                  ; DOS 3.3 7/9/86
  8525                                  	;mov	cx,20
  8526                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8527                                  	; 15/12/2022
  8528 00001104 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8529                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8530                                  	;mov	cx,FILPERPROC
  8531                                  
  8532                                  	;mov	di,18h
  8533 00001106 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8534                                  	;;PUSH	DS ; * 15/05/2019
  8535                                  	;;lds	si,[34h]
  8536                                  	;LDS	SI,[PDB.JFN_Pointer]
  8537                                  	;REP	MOVSB
  8538                                  	;;POP	DS ; * 15/05/2019
  8539                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8540                                  	; 05/12/2022
  8541                                  	; (push ds then pop ds is not needed here!)
  8542                                  	;push	ds
  8543                                  	;lds	si,[34h]
  8544 00001109 C5363400                	lds	si,[PDB.JFN_Pointer]
  8545 0000110D F3A4                    	rep	movsb
  8546                                  	;pop	ds
  8547                                  
  8548                                  ; DOS 3.3 7/9/86
  8549                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8550                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8551                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8552                                  
  8553 0000110F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8554                                  
  8555                                  	;;test	byte [cs:CreatePDB],0FFh
  8556                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8557                                  	; 17/12/2022
  8558 00001114 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8559                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8560 00001118 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8561                                  
  8562                                  ; Here we set up for a new process...
  8563                                  
  8564                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8565                                  	;POP	DS
  8566                                  
  8567                                  	; MSDOS 6.0
  8568                                  	;;getdseg <ds>			; ds -> dosdata
  8569                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8570                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8571                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8572                                  	; 15/12/2022
  8573                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8574                                  
  8575 0000111A 31DB                    	XOR	BX,BX			; dup all jfns
  8576                                  	;mov	cx,20
  8577                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8578                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8579                                  	; 15/12/2022
  8580 0000111C B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8581                                  
  8582                                  Create_dup_jfn:
  8583 0000111E 06                      	PUSH	ES ;**			; save new PDB
  8584 0000111F E8BE55                  	call	SFFromHandle		; get sf pointer
  8585 00001122 B0FF                    	MOV	AL,-1			; unassigned JFN
  8586 00001124 7224                    	JC	short CreateStash	; file was not really open
  8587                                  	;;test	word [es:di+5],1000h
  8588                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8589                                  	; 15/05/2019
  8590                                  	;test	byte [es:di+6],10h
  8591 00001126 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8592 0000112B 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8593                                  
  8594                                  ; We do not inherit network file handles.
  8595                                  
  8596                                  	;mov	ah,[es:di+2]
  8597 0000112D 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8598                                  	;and	ah,0F0h
  8599 00001131 80E4F0                  	AND	AH,SHARING_MASK
  8600                                  	;cmp	ah,70h
  8601 00001134 80FC70                  	CMP	AH,SHARING_NET_FCB
  8602 00001137 7411                    	jz	short CreateStash
  8603                                  
  8604                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8605                                  ; duplication operation.
  8606                                  
  8607 00001139 893E[9E05]              	MOV	[THISSFT],DI
  8608 0000113D 8C06[A005]              	MOV	[THISSFT+2],ES
  8609 00001141 E85C19                  	call	DOS_DUP 		; signal duplication
  8610                                  
  8611                                  ; get the old sfn for copy
  8612                                  
  8613 00001144 E87C55                  	call	pJFNFromHandle		; ES:DI is jfn
  8614 00001147 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8615                                  
  8616                                  ; Take AL (old sfn or -1) and stash it into the new position
  8617                                  
  8618                                  CreateStash:
  8619 0000114A 07                      	POP	ES ;**
  8620                                  	;mov	[es:bx+18h],al
  8621 0000114B 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8622 0000114F 43                      	INC	BX			; next jfn...
  8623 00001150 E2CC                    	LOOP	Create_dup_jfn
  8624                                  
  8625 00001152 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8626                                  	; 06/11/2022
  8627                                  	;mov	[es:16h],bx
  8628 00001156 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8629 0000115B 8C06[3003]              	MOV	[CurrentPDB],ES
  8630                                  	;MOV	DS,BX ; 28/07/2019
  8631                                  	; 07/12/2022
  8632                                  	;mov	ds,[cs:DosDSeg]
  8633                                  	; 15/12/2022
  8634                                  	; ds = [cs:DosDSeg]
  8635 0000115F C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8636                                  	;mov	ds,bx
  8637                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8638                                  	; 15/12/2022
  8639                                  	;mov	ds,bx
  8640                                  
  8641                                  ; end of new process create
  8642                                  
  8643                                  Create_PDB_cont:
  8644                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8645                                  
  8646                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8647                                  
  8648                                  	;; 28/07/2019
  8649                                  	;;push	ds
  8650                                  	;;mov	ds,[cs:DosDSeg]
  8651                                  	;mov	byte [CreatePDB],0
  8652                                  	;;pop	ds
  8653                                  
  8654                                  ; 05/12/2022
  8655                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8656                                  ;	; (push-pop ds is nonsense here! 
  8657                                  ;	;  but i am using same code with original MSDOS.SYS
  8658                                  ;	;  for address compatibility.)
  8659                                  ;	push	ds
  8660                                  ;	; ds = [cs:DosDSeg] !
  8661                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8662                                  ;	mov	byte [CreatePDB],0
  8663                                  ;	pop	ds
  8664                                  
  8665 00001164 58                      	POP	AX ;*
  8666                                  
  8667                                  	;entry	SETMEM
  8668                                  
  8669                                  	; 17/12/2022
  8670                                  	; cx = 0
  8671                                  
  8672                                  ;---------------------------------------------------------------------------
  8673                                  ; Inputs:
  8674                                  ;	AX = Size of memory in paragraphs
  8675                                  ;	DX = Segment
  8676                                  ; Function:
  8677                                  ;	Completely prepares a program base at the
  8678                                  ;	specified segment.
  8679                                  ; Called at DOS init
  8680                                  ; Outputs:
  8681                                  ;	DS = DX
  8682                                  ;	ES = DX
  8683                                  ;	[0] has INT int_abort
  8684                                  ;	[2] = First unavailable segment
  8685                                  ;	[5] to [9] form a long call to the entry point
  8686                                  ;	[10] to [13] have exit address (from int_terminate)
  8687                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8688                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8689                                  ; DX,BP unchanged. All other registers destroyed.
  8690                                  ;---------------------------------------------------------------------------
  8691                                  
  8692                                  SETMEM:
  8693                                  	;XOR	CX,CX
  8694                                  	; 17/12/2022
  8695                                  	; cx = 0
  8696 00001165 8ED9                    	MOV	DS,CX
  8697 00001167 8EC2                    	MOV	ES,DX
  8698                                  	;mov	si,88h
  8699 00001169 BE8800                  	MOV	SI,addr_int_terminate
  8700                                  	;mov	di,10 ; 0Ah
  8701 0000116C BF0A00                  	MOV	DI,SAVEXIT
  8702                                  	;MOV	CX,6
  8703                                  	; 15/12/2022
  8704 0000116F B106                    	mov	cl,6
  8705 00001171 F3A5                    	REP	MOVSW
  8706 00001173 26A30200                	MOV	[ES:2],AX
  8707 00001177 29D0                    	SUB	AX,DX
  8708 00001179 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8709 0000117C 7603                    	JBE	short HAVDIF
  8710 0000117E B8FF0F                  	MOV	AX,MAXDIF
  8711                                  HAVDIF:
  8712 00001181 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8713 00001184 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8714 00001187 29C3                    	SUB	BX,AX
  8715 00001189 B104                    	MOV	CL,4
  8716 0000118B D3E0                    	SHL	AX,CL
  8717 0000118D 8EDA                    	MOV	DS,DX
  8718                                  
  8719                                  	; (MSDOS 6.0 note)
  8720                                  	;
  8721                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8722                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8723                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8724                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8725                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8726                                  	; making this equvalence valid for this particular case. If however
  8727                                  	; there is less than 64K remaining the address in BX:AX will not 
  8728                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8729                                  	; into the PSP.
  8730                                  	;
  8731                                  	; Therefore for the case where there is less than 64K remaining in 
  8732                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8733                                  	; requirements will not work. Call 5, however will continue to work
  8734                                  	; for all cases.
  8735                                  	;
  8736                                  
  8737                                  	;mov	[6],ax
  8738                                  	;mov	[8],bx
  8739                                  
  8740 0000118F A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8741 00001192 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8742                                  
  8743                                  	; 06/05/2019 - Retro DOS v4.0
  8744 00001196 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8745                                  					;    memory left
  8746 00001199 740C                    	je	short addr_ok		; Y: the above calculated address is
  8747                                  					;    OK
  8748                                  					; N: 
  8749                                  
  8750 0000119B C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8751 000011A1 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8752                                  addr_ok:
  8753                                  	;mov	word [0],20CDh
  8754 000011A7 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8755                                  	;mov	byte [5],9Ah
  8756 000011AD C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8757                                  	;mov	word [50h],21CDh
  8758 000011B2 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8759                                  	;mov	byte [52h],0CBh
  8760 000011B8 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8761                                  	;mov	word [34h],18h
  8762 000011BD C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8763                                  	;mov	word [36h],ds
  8764 000011C3 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8765                                  	;mov	word [32h],20
  8766 000011C7 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8767                                  ;
  8768                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8769                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8770                                  ; particular SFT.  We perform this by requiring that the server link together
  8771                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8772                                  ; initialize this pointer.
  8773                                  ;
  8774                                   	;mov	word [38h],-1
  8775 000011CD C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8776                                  	;mov	word [3Ah],-1
  8777 000011D3 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8778                                  
  8779                                  	; 06/05/2019
  8780                                  	; Set the real version number in the PSP - 5.00
  8781                                  
  8782                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8783                                  	; 07/12/2022
  8784 000011D9 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8785                                  
  8786 000011E0 C3                      	retn
  8787                                  
  8788                                  ; 29/04/2019 - Retro DOS v4.0
  8789                                  
  8790                                  ;BREAK <$GSetMediaID -- get set media ID>
  8791                                  
  8792                                  ;---------------------------------------------------------------------------
  8793                                  ; Inputs:
  8794                                  ;	BL= drive number as defined in IOCTL
  8795                                  ;	AL= 0 get media ID
  8796                                  ;	    1 set media ID
  8797                                  ;	DS:DX= buffer containing information
  8798                                  ;		DW  0  info level (set on input)
  8799                                  ;		DD  ?  serial #
  8800                                  ;		DB  11 dup(?)  volume id
  8801                                  ;		DB   8 dup(?)  file system type
  8802                                  ; Function:
  8803                                  ;	Get or set media ID
  8804                                  ; Returns:
  8805                                  ;	carry clear, DS:DX is filled
  8806                                  ;	carry set, error
  8807                                  ;---------------------------------------------------------------------------
  8808                                  
  8809                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8810                                  _$GSetMediaID:
  8811                                  	; RAWIO - GET_MEDIA_ID
  8812 000011E1 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8813 000011E4 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8814 000011E6 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8815                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8816                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8817                                  	; 15/12/2022
  8818 000011E8 FEC8                    	dec	al
  8819 000011EA 7507                    	jnz	short errorfunc ; al > 1
  8820                                  	; RAWIO - SET_MEDIA_ID
  8821                                  	;mov	cx,0846h	      ;AN001;MS.;
  8822                                  	; 15/12/2022
  8823 000011EC B146                    	mov	cl,46h	; cx = 0846h 
  8824                                  doioctl:			      ;AN000;
  8825 000011EE B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8826                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8827                                  	;call	_$IOCTL
  8828                                  	;retn			      ;AN000;MS.;
  8829                                  	; 15/12/2022
  8830 000011F0 E9E910                  	jmp	_$IOCTL
  8831                                  errorfunc:			      ;AN000;
  8832                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8833                                  	;mov	al,1
  8834 000011F3 B001                    	mov	al,error_invalid_function
  8835 000011F5 E95AF4                  	jmp	SYS_RET_ERR
  8836                                  
  8837                                  ; 16/05/2019 - Retro DOS v4.0
  8838                                  
  8839                                  ;============================================================================
  8840                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8841                                  ;============================================================================
  8842                                  ; 20/07/2018 - Retro DOS v3.0
  8843                                  ; 29/04/2019 - Retro DOS v4.0
  8844                                  
  8845                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8846                                  ;----------------------------------------------------------------------------
  8847                                  ;
  8848                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8849                                  ;	     Strings of different lengths don't match.
  8850                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8851                                  ;   Outputs: Z if strings same, NZ if different
  8852                                  ;   Registers modified: NONE
  8853                                  ;----------------------------------------------------------------------------
  8854                                  
  8855                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8856                                  StrCmp:
  8857 000011F8 56                      	push	si
  8858 000011F9 57                      	push	di
  8859 000011FA 50                      	push	ax
  8860                                  
  8861                                  Cmplp:
  8862 000011FB AC                      	LODSB
  8863 000011FC E8AD3E                  	call	UCase			; convert to upper case
  8864 000011FF E8FF3E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8865 00001202 88C4                    	MOV	AH,AL
  8866 00001204 268A05                  	MOV	AL,[ES:DI]
  8867 00001207 47                      	INC	DI
  8868 00001208 E8A13E                  	call	UCase			; convert to upper case
  8869 0000120B E8F33E                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8870 0000120E 38C4                    	CMP	AH,AL
  8871 00001210 7504                    	JNZ	short PopRet		; Strings dif
  8872                                  
  8873 00001212 08C0                    	OR	AL,AL
  8874 00001214 75E5                    	JNZ	short Cmplp		; More string
  8875                                  PopRet:
  8876 00001216 58                      	pop	ax
  8877 00001217 5F                      	pop	di
  8878 00001218 5E                      	pop	si
  8879 00001219 C3                      	retn
  8880                                  
  8881                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8882                                  ;----------------------------------------------------------------------------
  8883                                  ;
  8884                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8885                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8886                                  ;	characters.
  8887                                  ;
  8888                                  ;   Inputs:	DS:SI - pointer to source string
  8889                                  ;		ES:DI - pointer to destination string
  8890                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8891                                  ;		DS:SI point byte after nul byte at end of source string
  8892                                  ;   Registers modified: SI,DI
  8893                                  ;----------------------------------------------------------------------------
  8894                                  
  8895                                  StrCpy:
  8896 0000121A 50                      	push	ax
  8897                                  CPYLoop:
  8898 0000121B AC                      	LODSB
  8899 0000121C E88D3E                  	call	UCase			; convert to upper case
  8900 0000121F E8DF3E                  	call	PATHCHRCMP		; convert / to \ ;
  8901 00001222 AA                      	STOSB
  8902                                  
  8903 00001223 08C0                    	OR	AL,AL
  8904 00001225 75F4                    	JNZ	short CPYLoop
  8905 00001227 58                      	pop	ax
  8906 00001228 C3                      	retn
  8907                                  
  8908                                  ;----------------------------------------------------------------------------
  8909                                  ; Procedure Name : FStrCpy
  8910                                  ;----------------------------------------------------------------------------
  8911                                  
  8912                                  FStrCpy:
  8913 00001229 50                      	push	ax
  8914                                  FCPYLoop:
  8915 0000122A AC                      	LODSB
  8916 0000122B AA                      	STOSB
  8917 0000122C 08C0                    	OR	AL,AL
  8918 0000122E 75FA                    	JNZ	short FCPYLoop
  8919 00001230 58                      	pop	ax
  8920 00001231 C3                      	retn
  8921                                  
  8922                                  ; 20/07/2018 - Retro DOS v3.0
  8923                                  ;----------------------------------------------------------------------------
  8924                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8925                                  ;----------------------------------------------------------------------------
  8926                                  ;
  8927                                  ;UCase:	
  8928                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8929                                  ;	retn
  8930                                  
  8931                                  ;Break <StrLen - compute length of string ES:DI>
  8932                                  ;----------------------------------------------------------------------------
  8933                                  ;**	StrLen - Compute Length of String
  8934                                  ;
  8935                                  ;	StrLen computes the length of a string, including the trailing 00
  8936                                  ;
  8937                                  ;	ENTRY	(es:di) = address of string
  8938                                  ;	EXIT	(cx) = size of string
  8939                                  ;	USES	cx, flags
  8940                                  ;----------------------------------------------------------------------------
  8941                                  
  8942                                  StrLen:
  8943 00001232 57                      	push	di
  8944 00001233 50                      	push	ax
  8945                                  	;MOV	CX,-1
  8946 00001234 B9FFFF                  	mov	cx,65535
  8947 00001237 30C0                    	XOR	AL,AL
  8948 00001239 F2AE                    	REPNE	SCASB
  8949 0000123B F7D1                    	NOT	CX
  8950 0000123D 58                      	pop	ax
  8951 0000123E 5F                      	pop	di
  8952 0000123F C3                      	retn
  8953                                  
  8954                                  ;----------------------------------------------------------------------------
  8955                                  ;**	DStrLen - Compute Length of String
  8956                                  ;
  8957                                  ;	ENTRY	(ds:si) = address of string
  8958                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8959                                  ;	USES	cx, flags
  8960                                  ;----------------------------------------------------------------------------
  8961                                  
  8962                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8963 00001240 E80300                  	CALL	XCHGP
  8964 00001243 E8ECFF                  	CALL	StrLen
  8965                                  	;CALL	XCHGP
  8966                                  	;retn
  8967                                  	; 18/12/2022
  8968                                  	;jmp	short XCHGP
  8969                                  
  8970                                  ;----------------------------------------------------------------------------
  8971                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8972                                  ;
  8973                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8974                                  ;
  8975                                  ;	ENTRY	none
  8976                                  ;	EXIT	pairs exchanged
  8977                                  ;	USES	SI, DI, DS, ES
  8978                                  ;----------------------------------------------------------------------------
  8979                                  
  8980                                  XCHGP:
  8981 00001246 1E                      	push	ds
  8982 00001247 06                      	push	es
  8983 00001248 1F                      	pop	ds
  8984 00001249 07                      	pop	es
  8985 0000124A 87F7                    	XCHG	SI,DI
  8986                                  xchgp_retn:
  8987 0000124C C3                      	retn
  8988                                  
  8989                                  ;Break	<Idle - wait for a specified amount of time>
  8990                                  ;----------------------------------------------------------------------------
  8991                                  ;
  8992                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8993                                  ;   	   we spin until RetryLoop is exhausted.
  8994                                  ;
  8995                                  ;   Inputs:	RetryLoop is the number of times we spin
  8996                                  ;   Outputs:	Wait
  8997                                  ;   Registers modified: none
  8998                                  ;----------------------------------------------------------------------------
  8999                                  
  9000                                  Idle:
  9001                                  	;test	byte [SS:FSHARING],0FFh
  9002 0000124D 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9003                                  	;retnz
  9004 00001253 75F7                    	jnz	short xchgp_retn
  9005                                  	;SAVE	<CX>
  9006 00001255 51                      	push	cx
  9007 00001256 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9008 0000125B E308                    	JCXZ	Idle3
  9009                                  Idle1:	
  9010 0000125D 51                      	PUSH	CX
  9011 0000125E 31C9                    	XOR	CX,CX
  9012                                  Idle2:	
  9013 00001260 E2FE                    	LOOP	Idle2
  9014 00001262 59                      	POP	CX
  9015 00001263 E2F8                    	LOOP	Idle1
  9016                                  Idle3:	
  9017                                  	;RESTORE <CX>
  9018 00001265 59                      	pop	cx
  9019 00001266 C3                      	retn
  9020                                  
  9021                                  ;Break	<TableDispatch - dispatch to a table>
  9022                                  ;----------------------------------------------------------------------------
  9023                                  ;
  9024                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9025                                  ;   routine. Preserve all input registers to the routine.
  9026                                  ;
  9027                                  ;   Inputs:	Push	return address
  9028                                  ;		Push	Table address
  9029                                  ;		Push	index (byte)
  9030                                  ;   Outputs:	appropriate routine gets jumped to.
  9031                                  ;		return indicates invalid index
  9032                                  ;   Registers modified: none.
  9033                                  ;----------------------------------------------------------------------------
  9034                                  
  9035                                  struc TFrame	 ; TableFrame
  9036 00000000 ????                    .OldBP:	 resw 1  ; 0
  9037 00000002 ????                    .OldRet: resw 1  ; 2
  9038 00000004 ??                      .Index:	 resb 1  ; 4
  9039 00000005 ??                      .Pad:	 resb 1  ; 5  
  9040 00000006 ????                    .Tab:	 resw 1  ; 6
  9041 00000008 ????                    .NewRet: resw 1  ; 8
  9042                                  endstruc
  9043                                  
  9044                                  TableDispatch:
  9045 00001267 55                      	PUSH	BP
  9046 00001268 89E5                    	MOV	BP,SP
  9047 0000126A 53                      	PUSH	BX			; save BX
  9048                                  	;mov	bx,[bp+6]
  9049 0000126B 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9050 0000126E 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9051                                  	;cmp	[bp+4],bl
  9052 00001271 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9053 00001274 7317                    	JAE	short TableError	; yes
  9054                                  	;mov	bl,[bp+4]
  9055 00001276 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9056 00001279 30FF                    	XOR	BH,BH			; convert to word
  9057 0000127B D1E3                    	SHL	BX,1			; convert to word pointer
  9058 0000127D 43                      	INC	BX			; point past first length byte
  9059                                  	; 17/08/2018
  9060                                  	;add	bx,[bp+6]
  9061 0000127E 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9062 00001281 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9063                                  	;mov	[bp+6],bx
  9064 00001284 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9065 00001287 5B                      	POP	BX			; restore BX
  9066 00001288 5D                      	POP	BP			; restore BP
  9067 00001289 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9068 0000128C C3                      	retn				; do operation
  9069                                  TableError:
  9070 0000128D 5B                      	POP	BX			; restore BX
  9071 0000128E 5D                      	POP	BP			; restore BP
  9072 0000128F C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9073                                  
  9074                                  
  9075                                  ;Break	<TestNet - determine if a CDS is for the network>
  9076                                  ;----------------------------------------------------------------------------
  9077                                  ;
  9078                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9079                                  ;	network CDS. This will handle NULL cds also.
  9080                                  ;
  9081                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9082                                  ;   Outputs:	ES:DI = ThisCDS
  9083                                  ;		carry Set => network
  9084                                  ;		carry Clear => local
  9085                                  ;   Registers modified: none.
  9086                                  ;----------------------------------------------------------------------------
  9087                                  
  9088                                  TestNet:
  9089                                  	;LES	DI,[CS:THISCDS]
  9090                                  
  9091                                  	; 16/05/2019 - Retro DOS v4.0
  9092 00001292 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9093 00001297 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9094 0000129C 83FFFF                  	CMP	DI,-1
  9095 0000129F 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9096                                  	;;test	word [es:di+43h],8000h
  9097                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9098                                  	;test	byte [es:di+44h],80h
  9099 000012A1 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9100 000012A6 7501                    	JNZ	short CMCRet		; jump has carry clear
  9101 000012A8 C3                      	retn				; carry is clear
  9102                                  CMCRet: 
  9103 000012A9 F5                      	CMC
  9104 000012AA C3                      	retn
  9105                                  
  9106                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9107                                  ;----------------------------------------------------------------------------
  9108                                  ;
  9109                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9110                                  ;	network file.
  9111                                  ;
  9112                                  ;   Inputs:	ES:DI point to SFT
  9113                                  ;   Outputs:	Zero set if not network sft
  9114                                  ;		zero reset otherwise
  9115                                  ;		Carry CLEAR!!!
  9116                                  ;   Registers modified: none.
  9117                                  ;----------------------------------------------------------------------------
  9118                                  
  9119                                  IsSFTNet:
  9120                                  	;;test	word [es:di+5],8000h
  9121                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9122                                  	; 16/05/2019 
  9123                                  	;test	byte [es:di+6],80h
  9124 000012AB 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9125 000012B0 C3                      	retn
  9126                                  
  9127                                  ;Break	<FastInit - Initialize FastTable entries >
  9128                                  ;----------------------------------------------------------------------------
  9129                                  ;   DOS 4.00   2/9/87
  9130                                  ;   FastInit  - initialize the FASTXXX routine entry
  9131                                  ;		  in the FastTable
  9132                                  ;
  9133                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9134                                  ;		DS:SI = address of FASTXXX routine entry
  9135                                  ;		   SI = -1 for query only
  9136                                  ;   Outputs:	Carry flag clear, if success
  9137                                  ;		Carry flag set,   if failure
  9138                                  ;
  9139                                  ;
  9140                                  ;----------------------------------------------------------------------------
  9141                                  
  9142                                  ;Procedure FastInit,NEAR
  9143                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9144                                  
  9145                                  ;	; MSDOS 3.3
  9146                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9147                                  ;FastInit:
  9148                                  ;	mov	di,FastTable ; FastOpenTable
  9149                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9150                                  ;	mov	bx,cs			; get DOS segment
  9151                                  ;	cmp	ax,bx			; first time installed ?	
  9152                                  ;	je	short ok_install	; yes
  9153                                  ;	stc				; set carry
  9154                                  ;	retn				; (cf=1 means) already installed !
  9155                                  ;
  9156                                  ;ok_install:
  9157                                  ;	mov	bx,FastTable ; FastOpenTable
  9158                                  ;	mov	cx,ds
  9159                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9160                                  ;	mov	[cs:bx+4],cx
  9161                                  ;	mov	[cs:bx+2],si
  9162                                  ;	retn
  9163                                  
  9164                                  ; 16/05/2019 - Retro DOS v4.0
  9165                                  
  9166                                  FastInit:
  9167                                  	; MSDOS 6.0
  9168                                  	;hkn; set up es to dosdataseg.
  9169 000012B1 06                      	push	es
  9170                                  	;getdseg <es>			; es -> dosdata
  9171 000012B2 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9172                                  
  9173                                  	;hkn; FastTable is in DOSDATA
  9174 000012B7 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9175 000012BA 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9176 000012BB 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9177 000012BD D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9178 000012BF D1E3                    	SHL	BX,1			;AN000;FO.
  9179 000012C1 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9180 000012C3 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9181                                  fcheck: 				;AN000;
  9182 000012C7 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9183 000012C9 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9184 000012CB 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9185 000012CD 09C0                    	OR	AX,AX			;AN000;FO.;
  9186 000012CF 7403                    	JZ	short ok_install	;AN000;FO.;
  9187 000012D1 F9                      	STC				;AN000;FO.;; already installed !
  9188 000012D2 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9189                                  ok_install:				;AN000;
  9190 000012D4 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9191 000012D7 7412                    	JZ	short FSret		;AN000;FO.; yes
  9192 000012D9 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9193 000012DB 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9194 000012DF 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9195                                  
  9196                                  ;hkn; FastFlg moved to DOSDATA
  9197 000012E2 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9198 000012E5 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9199                                  	;or	byte [es:di],80h
  9200 000012E7 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9201                                  FSret:					;AN000;
  9202 000012EB 07                      	pop	es
  9203 000012EC C3                      	retn				;AN000;FO.
  9204                                  
  9205                                  ;EndProc FastInit
  9206                                  
  9207                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9208                                  ;----------------------------------------------------------------------------
  9209                                  ;   DOS 3.3   6/10/86
  9210                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9211                                  ;
  9212                                  ;   Inputs:	None
  9213                                  ;   Outputs:	AX = -1 and carry flag set
  9214                                  ;
  9215                                  ;   Registers modified: none.
  9216                                  ;----------------------------------------------------------------------------
  9217                                  
  9218                                  FastRet:
  9219                                  	;mov	ax,-1
  9220                                  	;stc
  9221                                  	;retf
  9222 000012ED F9                      	STC
  9223 000012EE 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9224 000012F0 CB                      	RETF
  9225                                  
  9226                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9227                                  ;----------------------------------------------------------------------------
  9228                                  ;   DOS 3.3   6/10/86
  9229                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9230                                  ;
  9231                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9232                                  ;   Outputs:	same output as $OPEN
  9233                                  ;
  9234                                  ;----------------------------------------------------------------------------
  9235                                  
  9236                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9237                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9238                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9239                                  
  9240                                  NLS_OPEN:
  9241                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9242                                  ;	MOV	BYTE [CPSWFLAG],0
  9243                                  ;	PUSH	BX		 ; save current state
  9244                                  
  9245 000012F1 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9246 000012F3 E8545C                  	call	_$OPEN
  9247                                  
  9248                                  ;	POP	BX		 ; restore current state
  9249                                  ;	MOV	[CPSWFLAG],BL
  9250                                  	
  9251 000012F6 C3                      	RETN
  9252                                  
  9253                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9254                                  ;----------------------------------------------------------------------------
  9255                                  ;   DOS 3.3   6/10/86
  9256                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9257                                  ;
  9258                                  ;   Inputs:	BP = open mode
  9259                                  ;   Outputs:	same output as $LSEEK
  9260                                  ;
  9261                                  ;----------------------------------------------------------------------------
  9262                                  
  9263                                  ; 16/05/2019 - Retro DOS v4.0
  9264                                  
  9265                                  NLS_LSEEK:
  9266 000012F7 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9267 000012FC 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9268 00001301 E81000                  	CALL	Fake_User_Stack
  9269 00001304 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9270 00001306 E8EE55                  	call	_$LSEEK
  9271 00001309 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9272 0000130E 368F06[8405]            	POP	word [SS:USER_SP]
  9273 00001313 C3                      	RETN
  9274                                  
  9275                                  ;Break	<Fake_User_Stack - save user stack>
  9276                                  ;----------------------------------------------------------------------------
  9277                                  ;   DOS 3.3   6/10/86
  9278                                  ;   Fake_User_Stack - save user stack pointer
  9279                                  ;
  9280                                  ;----------------------------------------------------------------------------
  9281                                  
  9282                                  Fake_User_Stack:
  9283 00001314 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9284 00001318 36A3[8405]              	MOV	[SS:USER_SP],AX
  9285 0000131C 8CD0                    	MOV	AX,SS
  9286 0000131E 36A3[8605]              	MOV	[SS:USER_SS],AX
  9287 00001322 C3                      	RETN
  9288                                  
  9289                                  ;Break	<GetDevList - get device header list pointer>
  9290                                  ;----------------------------------------------------------------------------
  9291                                  ;   DOS 3.3   7/25/86
  9292                                  ;   GetDevList - get device header list pointer
  9293                                  ;
  9294                                  ;   Output: AX:BX points to the device header list
  9295                                  ;----------------------------------------------------------------------------
  9296                                  
  9297                                  GetDevList:
  9298                                  	; 16/05/2019 - Retro DOS v4.0
  9299 00001323 BE[280D]                	MOV	SI,SysInitTable
  9300 00001326 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9301 0000132B C534                    	LDS	SI,[SI]
  9302                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9303 0000132D 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9304                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9305 00001330 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9306 00001333 C3                      	RETN
  9307                                  
  9308                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9309                                  ;----------------------------------------------------------------------------
  9310                                  ;   DOS 3.3   7/25/86
  9311                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9312                                  ;
  9313                                  ;   Inputs:	BP = function code 0CH
  9314                                  ;   Outputs:	same output as generic $IOCTL
  9315                                  ;
  9316                                  ;----------------------------------------------------------------------------
  9317                                  
  9318                                  NLS_IOCTL:
  9319                                  	; 16/05/2019 - Retro DOS v4.0
  9320 00001334 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9321 00001339 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9322 0000133E E8D3FF                  	CALL	Fake_User_Stack
  9323 00001341 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9324 00001343 E8960F                  	call	_$IOCTL
  9325 00001346 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9326 0000134B 368F06[8405]            	POP	word [SS:USER_SP]
  9327 00001350 C3                      	RETN
  9328                                  
  9329                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9330                                  ;----------------------------------------------------------------------------
  9331                                  ;   DOS 3.3   7/25/86
  9332                                  ;   NLS_GETEXT	-
  9333                                  ;
  9334                                  ;   Inputs:	none
  9335                                  ;   Outputs:	AX = extended error
  9336                                  ;
  9337                                  ;----------------------------------------------------------------------------
  9338                                  
  9339                                  NLS_GETEXT:
  9340                                  	; 16/05/2019 - Retro DOS v4.0
  9341 00001351 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9342                                  	; 23/09/2023
  9343                                  MSG_RETRIEVAL:
  9344 00001355 C3                      	RETN
  9345                                  
  9346                                  ; 29/04/2019 - Retro DOS v4.0
  9347                                  
  9348                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9349                                  
  9350                                  ;----------------------------------------------------------------------------
  9351                                  ;   DOS 4.00
  9352                                  ;
  9353                                  ;   Inputs:	DL=0 get extended error message addr
  9354                                  ;		  =1 set extended error message addr
  9355                                  ;		  =2 get parser error message addr
  9356                                  ;		  =3 set parser error message addr
  9357                                  ;		  =4 get critical error message addr
  9358                                  ;		  =5 set critical error message addr
  9359                                  ;		  =6 get file system error message addr
  9360                                  ;		  =7 set file system error message addr
  9361                                  ;		  =8 get address for code reduction
  9362                                  ;		  =9 set address for code reduction
  9363                                  ;   Function:	get/set message address
  9364                                  ;   Outputs:	ES:DI points to addr when get
  9365                                  ;----------------------------------------------------------------------------
  9366                                  
  9367                                  ;Procedure MSG_RETRIEVAL,NEAR
  9368                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9369                                  
  9370                                  ; 23/09/2023
  9371                                  ;MSG_RETRIEVAL:
  9372                                  
  9373                                  ;;	NOTE:  This function lives in command.com resident code now.
  9374                                  ;;	If the int 2F ever gets this far, we'll return registers
  9375                                  ;;	unchanged, which produces the same result as before, if
  9376                                  ;;	command.com wasn't present (and therefore no messages available).
  9377                                  ;;
  9378                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9379                                  ;;	No_Op zeroes AL.
  9380                                  ;;
  9381                                  ;;;hkn; set up ds to point to DOSDATA
  9382                                  ;;	push	ds
  9383                                  ;;	getdseg	<ds>			; ds -> dosdata
  9384                                  ;;
  9385                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9386                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9387                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9388                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9389                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9390                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9391                                  ;;	DEC	AL		    ;AN000;;MS.
  9392                                  ;;toget:				    ;AN000;
  9393                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9394                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9395                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9396                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9397                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9398                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9399                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9400                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9401                                  ;;getget: 				     ;AN000;
  9402                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9403                                  ;;MSGret: 				     ;AN000;
  9404                                  ;;	POP	SI			     ;AN000;;MS.
  9405                                  ;;	POP	AX			     ;AN000;;MS.
  9406                                  ;;
  9407                                  ;;	pop	ds
  9408                                  
  9409                                  ;	return				     ;AN000;;MS. exit
  9410                                  
  9411                                  ; 23/09/2023
  9412                                  ;	retn	; 29/04/2019
  9413                                  
  9414                                  ;============================================================================
  9415                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9416                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9417                                  ;============================================================================
  9418                                  ; 20/07/2018 - Retro DOS v3.0
  9419                                  
  9420                                  ;	; MSDOS 3.3
  9421                                  ;	; 08/08/2018 - Retro DOS v3.0
  9422                                  ;ECritMEM:
  9423                                  ;ECritSFT:
  9424                                  ;	;
  9425                                  ;ECritDisk:
  9426                                  ;	retn
  9427                                  ;	;push	ax
  9428                                  ;	
  9429                                  ;	mov	ax,8001h
  9430                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9431                                  ;			; AL = critical section number (00h-0Fh)
  9432                                  ;	pop	ax
  9433                                  ;	retn
  9434                                  ;
  9435                                  ;	; MSDOS 3.3
  9436                                  ;	; 08/08/2018 - Retro DOS v3.0
  9437                                  ;LCritMEM:
  9438                                  ;LCritSFT:
  9439                                  ;	;
  9440                                  ;LCritDisk:
  9441                                  ;	retn
  9442                                  ;	;push	ax
  9443                                  ;	
  9444                                  ;	mov	ax,8101h
  9445                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9446                                  ;			; AL = critical section number (00h-0Fh)
  9447                                  ;	pop	ax
  9448                                  ;	retn
  9449                                  ;
  9450                                  ;ECritDevice:
  9451                                  ;	retn
  9452                                  ;	;push	ax
  9453                                  ;	
  9454                                  ;	mov	ax,8002h
  9455                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9456                                  ;			; AL = critical section number (00h-0Fh)
  9457                                  ;	pop	ax
  9458                                  ;	retn
  9459                                  ;
  9460                                  ;LCritDevice:
  9461                                  ;	retn
  9462                                  ;	;push	ax
  9463                                  ;	
  9464                                  ;	mov	ax,8102h
  9465                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9466                                  ;			; AL = critical section number (00h-0Fh)
  9467                                  ;	pop	ax
  9468                                  ;	retn
  9469                                  
  9470                                  ;============================================================================
  9471                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9472                                  ;============================================================================
  9473                                  ; 12/05/2019 - Retro DOS v4.0
  9474                                  
  9475                                  ; Critical Section Routines
  9476                                  
  9477                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9478                                  
  9479                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9480                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9481                                  
  9482                                  ; ---------------------------------------------------------------------------
  9483                                  ; Each handler must leave everything untouched; including flags!
  9484                                  ;
  9485                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9486                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9487                                  ; ---------------------------------------------------------------------------
  9488                                  
  9489                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9490                                  ; ---------------------------------------------------------------------------
  9491                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9492                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9493                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9494                                  ; ---------------------------------------------------------------------------
  9495                                  
  9496                                  ;%macro POPFF 0
  9497                                  ;	jmp	$+3
  9498                                  ;	iret
  9499                                  ;	push	cs
  9500                                  ;	call	$-2
  9501                                  ;%endmacro
  9502                                  
  9503                                  ; ---------------------------
  9504                                  
  9505                                  ;Procedure  ECritDisk,NEAR
  9506                                  	;public  ECritMEM
  9507                                  	;public  ECritSFT
  9508                                  ECritMEM:
  9509                                  ECritSFT:
  9510                                  ;
  9511                                  ECritDisk:
  9512                                  
  9513                                  ;SR; Check if critical section is to be entered
  9514                                  
  9515 00001356 9C                      	pushf
  9516 00001357 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9517 0000135D 740D                    	jz	short ECritDisk_2
  9518                                  
  9519                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9520                                  ;	;popff  ; * (macro)
  9521                                  ;	jmp	short ECritDisk_1 ; *
  9522                                  ;
  9523                                  ;ECritDisk_iret: ; *
  9524                                  ;	iret ; *
  9525                                  
  9526                                  	; 16/12/2022
  9527                                  	; 13/11/2022
  9528                                  	;jmp	short ECritDisk_1
  9529                                  	; 06/11/2022
  9530                                  ;ECritDisk_iret:
  9531                                  ;	iret	
  9532                                  
  9533                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9534                                  ECritDisk_1:
  9535 0000135F 0E                      	push	cs ; *
  9536 00001360 E80800                  	call	ECritDisk_iret ; *		
  9537                                  	
  9538                                  ECritDisk_0:
  9539 00001363 50                      	PUSH    AX
  9540                                  	;MOV	AX,8000h+critDisk
  9541                                  	;INT	int_IBM
  9542 00001364 B80180                  	mov	ax,8001h
  9543 00001367 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9544                                  			; AL = critical section number (00h-0Fh)
  9545 00001369 58                      	POP     AX
  9546 0000136A C3                      	retn
  9547                                  
  9548                                  	; 16/12/2022
  9549                                  	; 13/11/2022
  9550                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9551                                  LCritDisk_iret: 
  9552 0000136B CF                      	iret
  9553                                  
  9554                                  ECritDisk_2:
  9555                                  	;;popff ; *
  9556                                  	;;retn
  9557                                  ;	jmp	short ECritDisk_3 ; *
  9558                                  ;ECritDisk_iret2: ; *
  9559                                  ;	iret
  9560                                  	
  9561                                  	; 16/12/2022
  9562                                  	; 13/11/2022
  9563                                  	;jmp	short ECritDisk_3
  9564                                  ;ECritDisk_iret2:
  9565                                  	;iret
  9566                                  
  9567                                  ECritDisk_3:
  9568 0000136C 0E                      	push    cs ; *
  9569                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9570                                  	;call	ECritDisk_iret2 ; *
  9571                                  	;retn
  9572                                  	; 16/12/2022
  9573 0000136D E8FBFF                  	call	ECritDisk_iret
  9574 00001370 C3                      	retn
  9575                                  
  9576                                  ;EndProc ECritDisk
  9577                                  
  9578                                  ; ---------------------------
  9579                                  
  9580                                  ;Procedure   LCritDisk,NEAR
  9581                                  	;public  LCritMEM
  9582                                  	;public  LCritSFT
  9583                                  LCritMEM:
  9584                                  LCritSFT:
  9585                                  ;
  9586                                  LCritDisk:
  9587                                  
  9588                                  ;SR; Check if critical section is to be entered
  9589                                  
  9590 00001371 9C                      	pushf
  9591 00001372 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9592 00001378 740C                    	jz	short LCritDisk_2
  9593                                  	;popff  ; * (macro)
  9594                                  ;	jmp	short LCritDisk_1 ; *
  9595                                  ;
  9596                                  ;LCritDisk_iret: ; *
  9597                                  ;	iret ; *
  9598                                  
  9599                                  	; 16/12/2022
  9600                                  	; 13/11/2022
  9601                                  	;jmp	short LCritDisk_1
  9602                                  ;LCritDisk_iret:
  9603                                  	;iret
  9604                                  
  9605                                  LCritDisk_1:
  9606 0000137A 0E                      	push	cs ; *
  9607 0000137B E8EDFF                  	call	LCritDisk_iret ; *		
  9608                                  	
  9609                                  LCritDisk_0:
  9610 0000137E 50                      	PUSH	AX
  9611                                  	;MOV	AX,8100h+critDisk
  9612                                  	;INT	int_IBM
  9613 0000137F B80181                  	mov	ax,8101h
  9614 00001382 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9615                                  			; AL = critical section number (00h-0Fh)
  9616 00001384 58                      	POP	AX
  9617 00001385 C3                      	retn
  9618                                  
  9619                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9620                                  ;	iret
  9621                                  
  9622                                  LCritDisk_2:
  9623                                  	;;popff ; *
  9624                                  	;;retn
  9625                                  ;	jmp	short LCritDisk_3 ; *
  9626                                  ;LCritDisk_iret2: ; *
  9627                                  ;	iret
  9628                                  
  9629                                  	; 16/12/2022
  9630                                  	; 13/11/2022
  9631                                  	;jmp	short LCritDisk_3
  9632                                  ;LCritDisk_iret2:
  9633                                  	;iret
  9634                                  
  9635                                  LCritDisk_3:
  9636 00001386 0E                      	push    cs ; *
  9637                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9638                                  	;call	LCritDisk_iret2 ; *
  9639                                  	;retn
  9640                                  	; 16/12/2022
  9641 00001387 E8E1FF                  	call	LCritDisk_iret
  9642 0000138A C3                      	retn
  9643                                  
  9644                                  ;EndProc LCritDisk
  9645                                  
  9646                                  ; ---------------------------
  9647                                  
  9648                                  ;Procedure   ECritDevice,NEAR
  9649                                  
  9650                                  ECritDevice:
  9651                                  
  9652                                  ;SR; Check if critical section is to be entered
  9653                                  
  9654 0000138B 9C                      	pushf
  9655 0000138C 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9656 00001392 740D                    	jz	short ECritDevice_2
  9657                                  	;popff  ; * (macro)
  9658                                  ;	jmp	short ECritDevice_1 ; *
  9659                                  ;
  9660                                  ;ECritDevice_iret: ; *
  9661                                  ;	iret ; *
  9662                                  
  9663                                  	; 16/12/2022	
  9664                                  	; 13/11/2022
  9665                                  	;jmp	short ECritDevice_1
  9666                                  ;ECritDevice_iret:
  9667                                  	;iret
  9668                                  
  9669                                  ECritDevice_1:
  9670 00001394 0E                      	push	cs ; *
  9671 00001395 E80800                  	call	ECritDevice_iret ; *		
  9672                                  	
  9673                                  ECritDevice_0:
  9674 00001398 50                      	PUSH	AX
  9675                                  	;MOV	AX,8000h+critDevice
  9676                                  	;INT	int_IBM
  9677 00001399 B80280                  	mov	ax,8002h
  9678 0000139C CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9679                                  			; AL = critical section number (00h-0Fh)
  9680 0000139E 58                      	POP     AX
  9681 0000139F C3                      	retn
  9682                                  
  9683                                  	; 16/12/2022
  9684                                  	; 06/12/2022
  9685                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9686                                  LCritDevice_iret: 
  9687 000013A0 CF                      	iret
  9688                                  
  9689                                  ECritDevice_2:
  9690                                  	;;popff ; *
  9691                                  	;;retn
  9692                                  ;	jmp	short ECritDevice_3 ; *
  9693                                  ;ECritDevice_iret2: ; *
  9694                                  ;	iret
  9695                                  
  9696                                  	; 16/12/2022
  9697                                  	; 13/11/2022
  9698                                  	;jmp	short ECritDevice_3
  9699                                  ;ECritDevice_iret2:
  9700                                  	;iret
  9701                                  
  9702                                  ECritDevice_3:
  9703 000013A1 0E                      	push    cs ; *
  9704                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9705                                  	;call	ECritDevice_iret2 ; *
  9706                                  	;retn
  9707                                  	; 16/12/2022
  9708 000013A2 E8FBFF                  	call	ECritDevice_iret
  9709 000013A5 C3                      	retn
  9710                                  
  9711                                  ;EndProc ECritDevice
  9712                                  
  9713                                  ; ---------------------------
  9714                                  
  9715                                  ;Procedure   LCritDevice,NEAR
  9716                                  
  9717                                  LCritDevice:
  9718                                  
  9719                                  ;SR; Check if critical section is to be entered
  9720                                  
  9721 000013A6 9C                      	pushf
  9722 000013A7 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9723 000013AD 740C                    	jz	short LCritDevice_2
  9724                                  	;popff  ; * (macro)
  9725                                  ;	jmp	short LCritDevice_1 ; *
  9726                                  ;
  9727                                  ;LCritDevice_iret: ; *
  9728                                  ;	iret ; *
  9729                                  
  9730                                  	; 16/12/2022
  9731                                  	; 13/11/2022
  9732                                  	;jmp	short LCritDevice_1
  9733                                  ;LCritDevice_iret:
  9734                                  	;iret
  9735                                  
  9736                                  LCritDevice_1:
  9737 000013AF 0E                      	push	cs ; *
  9738 000013B0 E8EDFF                  	call	LCritDevice_iret ; *		
  9739                                  	
  9740                                  LCritDevice_0:
  9741 000013B3 50                      	PUSH	AX
  9742                                  	;MOV	AX,8100h+critDevice
  9743                                  	;INT	int_IBM
  9744 000013B4 B80281                  	mov	ax,8102h
  9745 000013B7 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9746                                  			; AL = critical section number (00h-0Fh)
  9747 000013B9 58                      	POP     AX
  9748 000013BA C3                      	retn
  9749                                  
  9750                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9751                                  ;	iret
  9752                                  
  9753                                  LCritDevice_2:
  9754                                  	;;popff ; *
  9755                                  	;;retn
  9756                                  ;	jmp	short LCritDevice_3 ; *
  9757                                  ;LCritDevice_iret2: ; *
  9758                                  ;	iret
  9759                                  
  9760                                  	; 16/12/2022
  9761                                  	; 13/11/2022
  9762                                  	;jmp	short LCritDevice_3
  9763                                  ;LCritDevice_iret2:
  9764                                  	;iret
  9765                                  
  9766                                  LCritDevice_3:
  9767 000013BB 0E                      	push    cs ; *
  9768                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9769                                  	;call	LCritDevice_iret2 ; *
  9770                                  	;retn
  9771                                  	; 16/12/2022
  9772 000013BC E8E1FF                  	call	LCritDevice_iret
  9773 000013BF C3                      	retn
  9774                                  
  9775                                  ;EndProc LCritDevice
  9776                                  
  9777                                  ;============================================================================
  9778                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9779                                  ;============================================================================
  9780                                  ; 20/07/2018 - Retro DOS v3.0
  9781                                  
  9782                                  ;============================================================================
  9783                                  ; STDIO.ASM - (MSDOS 2.0)
  9784                                  ;============================================================================
  9785                                  
  9786                                  ;
  9787                                  ; Standard device IO for MSDOS (first 12 function calls)
  9788                                  ;
  9789                                  
  9790                                  ;.xlist
  9791                                  ;.xcref
  9792                                  ;INCLUDE STDSW.ASM
  9793                                  ;INCLUDE DOSSEG.ASM
  9794                                  ;.cref
  9795                                  ;.list
  9796                                  
  9797                                  ;TITLE   STDIO - device IO for MSDOS
  9798                                  ;NAME    STDIO
  9799                                  
  9800                                  ;INCLUDE IO.ASM
  9801                                  
  9802                                  ; ---------------------------------------------------------------------------
  9803                                  ;
  9804                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9805                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9806                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9807                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9808                                  ;			    to restore MSDOS 2.0 device IO source code 
  9809                                  ;
  9810                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9811                                  	
  9812                                  ;============================================================================
  9813                                  ; STDIO.ASM - (MSDOS 2.0)
  9814                                  ;============================================================================
  9815                                  
  9816                                  ;
  9817                                  ; Standard device IO for MSDOS (first 12 function calls)
  9818                                  ;
  9819                                  
  9820                                  ;.xlist
  9821                                  ;.xcref
  9822                                  ;INCLUDE STDSW.ASM
  9823                                  ;INCLUDE DOSSEG.ASM
  9824                                  ;.cref
  9825                                  ;.list
  9826                                  
  9827                                  ;TITLE   STDIO - device IO for MSDOS
  9828                                  ;NAME    STDIO
  9829                                  
  9830                                  ;INCLUDE IO.ASM
  9831                                  
  9832                                  ; ---------------------------------------------------------------------------
  9833                                  ;
  9834                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9835                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9836                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9837                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9838                                  ;			    to restore MSDOS 2.0 device IO source code 
  9839                                  ;
  9840                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9841                                  ;
  9842                                  ;============================================================================
  9843                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9844                                  ;============================================================================
  9845                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9846                                  
  9847                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9848                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9849                                  
  9850                                  ;============================================================================
  9851                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9852                                  ;============================================================================
  9853                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9854                                  
  9855                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9856                                  
  9857                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9858                                  ;
  9859                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9860                                  ;	NAME	IBMCPMIO
  9861                                  
  9862                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9863                                  ;
  9864                                  ;	$Std_Con_Input_No_Echo
  9865                                  ;	$Std_Con_String_Output
  9866                                  ;	$Std_Con_String_Input
  9867                                  ;	$RawConIO
  9868                                  ;	$RawConInput
  9869                                  ;	RAWOUT
  9870                                  ;	RAWOUT2
  9871                                  ;
  9872                                  
  9873                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9874                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9875                                  ; references to be SS or CS relative which is desired.
  9876                                  
  9877                                  ; ---------------------------------------------------------------------------
  9878                                  
  9879                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9880                                  ;	NAME	CPMIO2
  9881                                  
  9882                                  ;
  9883                                  ;	Microsoft Confidential
  9884                                  ;	Copyright (C) Microsoft Corporation 1991
  9885                                  ;	All Rights Reserved.
  9886                                  ;
  9887                                  
  9888                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9889                                  ;
  9890                                  ;	$Std_Con_Input
  9891                                  ;	$Std_Con_Output
  9892                                  ;	OUTT
  9893                                  ;	TAB
  9894                                  ;	BUFOUT
  9895                                  ;	$Std_Aux_Input
  9896                                  ;	$Std_Aux_Output
  9897                                  ;	$Std_Printer_Output
  9898                                  ;	$Std_Con_Input_Status
  9899                                  ;	$Std_Con_Input_Flush
  9900                                  ;
  9901                                  ;	Revision History:
  9902                                  ;
  9903                                  ;	  AN000	 version 4.00 - Jan. 1988
  9904                                  
  9905                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9906                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9907                                  ; references to be SS or CS relative which is desired.
  9908                                  
  9909                                  ;DOSCODE SEGMENT
  9910                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9911                                  
  9912                                  
  9913                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9914                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9915                                  ;hkn;	not valid. 
  9916                                  
  9917                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9918                                  ; 08/11/2022
  9919                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9920                                  
  9921                                  ;
  9922                                  ;----------------------------------------------------------------------------
  9923                                  ;
  9924                                  ; Procedure : $Std_Con_Input_No_Echo
  9925                                  ;
  9926                                  ;----------------------------------------------------------------------------
  9927                                  ;
  9928                                  
  9929                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9930                                  
  9931                                  ; Inputs:
  9932                                  ;	None
  9933                                  ; Function:
  9934                                  ;	Input character from console, no echo
  9935                                  ; Returns:
  9936                                  ;	AL = character
  9937                                  
  9938 000013C0 1E                      	push	ds
  9939 000013C1 56                      	push	si
  9940                                  INTEST:
  9941 000013C2 E8063E                  	call	STATCHK
  9942 000013C5 753B                    	jnz	short GET ; 08/09/2018
  9943                                  ;*************************************************************************
  9944                                  ;hkn; SS override
  9945 000013C7 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9946 000013CD 7505                    	jnz	short no_sys_wait
  9947 000013CF B405                    	mov	ah,5			; get input status with system wait
  9948 000013D1 E82E31                  	call	IOFUNC
  9949                                  no_sys_wait:
  9950                                  ;**************************************************************************
  9951 000013D4 B484                    	MOV	AH,84h
  9952 000013D6 CD2A                    	INT	int_IBM	 ; int 2Ah
  9953                                  
  9954                                  ;;; 7/15/86  update the date in the idle loop
  9955                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9956                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9957                                  
  9958                                  ;hkn; SS override
  9959 000013D8 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9960 000013DE 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9961                                  
  9962 000013E0 50                      	PUSH	AX
  9963 000013E1 53                      	PUSH	BX			; following is tricky,
  9964 000013E2 51                      	PUSH	CX			; it may be called by critical handler
  9965 000013E3 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9966                                  					; other's READ or WRITE
  9967 000013E4 1E                      	PUSH	DS			; save DS = SFT's segment
  9968                                  
  9969                                  ;hkn; READTIME must use ds = DOSDATA
  9970                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9971                                  
  9972 000013E5 16                      	PUSH	SS ; 04/05/2019
  9973 000013E6 1F                      	POP	DS
  9974                                  
  9975 000013E7 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9976 000013EA E89A02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9977                                  	;invoke	READTIME		; readtime
  9978 000013ED E849F7                  	call	READTIME
  9979 000013F0 B80100                  	MOV	AX,1
  9980 000013F3 E89102                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9981                                  
  9982                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9983                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9984                                  ;	push	bx
  9985                                  ;	mov	bx,DATE_FLAG
  9986                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9987                                  ;	cmp	word [cs:bx],5872h
  9988                                  ;	jz	short FETCHI_TAG_chk_ok
  9989                                  ;	call	DOSINIT
  9990                                  ;FETCHI_TAG_chk_ok:
  9991                                  ;	pop	bx
  9992                                  
  9993 000013F6 1F                      	POP	DS			; restore DS
  9994 000013F7 5A                      	POP	DX
  9995 000013F8 59                      	POP	CX
  9996 000013F9 5B                      	POP	BX
  9997 000013FA 58                      	POP	AX
  9998                                  NoUpdate:
  9999                                  
 10000                                  ;hkn; SS override
 10001 000013FB 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10002                                  
 10003                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10004 00001400 EBC0                    	JMP	short INTEST
 10005                                  GET:
 10006 00001402 30E4                    	XOR	AH,AH
 10007 00001404 E8FB30                  	call	IOFUNC
 10008 00001407 5E                      	POP	SI
 10009 00001408 1F                      	POP	DS
 10010                                  ;;; 7/15/86
 10011                                  
 10012                                  ;hkn; SS override
 10013                                  	; MSDOS 6.0
 10014 00001409 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10015                                  	;
 10016 0000140F 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10017 00001411 7505                    	JNZ	short noscan
 10018                                  
 10019                                  ;hkn; SS override
 10020                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10021                                  	; 20/06/2023
 10022 00001413 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10023                                  noscan:
 10024 00001418 C3                      	retn
 10025                                  ;
 10026                                  ;----------------------------------------------------------------------------
 10027                                  ;
 10028                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10029                                  ;
 10030                                  ;
 10031                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10032                                  ;	EXIT	none
 10033                                  ;	USES	ALL
 10034                                  ;
 10035                                  ;----------------------------------------------------------------------------
 10036                                  ;
 10037                                  
 10038                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10039                                  
 10040 00001419 89D6                    	mov	si,dx
 10041                                  STRING_OUT1:	
 10042 0000141B AC                      	lodsb
 10043 0000141C 3C24                    	cmp	al,'$'
 10044 0000141E 74F8                    	je	short noscan
 10045                                  NEXT_STR1:
 10046 00001420 E88F02                  	call	OUTT
 10047 00001423 EBF6                    	jmp	short STRING_OUT1
 10048                                  
 10049                                  ;----------------------------------------------------------------------------
 10050                                  ;
 10051                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10052                                  ;
 10053                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10054                                  ;
 10055                                  ;	ENTRY	(ds:dx) = input buffer
 10056                                  ;	EXIT	none
 10057                                  ;	USES	ALL
 10058                                  ;
 10059                                  ;----------------------------------------------------------------------------
 10060                                  
 10061                                  _$STD_CON_STRING_INPUT:		;System call 10
 10062                                  
 10063 00001425 8CD0                    	mov	ax,ss
 10064 00001427 8EC0                    	mov	es,ax
 10065 00001429 89D6                    	mov	si,dx
 10066 0000142B 30ED                    	xor	ch,ch
 10067 0000142D AD                      	lodsw
 10068                                  
 10069                                  ;	(AL) = the buffer length
 10070                                  ;	(AH) = the template length
 10071                                  
 10072 0000142E 08C0                            or	al,al
 10073 00001430 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10074 00001432 88E3                    	mov	bl,ah		;Init template counter
 10075 00001434 88EF                            mov	bh,ch		;Init template counter
 10076                                  
 10077                                  ;	(BL) = the number of bytes in the template
 10078                                  
 10079 00001436 38D8                            cmp	al,bl
 10080 00001438 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10081 0000143A 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10082 0000143D 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10083                                  
 10084                                  ; The number of chars in the template is >= the number of chars in buffer or
 10085                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10086                                  ; of affairs.  Pretend that the template was empty:
 10087                                  ;
 10088                                  
 10089                                  NOEDIT:	
 10090 0000143F 88EB                    	mov	bl,ch		;Reset buffer
 10091                                  EDITON: 
 10092 00001441 88C2                    	mov	dl,al
 10093 00001443 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10094                                  
 10095                                  ;	Top level. We begin to read a line in.
 10096                                  
 10097                                  NEWLIN: 
 10098 00001444 36A0[F901]              	mov	al,[SS:CARPOS]
 10099 00001448 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10100                                  
 10101 0000144C 56                      	push	si
 10102 0000144D BF[FB01]                	mov	di,INBUF ;Build the new line here
 10103 00001450 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10104 00001455 88EF                    	mov	bh,ch		;No chars from template yet
 10105 00001457 88EE                    	mov	dh,ch		;No chars to new line yet
 10106 00001459 E864FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10107 0000145C 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10108 0000145E 7503                    	jnz	short GOTCH
 10109                                  
 10110                                  ;	This is the main loop of reading in a character and processing it.
 10111                                  ;
 10112                                  ;	(BH) = the index of the next byte in the template
 10113                                  ;	(BL) = the length of the template
 10114                                  ;	(DH) = the number of bytes in the buffer
 10115                                  ;	(DL) = the length of the buffer
 10116                                  
 10117                                  GETCH:
 10118 00001460 E85DFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10119                                  GOTCH:
 10120                                  ;
 10121                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10122                                  ; input queue.
 10123                                  ;
 10124 00001463 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10125 00001465 74F9                    	jz	short GETCH
 10126                                  
 10127                                  ;	If the leading char is the function-key lead byte
 10128                                  
 10129                                  	;cmp	al,[SS:ESCCHAR]
 10130                                  
 10131                                  	; 04/05/2019 - Retro DOS v4.0
 10132                                  
 10133                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10134                                  
 10135 00001467 2E3A06[370A]            	CMP	AL,[cs:ESCCHAR]
 10136 0000146C 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10137                                  
 10138                                  ;	Rubout and ^H are both destructive backspaces.
 10139                                  
 10140 0000146E 3C7F                            cmp	al,c_DEL ; 7FH
 10141 00001470 742E                            jz	short BACKSPJ
 10142 00001472 3C08                            cmp	al,c_BS  ; 8
 10143 00001474 742A                            jz	short BACKSPJ
 10144                                  
 10145                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10146                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10147                                  	;	   	after CMP and a CMP again!
 10148                                  	;		
 10149                                  	;		-It would be better if they use a 'JMP short' to 
 10150                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10151                                  	;		between them. Then, they would be able use a patch
 10152                                  	;		between 5271h and 5279h when if it will be required.
 10153                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10154                                  	;	
 10155                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10156                                  
 10157                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10158                                  	;
 10159                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10160                                  
 10161                                  ;DOSCODE:526D	cmp     al, 8
 10162                                  ;DOSCODE:526F	jz      short BACKSPJ
 10163                                  ;DOSCODE:5271	cmp     al, 17h
 10164                                  ;DOSCODE:5273	nop
 10165                                  ;DOSCODE:5274	nop
 10166                                  ;DOSCODE:5275	cmp     al, 15h
 10167                                  ;DOSCODE:5277	nop
 10168                                  ;DOSCODE:5278	nop
 10169                                  ;DOSCODE:5279	cmp     al, 0Dh
 10170                                  ;DOSCODE:527B	jz      short ENDLIN
 10171                                  ;DOSCODE:527D	cmp     al, 0Ah
 10172                                  ;DOSCODE:527F	jz      short PHYCRLF
 10173                                  	
 10174                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10175                                  	; DOSCODE:525Dh
 10176                                  
 10177                                  ; 16/12/2022
 10178                                  %if 0
 10179                                  	; MSDOS 6.0
 10180                                  ;	^W deletes backward once and then backs up until a letter is before the
 10181                                  ;	cursor
 10182                                  
 10183                                  	CMP     AL,"W"-"@" ; 17h
 10184                                  
 10185                                  ;	The removal of the comment characters before the jump statement will
 10186                                  ;	cause ^W to backup a word.
 10187                                  
 10188                                  ;***	JZ	short WordDel
 10189                                  	NOP
 10190                                  	NOP
 10191                                  
 10192                                  	CMP     AL,"U"-"@" ; 15h
 10193                                  
 10194                                  ;	The removal of the comment characters before the jump statement will
 10195                                  ;	cause ^U to clear a line.
 10196                                  
 10197                                  ;***	JZ	short LineDel
 10198                                  	NOP
 10199                                  	NOP
 10200                                  
 10201                                  %endif
 10202                                  
 10203                                  ;	CR terminates the line.
 10204                                  
 10205 00001476 3C0D                            cmp	al,c_CR ; 0Dh
 10206 00001478 7432                            jz	short ENDLIN
 10207                                  
 10208                                  ;	LF goes to a new line and keeps on reading.
 10209                                  
 10210 0000147A 3C0A                            cmp	al,c_LF ; 0Ah
 10211 0000147C 7444                    	jz	short PHYCRLF
 10212                                  
 10213                                  ;	^X (or ESC) deletes the line and starts over
 10214                                  
 10215                                  	; MSDOS 3.3
 10216                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10217                                  	;jz	short KILNEW
 10218                                  
 10219                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10220                                  
 10221                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10222                                  
 10223 0000147E 2E3A06[360A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10224 00001483 7442                    	jz	short KILNEW
 10225                                  	
 10226                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10227                                  	;jz	short KILNEW
 10228                                  
 10229                                  ; Otherwise, we save the input character.
 10230                                  
 10231                                  SAVCH:	
 10232 00001485 38D6                    	cmp	dh,dl
 10233 00001487 7319                    	jnb	short BUFFUL		; buffer is full.
 10234 00001489 AA                              stosb
 10235 0000148A FEC6                    	inc	dh                      ; increment count in buffer.
 10236 0000148C E8B702                  	call	BUFOUT			; Print control chars nicely
 10237                                  
 10238 0000148F 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10239 00001495 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10240 00001497 38DF                            cmp	bh,bl
 10241 00001499 73C5                            jnb	short GETCH		; no more characters in template
 10242 0000149B 46                              inc	si                      ; Skip to next char in template
 10243 0000149C FEC7                            inc	bh                      ; remember position in template
 10244 0000149E EBC0                            jmp	short GETCH
 10245                                  
 10246                                  BACKSPJ: 
 10247 000014A0 EB38                    	jmp	short BACKSP
 10248                                  
 10249                                  BUFFUL: 
 10250 000014A2 B007                    	mov	al, 7			; Bell to signal full buffer
 10251 000014A4 E80B02                  	call	OUTT
 10252 000014A7 EBB7                    	jmp	short GETCH
 10253                                  
 10254                                  ESCAPE: 
 10255                                  	;transfer OEMFunctionKey
 10256 000014A9 E9B6F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10257                                  
 10258                                  ENDLIN:
 10259 000014AC AA                              stosb				; Put the CR in the buffer
 10260 000014AD E80202                  	call	OUTT                    ; Echo it
 10261 000014B0 5F                              pop	di                      ; Get start of user buffer
 10262 000014B1 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10263 000014B4 FEC6                            inc	dh			; DH is length including CR
 10264                                  
 10265                                  COPYNEW:
 10266                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10267                                  	;mov	bp, es
 10268                                  	;mov	bx, ds
 10269                                  	;mov	es, bx
 10270                                  	;mov	ds, bp
 10271                                  	;mov	si, INBUF
 10272                                  	;mov	cl, dh
 10273                                  	;rep	movsb
 10274                                  	;retn
 10275                                  
 10276                                  	; CPMIO.ASM (MSDOS 6.0)
 10277                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10278                                  	;SAVE	<DS,ES>
 10279 000014B6 1E                      	PUSH	DS
 10280 000014B7 06                      	PUSH	ES
 10281                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10282 000014B8 1F                      	POP	DS
 10283 000014B9 07                      	POP	ES
 10284                                  
 10285                                  ;;hkn; INBUF is in DOSDATA
 10286 000014BA BE[FB01]                        MOV     SI,INBUF
 10287 000014BD 88F1                            MOV     CL,DH                   ; set up count
 10288 000014BF F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10289                                  OLDBAK_RETN:
 10290 000014C1 C3                              RETN
 10291                                  
 10292                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10293                                  
 10294                                  PHYCRLF:
 10295 000014C2 E82001                  	CALL	CRLF
 10296 000014C5 EB99                            JMP	short GETCH
 10297                                  
 10298                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10299                                  
 10300                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10301                                  
 10302                                  	; Note: Following routines were not used in IBMDOS.COM
 10303                                  	;	-CRTL+W, CRTL+U is not activated-
 10304                                  	;	but they were in the kernel code!?)
 10305                                  
 10306                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10307                                  	; DOSCODE:52B6h
 10308                                  
 10309                                  ;;;;;;;;
 10310                                  
 10311                                  ; 16/12/2022
 10312                                  %if 0
 10313                                  ;
 10314                                  ; Delete the previous line
 10315                                  ;
 10316                                  LineDel:
 10317                                  	OR      DH,DH
 10318                                  	JZ	short GETCH	 ; 06/12/2022
 10319                                  	Call    BackSpace
 10320                                  	JMP	short LineDel
 10321                                  
 10322                                  %endif
 10323                                  
 10324                                  ;
 10325                                  ; delete the previous word.
 10326                                  ;
 10327                                  WordDel:
 10328                                  WordLoop:
 10329                                  ;	Call    BackSpace               ; backspace the one spot
 10330                                  ;	OR      DH,DH
 10331                                  ;	JZ	short GetChj
 10332                                  ;	MOV     AL,[ES:DI-1]
 10333                                  ;	cmp     al,'0'
 10334                                  ;	jb	short GetChj
 10335                                  ;	cmp     al,'9'
 10336                                  ;	jbe	short WordLoop
 10337                                  ;	OR      AL,20h
 10338                                  ;	CMP     AL,'a'
 10339                                  ;	JB	short GetChj
 10340                                  ;	CMP     AL,'z'
 10341                                  ;	JBE	short WordLoop
 10342                                  ;GetChj: 
 10343                                  ;	JMP	GETCH
 10344                                  
 10345                                  ; 16/12/2022
 10346                                  %if 0
 10347                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10348                                  	; (Worddel is not called or jumped from anywhere!)
 10349                                  WordDel:
 10350                                  WordLoop:
 10351                                  	Call    BackSpace               ; backspace the one spot
 10352                                  	OR      DH,DH
 10353                                  	JZ	short GetChj
 10354                                  	MOV     AL,[ES:DI-1]
 10355                                  	cmp     al,'0'
 10356                                  	jb	short GetChj
 10357                                  	cmp     al,'9'
 10358                                  	jbe	short WordLoop
 10359                                  	OR      AL,20h
 10360                                  	CMP     AL,'a'
 10361                                  	JB	short GetChj
 10362                                  	CMP     AL,'z'
 10363                                  	JBE	short WordLoop
 10364                                  GetChj: 
 10365                                  	JMP	GETCH
 10366                                  
 10367                                  %endif
 10368                                  
 10369                                  ;;;;;;;;
 10370                                  
 10371                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10372                                  
 10373                                  ; The user wants to throw away what he's typed in and wants to start over.
 10374                                  ; We print the backslash and then go to the next line and tab to the correct
 10375                                  ; spot to begin the buffered input.
 10376                                  
 10377                                  KILNEW:
 10378 000014C7 B05C                            mov	al,'\'
 10379 000014C9 E8E601                          call	OUTT            ;Print the CANCEL indicator
 10380 000014CC 5E                              pop	si		;Remember start of edit buffer
 10381                                  PUTNEW:
 10382 000014CD E81501                  	call	CRLF            ;Go to next line on screen
 10383 000014D0 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10384 000014D4 E84F02                  	call	TAB             ;Tab over
 10385 000014D7 E96AFF                          JMP     NEWLIN		;Start over again
 10386                                  
 10387                                  ;	Destructively back up one character position
 10388                                  
 10389                                  BACKSP:
 10390                                  	; 09/09/2018
 10391 000014DA E80200                  	Call    BackSpace
 10392 000014DD EB81                    	JMP     GETCH
 10393                                  
 10394                                  BackSpace:
 10395 000014DF 08F6                    	or	dh,dh
 10396 000014E1 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10397 000014E3 E85800                  	call	BACKUP          ;Do the backup
 10398 000014E6 268A05                  	mov	al,[es:di]	;Get the deleted char
 10399 000014E9 3C20                            cmp	al,20h	; ' '
 10400 000014EB 730F                    	jnb	short OLDBAK	;Was a normal char
 10401 000014ED 3C09                            cmp	al,c_HT ; 9
 10402 000014EF 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10403                                  ;; 9/27/86 fix for ctrl-U backspace
 10404 000014F1 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10405 000014F3 7407                    	JZ	short OLDBAK
 10406 000014F5 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10407 000014F7 7403                    	JZ	short OLDBAK
 10408                                  ;; 9/27/86 fix for ctrl-U backspace
 10409 000014F9 E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10410                                  OLDBAK:
 10411 000014FC 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10412 00001502 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10413 00001504 08FF                    	or	bh,bh
 10414 00001506 74B9                            jz	short OLDBAK_RETN 
 10415                                  				;Not advanced in template, stay where we are
 10416 00001508 FECF                    	dec	bh		;Go back in template
 10417 0000150A 4E                              dec	si
 10418 0000150B C3                      	retn
 10419                                  BAKTAB:
 10420 0000150C 57                              push	di
 10421 0000150D 4F                              dec	di		;Back up one char
 10422 0000150E FD                              std			;Go backward
 10423 0000150F 88F1                            mov	cl,dh		;Number of chars currently in line
 10424 00001511 B020                            mov	al,20h	; ' '
 10425 00001513 53                              push	bx
 10426 00001514 B307                            mov	bl,7		;Max
 10427 00001516 E30E                            jcxz	FIGTAB		;At start, do nothing
 10428                                  FNDPOS:
 10429 00001518 AE                              scasb			;Look back
 10430 00001519 7609                    	jbe	short CHKCNT
 10431 0000151B 26807D0109              	cmp	byte [es:di+1],9
 10432 00001520 7409                    	jz	short HAVTAB	;Found a tab
 10433 00001522 FECB                    	dec	bl		;Back one char if non tab control char
 10434                                  CHKCNT:
 10435 00001524 E2F2                            loop	FNDPOS
 10436                                  FIGTAB:		
 10437 00001526 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10438                                  HAVTAB:
 10439 0000152B 28F3                    	sub	bl,dh
 10440 0000152D 00D9                    	add	cl,bl
 10441 0000152F 80E107                  	and	cl,7		;CX has correct number to erase
 10442 00001532 FC                      	cld			;Back to normal
 10443 00001533 5B                      	pop	bx
 10444 00001534 5F                      	pop	di
 10445 00001535 74C5                    	jz	short OLDBAK	;Nothing to erase
 10446                                  TABBAK:
 10447 00001537 E80700                  	call	BACKMES
 10448 0000153A E2FB                    	loop	TABBAK		;Erase correct number of chars
 10449 0000153C EBBE                    	jmp	short OLDBAK
 10450                                  
 10451                                  BACKUP:
 10452 0000153E FECE                            dec	dh		;Back up in line
 10453 00001540 4F                              dec	di
 10454                                  BACKMES:
 10455 00001541 B008                            mov	al,c_BS ; 8	;Backspace
 10456 00001543 E86C01                          call	OUTT
 10457 00001546 B020                            mov	al,20h ; ' '	;Erase
 10458 00001548 E86701                          call	OUTT
 10459 0000154B B008                            mov	al,c_BS ; 8	;Backspace
 10460 0000154D E96201                  	jmp	OUTT		;Done
 10461                                  
 10462                                  ;User really wants an ESC character in his line
 10463                                  TWOESC:	
 10464 00001550 2EA0[370A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10465 00001554 E92EFF                  	jmp	SAVCH
 10466                                  
 10467                                  ;Copy the rest of the template
 10468                                  COPYLIN:
 10469 00001557 88D9                            mov	cl,bl		;Total size of template
 10470 00001559 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10471 0000155B EB07                            jmp	short COPYEACH
 10472                                  
 10473                                  COPYSTR:
 10474 0000155D E83400                  	call	FINDOLD         ;Find the char
 10475 00001560 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10476                                  
 10477                                  ;Copy one char from template to line
 10478                                  COPYONE:
 10479 00001562 B101                            mov	cl,1
 10480                                  ;Copy CX chars from template to line
 10481                                  COPYEACH:
 10482 00001564 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10483 0000156A 38D6                    	cmp	dh,dl
 10484 0000156C 740F                            jz	short GETCH2		;At end of line, can't do anything
 10485 0000156E 38DF                            cmp	bh,bl
 10486 00001570 740B                            jz	short GETCH2		;At end of template, can't do anything
 10487 00001572 AC                              lodsb
 10488 00001573 AA                              stosb
 10489 00001574 E8CF01                  	call	BUFOUT
 10490 00001577 FEC7                            inc	bh			;Ahead in template
 10491 00001579 FEC6                            inc	dh			;Ahead in line
 10492 0000157B E2E7                            loop	COPYEACH
 10493                                  GETCH2:
 10494 0000157D E9E0FE                          jmp	GETCH
 10495                                  
 10496                                  ;Skip one char in template
 10497                                  SKIPONE:
 10498 00001580 38DF                    	cmp	bh,bl
 10499 00001582 74F9                    	jz	short GETCH2		;At end of template
 10500 00001584 FEC7                    	inc	bh			;Ahead in templat
 10501 00001586 46                      	inc	si
 10502 00001587 E9D6FE                  	jmp	GETCH
 10503                                  
 10504                                  SKIPSTR:
 10505 0000158A E80700                  	call	FINDOLD                 ;Find out how far to go
 10506 0000158D 01CE                            add	si,cx			;Go there
 10507 0000158F 00CF                            add	bh,cl
 10508 00001591 E9CCFE                          jmp	GETCH
 10509                                  
 10510                                  ;Get the next user char, and look ahead in template for a match
 10511                                  ;CX indicates how many chars to skip to get there on output
 10512                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10513                                  ;       address is popped off and a jump to GETCH is taken.
 10514                                  ;       Make sure nothing extra on stack when this routine
 10515                                  ;       is called!!! (no PUSHes before calling it).
 10516                                  
 10517                                  FINDOLD:
 10518 00001594 E829FE                          call	_$STD_CON_INPUT_NO_ECHO
 10519                                  
 10520                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10521                                  
 10522                                  	;CMP     AL,[SS:ESCCHAR]	
 10523                                  	;JNZ     SHORT FINDSETUP
 10524                                  
 10525                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10526                                  
 10527                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10528                                  
 10529 00001597 2E3A06[370A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10530 0000159C 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10531                                  
 10532 0000159E E81FFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10533 000015A1 EB1D                            JMP     SHORT NOTFND		; go try again
 10534                                  FINDSETUP:
 10535 000015A3 88D9                    	mov	cl,bl
 10536 000015A5 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10537 000015A7 7417                    	jz	short NOTFND	;At end of template
 10538 000015A9 49                              dec	cx		;Cannot point past end, limit search
 10539 000015AA 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10540 000015AC 06                      	push	es
 10541 000015AD 1E                      	push	ds
 10542 000015AE 07                      	pop	es
 10543 000015AF 57                      	push	di
 10544 000015B0 89F7                    	mov	di,si		;Template to ES:DI
 10545 000015B2 47                      	inc	di
 10546 000015B3 F2AE                    	repne	scasb		;Look
 10547 000015B5 5F                      	pop	di
 10548 000015B6 07                      	pop	es
 10549 000015B7 7507                    	jnz	short NOTFND	;Didn't find the char
 10550 000015B9 F6D1                            not	cl		;Turn how far to go into how far we went
 10551 000015BB 00D9                            add	cl,bl		;Add size of template
 10552 000015BD 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10553                                  FINDOLD_RETN:
 10554 000015BF C3                      	retn
 10555                                  
 10556                                  NOTFND:
 10557 000015C0 5D                              pop	bp              ;Chuck return address
 10558 000015C1 E99CFE                          jmp	GETCH
 10559                                  
 10560                                  REEDIT:
 10561 000015C4 B040                    	mov	al,'@'		;Output re-edit character
 10562 000015C6 E8E900                  	call	OUTT
 10563 000015C9 5F                      	pop	di
 10564 000015CA 57                      	push	di
 10565 000015CB 06                      	push	es
 10566 000015CC 1E                      	push	ds
 10567 000015CD E8E6FE                  	call	COPYNEW		;Copy current line into template
 10568 000015D0 1F                      	pop	ds
 10569 000015D1 07                      	pop	es
 10570 000015D2 5E                      	pop	si
 10571 000015D3 88F3                    	mov	bl,dh		;Size of line is new size template
 10572 000015D5 E9F5FE                  	jmp	PUTNEW		;Start over again
 10573                                  
 10574                                  EXITINS:
 10575                                  ENTERINS:
 10576 000015D8 36F616[7905]            	not	byte [SS:INSMODE]
 10577 000015DD E980FE                  	jmp	GETCH
 10578                                  
 10579                                  ;Put a real live ^Z in the buffer (embedded)
 10580                                  CTRLZ:
 10581 000015E0 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10582 000015E2 E9A0FE                          jmp	SAVCH
 10583                                  
 10584                                  ;Output a CRLF
 10585                                  CRLF:
 10586 000015E5 B00D                    	mov	al,c_CR ; 0Dh 
 10587 000015E7 E8C800                  	call	OUTT
 10588 000015EA B00A                    	mov	al,c_LF ; 0Ah
 10589 000015EC E9C300                  	jmp	OUTT
 10590                                  
 10591                                  ;
 10592                                  ;----------------------------------------------------------------------------
 10593                                  ;
 10594                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10595                                  ;
 10596                                  ;	Input or output raw character from console, no echo
 10597                                  ;
 10598                                  ;	ENTRY	DL = -1 if input
 10599                                  ;		   =  output character if output
 10600                                  ;	EXIT	(AL) = input character if input
 10601                                  ;	USES	all
 10602                                  ;
 10603                                  ;----------------------------------------------------------------------------
 10604                                  ; 20/07/2018 - Retro DOS v3.0
 10605                                  
 10606                                  ; 04/05/2019 - Retro DOS v4.0
 10607                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10608                                  
 10609                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10610                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10611                                  
 10612                                  _$RAW_CON_IO:			; System call 6
 10613                                  
 10614 000015EF 88D0                            MOV     AL,DL
 10615 000015F1 3CFF                            CMP     AL,-1
 10616 000015F3 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10617                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10618                                  	;jz	short rci1
 10619                                  	;jmp	short RAWOUT
 10620                                  	; 16/12/202
 10621                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10622                                  	;nop
 10623                                  rci1:	        
 10624                                  			; Get pointer to register save area
 10625 000015F5 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10626 000015FA 31DB                    	XOR     BX,BX
 10627                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10628 000015FC E8BD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10629                                          ;JC	SHORT RET17
 10630 000015FF 72BE                            jc	short FINDOLD_RETN
 10631 00001601 B401                    	MOV     AH,1
 10632 00001603 E8FC2E                          CALL	IOFUNC
 10633 00001606 750B                            JNZ     SHORT RESFLG
 10634 00001608 E8923B                          CALL	SPOOLINT
 10635                                          ;OR	BYTE [ES:DI+16H],40H
 10636 0000160B 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10637 00001610 30C0                            XOR     AL,AL
 10638                                  RET17:
 10639 00001612 C3                              RETN
 10640                                  
 10641                                  RESFLG:
 10642                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10643 00001613 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10644                                  				; Reset user's zero flag
 10645                                  ;RILP:
 10646                                  rci0:
 10647 00001618 E8823B                       	CALL	SPOOLINT
 10648                                  ;
 10649                                  ;----------------------------------------------------------------------------
 10650                                  ;
 10651                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10652                                  ;
 10653                                  ;	Input raw character from console, no echo
 10654                                  ;
 10655                                  ;	ENTRY	none
 10656                                  ;	EXIT	(al) = character
 10657                                  ;	USES	all
 10658                                  ;
 10659                                  ;----------------------------------------------------------------------------
 10660                                  ;
 10661                                  
 10662                                  ;rci0:	invoke	SPOOLINT
 10663                                  
 10664                                  	;entry	$RAW_CON_INPUT
 10665                                  
 10666                                  	; 04/05/2019 - Retro DOS v4.0
 10667                                  
 10668                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10669                                  
 10670                                  _$RAW_CON_INPUT:		; System call 7
 10671 0000161B 53                      	push	bx
 10672 0000161C 31DB                            XOR     BX,BX
 10673                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10674 0000161E E89B20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10675 00001621 5B                              pop	bx
 10676 00001622 72EE                    	JC	SHORT RET17
 10677 00001624 B401                            MOV     AH,1
 10678 00001626 E8D92E                          CALL	IOFUNC
 10679                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10680                                  	;XOR	AH,AH
 10681                                          ;CALL	IOFUNC
 10682                                          ;RETN
 10683 00001629 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10684 0000162B B484                    	MOV	AH,84h
 10685 0000162D CD2A                    	INT	int_IBM  ; int 2Ah
 10686 0000162F EBE7                    	JMP	short rci0
 10687                                  rci5:	
 10688 00001631 30E4                            XOR     AH,AH
 10689                                          ;CALL	IOFUNC
 10690                                          ;RETN
 10691                                  	; 18/12/2022
 10692 00001633 E9CC2E                  	jmp	IOFUNC
 10693                                  
 10694                                  ;       Output the character in AL to stdout
 10695                                  ;
 10696                                  	;entry   RAWOUT
 10697                                  RAWOUT:
 10698 00001636 53                              PUSH    BX
 10699 00001637 BB0100                          MOV     BX,1
 10700                                  
 10701                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10702 0000163A E87F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10703 0000163D 721B                            JC      SHORT RAWRET1
 10704                                  
 10705                                  	;
 10706                                  	; MSDOS 2.11
 10707                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10708                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10709                                          ;PUSH	DS
 10710                                          ;PUSH	SI
 10711                                          ;LDS	SI,[SI+19H]		; output to special?
 10712                                  	;TEST	BYTE [SI+4],ISSPEC
 10713                                  	;POP	SI
 10714                                  	;
 10715                                          
 10716                                  	; MSDOS 3.3 & MSDOS 6.0
 10717                                  	;mov	bx,[si+5]
 10718 0000163F 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10719                                   ;
 10720                                   ; If we are a network handle OR if we are not a local device then go do the
 10721                                   ; output the hard way.
 10722                                   ;	
 10723                                  	;and	bx,8080h
 10724 00001642 81E38080                	AND	BX,sf_isnet+devid_device
 10725                                  	;cmp	bx,80h
 10726 00001646 81FB8000                	CMP	BX,devid_device
 10727 0000164A 7510                    	jnz     short RAWNORM
 10728 0000164C 1E                      	push    ds
 10729                                  	;lds	bx,[si+7]
 10730 0000164D C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10731                                  	;test	byte [bx+4],10h
 10732 00001650 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10733                                  	;
 10734                                  
 10735 00001654 1F                              POP     DS
 10736 00001655 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10737                                  
 10738 00001657 CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10739                                  
 10740                                          ;JMP	SHORT RAWRET
 10741                                  ;RAWNORM:
 10742                                  ;	CALL    RAWOUT3
 10743                                  RAWRET: 
 10744 00001659 F8                      	CLC
 10745                                  RAWRET1:
 10746 0000165A 5B                              POP     BX
 10747                                  RAWRET2:
 10748 0000165B C3                      	RETN
 10749                                  RAWNORM:
 10750 0000165C E80700                  	CALL    RAWOUT3
 10751 0000165F EBF8                    	jmp	short RAWRET
 10752                                  
 10753                                  ;       Output the character in AL to handle in BX
 10754                                  ;
 10755                                  ;	entry   RAWOUT2
 10756                                  
 10757                                  RAWOUT2:
 10758                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10759                                  	;JC	SHORT RET18
 10760 00001661 E85820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10761 00001664 72F5                    	JC	SHORT RAWRET2
 10762                                  RAWOUT3:
 10763 00001666 50                              PUSH    AX
 10764 00001667 EB0C                            JMP     SHORT RAWOSTRT
 10765                                  ROLP:
 10766 00001669 E8313B                          CALL	SPOOLINT
 10767                                  
 10768                                  	; 01/05/2019 - Retro DOS v4.0
 10769                                  
 10770                                  	; MSDOS 6.0
 10771                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10772                                  	; 17/12/2022
 10773 0000166C 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10774                                  	;or	word [ss:DOS34_FLAG],200h
 10775                                  				;AN002; set control break
 10776                                  	;invoke DSKSTATCHK
 10777 00001672 E8A53A                  	call	DSKSTATCHK	;AN002; check control break
 10778                                  RAWOSTRT:
 10779 00001675 B403                            MOV     AH,3
 10780 00001677 E8882E                          CALL    IOFUNC
 10781 0000167A 74ED                            JZ      SHORT ROLP
 10782                                  
 10783                                  	; MSDOS 6.0
 10784                                  ;SR;
 10785                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10786                                  ;the user failed. We do not send a char if this happens. We however return 
 10787                                  ;to the caller with carry clear because this DOS call does not return any
 10788                                  ;status. 
 10789                                  ;
 10790 0000167C 40                      	inc	ax		;fail on I24 if ax = -1
 10791 0000167D 58                      	POP	AX
 10792 0000167E 7405                    	jz	short nosend	;yes, do not send char
 10793 00001680 B402                    	MOV	AH,2
 10794 00001682 E87D2E                  	call	IOFUNC
 10795                                  nosend:
 10796 00001685 F8                      	CLC			; Clear carry indicating successful
 10797 00001686 C3                      	retn
 10798                                  
 10799                                  	; MSDOS 3.3 & MSDOS 2.11
 10800                                  	;POP	AX
 10801                                  	;MOV	AH,2
 10802                                          ;CALL	IOFUNC
 10803                                  	;CLC			; Clear carry indicating successful
 10804                                  ;RET18:    
 10805                                  	;RETN
 10806                                  
 10807                                  ;;10/08/2018
 10808                                  ; 20/07/2018 - Retro DOS v3.0
 10809                                  ; ---------------------------------------------------------------------------
 10810                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10811                                  ; ---------------------------------------------------------------------------
 10812                                  
 10813                                  ; This routine is called at DOS init
 10814                                  
 10815                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10816                                  ;;OUTMES:
 10817                                  ;;	;LODS	CS:BYTE PTR [SI]
 10818                                  ;;	CS	LODSB
 10819                                  ;;	CMP     AL,"$" ; 24h
 10820                                  ;;	JZ	SHORT RET18
 10821                                  ;;	CALL	OUTT
 10822                                  ;;	JMP     SHORT OUTMES
 10823                                  
 10824                                  ; ---------------------------------------------------------------------------
 10825                                  
 10826                                  ; 20/07/2018 - Retro DOS v3.0
 10827                                  
 10828                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10829                                  
 10830                                  ;
 10831                                  ;----------------------------------------------------------------------------
 10832                                  ;
 10833                                  ; Inputs:
 10834                                  ;	AX=0 save the DEVCALL request packet
 10835                                  ;	  =1 restore the DEVCALL request packet
 10836                                  ; Function:
 10837                                  ;	save or restore the DEVCALL packet
 10838                                  ; Returns:
 10839                                  ;	none
 10840                                  ;
 10841                                  ;----------------------------------------------------------------------------
 10842                                  ;
 10843                                  
 10844                                  ; 04/05/2019 - Retro DOS v4.0
 10845                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10846                                  
 10847                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10848                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10849                                  
 10850                                  ; 12/05/2019
 10851                                  
 10852                                  Save_Restore_Packet:
 10853 00001687 1E                      	PUSH	DS
 10854 00001688 06                      	PUSH	ES
 10855 00001689 56                      	PUSH	SI
 10856 0000168A 57                      	PUSH	DI
 10857                                  
 10858                                  	; 16/12/2022
 10859                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10860                                  	; 09/09/2018
 10861 0000168B BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10862 0000168E BE[5A03]                	mov	si,DEVCALL
 10863                                  	;
 10864                                  	; 21/09/2023
 10865 00001691 09C0                    	or	ax,ax
 10866                                  	;CMP	AX,0		; save packet
 10867 00001693 7402                    	JZ	short save_packet ; 16/12/2022
 10868                                  	;je	short set_seg
 10869                                  
 10870                                  	; MSDOS 6.0
 10871                                  restore_packet:
 10872                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10873                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10874                                  	; MSDOS 3.3
 10875                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10876                                  	;mov	di,DEVCALL  ; 09/09/2018
 10877                                  	;
 10878                                  	;JMP	short set_seg
 10879                                  
 10880                                  	; 16/12/2022	
 10881                                  	; 09/09/2018
 10882 00001695 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10883                                  
 10884                                  ; 16/12/2022
 10885                                  %if 0
 10886                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10887                                  	cmp	ax,0		; save packet
 10888                                  	jz	short save_packet
 10889                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10890                                  	mov	di,DEVCALL 
 10891                                  	jmp	short set_seg
 10892                                  
 10893                                  	; MSDOS 6.0
 10894                                  save_packet:
 10895                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10896                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10897                                  	; 09/09/2018
 10898                                  	; MSDOS 3.3
 10899                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10900                                  	;mov	si,DEVCALL ; 09/09/2018
 10901                                  
 10902                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10903                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10904                                  	mov	si,DEVCALL
 10905                                  %endif
 10906                                  
 10907                                  ; 16/12/2022
 10908                                  save_packet:
 10909                                  ;set_seg:
 10910                                  	; MSDOS 3.3
 10911                                  	;mov	ax,cs
 10912                                  
 10913                                  	; MSDOS 6.0
 10914 00001697 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10915                                  
 10916 00001699 8ED8                    	MOV	DS,AX
 10917 0000169B 8EC0                    	MOV	ES,AX
 10918 0000169D B90B00                  	MOV	CX,11		; 11 words to move
 10919 000016A0 F3A5                    	REP	MOVSW
 10920                                  
 10921 000016A2 5F                      	POP	DI
 10922 000016A3 5E                      	POP	SI
 10923 000016A4 07                      	POP	ES
 10924 000016A5 1F                      	POP	DS
 10925 000016A6 C3                      	retn
 10926                                  
 10927                                  ;============================================================================
 10928                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10929                                  ;============================================================================
 10930                                  ; 20/07/2018 - Retro DOS v3.0
 10931                                  ; 01/05/2019 - Retro DOS v4.0
 10932                                  
 10933                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10934                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10935                                  ;hkn;	not valid. 
 10936                                  
 10937                                  ;
 10938                                  ;----------------------------------------------------------------------------
 10939                                  ;
 10940                                  ;**	$STD_CON_INPUT - System Call 1
 10941                                  ;
 10942                                  ;	Input character from console, echo
 10943                                  ;
 10944                                  ;	ENTRY	none
 10945                                  ;	EXIT	(al) = character
 10946                                  ;	USES	ALL
 10947                                  ;
 10948                                  ;----------------------------------------------------------------------------
 10949                                  ;
 10950                                  
 10951                                  _$STD_CON_INPUT:	;System call 1
 10952                                  	
 10953 000016A7 E816FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10954 000016AA 50                      	PUSH	AX
 10955 000016AB E80400                  	CALL	OUTT
 10956 000016AE 58                      	POP	AX
 10957                                  CON_INPUT_RETN:	
 10958 000016AF C3                      	RETN
 10959                                  
 10960                                  ;
 10961                                  ;----------------------------------------------------------------------------
 10962                                  ;
 10963                                  ;**	$STD_CON_OUTPUT - System Call 2
 10964                                  ;
 10965                                  ;	Output character to console
 10966                                  ;
 10967                                  ;	ENTRY	(dl) = character
 10968                                  ;	EXIT	none
 10969                                  ;	USES	all
 10970                                  ;
 10971                                  ;----------------------------------------------------------------------------
 10972                                  ;
 10973                                  
 10974                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10975                                  
 10976                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10977                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10978                                  
 10979                                  _$STD_CON_OUTPUT:	;System call 2
 10980                                  
 10981 000016B0 88D0                    	MOV	AL,DL
 10982                                  OUTT:
 10983 000016B2 3C20                    	CMP	AL,20H ; " "
 10984 000016B4 725C                    	JB	SHORT CTRLOUT
 10985 000016B6 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10986 000016B8 7405                    	JZ	SHORT OUTCH
 10987                                  OUTCHA:	
 10988                                  	;INC	BYTE PTR [CARPOS]
 10989 000016BA 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10990                                  OUTCH:
 10991 000016BF 1E                      	PUSH	DS
 10992 000016C0 56                      	PUSH	SI
 10993                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10994                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10995 000016C1 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 10996                                  	;AND	BYTE [SS:CHARCO],00111111B
 10997                                  	; 01/05/2019 - Retro DOS v4.0
 10998 000016C6 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 10999 000016CC 7505                    	JNZ	SHORT OUTSKIP
 11000                                  
 11001 000016CE 50                      	PUSH	AX
 11002 000016CF E8F93A                  	CALL	STATCHK
 11003 000016D2 58                      	POP	AX
 11004                                  OUTSKIP:
 11005 000016D3 E860FF                  	CALL	RAWOUT				;output the character
 11006                                  
 11007 000016D6 5E                      	POP	SI
 11008 000016D7 1F                      	POP	DS
 11009                                  
 11010                                  	;TEST	BYTE PTR [PFLAG],-1
 11011                                  	;retz
 11012 000016D8 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11013 000016DE 74CF                    	JZ	SHORT CON_INPUT_RETN
 11014                                  
 11015 000016E0 53                      	PUSH	BX
 11016 000016E1 1E                      	PUSH	DS
 11017 000016E2 56                      	PUSH	SI
 11018 000016E3 BB0100                  	MOV	BX,1
 11019                                  	; 20/07/2018 - Retro DOS v3.0
 11020                                  	; MSDOS 3.3
 11021                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11022 000016E6 E8D31F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11023                                  					;hkn; to sft entry
 11024 000016E9 7224                    	JC	SHORT TRIPOPJ
 11025                                  
 11026                                  	; 01/05/2019 - Retro DOS v4.0
 11027                                  
 11028                                  	;mov	bx,[si+5]
 11029 000016EB 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11030                                  	;test	bx,8000h
 11031                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11032 000016EE F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11033 000016F1 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11034                                  	;;test	bx,80h
 11035                                  	;TEST	BX,devid_device 		; output to file?
 11036 000016F3 F6C380                  	test	bl,devid_device ; 80h
 11037 000016F6 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11038                                  	; 14/03/2018
 11039                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11040                                  	;jc	short TRIPOPJ
 11041                                  	; MSDOS 2.11
 11042                                  	;test	byte [SI+18H], 80h
 11043                                  	;jz	short TRIPOPJ
 11044 000016F8 BB0400                  	MOV	BX,4
 11045 000016FB E8BE1F                  	CALL	GET_IO_SFT
 11046 000016FE 720F                    	JC	SHORT TRIPOPJ
 11047                                  	;;test	word [si+5], 800h
 11048                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11049                                  	;test	byte [si+6],8 ; 08/11/2022
 11050 00001700 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11051                                  						; StdPrn redirected?
 11052                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11053                                  	;jz	LISSTRT2 ; 10/08/2018 
 11054                                  	; 16/12/2022
 11055 00001704 7503                    	jnz	short outch1
 11056 00001706 E98700                  	jmp	LISSTRT2
 11057                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11058                                  	;jz	short LISSTRT2J
 11059                                  outch1:
 11060                                  	;MOV	BYTE [PFLAG],0			
 11061 00001709 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11062                                  	; MSDOS 2.11
 11063                                  	;mov	bx,4
 11064                                  	;jmp	short LISSTRT2
 11065                                  	
 11066                                  TRIPOPJ:
 11067                                  	; 20/07/2018
 11068 0000170F E98100                  	JMP	TRIPOP
 11069                                  
 11070                                  	; 16/12/2022
 11071                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11072                                  ;LISSTRT2J:
 11073                                  ;	JMP	LISSTRT2
 11074                                  
 11075                                  CTRLOUT:
 11076 00001712 3C0D                    	CMP	AL,c_CR ; 0Dh
 11077 00001714 7420                    	JZ	SHORT ZERPOS
 11078 00001716 3C08                    	CMP	AL,c_BS ; 8
 11079 00001718 7424                    	JZ	SHORT BACKPOS
 11080 0000171A 3C09                    	CMP	AL,c_HT ; 9
 11081 0000171C 75A1                    	JNZ	SHORT OUTCH
 11082                                  	;MOV	AL,[CARPOS]
 11083 0000171E 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11084 00001722 0CF8                    	OR	AL,0F8H
 11085 00001724 F6D8                    	NEG	AL
 11086                                  TAB:
 11087 00001726 51                      	PUSH	CX
 11088 00001727 88C1                    	MOV	CL,AL
 11089 00001729 B500                    	MOV	CH,0
 11090 0000172B E307                    	JCXZ	POPTAB
 11091                                  TABLP:
 11092 0000172D B020                    	MOV	AL," "
 11093 0000172F E880FF                  	CALL	OUTT
 11094 00001732 E2F9                    	LOOP	TABLP
 11095                                  POPTAB:
 11096 00001734 59                      	POP	CX
 11097                                  
 11098 00001735 C3                      	RETN
 11099                                  
 11100                                  ZERPOS:
 11101                                  	;MOV	BYTE PTR [CARPOS],0
 11102 00001736 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11103                                  	; 10/08/2018
 11104 0000173C EB81                    	JMP	short OUTCH ; 04/05/2019
 11105                                  	
 11106                                  	; 18/12/2022
 11107                                  ;OUTJ:	
 11108                                  	;JMP	OUTT
 11109                                  
 11110                                  BACKPOS:
 11111                                  	;DEC	BYTE PTR [CARPOS]
 11112 0000173E 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11113 00001743 E979FF                  	JMP	OUTCH
 11114                                  
 11115                                  BUFOUT:
 11116 00001746 3C20                    	CMP	AL," "
 11117 00001748 7315                    	JAE	SHORT OUTJ		;Normal char
 11118 0000174A 3C09                    	CMP	AL,9
 11119 0000174C 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11120                                  	;DOS 3.3  7/14/86
 11121 0000174E 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11122 00001750 740D                    	JZ	short CTRLU
 11123 00001752 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11124 00001754 7409                    	JZ	short CTRLU
 11125                                  NOT_CTRLU:
 11126                                  	;DOS 3.3  7/14/86
 11127 00001756 50                      	PUSH	AX
 11128 00001757 B05E                    	MOV	AL,"^"
 11129 00001759 E856FF                  	CALL	OUTT		;Print '^' before control chars
 11130 0000175C 58                      	POP	AX
 11131 0000175D 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11132                                  CTRLU:
 11133                                  	;CALL	OUTT
 11134                                  	; 18/12/2022
 11135                                  OUTJ:
 11136 0000175F E950FF                  	jmp	OUTT
 11137                                  ;BUFOUT_RETN:
 11138                                  	;RETN
 11139                                  
 11140                                  ;
 11141                                  ;----------------------------------------------------------------------------
 11142                                  ;
 11143                                  ;**	$STD_AUX_INPUT - System Call 3
 11144                                  ;
 11145                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11146                                  ;
 11147                                  ;	ENTRY	none
 11148                                  ;	EXIT	(al) = character
 11149                                  ;	USES	all
 11150                                  ;
 11151                                  ;----------------------------------------------------------------------------
 11152                                  ;
 11153                                  
 11154                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11155                                  
 11156                                  _$STD_AUX_INPUT:	;System call 3
 11157                                  
 11158 00001762 E8663A                  	CALL	STATCHK
 11159 00001765 BB0300                  	MOV	BX,3
 11160 00001768 E8511F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11161                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11162                                  	;retc
 11163                                  	; 16/12/2022
 11164                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11165                                  	;JC	SHORT BUFOUT_RETN
 11166                                  	;JMP	SHORT TAISTRT
 11167                                  	; 07/12/2022
 11168 0000176B 7304                    	jnc	SHORT TAISTRT
 11169 0000176D C3                      	retn	
 11170                                  
 11171                                  AUXILP:
 11172 0000176E E82C3A                  	CALL	SPOOLINT
 11173                                  TAISTRT:
 11174 00001771 B401                    	MOV	AH,1
 11175 00001773 E88C2D                  	CALL	IOFUNC
 11176 00001776 74F6                    	JZ	SHORT AUXILP
 11177 00001778 30E4                    	XOR	AH,AH
 11178                                  	; 16/12/2022
 11179                                  	;CALL	IOFUNC
 11180                                  	;RETN
 11181                                  	; 07/12/2022
 11182 0000177A E9852D                  	jmp	IOFUNC
 11183                                  
 11184                                  ;
 11185                                  ;----------------------------------------------------------------------------
 11186                                  ;
 11187                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11188                                  ;
 11189                                  ;	ENTRY	(dl) = character
 11190                                  ;	EXIT	none
 11191                                  ;	USES	all
 11192                                  ;
 11193                                  ;----------------------------------------------------------------------------
 11194                                  ;
 11195                                  
 11196                                  _$STD_AUX_OUTPUT:	;System call 4
 11197                                  
 11198 0000177D 53                      	PUSH	BX
 11199 0000177E BB0300                  	MOV	BX,3
 11200 00001781 EB04                    	JMP	SHORT SENDOUT
 11201                                  
 11202                                  ;
 11203                                  ;----------------------------------------------------------------------------
 11204                                  ;
 11205                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11206                                  ;
 11207                                  ;	ENTRY	(dl) = character
 11208                                  ;	EXIT	none
 11209                                  ;	USES	all
 11210                                  ;
 11211                                  ;----------------------------------------------------------------------------
 11212                                  ;
 11213                                  
 11214                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11215                                  
 11216 00001783 53                      	PUSH	BX
 11217 00001784 BB0400                  	MOV	BX,4
 11218                                  
 11219                                  SENDOUT:
 11220 00001787 88D0                    	MOV	AL,DL
 11221 00001789 50                      	PUSH	AX
 11222 0000178A E83E3A                  	CALL	STATCHK
 11223 0000178D 58                      	POP	AX
 11224 0000178E 1E                      	PUSH	DS
 11225 0000178F 56                      	PUSH	SI
 11226                                  LISSTRT2:
 11227 00001790 E8CEFE                  	CALL	RAWOUT2
 11228                                  TRIPOP:
 11229 00001793 5E                      	POP	SI
 11230 00001794 1F                      	POP	DS
 11231 00001795 5B                      	POP	BX
 11232                                  SCIS_RETN:	; 20/07/2018
 11233 00001796 C3                      	RETN
 11234                                  ;
 11235                                  ;----------------------------------------------------------------------------
 11236                                  ;
 11237                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11238                                  ;
 11239                                  ;	Check console input status
 11240                                  ;
 11241                                  ;	ENTRY	none
 11242                                  ;	EXIT	AL = -1 character available, = 0 no character
 11243                                  ;	USES	all
 11244                                  ;
 11245                                  ;----------------------------------------------------------------------------
 11246                                  ;
 11247                                  
 11248                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11249                                  
 11250 00001797 E8313A                  	CALL	STATCHK
 11251 0000179A B000                    	MOV	AL,0		; no xor!!
 11252                                  	;retz
 11253 0000179C 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11254 0000179E 0CFF                    	OR	AL,-1
 11255                                  ;SCIS_RETN:
 11256 000017A0 C3                      	RETN
 11257                                  
 11258                                  ;
 11259                                  ;----------------------------------------------------------------------------
 11260                                  ;
 11261                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11262                                  ;
 11263                                  ;	Flush console input buffer and perform call in AL
 11264                                  ;
 11265                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11266                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11267                                  ;		return arguments for the fcn supplied in (AL)
 11268                                  ;	USES	all
 11269                                  ;
 11270                                  ;----------------------------------------------------------------------------
 11271                                  ;
 11272                                  
 11273                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11274                                  
 11275 000017A1 50                      	PUSH	AX
 11276 000017A2 52                      	PUSH	DX
 11277 000017A3 31DB                    	XOR	BX,BX
 11278 000017A5 E8141F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11279                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11280 000017A8 7205                    	JC	SHORT BADJFNCON
 11281 000017AA B404                    	MOV	AH,4
 11282 000017AC E8532D                  	CALL	IOFUNC
 11283                                  
 11284                                  BADJFNCON:
 11285 000017AF 5A                      	POP	DX
 11286 000017B0 58                      	POP	AX
 11287 000017B1 88C4                    	MOV	AH,AL
 11288 000017B3 3C01                    	CMP	AL,1
 11289 000017B5 7413                    	JZ	SHORT REDISPJ
 11290 000017B7 3C06                    	CMP	AL,6
 11291 000017B9 740F                    	JZ	SHORT REDISPJ
 11292 000017BB 3C07                    	CMP	AL,7
 11293 000017BD 740B                    	JZ	SHORT REDISPJ
 11294 000017BF 3C08                    	CMP	AL,8
 11295 000017C1 7407                    	JZ	SHORT REDISPJ
 11296 000017C3 3C0A                    	CMP	AL,10
 11297 000017C5 7403                    	JZ	SHORT REDISPJ
 11298 000017C7 B000                    	MOV	AL,0
 11299 000017C9 C3                      	RETN
 11300                                  
 11301                                  REDISPJ:
 11302 000017CA FA                      	CLI
 11303                                  	;transfer REDISP
 11304 000017CB E9BEEB                  	JMP	REDISP
 11305                                  
 11306                                  ;============================================================================
 11307                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11308                                  ;============================================================================
 11309                                  ; 20/07/2018 - Retro DOS v3.0
 11310                                  ; 17/05/2019 - Retro DOS v4.0
 11311                                  
 11312                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11313                                  ;
 11314                                  ;	$GET_FCB_POSITION
 11315                                  ;	$FCB_DELETE
 11316                                  ;	$GET_FCB_FILE_LENGTH
 11317                                  ;	$FCB_CLOSE
 11318                                  ;	$FCB_RENAME
 11319                                  ;	SaveFCBInfo
 11320                                  ;	ResetLRU
 11321                                  ;	SetOpenAge
 11322                                  ;	LRUFCB
 11323                                  ;	FCBRegen
 11324                                  ;	BlastSFT
 11325                                  ;	CheckFCB
 11326                                  ;	SFTFromFCB
 11327                                  ;	FCBHardErr
 11328                                  ;
 11329                                  ;	Revision history:
 11330                                  ;
 11331                                  ;		Created: ARR 4 April 1983"
 11332                                  ;			 MZ  6 June  1983 completion of functions
 11333                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11334                                  ;					  times.  Change so successive closes work by
 11335                                  ;					  always returning OK.	Also, detect I/O to
 11336                                  ;					  already closed FCB and return EOF.
 11337                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11338                                  ;					  out of sft into FCB for reconnection
 11339                                  ;
 11340                                  ;		A000	 version 4.00  Jan. 1988
 11341                                  
 11342                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11343                                  ;----------------------------------------------------------------------------
 11344                                  ;
 11345                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11346                                  ;	extent and next record field and set the random record field to point
 11347                                  ;	to that record
 11348                                  ;
 11349                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11350                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11351                                  ;   Registers modified: all
 11352                                  ;
 11353                                  ;----------------------------------------------------------------------------
 11354                                  ;
 11355                                  
 11356                                  _$GET_FCB_POSITION:
 11357 000017CE E8F204                  	call	GetExtended		; point to FCB
 11358 000017D1 E8C204                  	call	GetExtent		; DX:AX is current record
 11359                                  	;mov	[si+21h],ax
 11360 000017D4 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11361                                  	;mov	[si+23h],dl
 11362 000017D7 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11363                                  	;cmp	word [si+0Eh],64
 11364 000017DA 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11365 000017DE 7303                    	JAE	short GetFCBBye
 11366                                  	;mov	[si+24h],dh
 11367 000017E0 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11368                                  GoodPath:	; 16/12/2022
 11369                                  GetFCBBye:
 11370 000017E3 E97FEE                  	jmp	FCB_RET_OK
 11371                                  
 11372                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11373                                  ;----------------------------------------------------------------------------
 11374                                  ;
 11375                                  ;**	$FCB_Delete - Delete from FCB Template
 11376                                  ;
 11377                                  ;	given an FCB, remove all directory entries in the current
 11378                                  ;	directory that have names that match the FCB's ?  marks.
 11379                                  ;
 11380                                  ;	ENTRY	(DS:DX) = address of FCB
 11381                                  ;	EXIT	entries matching the FCB are deleted
 11382                                  ;		(al) = ff iff no entries were deleted
 11383                                  ;	USES	all
 11384                                  ;
 11385                                  ;----------------------------------------------------------------------------
 11386                                  ;
 11387                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11388                                  
 11389                                  _$FCB_DELETE:		; System call 19
 11390                                  					; OpenBuf is in DOSDATA
 11391 000017E6 BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11392                                  
 11393 000017E9 E88D53                  	call	TransFCB		; convert FCB to path
 11394 000017EC 7207                    	JC	short BadPath 		; signal no deletions
 11395                                  
 11396 000017EE 16                      	push	SS
 11397 000017EF 1F                      	pop	DS			; SS is DOSDATA
 11398                                  
 11399 000017F0 E89D0D                  	call	DOS_DELETE		; wham
 11400                                  	;JC	short BadPath
 11401                                  	; 16/12/2022
 11402 000017F3 73EE                    	jnc 	short GoodPath
 11403                                  ;GoodPath:
 11404                                  ;	;jmp	FCB_RET_OK		; do a good return
 11405                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11406                                  ;	jmp	short GetFCBBye
 11407                                  
 11408                                  BadPath:
 11409                                  	; Error code is in AX
 11410                                  
 11411 000017F5 E970EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11412                                  
 11413                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11414                                  ;----------------------------------------------------------------------------
 11415                                  ;
 11416                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11417                                  ;	file in records (rounded up if partial).
 11418                                  ;
 11419                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11420                                  ;   Outputs:	Random record field updated to reflect the number of records
 11421                                  ;   Registers modified: all
 11422                                  ;
 11423                                  ;----------------------------------------------------------------------------
 11424                                  ;
 11425                                  
 11426                                  _$GET_FCB_FILE_LENGTH:
 11427                                  
 11428 000017F8 E8C804                  	call	GetExtended		; get real FCB pointer
 11429                                  					; DX points to Input FCB
 11430                                  
 11431                                  					; OpenBuf is in DOSDATA
 11432 000017FB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11433                                  
 11434 000017FE 1E                      	push	ds			; save pointer to true FCB
 11435 000017FF 56                      	push	si
 11436 00001800 E87653                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11437 00001803 5E                      	pop	si
 11438 00001804 1F                      	pop	ds
 11439 00001805 72EE                    	JC	short BadPath
 11440 00001807 1E                      	push	ds			; save pointer
 11441 00001808 56                      	push	si
 11442 00001809 16                      	push	ss		
 11443 0000180A 1F                      	pop	ds
 11444 0000180B E89211                  	call	GET_FILE_INFO		; grab the info
 11445 0000180E 5E                      	pop	si			; get pointer back
 11446 0000180F 1F                      	pop	ds
 11447 00001810 72E3                    	JC	short BadPath 		; invalid something
 11448 00001812 89DA                    	MOV	DX,BX			; get high order size
 11449 00001814 89F8                    	MOV	AX,DI			; get low order size
 11450                                  	;mov	bx,[si+0Eh]
 11451 00001816 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11452 00001819 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11453 0000181B 7503                    	JNZ	short GetSize 		; not empty
 11454 0000181D BB8000                  	MOV	BX,128
 11455                                  GetSize:
 11456 00001820 89C7                    	MOV	DI,AX			; save low order word
 11457 00001822 89D0                    	MOV	AX,DX			; move high order for divide
 11458 00001824 31D2                    	XOR	DX,DX			; clear out high
 11459 00001826 F7F3                    	DIV	BX			; wham
 11460 00001828 50                      	PUSH	AX			; save dividend
 11461 00001829 89F8                    	MOV	AX,DI			; get low order piece
 11462 0000182B F7F3                    	DIV	BX			; wham
 11463 0000182D 89D1                    	MOV	CX,DX			; save remainder
 11464 0000182F 5A                      	POP	DX			; get high order dividend
 11465 00001830 E306                    	JCXZ	LengthStore		; no roundup
 11466 00001832 83C001                  	ADD	AX,1
 11467 00001835 83D200                  	ADC	DX,0			; 32-bit increment
 11468                                  LengthStore:
 11469                                  	;mov	[si+21h],ax
 11470 00001838 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11471                                  	;mov	[si+23h],dl
 11472 0000183B 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11473 0000183E 08F6                    	OR	DH,DH
 11474 00001840 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11475                                  	;mov	[si+24h],dh
 11476 00001842 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11477                                  	; 16/12/2022
 11478                                  GoodRet:
 11479                                  	;jmp	FCB_RET_OK
 11480 00001845 EB9C                    	jmp	short GoodPath
 11481                                  
 11482                                  ;Break <$FCB_Close - close a file>
 11483                                  ;----------------------------------------------------------------------------
 11484                                  ;
 11485                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11486                                  ;	as the FCB may be used for further I/O
 11487                                  ;
 11488                                  ;   Inputs:	DS:DX point to FCB
 11489                                  ;   Outputs:	AL = FF if file was not found on disk
 11490                                  ;   Registers modified: all
 11491                                  ;
 11492                                  ;----------------------------------------------------------------------------
 11493                                  ;
 11494                                  
 11495                                  _$FCB_CLOSE:		; System call 16
 11496                                  
 11497 00001847 30C0                    	XOR	AL,AL			; default search attributes
 11498 00001849 E87704                  	call	GetExtended		; DS:SI point to real FCB
 11499 0000184C 7403                    	JZ	short NoAttr		; not extended
 11500 0000184E 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11501                                  NoAttr:
 11502                                  					; SS override
 11503 00001851 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11504 00001855 E8D903                  	call	SFTFromFCB
 11505 00001858 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11506                                  
 11507                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11508                                  	; there is no need to set the SFT's attribute.
 11509                                  
 11510                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11511                                  	;;; done
 11512                                  
 11513                                  	;mov	al,[es:di+4]
 11514 0000185A 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11515 0000185E 30E4                    	XOR	AH,AH
 11516 00001860 50                      	PUSH	AX
 11517                                  
 11518                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11519                                  	;;; done
 11520                                  
 11521 00001861 E8415B                  	call	CheckShare
 11522 00001864 7508                    	JNZ	short NoStash
 11523 00001866 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11524                                  	;mov	[es:di+4],al
 11525 0000186A 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11526                                  NoStash:
 11527                                  	;mov	ax,[si+14h]
 11528 0000186E 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11529                                  	;mov	[es:di+0Fh],ax
 11530 00001871 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11531                                  	;mov	ax,[si+16h]
 11532 00001875 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11533                                  	;mov	[es:di+0Dh],ax
 11534 00001878 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11535                                  	;mov	ax,[si+10h]
 11536 0000187C 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11537                                  	;mov	[es:di+11h],ax
 11538 0000187F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11539                                  	;mov	ax,[si+12h]
 11540 00001883 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11541                                  	;mov	[es:di+13h],ax
 11542 00001886 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11543                                  	;or	word [es:di+5],4000h
 11544                                  	; 17/12/2022
 11545 0000188A 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11546                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11547 0000188F 16                      	push	ss
 11548 00001890 1F                      	pop	ds
 11549 00001891 E80517                  	call	DOS_CLOSE	; wham
 11550 00001894 C43E[9E05]              	LES	DI,[THISSFT]
 11551                                  
 11552                                  	;;; 9/8/86 F.C. restore SFT attribute
 11553 00001898 59                      	POP	CX
 11554                                  	;mov	[es:di+4],cl
 11555 00001899 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11556                                  	;;; 9/8/86 F.C. restore SFT attribute
 11557                                  
 11558 0000189D 9C                      	PUSHF
 11559                                  	;test	word [es:di],0FFFFh
 11560                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11561                                  				; zero ref count gets blasted
 11562 0000189E 26833D00                	cmp	word [ES:DI],0
 11563 000018A2 7507                    	jnz     short CloseOK
 11564 000018A4 50                      	PUSH	AX
 11565 000018A5 B04D                    	MOV	AL,'M'
 11566 000018A7 E8FC02                  	call	BlastSFT
 11567 000018AA 58                      	POP	AX
 11568                                  CloseOK:
 11569 000018AB 9D                      	POPF
 11570 000018AC 7397                    	JNC	short GoodRet
 11571                                  	;cmp	al,6
 11572 000018AE 3C06                    	CMP	AL,error_invalid_handle
 11573 000018B0 7493                    	JZ	short GoodRet
 11574                                  	;mov	al,2
 11575 000018B2 B002                    	MOV	AL,error_file_not_found
 11576                                  fren90:
 11577                                  	; 16/12/2022
 11578                                  fcb_close_err:
 11579 000018B4 E9B1ED                  	jmp	FCB_RET_ERR
 11580                                  
 11581                                  ;
 11582                                  ;----------------------------------------------------------------------------
 11583                                  ;
 11584                                  ;**	$FCB_Rename - Rename a File
 11585                                  ;
 11586                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11587                                  ;	multiple files copying from the meta characters.
 11588                                  ;
 11589                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11590                                  ;		    name of the files to be renamed. Starting at offset 11h
 11591                                  ;		    in the FCB is the destination name.
 11592                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11593                                  ;		AL = FF -> some files may have been renamed but:
 11594                                  ;			rename to existing file or source file not found
 11595                                  ;	USES	ALL
 11596                                  ;
 11597                                  ;----------------------------------------------------------------------------
 11598                                  ;
 11599                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11600                                  
 11601                                  _$FCB_RENAME:		; System call 23
 11602                                  
 11603 000018B7 E80904                  	call	GetExtended		; get pointer to real FCB
 11604 000018BA 52                      	push	dx
 11605 000018BB 8A04                    	MOV	AL,[SI] 		; get drive byte
 11606 000018BD 83C610                  	ADD	SI,10h			; point to destination
 11607                                  
 11608                                  					; RenBuf is in DOSDATA
 11609 000018C0 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11610 000018C3 FF34                    	push	word [SI]
 11611 000018C5 1E                      	push	ds
 11612 000018C6 57                      	push	di			; save source pointer for TransFCB
 11613 000018C7 8804                    	MOV	[SI],AL			; drop in real drive
 11614 000018C9 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11615 000018CB E8AB52                  	call	TransFCB		; munch this pathname
 11616 000018CE 5E                      	pop	si
 11617 000018CF 1F                      	pop	ds	
 11618 000018D0 8F04                    	pop	WORD [SI]		; get path back
 11619 000018D2 5A                      	pop	dx			; Original FCB pointer
 11620 000018D3 72DF                    	JC	short fren90		; bad path -> error
 11621                                  
 11622                                  					; SS override for WFP_Start & Ren_WFP
 11623 000018D5 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11624 000018DA 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11625                                  
 11626                                  					; OpenBuf is in DOSDATA
 11627 000018DF BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11628 000018E2 E89452                  	call	TransFCB		; wham
 11629                                  					; NOTE that this call is pointing
 11630                                  					;  back to the ORIGINAL FCB so
 11631                                  					;  SATTRIB gets set correctly
 11632 000018E5 72CD                    	JC	short fren90		; error
 11633 000018E7 E8840E                  	call	DOS_RENAME
 11634 000018EA 72C8                    	JC	short fren90
 11635                                  	; 16/12/2022
 11636 000018EC E976ED                  	jmp	FCB_RET_OK
 11637                                  	
 11638                                  ;	Error -
 11639                                  ;
 11640                                  ;	(al) = error code
 11641                                  
 11642                                  	; 16/12/2022
 11643                                  ;fren90:	
 11644                                  ;	;jmp	FCB_RET_ERR
 11645                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11646                                  ;	jmp	short fcb_close_err
 11647                                  
 11648                                  ;Break <Misbehavior fixers>
 11649                                  ;
 11650                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11651                                  ;   user's space so he may move them at will. Second, they have a small
 11652                                  ;   reserved area that may be used for system information. Third, there was
 11653                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11654                                  ;   usage.
 11655                                  ;
 11656                                  ;   This results in the following misbehavior:
 11657                                  ;
 11658                                  ;	infinite opens of the same file:
 11659                                  ;
 11660                                  ;	While (TRUE) {			While (TRUE) {
 11661                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11662                                  ;	    Read (FCB); 		    Write (FCB);
 11663                                  ;	    }				    }
 11664                                  ;
 11665                                  ;	infinite opens of different files:
 11666                                  ;
 11667                                  ;	While (TRUE) {			While (TRUE) {
 11668                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11669                                  ;	    Read (FCB); 		    Write (FCB);
 11670                                  ;	    }				    }
 11671                                  ;
 11672                                  ;	multiple closes of the same file:
 11673                                  ;
 11674                                  ;	FCBOpen (FCB);
 11675                                  ;	while (TRUE)
 11676                                  ;	    FCBClose (FCB);
 11677                                  ;
 11678                                  ;	I/O after closing file:
 11679                                  ;
 11680                                  ;	FCBOpen (FCB);
 11681                                  ;	while (TRUE) {
 11682                                  ;	    FCBWrite (FCB);
 11683                                  ;	    FCBClose (FCB);
 11684                                  ;	    }
 11685                                  ;
 11686                                  ;   The following is am implementation of a methodology for emulating the
 11687                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11688                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11689                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11690                                  ;   the local machine.
 11691                                  ;
 11692                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11693                                  ;   structures depending on the file itself and the state of operations of the
 11694                                  ;   OS. The information contained in this reserved field is enough to
 11695                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11696                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11697                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11698                                  ;
 11699                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11700                                  ;
 11701                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11702                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11703                                  ;   regenerated.
 11704                                  ;
 11705                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11706                                  ;   longer available. We can make up for this by using the following
 11707                                  ;   information:
 11708                                  ;
 11709                                  ;	The Drive number (from the DPB).
 11710                                  ;	The physical sector of the directory that contains the entry.
 11711                                  ;	The relative position of the entry in the sector.
 11712                                  ;	The first cluster field.
 11713                                  ;	The last used SFT.
 11714                                  ;      OR In the case of a device FCB
 11715                                  ;	The low 6 bits of sf_flags (indicating device type)
 11716                                  ;	The pointer to the device header
 11717                                  ;
 11718                                  ;   We read in the particular directory sector and examine the indicated
 11719                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11720                                  ;
 11721                                  ;   Some key items need to be remembered:
 11722                                  ;
 11723                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11724                                  ;	information. We enforce good behavior on the FCBs.
 11725                                  ;
 11726                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11727                                  ;	open VCs. The VCs may be closed only at process termination.
 11728                                  ;
 11729                                  ;	If this is not an installed version of the DOS, file sharing will
 11730                                  ;	always be present.
 11731                                  ;
 11732                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11733                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11734                                  ;
 11735                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11736                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11737                                  ;	proper OI record.
 11738                                  ;
 11739                                  ;   The test bits are:
 11740                                  ;
 11741                                  ;	00 -> local file
 11742                                  ;	40 -> sharing local
 11743                                  ;	80 -> network
 11744                                  ;	C0 -> local device
 11745                                  
 11746                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11747                                  ;----------------------------------------------------------------------------
 11748                                  ;
 11749                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11750                                  ;	pieces of information into the FCB to allow for subsequent
 11751                                  ;	regeneration. Poke LRU also.
 11752                                  ;
 11753                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11754                                  ;		DS:SI point to the FCB (not an extended one)
 11755                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11756                                  ;		DS:SI preserved
 11757                                  ;		ES:DI point to sft
 11758                                  ;   Registers modified: All
 11759                                  ;
 11760                                  ;
 11761                                  ;----------------------------------------------------------------------------
 11762                                  ;
 11763                                  
 11764                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11765                                  
 11766                                  SaveFCBInfo:
 11767                                  
 11768 000018EF 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11769 000018F4 E8B4F9                  	call	IsSFTNet
 11770 000018F7 740B                    	JZ	short SaveLocal		; if not network then save local info
 11771                                  ;
 11772                                  ;----- In net support -----
 11773                                  ;
 11774                                  	; 17/05/2019 - Retro DOS v4.0
 11775                                  
 11776                                  	; MSDOS 3.3
 11777                                  	;;mov	ax,[es:di+1Dh]
 11778                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11779                                  	;;mov	[si+1Ah],ax
 11780                                  	;mov	[si+fcb_net_handle],ax
 11781                                  	;push	es
 11782                                  	;push	di
 11783                                  	;;les	di,[es:di+19h]
 11784                                  	;LES	DI,[ES:DI+sf_netid]
 11785                                  	;;mov	[si+1Ch],di
 11786                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11787                                  	;;mov 	[si+1Eh],es
 11788                                  	;MOV	[SI+fcb_netID+2],ES
 11789                                  	;pop	di
 11790                                  	;pop	es
 11791                                  
 11792                                  	; MSDOS 6.0
 11793                                  	;mov	ax,[es:di+0Bh]
 11794 000018F9 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11795                                  	;mov	[si+1Ch],ax
 11796 000018FD 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11797                                  	
 11798                                  	;mov	bl,80h
 11799 00001900 B380                    	MOV	BL,FCBNETWORK
 11800                                  ;
 11801                                  ;----- END In net support -----
 11802                                  ;
 11803 00001902 EB65                    	jmp	SHORT SaveSFN
 11804                                  
 11805                                  SaveLocal:
 11806                                  	;IF	Installed
 11807 00001904 E89E5A                  	call	CheckShare
 11808                                  	;JZ	short SaveNoShare	; no sharer
 11809                                  	;JMP	short SaveShare		; sharer present
 11810                                  	; 16/12/2022
 11811                                  	; 28/07/2019
 11812 00001907 755B                    	jnz	short SaveShare
 11813                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11814                                  	;JZ	short SaveNoShare	; no sharer
 11815                                  	;JMP	short SaveShare		; sharer present
 11816                                  
 11817                                  SaveNoShare:
 11818                                  	;;test 	word [es:di+5],80h
 11819                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11820 00001909 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11821 0000190E 7542                    	JNZ	short SaveNoShareDev	; Device
 11822                                  
 11823                                  	; Save no sharing local file information
 11824                                  
 11825                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11826                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11827 00001910 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11828                                  	;mov	[si+1Dh],ax
 11829 00001914 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11830                                  
 11831                                  	; MSDOS 6.0
 11832                                  
 11833                                  	;SR; Store high byte of directory sector
 11834                                  	;mov	ax,[es:di+1Dh]
 11835 00001917 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11836                                  	
 11837                                  	; SR;
 11838                                  	; We have to store the read-only and archive attributes of the file.
 11839                                  	; We extract it from the SFT and store it in the top two bits of the 
 11840                                  	; sector number ( sector number == 22 bits only )
 11841                                  
 11842                                  	;mov	bl,[es:di+4]
 11843 0000191B 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11844 0000191F 88DF                    	mov	bh,bl
 11845 00001921 D0CB                    	ror	bl,1
 11846 00001923 D0E7                    	shl	bh,1
 11847 00001925 08FB                    	or	bl,bh
 11848 00001927 80E3C0                  	and	bl,0C0h
 11849 0000192A 08D8                    	or	al,bl
 11850                                  	;mov	[si+18h],al ; 08/11/2022
 11851 0000192C 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11852                                  
 11853                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11854                                  	;mov	al,[es:di+1Fh]
 11855 0000192F 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11856                                  	;mov	[si+1Fh],al
 11857 00001933 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11858                                  	;mov	ax,[es:di+0Bh]
 11859 00001936 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11860                                  	;mov	[si+1Bh],ax
 11861 0000193A 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11862 0000193D B300                    	MOV	BL,0
 11863                                  
 11864                                  	; Create the bits field from the dirty/device bits of the flags word 
 11865                                  	; and the mode byte
 11866                                  
 11867                                  SetFCBBits:
 11868                                  	;mov	ax,[es:di+5]
 11869 0000193F 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11870 00001943 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11871                                  	;or	al,[es:di+2]
 11872 00001945 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11873                                  	;mov	[si+1Ah], al
 11874 00001949 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11875                                  
 11876                                  	; MSDOS 6.0
 11877                                  	
 11878                                  	; SR;
 11879                                  	; Check if we came here for local file or device. If for local file, 
 11880                                  	; skip setting of SFT index
 11881                                  	
 11882 0000194C 08DB                    	or	bl,bl
 11883 0000194E 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11884                                  
 11885 00001950 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11886                                  
 11887                                  	; Save no sharing local device information
 11888                                  
 11889                                  SaveNoShareDev:
 11890                                  	;mov	ax,[es:di+7]
 11891 00001952 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11892                                  	;mov	[si+1Ah],ax
 11893 00001956 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11894                                  	;mov	ax,[es:di+9]
 11895 00001959 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11896 0000195D 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11897                                  	;mov	bl,40h
 11898 00001960 B340                    	MOV	BL,FCBDEVICE
 11899                                  	; 28/12/2022
 11900 00001962 EBDB                    	JMP	short SetFCBBits	; go and save SFN
 11901                                  
 11902                                  SaveShare:
 11903                                  	;ENDIF
 11904                                  
 11905                                  ;----- In share support -----
 11906                                  
 11907                                  	;call	far [ss:ShSave]
 11908 00001964 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11909                                  
 11910                                  ;----- end in share support -----
 11911                                  
 11912                                  	; 17/05/2019
 11913                                  
 11914                                  SaveSFN:
 11915                                  	;lea	ax,[di-6]
 11916 00001969 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11917                                  	
 11918                                  	; Adjust for offset to table.
 11919                                  	
 11920 0000196C 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11921                                  
 11922 00001971 53                      	push	bx			;bx = FCB type (net/Share or local)
 11923                                  	;;mov	bl,53 ; MSDOS 3.3
 11924                                  	;mov	bl,59 ; MSDOS 6.0
 11925 00001972 B33B                    	MOV	BL,SF_ENTRY.size
 11926 00001974 F6F3                    	DIV	BL
 11927                                  	;mov	[si+18h],al
 11928 00001976 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11929 00001979 5B                      	pop	bx			;restore bx
 11930                                  
 11931                                  SaveNoSFN:
 11932                                  	;mov	ax,[es:di+5]
 11933 0000197A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11934 0000197E 243F                    	AND	AL,3Fh			; get real drive
 11935 00001980 08D8                    	OR	AL,BL
 11936                                  	;mov	[si+19h],al
 11937 00001982 884419                  	MOV	[SI+fcb_l_drive],AL
 11938                                  
 11939 00001985 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11940 00001989 40                      	INC	AX
 11941                                  	;mov	[es:di+15h],ax
 11942 0000198A 26894515                	MOV	[ES:DI+sf_LRU],AX
 11943 0000198E 7506                    	JNZ	short SimpleStuff
 11944                                  	
 11945                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11946                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11947                                  	
 11948                                  	;mov	bx,15h
 11949 00001990 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11950 00001993 E80500                  	call	ResetLRU
 11951                                  
 11952                                  	; Set new LRU to AX
 11953                                  SimpleStuff:
 11954 00001996 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11955 0000199A C3                      	retn
 11956                                  
 11957                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11958                                  ;----------------------------------------------------------------------------
 11959                                  ;
 11960                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11961                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11962                                  ;   at 0.
 11963                                  ;
 11964                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11965                                  ;		ES:DI point to SFT currently being updated
 11966                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11967                                  ;		AX has 8000h
 11968                                  ;   Registers modified: none
 11969                                  ;
 11970                                  ;----------------------------------------------------------------------------
 11971                                  ;
 11972                                  
 11973                                  	; 17/05/2019 - Retro DOS v4.0
 11974                                  ResetLRU:
 11975                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11976                                  	; DOSDATA
 11977                                  
 11978 0000199B B80080                  	MOV	AX,8000h
 11979 0000199E 06                      	push	es
 11980 0000199F 57                      	push	di
 11981                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11982 000019A0 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11983                                  	;mov	cx,[es:di+4]
 11984 000019A5 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11985                                  	;lea	di,[di+6]
 11986 000019A9 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11987                                  ovScan:
 11988 000019AC 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11989 000019AF 7703                    	JA	short ovLoop
 11990 000019B1 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11991                                  ovLoop:
 11992                                  	;;add	di,53	; MSDOS 3.3
 11993                                  	;add	di,59	; MSDOS 6.0	
 11994 000019B4 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11995 000019B7 E2F3                    	LOOP	ovScan
 11996 000019B9 5F                      	pop	di
 11997 000019BA 07                      	pop	es
 11998 000019BB 268901                  	MOV	[ES:DI+BX],AX
 11999 000019BE C3                      	retn
 12000                                  
 12001                                  ;IF  0  ; We dont need this routine any more.
 12002                                  ;
 12003                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12004                                  ;----------------------------------------------------------------------------
 12005                                  ;
 12006                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12007                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12008                                  ;   count here and fill in the appropriate field.
 12009                                  ;
 12010                                  ;   Inputs:	ES:DI point to SFT
 12011                                  ;   Outputs:	ES:DI has the open age field filled in.
 12012                                  ;		If open age has wraparound, we will have subtracted 8000h
 12013                                  ;		    from all open ages.
 12014                                  ;   Registers modified: AX
 12015                                  ;
 12016                                  ;----------------------------------------------------------------------------
 12017                                  ;
 12018                                  ;SetOpenAge:
 12019                                  ;	; 20/07/2018 - Retro DOS v3.0
 12020                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12021                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12022                                  ;
 12023                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12024                                  ;
 12025                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12026                                  ;	INC	AX
 12027                                  ;	;mov	[es:di+17h],ax
 12028                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12029                                  ;	JNZ	short SetDone
 12030                                  ;	;mov	bx,17h
 12031                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12032                                  ;	call	ResetLRU
 12033                                  ;SetDone:
 12034                                  ;	MOV	[CS:OpenLRU],AX
 12035                                  ;	retn
 12036                                  ;
 12037                                  ;ENDIF	; SetOpenAge no longer needed
 12038                                  
 12039                                  ; 21/07/2018 - Retro DOS v3.0
 12040                                  ; LRUFCB for MSDOS 6.0 !
 12041                                  
 12042                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12043                                  ;----------------------------------------------------------------------------
 12044                                  ;
 12045                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12046                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12047                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12048                                  ;
 12049                                  ;   Inputs:	none
 12050                                  ;   Outputs:	ES:DI point to SFT
 12051                                  ;		ThisSFT points to SFT
 12052                                  ;		SFT is zeroed
 12053                                  ;		Carry set of closes failed
 12054                                  ;   Registers modified: none
 12055                                  ;
 12056                                  ;----------------------------------------------------------------------------
 12057                                  ;
 12058                                  ; MSDOS 6.0
 12059                                  ;IF 0	; rewritten this routine
 12060                                  ;
 12061                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12062                                  ;	call	save_world
 12063                                  ;	
 12064                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12065                                  ; to find the lease recently used one that is younger than the open age.  We
 12066                                  ; operate be scanning the list n times finding the least age that is greater
 12067                                  ; or equal to the previous minimum age.
 12068                                  ;
 12069                                  ;   BP is the count of times we need to go through this loop.
 12070                                  ;   AX is the current acceptable minimum age to consider
 12071                                  ;
 12072                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12073                                  ;	XOR	AX,AX			; low = 0;
 12074                                  ;
 12075                                  ; If we've scanned the table n times, then we are done.
 12076                                  ;
 12077                                  ;lru1:
 12078                                  ;	CMP	bp,0			; while (k--) {
 12079                                  ;	JZ	short lru75
 12080                                  ;	DEC	bp
 12081                                  ;
 12082                                  ; Set up for scan.
 12083                                  ;
 12084                                  ;   AX is the minimum age for consideration
 12085                                  ;   BX is the minimum age found during the scan
 12086                                  ;   SI is the position of the entry that corresponds to BX
 12087                                  ;
 12088                                  ;	MOV	BX,-1			;     min = 0xffff;
 12089                                  ;	MOV	si,BX			;     pos = 0xffff;
 12090                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12091                                  ;	;mov	cx,[es:di+4]
 12092                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12093                                  ;	;lea	di,[di+6]
 12094                                  ;	LEA	DI,[DI+SFT.SFTable]
 12095                                  ;
 12096                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12097                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12098                                  ; are done.  In both cases, we use the found entry.
 12099                                  ;
 12100                                  ;lru2:
 12101                                  ;	cmp	word [es:di],0
 12102                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12103                                  ;	jz	short lru25
 12104                                  ;	;cmp	word [es:di],-1
 12105                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12106                                  ;	cmp	word [es:di],sf_busy
 12107                                  ;	jnz	short lru3
 12108                                  ;
 12109                                  ; The entry is usable without further scan.  Go and use it.
 12110                                  ;
 12111                                  ;lru25:
 12112                                  ;	MOV	si,DI			;	      pos = i;
 12113                                  ;	JMP	short lru11		;	      goto got;
 12114                                  ;
 12115                                  ; See if the entry is for the network or for the sharer.
 12116                                  ;
 12117                                  ;  If for the sharer or network then
 12118                                  ;	if the age < current minimum AND >= allowed minimum then
 12119                                  ;	    this entry becomes current minimum
 12120                                  ;
 12121                                  ;lru3:
 12122                                  ;	;test	word [es:di+5],8000h
 12123                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12124                                  ;					;	  if (!net[i]
 12125                                  ;	JNZ	short lru35
 12126                                  ;if installed
 12127                                  ;	call	CheckShare		;		&& !sharing)
 12128                                  ;	JZ	short lru5		;	  else
 12129                                  ;ENDIF
 12130                                  ;
 12131                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12132                                  ; current minimum.
 12133                                  ;
 12134                                  ;lru35:
 12135                                  ;	;mov	dx,[es:di+17h]
 12136                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12137                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12138                                  ;	JB	short lru5
 12139                                  ;	CMP	DX,BX
 12140                                  ;	JAE	short lru5		;	      age[i] < min) {
 12141                                  ;
 12142                                  ; entry is new minimum.  Remember his age.
 12143                                  ;
 12144                                  ;	mov	bx,DX			;	      min = age[i];
 12145                                  ;	mov	si,di			;	      pos = i;
 12146                                  ;
 12147                                  ; End of loop.	gp back for more
 12148                                  ;
 12149                                  ;lru5:
 12150                                  ;	;add	di,53
 12151                                  ;	add	di,SF_ENTRY.size
 12152                                  ;	loop	lru2			;	      }
 12153                                  ;
 12154                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12155                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12156                                  ; complete.  Go find LRU.
 12157                                  ;
 12158                                  ;lru6:	
 12159                                  ;	cmp	si,-1			; position not -1?
 12160                                  ;	jz	short lru75		; no, done with everything
 12161                                  ;	lea	ax,[bx+1]		; set new threshold age
 12162                                  ;	jmp	short lru1		; go and loop for more
 12163                                  ;lru65:	
 12164                                  ;	stc
 12165                                  ;	jmp	short LRUDead		;	  return -1;
 12166                                  ;
 12167                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12168                                  ; network entry. We now make a second pass through to find the LRU entry
 12169                                  ; that is local-no-share or has age >= AX
 12170                                  ;
 12171                                  ;lru75:
 12172                                  ;	mov	bx,-1			; min = 0xffff;
 12173                                  ;	mov	si,bx			; pos = 0xffff;
 12174                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12175                                  ;	;mov	cx,[es:di+4]
 12176                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12177                                  ;	;lea	di,[di+6]
 12178                                  ;	LEA	DI,[DI+SFT.SFTable]
 12179                                  ;
 12180                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12181                                  ; then check for lru.
 12182                                  ;
 12183                                  ;lru8:
 12184                                  ;	;test	word [es:di+5],8000h
 12185                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12186                                  ;	jnz	short lru85		; is for network, go check age
 12187                                  ;	call	CheckShare		; sharer here?
 12188                                  ;	jz	short lru86		; no, go check lru
 12189                                  ;
 12190                                  ; Network or sharer.  Check age
 12191                                  ;
 12192                                  ;lru85:
 12193                                  ;	;cmp	[es:di+17h],ax
 12194                                  ;	cmp	[es:di+sf_OpenAge],ax
 12195                                  ;	jb	short lru9		; age is before threshold, skip it
 12196                                  ;
 12197                                  ; Check LRU
 12198                                  ;
 12199                                  ;lru86:
 12200                                  ;	;cmp	[es:di+15h],bx
 12201                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12202                                  ;	jae	short lru9		; no, skip this
 12203                                  ;	mov	si,di			; remember position
 12204                                  ;	;mov	bx,[es:di+15h]
 12205                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12206                                  ;
 12207                                  ; Done with this entry, go back for more.
 12208                                  ;
 12209                                  ;lru9:
 12210                                  ;	;add	di, 53
 12211                                  ;	add	di,SF_ENTRY.size
 12212                                  ;	loop	lru8
 12213                                  ;
 12214                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12215                                  ; out. The conditions here are:
 12216                                  ;
 12217                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12218                                  ;
 12219                                  ;lru10:
 12220                                  ;	cmp	si,-1			; if no one f
 12221                                  ;	jz	short lru65		;     return -1;
 12222                                  ;lru11:
 12223                                  ;	mov	di,si
 12224                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12225                                  ;	MOV	[CS:THISSFT+2],ES
 12226                                  ;
 12227                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12228                                  ; is 0.
 12229                                  ;
 12230                                  ;	;test	word [es:di+5],8000h
 12231                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12232                                  ;	JNZ	short LRUClose
 12233                                  ;IF INSTALLED
 12234                                  ;	call	CheckShare
 12235                                  ;	JZ	short LRUDone
 12236                                  ;ENDIF
 12237                                  ;
 12238                                  ; Repeat close until ref count is 0
 12239                                  ;
 12240                                  ;LRUClose:
 12241                                  ;	push	ss
 12242                                  ;	pop	ds
 12243                                  ;	LES	DI,[THISSFT]
 12244                                  ;	cmp     word [es:di],0
 12245                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12246                                  ;	JZ	short LRUDone 		; nope, all done
 12247                                  ;	call	DOS_CLOSE
 12248                                  ;	jnc	short LRUClose		; no error => clean up
 12249                                  ;	;cmp	al,6
 12250                                  ;	cmp	al,error_invalid_handle
 12251                                  ;	jz	short LRUClose
 12252                                  ;	stc
 12253                                  ;	JMP	short LRUDead
 12254                                  ;LRUDone:
 12255                                  ;	XOR	AL,AL
 12256                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12257                                  ;
 12258                                  ;LRUDead:
 12259                                  ;	call	restore_world
 12260                                  ;	LES     DI,[CS:THISSFT]
 12261                                  ;	jnc	short LRUFCB_retn
 12262                                  ;LRUFCB_err:
 12263                                  ;	; mov	al, 23h	
 12264                                  ;	MOV	AL,error_FCB_unavailable
 12265                                  ;LRUFCB_retn:	
 12266                                  ;	retn:
 12267                                  ;
 12268                                  ;ENDIF	; LRUFCB has been rewritten below.
 12269                                  
 12270                                  ; 17/05/2019 - Retro DOS v4.0
 12271                                  ; LRUFCB for MSDOS 6.0 !
 12272                                  ;----------------------------------------------------------------------------
 12273                                  ;
 12274                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12275                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12276                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12277                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12278                                  ; optimize regeneration operations by keeping track of the current local
 12279                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12280                                  ; local SFT in the SFT Block.
 12281                                  ;
 12282                                  ; Inputs: al = 0 => Regenerate SFT operation
 12283                                  ;	    = 1 => Allocate new SFT for Open/Create
 12284                                  ;
 12285                                  ; Outputs: Carry clear
 12286                                  ;	 	es:di = Address of allocated SFT
 12287                                  ;	  	ThisSFT = Address of allocated SFT
 12288                                  ;
 12289                                  ;	  carry set if closes of net/Share files failed 
 12290                                  ;		al = error_FCB_unavailable
 12291                                  ;
 12292                                  ; Registers affected: None
 12293                                  ;
 12294                                  ;----------------------------------------------------------------------------
 12295                                  
 12296                                  ;LruFCB	PROC	NEAR
 12297                                  LRUFCB:
 12298                                  	; 17/05/2019 - Retro DOS v4.0
 12299                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12300                                  
 12301                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12302                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12303                                  
 12304 000019BF 06                      	push	es	; * (MSDOS 6.21)
 12305                                  	
 12306 000019C0 E8ADEA                  	call	save_world
 12307                                  	
 12308                                  	;getdseg <ds>		;ds = DOSDATA
 12309 000019C3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12310                                  
 12311 000019C8 08C0                    	or	al,al		;Check if regenerate allocation
 12312 000019CA 751A                    	jnz	short lru1	;Try to find SFT to use
 12313                                  
 12314                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12315                                  	; local SFT, just return that SFT to reuse
 12316                                  
 12317 000019CC 8B3E[4310]              	mov	di,[LocalSFT]
 12318 000019D0 0B3E[4510]              	or	di,[LocalSFT+2]	;is address == 0?
 12319 000019D4 7410                    	jz	short lru1	;invalid local SFT, find one
 12320                                  
 12321                                  	; We have found a valid local SFT. Recycle this SFT
 12322                                  
 12323 000019D6 C43E[4310]              	les	di,[LocalSFT]
 12324                                  
 12325                                  gotlocalSFT:
 12326 000019DA 893E[9E05]              	mov	[THISSFT],di
 12327 000019DE 8C06[A005]              	mov	[THISSFT+2],es
 12328 000019E2 F8                      	clc
 12329 000019E3 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12330                                  
 12331                                  lru1:
 12332 000019E6 C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12333                                  	;mov	cx,[es:di+4]
 12334 000019EA 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12335                                  	;lea	di,[di+6]
 12336 000019EE 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12337                                  
 12338                                  	; We scan through all the SFTs scanning for a free one. It also 
 12339                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12340                                  	; bx = min. LRU for local SFTs
 12341                                  	; si = pos. of local SFT with min. LRU
 12342                                  	; dx = min. LRU for net/Share SFTs
 12343                                  	; bp = pos. of net/Share SFT with min. LRU
 12344                                  
 12345 000019F1 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12346 000019F4 89DE                    	mov	si,bx
 12347 000019F6 89DA                    	mov	dx,bx
 12348 000019F8 89DD                    	mov	bp,bx
 12349                                  
 12350                                  findSFT:
 12351                                  	;See if this SFT is a free one. If so, return it
 12352 000019FA 26830D00                	or	word [es:di],0
 12353                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12354 000019FE 744D                    	jz	short gotSFT	;yes, SFT is free
 12355                                  	;;cmp	word [es:di],-1
 12356                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12357 00001A00 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12358 00001A04 7447                    	jz	short gotSFT	;no, can use it
 12359                                  
 12360                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12361                                  	; used for a later regen.
 12362                                  
 12363                                  	; 16/12/2022
 12364                                  	; 08/11/2022
 12365                                  	;test	byte [es:di+6],80h
 12366 00001A06 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12367                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12368                                  	;;test	word [es:di+5],8000h
 12369                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12370 00001A0B 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12371                                  
 12372                                  ;IF installed
 12373 00001A0D E89559                  	call	CheckShare	;Share present?
 12374                                  ;ENDIF
 12375 00001A10 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12376                                  
 12377                                  	;Local SFT, register its address
 12378                                  
 12379                                  	; !!HACK!!!
 12380                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12381                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12382                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12383                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12384                                  	; out the code that previously existed at label 'gotSFT'
 12385                                  
 12386                                  hackpoint:
 12387 00001A12 893E[4310]              	mov	[LocalSFT],di
 12388 00001A16 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12389                                  
 12390 00001A1A 08C0                    	or	al,al		;Is operation = REGEN?
 12391 00001A1C 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12392                                  
 12393                                  	;Get LRU for local files
 12394                                  	
 12395                                  	;cmp	[es:di+15h],bx
 12396 00001A1E 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12397 00001A22 7306                    	jae	short lru4	;no, skip 
 12398                                  
 12399                                  	;mov	bx,[es:di+15h]
 12400 00001A24 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12401 00001A28 89FE                    	mov	si,di		;store SFT position
 12402                                  lru4:
 12403                                  	;add	di,59
 12404 00001A2A 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12405 00001A2D E2CB                    	loop	findSFT
 12406                                  
 12407                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12408                                  	; available, we will reuse it instead of net/Share LRU
 12409                                  
 12410 00001A2F 89F7                    	mov	di,si
 12411 00001A31 83FEFF                  	cmp	si,-1		;local SFT available?
 12412 00001A34 7517                    	jnz	short gotSFT	;yes, return it
 12413                                  
 12414                                  	;No local SFT, see if we got a net/Share SFT
 12415                                  
 12416 00001A36 89EF                    	mov	di,bp
 12417 00001A38 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12418 00001A3B 7530                    	jnz	short gotnetSFT	;yes, return it
 12419                                  noSFT:
 12420                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12421                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12422                                  	; count is not maintained properly.
 12423                                  
 12424 00001A3D EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12425                                  
 12426                                  	; Handle the LRU for net/Share SFTs
 12427                                  lru5:
 12428                                  	;cmp	[es:di+15h],dx
 12429 00001A3F 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12430 00001A43 73E5                    	jae	short lru4	;no, skip 
 12431                                  
 12432                                  	;mov	dx,[es:di+15h]
 12433 00001A45 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12434                                  
 12435 00001A49 89FD                    	mov	bp,di		;store SFT position
 12436 00001A4B EBDD                    	jmp	short lru4	;continue with next SFT
 12437                                  
 12438                                  gotSFT:
 12439 00001A4D 08C0                    	or	al,al
 12440 00001A4F 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12441                                  
 12442                                  	; HACK!!!
 12443                                  	; The code here differs from the code at 'hackpoint' only in the 
 12444                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12445                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12446                                  	; has been commented out below and replaced by the code just above.
 12447                                  
 12448                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12449                                  ;
 12450                                  ;	or	al,al		  ;Regen?
 12451                                  ;	jnz	short notlocaluse ;yes, register it and return
 12452                                  ;
 12453                                  ;Register this SFT as a local one
 12454                                  ;
 12455                                  ;	mov	[LocalSFT],di
 12456                                  ;	mov	[LocalSFT+2],es
 12457                                  ;	jmp	gotlocalSFT	;return to caller
 12458                                  ;
 12459                                  ;notlocaluse:
 12460                                  
 12461                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12462                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12463                                  	; does not really know whether it is a local file or not. We 
 12464                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12465                                  	; registered as a local SFT that can be recycled.
 12466                                  
 12467 00001A51 8CC0                    	mov	ax,es
 12468 00001A53 393E[4310]              	cmp	[LocalSFT],di		;Offset same?
 12469 00001A57 7506                    	jne	short notinvalid
 12470 00001A59 3906[4510]              	cmp	[LocalSFT+2],ax		;Segments same?
 12471 00001A5D 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12472                                  notinvalid:
 12473 00001A5F E978FF                  	jmp	gotlocalSFT
 12474                                  
 12475                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12476                                  	; Invalidate this variable i.e LocalSFT = NULL
 12477                                  
 12478                                  zerolocalSFT:
 12479 00001A62 31C0                    	xor	ax,ax ; 0
 12480 00001A64 A3[4310]                	mov	[LocalSFT],ax
 12481 00001A67 A3[4510]                	mov	[LocalSFT+2],ax
 12482                                  
 12483 00001A6A E96DFF                  	jmp	gotlocalSFT
 12484                                  
 12485                                  gotnetSFT:
 12486                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12487                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12488                                  	; LocalSFT variable
 12489                                  
 12490 00001A6D 08C0                    	or	al,al
 12491 00001A6F 7508                    	jnz	short closenet
 12492                                  
 12493 00001A71 893E[4310]              	mov	[LocalSFT],di
 12494 00001A75 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12495                                  closenet:
 12496 00001A79 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12497 00001A7D 8C06[A005]              	mov	[THISSFT+2],es	
 12498                                  
 12499                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12500                                  	; count is 0.
 12501                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12502                                  	; recycled -- no need to check for this.
 12503                                  
 12504                                  LRUClose:
 12505 00001A81 26833D00                	cmp	word [es:di],0
 12506                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12507 00001A85 740C                    	jz	short LRUDone	; nope, all done
 12508                                  
 12509 00001A87 E80F15                  	call	DOS_CLOSE
 12510 00001A8A 73F5                    	jnc	short LRUClose	; no error => clean up
 12511                                  
 12512                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12513                                  	; error closing. Seems like we could have a potential infinite loop  
 12514                                  	; here. This has to be verified.
 12515                                  
 12516 00001A8C 3C06                    	cmp	al,error_invalid_handle ; 6
 12517 00001A8E 74F1                    	je	short LRUClose
 12518                                  errorbadSFT:
 12519 00001A90 F9                      	stc
 12520 00001A91 EB05                    	JMP	short LRUDead
 12521                                  LRUDone:
 12522 00001A93 30C0                    	XOR	AL,AL
 12523 00001A95 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12524                                  
 12525                                  LRUDead:
 12526 00001A98 E8BEE9                  	call	restore_world		; use macro
 12527                                  	
 12528 00001A9B 07                      	pop	es ; * (MSDOS 6.21)
 12529                                  
 12530                                  	;getdseg <es>
 12531 00001A9C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12532 00001AA1 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12533                                  
 12534                                  	;;retnc
 12535                                  	;jc	short LruFCB_err
 12536                                  	;retn
 12537                                  
 12538                                  	; 16/12/2022
 12539                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12540 00001AA6 7302                    	jnc	short LruFCB_retn
 12541                                  	;jc	short LruFCB_err
 12542                                  	;retn
 12543                                  		
 12544                                  LruFCB_err:
 12545 00001AA8 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12546                                  LruFCB_retn:
 12547 00001AAA C3                      	retn
 12548                                  	
 12549                                  ;LruFCB	ENDP
 12550                                  
 12551                                  ; 17/05/2019 - Retro DOS v4.0
 12552                                  
 12553                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12554                                  
 12555                                  ; --------------------------------------------------------------------------
 12556                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12557                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12558                                  ; to copy the name to different destinations
 12559                                  ;
 12560                                  ; Inputs: ds:si = source string
 12561                                  ;	 es:di = destination string
 12562                                  ;	 cx = length of string
 12563                                  ;
 12564                                  ; Outputs: String copied to destination
 12565                                  ;
 12566                                  ; Registers affected: cx,di,si
 12567                                  ; --------------------------------------------------------------------------
 12568                                  
 12569                                  RegenCopyName:
 12570                                  CopyName:
 12571 00001AAB AC                      	lodsb			;load character
 12572 00001AAC E8FD35                  	call	UCase		; convert char to upper case
 12573                                  StuffChar2:
 12574 00001AAF AA                      	STOSB			;store converted character
 12575 00001AB0 E2F9                    	LOOP	CopyName	;
 12576                                  DoneName:
 12577 00001AB2 C3                      	retn
 12578                                  
 12579                                  ; --------------------------------------------------------------------------
 12580                                  
 12581                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12582                                  FCBRegen:
 12583                                  	; called from SFTFromFCB. SS already DOSDATA
 12584                                  
 12585                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12586                                  	; we do not fill, size we do no fill, position we do not fill,
 12587                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12588                                  
 12589                                  	;mov	al,[si+19h]
 12590 00001AB3 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12591                                  
 12592                                  	; We discriminate based on the first two bits in the reserved field.
 12593                                  	
 12594                                  	;test	al,80h
 12595 00001AB6 A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12596 00001AB8 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12597                                  
 12598                                  	; The FCB is for a network or a sharing based system. At this point 
 12599                                  	; we have already closed the SFT for this guy and reconnection is 
 12600                                  	; impossible.
 12601                                  	;
 12602                                  	; Remember that he may have given us a FCB with bogus information in
 12603                                  	; it. Check to see if sharing is present or if the redir is present.
 12604                                  	; If either is around, presume that we have cycled out the FCB and 
 12605                                  	; give the hard error. Otherwise, just return with carry set.
 12606                                  
 12607 00001ABA E8E858                  	call	CheckShare		; test for sharer
 12608 00001ABD 7509                    	JNZ	short RegenFail		; yep, fail this.
 12609                                  	
 12610                                  	;mov	ax,1100h
 12611 00001ABF B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12612 00001AC2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12613                                  			; Return: AL = 00h  not installed, OK to install
 12614                                  			; 01h  not installed, not OK to install
 12615                                  			; FFh  installed
 12616 00001AC4 08C0                    	OR	AL,AL			; is it there?
 12617 00001AC6 740C                    	JZ	short RegenDead		; no, just fail the operation
 12618                                  RegenFail:
 12619                                  	; 17/05/2019 - Retro DOS v4.0
 12620                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12621 00001AC8 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12622                                  
 12623                                  	;cmp	ah,10h
 12624 00001ACC 80FC10                  	cmp	AH,FCB_CLOSE
 12625 00001ACF 7403                    	jz	short RegenDead
 12626 00001AD1 E89301                  	call	FCBHardErr		; massive hard error.
 12627                                  RegenDead:
 12628 00001AD4 F9                      	STC				; carry set
 12629                                  FCBRegen_retn:
 12630 00001AD5 C3                      	retn
 12631                                  
 12632                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12633                                  	; so fail the operation.
 12634                                  
 12635                                  RegenNoSharing:
 12636 00001AD6 E8CC58                  	call	CheckShare		; Sharing around?
 12637 00001AD9 75ED                    	JNZ	short RegenFail
 12638                                  	
 12639                                  	; Find an SFT for this guy.
 12640                                  	
 12641                                  	; 17/05/2019 - Retro DOS v4.0
 12642                                  
 12643                                  	; MSDOS 3.3
 12644                                  	;call	LRUFCB
 12645                                  	;jc	short FCBRegen_retn
 12646                                  	
 12647                                  	; MSDOS 6.0
 12648 00001ADB 50                      	push	ax
 12649 00001ADC B000                    	mov	al,0			;indicate it is a regen operation
 12650 00001ADE E8DEFE                  	call	LRUFCB
 12651 00001AE1 58                      	pop	ax
 12652 00001AE2 72F1                    	jc	short FCBRegen_retn
 12653                                  
 12654                                  	;mov	word [es:di+2],8002h
 12655 00001AE4 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12656 00001AEA 243F                    	AND	AL,3Fh			; get drive number for flags
 12657 00001AEC 98                      	CBW
 12658                                  	;or	ax,4000h
 12659 00001AED 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12660                                  
 12661                                  	; The bits field consists of the upper two bits (dirty and device) 
 12662                                  	; from the SFT and the low 4 bits from the open mode.
 12663                                  
 12664                                  	;mov	cl,[si+1Ah]
 12665 00001AF0 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12666 00001AF3 88CD                    	MOV	CH,CL
 12667 00001AF5 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12668 00001AF8 08E8                    	OR	AL,CH
 12669                                  	;and	cl,0Fh
 12670 00001AFA 80E10F                  	AND	CL,access_mask		; get the mode bits
 12671                                  	;mov	[es:di+2],cl
 12672 00001AFD 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12673                                  	;mov	[es:di+5],ax
 12674 00001B01 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12675                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12676 00001B05 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12677                                  	;mov	[es:di+31h],ax
 12678 00001B09 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12679 00001B0D 1E                      	push	ds
 12680 00001B0E 56                      	push	si
 12681 00001B0F 06                      	push	es
 12682 00001B10 57                      	push	di
 12683 00001B11 16                      	push	ss
 12684 00001B12 07                      	pop	es
 12685 00001B13 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12686                                  
 12687 00001B16 B90800                  	MOV	CX,8
 12688 00001B19 46                      	INC	SI			; Skip past drive byte to name in FCB
 12689                                  
 12690                                  	; MSDOS 3.3
 12691                                  ;RegenCopyName:
 12692                                  	;lodsb
 12693                                  	;call	UCase
 12694                                  	;stosb
 12695                                  	;loop	RegenCopyName
 12696                                  
 12697                                  	; MSDOS 6.0
 12698 00001B1A E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12699                                  
 12700 00001B1D 16                      	push	ss	; SS is DOSDATA
 12701 00001B1E 1F                      	pop	ds
 12702                                  
 12703                                  	;mov	byte [ATTRIB],16h
 12704 00001B1F C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12705                                  					; Must set this to something interesting
 12706                                  					; to call DEVNAME.
 12707 00001B24 E81327                  	call	DEVNAME 		; check for device
 12708 00001B27 5E                      	pop	si
 12709 00001B28 07                      	pop	es
 12710 00001B29 5E                      	pop	si
 12711 00001B2A 1F                      	pop	ds
 12712 00001B2B 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12713                                  
 12714                                  	; Device found. We can ignore disk-specific info
 12715                                  
 12716                                  	;mov	[es:di+5],bh
 12717 00001B2D 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12718                                  	;mov	byte [es:di+4],0
 12719 00001B31 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12720                                  					; SS override
 12721                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12722 00001B36 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12723                                  	;mov	[es:di+7],si
 12724 00001B3B 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12725                                  	;mov	[es:di+9],ds
 12726 00001B3F 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12727 00001B43 C3                      	retn				; carry is clear
 12728                                  
 12729                                  RegenDeadJ:
 12730 00001B44 EB8E                    	JMP	short RegenDead
 12731                                  
 12732                                  	; File found. Just copy in the remaining pieces.
 12733                                  
 12734                                  RegenFileNoSharing:
 12735                                  	;mov	ax,[es:di+5]
 12736 00001B46 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12737 00001B4A 83E03F                  	AND	AX,03Fh
 12738 00001B4D 1E                      	push	ds
 12739 00001B4E 56                      	push	si
 12740 00001B4F E8E04E                  	call	FIND_DPB
 12741                                  	;mov	[es:di+7],si
 12742 00001B52 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12743                                  	;mov	[es:di+9],ds
 12744 00001B56 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12745 00001B5A 5E                      	pop	si
 12746 00001B5B 1F                      	pop	ds
 12747 00001B5C 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12748                                  					; indicator was bogus
 12749                                  	;mov	ax,[si+1Dh]
 12750 00001B5E 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12751                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12752                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12753 00001B61 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12754                                  
 12755                                  	; MSDOS 6.0
 12756                                  
 12757                                  	; SR;
 12758                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12759                                  	; number
 12760                                  
 12761                                  	;mov	al,[si+18h]
 12762 00001B65 8A4418                  	mov	al,[si+fcb_sfn]
 12763 00001B68 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12764 00001B6A 88C4                    	mov	ah,al
 12765 00001B6C D0C4                    	rol	ah,1
 12766 00001B6E D0E8                    	shr	al,1
 12767 00001B70 08E0                    	or	al,ah
 12768 00001B72 243F                    	and	al,03Fh		;mask off unused bits
 12769                                  	;mov	[es:di+4],al
 12770 00001B74 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12771                                  
 12772                                  	; SR;
 12773                                  	; Update the higher word of the directory sector from the FCB
 12774                                  
 12775                                  	;;mov	al,[si+18h]
 12776 00001B78 8A4418                  	mov	al,[si+fcb_sfn]
 12777 00001B7B 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12778 00001B7D 28E4                    	sub	ah,ah
 12779                                  	;mov	[es:di+1Dh],ax
 12780 00001B7F 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12781                                  
 12782                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12783                                  	;mov	ax,[si+1Bh]
 12784 00001B83 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12785                                  	;mov	[es:di+0Bh],ax
 12786 00001B86 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12787                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12788                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12789 00001B8A 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12790                                  	;mov	al,[si+1Fh]
 12791 00001B8E 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12792                                  	;mov  	[es:di+1Fh],al
 12793 00001B91 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12794                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12795 00001B95 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12796                                  					; Existing FCB entries would be
 12797                                  					; flushed unnecessarily because of
 12798                                  					; check in CheckFCB of the ref_count.
 12799                                  					; July 22/85 - BAS
 12800                                  	;lea	si,[si+1]
 12801 00001B98 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12802                                  	;lea	di,[di+20h]
 12803 00001B9B 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12804                                  	;mov	cx,11
 12805 00001B9E B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12806                                  	
 12807                                  	; MSDOS 6.0
 12808 00001BA1 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12809                                  	
 12810                                  	; MSDOS 3.3
 12811                                  ;RegenCopyName2:
 12812                                  	;lodsb
 12813                                  	;call    UCase
 12814                                  	;stosb
 12815                                  	;loop    RegenCopyName2
 12816                                  
 12817 00001BA4 F8                      	clc
 12818 00001BA5 C3                      	retn
 12819                                  
 12820                                  ; 17/05/2019 - Retro DOS v4.0
 12821                                  
 12822                                  ;**	BlastSFT - FIll SFT with Garbage
 12823                                  ; --------------------------------------------------------------------------
 12824                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12825                                  ;	various garbage values to put into the SFT.  I don't know why,
 12826                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12827                                  ;	necessary to show that the SFT is free after filling it.
 12828                                  ;
 12829                                  ;	ENTRY	(es:di) = address of SFT
 12830                                  ;		(al) = fill character
 12831                                  ;	EXIT	(ax) = -1
 12832                                  ;		'C' clear
 12833                                  ;	USES	AX, CX, Flags
 12834                                  
 12835                                  BlastSFT:
 12836 00001BA6 57                      	push	di
 12837                                  	;mov	cx,53 ; MSDOS 3.3
 12838                                  	;mov	cx,59 ; MSDOS 6.0
 12839 00001BA7 B93B00                  	mov	cx,SF_ENTRY.size
 12840 00001BAA F3AA                    	rep	stosb
 12841 00001BAC 5F                      	pop	di
 12842 00001BAD 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12843 00001BAF 268905                  	mov	[es:di],ax
 12844                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12845                                  	;mov	[es:di+15h],ax
 12846 00001BB2 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12847 00001BB6 48                      	dec	ax	; -1					    ;
 12848                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12849 00001BB7 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12850                                  BlastSFT_retn:
 12851 00001BBB C3                      	retn				; return with 'C' clear     ;
 12852                                  
 12853                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12854                                  ; --------------------------------------------------------------------------
 12855                                  ;
 12856                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12857                                  ;   regenerated.
 12858                                  ;
 12859                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12860                                  ;		AL is SFT index
 12861                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12862                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12863                                  ;   Registers modified: AX and BX
 12864                                  ;
 12865                                  ; --------------------------------------------------------------------------
 12866                                  
 12867                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12868                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12869                                  CheckFCB:
 12870                                  		
 12871                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12872                                  
 12873                                  	; MSDOS 3.3
 12874                                  
 12875                                  	; LES	DI,[CS:SFTFCB]
 12876                                  
 12877                                  	; MSDOS 6.0
 12878                                  	
 12879                                  	; SR;
 12880                                  	; We check if the given FCB is for a local file. If so, we return a 
 12881                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12882                                  
 12883                                  	;test	byte [si+19h],0C0h
 12884 00001BBC F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12885 00001BC0 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12886 00001BC2 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12887                                  
 12888                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12889                                  	;cmp	[es:di+4],al
 12890 00001BC7 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12891 00001BCB 7244                    	JC	short BadSFT
 12892                                  	;;mov	bl,53 ; MSDOS 3.3
 12893                                  	;mov	bl,59 ; MSDOS 6.0
 12894 00001BCD B33B                    	MOV	BL,SF_ENTRY.size
 12895 00001BCF F6E3                    	MUL	BL
 12896                                  	;lea	di,[di+6]
 12897 00001BD1 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12898 00001BD4 01C7                    	ADD	DI,AX
 12899                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12900 00001BD6 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12901                                  	;cmp	[es:di+31h],ax
 12902 00001BDA 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12903 00001BDE 7531                    	JNZ	short BadSFT		; must match process
 12904 00001BE0 26833D00                	cmp	word [es:di],0
 12905                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12906 00001BE4 742B                    	JZ	short BadSFT		; must also be in use
 12907                                  	;mov	al,[si+19h]
 12908 00001BE6 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12909                                  	;test	al,80h
 12910 00001BE9 A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12911 00001BEB 7430                    	JZ	short CheckNoShare	; No. try local or device
 12912                                  
 12913                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12914                                  	; FCBSHARE is a superset of FCBNETWORK.
 12915                                  
 12916 00001BED 50                      	PUSH	AX
 12917                                  	;and	al,0C0h
 12918 00001BEE 24C0                    	AND	AL,FCBMASK
 12919                                  	;cmp	al,0C0h
 12920 00001BF0 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12921 00001BF2 58                      	POP	AX
 12922 00001BF3 751E                    	JNZ	short CheckNet		; yes
 12923                                  ;
 12924                                  ;----- In share support -----
 12925                                  ;
 12926                                  	;call	far [cs:JShare+(11*4)]
 12927 00001BF5 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12928 00001BFA 7215                    	JC	short BadSFT
 12929 00001BFC EB06                    	JMP	SHORT CheckD
 12930                                  ;
 12931                                  ;----- End in share support -----
 12932                                  ;
 12933                                  	; 09/11/2022
 12934                                  	; (There is not any procedure/sub
 12935                                  	;  which calls or jumps to CheckFirClus here)
 12936                                  	;;;
 12937                                  CheckFirClus:
 12938                                  	;cmp     bx,[es:di+0Bh]
 12939                                  	; 07/12/2022
 12940 00001BFE 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12941 00001C02 750D                    	JNZ	short BadSFT
 12942                                  	;;;
 12943                                  CheckD: 
 12944 00001C04 243F                    	AND	AL,3Fh
 12945                                  	;mov	ah,[es:di+5]
 12946 00001C06 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12947 00001C0A 80E43F                  	AND	AH,3Fh
 12948 00001C0D 38C4                    	CMP	AH,AL
 12949                                  	; 16/12/2022
 12950 00001C0F 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12951                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12952                                  	;jnz	short BadSFT
 12953                                  ;CheckD_retn:
 12954                                  	;retn
 12955                                  BadSFT: 
 12956 00001C11 F9                      	STC
 12957 00001C12 C3                      	retn
 12958                                  				
 12959                                  CheckNet:
 12960                                  	; 17/05/2019 - Retro DOS v4.0
 12961                                  	
 12962                                  ;----- In net support -----
 12963                                  
 12964                                  	; MSDOS 3.3
 12965                                  	;;mov	ax,[si+1Ah]
 12966                                  	;mov	ax,[si+fcb_net_handle]
 12967                                  	;;cmp	ax,[es:di+1Dh]
 12968                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12969                                  	;jnz	short BadSFT
 12970                                  	;;cmp	ax,[es:di+19h]
 12971                                  	;cmp	ax,[ES:DI+sf_netid]
 12972                                  	;jnz     short BadSFT
 12973                                  	;;mov	ax,[si+1Eh]
 12974                                  	;mov	ax,[si+fcb_l_attr]
 12975                                  	;;cmp	ax,[es:di+1Bh]
 12976                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12977                                  	;jnz     short BadSFT
 12978                                  
 12979                                  	; MSDOS 6.0
 12980                                  	;mov	ax,[si+1Ch]
 12981 00001C13 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12982                                  	; 09/11/2022
 12983                                  	;cmp	ax,[es:di+0Bh] 
 12984 00001C16 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12985 00001C1A 75F5                    	JNZ	short BadSFT
 12986                                  
 12987                                  ;----- END In net support -----
 12988                                  
 12989                                  CheckNet_retn:
 12990 00001C1C C3                      	retn
 12991                                  
 12992                                  CheckNoShare:
 12993                                  
 12994                                  ; 16/12/2022
 12995                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 12996                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 12997                                  ;	;test	al,40h
 12998                                  ;	test	AL,FCBDEVICE		; Device?
 12999                                  ;	;jnz	short $+2 ; 09/11/2022
 13000                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13001                                  
 13002                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13003                                  	;;mov	bx,[si+1Dh]
 13004                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13005                                  	;;cmp	bx,[es:di+1Dh]
 13006                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13007                                  	;jnz	short BadSFT
 13008                                  	;;mov	bl,[si+1Fh]
 13009                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13010                                  	;;cmp	bl,[es:di+1Fh]
 13011                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13012                                  	;jnz	short BadSFT
 13013                                  	;;mov	bl,[si+1Ah]
 13014                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13015                                  	;;mov	bh,[es:di+5]
 13016                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13017                                  	;xor	bh,bl
 13018                                  	;and	bh,0C0h
 13019                                  	;jnz	short BadSFT
 13020                                  	;;xor	bl,[es:di+2]
 13021                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13022                                  	;and	bl,0Fh
 13023                                  	;jnz	short BadSFT
 13024                                  	;push	di
 13025                                  	;push	si
 13026                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13027                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13028                                  	;;lea	si,[si+1]
 13029                                  	;LEA	SI,[SI+SYS_FCB.name]
 13030                                  	;;mov	cx,11
 13031                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13032                                  	;repe	cmpsb
 13033                                  	;pop	si
 13034                                  	;pop	di
 13035                                  	;jnz	short BadSFT
 13036                                  	;;mov	bx,[si+1Bh]
 13037                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13038                                  	;jmp	short CheckFirClus
 13039                                  
 13040                                  	; MSDOS 6.0
 13041                                  
 13042                                  	; SR;
 13043                                  	; The code below to match a local FCB with its SFT can no longer be
 13044                                  	; used. We just return a no-match status. This check is done right
 13045                                  	; at the top.
 13046                                  
 13047                                  CheckNoShareDev:
 13048                                  	;mov	bx,[si+1Ah]
 13049 00001C1D 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13050                                  	;cmp	bx,[es:di+7]
 13051 00001C20 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13052 00001C24 75EB                    	JNZ	short BadSFT
 13053                                  	;mov	bx,[si+1Ch]
 13054 00001C26 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13055                                  	;cmp	bx,[es:di+9]
 13056 00001C29 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13057 00001C2D 75E2                    	JNZ	short BadSFT
 13058 00001C2F EBD3                    	JMP	short CheckD
 13059                                  
 13060                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13061                                  ;----------------------------------------------------------------------------
 13062                                  ;
 13063                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13064                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13065                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13066                                  ;	with PID
 13067                                  ;
 13068                                  ;   Inputs:	DS:SI point to FCB
 13069                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13070                                  ;		Carry clear -> OK ES:DI -> SFT
 13071                                  ;		Carry set -> error in ax
 13072                                  ;   Registers modified: ES,DI, AX
 13073                                  ;
 13074                                  ;----------------------------------------------------------------------------
 13075                                  
 13076                                  SFTFromFCB:
 13077                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13078                                  
 13079                                  	; 17/05/2019 - Retro DOS v4.0
 13080                                  
 13081 00001C31 50                      	push	ax
 13082 00001C32 53                      	push	bx
 13083                                  	;mov	al,[si+18h]
 13084 00001C33 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13085 00001C36 E883FF                  	call	CheckFCB
 13086 00001C39 5B                      	pop	bx
 13087 00001C3A 58                      	pop	ax
 13088                                  	;MOV	[CS:THISSFT],DI		; SS override
 13089                                  	;MOV	[CS:THISSFT+2],ES
 13090 00001C3B 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13091 00001C40 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13092 00001C45 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13093                                  	
 13094                                  	; 09/11/2022 (MSDOS 5.0)
 13095                                  	; 31/05/2019
 13096 00001C47 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13097 00001C48 E825E8                  	call	save_world
 13098 00001C4B E865FE                  	call	FCBRegen
 13099 00001C4E E808E8                  	call	restore_world		; use macro restore world
 13100 00001C51 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13101                                  
 13102                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13103 00001C52 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13104 00001C56 72C4                    	jc	short CheckNet_retn
 13105                                  
 13106                                  Set_SFT: 
 13107                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13108 00001C58 36C43E[9E05]            	les	di,[ss:THISSFT]
 13109                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13110 00001C5D 36FF36[3C03]            	push	word [ss:PROC_ID]
 13111                                  	;pop	word [es:di+31h]
 13112 00001C62 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13113 00001C66 C3                      	retn				; carry is clear
 13114                                  
 13115                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13116                                  ;----------------------------------------------------------------------------
 13117                                  ;
 13118                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13119                                  ;	unavailable FCB.
 13120                                  ;
 13121                                  ;   Inputs:	none.
 13122                                  ;   Outputs:	none.
 13123                                  ;   Registers modified: all
 13124                                  ;
 13125                                  ;----------------------------------------------------------------------------
 13126                                  
 13127                                  FCBHardErr:
 13128                                  	; 17/05/2019 - Retro DOS v4.0
 13129 00001C67 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13130                                  	;
 13131                                  	;mov	ax,23h
 13132 00001C6C B82300                  	MOV	AX,error_FCB_unavailable
 13133                                  	;;mov	byte [cs:ALLOWED],8
 13134                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13135 00001C6F 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13136                                  	
 13137                                  	;LES	BP,[CS:THISDPB]
 13138 00001C75 26C42E[8A05]            	les	bp,[es:THISDPB]
 13139                                  	
 13140 00001C7A BF0100                  	MOV	DI,1			; Fake some registers
 13141 00001C7D 89F9                    	MOV	CX,DI
 13142                                  	;mov	dx,[es:bp+0Bh]
 13143 00001C7F 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13144 00001C83 E8E436                  	call	HARDERR
 13145 00001C86 F9                      	STC
 13146 00001C87 C3                      	retn
 13147                                  
 13148                                  ;============================================================================
 13149                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13150                                  ;============================================================================
 13151                                  ; 21/07/2018 - Retro DOS v3.0
 13152                                  ; 17/05/2019 - Retro DOS v4.0
 13153                                  
 13154                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13155                                  ;
 13156                                  ;	GetRR
 13157                                  ;	GetExtent
 13158                                  ;	SetExtent
 13159                                  ;	GetExtended
 13160                                  ;	GetRecSize
 13161                                  ;	FCBIO
 13162                                  ;	$FCB_OPEN
 13163                                  ;	$FCB_CREATE
 13164                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13165                                  ;	$FCB_RANDOM_READ_BLOCK
 13166                                  ;	$FCB_SEQ_READ
 13167                                  ;	$FCB_SEQ_WRITE
 13168                                  ;	$FCB_RANDOM_READ
 13169                                  ;	$FCB_RANDOM_WRITE
 13170                                  ;
 13171                                  ;	Revision history:
 13172                                  ;
 13173                                  ;		Created: ARR 4 April 1983
 13174                                  ;			 MZ  6 June  1983 completion of functions
 13175                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13176                                  ;				  times.  Change so successive closes work by
 13177                                  ;				  always returning OK.	Also, detect I/O to
 13178                                  ;				  already closed FCB and return EOF.
 13179                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13180                                  ;				  out of sft into FCB for reconnection
 13181                                  ;
 13182                                  ;	    A000   version 4.00	Jan. 1988
 13183                                  
 13184                                  ; Defintions for FCBOp flags
 13185                                  
 13186                                  RANDOM	equ 2				; random operation
 13187                                  FCBREAD equ 4				; doing a read
 13188                                  BLOCK	equ 8				; doing a block I/O
 13189                                  
 13190                                  ;Break <GetRR - return the random record field in DX:AX>
 13191                                  ;---------------------------------------------------------------------------
 13192                                  ;
 13193                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13194                                  ;	from the FCB pointed to by DS:SI
 13195                                  ;
 13196                                  ;   Inputs:	DS:SI point to an FCB
 13197                                  ;		BX has record size
 13198                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13199                                  ;   Registers modified: none
 13200                                  ;---------------------------------------------------------------------------
 13201                                  
 13202                                  GetRR:
 13203                                  	;mov	ax,[si+21h]
 13204 00001C88 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13205                                  	;mov	dx,[si+23h]
 13206 00001C8B 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13207 00001C8E 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13208 00001C91 7202                    	JB	short GetRRBye
 13209 00001C93 30F6                    	XOR	DH,DH
 13210                                  GetRRBye:
 13211 00001C95 C3                      	retn
 13212                                  
 13213                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13214                                  ;---------------------------------------------------------------------------
 13215                                  ;
 13216                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13217                                  ;	NR fields in the FCB.
 13218                                  ;
 13219                                  ;   Inputs:	DS:SI - point to FCB
 13220                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13221                                  ;   Registers modified: none
 13222                                  ;---------------------------------------------------------------------------
 13223                                  
 13224                                  GetExtent:
 13225                                  	;mov	al,[si+20h]
 13226 00001C96 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13227                                  	;mov	dx,[si+0Ch]
 13228 00001C99 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13229 00001C9C D0E0                    	SHL	AL,1
 13230 00001C9E D1EA                    	SHR	DX,1
 13231 00001CA0 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13232 00001CA2 88D4                    	MOV	AH,DL
 13233 00001CA4 88F2                    	MOV	DL,DH
 13234 00001CA6 30F6                    	XOR	DH,DH
 13235 00001CA8 C3                      	retn
 13236                                  
 13237                                  ;Break <SetExtent - update the extent/NR field>
 13238                                  ;---------------------------------------------------------------------------
 13239                                  ;
 13240                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13241                                  ;	fields
 13242                                  ;
 13243                                  ;   Inputs:	DS:SI point to FCB
 13244                                  ;		DX:AX is a record location in file
 13245                                  ;   Outputs:	Extent/NR fields are filled in
 13246                                  ;   Registers modified: CX
 13247                                  ;---------------------------------------------------------------------------
 13248                                  
 13249                                  SetExtent:
 13250 00001CA9 50                      	push	ax
 13251 00001CAA 52                      	push	dx
 13252 00001CAB 89C1                    	MOV	CX,AX
 13253 00001CAD 247F                    	AND	AL,7FH			; next rec field
 13254                                  	;mov	[si+20h],al
 13255 00001CAF 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13256 00001CB2 80E180                  	AND	CL,80H			; save upper bit
 13257 00001CB5 D1E1                    	SHL	CX,1
 13258 00001CB7 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13259 00001CB9 88E8                    	MOV	AL,CH
 13260 00001CBB 88D4                    	MOV	AH,DL
 13261                                  	;mov	[si+0Ch], ax
 13262 00001CBD 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13263 00001CC0 5A                      	pop	dx
 13264 00001CC1 58                      	pop	ax
 13265 00001CC2 C3                      	retn
 13266                                  
 13267                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13268                                  ;---------------------------------------------------------------------------
 13269                                  ;
 13270                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13271                                  ;
 13272                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13273                                  ;   Outputs:	DS:SI point to the FCB part
 13274                                  ;		zeroflag set if not extended fcb
 13275                                  ;   Registers modified: SI
 13276                                  ;---------------------------------------------------------------------------
 13277                                  
 13278                                  GetExtended:
 13279 00001CC3 89D6                    	MOV	SI,DX			; point to Something
 13280 00001CC5 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13281 00001CC8 7503                    	JNZ	short GetBye		; not there
 13282 00001CCA 83C607                  	ADD	SI,7			; point to FCB
 13283                                  GetBye:
 13284 00001CCD 39D6                    	CMP	SI,DX			; set condition codes
 13285                                  getextd_retn:
 13286 00001CCF C3                      	retn
 13287                                  
 13288                                  ;Break <GetRecSize - return in BX the FCB record size>
 13289                                  ;---------------------------------------------------------------------------
 13290                                  ;
 13291                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13292                                  ;
 13293                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13294                                  ;   Outputs:	BX contains the record size
 13295                                  ;   Registers modified: None
 13296                                  ;---------------------------------------------------------------------------
 13297                                  
 13298                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13299                                  GetRecSize:
 13300                                  	;mov	bx,[si+0Eh]
 13301 00001CD0 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13302 00001CD3 09DB                    	OR	BX,BX			; is it nul?
 13303 00001CD5 74F8                    	jz	short getextd_retn
 13304 00001CD7 BB8000                  	MOV	BX,128			; use default size
 13305                                  	;mov	[si+0Eh],bx
 13306 00001CDA 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13307 00001CDD C3                      	retn
 13308                                  
 13309                                  ;BREAK <FCBIO - do internal FCB I/O>
 13310                                  ;---------------------------------------------------------------------------
 13311                                  ;
 13312                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13313                                  ;
 13314                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13315                                  ;		DS:DX point to FCB
 13316                                  ;		CX may have count of number of records to xfer
 13317                                  ;   Outputs:	AL has error code
 13318                                  ;   Registers modified: all
 13319                                  ;---------------------------------------------------------------------------
 13320                                  
 13321                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13322                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13323                                  FCBIO:
 13324                                  
 13325                                  FEOF	EQU	1
 13326                                  FTRIM	EQU	2
 13327                                  
 13328                                  %define	FCBErr	byte [bp-1]  ; byte	
 13329                                  %define	cRec	word [bp-3]  ; word	
 13330                                  ;%define RecPos	word [bp-7]  ; dword
 13331                                  %define RecPosL	word [bp-7]  ; word
 13332                                  %define RecPosH	word [bp-5]  ; word
 13333                                  %define	RecSize	word [bp-9]  ; word
 13334                                  ;%define bPos	word [bp-13] ; dword
 13335                                  %define bPosL	word [bp-13] ; word
 13336                                  %define bPosH	word [bp-11] ; word
 13337                                  %define cByte	word [bp-15] ; word	
 13338                                  %define cResult word [bp-17] ; word	
 13339                                  %define	cRecRes	word [bp-19] ; word
 13340                                  %define	FCBOp	byte [bp-20] ; byte
 13341                                  
 13342                                  	;Enter
 13343                                  
 13344 00001CDE 55                      	push	bp
 13345 00001CDF 89E5                    	mov	bp,sp
 13346 00001CE1 83EC14                  	sub	sp,20
 13347                                  	;mov	[bp-20],al
 13348 00001CE4 8846EC                  	MOV	FCBOp,AL
 13349                                  	;mov	byte [bp-1],0
 13350 00001CE7 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13351 00001CEB E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13352                                  	;test	byte [bp-20],8
 13353 00001CEE F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13354 00001CF2 7503                    	JNZ	short GetPos
 13355 00001CF4 B90100                  	MOV	CX,1			;	cRec = 1;
 13356                                  GetPos:
 13357                                  	;mov	[bp-3],cx
 13358 00001CF7 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13359 00001CFA E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13360 00001CFD E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13361                                  	;mov	[bp-9],bx
 13362 00001D00 895EF7                  	MOV	RecSize,BX
 13363                                  	;test	byte [bp-20],2
 13364 00001D03 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13365 00001D07 7403                    	JZ	short GetRec
 13366 00001D09 E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13367                                  GetRec:
 13368                                  	;mov	[bp-7],ax
 13369 00001D0C 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13370                                  	;mov	[bp-5],dx
 13371 00001D0F 8956FB                  	MOV	RecPosH,DX
 13372 00001D12 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13373                                  	;mov	ax,[bp-5]
 13374 00001D15 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13375 00001D18 F7E3                    	MUL	BX
 13376 00001D1A 89C7                    	MOV	DI,AX
 13377                                  	;mov	ax,[bp-7]
 13378 00001D1C 8B46F9                  	MOV	AX,RecPosL
 13379 00001D1F F7E3                    	MUL	BX
 13380 00001D21 01FA                    	ADD	DX,DI
 13381                                  	;mov	[bp-13],ax
 13382 00001D23 8946F3                  	MOV	bPosL,AX
 13383                                  	;mov	[bp-11],dx
 13384 00001D26 8956F5                  	MOV	bPosH,DX
 13385                                  	;mov	ax,[bp-3]
 13386 00001D29 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13387 00001D2C F7E3                    	MUL	BX
 13388                                  	;mov	[bp-15],ax
 13389 00001D2E 8946F1                  	MOV	cByte,AX
 13390                                  
 13391                                  ;hkn; 	SS override
 13392 00001D31 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13393 00001D36 83D200                  	ADC	DX,0
 13394 00001D39 7419                    	JZ	short DoOper
 13395                                  	;mov	byte [bp-1],2
 13396 00001D3B C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13397                                  
 13398                                  ;hkn; 	SS override
 13399 00001D3F 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13400 00001D43 F7D8                    	NEG	AX
 13401 00001D45 7501                    	JNZ	short DoDiv
 13402 00001D47 48                      	DEC	AX
 13403                                  DoDiv:
 13404 00001D48 31D2                    	XOR	DX,DX
 13405 00001D4A F7F3                    	DIV	BX
 13406                                  	;mov	[bp-3],ax
 13407 00001D4C 8946FD                  	MOV	cRec,AX
 13408 00001D4F F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13409                                  	;mov	[bp-15],ax
 13410 00001D51 8946F1                  	MOV	cByte,AX		;	}
 13411                                  DoOper:
 13412 00001D54 31DB                    	XOR	BX,BX
 13413                                  	;mov	[bp-17],bx
 13414 00001D56 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13415                                  	;cmp	[bp-15],bx
 13416 00001D59 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13417 00001D5C 7506                    	JNZ	short DoGetExt
 13418                                  	;test	byte [bp-1],2
 13419 00001D5E F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13420                                  	;JZ	short DoGetExt
 13421                                  	;JMP	short SkipOp
 13422                                  	; 16/12/2022
 13423 00001D62 7576                    	jnz	short SkipOp
 13424                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13425                                  	;JZ	short DoGetExt
 13426                                  	;JMP	short SkipOp
 13427                                  DoGetExt:
 13428 00001D64 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13429 00001D67 730F                    	JNC	short ContinueOp
 13430                                  FCBDeath:
 13431 00001D69 E8FCE8                  	call	FCB_RET_ERR		; signal error, map for extended
 13432                                  	;mov	word [bp-19],0
 13433 00001D6C C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13434                                  	;mov	byte [bp-1],1
 13435 00001D71 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13436 00001D75 E9EF00                  	JMP	FCBSave 		; bam!
 13437                                  ContinueOp:
 13438                                  	;mov	ax,[si+10h]
 13439 00001D78 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13440                                  	;mov	[es:di+11h],ax
 13441 00001D7B 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13442                                  	;mov	ax,[si+12h]
 13443 00001D7F 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13444                                  	;mov	[es:di+13h],ax
 13445 00001D82 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13446                                  	;mov	ax,[bp-13]
 13447 00001D86 8B46F3                  	MOV	AX,bPosL
 13448                                  	;mov	dx,[bp-11]
 13449 00001D89 8B56F5                  	MOV	DX,bPosH
 13450                                  	;mov	[es:di+15h],ax
 13451 00001D8C 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13452                                  	;xchg	dx,[es:di+17h]
 13453 00001D90 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13454 00001D94 52                      	PUSH	DX			; save away Open age.
 13455                                  	;mov	cx,[bp-15]
 13456 00001D95 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13457                                  
 13458                                  ;hkn; DOS_Read is in DOSCODE
 13459 00001D98 BF[4033]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13460                                  	;test	byte [bp-20],4
 13461 00001D9B F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13462 00001D9F 7503                    	JNZ	short DoContext
 13463                                  
 13464                                  ;hkn; DOS_Write is in DOSCODE
 13465 00001DA1 BF[6935]                	MOV	DI,DOS_WRITE
 13466                                  DoContext:
 13467 00001DA4 55                      	push	bp
 13468 00001DA5 1E                      	push	ds
 13469 00001DA6 56                      	push	si
 13470                                  
 13471                                  ;hkn; SS is DOSDATA
 13472 00001DA7 16                      	push	ss
 13473 00001DA8 1F                      	pop	ds
 13474                                  
 13475                                  ;; Fix for disk full
 13476 00001DA9 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13477                                  	
 13478 00001DAB 5E                      	pop	si
 13479 00001DAC 1F                      	pop	ds
 13480 00001DAD 5D                      	pop	bp
 13481 00001DAE 72B9                    	JC	short FCBDeath
 13482                                  	
 13483 00001DB0 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13484 00001DB6 740A                    	JZ	short NODSKFULL
 13485 00001DB8 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13486                                  	;mov	byte [bp-1],1 
 13487 00001DBE C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13488                                  NODSKFULL:
 13489                                  ;; Fix for disk full
 13490                                  	;mov	[bp-17],cx
 13491 00001DC2 894EEF                  	MOV	cResult,CX
 13492 00001DC5 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13493                                  	;pop	word [es:di+17h]	
 13494 00001DC8 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13495                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13496                                  	;mov	ax,[es:di+11h]
 13497 00001DCC 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13498                                  	;mov	[si+10h],ax
 13499 00001DD0 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13500                                  	;mov	ax,[es:di+13h]
 13501 00001DD3 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13502                                  	;mov	[si+12h],ax
 13503 00001DD7 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13504                                  					;	}
 13505                                  SkipOp:
 13506                                  	;mov	ax,[bp-17]
 13507 00001DDA 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13508 00001DDD 31D2                    	XOR	DX,DX
 13509                                  	;div	word [bp-9]
 13510 00001DDF F776F7                  	DIV	RecSize
 13511                                  	;mov	[bp-19],ax
 13512 00001DE2 8946ED                  	MOV	cRecRes,AX
 13513                                  	;add	[bp-7],ax
 13514 00001DE5 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13515                                  	;adc	word [bp-5],0
 13516 00001DE8 8356FB00                	ADC	RecPosH,0
 13517                                  
 13518                                  ; If we have not gotten the expected number of records, we signal an EOF
 13519                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13520                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13521                                  ; do we.
 13522                                  
 13523                                  	;cmp	ax,[bp-3]
 13524 00001DEC 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13525 00001DEF 7411                    	JZ	short TryBlank
 13526                                  	;test	byte [bp-20],4
 13527 00001DF1 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13528 00001DF5 7507                    	JNZ	short SetEOF
 13529                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13530                                  	; MSDOS 3.3
 13531                                  	;;test	word [es:di+5],80h
 13532                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13533                                  	;JNZ	short TryBlank
 13534                                  	; MSDOS 5.0 & MSDOS 6.0
 13535                                  	;test	byte [es:di+5],80h
 13536 00001DF7 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13537 00001DFC 7504                    	jnz	short TryBlank
 13538                                  
 13539                                  SetEOF:
 13540                                  	;mov	byte [bp-1],1
 13541 00001DFE C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13542                                  TryBlank:				;
 13543 00001E02 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13544 00001E04 7426                    	JZ	short SetExt
 13545                                  	;add	word [bp-7],1
 13546 00001E06 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13547                                  	;adc	word [bp-5],0
 13548 00001E0A 8356FB00                	ADC	RecPosH,0
 13549                                  	;test	byte [bp-20],4
 13550 00001E0E F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13551 00001E12 7418                    	JZ	short SetExt
 13552                                  	;inc	word [bp-19]
 13553 00001E14 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13554                                  	;mov	byte [bp-1],3
 13555 00001E17 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13556                                  	;mov	cx,[bp-9]
 13557 00001E1B 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13558 00001E1E 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13559 00001E20 30C0                    	XOR	AL,AL
 13560                                  ;hkn; 	SS override
 13561 00001E22 36C43E[2C03]            	les     di,[ss:DMAADD]
 13562                                  	;add	di,[bp-17]
 13563 00001E27 037EEF                  	ADD	DI,cResult
 13564 00001E2A F3AA                    	REP	STOSB			;   }	}
 13565                                  SetExt:
 13566                                  	;mov	dx,[bp-5]
 13567 00001E2C 8B56FB                  	MOV	DX,RecPosH
 13568                                  	;mov	ax,[bp-7]
 13569 00001E2F 8B46F9                  	MOV	AX,RecPosL
 13570                                  	;test	byte [bp-20],2
 13571 00001E32 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13572 00001E36 7406                    	JZ	short DoSetExt
 13573                                  	;test	byte [bp-20],8
 13574 00001E38 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13575 00001E3C 7403                    	JZ	short TrySetRR
 13576                                  DoSetExt:
 13577 00001E3E E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13578                                  TrySetRR:
 13579                                  	;test	byte [bp-20],8
 13580 00001E41 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13581 00001E45 740F                    	JZ	short TryReturn
 13582                                  	;mov	[si+21h],ax
 13583 00001E47 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13584                                  	;mov	[si+23h],dl
 13585 00001E4A 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13586                                  	;cmp	word [si+0Eh],64
 13587 00001E4D 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13588 00001E51 7303                    	JAE	short TryReturn
 13589                                  	;mov	[si+24h],dh
 13590 00001E53 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13591                                  TryReturn: 
 13592                                  	;test	byte [bp-20],4
 13593 00001E56 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13594 00001E5A 750B                    	JNZ	short FCBSave
 13595 00001E5C 1E                      	push	ds			;	FCB->FDate = date;
 13596 00001E5D E8AFEC                  	call	DATE16			;	FCB->FTime = time;
 13597 00001E60 1F                      	pop	ds
 13598                                  	;mov	[si+14h],ax
 13599 00001E61 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13600                                  	;mov	[si+16h],dx
 13601 00001E64 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13602                                  FCBSave: 
 13603                                  	;test	byte [bp-20],8
 13604 00001E67 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13605 00001E6B 7409                    	jz	short DoReturn
 13606                                  	;mov	cx,[bp-19]
 13607 00001E6D 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13608 00001E70 E81CE6                  	call    Get_User_Stack
 13609                                  	;mov	[si+4],cx
 13610 00001E73 894C04                  	MOV	[SI+user_env.user_CX],CX
 13611                                  DoReturn:
 13612                                  	;mov	al,[bp-1]
 13613 00001E76 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13614                                  	;Leave	
 13615 00001E79 89EC                    	mov     sp,bp
 13616 00001E7B 5D                      	pop     bp
 13617 00001E7C C3                      	retn
 13618                                  
 13619                                  ; 22/07/2018 - Retro DOS v3.0
 13620                                  
 13621                                  ;Break <$FCB_Open - open an old-style FCB>
 13622                                  ;---------------------------------------------------------------------------
 13623                                  ;
 13624                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13625                                  ;	for us and asked to have the rest filled in.
 13626                                  ;
 13627                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13628                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13629                                  ;		FCB has the following fields filled in:
 13630                                  ;		    Time/Date Extent/NR Size
 13631                                  ;---------------------------------------------------------------------------
 13632                                  
 13633                                  _$FCB_OPEN:			; System call 15
 13634                                  
 13635 00001E7D B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13636                                  
 13637                                  ;hkn; DOS_Open is in DOSCODE
 13638 00001E80 B9[E02B]                	MOV	CX,DOS_OPEN
 13639                                  
 13640                                  ; The following is common code for Creation and openning of FCBs. AX is
 13641                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13642                                  ; the FCB
 13643                                  
 13644                                  DoAccess:
 13645 00001E83 1E                      	push	ds
 13646 00001E84 52                      	push	dx
 13647 00001E85 51                      	push	cx
 13648 00001E86 50                      	push	ax			; save FCB pointer away
 13649                                  
 13650                                  ;hkn; 	OpenBuf is in DOSDATA
 13651 00001E87 BF[BE03]                	MOV	DI,OPENBUF
 13652 00001E8A E8EC4C                  	call	TransFCB		; crunch the fcb
 13653 00001E8D 58                      	pop	ax
 13654 00001E8E 59                      	pop	cx
 13655 00001E8F 5A                      	pop	dx
 13656 00001E90 1F                      	pop	ds			; get fcb
 13657 00001E91 7303                    	JNC	short FindFCB		; everything seems ok
 13658                                  FCBOpenErr:
 13659                                  	; AL has error code
 13660 00001E93 E9D2E7                  	jmp	FCB_RET_ERR
 13661                                  FindFCB:
 13662 00001E96 E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13663                                  
 13664                                  	; 17/05/2019 - Retro DOS v4.0
 13665                                  
 13666                                  	; MSDOS 3.3
 13667                                  	;call	LRUFCB
 13668                                  	;jc	short HardMessage
 13669                                  
 13670                                  	; MSDOS 6.0
 13671 00001E99 50                      	push	ax
 13672 00001E9A B001                    	mov	al,1			;indicate Open/Create operation
 13673 00001E9C E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13674 00001E9F 58                      	pop	ax
 13675 00001EA0 722A                    	jc	short HardMessage
 13676                                  	
 13677                                  	;mov	word [es:di+2],8000h
 13678 00001EA2 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13679 00001EA8 1E                      	push	ds
 13680 00001EA9 56                      	push	si	
 13681 00001EAA 53                      	push	bx			; save fcb pointer
 13682 00001EAB 89CE                    	MOV	SI,CX
 13683                                  
 13684                                  ;hkn; SS is DOSDATA
 13685 00001EAD 16                      	push	ss
 13686 00001EAE 1F                      	pop	ds			    ; let DOS_Open see variables
 13687 00001EAF FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13688 00001EB1 5B                      	pop	bx
 13689 00001EB2 5E                      	pop	si
 13690 00001EB3 1F                      	pop	ds			; get fcb
 13691                                  
 13692                                  ;hkn; SS override
 13693 00001EB4 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13694 00001EB9 7318                    	JNC	short FCBOK		; operation succeeded
 13695                                  failopen:
 13696 00001EBB 50                      	PUSH	AX
 13697 00001EBC B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13698 00001EBE E8E5FC                  	call	BlastSFT
 13699 00001EC1 58                      	POP	AX
 13700                                  	;cmp	ax,4
 13701 00001EC2 83F804                  	CMP	AX,error_too_many_open_files
 13702 00001EC5 7405                    	JZ	short HardMessage
 13703                                  	;cmp	ax,24h
 13704 00001EC7 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13705 00001ECA 7505                    	jnz	short DeadFCB
 13706                                  HardMessage:
 13707 00001ECC 50                      	PUSH	AX
 13708 00001ECD E897FD                  	call	FCBHardErr
 13709 00001ED0 58                      	POP	AX
 13710                                  DeadFCB:
 13711                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13712                                  	;jmp	FCB_RET_ERR
 13713 00001ED1 EBC0                    	jmp	short FCBOpenErr
 13714                                  FCBOK:
 13715                                  	; MSDOS 6.0
 13716 00001ED3 E8D5F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13717 00001ED6 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13718 00001ED8 E8CA54                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13719 00001EDB 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13720                                  ;SR;
 13721                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13722                                  ; LocalSFT variable to reflect this.
 13723                                  
 13724 00001EDD 36893E[4310]            	mov	[ss:LocalSFT],di
 13725 00001EE2 368C06[4510]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13726                                  ;;SR;
 13727                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13728                                  ;;
 13729                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13730                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13731                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13732                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13733                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13734                                  
 13735                                  FCBOK2:
 13736                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13737 00001EE7 26FF05                  	inc	word [es:di]
 13738                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13739 00001EEA E802FA                  	call	SaveFCBInfo
 13740                                  	; MSDOS 3.3
 13741                                  	;call	SetOpenAge
 13742                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13743                                  	;test	word [es:di+5],80h
 13744                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13745 00001EED 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13746 00001EF2 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13747 00001EF4 8A04                    	MOV	AL,[SI]			; get drive byte
 13748 00001EF6 E80B4C                  	call	GETTHISDRV		; convert
 13749                                  	;INC	AL
 13750                                  	; 17/12/2022
 13751 00001EF9 40                      	inc	ax
 13752 00001EFA 8804                    	MOV	[SI],AL			; stash in good drive letter
 13753                                  FCBNoDrive:
 13754                                  	;mov	word [si+0Eh],128
 13755 00001EFC C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13756                                  
 13757                                  	;mov	ax,[es:di+0Dh]
 13758 00001F01 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13759                                  	;mov	[si+16h],ax
 13760 00001F05 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13761                                  	;mov	ax,[es:di+0Fh]
 13762 00001F08 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13763                                  	;mov	[si+14h],ax
 13764 00001F0C 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13765                                  	;mov	ax,[es:di+11h]
 13766 00001F0F 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13767                                  	;mov	[si+10h],ax
 13768 00001F13 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13769                                  	;mov	ax,[es:di+13h]
 13770 00001F16 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13771                                  	;mov	[si+12h],ax
 13772 00001F1A 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13773 00001F1D 31C0                    	XOR	AX,AX			; convenient zero
 13774                                  	;mov	[si+0Ch],ax
 13775 00001F1F 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13776                                  
 13777                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13778                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13779                                  
 13780                                  ;hkn; 	SS override
 13781 00001F22 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13782                                  	;mov	ah,[es:di+4]
 13783 00001F27 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13784                                  OpenScan:
 13785                                  	;cmp	al,[si+18h]
 13786 00001F2B 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13787 00001F2E 7407                    	JZ	short SkipCheck
 13788 00001F30 50                      	push	ax			; preserve count
 13789 00001F31 E888FC                  	call	CheckFCB		; do they match
 13790 00001F34 58                      	pop	ax			; get count back
 13791 00001F35 7309                    	JNC	short OpenFound		; found a match!
 13792                                  SkipCheck:
 13793 00001F37 FEC0                    	INC	AL			; advance to next FCB
 13794 00001F39 38E0                    	CMP	AL,AH			; table full?
 13795 00001F3B 75EE                    	JNZ	short OpenScan		; no, go for more
 13796                                  OpenDone:
 13797 00001F3D 30C0                    	xor	al,al			; return success
 13798 00001F3F C3                      	retn
 13799                                  
 13800                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13801                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13802                                  ; Consider:
 13803                                  ;
 13804                                  ;   open (foo)	delete (foo) open (bar)
 13805                                  ;
 13806                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13807                                  ; foo even though foo is no longer needed; this is due to the server closing
 13808                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13809                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13810                                  ; bar and subsequent I/O would be lost to the redirector.
 13811                                  ;
 13812                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13813                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13814                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13815                                  ; around. This will allow us to access the same file through multiple network
 13816                                  ; connections and NOT prematurely terminate when the ref count on one
 13817                                  ; connection goes to zero.
 13818                                  
 13819                                  OpenFound:
 13820                                  	;mov	[si+18h],al
 13821 00001F40 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13822 00001F43 26FF05                  	inc	word [es:di]
 13823                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13824                                  					; remember this new invocation
 13825 00001F46 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13826                                  	;mov	[es:di+15h],ax
 13827 00001F4A 26894515                	MOV	[ES:DI+sf_LRU],AX
 13828                                  ;
 13829                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13830                                  ; blast it to prevent other reuse.
 13831                                  ;
 13832 00001F4E 16                      	push	ss
 13833 00001F4F 1F                      	pop	ds
 13834 00001F50 C43E[9E05]              	LES	DI,[THISSFT]
 13835 00001F54 26FF0D                  	dec	word [es:di]
 13836                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13837                                  					; free the newly allocated SFT
 13838 00001F57 E88354                  	call	ShareEnd
 13839 00001F5A B043                    	MOV	AL,'C'	 ; 43h
 13840 00001F5C E847FC                  	call	BlastSFT
 13841 00001F5F EBDC                    	JMP	short OpenDone
 13842                                  
 13843                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13844                                  ;----------------------------------------------------------------------------
 13845                                  ;
 13846                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13847                                  ;	FCB for us and asked to have the rest filled in.
 13848                                  ;
 13849                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13850                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13851                                  ;		FCB has the following fields filled in:
 13852                                  ;		    Time/Date Extent/NR Size
 13853                                  ;----------------------------------------------------------------------------
 13854                                  
 13855                                  _$FCB_CREATE:		; System call 22
 13856                                  
 13857                                  ;hkn; DOS_Create is in DOSCODE
 13858 00001F61 B9[B62A]                	MOV	CX,DOS_CREATE		; routine to call
 13859 00001F64 31C0                    	XOR	AX,AX			; attributes to create
 13860 00001F66 E85AFD                  	call	GetExtended		; get extended FCB
 13861 00001F69 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13862 00001F6B 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13863                                  DoAccessJ:
 13864 00001F6E E912FF                  	JMP	DoAccess		; do dirty work
 13865                                  
 13866                                  ; 22/07/2018 - Retro DOS v3.0
 13867                                  
 13868                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13869                                  ;----------------------------------------------------------------------------
 13870                                  ;
 13871                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13872                                  ;	and write a number of blocks from it.
 13873                                  ;
 13874                                  ;   Inputs:	DS:DX point to an FCB
 13875                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13876                                  ;		AL <> 0 Not enough room on disk for the output
 13877                                  ;
 13878                                  ;----------------------------------------------------------------------------
 13879                                  
 13880                                  _$FCB_RANDOM_WRITE_BLOCK:
 13881                                  	;mov	AL,0Ah	
 13882 00001F71 B00A                    	MOV	AL,RANDOM+BLOCK
 13883 00001F73 E968FD                  	JMP	FCBIO
 13884                                  
 13885                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13886                                  ;----------------------------------------------------------------------------
 13887                                  ;
 13888                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13889                                  ;	and read a number of blocks from it.
 13890                                  ;
 13891                                  ;   Inputs:	DS:DX point to an FCB
 13892                                  ;   Outputs:	AL = error codes defined above
 13893                                  ;
 13894                                  ;----------------------------------------------------------------------------
 13895                                  
 13896                                  _$FCB_RANDOM_READ_BLOCK:
 13897                                  	;mov	AL,0Eh	
 13898 00001F76 B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13899 00001F78 E963FD                  	JMP	FCBIO
 13900                                  
 13901                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13902                                  ;----------------------------------------------------------------------------
 13903                                  ;
 13904                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13905                                  ;	memory
 13906                                  ;
 13907                                  ;   Inputs:	DS:DX point to an FCB
 13908                                  ;   Outputs:	AL = error codes defined above
 13909                                  ;
 13910                                  ;----------------------------------------------------------------------------
 13911                                  
 13912                                  _$FCB_SEQ_READ:
 13913                                  	;mov	AL,4	
 13914 00001F7B B004                    	MOV	AL,FCBREAD
 13915 00001F7D E95EFD                  	JMP	FCBIO
 13916                                  
 13917                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13918                                  ;----------------------------------------------------------------------------
 13919                                  ;
 13920                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13921                                  ;	file
 13922                                  ;
 13923                                  ;   Inputs:	DS:DX point to an FCB
 13924                                  ;   Outputs:	AL = error codes defined above
 13925                                  ;
 13926                                  ;----------------------------------------------------------------------------
 13927                                  
 13928                                  _$FCB_SEQ_WRITE:
 13929 00001F80 B000                    	MOV	AL,0
 13930 00001F82 E959FD                  	jmp	FCBIO
 13931                                  
 13932                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13933                                  ;----------------------------------------------------------------------------
 13934                                  ;
 13935                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13936                                  ;	record from it.
 13937                                  ;
 13938                                  ;   Inputs:	DS:DX point to an FCB
 13939                                  ;   Outputs:	AL = error codes defined above
 13940                                  ;
 13941                                  ;----------------------------------------------------------------------------
 13942                                  
 13943                                  _$FCB_RANDOM_READ:
 13944                                  	;mov	AL,6	
 13945 00001F85 B006                    	MOV	AL,RANDOM+FCBREAD
 13946 00001F87 E954FD                  	jmp	FCBIO			; single block
 13947                                  
 13948                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13949                                  ;----------------------------------------------------------------------------
 13950                                  ;
 13951                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13952                                  ;	a record to it.
 13953                                  ;
 13954                                  ;   Inputs:	DS:DX point to an FCB
 13955                                  ;   Outputs:	AL = error codes defined above
 13956                                  ;
 13957                                  ;----------------------------------------------------------------------------
 13958                                  
 13959                                  _$FCB_RANDOM_WRITE:
 13960                                  	;mov	AL,2	
 13961 00001F8A B002                    	MOV	AL,RANDOM
 13962 00001F8C E94FFD                  	jmp	FCBIO
 13963                                  
 13964                                  ;============================================================================
 13965                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13966                                  ;============================================================================
 13967                                  ; 22/07/2018 - Retro DOS v3.0
 13968                                  ; 17/05/2019 - Retro DOS v4.0
 13969                                  
 13970                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13971                                  
 13972                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13973                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13974                                  
 13975                                  ;**	Search.asm
 13976                                  ;----------------------------------------------------------------------------
 13977                                  ;	Directory search system calls.
 13978                                  ;	These will be passed direct text of the pathname from the user. 
 13979                                  ;	They will need to be passed through the macro expander prior to
 13980                                  ;	being sent through the low-level stuff. 
 13981                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13982                                  ;
 13983                                  ;	$Dir_Search_First	  written
 13984                                  ;	$Dir_Search_Next	  written
 13985                                  ;	$Find_First	  written
 13986                                  ;	$Find_Next		  written
 13987                                  ;	PackName		  written
 13988                                  ;
 13989                                  ;	Modification history:
 13990                                  ;
 13991                                  ;	  Created: ARR 4 April 1983
 13992                                  
 13993                                  ;----------------------------------------------------------------------------
 13994                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13995                                  ;
 13996                                  ; Inputs:
 13997                                  ;	DS:DX Points to unopenned FCB
 13998                                  ; Function:
 13999                                  ;	Directory is searched for first matching entry and the directory
 14000                                  ;	entry is loaded at the disk transfer address
 14001                                  ; Returns:
 14002                                  ;	AL = -1 if no entries matched, otherwise 0
 14003                                  ;----------------------------------------------------------------------------
 14004                                  
 14005                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14006                                  
 14007                                  _$DIR_SEARCH_FIRST:
 14008 00001F8F 368916[A605]            	MOV	[SS:THISFCB],DX
 14009 00001F94 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14010 00001F99 89D6                    	MOV	SI,DX
 14011 00001F9B 803CFF                  	CMP	BYTE [SI],0FFH
 14012 00001F9E 7503                    	JNZ	short NORMFCB4
 14013 00001FA0 83C607                  	ADD	SI,7			; Point to drive select byte
 14014                                  NORMFCB4:
 14015 00001FA3 FF34                    	push	word [SI]		; Save original drive byte for later
 14016                                  
 14017 00001FA5 16                      	push	ss
 14018 00001FA6 07                      	pop	es			; get es to address DOSGroup
 14019                                  
 14020 00001FA7 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14021 00001FAA E8CC4B                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14022 00001FAD 7304                    	JNC	short SearchIt		; no error, go and look
 14023 00001FAF 5B                      	pop	bx			; Clean stack
 14024                                  
 14025                                  ; Error code is in AX
 14026                                  
 14027                                  	; 09/11/2022
 14028                                  dcf_errj:
 14029 00001FB0 E9B5E6                  	jmp	FCB_RET_ERR		; error
 14030                                  
 14031                                  SearchIt:
 14032 00001FB3 16                      	push	ss
 14033 00001FB4 1F                      	pop	ds			; get ready for search
 14034 00001FB5 FF36[2C03]              	push	word [DMAADD]
 14035 00001FB9 FF36[2E03]              	push	word [DMAADD+2]
 14036 00001FBD C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14037 00001FC3 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14038                                  	; MSDOS 3.3
 14039                                  	;call	DOS_SEARCH_FIRST
 14040                                  	; MSDOS 6.0
 14041 00001FC7 E88501                  	call	GET_FAST_SEARCH		; search
 14042 00001FCA 8F06[2E03]              	pop	word [DMAADD+2]
 14043 00001FCE 8F06[2C03]              	pop	word [DMAADD]
 14044 00001FD2 7303                    	JNC	short SearchSet		; no error, transfer info
 14045 00001FD4 5B                      	pop	bx			; Clean stack
 14046                                  
 14047                                  ; Error code is in AX
 14048                                  
 14049                                  	; 09/11/2022
 14050                                  	;jmp	FCB_RET_ERR
 14051 00001FD5 EBD9                    	jmp	short dcf_errj
 14052                                  
 14053                                  ; The search was successful (or the search-next). We store the information
 14054                                  ; into the user's FCB for continuation.
 14055                                  
 14056                                  SearchSet:
 14057 00001FD7 BE[BE04]                	MOV	SI,SEARCHBUF
 14058 00001FDA C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14059 00001FDE F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14060 00001FE3 7403                    	JZ	short NORMFCB1
 14061 00001FE5 83C707                  	ADD	DI,7			; Point past the extension
 14062                                  NORMFCB1:
 14063 00001FE8 5B                      	pop	bx			; Get original drive byte
 14064 00001FE9 08DB                    	OR	BL,BL
 14065 00001FEB 7506                    	JNZ	short SearchDrv
 14066 00001FED 8A1E[3603]              	MOV	BL,[CURDRV]
 14067 00001FF1 FEC3                    	INC	BL
 14068                                  SearchDrv:
 14069 00001FF3 AC                      	LODSB				; Get correct search contin drive byte
 14070 00001FF4 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14071 00001FF6 47                      	INC	DI
 14072                                  	;STOSB				; Store the correct "user" drive byte
 14073                                  					;  at the start of the search info
 14074 00001FF7 B90A00                  	MOV	CX,20/2
 14075 00001FFA F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14076 00001FFC 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14077                                  					;   byte to AL
 14078 00001FFE AA                      	STOSB				; Search contin drive byte at end of
 14079                                  					;   contin info
 14080 00001FFF C43E[2C03]              	LES	DI,[DMAADD]
 14081 00002003 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14082 00002008 740D                    	JZ	short NORMFCB2
 14083 0000200A B0FF                    	MOV	AL,0FFh
 14084 0000200C AA                      	STOSB
 14085 0000200D FEC0                    	INC	AL
 14086                                  	;MOV	CX,5
 14087                                  	; 17/12/2022
 14088 0000200F B105                    	mov	cl,5
 14089 00002011 F3AA                    	REP	STOSB
 14090 00002013 A0[6D05]                	MOV	AL,[SATTRIB]
 14091 00002016 AA                      	STOSB
 14092                                  NORMFCB2:
 14093 00002017 88D8                    	MOV	AL,BL			; User Drive byte
 14094 00002019 AA                      	STOSB
 14095                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14096                                  	; 17/12/2022
 14097 0000201A B110                    	mov	cl,16
 14098 0000201C F3A5                    	REP	MOVSW
 14099 0000201E E944E6                  	jmp	FCB_RET_OK
 14100                                  
 14101                                  ;----------------------------------------------------------------------------
 14102                                  ;
 14103                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14104                                  ;
 14105                                  ; Inputs:
 14106                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14107                                  ; Function:
 14108                                  ;	Directory is searched for the next matching entry and the directory
 14109                                  ;	entry is loaded at the disk transfer address
 14110                                  ; Returns:
 14111                                  ;	AL = -1 if no entries matched, otherwise 0
 14112                                  ;----------------------------------------------------------------------------
 14113                                  
 14114                                  _$DIR_SEARCH_NEXT:
 14115 00002021 368916[A605]            	MOV	[SS:THISFCB],DX
 14116 00002026 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14117 0000202B 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14118 00002031 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14119                                  
 14120 00002037 16                      	push	ss
 14121 00002038 07                      	pop	es
 14122                                  
 14123 00002039 BF[BE04]                	MOV	DI,SEARCHBUF
 14124                                  
 14125 0000203C 89D6                    	MOV	SI,DX
 14126 0000203E 803CFF                  	CMP	BYTE [SI],0FFh
 14127 00002041 750D                    	JNZ	short NORMFCB6
 14128 00002043 83C606                  	ADD	SI,6
 14129 00002046 AC                      	LODSB
 14130                                  
 14131 00002047 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14132 0000204B 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14133                                  NORMFCB6:
 14134 00002050 AC                      	LODSB				; Get original user drive byte
 14135 00002051 50                      	push	ax			; Put it on stack
 14136 00002052 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14137 00002055 AA                      	STOSB				; Put in correct place
 14138 00002056 B90A00                  	MOV	CX,20/2
 14139 00002059 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14140                                  
 14141 0000205B 16                      	push	ss
 14142 0000205C 1F                      	pop	ds
 14143                                  
 14144 0000205D FF36[2C03]              	push	word [DMAADD]
 14145 00002061 FF36[2E03]              	push	word [DMAADD+2]
 14146 00002065 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14147 0000206B 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14148 0000206F E8220E                  	call	DOS_SEARCH_NEXT 	; Find it
 14149 00002072 8F06[2E03]              	pop	word [DMAADD+2]
 14150 00002076 8F06[2C03]              	pop	word [DMAADD]
 14151 0000207A 7203                    	JC	short SearchNoMore
 14152 0000207C E958FF                  	JMP	SearchSet		; Ok set return
 14153                                  
 14154                                  SearchNoMore:
 14155 0000207F C43E[A605]              	LES	DI,[THISFCB]
 14156 00002083 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14157 00002088 7403                    	JZ	short NORMFCB8
 14158 0000208A 83C707                  	ADD	DI,7			; Point past the extension
 14159                                  NORMFCB8:
 14160 0000208D 5B                      	pop	bx			; Get original drive byte
 14161 0000208E 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14162                                  					;  at the right spot
 14163                                  ; error code is in AX
 14164                                  
 14165 00002091 E9D4E5                  	jmp	FCB_RET_ERR
 14166                                  
 14167                                  ; 17/05/2019 - Retro DOS v4.0
 14168                                  
 14169                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14170                                  
 14171                                  ;---------------------------------------------------------------------------
 14172                                  ;
 14173                                  ;   Procedure Name : $FIND_FIRST
 14174                                  ; 
 14175                                  ;   Assembler usage:
 14176                                  ;	    MOV AH, FindFirst
 14177                                  ;	    LDS DX, name
 14178                                  ;	    MOV CX, attr
 14179                                  ;	    INT 21h
 14180                                  ;	; DMA address has datablock
 14181                                  ;
 14182                                  ;   Error Returns:
 14183                                  ;	    AX = error_path_not_found
 14184                                  ;	       = error_no_more_files
 14185                                  ;---------------------------------------------------------------------------
 14186                                  
 14187                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14188                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14189                                  
 14190                                  _$FIND_FIRST:
 14191 00002094 89D6                    	MOV	SI,DX			; get name in appropriate place
 14192 00002096 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14193                                  
 14194 0000209B BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14195                                  
 14196 0000209E E83E4B                  	call	TransPathSet		; convert the path
 14197 000020A1 7305                    	JNC	short Find_it 		; no error, go and look
 14198                                  FindError:
 14199                                  	;mov	al,3
 14200 000020A3 B003                    	mov	al, error_path_not_found ; error and map into one.
 14201                                  	; 09/11/2022
 14202                                  FF_errj:
 14203 000020A5 E9AAE5                  	jmp	SYS_RET_ERR
 14204                                  Find_it:
 14205 000020A8 16                      	push	ss
 14206 000020A9 1F                      	pop	ds
 14207                                  
 14208 000020AA FF36[2C03]              	push	word [DMAADD]
 14209 000020AE FF36[2E03]              	push	word [DMAADD+2]
 14210 000020B2 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14211 000020B8 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14212                                  	; MSDOS 3.3
 14213                                  	;call	DOS_SEARCH_FIRST
 14214                                  	; MSDOS 6.0
 14215 000020BC E89000                  	call	GET_FAST_SEARCH 	; search
 14216 000020BF 8F06[2E03]              	pop	word [DMAADD+2]
 14217 000020C3 8F06[2C03]              	pop	word [DMAADD]
 14218                                  	
 14219                                  	; 16/12/2022
 14220                                  	;JNC	short FindSet 		; no error, transfer info
 14221 000020C7 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14222                                  	;
 14223                                  	;jmp	SYS_RET_ERR
 14224                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14225                                  ;FFF_errj:
 14226                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14227                                  
 14228                                  FindSet:
 14229 000020C9 BE[BE04]                	MOV	SI,SEARCHBUF
 14230 000020CC C43E[2C03]              	LES	DI,[DMAADD]
 14231 000020D0 B91500                  	MOV	CX,21
 14232 000020D3 F3A4                    	REP	MOVSB
 14233 000020D5 56                      	PUSH	SI			; Save pointer to start of entry
 14234                                  	;mov	al,[si+0Bh]
 14235 000020D6 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14236 000020D9 AA                      	STOSB
 14237                                  	;add	si,16h ; 22
 14238 000020DA 83C616                  	ADD	SI,dir_entry.dir_time
 14239 000020DD A5                      	MOVSW				; dir_time
 14240 000020DE A5                      	MOVSW				; dir_date
 14241 000020DF 46                      	INC	SI
 14242 000020E0 46                      	INC	SI			; Skip dir_first
 14243 000020E1 A5                      	MOVSW				; dir_size (2 words)
 14244 000020E2 A5                      	MOVSW
 14245 000020E3 5E                      	POP	SI			; Point back to dir_name
 14246 000020E4 E83500                   	CALL	PackName
 14247 000020E7 E95FE5                  	jmp	SYS_RET_OK		; bye with no errors
 14248                                  
 14249                                  ;---------------------------------------------------------------------------
 14250                                  ;
 14251                                  ;   Procedure Name : $FIND_NEXT
 14252                                  ;
 14253                                  ;   Assembler usage:
 14254                                  ;	; dma points at area returned by find_first
 14255                                  ;	    MOV AH, findnext
 14256                                  ;	    INT 21h
 14257                                  ;	; next entry is at dma
 14258                                  ;
 14259                                  ;   Error Returns:
 14260                                  ;	    AX = error_no_more_files
 14261                                  ;---------------------------------------------------------------------------
 14262                                  
 14263                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14264                                  _$FIND_NEXT:
 14265 000020EA 16                      	push	ss
 14266 000020EB 07                      	pop	es
 14267                                  
 14268 000020EC BF[BE04]                	MOV	DI,SEARCHBUF
 14269                                  
 14270 000020EF 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14271                                  
 14272 000020F4 B91500                  	MOV	CX,21
 14273 000020F7 F3A4                    	REP	MOVSB			; Put the search continuation info
 14274                                  					;  in the right place
 14275 000020F9 16                      	push	ss
 14276 000020FA 1F                      	pop	ds			; get ready for search
 14277                                  	
 14278 000020FB FF36[2C03]              	push	word [DMAADD]
 14279 000020FF FF36[2E03]              	push	word [DMAADD+2]
 14280 00002103 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14281 00002109 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14282 0000210D E8840D                  	call	DOS_SEARCH_NEXT 	; Find it
 14283 00002110 8F06[2E03]              	pop	word [DMAADD+2]
 14284 00002114 8F06[2C03]              	pop	word [DMAADD]
 14285 00002118 73AF                    	JNC	short FindSet 		; No error, set info
 14286                                  	;jmp	SYS_RET_ERR
 14287                                  	; 16/12/2022
 14288 0000211A EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14289                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14290                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14291                                  
 14292                                  ;---------------------------------------------------------------------------
 14293                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14294                                  ;
 14295                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14296                                  ;	the ASCIZ format.
 14297                                  ;
 14298                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14299                                  ;		(ES:DI) = destination area (13 bytes)
 14300                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14301                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14302                                  ;---------------------------------------------------------------------------
 14303                                  
 14304                                  PackName:
 14305                                  ;	Move over 8 characters to cover the name component, then trim it's
 14306                                  ;	trailing blanks.
 14307                                  
 14308 0000211C B90800                  	MOV	CX,8			; Pack the name
 14309 0000211F F3A4                    	REP	MOVSB			; Move all of it
 14310                                  main_kill_tail:
 14311 00002121 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14312 00002126 7507                    	JNZ	short find_check_dot
 14313 00002128 4F                      	DEC	DI			; Back up over trailing space
 14314 00002129 41                      	INC	CX
 14315 0000212A 83F908                  	CMP	CX,8
 14316 0000212D 72F2                    	JB	short main_kill_tail
 14317                                  find_check_dot:
 14318                                  	;CMP	WORD [SI],(" " << 8) | " "
 14319 0000212F 813C2020                	cmp     word [si],2020h 
 14320 00002133 7506                    	JNZ	short got_ext 		; Some chars in extension
 14321 00002135 807C0220                	CMP	BYTE [SI+2]," "
 14322 00002139 7410                    	JZ	short find_done		; No extension
 14323                                  got_ext:
 14324 0000213B B02E                    	MOV	AL,"."	; 2Eh
 14325 0000213D AA                      	STOSB
 14326                                  	;MOV	CX,3
 14327                                  	; 18/12/2022
 14328                                  	;mov	cl,3
 14329                                  	;REP	MOVSB
 14330 0000213E A4                      	movsb
 14331 0000213F A4                      	movsb
 14332 00002140 A4                      	movsb
 14333                                  ext_kill_tail:
 14334 00002141 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14335 00002146 7503                    	JNZ	short find_done
 14336 00002148 4F                      	DEC	DI			; Back up over trailing space
 14337 00002149 EBF6                    	JMP	short ext_kill_tail
 14338                                  find_done:
 14339 0000214B 31C0                    	XOR	AX,AX
 14340 0000214D AA                      	STOSB				; NUL terminate
 14341 0000214E C3                      	retn
 14342                                  
 14343                                  ;---------------------------------------------------------------------------
 14344                                  
 14345                                  	; 17/05/2019 - Retro DOS v4.0
 14346                                  GET_FAST_SEARCH:
 14347                                  	; 22/07/2018
 14348                                  	; MSDOS 6.0
 14349                                  	; 17/12/2022
 14350 0000214F 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14351                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14352                                  					;FO.trigger fastopen ;AN000;
 14353                                  	;call	DOS_SEARCH_FIRST
 14354                                  	;retn
 14355                                  	; 17/12/2022
 14356 00002155 E9500C                  	jmp	DOS_SEARCH_FIRST
 14357                                  
 14358                                  ;============================================================================
 14359                                  ; PATH.ASM, MSDOS 6.0, 1991
 14360                                  ;============================================================================
 14361                                  ; 06/08/2018 - Retro DOS v3.0
 14362                                  ; 17/05/2019 - Retro DOS v4.0
 14363                                  
 14364                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14365                                  
 14366                                  ;**	Directory related system calls. These will be passed direct text of the
 14367                                  ;	pathname from the user. They will need to be passed through the macro
 14368                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14369                                  ;	defined in DISPATCH. The system calls are:
 14370                                  ;
 14371                                  ;	$CURRENT_DIR  Written
 14372                                  ;	$RMDIR	  Written
 14373                                  ;	$CHDIR	  Written
 14374                                  ;	$MKDIR	  Written
 14375                                  ;
 14376                                  ;
 14377                                  ;	Modification history:
 14378                                  ;
 14379                                  ;	    Created: ARR 4 April 1983
 14380                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14381                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14382                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14383                                  ;				    current directory.
 14384                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14385                                  
 14386                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14387                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14388                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14389                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14390                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14391                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14392                                  ;	I_Need	cMeta,BYTE
 14393                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14394                                  
 14395                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14396                                  ;----------------------------------------------------------------------------
 14397                                  ;
 14398                                  ;   Procedure Name : $CURRENT_DIR
 14399                                  ;
 14400                                  ;   Assembler usage:
 14401                                  ;		LDS	SI,area
 14402                                  ;		MOV	DL,drive
 14403                                  ;		INT	21h
 14404                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14405                                  ;	    ; current directory.
 14406                                  ;   Error returns:
 14407                                  ;	    AX = error_invalid_drive
 14408                                  ;
 14409                                  ;----------------------------------------------------------------------------
 14410                                  
 14411                                  _$CURRENT_DIR:
 14412                                  	;06/08/2018 - Retro DOS v3.0
 14413                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14414 00002158 E8FBF1                  	call	ECritDisk
 14415 0000215B 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14416 0000215D E88849                  	call	GetVisDrv		; grab it
 14417 00002160 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14418                                  CurdirErr:
 14419 00002162 E80CF2                  	call	LCritDisk
 14420                                  
 14421                                  	; MSDOS 3.3
 14422                                  	;mov	al,0Fh
 14423                                  	
 14424                                  	; MSDOS 6.0
 14425 00002165 1E                      	push	ds
 14426 00002166 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14427 0000216B A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14428 0000216E 1F                      	pop	ds
 14429                                  
 14430                                  curdir_errj:
 14431 0000216F E9E0E4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14432                                  
 14433                                  CurrentValidate:
 14434 00002172 1E                      	push	ds			; save destination
 14435 00002173 56                      	push	si
 14436                                  	
 14437                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14438                                  	
 14439                                  	; MSDOS 6.0
 14440 00002174 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14441 00002179 C536[A205]              	lds     si,[THISCDS]
 14442                                  
 14443                                  ; 16/12/2022
 14444                                  %if 0
 14445                                  	; 09/11/2022 (following test instruction is nonsense!)
 14446                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14447                                  
 14448                                  	;test	word [si+43h],8000h
 14449                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14450                                  	;jnz	short $+2  ; 09/11/2022	
 14451                                  	jnz	short DoCheck
 14452                                  %endif
 14453                                  
 14454                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14455                                  ; media check.
 14456                                  ;	CMP	word [SI+curdir.ID],0
 14457                                  ;	JZ	short GetDst
 14458                                  DoCheck:
 14459                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14460                                  
 14461                                  	; MSDOS 6.0
 14462 0000217D 1E                      	push	ds
 14463 0000217E 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14464 00002183 C606[4C03]00            	mov	byte [NoSetDir],0
 14465 00002188 1F                      	pop	ds
 14466                                  
 14467 00002189 BF[BE03]                	MOV	DI,OPENBUF
 14468 0000218C E83821                  	call	ValidateCDS		; output is ES:DI -> CDS
 14469                                  
 14470 0000218F 06                      	push	es	 		; swap source and destination
 14471 00002190 57                      	push	di
 14472 00002191 5E                      	pop	si
 14473 00002192 1F                      	pop	ds
 14474                                  GetDst:
 14475 00002193 5F                      	pop	di
 14476 00002194 07                      	pop	es			; get real destination
 14477 00002195 72CB                    	JC	short CurdirErr
 14478                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14479                                  	;
 14480                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14481                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14482                                  	; 16/12/2022
 14483                                  	;add	si,0  ; add si,curdir.text
 14484                                  	;
 14485                                  	;add	si,[si+4Fh] ; 17/05/2019
 14486 00002197 03744F                  	ADD	SI,[SI+curdir.end]
 14487 0000219A 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14488 0000219D 7501                    	JNZ	short CurrentCopy
 14489 0000219F 46                      	INC	SI
 14490                                  CurrentCopy:
 14491                                  ;	call	FStrCpy
 14492                                  ;; 10/29/86 E5 char
 14493 000021A0 50                      	PUSH	AX
 14494 000021A1 AC                      	LODSB				; get char
 14495 000021A2 08C0                    	OR	AL,AL
 14496 000021A4 7413                    	JZ	short FOK
 14497 000021A6 3C05                    	CMP	AL,05H
 14498 000021A8 740D                    	JZ	short FCHANGE
 14499 000021AA EB01                    	JMP	short FFF
 14500                                  FCPYNEXT:
 14501 000021AC AC                      	LODSB				; get char
 14502                                  FFF:
 14503 000021AD 3C5C                    	CMP	AL,'\'			; beginning of directory
 14504 000021AF 7508                    	JNZ	short FOK		; no
 14505 000021B1 AA                      	STOSB				; put into user's buffer
 14506 000021B2 AC                      	LODSB				; 1st char of dir is 05?
 14507 000021B3 3C05                    	CMP	AL,05H
 14508 000021B5 7502                    	JNZ	short FOK		; no
 14509                                  FCHANGE:
 14510 000021B7 B0E5                    	MOV	AL,0E5H			; make it E5
 14511                                  FOK:
 14512 000021B9 AA                      	STOSB				; put into user's buffer
 14513 000021BA 08C0                    	OR	AL,AL			; final char
 14514 000021BC 75EE                    	JNZ	short FCPYNEXT		; no
 14515 000021BE 58                      	POP	AX
 14516                                  
 14517                                  ;; 10/29/86 E5 char
 14518 000021BF 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14519 000021C1 E8ADF1                  	call	LCritDisk
 14520 000021C4 E982E4                  	jmp	SYS_RET_OK		; no more, bye!
 14521                                  
 14522                                  ; 17/05/2019 - Retro DOS v4.0
 14523                                  
 14524                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14525                                  
 14526                                  ;BREAK <$RmDir -- Remove a directory>
 14527                                  ;----------------------------------------------------------------------------
 14528                                  ;
 14529                                  ; Procedure Name : $RmDir
 14530                                  ;
 14531                                  ; Inputs:
 14532                                  ;	DS:DX Points to asciz name
 14533                                  ; Function:
 14534                                  ;	Delete directory if empty
 14535                                  ; Returns:
 14536                                  ;	STD XENIX Return
 14537                                  ;	AX = error_path_not_found If path bad
 14538                                  ;	AX = error_access_denied If
 14539                                  ;		Directory not empty
 14540                                  ;		Path not directory
 14541                                  ;		Root directory specified
 14542                                  ;		Directory malformed (. and .. not first two entries)
 14543                                  ;		User tries to delete a current directory
 14544                                  ;	AX = error_current_directory
 14545                                  ;
 14546                                  ;----------------------------------------------------------------------------
 14547                                  
 14548                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14549                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14550                                  
 14551                                  _$RMDIR:
 14552 000021C7 52                      	push	dx			; Save ptr to name
 14553 000021C8 1E                      	push	ds
 14554 000021C9 89D6                    	mov	si,dx			; Load ptr into si
 14555 000021CB BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14556 000021CE 57                      	push	di
 14557 000021CF E8154A                  	call	TransPathNoSet		; Translate the name
 14558 000021D2 5F                      	pop	di			; di = ptr to buf for trans name
 14559 000021D3 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14560 000021D5 1F                      	pop	ds
 14561 000021D6 5A                      	pop	dx			; Restore the name
 14562                                  	;mov	al,3
 14563 000021D7 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14564                                  	; 16/12/2022
 14565                                  rmdir_errj: ; 10/08/2018
 14566                                  chdir_errj:
 14567 000021D9 EB94                    	jmp	short curdir_errj
 14568                                  	;jmp	SYS_RET_ERR
 14569                                  rmlset:
 14570 000021DB 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14571 000021E1 7512                    	Jnz	short rmerr		;	return (-1);
 14572 000021E3 16                      	push	ss
 14573 000021E4 07                      	pop	es
 14574 000021E5 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14575                                  rmloop: 
 14576 000021E7 E86F49                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14577 000021EA 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14578 000021EC E809F0                  	call	StrCmp			; Are the 2 paths the same?
 14579 000021EF 7404                    	jz	short rmerr		; Yes, report error.
 14580 000021F1 FEC0                    	inc	al			; No, inc al to next drive number
 14581 000021F3 EBF2                    	jmp	short rmloop		; Go check next drive.
 14582                                  rmerr:
 14583 000021F5 1F                      	pop	ds
 14584 000021F6 5A                      	pop	dx			; Restore the name
 14585                                  	;mov	al,10h
 14586 000021F7 B010                    	mov	al,error_current_directory ; error
 14587                                  	; 16/12/2022
 14588                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14589                                  ;chdir_errj:
 14590 000021F9 EBDE                    	jmp	short rmdir_errj
 14591                                  rmcont:
 14592 000021FB 1F                      	pop	ds
 14593 000021FC 5A                      	pop	dx			; Restore the name
 14594 000021FD BE[6932]                	MOV	SI,DOS_RMDIR
 14595 00002200 EB7C                    	JMP	DoDirCall
 14596                                  
 14597                                  ; 17/05/2019 - Retro DOS v4.0
 14598                                  
 14599                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14600                                  
 14601                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14602                                  ;----------------------------------------------------------------------------
 14603                                  ;
 14604                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14605                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14606                                  ; several cases to consider:
 14607                                  ;
 14608                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14609                                  ;	it into a WFP.	We verify the existance of this directory and then
 14610                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14611                                  ;	directory cluster.
 14612                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14613                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14614                                  ;	WFP back into the CDS.
 14615                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14616                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14617                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14618                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14619                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14620                                  ;	to process the path but to return the logical CDS and the logical
 14621                                  ;	path.  We then copy the logical path into the logical CDS.
 14622                                  ;
 14623                                  ; Inputs:
 14624                                  ;	DS:DX Points to asciz name
 14625                                  ; Returns:
 14626                                  ;	STD XENIX Return
 14627                                  ;	AX = chdir_path_not_found if error
 14628                                  ;
 14629                                  ;----------------------------------------------------------------------------
 14630                                  
 14631                                  _$CHDIR:
 14632 00002202 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14633 00002205 89D6                    	MOV	SI,DX			; get source
 14634 00002207 E8D149                  	call	TransPath		; go munge the path and get real CDS
 14635 0000220A 7304                    	JNC	short ChDirCrack	; no errors, try path
 14636                                  ChDirErrP:
 14637                                  	;mov	al,3
 14638 0000220C B003                    	MOV	AL,error_path_not_found
 14639                                  ChDirErr:
 14640                                  	;jmp	SYS_RET_ERR 	; oops!
 14641                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14642 0000220E EBC9                    	jmp	short chdir_errj
 14643                                  
 14644                                  ChDirCrack:
 14645 00002210 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14646 00002215 75F5                    	JNZ	short ChDirErrP
 14647                                  
 14648                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14649                                  ; found.
 14650                                  
 14651 00002217 C43E[A205]              	LES	DI,[THISCDS]
 14652 0000221B 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14653 0000221E 74EC                    	JZ	short ChDirErrP		;	error ();
 14654                                  
 14655                                  ; Find out if the directory exists.
 14656                                  
 14657 00002220 E80310                  	call	DOS_CHDIR
 14658                                  	;Jc	short ChDirErr
 14659                                  	; 16/12/2022
 14660 00002223 72B4                    	jc	short chdir_errj
 14661                                  ;
 14662                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14663                                  ; not network). If one was seen, all we need to do is copy in the text
 14664                                  ;
 14665 00002225 C43E[A205]              	LES	DI,[THISCDS]
 14666                                  	;test	word [es:di+43h],2000h
 14667                                  	; 17/12/2022
 14668 00002229 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14669                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14670 0000222E 7425                    	JZ	short GotCDS
 14671                                  
 14672                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14673                                  
 14674 00002230 06                      	push	es	
 14675 00002231 57                      	push	di
 14676 00002232 51                      	push	cx			; save CDS and cluster...
 14677 00002233 E859E2                  	call	Get_User_Stack		; get original text
 14678                                  	
 14679                                  	;mov	di,[si+6]
 14680 00002236 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14681                                  	;mov	ds,[si+0Eh]
 14682 00002239 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14683                                  	
 14684 0000223C BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14685 0000223F 87F7                    	XCHG	SI,DI
 14686 00002241 30C0                    	XOR	AL,AL			; do no splicing
 14687 00002243 57                      	push	di
 14688 00002244 E8A049                  	call	TransPathNoSet		; Munge path
 14689 00002247 5E                      	pop	si
 14690                                  
 14691                                  ; There should NEVER be an error here.
 14692                                  
 14693                                  ;IF FALSE
 14694                                  ;	JNC SKipErr
 14695                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14696                                  ;SkipErr:
 14697                                  ;ENDIF
 14698 00002248 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14699                                  	;mov	word [es:di+49h],-1
 14700 0000224C 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14701                                  					; no valid cluster here...
 14702 00002252 59                      	pop	cx
 14703 00002253 5F                      	pop	di
 14704 00002254 07                      	pop	es
 14705                                  
 14706                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14707                                  
 14708                                  GotCDS:
 14709                                  
 14710                                  ; wfp_start points to the text. See if it is long enough
 14711                                  
 14712                                  	; MSDOS 3.3
 14713                                  	;push	ss
 14714                                  	;pop	ds
 14715                                  	;mov	si,[WFP_START]
 14716                                  	;push	cx
 14717                                  	;call	DStrLen
 14718                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14719                                  	;pop	cx
 14720                                  	;ja	short ChDirErrP
 14721                                  
 14722                                  	; MSDOS 6.0
 14723 00002255 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14724 00002258 77B2                    	JA	short ChDirErrP
 14725                                  	; MSDOS 3.3 & MSDOS 6.0
 14726                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14727                                  	; 17/12/2022
 14728 0000225A 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14729 0000225F 7512                    	JNZ	short SkipRecency
 14730                                  	; MSDOS 6.0
 14731                                  	;test	word [es:di+43h],2000h
 14732                                  	; 17/12/2022
 14733 00002261 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14734                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14735                                  					;PTM. for Join and Subst ;AN000;
 14736 00002266 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14737 00002268 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14738                                  setdirclus:
 14739                                  	;mov	[es:di+49h],cx
 14740 0000226B 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14741 0000226F C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14742                                  SkipRecency:
 14743 00002273 E8B3EF                  	call	FStrCpy
 14744 00002276 30C0                    	XOR	AL,AL
 14745                                  mkdir_ok:
 14746 00002278 E9CEE3                  	jmp	SYS_RET_OK
 14747                                  
 14748                                  ; 17/05/2019 - Retro DOS v4.0
 14749                                  
 14750                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14751                                  
 14752                                  ;BREAK <$MkDir - Make a directory entry>
 14753                                  ;---------------------------------------------------------------------------
 14754                                  ;
 14755                                  ; Procedure Name : $MkDir
 14756                                  ; Inputs:
 14757                                  ;	DS:DX Points to asciz name
 14758                                  ; Function:
 14759                                  ;	Make a new directory
 14760                                  ; Returns:
 14761                                  ;	STD XENIX Return
 14762                                  ;	AX = mkdir_path_not_found if path bad
 14763                                  ;	AX = mkdir_access_denied  If
 14764                                  ;		Directory cannot be created
 14765                                  ;		Node already exists
 14766                                  ;		Device name given
 14767                                  ;		Disk or directory(root) full
 14768                                  ;---------------------------------------------------------------------------
 14769                                  
 14770                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14771                                  
 14772                                  _$MKDIR:
 14773 0000227B BE[3631]                	MOV	SI,DOS_MKDIR
 14774                                  DoDirCall:
 14775 0000227E BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14776                                  
 14777 00002281 56                      	push	si
 14778 00002282 89D6                    	MOV	SI,DX			; get source
 14779 00002284 E85449                  	call	TransPath		; go munge the path
 14780 00002287 5E                      	pop	si
 14781 00002288 7305                    	JNC	short MkDirCrack	; no errors, try path
 14782                                  MkErrP:
 14783 0000228A B003                    	MOV	AL,error_path_not_found	; oops!
 14784                                  MkErr:
 14785 0000228C E9C3E3                  	jmp	SYS_RET_ERR
 14786                                  MkDirCrack:
 14787 0000228F 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14788 00002295 75F3                    	JNZ	short MkErrP
 14789                                  
 14790                                  	; MSDOS 3.3
 14791                                  	;push	ss
 14792                                  	;pop	ds
 14793                                  	;call	si
 14794                                  	;jb	short MkErr
 14795                                  	;;jmp	short mkdir_ok
 14796                                  	;jmp	SYS_RET_OK
 14797                                  
 14798                                  	; MSDOS 6.0
 14799 00002297 56                      	PUSH	SI			;PTM.			;AN000;
 14800 00002298 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14801 0000229B 5E                      	POP	SI			;PTM.			;AN000;
 14802 0000229C 7604                    	JBE	short pathok		;PTM.			;AN000;
 14803                                  	;mov	al,5
 14804 0000229E B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14805                                  	;jmp	SYS_RET_ERR		;PTM.
 14806 000022A0 EBEA                    	jmp	short MkErr
 14807                                  pathok:
 14808 000022A2 FFD6                    	CALL	SI			; go get file
 14809 000022A4 72E6                    	JC	short MkErr		; no errors
 14810                                  	; 16/12/2022
 14811                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14812 000022A6 EBD0                    	jmp	short mkdir_ok
 14813                                  	;jmp	SYS_RET_OK
 14814                                  
 14815                                  ;----------------------------------------------------------------------------
 14816                                  ;
 14817                                  ; Procedure Name : Check_PathLen
 14818                                  ;
 14819                                  ; Inputs:
 14820                                  ;	nothing
 14821                                  ; Function:
 14822                                  ;	check if final path length greater than 67
 14823                                  ; Returns:
 14824                                  ;	Above flag set if > 67
 14825                                  ;
 14826                                  ;---------------------------------------------------------------------------
 14827                                  
 14828                                  Check_PathLen:
 14829                                  	; 09/09/2018
 14830                                  	;mov	SI,[WFP_START]
 14831 000022A8 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14832                                  Check_PathLen2:
 14833 000022AD 16                      	push	ss
 14834 000022AE 1F                      	pop	ds
 14835                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14836 000022AF 51                      	push	CX	
 14837 000022B0 E88DEF                  	CALL	DStrLen
 14838 000022B3 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14839 000022B6 59                      	POP	CX
 14840 000022B7 C3                      	retn
 14841                                  
 14842                                  ;============================================================================
 14843                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14844                                  ;============================================================================
 14845                                  ; 07/08/2018 - Retro DOS v3.0
 14846                                  ; 17/05/2019 - Retro DOS v4.0
 14847                                  
 14848                                  ;**	IOCTL system call.
 14849                                  ;----------------------------------------------------------------------------
 14850                                  ;	$IOCTL
 14851                                  ;
 14852                                  ;	  Revision history:
 14853                                  ;
 14854                                  ;		Created: ARR 4 April 1983
 14855                                  ;
 14856                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14857                                  ;
 14858                                  ;		A000	version 4.00	Jan. 1988
 14859                                  ;
 14860                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14861                                  ;
 14862                                  
 14863                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14864                                  ;---------------------------------------------------------------------------
 14865                                  ;
 14866                                  ;   Assembler usage:
 14867                                  ;	    MOV     BX, Handle
 14868                                  ;	    MOV     DX, Data
 14869                                  ;
 14870                                  ;	(or LDS     DX,BUF
 14871                                  ;	    MOV     CX,COUNT)
 14872                                  ;
 14873                                  ;	    MOV     AH, Ioctl
 14874                                  ;	    MOV     AL, Request
 14875                                  ;	    INT     21h
 14876                                  ;
 14877                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14878                                  ;	    attribute word in DX, handle in BX:
 14879                                  ;	    DH = high word of device driver attributes
 14880                                  ;	    DL = low byte of sf_flags
 14881                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14882                                  ;	    in BX.
 14883                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14884                                  ;	    into DS:DX.  Return number read in AX.
 14885                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14886                                  ;	    DS:DX.  Return bytes written in AX.
 14887                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14888                                  ;	    into DS:DX.  Return number read in AX.
 14889                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14890                                  ;	    DS:DX.  Return bytes written in AX.
 14891                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14892                                  ;	    device, AL = 0FFh, otherwise 0.
 14893                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14894                                  ;	    device, AL = 0FFh, otherwise 0.
 14895                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14896                                  ;	    removable media, 0 otherwise.
 14897                                  ;	 9  Return the contents of the device attribute word in DX for the
 14898                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14899                                  ;	    network. 8000h is the bit for local use.
 14900                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14901                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14902                                  ;	    the count and CX is the delay.
 14903                                  ;
 14904                                  ;   Error returns:
 14905                                  ;	    AX = error_invalid_handle
 14906                                  ;	       = error_invalid_function
 14907                                  ;	       = error_invalid_data
 14908                                  ;
 14909                                  ;-------------------------------------------------------------------------------
 14910                                  ;
 14911                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14912                                  ;   than the above
 14913                                  ;
 14914                                  ;	There are several basic forms of IOCTL calls:
 14915                                  ;
 14916                                  ;
 14917                                  ;	** Get/Set device information:	**
 14918                                  ;
 14919                                  ;	ENTRY	(AL) = function code
 14920                                  ;		  0 - Get device information
 14921                                  ;		  1 - Set device information
 14922                                  ;		(BX) = file handle
 14923                                  ;		(DX) = info for "Set Device Information"
 14924                                  ;	EXIT	'C' set if error
 14925                                  ;		  (AX) = error code
 14926                                  ;		'C' clear if OK
 14927                                  ;		  (DX) = info for "Get Device Information"
 14928                                  ;	USES	ALL
 14929                                  ;
 14930                                  ;
 14931                                  ;	**  Read/Write Control Data From/To Handle  **
 14932                                  ;
 14933                                  ;	ENTRY	(AL) = function code
 14934                                  ;		  2 - Read device control info
 14935                                  ;		  3 - Write device control info
 14936                                  ;		(BX) = file handle
 14937                                  ;		(CX) = transfer count
 14938                                  ;		(DS:DX) = address for data
 14939                                  ;	EXIT	'C' set if error
 14940                                  ;		  (AX) = error code
 14941                                  ;		'C' clear if OK
 14942                                  ;		  (AX) = count of bytes transfered
 14943                                  ;	USES	ALL
 14944                                  ;
 14945                                  ;
 14946                                  ;	**  Read/Write Control Data From/To Block Device  **
 14947                                  ;
 14948                                  ;	ENTRY	(AL) = function code
 14949                                  ;		  4 - Read device control info
 14950                                  ;		  5 - Write device control info
 14951                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14952                                  ;		(CX) = transfer count
 14953                                  ;		(DS:DX) = address for data
 14954                                  ;	EXIT	'C' set if error
 14955                                  ;		  (AX) = error code
 14956                                  ;		'C' clear if OK
 14957                                  ;		  (AX) = count of bytes transfered
 14958                                  ;	USES	ALL
 14959                                  ;
 14960                                  ;
 14961                                  ;	**  Get Input/Output Status  **
 14962                                  ;
 14963                                  ;	ENTRY	(AL) = function code
 14964                                  ;		  6 - Get Input status
 14965                                  ;		  7 - Get Output Status
 14966                                  ;		(BX) = file handle
 14967                                  ;	EXIT	'C' set if error
 14968                                  ;		  (AX) = error code
 14969                                  ;		'C' clear if OK
 14970                                  ;		  (AL) = 00 if not ready
 14971                                  ;		  (AL) = FF if ready
 14972                                  ;	USES	ALL
 14973                                  ;
 14974                                  ;
 14975                                  ;	**  Get Drive Information  **
 14976                                  ;
 14977                                  ;	ENTRY	(AL) = function code
 14978                                  ;		  8 - Check for removable media
 14979                                  ;		  9 - Get device attributes
 14980                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14981                                  ;	EXIT	'C' set if error
 14982                                  ;		  (AX) = error code
 14983                                  ;		'C' clear if OK
 14984                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14985                                  ;		  (DX) = device attribute word (func. 9)
 14986                                  ;	USES	ALL
 14987                                  ;
 14988                                  ;
 14989                                  ;	**  Get Redirected bit	**
 14990                                  ;
 14991                                  ;	ENTRY	(AL) = function code
 14992                                  ;		  0Ah - Network stuff
 14993                                  ;		(BX) = file handle
 14994                                  ;	EXIT	'C' set if error
 14995                                  ;		  (AX) = error code
 14996                                  ;		'C' clear if OK
 14997                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14998                                  ;	USES	ALL
 14999                                  ;
 15000                                  ;
 15001                                  ;	**  Change sharer retry parameters  **
 15002                                  ;
 15003                                  ;	ENTRY	(AL) = function code
 15004                                  ;		  0Bh - Set retry parameters
 15005                                  ;		(CX) = retry loop count
 15006                                  ;		(DX) = number of retries
 15007                                  ;	EXIT	'C' set if error
 15008                                  ;		  (AX) = error code
 15009                                  ;		'C' clear if OK
 15010                                  ;	USES	ALL
 15011                                  ;
 15012                                  ;
 15013                                  ;   =================================================================
 15014                                  ;
 15015                                  ;	**  New Standard Control  **
 15016                                  ;
 15017                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15018                                  ;	FORMS ARE OBSOLETE.
 15019                                  ;
 15020                                  ;   =================================================================
 15021                                  ;
 15022                                  ;	ENTRY	(AL) = function code
 15023                                  ;		  0Ch - Control Function subcode
 15024                                  ;		(BX) = File Handle
 15025                                  ;		(CH) = Category Indicator
 15026                                  ;		(CL) = Function within category
 15027                                  ;		(DS:DX) = address for data, if any
 15028                                  ;		(SI) = Passed to device as argument, use depends upon function
 15029                                  ;		(DI) = Passed to device as argument, use depends upon function
 15030                                  ;	EXIT	'C' set if error
 15031                                  ;		  (AX) = error code
 15032                                  ;		'C' clear if OK
 15033                                  ;		  (SI) = Return value, meaning is function dependent
 15034                                  ;		  (DI) = Return value, meaning is function dependent
 15035                                  ;		  (DS:DX) = Return address, use is function dependent
 15036                                  ;	USES	ALL
 15037                                  ;
 15038                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15039                                  ;     (See inc\ioctl.inc for more info)
 15040                                  ;
 15041                                  ;	ENTRY	(AL) = function code
 15042                                  ;		  0Dh - Control Function subcode
 15043                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15044                                  ;		(CH) = Category Indicator
 15045                                  ;		(CL) = Function within category
 15046                                  ;		(DS:DX) = address for data, if any
 15047                                  ;		(SI) = Passed to device as argument, use depends upon function
 15048                                  ;		(DI) = Passed to device as argument, use depends upon function
 15049                                  ;
 15050                                  ;	EXIT	'C' set if error
 15051                                  ;		  (AX) = error code
 15052                                  ;		'C' clear if OK
 15053                                  ;		  (DS:DX) = Return address, use is function dependent
 15054                                  ;	USES	ALL
 15055                                  ;
 15056                                  ;---------------------------------------------------------------------------
 15057                                  	
 15058                                  	; 17/05/2019 - Retro DOS v4.0
 15059                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15060                                  
 15061                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15062                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15063                                  
 15064                                  IOCTLJMPTABLE:	;label	word
 15065                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15066 000022B8 [F622]                  	dw	ioctl_getset_data	; 0
 15067 000022BA [F622]                  	dw	ioctl_getset_data   	; 1
 15068 000022BC [4623]                  	dw	ioctl_control_string	; 2
 15069 000022BE [4623]                  	dw	ioctl_control_string	; 3
 15070 000022C0 [9A24]                  	dw	ioctl_get_dev		; 4
 15071 000022C2 [9A24]                  	dw	ioctl_get_dev		; 5
 15072 000022C4 [6023]                  	dw	ioctl_status		; 6
 15073 000022C6 [6023]                  	dw	ioctl_status		; 7
 15074 000022C8 [0124]                  	dw	ioctl_rem_media		; 8
 15075 000022CA [3F24]                  	dw	ioctl_drive_attr	; 9
 15076 000022CC [8C24]                  	dw	ioctl_handle_redir	; A
 15077 000022CE [7C23]                  	dw	Set_Retry_Parameters	; B
 15078 000022D0 [8A23]                  	dw	GENERICIOCTLHANDLE	; C
 15079 000022D2 [A123]                  	dw	GENERICIOCTL		; D
 15080                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15081 000022D4 [4B25]                  	dw	ioctl_drive_owner	; E
 15082 000022D6 [4B25]                  	dw	ioctl_drive_owner	; F
 15083                                  	; MSDOS 6.0
 15084 000022D8 [8A23]                  	dw	query_handle_support	; 10h
 15085 000022DA [A123]                  	dw	query_device_support	; 11h
 15086                                  
 15087                                  	; 11/11/2022
 15088                                  _$IOCTL:
 15089 000022DC 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15090 000022DE 16                      	push	ss
 15091 000022DF 1F                      	pop	ds			;hkn; SS is DOSDATA
 15092                                  
 15093                                  	; MSDOS 3.3
 15094                                  	;cmp	al,0Fh 
 15095                                  	; MSDOS 6.0
 15096 000022E0 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15097 000022E2 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15098                                  
 15099                                  	; 28/05/2019
 15100 000022E4 50                      	push	AX			; Need to save AL for generic IOCTL
 15101 000022E5 89C7                    	mov	di,ax			; di NOT a PARM
 15102 000022E7 81E7FF00                	and	di,0FFh			; di = al
 15103 000022EB D1E7                    	shl	di,1			; di = index into jmp table
 15104 000022ED 58                      	pop	AX			; Restore AL for generic IOCTL
 15105                                  
 15106 000022EE 2EFFA5[B822]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15107                                  
 15108                                  ioctl_bad_funj2:
 15109 000022F3 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15110                                  
 15111                                  ;--------------------------------------------------------------------------
 15112                                  ;
 15113                                  ; IOCTL: AL = 0,1
 15114                                  ;
 15115                                  ; ENTRY: DS = DOSDATA
 15116                                  ;
 15117                                  ;--------------------------------------------------------------------------
 15118                                  
 15119                                  ioctl_getset_data:
 15120                                  	; MSDOS 6.0
 15121 000022F6 E8E743                  	call	SFFromHandle		; ES:DI -> SFT
 15122 000022F9 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15123                                  ioctl_bad_handle:
 15124                                  	;mov	al,6
 15125 000022FB B006                    	mov	al,error_invalid_handle
 15126                                  ioctl_error:
 15127 000022FD E952E3                  	jmp	SYS_RET_ERR
 15128                                  
 15129                                  ioctl_check_permissions:
 15130 00002300 3C00                    	CMP	AL,0
 15131                                  	;mov	al,[es:di+5]
 15132 00002302 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15133 00002306 741B                    	JZ	short ioctl_read	; read the byte
 15134                                  
 15135 00002308 08F6                    	or	dh,dh
 15136 0000230A 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15137                                  	;mov	al,0Dh
 15138 0000230C B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15139                                  	;jmp	SYS_RET_ERR
 15140 0000230E EBED                    	jmp	short ioctl_error
 15141                                  
 15142                                  ioctl_check_device:
 15143 00002310 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15144 00002312 74DF                    	jz	short ioctl_bad_funj2
 15145 00002314 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15146                                  					;   device bit!! He can muck with the
 15147                                  					;   others at will.
 15148 00002317 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15149 0000231C 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15150                                  ioctl_ok:
 15151 00002320 E926E3                  	jmp	SYS_RET_OK
 15152                                  
 15153                                  ioctl_read:
 15154 00002323 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15155 00002328 30E4                    	XOR	AH,AH
 15156 0000232A A880                    	test	AL,devid_device 	; Should I set high byte
 15157 0000232C 740D                    	JZ	short ioctl_no_high	; no
 15158 0000232E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15159                                  	;les	di,[es:di+7]
 15160 00002333 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15161                                  	;mov	ah,[es:di+5]
 15162 00002337 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15163                                  ioctl_no_high:
 15164 0000233B 89C2                    	MOV	DX,AX
 15165                                  ioctl_set_dx:	; 16/12/2022
 15166 0000233D E84FE1                  	call	Get_User_Stack
 15167                                  	;mov	[si+6],dx
 15168 00002340 895406                  	MOV	[SI+user_env.user_DX],DX
 15169                                  	;;jmp	SYS_RET_OK
 15170                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15171                                  ioctl_ok_j:
 15172                                  	; 16/12/2022
 15173 00002343 E906E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15174                                  	;jmp	short ioctl_ok
 15175                                  	; 26/07/2019
 15176                                  	;jmp	SYS_RET_OK_clc
 15177                                  
 15178                                  ;--------------------------------------------------------------------------
 15179                                  ;
 15180                                  ; IOCTL: AL = 2,3
 15181                                  ;
 15182                                  ; ENTRY: DS = DOSDATA
 15183                                  ;	 SI = user's DS
 15184                                  ;
 15185                                  ;--------------------------------------------------------------------------
 15186                                  
 15187                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15188                                  ioctl_control_string:
 15189 00002346 E89743                  	call	SFFromHandle		; ES:DI -> SFT
 15190 00002349 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15191                                  	; 07/12/2022
 15192                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15193                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15194                                  	; MSDOS 5.0 & MSDOS 6.0
 15195 0000234B 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15196 00002350 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15197 00002352 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15198 00002357 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15199 0000235B 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15200 0000235D E94201                  	JMP	ioctl_do_string
 15201                                  
 15202                                  ;--------------------------------------------------------------------------
 15203                                  ;
 15204                                  ; IOCTL: AL = 6,7
 15205                                  ;
 15206                                  ; ENTRY: DS = DOSDATA
 15207                                  ;
 15208                                  ;--------------------------------------------------------------------------
 15209                                  
 15210                                  ioctl_status:
 15211 00002360 B401                    	MOV	AH,1
 15212 00002362 2C06                    	SUB	AL,6			; 6=0,7=1
 15213 00002364 7402                    	JZ	short ioctl_get_status
 15214 00002366 B403                    	MOV	AH,3
 15215                                  ioctl_get_status:
 15216 00002368 50                      	PUSH	AX
 15217 00002369 E85013                  	call	GET_IO_SFT
 15218 0000236C 58                      	POP	AX
 15219                                  	;JNC	short DO_IOFUNC
 15220                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15221                                  	; 16/12/2022
 15222 0000236D 728C                    	jc	short ioctl_bad_handle
 15223                                  DO_IOFUNC:
 15224 0000236F E89021                  	call	IOFUNC
 15225 00002372 88C4                    	MOV	AH,AL
 15226 00002374 B0FF                    	MOV	AL,0FFH
 15227 00002376 7502                    	JNZ	short ioctl_status_ret
 15228 00002378 FEC0                    	INC	AL
 15229                                  ioctl_status_ret:
 15230                                  	;jmp	SYS_RET_OK
 15231                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15232                                  	;jmp	short ioctl_ok_j
 15233                                  	; 16/12/2022
 15234 0000237A EBA4                    	jmp	short ioctl_ok
 15235                                  
 15236                                  ;--------------------------------------------------------------------------
 15237                                  ;
 15238                                  ; IOCTL: AL = B
 15239                                  ;
 15240                                  ; ENTRY: DS = DOSDATA
 15241                                  ;
 15242                                  ;--------------------------------------------------------------------------
 15243                                  
 15244                                  Set_Retry_Parameters:
 15245                                  	; 09/09/2018
 15246 0000237C 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15247 00002380 09D2                    	OR	DX,DX			; zero retries not allowed
 15248 00002382 7475                    	JZ	short ioctl_bad_fun
 15249 00002384 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15250                                  doneok:
 15251                                  	;jmp	SYS_RET_OK		; Done
 15252                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15253                                  	;jmp	short ioctl_status_ret
 15254                                  	; 16/12/2022
 15255 00002388 EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15256                                  
 15257                                  ;--------------------------------------------------------------------------
 15258                                  ;
 15259                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15260                                  ;
 15261                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15262                                  ;	SI:DX -> Users Device Parameter Table
 15263                                  ;	IOCALL -> IOCTL_Req structure
 15264                                  ;
 15265                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15266                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15267                                  ;	call.
 15268                                  ;
 15269                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15270                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15271                                  ;         return address off the stack if the drive is invalid.
 15272                                  ;
 15273                                  ;--------------------------------------------------------------------------
 15274                                  
 15275                                  query_handle_support:	; Entry point for handles
 15276                                  GENERICIOCTLHANDLE:
 15277 0000238A E85343                  	call	SFFromHandle		; Get SFT for device.
 15278 0000238D 726F                    	jc	short ioctl_bad_handlej
 15279                                  
 15280                                  	;test	word [es:di+5],8000h
 15281                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15282                                  	;test	byte [es:di+6],80h
 15283 0000238F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15284 00002394 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15285                                  
 15286 00002396 C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15287                                  	;les	di,[es:di+7]
 15288 0000239B 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15289 0000239F EB0F                    	jmp	short Do_GenIOCTL
 15290                                  
 15291                                  query_device_support:	; Entry point for devices:
 15292                                  GENERICIOCTL:
 15293 000023A1 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15294 000023A6 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15295 000023A9 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15296                                  
 15297 000023AB E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15298 000023AE 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15299                                  
 15300                                  Do_GenIOCTL:
 15301                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15302                                  					; Can device handle Generic IOCTL funcs
 15303                                  	; 09/09/2018
 15304                                  	;test	byte [es:di+4],40h
 15305 000023B0 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15306 000023B5 7442                    	jz	short ioctl_bad_fun
 15307                                  
 15308                                  	; 17/05/2019 - Retro DOS v4.0
 15309                                  
 15310                                  	; MSDOS 6.0
 15311                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15312 000023B7 C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15313                                  	;cmp	al,10h
 15314 000023BC 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15315 000023BE 7C0C                    	jl	short SetIOCtlBlock
 15316                                  	
 15317                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15318                                  	;test	byte [es:di+4],80h 
 15319 000023C0 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15320 000023C5 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15321                                  	;
 15322                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15323 000023C7 C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15324                                  
 15325                                  SetIOCtlBlock:
 15326 000023CC 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15327 000023CD 57                      	PUSH	DI			; in DS:SI
 15328                                  					; Setup Generic IOCTL Request Block
 15329                                  	;mov	byte [IOCALL_REQLEN],23
 15330 000023CE C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15331                                  	; 07/09/2018 (MSDOS 3.3)
 15332                                  	;;mov	byte [IOCALL_REQFUNC],19
 15333                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15334                                  	;
 15335 000023D3 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15336 000023D7 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15337 000023DB 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15338 000023DF 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15339 000023E3 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15340 000023E7 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15341 000023EB 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15342                                  
 15343                                  ;hkn; IOCALL is in DOSDATA
 15344 000023EF BB[7C03]                	MOV	BX,IOCALL
 15345                                  
 15346 000023F2 16                      	PUSH	SS
 15347 000023F3 07                      	POP	ES
 15348                                  					; DS:SI -> Device header.
 15349 000023F4 5E                      	POP	SI
 15350 000023F5 1F                      	POP	DS
 15351                                  	; 10/08/2018
 15352 000023F6 E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15353                                  
 15354                                  ioctl_bad_fun:
 15355 000023F9 B001                    	mov	al, error_invalid_function  ; 1
 15356 000023FB E954E2                  	jmp	SYS_RET_ERR	
 15357                                  
 15358                                  ioctl_bad_handlej:
 15359 000023FE E9FAFE                  	jmp	ioctl_bad_handle
 15360                                  
 15361                                  ;---------------------------------------------------------------------------
 15362                                  ;
 15363                                  ; IOCTL: AL = 8
 15364                                  ;
 15365                                  ; ENTRY: DS = DOSDATA
 15366                                  ;
 15367                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15368                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15369                                  ;         return address off the stack if the drive is invalid.
 15370                                  ;
 15371                                  ;-------------------------------------------------------------------------
 15372                                  
 15373                                  ioctl_rem_media:
 15374                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15375 00002401 E82B01                  	CALL	Check_If_Net
 15376 00002404 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15377                                  					;   certainly don't know how to do this
 15378                                  					;   call.
 15379                                  	;test	word [es:di+4],800h
 15380                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15381                                  	;test	byte [es:di+5],8
 15382 00002406 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15383 0000240B 74EC                    	JZ	short ioctl_bad_fun		; NO
 15384                                  
 15385                                  ;hkn; SS override for IOCALL
 15386 0000240D 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15387 00002413 B00D                    	MOV	AL,REMHL  ; 13
 15388 00002415 88DC                    	MOV	AH,BL			; Unit number
 15389 00002417 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15390 0000241B 31C0                    	XOR	AX,AX
 15391 0000241D 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15392 00002421 06                      	PUSH	ES
 15393 00002422 1F                      	POP	DS
 15394 00002423 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15395 00002425 16                      	PUSH	SS
 15396 00002426 07                      	POP	ES
 15397                                  
 15398                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15399 00002427 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15400 0000242A 1E                      	push	ds
 15401 0000242B 56                      	push	si
 15402 0000242C E8A822                  	call	DEVIOCALL2
 15403 0000242F 5E                      	pop	si
 15404 00002430 1F                      	pop	ds
 15405                                  
 15406                                  ;hkn; SS override
 15407 00002431 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15408 00002435 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15409 00002438 B109                    	MOV	CL,9
 15410 0000243A D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15411                                  ioctl_da_ok_j:	; 11/11/2022
 15412 0000243C E90AE2                  	jmp	SYS_RET_OK
 15413                                  
 15414                                  ;-------------------------------------------------------------------------
 15415                                  ;
 15416                                  ; IOCTL: AL = 9
 15417                                  ;
 15418                                  ; ENTRY: DS = DOSDATA
 15419                                  ;
 15420                                  ;-------------------------------------------------------------------------
 15421                                  
 15422                                  ioctl_drive_attr:
 15423                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15424 0000243F 88D8                    	mov	al,bl
 15425 00002441 E8C046                  	call	GETTHISDRV
 15426 00002444 7241                    	jc	short ioctl_drv_err
 15427 00002446 E8B800                  	call	Get_Driver_BL
 15428                                  	; MSDOS 6.0
 15429 00002449 723C                    	JC	short ioctl_drv_err	; drive not valid
 15430                                  
 15431                                  	;mov	dx,[es:di+4]
 15432 0000244B 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15433                                  					; get device attribute word
 15434 0000244F 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15435                                  
 15436                                  ;hkn; SS override
 15437 00002451 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15438                                  	;test	word [es:di+43h],8000h
 15439                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15440                                  	;test	byte [es:di+44h],80h
 15441 00002456 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15442 0000245B 7403                    	JZ	short IOCTLShare
 15443                                  
 15444                                  	;or	dx,1000h ; (MSDOS 3.3)
 15445                                  
 15446                                  ;	Net devices don't return a device attribute word.
 15447                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15448                                  
 15449 0000245D BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15450                                  IOCTLShare:
 15451 00002460 16                      	push	ss
 15452 00002461 1F                      	pop	ds
 15453 00002462 BE[BE03]                	MOV	SI,OPENBUF
 15454 00002465 80C341                  	ADD	BL,"A"	; 41h
 15455 00002468 881C                    	MOV	[SI],BL
 15456 0000246A C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15457 0000246F B80003                  	MOV	AX,0300h
 15458 00002472 F8                      	CLC
 15459                                  	;INT	int_IBM
 15460 00002473 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15461                                  			; DS:SI -> ASCIZ disk device name 
 15462                                  			; (may be full path or only drive
 15463                                  			; specifier--must include the colon)
 15464                                  			; Return: CF clear if absolute disk access allowed
 15465 00002475 7303                    	JNC	short IOCTLLocal	; Not shared
 15466                                  	;OR	DX,0200H		; Shared, bit 9
 15467                                  	; 17/12/2022
 15468 00002477 80CE02                  	or	dh,02h
 15469                                  IOCTLLocal:
 15470                                  	;test	word [es:di+43h],1000h
 15471                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15472                                  	;test	byte [es:di+44h],10h
 15473 0000247A 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15474                                  	;JZ	short ioctl_set_DX
 15475                                  	; 16/12/2022
 15476 0000247F 7403                    	jz	short _ioctl_set_DX
 15477                                  	;OR	DX,8000h
 15478                                  	; 17/12/2022
 15479 00002481 80CE80                  	or	dh,80h
 15480                                  ;ioctl_set_DX:
 15481                                  _ioctl_set_DX:
 15482                                  	; 16/12/2022
 15483 00002484 E9B6FE                  	jmp	ioctl_set_dx
 15484                                  ; 16/12/2022
 15485                                  %if 0	
 15486                                  	call	Get_User_Stack
 15487                                  	MOV	[SI+user_env.user_DX],DX
 15488                                  	;;jmp	SYS_RET_OK
 15489                                  	;; 25/06/2019
 15490                                  	;jmp	SYS_RET_OK_clc
 15491                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15492                                  ioctl_gd_ok_j:
 15493                                  	jmp	short ioctl_da_ok_j
 15494                                  %endif
 15495                                  
 15496                                  ioctl_drv_err:
 15497 00002487 B00F                    	mov	al,error_invalid_drive ; 0Fh
 15498                                  ioctl_gd_err_j:	; 11/11/2022
 15499 00002489 E9C6E1                  	jmp	SYS_RET_ERR
 15500                                  
 15501                                  ;--------------------------------------------------------------------------
 15502                                  ;
 15503                                  ; IOCTL: AL = A
 15504                                  ;
 15505                                  ; ENTRY: DS = DOSDATA
 15506                                  ;
 15507                                  ;--------------------------------------------------------------------------
 15508                                  
 15509                                  ioctl_handle_redir:
 15510 0000248C E85142                  	call	SFFromHandle		; ES:DI -> SFT
 15511 0000248F 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15512 00002491 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15513                                  
 15514                                  ioctl_got_sft:
 15515                                  	;mov	dx,[es:di+5]
 15516 00002494 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15517                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15518                                  	; 16/12/2022
 15519 00002498 EBEA                    	jmp	short _ioctl_set_DX
 15520                                  
 15521                                  	; 16/12/2022
 15522                                  ;ioctl_bad_funj:
 15523                                  	;JMP	ioctl_bad_fun
 15524                                  
 15525                                  ;--------------------------------------------------------------------------
 15526                                  ;
 15527                                  ; IOCTL: AL= 4,5
 15528                                  ;
 15529                                  ; ENTRY: DS = DOSDATA
 15530                                  ;	 SI = user's DS
 15531                                  ;
 15532                                  ;
 15533                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15534                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15535                                  ;         return address off the stack if the drive is invalid.
 15536                                  ;
 15537                                  ;-------------------------------------------------------------------------
 15538                                  
 15539                                  ioctl_get_dev:
 15540 0000249A E89200                  	CALL	Check_If_Net
 15541                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15542                                  					; certainly don't know how to do this
 15543                                  					; call.
 15544                                  	; 16/12/2022
 15545 0000249D 7403                    	jz	short ioctl_do_string
 15546                                  ioctl_bad_funj:
 15547 0000249F E957FF                  	JMP	ioctl_bad_fun
 15548                                  
 15549                                  ioctl_do_string:
 15550                                  	;test	word [es:di+4],4000h
 15551                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15552                                  	;test	byte [es:di+5],40h
 15553 000024A2 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15554 000024A7 74F6                    	JZ	short ioctl_bad_funj		; NO
 15555                                  					; assume IOCTL read
 15556 000024A9 C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15557                                  
 15558 000024AE A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15559 000024B0 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15560                                  
 15561                                  					; it is an IOCTL write
 15562 000024B2 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15563                                  
 15564                                  ioctl_control_call:
 15565 000024B7 B016                    	MOV	AL,DRDWRHL ; 22
 15566                                  ioctl_setup_pkt:
 15567 000024B9 88DC                    	MOV	AH,BL			; Unit number
 15568 000024BB A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15569 000024BE 31C0                    	XOR	AX,AX
 15570 000024C0 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15571 000024C3 A2[8903]                	MOV	[IOMED],AL
 15572 000024C6 890E[8E03]              	MOV	[IOSCNT],CX
 15573 000024CA 8916[8A03]              	MOV	[IOXAD],DX
 15574 000024CE 8936[8C03]              	MOV	[IOXAD+2],SI
 15575 000024D2 06                      	PUSH	ES
 15576 000024D3 1F                      	POP	DS
 15577 000024D4 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15578 000024D6 16                      	PUSH	SS
 15579 000024D7 07                      	POP	ES
 15580                                  
 15581 000024D8 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15582                                  ioctl_do_IO:
 15583 000024DB E8F921                  	call	DEVIOCALL2
 15584                                  
 15585                                  ;hkn; SS override for IOCALL
 15586                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15587                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15588                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15589 000024DE 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15590 000024E4 7507                    	JNZ	short ioctl_string_err
 15591                                  
 15592                                  ;hkn; SS override
 15593 000024E6 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15594                                  	; 16/12/2022
 15595 000024EA E95CE1                  	jmp	SYS_RET_OK
 15596                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15597                                  	;jmp	short ioctl_gd_ok_j
 15598                                  
 15599                                  ioctl_string_err:
 15600 000024ED 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15601                                  device_err:
 15602 000024F2 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15603 000024F6 89F8                    	MOV	AX,DI
 15604 000024F8 E86B30                  	call	SET_I24_EXTENDED_ERROR
 15605                                  
 15606                                  ;hkn; use SS override
 15607                                  ;hkn;	mov	ax,[CS:EXTERR]
 15608 000024FB 36A1[2403]              	mov	ax,[SS:EXTERR]
 15609                                  	;jmp	SYS_RET_ERR
 15610                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15611 000024FF EB88                    	jmp	short ioctl_gd_err_j
 15612                                  
 15613                                  ; 17/05/2019 - Retro DOS v4.0
 15614                                  
 15615                                  ;--------------------------------------------------------------------------
 15616                                  ; Proc name : Get_Driver_BL
 15617                                  ;
 15618                                  ;	DS is DOSDATA
 15619                                  ;	BL is drive number (0=default)
 15620                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15621                                  ;	No regs modified
 15622                                  ;
 15623                                  ;---------------------------------------------------------------------------
 15624                                  
 15625                                  Get_Driver_BL:
 15626 00002501 50                      	PUSH	AX
 15627 00002502 88D8                    	MOV	AL,BL			; Drive
 15628 00002504 E8FD45                  	call	GETTHISDRV
 15629 00002507 7224                    	jc	short ioctl_bad_drv
 15630 00002509 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15631 0000250B C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15632 00002510 C43E[A205]              	LES	DI,[THISCDS]
 15633                                  	;test	word [es:di+43h],8000h
 15634                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15635                                  	;test	byte [es:di+44h],80h
 15636 00002514 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15637                                  	;les	di,[es:di+45h]
 15638 00002519 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15639 0000251D 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15640 0000251F C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15641                                  	;mov	bl,[es:di+1]
 15642 00002524 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15643                                  	;les	di,[es:di+13h]
 15644 00002528 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15645                                  got_dev_ptr:
 15646 0000252C F8                      	CLC
 15647                                  ioctl_bad_drv:
 15648 0000252D 58                      	POP	AX
 15649 0000252E C3                      	retn
 15650                                  
 15651                                  ;-------------------------------------------------------------------------
 15652                                  ; Proc Name : Check_If_Net:
 15653                                  ;
 15654                                  ;
 15655                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15656                                  ; If no device is found, the return address is popped off the stack, and a
 15657                                  ; jump is made to ioctl_drv_err.
 15658                                  ;
 15659                                  ; On Entry:
 15660                                  ; Registers same as those for Get_Driver_BL
 15661                                  ;
 15662                                  ; On Exit:
 15663                                  ; ZERO flag	- set if not a net device
 15664                                  ;		- reset if net device
 15665                                  ; ES:DI -> the device
 15666                                  ;
 15667                                  ;
 15668                                  ; BUGBUG: This function assumes the following stack setup on entry
 15669                                  ;
 15670                                  ;	  SP+2 -> Error return address
 15671                                  ;	  SP   -> Normal return address
 15672                                  ;
 15673                                  ;-------------------------------------------------------------------------
 15674                                  
 15675                                  Check_If_Net:
 15676                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15677 0000252F E8CFFF                  	CALL	Get_Driver_BL
 15678 00002532 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15679 00002534 06                      	PUSH	ES
 15680 00002535 57                      	PUSH	DI
 15681 00002536 C43E[A205]              	LES	DI,[THISCDS]
 15682                                  	;test	word [es:di+43h],8000h
 15683                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15684                                  	;test	byte [es:di+44h],80h
 15685 0000253A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15686 0000253F 5F                      	POP	DI
 15687 00002540 07                      	POP	ES
 15688 00002541 C3                      	retn
 15689                                  
 15690                                  ioctl_drv_err_pop:
 15691 00002542 58                      	pop	ax			; pop off return address
 15692 00002543 E941FF                  	jmp	ioctl_drv_err
 15693                                  
 15694                                  ioctl_bad_funj3:
 15695 00002546 E9B0FE                  	jmp	ioctl_bad_fun
 15696                                  
 15697                                  ioctl_string_errj:
 15698 00002549 EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15699                                  
 15700                                  ;--------------------------------------------------------------------------
 15701                                  ;
 15702                                  ; IOCTL: AL = E, F
 15703                                  ;
 15704                                  ; ENTRY: DS = DOSDATA
 15705                                  ;
 15706                                  ;
 15707                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15708                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15709                                  ;         return address off the stack if the drive is invalid.
 15710                                  ;
 15711                                  ;--------------------------------------------------------------------------
 15712                                  
 15713                                  ioctl_drive_owner:
 15714                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15715 0000254B E8E1FF                  	Call	Check_If_Net
 15716 0000254E 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15717                                  					;   certainly don't know how to do this
 15718                                  					;   call.
 15719                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15720                                  	; 09/09/2018
 15721                                  	;test	byte [es:di+4],40h
 15722 00002550 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15723 00002555 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15724                                  	;mov	byte [IOCALL_REQFUNC],23
 15725 00002557 C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15726 0000255C 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15727 0000255E 7405                    	jz	short GetOwner
 15728                                  SetOwner:
 15729 00002560 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15730                                  GetOwner:
 15731 00002565 B00D                    	MOV	AL,OWNHL ; 13
 15732 00002567 88DC                    	MOV	AH,BL			; Unit number
 15733 00002569 A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15734 0000256C 31C0                    	XOR	AX,AX
 15735 0000256E A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15736 00002571 06                      	PUSH	ES
 15737 00002572 1F                      	POP	DS
 15738 00002573 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15739 00002575 16                      	PUSH	SS
 15740 00002576 07                      	POP	ES
 15741 00002577 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15742 0000257A 1E                      	push	ds
 15743 0000257B 56                      	push	si
 15744 0000257C E85821                  	call	DEVIOCALL2
 15745 0000257F 5E                      	pop	si
 15746 00002580 1F                      	pop	ds
 15747                                  ;hkn; SS override
 15748                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15749                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15750 00002581 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15751 00002587 75C0                    	jnz	short ioctl_string_errj
 15752 00002589 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15753                                  					; owner returned is 1-based.
 15754 0000258D E9B9E0                  	jmp	SYS_RET_OK
 15755                                  
 15756                                  ;============================================================================
 15757                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15758                                  ;============================================================================
 15759                                  ; 07/08/2018 - Retro DOS v3.0
 15760                                  ; 17/05/2019 - Retro DOS v4.0
 15761                                  
 15762                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15763                                  ;	NAME	DOS_DELETE
 15764                                  
 15765                                  ;
 15766                                  ;	Microsoft Confidential
 15767                                  ;	Copyright (C) Microsoft Corporation 1991
 15768                                  ;	All Rights Reserved.
 15769                                  ;
 15770                                  
 15771                                  ;**	DELETE.ASM - Low level routine for deleting files
 15772                                  ;----------------------------------------------------------------------------
 15773                                  ;		DOS_DELETE
 15774                                  ;		REN_DEL_Check
 15775                                  ;		FastOpen_Delete	       ; DOS 3.3
 15776                                  ;		FastOpen_Update	       ; DOS 3.3
 15777                                  
 15778                                  ;   Revision history:
 15779                                  ;
 15780                                  ;   A000  version 4.00	Jan. 1988
 15781                                  ;   A001  Fastopen Rename fix	April 1989
 15782                                  
 15783                                  ;Installed = TRUE
 15784                                  
 15785                                  ;	i_need	NoSetDir,BYTE
 15786                                  ;	i_need	Creating,BYTE
 15787                                  ;	i_need	DELALL,BYTE
 15788                                  ;	i_need	THISDPB,DWORD
 15789                                  ;	i_need	THISSFT,DWORD
 15790                                  ;	i_need	THISCDS,DWORD
 15791                                  ;	i_need	CURBUF,DWORD
 15792                                  ;	i_need	ATTRIB,BYTE
 15793                                  ;	i_need	SATTRIB,BYTE
 15794                                  ;	i_need	WFP_START,WORD
 15795                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15796                                  ;	i_need	NAME1,BYTE			 ;BN001
 15797                                  ;	i_need	FoundDel,BYTE
 15798                                  ;	i_need	AUXSTACK,BYTE
 15799                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15800                                  ;	i_need	JShare,DWORD
 15801                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15802                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15803                                  ;
 15804                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15805                                  ;
 15806                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15807                                  ;	i_need	DMAADD,DWORD
 15808                                  ;	i_need	RENAMEDMA,BYTE
 15809                                  
 15810                                  ;----------------------------------------------------------------------------
 15811                                  ;
 15812                                  ; Procedure Name : DOS_DELETE
 15813                                  ;
 15814                                  ; Inputs:
 15815                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15816                                  ;		terminated)
 15817                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15818                                  ;		( = -1 if current dir not involved, else
 15819                                  ;		 Points to first char after last "/" of current dir part)
 15820                                  ;	[THISCDS] Points to CDS being used
 15821                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15822                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15823                                  ; Function:
 15824                                  ;	Delete the specified file(s)
 15825                                  ; Outputs:
 15826                                  ;	CARRY CLEAR
 15827                                  ;		OK
 15828                                  ;	CARRY SET
 15829                                  ;	    AX is error code
 15830                                  ;		error_file_not_found
 15831                                  ;			Last element of path not found
 15832                                  ;		error_path_not_found
 15833                                  ;			Bad path (not in curr dir part if present)
 15834                                  ;		error_bad_curr_dir
 15835                                  ;			Bad path in current directory part of path
 15836                                  ;		error_access_denied
 15837                                  ;			Attempt to delete device or directory
 15838                                  ;		***error_sharing_violation***
 15839                                  ;			Deny both access required, generates an INT 24.
 15840                                  ;			This error is NOT returned. The INT 24H is generated,
 15841                                  ;			  and the file is ignored (not deleted). Delete will
 15842                                  ;			  simply continue on looking for more files.
 15843                                  ;			  Carry will NOT be set in this case.
 15844                                  ; DS preserved, others destroyed
 15845                                  ;
 15846                                  ;----------------------------------------------------------------------------
 15847                                  
 15848                                  FILEFOUND   equ 01h
 15849                                  FILEDELETED equ 10h
 15850                                  
 15851                                  
 15852                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15853                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15854                                  
 15855                                  DOS_DELETE:
 15856                                  
 15857                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15858                                  ;hkn; appropriately at this point.
 15859                                  
 15860 00002590 E8FFEC                  	call	TestNet
 15861 00002593 7306                    	JNC	short LOCAL_DELETE
 15862                                  
 15863                                  ;IF NOT Installed
 15864                                  ;	transfer NET_DELETE
 15865                                  ;ELSE
 15866                                  	;MOV	AX,(MultNET SHL 8) | 19
 15867                                  	;INT	2FH
 15868                                  	;return
 15869                                  
 15870 00002595 B81311                  	mov	ax,1113h
 15871 00002598 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15872                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15873                                  			;		fully-qualified filename in DOS CS
 15874                                  			; SDA CDS pointer -> current directory structure for drive with file
 15875                                  			; Return: CF set on error
 15876 0000259A C3                      	retn
 15877                                  ;ENDIF
 15878                                  
 15879                                  LOCAL_DELETE:
 15880 0000259B C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15881 000025A0 E8B3ED                  	call	ECritDisk
 15882                                  	;mov	word [CREATING],0E500h
 15883 000025A3 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15884 000025A9 8B36[B205]              	MOV	SI,[WFP_START]
 15885                                  SKPNUL:
 15886 000025AD AC                      	LODSB
 15887 000025AE 08C0                    	OR	AL,AL
 15888 000025B0 75FB                    	JNZ	short SKPNUL		; go to end
 15889 000025B2 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15890 000025B5 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15891 000025B9 7506                    	JNZ	short TEST_QUEST
 15892 000025BB 807C022A                	CMP	BYTE [SI+2],"*"
 15893 000025BF 741F                    	JZ	short CHECK_ATTS
 15894                                  TEST_QUEST:
 15895 000025C1 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15896 000025C4 87FE                    	XCHG	DI,SI
 15897                                  
 15898 000025C6 16                      	push	ss
 15899                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15900 000025C7 07                      	pop	es ; 17/05/2019
 15901                                  
 15902 000025C8 B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15903 000025CB B90400                  	MOV	CX,4		; four sets of "??"
 15904 000025CE F3AF                    	REPE	SCASW
 15905 000025D0 751C                    	JNZ	short NOT_ALL
 15906 000025D2 87FE                    	XCHG	DI,SI
 15907 000025D4 AD                      	LODSW
 15908 000025D5 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15909 000025D8 7514                    	JNZ	short NOT_ALL
 15910 000025DA AD                      	LODSW
 15911 000025DB 3D3F3F                  	CMP	AX,"??"
 15912 000025DE 750E                    	JNZ	short NOT_ALL
 15913                                  CHECK_ATTS:
 15914 000025E0 A0[6D05]                	MOV	AL,[SATTRIB]
 15915                                  	;and	al,1Fh
 15916 000025E3 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15917                                  					; Look only at hidden bits
 15918                                  	;cmp	al,1Fh
 15919 000025E5 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15920                                  					; All must be set
 15921 000025E7 7505                    	JNZ	short NOT_ALL
 15922                                  
 15923                                  ; NOTE WARNING DANGER-----
 15924                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15925                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15926                                  
 15927 000025E9 C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15928                                  NOT_ALL:
 15929 000025EE C606[4C03]01            	MOV	byte [NoSetDir],1
 15930 000025F3 E89519                  	call	GetPathNoSet
 15931 000025F6 7312                    	JNC	short Del_found
 15932 000025F8 750B                    	JNZ	short _bad_path
 15933 000025FA 08C9                    	OR	CL,CL
 15934 000025FC 7407                    	JZ	short _bad_path
 15935                                  No_file:
 15936 000025FE B80200                  	MOV	AX,error_file_not_found
 15937                                  ErrorReturn:
 15938 00002601 F9                      	STC
 15939                                  	;call	LCritDisk
 15940                                  	;retn
 15941                                  	; 18/12/2022
 15942 00002602 E96CED                  	jmp	LCritDisk
 15943                                  
 15944                                  _bad_path:
 15945 00002605 B80300                  	MOV	AX,error_path_not_found
 15946 00002608 EBF7                    	JMP	short ErrorReturn
 15947                                  
 15948                                  Del_found:
 15949 0000260A 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15950 0000260C 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15951 00002611 7405                    	JZ	short NOT_DIR
 15952                                  Del_access_err:
 15953 00002613 B80500                  	MOV	AX,error_access_denied
 15954 00002616 EBE9                    	JMP	short ErrorReturn
 15955                                  
 15956                                  NOT_DIR:
 15957 00002618 08E4                    	OR	AH,AH			; Check if device name
 15958 0000261A 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15959                                  
 15960                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15961                                  
 15962                                  DELFILE:
 15963 0000261C 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15964                                  
 15965                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15966                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15967                                  
 15968 00002621 1E                      	PUSH	DS
 15969 00002622 8A26[7F05]              	MOV	AH,[DELALL]
 15970 00002626 C53E[E205]              	LDS	DI,[CURBUF]
 15971                                  	
 15972                                  ;hkn; SS override
 15973 0000262A 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15974 00002630 7509                    	JNZ	short DoDelete		; yes
 15975                                  
 15976 00002632 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15977 00002636 7403                    	JZ	short DoDelete		; not read only
 15978                                  
 15979 00002638 1F                      	POP	DS
 15980 00002639 EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15981                                  
 15982                                  DoDelete:
 15983 0000263B E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15984 0000263E 7303                    	JNC	short DEL_SHARE_OK
 15985 00002640 1F                      	POP	DS
 15986 00002641 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15987                                  
 15988                                  DEL_SHARE_OK:
 15989                                  	; 17/05/2019 - Retro DOS v4.0
 15990                                  	; MSDOS 6.0
 15991                                  	;test	byte [di+5],40h
 15992 00002643 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15993                                  					;LB. if already dirty		  ;AN000;
 15994 00002647 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15995 00002649 E87335                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15996                                  	;or	byte [di+5],40h
 15997 0000264C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15998                                  yesdirty:
 15999 00002650 8827                    	mov	[bx],ah 
 16000                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16001 00002652 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16002 00002654 1F                      	POP	DS
 16003 00002655 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16004                                  
 16005 0000265A 83FB02                  	CMP	BX,2
 16006 0000265D 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16007                                  	;cmp	bx,[es:bp+0Dh]
 16008 0000265F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16009 00002663 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16010                                  
 16011 00002665 E8BE28                  	call	RELEASE 		; Free file data
 16012 00002668 7252                    	JC	short No_fileJ
 16013                                  
 16014                                  ; DOS 3.3  FastOpen
 16015                                  
 16016 0000266A E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16017                                  
 16018                                  ; DOS 3.3  FastOpen
 16019                                  
 16020                                  DELNXT:
 16021 0000266D C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16022 00002671 E88218                  	call	GETENTRY		; Registers need to be reset
 16023 00002674 7246                    	JC	short No_fileJ
 16024 00002676 E8BB17                  	call	NEXTENT
 16025 00002679 73A1                    	JNC	short DELFILE
 16026 0000267B C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16027                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16028                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16029                                  	;;mov	al,[es:bp+0]
 16030                                  	; 15/12/2022
 16031 0000267F 268A4600                	MOV	AL,[ES:BP]
 16032 00002683 E83434                  	call	FLUSHBUF
 16033 00002686 7234                    	JC	short No_fileJ
 16034                                  ;
 16035                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16036                                  ;
 16037                                  ;   not found not deleted		file not found
 16038                                  ;   not found	  deleted		*** impossible ***
 16039                                  ;	found not deleted		access denied (read-only)
 16040                                  ;	found	  deleted		no error
 16041                                  ;
 16042 00002688 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16043 0000268D 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16044                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16045                                  ; and to force the DOS to issue a media check.
 16046 0000268F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16047 00002694 741C                    	jz	short No_Set_Flag
 16048 00002696 50                      	PUSH	AX
 16049 00002697 06                      	PUSH	ES
 16050 00002698 57                      	PUSH	DI
 16051 00002699 C43E[A205]              	LES	DI,[THISCDS]
 16052 0000269D 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16053 000026A0 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16054 000026A3 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16055                                  	
 16056                                  	; MSDOS 6.0
 16057 000026A7 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16058 000026A9 E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16059                                  	 
 16060 000026AC E88C30                  	call	FATREAD_CDS		; force media check
 16061 000026AF 5F                      	POP	DI
 16062 000026B0 07                      	POP	ES
 16063 000026B1 58                      	POP	AX
 16064                                  No_Set_Flag:
 16065                                  	;call	LCritDisk		; carry is clear
 16066                                  	;retn
 16067                                  	; 18/12/2022
 16068 000026B2 E9BCEC                  	jmp	LCritDisk
 16069                                  DelError:
 16070 000026B5 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16071 000026BA 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16072                                  No_fileJ:
 16073 000026BC E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16074                                  Del_access_errJ:
 16075 000026BF E951FF                  	JMP	Del_access_err ; 10/08/2018
 16076                                  
 16077                                  ; 08/08/2018 - Retro DOS v3.0
 16078                                  
 16079                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16080                                  ;---------------------------------------------------------------------------
 16081                                  ; Procedure Name : REN_DEL_Check
 16082                                  ;
 16083                                  ; Inputs:
 16084                                  ;	[THISDPB] set
 16085                                  ;	[CURBUF+2]:BX points to entry
 16086                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16087                                  ;	[WFP_Start] points to name
 16088                                  ; Function:
 16089                                  ;	Check for Exclusive access on given file.
 16090                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16091                                  ; Outputs:
 16092                                  ;	ES:BP = [THISDPB]
 16093                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16094                                  ;		last element will be loaded from the directory entry.  This is
 16095                                  ;		so the name given to the sharer doesn't have any meta chars in
 16096                                  ;		it.
 16097                                  ;	Carry set if sharing violation, INT 24H generated
 16098                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16099                                  ;		This is because input AX is preserved.
 16100                                  ;		Caller must set the error if needed.
 16101                                  ;	Carry clear
 16102                                  ;		OK
 16103                                  ; AX,DS,BX,SI,DI preserved
 16104                                  ;---------------------------------------------------------------------------
 16105                                  
 16106                                  REN_DEL_Check:
 16107                                  
 16108 000026C2 1E                      	PUSH	DS
 16109 000026C3 57                      	PUSH	DI
 16110 000026C4 50                      	PUSH	AX
 16111 000026C5 53                      	PUSH	BX
 16112 000026C6 56                      	PUSH	SI		; Save CURBUF pointers
 16113                                  	
 16114 000026C7 16                      	push	ss
 16115 000026C8 07                      	pop	es
 16116                                  
 16117                                  ;hkn; context ES will assume ES to DOSDATA
 16118                                  ;hkn; ASSUME	ES:DOSGROUP
 16119                                  
 16120                                  ;hkn; SS override
 16121 000026C9 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16122 000026CE 89DE                    	MOV	SI,BX
 16123                                  
 16124                                  ;hkn; SS override
 16125 000026D0 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16126 000026D5 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16127 000026D7 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16128 000026DA E855EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16129 000026DD 49                      	DEC	CX		; Don't include nul in count
 16130 000026DE 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16131 000026E0 E8DB46                  	call	SkipBack	; Back up one element
 16132 000026E3 47                      	INC	DI		; Point to start of last element
 16133                                  
 16134                                  	; 17/05/2019 - Retro DOS v4.0
 16135                                  ;hkn; SS override
 16136                                  	; MSDOS 6.0
 16137 000026E4 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16138                                  	;
 16139 000026E9 E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16140 000026EC 5E                      	POP	SI		; Get back entry pointers
 16141 000026ED 5B                      	POP	BX
 16142 000026EE 53                      	PUSH	BX
 16143 000026EF 56                      	PUSH	SI		; Back on stack
 16144                                  	
 16145 000026F0 16                      	push	ss
 16146 000026F1 1F                      	pop	ds
 16147                                  
 16148                                  ;hkn; context DS will assume ES to DOSDATA
 16149                                  ;hkn; ASSUME	DS:DOSGROUP
 16150                                  
 16151                                  ; Close the file if possible by us.
 16152                                  ;
 16153                                  ;if installed
 16154 000026F2 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16155                                  ;else
 16156                                  ;	Call	ShCloseFile
 16157                                  ;endif
 16158 000026F6 8C1E[A005]              	MOV	[THISSFT+2],DS
 16159                                  
 16160                                  ;hkn; AUXSTACK is in DOSDATA
 16161 000026FA C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16162                                  				; Scratch space
 16163 00002700 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16164 00002702 E8AB24                  	call	DOOPEN		; Fill in SFT for share check
 16165 00002705 C43E[9E05]              	LES	DI,[THISSFT]
 16166                                  	;mov	word [es:di+2],10h
 16167 00002709 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16168                                  				; requires exclusive access
 16169                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16170 0000270F 26C7050100              	mov	word [ES:DI],1
 16171 00002714 E8CB4C                  	call	ShareEnter
 16172 00002717 720D                    	jc	short CheckDone
 16173 00002719 C43E[9E05]              	LES	DI,[THISSFT]
 16174                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16175 0000271D 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16176                                  	
 16177 00002722 E8B84C                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16178 00002725 F8                      	CLC
 16179                                  CheckDone:
 16180 00002726 C42E[8A05]              	LES	BP,[THISDPB]
 16181 0000272A 5E                      	POP	SI
 16182 0000272B 5B                      	POP	BX
 16183 0000272C 58                      	POP	AX
 16184 0000272D 5F                      	POP	DI
 16185 0000272E 1F                      	POP	DS
 16186 0000272F C3                      	retn
 16187                                  
 16188                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16189                                  ;---------------------------------------------------------------------------
 16190                                  ; Procedure Name : FastOpen_Delete
 16191                                  ; Inputs:
 16192                                  ;	None
 16193                                  ; Function:
 16194                                  ;	Call FastOpen to delete the dir info.
 16195                                  ; Outputs:
 16196                                  ;	None
 16197                                  ;---------------------------------------------------------------------------
 16198                                  
 16199                                  FastOpen_Delete:
 16200 00002730 9C                      	PUSHF			; save flag
 16201 00002731 56                      	PUSH	SI		; save registers
 16202 00002732 53                      	PUSH	BX
 16203 00002733 50                      	PUSH	AX
 16204                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16205                                  ;hkn; SS override
 16206                                  	; 17/05/2019 - Retro DOS v4.0
 16207                                  	; MSDOS 6.0
 16208 00002734 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16209                                  	
 16210 00002739 B003                    	MOV	AL,FONC_delete	; al = 3
 16211                                  fastinvoke:
 16212                                  ;hkn; FastTable is in DOSDATA
 16213 0000273B BB[320D]                	MOV	BX,FastTable+2
 16214 0000273E FF1F                    	CALL	far [BX]	; call fastopen
 16215 00002740 58                      	POP	AX		; restore registers
 16216 00002741 5B                      	POP	BX
 16217 00002742 5E                      	POP	SI
 16218 00002743 9D                      	POPF			; restore flag
 16219 00002744 C3                      	retn
 16220                                  
 16221                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16222                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16223                                  
 16224                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16225                                  ;---------------------------------------------------------------------------
 16226                                  ; PROCEDURE Name : FastOpen_Rename
 16227                                  ;
 16228                                  ; Inputs:
 16229                                  ;	 REN_WFP   = Path Name
 16230                                  ;	 NAME1	   = New Name
 16231                                  ; Function:
 16232                                  ;	Call FastOpen to rename the dir entry in the cache
 16233                                  ; Outputs:
 16234                                  ;	None
 16235                                  ;---------------------------------------------------------------------------
 16236                                  
 16237                                  FastOpen_Rename:
 16238                                  	; 17/05/2019 - Retro DOS v4.0
 16239                                  	; 08/08/2018 - Retro DOS v3.0
 16240                                  	; MSDOS 6.0
 16241 00002745 9C                      	PUSHF			;AN001 save flag
 16242 00002746 56                      	PUSH	SI		;AN001 save registers
 16243 00002747 57                      	PUSH	DI		;AN001
 16244 00002748 53                      	PUSH	BX		;AN001
 16245 00002749 50                      	PUSH	AX		;AN001
 16246                                  	;
 16247                                  ;hkn; SS override
 16248 0000274A 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16249                                  
 16250                                  ;hkn; NAME1 is in DOSDATA
 16251 0000274F BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16252                                  	;mov	al,6
 16253 00002752 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16254                                  	
 16255                                  ;hkn; FastTable is in DOSDATA
 16256 00002754 BB[320D]                	MOV	BX,FastTable+2
 16257 00002757 FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16258                                  	
 16259 00002759 58                      	POP	AX		; restore registers  ;AN001
 16260 0000275A 5B                      	POP	BX				     ;AN001
 16261 0000275B 5F                      	POP	DI				     ;AN001
 16262 0000275C 5E                      	POP	SI				     ;AN001
 16263 0000275D 9D                      	POPF			; restore flag	     ;AN001
 16264 0000275E C3                      	retn					     ;AN001
 16265                                  
 16266                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16267                                  ;---------------------------------------------------------------------------
 16268                                  ; Procedure Name : FastOpen_Update
 16269                                  ;
 16270                                  ; Inputs:
 16271                                  ;	DL     drive number (A=0,B=1,,,)
 16272                                  ;	CX     first cluster #
 16273                                  ;	AH     0 updates dir entry
 16274                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16275                                  ;	ES:DI  directory entry
 16276                                  ; Function:
 16277                                  ;	Call FastOpen to update the dir info.
 16278                                  ; Outputs:
 16279                                  ;	None
 16280                                  ;---------------------------------------------------------------------------
 16281                                  
 16282                                  FastOpen_Update:
 16283 0000275F 9C                      	PUSHF			; save flag
 16284 00002760 56                      	PUSH	SI
 16285 00002761 53                      	PUSH	BX		; save regs
 16286 00002762 50                      	PUSH	AX
 16287 00002763 B004                    	MOV	AL,FONC_update	; al = 4
 16288 00002765 EBD4                    	JMP	short fastinvoke
 16289                                  
 16290                                  	; 17/05/2019
 16291                                  
 16292                                  	; MSDOS 6.0
 16293                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16294                                  ;---------------------------------------------------------------------------
 16295                                  Fast_Dispatch:
 16296                                  ;hkn; FastTable is in DOSDATA
 16297 00002767 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16298                                  ;hkn; use SS override
 16299 0000276A 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16300 0000276D C3                      	retn
 16301                                  
 16302                                  ;============================================================================
 16303                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16304                                  ;============================================================================
 16305                                  ; 08/08/2018 - Retro DOS v3.0
 16306                                  ; 17/05/2019 - Retro DOS v4.0
 16307                                  
 16308                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16309                                  ;	NAME	DOS_RENAME
 16310                                  
 16311                                  ;**	Low level routine for renaming files
 16312                                  ;----------------------------------------------------------------------------
 16313                                  ;	DOS_RENAME
 16314                                  ;
 16315                                  ;	Modification history:
 16316                                  ;
 16317                                  ;	    Created: ARR 30 March 1983
 16318                                  
 16319                                  ;----------------------------------------------------------------------------
 16320                                  ;
 16321                                  ; Procedure Name : DOS_RENAME
 16322                                  ;
 16323                                  ; Inputs:
 16324                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16325                                  ;		chars, NUL terminated)
 16326                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16327                                  ;		( = -1 if current dir not involved, else
 16328                                  ;		 Points to first char after last "/" of current dir part)
 16329                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16330                                  ;		chars, NUL terminated)
 16331                                  ;	[THISCDS] Points to CDS being used
 16332                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16333                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16334                                  ; Function:
 16335                                  ;	Rename the specified file(s)
 16336                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16337                                  ; Outputs:
 16338                                  ;	CARRY CLEAR
 16339                                  ;	    OK
 16340                                  ;	CARRY SET
 16341                                  ;	    AX is error code
 16342                                  ;		error_file_not_found
 16343                                  ;			No match for source, or dest path invalid
 16344                                  ;		error_not_same_device
 16345                                  ;			Source and dest are on different devices
 16346                                  ;		error_access_denied
 16347                                  ;			Directory specified (not simple rename),
 16348                                  ;			Device name given, Destination exists.
 16349                                  ;			NOTE: In third case some renames may have
 16350                                  ;			 been done if metas.
 16351                                  ;		error_path_not_found
 16352                                  ;			Bad path (not in curr dir part if present)
 16353                                  ;			SOURCE ONLY
 16354                                  ;		error_bad_curr_dir
 16355                                  ;			Bad path in current directory part of path
 16356                                  ;			SOURCE ONLY
 16357                                  ;		error_sharing_violation
 16358                                  ;			Deny both access required, generates an INT 24.
 16359                                  ; DS preserved, others destroyed
 16360                                  ;
 16361                                  ;----------------------------------------------------------------------------
 16362                                  
 16363                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16364                                  
 16365                                  DOS_RENAME:
 16366                                  
 16367                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16368                                  ;hkn; at this point to DOSDATA.
 16369                                  
 16370 0000276E E821EB                  	call	TestNet
 16371 00002771 7306                    	JNC	short LOCAL_RENAME
 16372                                  
 16373                                  ;IF NOT Installed
 16374                                  ;	transfer NET_RENAME
 16375                                  ;ELSE
 16376                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16377                                  	;INT	2FH
 16378                                  	;return
 16379                                  
 16380 00002773 B81111                  	mov     ax, 1111h
 16381 00002776 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16382                                  			; SS = DS = DOS CS, 
 16383                                  			; SDA first filename pointer = offset of fully-qualified old name
 16384                                  			; SDA CDS pointer -> current directory
 16385                                  			; Return: CF set on error
 16386 00002778 C3                      	retn
 16387                                  ;ENDIF
 16388                                  
 16389                                  LOCAL_RENAME:
 16390 00002779 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16391 0000277E 8B36[B205]              	MOV	SI,[WFP_START]
 16392 00002782 8B3E[B405]              	MOV	DI,[REN_WFP]
 16393 00002786 8A04                    	MOV	AL,[SI]
 16394 00002788 8A25                    	MOV	AH,[DI]
 16395 0000278A 0D2020                  	OR	AX,2020H		; Lower case
 16396 0000278D 38E0                    	CMP	AL,AH
 16397 0000278F 7405                    	JZ	short SAMEDRV
 16398 00002791 B81100                  	MOV	AX,error_not_same_device ; 11h
 16399 00002794 F9                      	STC
 16400 00002795 C3                      	retn
 16401                                  
 16402                                  SAMEDRV:
 16403 00002796 FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16404 0000279A FF36[2C03]              	PUSH	WORD [DMAADD]
 16405 0000279E 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16406                                  
 16407                                  ;hkn; RENAMEDMA is in DOSDATA
 16408 000027A2 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16409 000027A8 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16410 000027AD E8A6EB                  	call	ECritDisk
 16411 000027B0 E8F505                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16412                                  					;    points to entry
 16413 000027B3 7314                    	JNC	short Check_Dev
 16414 000027B5 83F812                  	CMP	AX,error_no_more_files ; 12h
 16415 000027B8 7503                    	JNZ	short GOTERR
 16416 000027BA B80200                  	MOV	AX,error_file_not_found ; 2
 16417                                  GOTERR:
 16418 000027BD F9                      	STC
 16419                                  RENAME_POP:
 16420 000027BE 8F06[2C03]              	POP	WORD [DMAADD]
 16421 000027C2 8F06[2E03]              	POP	WORD [DMAADD+2]
 16422                                  	;call	LCritDisk
 16423                                  	;retn
 16424                                  	; 16/12/2022
 16425 000027C6 E9A8EB                  	jmp	LCritDisk
 16426                                  
 16427                                  Check_Dev:
 16428                                  	; 17/05/2019 - Retro DOS v4.0
 16429                                  	;mov	ax,5
 16430 000027C9 B80500                  	MOV	AX,error_access_denied	; Assume error
 16431                                  	
 16432                                  	; MSDOS 6.0
 16433 000027CC 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16434 000027CD C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16435                                  	;add	si,21
 16436 000027D1 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16437                                  	;test	byte [si+11],10h
 16438 000027D4 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16439 000027D8 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16440 000027DA 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16441 000027DE E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16442                                  notdir:
 16443 000027E1 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16444 000027E2 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16445                                  
 16446                                  	; MSDOS 3.3 & MSDOS 6.0
 16447 000027E4 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16448 000027E9 75D2                    	JNZ	short GOTERR
 16449                                  
 16450                                  ; At this point a source has been found. There is search continuation info (a
 16451                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16452                                  ; directory entry found.
 16453                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16454                                  ; throughout the RENAME since it is known at this point that the source and
 16455                                  ; destination are both on the same device.
 16456                                  ; [SATTRIB] is also set.
 16457                                  
 16458 000027EB 89DE                    	MOV	SI,BX
 16459                                  	;add	si,26
 16460 000027ED 83C61A                  	ADD	SI,dir_entry.dir_first
 16461 000027F0 E8CFFE                  	call	REN_DEL_Check
 16462 000027F3 7305                    	JNC	short REN_OK1
 16463 000027F5 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16464 000027F8 EBC4                    	JMP	short RENAME_POP
 16465                                  
 16466                                  ;------------------------------------------------------------------------------
 16467                                  ; Check if the source is a file or directory. If file, delete the entry
 16468                                  ; from the Fastopen cache. If directory, rename it later
 16469                                  ;------------------------------------------------------------------------------
 16470                                  
 16471                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16472                                  	; MSDOS 6.0
 16473 000027FA 56                      	PUSH	SI
 16474 000027FB C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16475                                  	;add	si,21
 16476 000027FF 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16477                                  	;test	byte [si+11],10h
 16478 00002802 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16479 00002806 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16480 00002808 5E                      	POP	SI			;BN00X
 16481 00002809 EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16482                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16483 0000280B 5E                      	POP	SI
 16484                                  
 16485                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16486 0000280C E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16487                                  SWAP_SOURCE:
 16488                                  	; MSDOS 3.3
 16489                                  	;MOV	SI,[REN_WFP]
 16490                                  	;MOV	[WFP_START],SI
 16491                                  	; MSDOS 6.0
 16492 0000280F A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16493 00002812 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16494 00002816 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16495 0000281A A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16496                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16497 0000281D C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16498                                  	;mov	word [CREATING],0E5FFh
 16499 00002823 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16500                                  					; A rename is like a CREATE_NEW as far
 16501                                  					; as the destination is concerned.
 16502 00002829 E85F17                  	call	GetPathNoSet
 16503                                  
 16504                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16505                                  ;   since no files match the destination name. If it fails for any other
 16506                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16507                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16508                                  ;   if the rename should fail because we haven't built an explicit name by
 16509                                  ;   substituting for the meta chars in it. In this case the destination file
 16510                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16511                                  ;   in the directory entry part.
 16512                                  	
 16513 0000282C 7223                    	JC	short NODEST
 16514                                  	
 16515                                  	; MSDOS 6.0
 16516                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16517                                  	; !! MSDOS 3.3 !!
 16518                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16519                                  
 16520 0000282E 08E4                    	OR	AH,AH			; Device?
 16521 00002830 792C                    	JNS	short SAVEDEST		; No, continue
 16522                                  BAD_ACC:
 16523 00002832 B80500                  	MOV	AX,error_access_denied
 16524 00002835 F9                      	STC
 16525                                  RENAME_CLEAN:
 16526 00002836 9C                      	PUSHF				; Save carry state
 16527 00002837 50                      	PUSH	AX			; and error code (if carry set)
 16528 00002838 A0[7605]                	MOV	AL,[THISDRV]
 16529 0000283B E87C32                  	call	FLUSHBUF
 16530 0000283E 58                      	POP	AX
 16531 0000283F 803E[4A03]00            	CMP	byte [FAILERR],0
 16532 00002844 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16533 00002846 9D                      	POPF
 16534 00002847 E974FF                  	JMP	RENAME_POP
 16535                                  
 16536                                  BAD_ERR:
 16537 0000284A 58                      	POP	AX			; Saved flags
 16538                                  	; 16/12/202
 16539                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16540                                  BAD_PATH: ; *
 16541 0000284B B80300                  	MOV	AX,error_path_not_found
 16542 0000284E E96CFF                  	JMP	GOTERR
 16543                                  
 16544                                  NODEST:
 16545 00002851 75F8                    	JNZ	short BAD_PATH
 16546 00002853 803E[4A03]00            	CMP	byte [FAILERR],0
 16547 00002858 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16548                                  					; because user FAILed on I 24
 16549                                  	; 14/11/2022
 16550 0000285A 08C9                    	OR	CL,CL
 16551                                  	;JNZ	short SAVEDEST
 16552                                  	; 17/05/2019
 16553 0000285C 74ED                    	jz	short BAD_PATH ; *
 16554                                  ;BAD_PATH: ; *
 16555                                  ;	MOV	AX,error_path_not_found
 16556                                  ;	;STC
 16557                                  ;	;JMP	RENAME_POP
 16558                                  ;	; 17/05/2019
 16559                                  ;	jmp	GOTERR 
 16560                                  
 16561                                  ; 16/12/2022
 16562                                  %if 0
 16563                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16564                                  	or	cl,cl
 16565                                  	jnz	short SAVEDEST
 16566                                  	;jz	short BAD_PATH ; *
 16567                                  BAD_PATH: ; *
 16568                                  	;mov	ax,3
 16569                                  	mov	ax,error_path_not_found
 16570                                  	stc
 16571                                  	jmp	RENAME_POP
 16572                                  %endif
 16573                                  
 16574                                  SAVEDEST:
 16575 0000285E 16                      	push	ss
 16576 0000285F 07                      	pop	es
 16577                                  
 16578                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16579 00002860 BF[5705]                	MOV	DI,NAME2
 16580 00002863 BE[4B05]                	MOV	SI,NAME1
 16581                                  
 16582 00002866 B90B00                  	MOV	CX,11
 16583 00002869 F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16584 0000286B A1[C205]                	MOV	AX,[DIRSTART]
 16585 0000286E A3[6405]                	MOV	[DESTSTART],AX
 16586                                  BUILDDEST:
 16587 00002871 16                      	push	ss
 16588 00002872 07                      	pop	es			; needed due to JMP BUILDDEST below
 16589                                  
 16590                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16591 00002873 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16592 00002876 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16593 00002879 BE[5705]                	MOV	SI,NAME2		; Raw dest
 16594                                  
 16595 0000287C B90B00                  	MOV	CX,11
 16596                                  
 16597                                  	; 17/05/2019 - Retro DOS v4.0
 16598                                  	
 16599                                  	; MSDOS 6.0
 16600 0000287F E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16601                                  
 16602                                  	; MSDOS 3.3
 16603                                  
 16604                                  ; 08/08/2018 - Retro DOS v3.0
 16605                                  ; MSDOS 6.0 
 16606                                  ;---------------------------------------------------------------------------
 16607                                  ;Procedure: NEW_RENAME
 16608                                  ;
 16609                                  ;Input: DS:SI -> raw string with ?
 16610                                  ;	ES:DI -> destination string
 16611                                  ;	DS:BX -> source string
 16612                                  ;Function: replace ? chars of raw string with chars in source string and
 16613                                  ;	   put in destination string
 16614                                  ;Output: ES:DI-> new string
 16615                                  ;---------------------------------------------------------------------------
 16616                                  ;
 16617                                  ;NEW_RENAME:
 16618                                  ;NEWNAM:
 16619                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16620                                  ;	LODSB
 16621                                  ;	CMP	AL,"?"
 16622                                  ;	JNZ	short NOCHG
 16623                                  ;	MOV	AL,[BX] 		; Get replace char
 16624                                  ;NOCHG:
 16625                                  ;	STOSB
 16626                                  ;	INC	BX			; Next replace char
 16627                                  ;	LOOP	NEWNAM
 16628                                  ;	; MSDOS 6.0
 16629                                  ;	;retn
 16630                                  
 16631                                  	; MSDOS 3.3 & MSDOS 6.0
 16632                                  	;mov	byte [ATTRIB],16h
 16633 00002882 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16634 00002887 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16635 0000288C E8AB19                  	call	DEVNAME 		; Check if we built a device name
 16636 0000288F 73A1                    	JNC	short BAD_ACC
 16637 00002891 8B1E[6405]              	MOV	BX,[DESTSTART]
 16638 00002895 C42E[8A05]              	LES	BP,[THISDPB]
 16639 00002899 E88C16                  	call	SETDIRSRCH		; Reset search to start of dir
 16640 0000289C 7294                    	JC	short BAD_ACC 		; Screw up
 16641 0000289E E84615                  	call	FINDENTRY		; See if new name already exists
 16642 000028A1 738F                    	JNC	short BAD_ACC 		; Error if found
 16643 000028A3 803E[4A03]00            	CMP	byte [FAILERR],0
 16644 000028A8 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16645 000028AA A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16646 000028AD 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16647 000028B1 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16648                                  
 16649                                  	;mov	al,[RENAMEDMA+32]
 16650 000028B3 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16651 000028B6 A810                    	TEST	AL,attr_directory ; 10h
 16652 000028B8 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16653                                  					; otherwise the . and .. entries get
 16654                                  					; wiped.
 16655 000028BA A2[6B05]                	MOV	[ATTRIB],AL
 16656 000028BD 8C1E[A005]              	MOV	[THISSFT+2],DS
 16657                                  
 16658                                  ;hkn; AUXSTACK is in DOSDATA
 16659                                  	;mov	si,[RENAMEDMA+145h]
 16660 000028C1 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16661 000028C4 8936[9E05]              	MOV	[THISSFT],SI
 16662                                  	;mov	word [SI+2],2
 16663 000028C8 C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16664 000028CD 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16665 000028CF E84621                  	call	RENAME_MAKE		; This is in mknode
 16666 000028D2 7303                    	JNC	short GOT_DEST
 16667                                  BAD_ACCJ:
 16668 000028D4 E95BFF                  	JMP	BAD_ACC
 16669                                  
 16670                                  GOT_DEST:
 16671 000028D7 53                      	push	bx
 16672 000028D8 C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16673 000028DC E8FE4A                  	call	ShareEnd		; we need to remove it.
 16674 000028DF 5B                      	pop	bx
 16675                                  
 16676                                  ; A zero length entry with the correct new name has now been made at
 16677                                  ;   [CURBUF+2]:BX.
 16678                                  
 16679 000028E0 C43E[E205]              	LES	DI,[CURBUF]
 16680                                  
 16681                                  	; MSDOS 6.0
 16682                                  	;test	byte [es:di+5],40h
 16683 000028E4 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16684                                  					;LB. if already dirty		  ;AN000;
 16685 000028E9 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16686 000028EB E8D132                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16687                                  	;or	byte [es:di+5],40h
 16688 000028EE 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16689                                  yesdirty1:
 16690 000028F3 89DF                    	MOV	DI,BX
 16691                                  	;add	di,11
 16692 000028F5 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16693                                  
 16694                                  ;hkn; RENAMEDMA is in DOSDATA
 16695                                  	;mov	si,[RENAMEDMA+32]
 16696 000028F8 BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16697                                  	;mov	cx,21
 16698 000028FB B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16699 000028FE F3A4                    	REP	MOVSB
 16700 00002900 E87B00                  	CALL	GET_SOURCE
 16701 00002903 7276                    	JC	short RENAME_OVER
 16702 00002905 89DF                    	MOV	DI,BX
 16703 00002907 8E06[E405]              	MOV	ES,[CURBUF+2]
 16704 0000290B B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16705 0000290D AA                      	STOSB				; "free" the source
 16706 0000290E EB13                    	JMP	SHORT DIRTY_IT
 16707                                  
 16708                                  SIMPLE_RENAME:
 16709 00002910 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16710 00002913 7266                    	JC	short RENAME_OVER
 16711 00002915 89DF                    	MOV	DI,BX
 16712 00002917 8E06[E405]              	MOV	ES,[CURBUF+2]
 16713                                  
 16714                                  ;hkn; NAME1 is in DOSDATA
 16715 0000291B BE[4B05]                	MOV	SI,NAME1		; New Name
 16716 0000291E B90B00                  	MOV	CX,11
 16717 00002921 F3A4                    	REP	MOVSB
 16718                                  DIRTY_IT:
 16719 00002923 8B3E[E205]              	MOV	DI,[CURBUF]
 16720                                  
 16721                                  	; MSDOS 6.0
 16722 00002927 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16723                                  					;LB. if already dirty		  ;AN000;
 16724 0000292C 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16725 0000292E E88E32                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16726                                  	
 16727 00002931 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16728                                  
 16729                                  ;------------------------------------------------------------------------------
 16730                                  ; Check if the source is a directory of file. If directory rename it to the
 16731                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16732                                  ; previously deleted.
 16733                                  ;------------------------------------------------------------------------------
 16734                                  
 16735                                  yesdirty2:
 16736                                  	; MSDOS 6.0
 16737 00002936 56                      	PUSH	SI
 16738 00002937 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16739 0000293B 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16740 0000293E F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16741 00002942 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16742 00002944 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16743 00002947 5E                      	POP	SI
 16744 00002948 EB01                    	JMP	SHORT NOT_DIRTY1
 16745                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16746 0000294A 5E                      	POP	SI
 16747                                  NOT_DIRTY1:				;;BN00X
 16748                                  NEXT_SOURCE:
 16749                                  ;hkn; RENAMEDMA is in DOSDATA
 16750 0000294B BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16751                                  
 16752                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16753                                  ; to enter it before going to RENAME_Next.
 16754                                  
 16755 0000294E E805EA                  	call	ECritDisk
 16756 00002951 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16757                                  				  ;  to FF when we made the prev new file).
 16758 00002956 E88705                  	call	RENAME_NEXT
 16759                                  
 16760                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16761                                  ; we were before.
 16762                                  
 16763 00002959 7220                    	JC	short RENAME_OVER
 16764                                  
 16765                                  	;lea	si,[bx+26]
 16766 0000295B 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16767 0000295E E861FD                  	call	REN_DEL_Check
 16768 00002961 7306                    	JNC	short REN_OK2
 16769 00002963 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16770                                  jmp_to_rename_clean: ; 28/12/2022
 16771 00002966 E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16772                                  
 16773                                  ;------------------------------------------------------------------------------
 16774                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16775                                  ; if directory, rename directory name in the Fastopen cache.
 16776                                  ;-----------------------------------------------------------------------------
 16777                                  
 16778                                  REN_OK2:
 16779                                  	; MSDOS 6.0
 16780                                  	;mov	al,[RERNAMEDMA+32]
 16781 00002969 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16782                                  	;test	al,10h
 16783 0000296C A810                    	TEST	AL,attr_directory	;;BN00X directory
 16784 0000296E 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16785                                  	
 16786                                  	; MSDOS 3.3 & MSDOS 6.0
 16787 00002970 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16788                                  jmp_to_builddest: ; 28/12/2022
 16789 00002973 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16790                                  
 16791                                  	; MSDOS 6.0
 16792                                  Ren_Directory:
 16793 00002976 E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16794                                  	;JMP	BUILDDEST
 16795                                  	; 28/12/2022
 16796 00002979 EBF8                    	jmp	short jmp_to_builddest
 16797                                  
 16798                                  RENAME_OVER:
 16799 0000297B F8                      	CLC
 16800                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 16801                                  	; 28/12/2022
 16802 0000297C EBE8                    	jmp	short jmp_to_rename_clean
 16803                                  
 16804                                  ;----------------------------------------------------------------------------
 16805                                  ; Procedure: GET_SOURCE
 16806                                  ;
 16807                                  ; Inputs:
 16808                                  ;	RENAMEDMA has source info
 16809                                  ; Function:
 16810                                  ;	Re-find the source
 16811                                  ; Output:
 16812                                  ;	[CURBUF] set
 16813                                  ;	[CURBUF+2]:BX points to entry
 16814                                  ;	Carry set if error (currently user FAILed to I 24)
 16815                                  ; DS preserved, others destroyed
 16816                                  ;----------------------------------------------------------------------------
 16817                                  
 16818                                  GET_SOURCE:
 16819 0000297E 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16820 00002982 C42E[8A05]              	LES	BP,[THISDPB]
 16821 00002986 E89F15                  	call	SETDIRSRCH
 16822 00002989 7214                    	JC	short gs_ret_label	; retc
 16823 0000298B E88B18                  	call	STARTSRCH
 16824 0000298E A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16825                                  	;call	GETENT
 16826                                  	; 18/12/2022
 16827 00002991 E96515                  	jmp	GETENT
 16828                                  ;gs_ret_label:
 16829                                  	;retn
 16830                                  
 16831                                  ; MSDOS 6.0 
 16832                                  ;---------------------------------------------------------------------------
 16833                                  ;Procedure: NEW_RENAME
 16834                                  ;
 16835                                  ;Input: DS:SI -> raw string with ?
 16836                                  ;	ES:DI -> destination string
 16837                                  ;	DS:BX -> source string
 16838                                  ;Function: replace ? chars of raw string with chars in source string and
 16839                                  ;	   put in destination string
 16840                                  ;Output: ES:DI-> new string
 16841                                  ;---------------------------------------------------------------------------
 16842                                  
 16843                                  NEW_RENAME:
 16844                                  	; 17/05/2019 - Retro DOS v4.0
 16845                                  NEWNAM:
 16846                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16847 00002994 AC                      	LODSB
 16848 00002995 3C3F                    	CMP	AL,"?" ; 3Fh
 16849 00002997 7502                    	JNZ	short NOCHG
 16850 00002999 8A07                    	MOV	AL,[BX] 		; Get replace char
 16851                                  NOCHG:
 16852 0000299B AA                      	STOSB
 16853 0000299C 43                      	INC	BX			; Next replace char
 16854 0000299D E2F5                    	LOOP	NEWNAM
 16855                                  	; MSDOS 6.0
 16856                                  gs_ret_label:	; 18/12/2022
 16857 0000299F C3                      	retn
 16858                                  
 16859                                  ;============================================================================
 16860                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16861                                  ;============================================================================
 16862                                  ; 08/08/2018 - Retro DOS v3.0
 16863                                  ; 17/05/2019 - Retro DOS v4.0
 16864                                  
 16865                                  ;**	Low level routines for returning file information and setting file
 16866                                  ;	attributes
 16867                                  ;
 16868                                  ;	GET_FILE_INFO
 16869                                  ;	SET_FILE_ATTRIBUTE
 16870                                  ;
 16871                                  ;	Modification history:
 16872                                  ;
 16873                                  ;	    Created: ARR 30 March 1983
 16874                                  ;
 16875                                  ;	M025: Return access_denied if attempting to set
 16876                                  ;	      attribute of root directory.
 16877                                  ;
 16878                                  
 16879                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16880                                  
 16881                                  ;---------------------------------------------------------------------------
 16882                                  ; Procedure Name : GET_FILE_INFO
 16883                                  ;
 16884                                  ; Inputs:
 16885                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16886                                  ;		terminated)
 16887                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16888                                  ;		( = -1 if current dir not involved, else
 16889                                  ;		 Points to first char after last "/" of current dir part)
 16890                                  ;	[THISCDS] Points to CDS being used
 16891                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16892                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16893                                  ; Function:
 16894                                  ;	Get Information about a file
 16895                                  ; Returns:
 16896                                  ;	CARRY CLEAR
 16897                                  ;	    AX = Attribute of file
 16898                                  ;	    CX = Time stamp of file
 16899                                  ;	    DX = Date stamp of file
 16900                                  ;	    BX:DI = Size of file (32 bit)
 16901                                  ;	CARRY SET
 16902                                  ;	    AX is error code
 16903                                  ;		error_file_not_found
 16904                                  ;			Last element of path not found
 16905                                  ;		error_path_not_found
 16906                                  ;			Bad path (not in curr dir part if present)
 16907                                  ;		error_bad_curr_dir
 16908                                  ;			Bad path in current directory part of path
 16909                                  ; DS preserved, others destroyed
 16910                                  ;---------------------------------------------------------------------------
 16911                                  
 16912                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16913                                  
 16914                                  GET_FILE_INFO:
 16915                                  
 16916                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16917                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16918                                  
 16919 000029A0 E8EFE8                  	call	TestNet
 16920 000029A3 7306                    	JNC	short LOCAL_INFO
 16921                                  
 16922                                  ;IF NOT Installed
 16923                                  ;	transfer NET_GET_FILE_INFO
 16924                                  ;ELSE
 16925                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16926                                  ;	INT	2FH
 16927                                  ;	return
 16928                                  
 16929 000029A5 B80F11                  	mov     ax, 110Fh
 16930 000029A8 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16931                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16932                                  			; SDA CDS pointer -> current directory
 16933                                  			; Return: CF set on error, AX = file attributes
 16934 000029AA C3                      	retn
 16935                                  ;ENDIF
 16936                                  
 16937                                  LOCAL_INFO:
 16938 000029AB E8A8E9                  	call	ECritDisk
 16939 000029AE C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16940                                  	; MSDOS 3.3
 16941                                  	;call	GETPATH
 16942                                  	; MSDOS 6.0
 16943 000029B3 E8D800                  	call	GET_FAST_PATH
 16944                                  	; MSDOS 3.3 & MSDOS 6.0
 16945 000029B6 7312                    	JNC	short info_check_dev
 16946                                  NO_PATH:
 16947 000029B8 750B                    	JNZ	short bad_path1
 16948 000029BA 08C9                    	OR	CL,CL
 16949 000029BC 7407                    	JZ	short bad_path1
 16950                                  info_no_file:
 16951 000029BE B80200                  	MOV	AX,error_file_not_found
 16952                                  BadRet:
 16953 000029C1 F9                      	STC
 16954                                  JustRet:
 16955                                  	;call	LCritDisk
 16956                                  	;retn
 16957                                  	; 18/12/2022
 16958 000029C2 E9ACE9                  	jmp	LCritDisk
 16959                                  
 16960                                  bad_path1:
 16961 000029C5 B80300                  	MOV	AX,error_path_not_found
 16962 000029C8 EBF7                    	jmp	short BadRet
 16963                                  
 16964                                  info_check_dev:
 16965 000029CA 08E4                    	OR	AH,AH
 16966 000029CC 78F0                    	JS	short info_no_file	; device
 16967                                  
 16968                                  	; MSDOS 6.0
 16969                                  ;SR;
 16970                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16971                                  ;for a root dir
 16972                                  
 16973 000029CE 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16974 000029D3 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16975                                  
 16976 000029D5 30E4                    	xor	ah,ah
 16977 000029D7 B010                    	mov	al,attr_directory ; 10h
 16978                                  	;clc
 16979                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16980                                  	; (DOSCODE:683Eh)
 16981                                  	; 16/12/2022
 16982                                  	;clc
 16983 000029D9 EBE7                    	jmp	short JustRet
 16984                                  
 16985                                  not_root:
 16986                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16987 000029DB 1E                      	PUSH	DS
 16988 000029DC 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16989 000029E0 89DE                    	MOV	SI,BX
 16990 000029E2 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16991 000029E4 89DF                    	MOV	DI,BX
 16992                                  	;mov	cx,[si+16h]
 16993 000029E6 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16994                                  	;mov	dx,[si+18h]
 16995 000029E9 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16996 000029EC 30E4                    	XOR	AH,AH
 16997                                  	;mov	al,[si+0Bh]
 16998 000029EE 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16999                                  	;test	al,10h
 17000 000029F1 A810                    	TEST	AL,attr_directory
 17001 000029F3 7506                    	JNZ	short NO_SIZE
 17002                                  	;mov	di,[si+1Ch]
 17003 000029F5 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17004                                  	;mov	bx,[si+1Eh]
 17005 000029F8 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17006                                  NO_SIZE:
 17007 000029FB 1F                      	POP	DS
 17008                                  	;CLC
 17009                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17010                                  	; (DOSCODE:6864h)
 17011                                  	; 16/12/2022
 17012                                  	;clc
 17013 000029FC EBC4                    	jmp	short JustRet
 17014                                  
 17015                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17016                                  ;-------------------------------------------------------------------------------
 17017                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17018                                  ; Inputs:
 17019                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17020                                  ;		terminated)
 17021                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17022                                  ;		( = -1 if current dir not involved, else
 17023                                  ;		 Points to first char after last "/" of current dir part)
 17024                                  ;	[THISCDS] Points to CDS being used
 17025                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17026                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17027                                  ;	AX is new attributes to give to file
 17028                                  ; Function:
 17029                                  ;	Set File Attributes
 17030                                  ; Returns:
 17031                                  ;	CARRY CLEAR
 17032                                  ;	    No error
 17033                                  ;	CARRY SET
 17034                                  ;	    AX is error code
 17035                                  ;		error_file_not_found
 17036                                  ;			Last element of path not found
 17037                                  ;		error_path_not_found
 17038                                  ;			Bad path (not in curr dir part if present)
 17039                                  ;		error_bad_curr_dir
 17040                                  ;			Bad path in current directory part of path
 17041                                  ;		error_access_denied
 17042                                  ;			Attempt to set an attribute which cannot be set
 17043                                  ;			(attr_directory, attr_volume_ID)
 17044                                  ;		error_sharing_violation
 17045                                  ;			Sharing mode of file did not allow the change
 17046                                  ;			(this request requires exclusive write/read access)
 17047                                  ;			(INT 24H generated)
 17048                                  ; DS preserved, others destroyed
 17049                                  ;----------------------------------------------------------------------------
 17050                                  
 17051                                  SET_FILE_ATTRIBUTE:
 17052                                  
 17053                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17054                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17055                                  
 17056 000029FE A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17057 00002A01 7414                    	JZ	short set_look
 17058                                  _BAD_ACC:
 17059 00002A03 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17060 00002A08 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17061 00002A0D C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17062 00002A12 B80500                  	MOV	AX,error_access_denied ; 5
 17063 00002A15 F9                      	STC
 17064 00002A16 C3                      	retn
 17065                                  
 17066                                  set_look:
 17067 00002A17 E878E8                  	call	TestNet
 17068 00002A1A 7308                    	JNC	short LOCAL_SET
 17069                                  
 17070                                  ;IF NOT Installed
 17071                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17072                                  ;ELSE
 17073 00002A1C 50                      	PUSH	AX
 17074                                  	
 17075                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17076                                  	;INT	2FH
 17077                                  
 17078 00002A1D B80E11                  	mov     ax, 110Eh
 17079 00002A20 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17080                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17081                                  			; SDA CDS pointer -> current directory
 17082                                  			; STACK: WORD new file attributes
 17083                                  			; Return: CF set on error
 17084                                  
 17085 00002A22 5B                      	POP	BX			; clean stack
 17086 00002A23 C3                      	retn
 17087                                  ;ENDIF
 17088                                  
 17089                                  LOCAL_SET:
 17090 00002A24 E82FE9                  	call	ECritDisk
 17091 00002A27 50                      	PUSH	AX			; Save new attributes
 17092 00002A28 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17093 00002A2D E85515                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17094 00002A30 7303                    	JNC	short set_check_device
 17095 00002A32 5B                      	POP	BX			; Clean stack (don't zap AX)
 17096 00002A33 EB83                    	JMP	short NO_PATH
 17097                                  
 17098                                  set_check_device:
 17099 00002A35 08E4                    	OR	AH,AH
 17100 00002A37 7906                    	JNS	short set_check_share
 17101 00002A39 58                      	POP	AX
 17102 00002A3A E834E9                  	call	LCritDisk
 17103 00002A3D EBC4                    	JMP	short _BAD_ACC 		; device
 17104                                  
 17105                                  set_check_share:
 17106 00002A3F 58                      	POP	AX			; Get new attributes
 17107                                  
 17108                                  	; MSDOS 6.0
 17109 00002A40 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17110 00002A45 740A                    	je	short cannot_set_root	; M025: Y: return error
 17111                                  
 17112                                  	; MSDOS 3.3 & MSDOS 6.0
 17113 00002A47 E878FC                  	call	REN_DEL_Check
 17114 00002A4A 730B                    	JNC	short set_do
 17115 00002A4C B82000                  	MOV	AX,error_sharing_violation ; 32
 17116 00002A4F EB3A                    	jmp	short OK_BYE
 17117                                  
 17118                                  	; MSDOS 6.0
 17119                                  cannot_set_root:			; M025:
 17120 00002A51 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17121 00002A54 F9                      	stc				; M025: to set attr. of root
 17122 00002A55 EB34                    	jmp	short OK_BYE		; M025:
 17123                                  
 17124                                  set_do:
 17125                                  	; MSDOS 3.3 & MSDOS 6.0
 17126 00002A57 C43E[E205]              	LES	DI,[CURBUF]
 17127 00002A5B 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17128 00002A60 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17129                                  
 17130                                  	; MSDOS 6.0
 17131 00002A64 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17132                                  					;LB. if already dirty		  ;AN000;
 17133 00002A69 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17134 00002A6B E85131                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17135                                  	
 17136 00002A6E 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17137                                  yesdirty3:
 17138 00002A73 A0[7605]                	MOV	AL,[THISDRV]
 17139                                  ;;;; 10/1/86 F.C update fastopen cache
 17140 00002A76 52                      	PUSH	DX
 17141 00002A77 57                      	PUSH	DI
 17142 00002A78 B400                    	MOV	AH,0		  ; dir entry update
 17143 00002A7A 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17144 00002A7C 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17145 00002A7E E8DEFC                  	call	FastOpen_Update
 17146 00002A81 5F                      	POP	DI
 17147 00002A82 5A                      	POP	DX
 17148                                  ;;;; 9/11/86 F.C update fastopen cache
 17149 00002A83 E83430                  	call	FLUSHBUF
 17150 00002A86 7303                    	JNC	short OK_BYE
 17151 00002A88 B80200                  	MOV	AX,error_file_not_found
 17152                                  OK_BYE:
 17153                                  	;call	LCritDisk
 17154                                  	;retn
 17155                                  	; 16/12/2022
 17156 00002A8B E9E3E8                  	jmp	LCritDisk
 17157                                  
 17158                                  	; 17/05/2019 - Retro DOS v4.0
 17159                                  
 17160                                  	; MSDOS 6.0
 17161                                  GET_FAST_PATH:
 17162                                  ;hkn; use SS override for FastOpenFlg
 17163 00002A8E 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17164                                  					;FO. trigger fastopen	;AN000;
 17165 00002A94 E8EE14                  	call	GETPATH
 17166 00002A97 9C                      	PUSHF			 	;FO.			;AN000;
 17167 00002A98 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17168                                  					;FO. clear all fastopen flags ;AN000;
 17169 00002A9E 9D                      	POPF				;FO.			;AN000;
 17170 00002A9F C3                      	retn
 17171                                  
 17172                                  ;============================================================================
 17173                                  ; DUP.ASM, MSDOS 6.0, 1991
 17174                                  ;============================================================================
 17175                                  ; 08/08/2018 - Retro DOS v3.0
 17176                                  ; 17/05/2019 - Retro DOS v4.0
 17177                                  
 17178                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17179                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17180                                  ;
 17181                                  ;	DOS_DUP
 17182                                  ;
 17183                                  ;	Modification history:
 17184                                  ;
 17185                                  ;	  Created: ARR 30 March 1983
 17186                                  
 17187                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17188                                  ;---------------------------------------------------------------------------
 17189                                  ; Procedure Name : DOS_DUP
 17190                                  ;
 17191                                  ; Inputs:
 17192                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17193                                  ;		(a non net SFT is OK, in this case the ref
 17194                                  ;		 count is simply incremented)
 17195                                  ; Function:
 17196                                  ;	Signal to the devices that a logical open is occurring
 17197                                  ; Returns:
 17198                                  ;	ES:DI point to SFT
 17199                                  ;    Carry clear
 17200                                  ;	SFT ref_count is incremented
 17201                                  ; Registers modified: None.
 17202                                  ; NOTE:
 17203                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17204                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17205                                  ;	that time.
 17206                                  ;---------------------------------------------------------------------------
 17207                                  
 17208                                  DOS_DUP:
 17209                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17210                                  
 17211                                  	; MSDOS 6.0
 17212 00002AA0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17213 00002AA5 26C43E[9E05]            	les	di,[es:THISSFT]
 17214                                  
 17215                                  	;Entry	Dos_Dup_Direct
 17216                                  DOS_Dup_Direct:
 17217 00002AAA E8FEE7                  	call	IsSFTNet
 17218 00002AAD 7503                    	JNZ	short DO_INC
 17219 00002AAF E8A11B                  	call	DEV_OPEN_SFT
 17220                                  DO_INC:
 17221                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17222 00002AB2 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17223                                  					;   we're in big trouble anyway)
 17224 00002AB5 C3                      	retn
 17225                                  
 17226                                  ;============================================================================
 17227                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17228                                  ;============================================================================
 17229                                  ; 08/08/2018 - Retro DOS v3.0
 17230                                  ; 18/05/2019 - Retro DOS v4.0
 17231                                  
 17232                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17233                                  ;NAME	DOS_CREATE
 17234                                  ;----------------------------------------------------------------------------
 17235                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17236                                  ;
 17237                                  ;	DOS_CREATE
 17238                                  ;	DOS_CREATE_NEW
 17239                                  ;	SET_MKND_ERR
 17240                                  ;	SET_Media_ID
 17241                                  ;	SET_EXT_Mode
 17242                                  ;
 17243                                  ;	Revision history:
 17244                                  ;
 17245                                  ;	    A000 version 4.00	  Jan. 1988
 17246                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17247                                  
 17248                                  ;Installed = TRUE
 17249                                  
 17250                                  ;	i_need	THISSFT,DWORD
 17251                                  ;	i_need	THISCDS,DWORD
 17252                                  ;	I_need	EXTERR,WORD
 17253                                  ;	I_Need	ExtErr_locus,BYTE
 17254                                  ;	I_need	JShare,DWORD
 17255                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17256                                  ;	I_need	SATTRIB,BYTE
 17257                                  ;	I_need	CALLVIDM,DWORD
 17258                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17259                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17260                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17261                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17262                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17263                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17264                                  
 17265                                  ;***	DOS_CREATE - Create a File
 17266                                  ;----------------------------------------------------------------------------
 17267                                  ;	DOS_Create is called to create the specified file, truncating
 17268                                  ;	the old one if it exists.
 17269                                  ;
 17270                                  ;	ENTRY	AX is Attribute to create
 17271                                  ;		(ds) = DOSDATA
 17272                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17273                                  ;			terminated)
 17274                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17275                                  ;			( = -1 if current dir not involved, else
 17276                                  ;			 Points to first char after last "/" of current dir part)
 17277                                  ;		[THISCDS] Points to CDS being used
 17278                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17279                                  ;		[THISSFT] Points to SFT to fill in if file created
 17280                                  ;			(sf_mode field set so that FCB may be detected)
 17281                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17282                                  ;
 17283                                  ;	EXIT	sf_ref_count is NOT altered
 17284                                  ;		CARRY CLEAR
 17285                                  ;		    THISSFT filled in.
 17286                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17287                                  ;		CARRY SET
 17288                                  ;		    AX is error code
 17289                                  ;			error_path_not_found
 17290                                  ;				Bad path (not in curr dir part if present)
 17291                                  ;			error_bad_curr_dir
 17292                                  ;				Bad path in current directory part of path
 17293                                  ;			error_access_denied
 17294                                  ;				Attempt to re-create read only file , or
 17295                                  ;				create a second volume id or create a dir
 17296                                  ;			error_sharing_violation
 17297                                  ;				The sharing mode was correct but not allowed
 17298                                  ;				generates an INT 24
 17299                                  ;	USES	all but DS
 17300                                  ;----------------------------------------------------------------------------
 17301                                  
 17302                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17303                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17304                                  
 17305                                  DOS_CREATE:
 17306                                  	; 18/05/2019 - Retro DOS v4.0
 17307                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17308                                  
 17309                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17310                                  ;hkn; this point.
 17311                                  
 17312 00002AB6 30E4                    	XOR	AH,AH		; Truncate is OK
 17313                                  
 17314                                  ;	Enter here from Dos_Create_New
 17315                                  ;
 17316                                  ;	(ah) = 0 iff truncate OK
 17317                                  
 17318                                  Create_inter:
 17319 00002AB8 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17320                                  				; Mask out any meaningless bits
 17321 00002ABA 7511                    	JNZ	short AttErr
 17322 00002ABC A808                    	TEST	AL,attr_volume_id
 17323 00002ABE 7407                    	JZ	short NoReset
 17324                                  	
 17325                                  	; MSDOS 6.0
 17326                                  	; 16/12/2022
 17327 00002AC0 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17328                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17329                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17330                                  	
 17331 00002AC5 B008                    	MOV	AL,attr_volume_id ; 8
 17332                                  NoReset:
 17333 00002AC7 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17334 00002AC9 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17335 00002ACB 740A                    	JZ	short ATT_OK
 17336                                  AttErr:
 17337 00002ACD B80500                  	MOV	AX,5		; Attribute problem
 17338 00002AD0 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17339 00002AD5 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17340                                  				   ;	attr_device to be set.
 17341                                  ATT_OK:
 17342 00002AD7 C43E[9E05]              	LES	DI,[THISSFT]
 17343 00002ADB 06                      	PUSH	ES
 17344 00002ADC C436[A205]              	LES	SI,[THISCDS]
 17345 00002AE0 83FEFF                  	CMP	SI,-1
 17346 00002AE3 751D                    	JNE	short TEST_RE_NET
 17347                                  
 17348                                  ;	No CDS, it must be redirected.
 17349                                  
 17350 00002AE5 07                      	POP	ES
 17351                                  
 17352                                  	; MSDOS 6.0
 17353                                  ;Extended open hooks
 17354                                  	;test	byte [EXTOPEN_ON],1
 17355 00002AE6 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17356 00002AEB 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17357                                  IFS_extopen:				    ;AN000;EO.
 17358 00002AED 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17359                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17360 00002AEE B82E11                  	mov	ax,112Eh
 17361 00002AF1 CD2F                    	INT	2FH			    ;AN000;EO.
 17362 00002AF3 5B                      	POP	BX			    ;AN000;EO. trash bx
 17363 00002AF4 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17364 00002AF9 C3                      	retn				    ;AN000;EO.
 17365                                  NOEXTOP:				    ;AN000;
 17366                                  ;Extended open hooks
 17367                                  
 17368                                  ;IF NOT Installed
 17369                                  ;	transfer NET_SEQ_CREATE
 17370                                  ;ELSE
 17371 00002AFA 50                      	PUSH	AX
 17372                                  
 17373                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17374                                  	;INT	2FH
 17375                                  
 17376 00002AFB B81811                  	mov     ax,1118h
 17377 00002AFE CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17378                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17379                                  			; SDA first filename pointer -> fully-qualified name of file
 17380                                  			; STACK: WORD file creation mode???
 17381                                  
 17382 00002B00 5B                      	POP	BX			; BX is trashed anyway
 17383 00002B01 C3                      	retn
 17384                                  ;ENDIF
 17385                                  
 17386                                  ;	We have a CDS. See if it's network
 17387                                  
 17388                                  TEST_RE_NET:
 17389                                  	;;test	word [es:si+43h],8000h
 17390                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17391                                  	; 07/12/2022
 17392                                  	;test	byte [es:si+44h],80h
 17393                                  	; 17/12/2022
 17394 00002B02 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17395 00002B07 07                      	POP	ES
 17396 00002B08 7419                    	JZ	short LOCAL_CREATE
 17397                                  
 17398                                  	; MSDOS 6.0
 17399 00002B0A E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17400 00002B0D 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17401                                  	;;or	word [es:di+2],2
 17402                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17403                                  	; 17/12/2022
 17404 00002B0F 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17405                                  
 17406                                  ;Extended open hooks
 17407                                  dochk:
 17408 00002B14 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17409 00002B19 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17410                                  ;Extended open hooks
 17411                                  
 17412                                  ;IF NOT Installed
 17413                                  ;	transfer NET_CREATE
 17414                                  ;ELSE
 17415 00002B1B 50                      	PUSH	AX
 17416                                  	
 17417                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17418                                  	;INT	2FH
 17419                                  	
 17420 00002B1C B81711                  	mov     ax,1117h
 17421 00002B1F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17422                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17423                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17424                                  			; SDA CDS pointer -> current directory
 17425                                  			; Return: CF set on error
 17426                                  
 17427 00002B21 5B                      	POP	BX			; BX is trashed anyway
 17428                                  ;nomore:
 17429 00002B22 C3                      	retn
 17430                                  ;ENDIF
 17431                                  
 17432                                  ;**	It's a local create. We have a local CDS for it.
 17433                                  
 17434                                  LOCAL_CREATE:
 17435                                  	; MSDOS 6.0
 17436 00002B23 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17437 00002B26 7205                    	JC	short setdone	;AN000;EO.
 17438                                  	
 17439                                  	; MSDOS 3.3 & MSDOS 6.0
 17440                                  	; 17/12/2022
 17441                                  	;;or	word [es:di+2],2
 17442                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17443                                  	;or	byte [es:di+2],2
 17444 00002B28 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17445                                  setdone:
 17446 00002B2D E826E8                  	call	ECritDisk
 17447 00002B30 E8BF1E                  	call	MakeNode
 17448 00002B33 7317                    	JNC	short Create_ok
 17449 00002B35 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17450 00002B3A E834E8                  	call	LCritDisk
 17451                                  
 17452                                  	;entry	SET_MKND_ERR
 17453                                  SET_MKND_ERR:
 17454                                  
 17455                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17456                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17457                                  
 17458                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17459 00002B3D BB[442B]                	MOV     BX,CRTERRTAB
 17460                                  	;XLAT  ; MSDOS 3.3
 17461                                  	; 18/05/2019 - Retro DOS v4.0
 17462 00002B40 2E                      	CS
 17463 00002B41 D7                      	XLAT
 17464                                  CreatBadRet:
 17465 00002B42 F9                      	STC
 17466 00002B43 C3                      	retn
 17467                                  
 17468                                  ; 13/05/2019 - Retro DOS v4.0
 17469                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17470                                  ; ---------------------------------------------------------------------------
 17471                                  
 17472                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17473                                  
 17474                                  ; 17/07/2018 - Retro DOS v3.0
 17475                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17476                                  
 17477                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17478                                  ;	db	0,5,52h,50h,3,5,20h
 17479                                  
 17480                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17481                                  ;	db	0,5,52h,50h,3,5,20h,2
 17482                                  
 17483                                  ; 08/08/2018
 17484                                  
 17485                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17486 00002B44 00                      	DB	0			; none
 17487 00002B45 05                      	DB	error_access_denied	; MakeNode error 1
 17488 00002B46 52                      	DB	error_cannot_make	; MakeNode error 2
 17489 00002B47 50                      	DB	error_file_exists	; MakeNode error 3
 17490 00002B48 03                      	DB	error_path_not_found	; MakeNode error 4
 17491 00002B49 05                      	DB	error_access_denied	; MakeNode error 5
 17492 00002B4A 20                      	DB	error_sharing_violation ; MakeNode error 6
 17493                                  	; MSDOS 6.0
 17494 00002B4B 02                      	DB	error_file_not_found	; MakeNode error 7
 17495                                  
 17496                                  ; ---------------------------------------------------------------------------
 17497                                  
 17498                                  ; We have just created a new file. This results in the truncation of old
 17499                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17500                                  ; file to the current size.
 17501                                  
 17502                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17503                                  ; drive number to force a Build BPB after Media Check.
 17504                                  
 17505                                  ;;; FASTOPEN 8/29/86
 17506                                  Create_ok:
 17507 00002B4C E8E1FB                  	call	FastOpen_Delete
 17508                                  ;;; FASTOPEN 8/29/86
 17509 00002B4F A0[6D05]                	mov	al,[SATTRIB]
 17510 00002B52 A808                    	test	al,attr_volume_id
 17511 00002B54 741C                    	jz	short NoVolLabel
 17512 00002B56 C43E[A205]              	LES	DI,[THISCDS]
 17513                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17514 00002B5A 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17515 00002B5D 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17516 00002B60 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17517                                  	
 17518                                  	; 18/05/2019 - Retro DOS v4.0
 17519                                  
 17520                                  	; MSDOS 6.0
 17521 00002B64 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17522 00002B66 E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17523                                  	
 17524 00002B69 E8EAE7                  	call	ECritDisk
 17525 00002B6C E8CC2B                  	call	FATREAD_CDS		; force a media check
 17526 00002B6F E8FFE7                  	call	LCritDisk
 17527                                  
 17528                                  NoVolLabel:
 17529 00002B72 B80200                  	MOV	ax,2
 17530 00002B75 C43E[9E05]              	LES	DI,[THISSFT]
 17531                                  ;if installed
 17532                                  	;call	JShare + 14 * 4
 17533 00002B79 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17534                                  ;else
 17535                                  ;	Call	ShSU
 17536                                  ;endif
 17537 00002B7D E8F1E7                  	call	LCritDisk
 17538 00002B80 E94901                  	jmp	SET_SFT_MODE
 17539                                  
 17540                                  ;---------------------------------------------------------------------------
 17541                                  ; Procedure Name : Dos_Create_New
 17542                                  ;
 17543                                  ; Inputs:
 17544                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17545                                  ;		terminated)
 17546                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17547                                  ;		( = -1 if current dir not involved, else
 17548                                  ;		 Points to first char after last "/" of current dir part)
 17549                                  ;	[THISCDS] Points to CDS being used
 17550                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17551                                  ;	[THISSFT] Points to SFT to fill in if file created
 17552                                  ;		(sf_mode field set so that FCB may be detected)
 17553                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17554                                  ;	AX is Attribute to create
 17555                                  ; Function:
 17556                                  ;	Try to create the specified file truncating an old one that exists
 17557                                  ; Outputs:
 17558                                  ;	sf_ref_count is NOT altered
 17559                                  ;	CARRY CLEAR
 17560                                  ;	    THISSFT filled in.
 17561                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17562                                  ;	CARRY SET
 17563                                  ;	    AX is error code
 17564                                  ;		error_path_not_found
 17565                                  ;			Bad path (not in curr dir part if present)
 17566                                  ;		error_bad_curr_dir
 17567                                  ;			Bad path in current directory part of path
 17568                                  ;		error_access_denied
 17569                                  ;			Create a second volume id or create a dir
 17570                                  ;		error_file_exists
 17571                                  ;			Already a file by this name
 17572                                  ; DS preserved, others destroyed
 17573                                  ;---------------------------------------------------------------------------
 17574                                  
 17575                                  DOS_Create_New:
 17576 00002B83 B401                    	MOV	AH,1		; Truncate is NOT OK
 17577 00002B85 E930FF                  	JMP	Create_inter
 17578                                  
 17579                                  ; MSDOS 6.0
 17580                                  ;---------------------------------------------------------------------------
 17581                                  ; Procedure Name : Set_Media_ID
 17582                                  ;
 17583                                  ; Inputs:
 17584                                  ;	NAME1= Volume ID
 17585                                  ;	BH= 0, delete volume id
 17586                                  ;	    1, set new volume id
 17587                                  ;	DS= DOSGROUP
 17588                                  ; Function:
 17589                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17590                                  ; Outputs:
 17591                                  ;	CARRY CLEAR
 17592                                  ;	    volume id set
 17593                                  ;	CARRY SET
 17594                                  ;	    AX is error code
 17595                                  ;---------------------------------------------------------------------------
 17596                                  
 17597                                  	; 18/05/2019 - Retro DOS v4.0
 17598                                  Set_Media_ID:
 17599 00002B88 50                      	PUSH	AX		;AN000;;>32mb
 17600 00002B89 06                      	PUSH	ES		;AN000;;>32mb
 17601 00002B8A 57                      	PUSH	DI		;AN000;;>32mb
 17602                                  
 17603 00002B8B FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17604 00002B8D 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17605 00002B8F B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17606 00002B91 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17607                                  
 17608                                  ;hkn; PACKET_TEMP is in DOSDATA
 17609 00002B94 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17610                                  
 17611 00002B97 53                      	PUSH	BX		;AN000;;>32mb
 17612 00002B98 52                      	PUSH	DX		;AN000;;>32mb
 17613 00002B99 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17614                                  
 17615                                  	;invoke	$IOCTL		;AN000;;>32mb
 17616 00002B9B E83EF7                  	call	_$IOCTL	
 17617                                  
 17618 00002B9E 5A                      	POP	DX		;AN000;;>32mb
 17619 00002B9F 5B                      	POP	BX		;AN000;;>32mb
 17620 00002BA0 7224                    	JC	short geterr	;AN000;;>32mb
 17621                                  
 17622 00002BA2 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17623 00002BA4 7405                    	JZ	short NoName	;AN000;>32mb yes
 17624                                  
 17625                                  ;hkn; NAME1 is in DOSDATA
 17626 00002BA6 BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17627                                  
 17628 00002BA9 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17629                                  NoName: 			;AN000;
 17630                                  
 17631                                  ;hkn; NO_NAME_ID is in DOSDATA
 17632 00002BAB BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17633                                  
 17634                                  doset:				;AN000;
 17635 00002BAE 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17636                                  	;add	di,6
 17637 00002BB0 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17638                                  
 17639                                  ;hkn; ES & DS must point to SS
 17640                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17641 00002BB3 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17642                                  
 17643 00002BB4 1F                      	POP	DS		;AN000;;>32mb
 17644                                  
 17645                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17646 00002BB5 16                      	PUSH	SS		;AN000;;>32mb
 17647                                  
 17648 00002BB6 07                      	POP	ES		;AN000;;>32mb
 17649 00002BB7 B90B00                  	MOV	CX,11		;AN000;;>32mb
 17650 00002BBA F3A4                    	REP	MOVSB		;AN000;;>32mb
 17651 00002BBC B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17652 00002BBF B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17653 00002BC1 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17654                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17655 00002BC3 E816F7                  	call	_$IOCTL	
 17656                                  geterr: 			;AN000;
 17657                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17658 00002BC6 16                      	PUSH	SS		;AN000;>32mb
 17659                                  
 17660 00002BC7 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17661                                  
 17662 00002BC8 5F                      	POP	DI		;AN000;;>32mb
 17663 00002BC9 07                      	POP	ES		;AN000;;>32mb
 17664 00002BCA 58                      	POP	AX		;AN000;;>32mb
 17665 00002BCB C3                      	retn			;AN000;>32mb
 17666                                  
 17667                                  ; MSDOS 6.0
 17668                                  ;---------------------------------------------------------------------------
 17669                                  ; Procedure Name : Set_EXT_mode
 17670                                  ;
 17671                                  ; Inputs:
 17672                                  ;	[EXTOPEN_ON]= flag for extended open
 17673                                  ;	SAVE_BX= mode specified in Extended Open
 17674                                  ; Function:
 17675                                  ;	Set mode in ThisSFT
 17676                                  ; Outputs:
 17677                                  ;	carry set,mode is set if from Extended Open
 17678                                  ;	carry clear, mode not set yet
 17679                                  ;---------------------------------------------------------------------------
 17680                                  
 17681                                  ; 13/05/2019 - Retro DOS v4.0
 17682                                  
 17683                                  Set_EXT_mode:
 17684                                  
 17685                                  ;hkn; SS override
 17686 00002BCC 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17687 00002BD2 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17688 00002BD4 50                      	PUSH	AX			    ;AN000;EO.
 17689                                  
 17690                                  ;hkn; SS override
 17691 00002BD5 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17692                                  	;or	[es:di+2],ax
 17693 00002BD9 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17694 00002BDD 58                      	POP	AX			    ;AN000;EO.
 17695 00002BDE F9                      	STC				    ;AN000;EO.
 17696                                  NOTEX:					    ;AN000;
 17697 00002BDF C3                      	retn				    ;AN000;EO.
 17698                                  
 17699                                  ;============================================================================
 17700                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17701                                  ;============================================================================
 17702                                  ; 08/08/2018 - Retro DOS v3.0
 17703                                  ; 18/05/2019 - Retro DOS v4.0
 17704                                  
 17705                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17706                                  ;	NAME	DOS_OPEN
 17707                                  
 17708                                  ;**	OPEN.ASM - File Open
 17709                                  ;----------------------------------------------------------------------------
 17710                                  ;	Low level routines for openning a file from a file spec.
 17711                                  ;	Also misc routines for sharing errors
 17712                                  ;
 17713                                  ;	DOS_Open
 17714                                  ;	Check_Access_AX
 17715                                  ;	SHARE_ERROR
 17716                                  ;	SET_SFT_MODE
 17717                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17718                                  ;
 17719                                  ;	Revision history:
 17720                                  ;
 17721                                  ;	    Created: ARR 30 March 1983
 17722                                  ;	    A000	version 4.00   Jan. 1988
 17723                                  ;
 17724                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17725                                  ; 	       remote extended opens and not save_cx.
 17726                                  ;
 17727                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17728                                  ;	       on the stack before calling off to the redir.
 17729                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17730                                  ;	       to handle open from exec. In this case set the appropriate bit
 17731                                  ;	       else do not.
 17732                                  ;----------------------------------------------------------------------------	
 17733                                  
 17734                                  ;Installed = TRUE
 17735                                  
 17736                                  ;	i_need	NoSetDir,BYTE
 17737                                  ;	i_need	THISSFT,DWORD
 17738                                  ;	i_need	THISCDS,DWORD
 17739                                  ;	i_need	CURBUF,DWORD
 17740                                  ;	i_need	CurrentPDB,WORD
 17741                                  ;	i_need	CURR_DIR_END,WORD
 17742                                  ;	I_need	RetryCount,WORD
 17743                                  ;	I_need	Open_Access,BYTE
 17744                                  ;	I_need	fSharing,BYTE
 17745                                  ;	i_need	JShare,DWORD
 17746                                  ;	I_need	FastOpenFlg,byte
 17747                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17748                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17749                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17750                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17751                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17752                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17753                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17754                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17755                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17756                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17757                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17758                                  ;
 17759                                  ;	I_need	DOS_FLAG,BYTE
 17760                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17761                                  
 17762                                  ;Break	<DOS_Open - internal file access>
 17763                                  ;---------------------------------------------------------------------------
 17764                                  ; Procedure Name : DOS_Open
 17765                                  ;
 17766                                  ; Inputs:
 17767                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17768                                  ;		terminated)
 17769                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17770                                  ;		( = -1 if current dir not involved, else
 17771                                  ;		 Points to first char after last "/" of current dir part)
 17772                                  ;	[THISCDS] Points to CDS being used
 17773                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17774                                  ;	[THISSFT] Points to SFT to fill in if file found
 17775                                  ;		(sf_mode field set so that FCB may be detected)
 17776                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17777                                  ;	AX is Access and Sharing mode
 17778                                  ;	  High NIBBLE of AL (Sharing Mode)
 17779                                  ;		sharing_compat	   file is opened in compatibility mode
 17780                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17781                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17782                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17783                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17784                                  ;	  Low NIBBLE of AL (Access Mode)
 17785                                  ;		open_for_read	file is opened for reading
 17786                                  ;		open_for_write	file is opened for writing
 17787                                  ;		open_for_both	file is opened for both reading and writing.
 17788                                  ;
 17789                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17790                                  ;		(not checked)
 17791                                  ; Function:
 17792                                  ;	Try to open the specified file
 17793                                  ; Outputs:
 17794                                  ;	sf_ref_count is NOT altered
 17795                                  ;	CARRY CLEAR
 17796                                  ;	    THISSFT filled in.
 17797                                  ;	CARRY SET
 17798                                  ;	    AX is error code
 17799                                  ;		error_file_not_found
 17800                                  ;			Last element of path not found
 17801                                  ;		error_path_not_found
 17802                                  ;			Bad path (not in curr dir part if present)
 17803                                  ;		error_bad_curr_dir
 17804                                  ;			Bad path in current directory part of path
 17805                                  ;		error_invalid_access
 17806                                  ;			Bad sharing mode or bad access mode or bad combination
 17807                                  ;		error_access_denied
 17808                                  ;			Attempt to open read only file for writting, or
 17809                                  ;			open a directory
 17810                                  ;		error_sharing_violation
 17811                                  ;			The sharing mode was correct but not allowed
 17812                                  ;			generates an INT 24 on compatibility mode SFTs
 17813                                  ; DS preserved, others destroyed
 17814                                  ;----------------------------------------------------------------------------
 17815                                  
 17816                                  ; 18/05/2019 - Retro DOS v4.0
 17817                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17818                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17819                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17820                                  
 17821                                  DOS_OPEN:
 17822                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17823                                  
 17824 00002BE0 C606[4C03]00            	MOV	byte [NoSetDir],0
 17825 00002BE5 E83301                  	CALL	Check_Access_AX
 17826 00002BE8 722B                    	JC	short do_ret_label	    ; retc
 17827                                  
 17828 00002BEA C43E[9E05]              	LES	DI,[THISSFT]
 17829 00002BEE 30E4                    	XOR	AH,AH
 17830                                  
 17831                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17832                                  
 17833 00002BF0 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17834 00002BF4 06                      	PUSH	ES
 17835 00002BF5 C436[A205]              	LES	SI,[THISCDS]
 17836                                  	; 18/08/2018
 17837 00002BF9 83FEFF                  	CMP	SI,-1
 17838 00002BFC 7530                    	JNZ	short TEST_RE_NET1
 17839 00002BFE 07                      	POP	ES
 17840                                  
 17841                                  	; MSDOS 6.0
 17842                                  ;Extended open hooks
 17843 00002BFF F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17844 00002C04 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17845                                  _IFS_extopen:									;AN000;
 17846 00002C06 A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17847                                  					    ; with which call was made. This
 17848                                  					    ; has the open access bits. 
 17849                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17850                                  	
 17851 00002C09 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17852                                  	;mov	ax,112Eh
 17853                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17854 00002C0A B82E11                  	mov	ax,(MultNET*256)+46 
 17855 00002C0D CD2F                    	INT	2FH			    ;FT.				;AN000;
 17856 00002C0F 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17857 00002C10 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17858                                  
 17859                                  do_ret_label:
 17860 00002C15 C3                      	retn				    ;FT.				;AN000;
 17861                                  _NOEXTOP:
 17862                                  ;Extended open hooks
 17863                                  	;
 17864                                  ;IF NOT Installed
 17865                                  	;transfer NET_SEQ_OPEN
 17866                                  ;ELSE
 17867                                  	
 17868                                  do_net_int2f:
 17869 00002C16 F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17870 00002C1B 7409                    	jz	short not_exec_open	; N: just do net open
 17871                                  					; Y: check to see if redir is aware
 17872                                  					;    of this 
 17873                                  	
 17874                                  					; M042 - start
 17875                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17876 00002C1D F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17877                                  					; Q: does this redir know how to 
 17878                                  					;    this
 17879 00002C22 7402                    	jz	short not_exec_open	; N: just do net open
 17880                                  					; Y: set bit 3 of access byte and 
 17881                                  					;    set sharing mode to DENY_WRITE
 17882                                  					; M042 - end
 17883                                  	
 17884                                  	; NOTE: This specific mode has not been set for the code assembled
 17885                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17886                                  	; always one.
 17887                                  					; M035 - set the bits on the stack
 17888                                  	;mov	al,23h
 17889 00002C24 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17890                                  	
 17891                                  not_exec_open:
 17892                                  	; MSDOS 3.3 & MSDOS 6.0
 17893 00002C26 50                      	PUSH	AX
 17894                                  
 17895                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17896                                  	;INT	2FH
 17897                                  
 17898 00002C27 B81611                  	mov     ax,1116h
 17899 00002C2A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17900                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17901                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17902                                  			; STACK: WORD file open mode
 17903                                  			; Return: CF set on error
 17904                                  
 17905 00002C2C 5B                      	POP	BX			; clean stack
 17906                                  ;do_ret_label: ; 09/08/2018
 17907 00002C2D C3                      	retn
 17908                                  ;ENDIF
 17909                                  
 17910                                  TEST_RE_NET1:
 17911                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17912                                  	; 17/12/2022
 17913 00002C2E 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17914 00002C33 07                      	POP	ES
 17915                                  	; 18/05/2019
 17916 00002C34 7409                    	JZ	short LOCAL_OPEN
 17917                                  
 17918                                  ;Extended open hooks
 17919                                  	; MSDOS 6.0
 17920 00002C36 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17921 00002C3B 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17922                                  ;Extended open hooks
 17923                                  
 17924                                  ;IF NOT Installed
 17925                                  ;	transfer NET_OPEN
 17926                                  ;ELSE
 17927 00002C3D EBD7                    	jmp	short do_net_int2f
 17928                                  ;ENDIF
 17929                                  
 17930                                  LOCAL_OPEN:
 17931                                  	; MSDOS 3.3 & MSDOS 6.0
 17932 00002C3F E814E7                  	call	ECritDisk
 17933                                  
 17934                                  ; DOS 3.3 FastOPen 6/16/86
 17935                                  
 17936                                  	;or	byte [FastOpenFlg],5
 17937 00002C42 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17938                                  
 17939 00002C47 E83B13                  	call	GETPATH
 17940                                  
 17941                                  ; DOS 3.3 FastOPen 6/16/86
 17942                                  
 17943 00002C4A 731D                    	JNC	short Open_found
 17944 00002C4C 7511                    	JNZ	short bad_path2
 17945 00002C4E 08C9                    	OR	CL,CL
 17946 00002C50 740D                    	JZ	short bad_path2
 17947                                  OpenFNF:
 17948 00002C52 B80200                  	MOV	AX,error_file_not_found	; 2
 17949                                  OpenBadRet:
 17950                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17951                                  	; 12/08/2018
 17952                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17953                                  	; MSDOS 6.0
 17954 00002C55 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17955 00002C5B F9                      	STC
 17956                                  	;call	LCritDisk
 17957                                  	; 16/12/2022
 17958 00002C5C E912E7                  	jmp	LCritDisk
 17959                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17960                                  	;retn 	; 08/09/2018
 17961                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17962                                  	;jmp	Clear_FastOpen
 17963                                  
 17964                                  bad_path2:
 17965 00002C5F B80300                  	MOV	AX,error_path_not_found	; 3
 17966 00002C62 EBF1                    	JMP	short OpenBadRet
 17967                                  
 17968                                  Open_Bad_Access:
 17969 00002C64 B80500                  	MOV	AX,error_access_denied	; 5
 17970 00002C67 EBEC                    	JMP	short OpenBadRet
 17971                                  
 17972                                  Open_found:
 17973 00002C69 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17974 00002C6B 08E4                    	OR	AH,AH
 17975 00002C6D 783E                    	JS	short open_ok		; Devices don't have attributes
 17976 00002C6F 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17977                                  	;mov	al,[es:bx+0Bh]
 17978 00002C73 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17979 00002C77 A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17980 00002C79 75E9                    	JNZ	short Open_Bad_Access
 17981 00002C7B A801                    	TEST	AL,attr_read_only	; check write on read only
 17982 00002C7D 742E                    	JZ	short open_ok
 17983                                  
 17984                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17985                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17986                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17987                                  ; processing until the actual write operation:
 17988                                  ;
 17989                                  ; If FCB, then we change the mode to be read_only.
 17990                                  ; If net_FCB, then we change the mode to be read_only.
 17991                                  ; If not open for read then error.
 17992                                  
 17993 00002C7F 1E                      	push	ds
 17994 00002C80 56                      	push	si
 17995 00002C81 C536[9E05]              	LDS	SI,[THISSFT]
 17996                                  	;mov	cx,[si+2]
 17997 00002C85 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 17998                                  	; 17/12/2022
 17999                                  	;test	ch,80h
 18000 00002C88 F6C580                  	test	ch,sf_isFCB>>8
 18001                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18002 00002C8B 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18003 00002C8D 88CA                    	MOV	DL,CL
 18004 00002C8F 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18005 00002C92 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18006 00002C95 7508                    	JNZ	short NormalOpen	; no
 18007                                  ResetAccess:
 18008                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18009                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18010                                  	; 16/12/2022
 18011 00002C97 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18012                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18013 00002C9A 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18014 00002C9D EB0C                    	JMP	SHORT FillSFT
 18015                                  
 18016                                  ; The SFT is normal. See if the requested access is open_for_read
 18017                                  
 18018                                  NormalOpen:
 18019 00002C9F 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18020 00002CA2 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18021 00002CA5 7404                    	JZ	short FillSFT
 18022 00002CA7 5E                      	pop	si
 18023 00002CA8 1F                      	pop	ds
 18024 00002CA9 EBB9                    	JMP	short Open_Bad_Access
 18025                                  ;
 18026                                  ; All done, restore registers and fill the SFT.
 18027                                  ;
 18028                                  FillSFT:
 18029 00002CAB 5E                      	pop	si
 18030 00002CAC 1F                      	pop	ds
 18031                                  open_ok:
 18032 00002CAD E8001F                  	call	DOOPEN			; Fill in SFT
 18033                                  
 18034                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18035                                  	; 18/05/2019
 18036                                  	;and	byte [ss:FastOpenFlag],80h
 18037 00002CB0 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18038                                  	; 12/08/2018
 18039                                  	;and	byte [FastOpenFlg],Fast_yes	
 18040                                  
 18041                                  	; MSDOS 6.0
 18042 00002CB6 E84300                  	CALL	DO_SHARE_CHECK
 18043 00002CB9 7303                    	JNC	short SHARE_OK
 18044                                  	;call	LCritDisk
 18045                                  	; 16/12/2022
 18046 00002CBB E9B3E6                  	jmp	LCritDisk
 18047                                  	;;JMP	short Clear_FastOpen
 18048                                  	;retn	; 18/05/2019
 18049                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18050                                  	;jmp	short Clear_FastOpen	
 18051                                  
 18052                                  	; MSDOS 3.3
 18053                                  ;DO_SHARE_CHECK:
 18054                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18055                                  ;OpenShareRetry:
 18056                                  ;	push	cx			; Save number left to do
 18057                                  ;	call	SHARE_CHECK		; Final Check
 18058                                  ;	pop	cx			; CX = # left
 18059                                  ;	JNC	short SHARE_OK		; No problem with access
 18060                                  ;	call	Idle
 18061                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18062                                  ;OpenShareFail:
 18063                                  ;	LES	DI,[THISSFT]
 18064                                  ;	call	SHARE_ERROR
 18065                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18066                                  	
 18067                                  	;12/08/2018
 18068                                  	;mov	byte [ss:FastOpenFlg],0
 18069                                  	;08/09/2018
 18070                                  	;mov	byte [FastOpenFlg],0
 18071                                  	;call	LCritDisk
 18072                                  	;JMP	short Clear_FastOpen
 18073                                  	;retn
 18074                                  
 18075                                  SHARE_OK:
 18076                                  	; MSDOS 3.3 & MSDOS 6.0
 18077 00002CBE B80300                  	MOV	AX,3
 18078 00002CC1 C43E[9E05]              	LES	DI,[THISSFT]
 18079                                  ;if installed
 18080                                  	;call	JShare + 14 * 4
 18081 00002CC5 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18082                                  ;else
 18083                                  ;	Call	ShSU
 18084                                  ;endif
 18085 00002CC9 E8A5E6                  	call	LCritDisk
 18086                                  	
 18087                                  	;FallThru Set_SFT_Mode
 18088                                  
 18089                                  ;----------------------------------------------------------------------------
 18090                                  ; Procedure Name : SET_SFT_MODE
 18091                                  ;
 18092                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18093                                  ;
 18094                                  ;   Inputs:
 18095                                  ;	ThisSFT points to SFT
 18096                                  ;
 18097                                  ;   Outputs:
 18098                                  ;	Carry clear
 18099                                  ;   Registers modified: AX.
 18100                                  ;---------------------------------------------------------------------------
 18101                                  
 18102                                  ;hkn; called from create. DS already set up to DOSDATA.
 18103                                  
 18104                                  SET_SFT_MODE:
 18105 00002CCC C43E[9E05]              	LES	DI,[THISSFT]
 18106 00002CD0 E88019                  	call	DEV_OPEN_SFT
 18107                                  	;test	word [es:di+2],8000h
 18108                                  	; 17/12/2022
 18109                                  	;test	byte [es:di+3],80h
 18110 00002CD3 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18111                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18112 00002CD8 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18113 00002CDA A1[3003]                	MOV	AX,[CurrentPDB]
 18114                                  	;mov	[es:di+31h],ax
 18115 00002CDD 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18116                                  
 18117                                  Clear_FastOpen:
 18118 00002CE1 C3                      	retn			       ;;;;; DOS 3.3
 18119                                  
 18120                                  ;----------------------------------------------------------------------------
 18121                                  ; Procedure Name : SHARE_ERROR
 18122                                  ;
 18123                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18124                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18125                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18126                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18127                                  ;---------------------------------------------------------------------------
 18128                                  
 18129                                  SHARE_ERROR:
 18130                                  	; 17/12/2022
 18131                                  	;test	byte [es:di+3],80h
 18132 00002CE2 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18133                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18134 00002CE7 7509                    	JNZ	short _HARD_ERR
 18135 00002CE9 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18136 00002CED 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18137                                  	;CMP	CL,SHARING_COMPAT ; 0
 18138                                  	;JNE	short _NO_HARD_ERR
 18139                                  	; 21/09/2023
 18140 00002CF0 7505                    	jnz	short _NO_HARD_ERR
 18141                                  _HARD_ERR:
 18142 00002CF2 E8C246                  	call	SHARE_VIOLATION
 18143                                  	;retnc				; User wants retry
 18144 00002CF5 73EA                    	jnc	short Clear_FastOpen
 18145                                  _NO_HARD_ERR:
 18146 00002CF7 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18147 00002CFA F9                      	STC
 18148 00002CFB C3                      	retn
 18149                                  
 18150                                  ; MSDOS 6.0
 18151                                  ;----------------------------------------------------------------------------
 18152                                  ; Procedure Name : DO_SHARE_CHECK
 18153                                  ;
 18154                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18155                                  ; Functions: check file sharing mode is valid
 18156                                  ; Output: carry set, error
 18157                                  ;	  carry clear, share ok
 18158                                  ;----------------------------------------------------------------------------
 18159                                  
 18160                                  	; 18/05/2019 - Retro DOS v4.0
 18161                                  DO_SHARE_CHECK:
 18162 00002CFC E857E6                  	call	ECritDisk		; enter critical section
 18163                                  OPN_RETRY:
 18164 00002CFF 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18165                                  OpenShareRetry:
 18166 00002D03 51                      	push	cx			; Save number left to do
 18167 00002D04 E8AB46                  	call	SHARE_CHECK		; Final Check
 18168 00002D07 59                      	pop	cx			; CX = # left
 18169 00002D08 730E                    	JNC	short Share_Ok2		; No problem with access
 18170 00002D0A E840E5                  	call	Idle
 18171 00002D0D E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18172                                  OpenShareFail:
 18173 00002D0F C43E[9E05]              	LES	DI,[THISSFT]
 18174 00002D13 E8CCFF                  	call	SHARE_ERROR
 18175 00002D16 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18176                                  Share_Ok2:
 18177                                  	;call	LCritDisk		; leave critical section
 18178                                  	;retn
 18179                                  	; 18/12/2022
 18180 00002D18 E956E6                  	jmp	LCritDisk
 18181                                  
 18182                                  ;-----------------------------------------------------------------------------
 18183                                  ; Procedure Name : Check_Access
 18184                                  ;
 18185                                  ; Inputs:
 18186                                  ;	AX is mode
 18187                                  ;	  High NIBBLE of AL (Sharing Mode)
 18188                                  ;		sharing_compat	   file is opened in compatibility mode
 18189                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18190                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18191                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18192                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18193                                  ;	  Low NIBBLE of AL (Access Mode)
 18194                                  ;		open_for_read	file is opened for reading
 18195                                  ;		open_for_write	file is opened for writing
 18196                                  ;		open_for_both	file is opened for both reading and writing.
 18197                                  ; Function:
 18198                                  ;	Check this access mode for correctness
 18199                                  ; Outputs:
 18200                                  ;	[open_access] = AL input
 18201                                  ;	Carry Clear
 18202                                  ;		Mode is correct
 18203                                  ;		AX unchanged
 18204                                  ;	Carry Set
 18205                                  ;		Mode is bad
 18206                                  ;		AX = error_invalid_access
 18207                                  ; No other registers effected
 18208                                  ;----------------------------------------------------------------------------
 18209                                  
 18210                                  Check_Access_AX:
 18211 00002D1B A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18212 00002D1E 53                      	PUSH	BX
 18213                                  
 18214                                  ;	If sharing, then test for special sharing mode for FCBs
 18215                                  
 18216 00002D1F 88C3                    	MOV	BL,AL
 18217 00002D21 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18218 00002D24 803E[7205]FF            	CMP	byte [FSHARING],-1
 18219 00002D29 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18220 00002D2B 80FB70                  	CMP	BL,SHARING_NET_FCB
 18221 00002D2E 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18222                                  CheckShareMode:
 18223 00002D30 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18224 00002D33 770D                    	JA	short Make_Bad_Access
 18225                                  CheckAccessMode:
 18226 00002D35 88C3                    	MOV	BL,AL
 18227 00002D37 80E30F                  	AND	BL,access_mask
 18228 00002D3A 80FB02                  	CMP	BL,2
 18229 00002D3D 7703                    	JA	short Make_Bad_Access
 18230 00002D3F 5B                      	POP	BX
 18231 00002D40 F8                      	CLC
 18232 00002D41 C3                      	retn
 18233                                  
 18234                                  Make_Bad_Access:
 18235 00002D42 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18236 00002D45 5B                      	POP	BX
 18237 00002D46 F9                      	STC
 18238 00002D47 C3                      	retn
 18239                                  
 18240                                  ;============================================================================
 18241                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18242                                  ;============================================================================
 18243                                  ; 08/08/2018 - Retro DOS v3.0
 18244                                  ; 18/05/2019 - Retro DOS v4.0
 18245                                  
 18246                                  ;**	Low level routine for returning disk drive information from a local
 18247                                  ;	  or NET device
 18248                                  ;
 18249                                  ;	DISK_INFO
 18250                                  ;
 18251                                  ;	  Modification history:
 18252                                  ;
 18253                                  ;		Created: ARR 30 March 1983
 18254                                  
 18255                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18256                                  ;---------------------------------------------------------------------------
 18257                                  ; Procedure Name : DISK_INFO
 18258                                  ;
 18259                                  ; Inputs:
 18260                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18261                                  ;		(It MAY NOT be NUL, error not detected)
 18262                                  ; Function:
 18263                                  ;	Get Interesting Drive Information
 18264                                  ; Returns:
 18265                                  ;	DX = Number of free allocation units
 18266                                  ;	BX = Total Number of allocation units on disk
 18267                                  ;	CX = Sector size
 18268                                  ;	AL = Sectors per allocation unit
 18269                                  ;	AH = FAT ID BYTE
 18270                                  ;	Carry set if error (currently user FAILed to I 24)
 18271                                  ; Segs except ES preserved, others destroyed
 18272                                  ;----------------------------------------------------------------------------
 18273                                  
 18274                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18275                                  ;hkn; DOSDATA. 
 18276                                  
 18277                                  DISK_INFO:
 18278                                  	; 08/08/2018 - Retro DOS v3.0
 18279                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18280                                  
 18281 00002D48 E847E5                  	call	TestNet
 18282 00002D4B 7306                    	JNC	short LOCAL_DSK_INFO
 18283                                  
 18284                                  ;IF NOT Installed
 18285                                  ;	transfer NET_DISK_INFO
 18286                                  ;ELSE
 18287                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18288                                  	;INT	2FH
 18289                                  	;return
 18290                                  
 18291 00002D4D B80C11                  	mov     ax,110Ch
 18292 00002D50 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18293                                  			; ES:DI -> current directory
 18294                                  			; Return: AL = sectors per cluster, BX = total clusters
 18295                                  			; CX = bytes per sector, DX = number of available clusters
 18296 00002D52 C3                      	retn
 18297                                  ;ENDIF
 18298                                  
 18299                                  LOCAL_DSK_INFO:
 18300 00002D53 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18301 00002D58 E8FBE5                  	call	ECritDisk
 18302 00002D5B E8DD29                  	call	FATREAD_CDS		; perform media check.
 18303 00002D5E 7241                    	JC	short CRIT_LEAVE
 18304 00002D60 BB0200                  	MOV	BX,2
 18305 00002D63 E83E28                  	call	UNPACK			; Get first FAT sector into CURBUF
 18306 00002D66 7239                    	JC	short CRIT_LEAVE
 18307 00002D68 C536[E205]              	LDS	SI,[CURBUF]
 18308                                  	;mov	ah,[si+20]
 18309 00002D6C 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18310                                  
 18311                                  ;hkn; SS is DOSDATA
 18312 00002D6F 16                      	push	ss
 18313 00002D70 1F                      	pop	ds
 18314                                  	;mov	cx,[es:bp+0Dh]
 18315 00002D71 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18316                                  
 18317                                  ; Examine the current free count. If it indicates that we have an invalid
 18318                                  ; count, do the expensive calculation.
 18319                                  
 18320                                  	;mov	dx,[es:bp+1Fh]
 18321 00002D75 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18322 00002D79 83FAFF                  	CMP	DX,-1			; is it valid?
 18323 00002D7C 7404                    	JZ	short DoScan
 18324                                  
 18325                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18326                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18327                                  ; the count.
 18328                                  
 18329 00002D7E 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18330 00002D80 7222                    	JB	short GotVal		; yes, trust it.
 18331                                  DoScan:
 18332 00002D82 31D2                    	XOR	DX,DX
 18333 00002D84 49                      	DEC	CX
 18334                                  SCANFREE:
 18335 00002D85 E81C28                  	call	UNPACK
 18336 00002D88 7217                    	JC	short CRIT_LEAVE
 18337 00002D8A 7501                    	JNZ	short NOTFREECLUS
 18338 00002D8C 42                      	INC	DX			; A free one
 18339                                  NOTFREECLUS:
 18340 00002D8D 43                      	INC	BX			; Next cluster
 18341 00002D8E E2F5                    	LOOP	SCANFREE
 18342 00002D90 4B                      	DEC	BX			; BX was next cluster. Convert to
 18343                                  ReturnVals:
 18344 00002D91 4B                      	DEC	BX			; count
 18345                                  	;mov	al,[es:bp+4]
 18346 00002D92 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18347 00002D96 FEC0                    	INC	AL			; Sectors/cluster
 18348                                  	;mov	cx,[es:bp+2]
 18349 00002D98 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18350                                  	;mov	[es:bp+1Fh],dx
 18351 00002D9C 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18352 00002DA0 F8                      	CLC
 18353                                  CRIT_LEAVE:
 18354                                  	;call	LCritDisk
 18355                                  	;retn
 18356                                  	; 17/12/2022
 18357 00002DA1 E9CDE5                  	jmp	LCritDisk
 18358                                  
 18359                                  ; We have correctly computed everything previously. Load up registers for
 18360                                  ; return.
 18361                                  
 18362                                  GotVal: 
 18363 00002DA4 89CB                    	MOV	BX,CX			; get cluster count
 18364 00002DA6 EBE9                    	JMP	short ReturnVals
 18365                                  
 18366                                  ;============================================================================
 18367                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18368                                  ;============================================================================
 18369                                  ; 22/07/2018 - Retro DOS v3.0
 18370                                  
 18371                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18372                                  ;	NAME	DOS_SEARCH
 18373                                  
 18374                                  ;**	Low level routines for doing local and NET directory searches
 18375                                  ;
 18376                                  ;	DOS_SEARCH_FIRST
 18377                                  ;	DOS_SEARCH_NEXT
 18378                                  ;	RENAME_NEXT
 18379                                  ;
 18380                                  ;	Revision history:
 18381                                  ;
 18382                                  ;	    Created: ARR 30 March 1983
 18383                                  ;	    A000	version 4.00  Jan. 1988
 18384                                  ;	    A001	PTM 3564 -- search for fastopen
 18385                                  
 18386                                  ;Installed = TRUE
 18387                                  
 18388                                  ;--------------------------------------------------------------------------
 18389                                  ;
 18390                                  ; Procedure Name : DOS_SEARCH_FIRST
 18391                                  ;
 18392                                  ; Inputs:
 18393                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18394                                  ;		terminated)
 18395                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18396                                  ;		( = -1 if current dir not involved, else
 18397                                  ;		 Points to first char after last "/" of current dir part)
 18398                                  ;	[THISCDS] Points to CDS being used
 18399                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18400                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18401                                  ;	[DMAADD] Points to 53 byte buffer
 18402                                  ; Function:
 18403                                  ;	Initiate a search for the given file spec
 18404                                  ; Outputs:
 18405                                  ;	CARRY CLEAR
 18406                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18407                                  ;
 18408                                  ;	LOCAL
 18409                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18410                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18411                                  ;	    11 byte search name with Meta chars in it
 18412                                  ;	    Search Attribute Byte, attribute of search
 18413                                  ;	    WORD LastEnt value
 18414                                  ;	    WORD DirStart
 18415                                  ;	    4 byte pad
 18416                                  ;	    32 bytes of the directory entry found
 18417                                  ;	NET
 18418                                  ;	    21 bytes First byte has high bit set
 18419                                  ;	    32 bytes of the directory entry found
 18420                                  ;
 18421                                  ;	CARRY SET
 18422                                  ;	    AX = error code
 18423                                  ;		error_no_more_files
 18424                                  ;			No match for this file
 18425                                  ;		error_path_not_found
 18426                                  ;			Bad path (not in curr dir part if present)
 18427                                  ;		error_bad_curr_dir
 18428                                  ;			Bad path in current directory part of path
 18429                                  ; DS preserved, others destroyed
 18430                                  ;---------------------------------------------------------------------------
 18431                                  
 18432                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18433                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18434                                  
 18435                                  DOS_SEARCH_FIRST:
 18436                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18437                                  
 18438 00002DA8 C43E[A205]              	LES	DI,[THISCDS]
 18439 00002DAC 83FFFF                  	CMP	DI,-1
 18440 00002DAF 7506                    	JNZ	short TEST_RE_NET2
 18441                                  
 18442                                  ;IF NOT Installed
 18443                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18444                                  ;ELSE
 18445                                  	;mov	ax,1119h
 18446 00002DB1 B81911                  	MOV	AX,(MultNET<<8)|25
 18447 00002DB4 CD2F                    	INT	2Fh
 18448 00002DB6 C3                      	retn
 18449                                  ;ENDIF
 18450                                  
 18451                                  TEST_RE_NET2:
 18452                                  	;test	word [es:di+43h],8000h
 18453                                  	; 17/12/2022
 18454                                  	;test	byte [es:di+44h],80h
 18455                                  	; 28/12/2022
 18456 00002DB7 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18457                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18458 00002DBC 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18459                                  
 18460                                  ;IF NOT Installed
 18461                                  ;	transfer NET_SEARCH_FIRST
 18462                                  ;ELSE
 18463                                  	;mov	ax,111Bh
 18464 00002DBE B81B11                  	MOV	AX,(MultNET<<8)|27
 18465 00002DC1 CD2F                    	INT	2FH
 18466 00002DC3 C3                      	retn
 18467                                  ;ENDIF
 18468                                  	; 18/05/2019 - Retro DOS v4.0
 18469                                  LOCAL_SEARCH_FIRST:
 18470 00002DC4 E88FE5                  	call	ECritDisk
 18471                                  	; MSDOS 6.0
 18472                                  	;;test	word [DOS34_FLAG],400h
 18473                                  	; 17/12/2022
 18474                                  	;test	byte [DOS34_FLAG+1],04h
 18475 00002DC7 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18476                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18477 00002DCC 7405                    	JZ	short NOFN			;AN000;
 18478                                  	;or	byte [FastOpenFlg],1
 18479 00002DCE 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18480                                  NOFN:						;AN000;
 18481 00002DD3 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18482                                  	; MSDOS 6.0
 18483 00002DD8 E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18484 00002DDB 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18485                                  	;and	byte [FastOpenFlg],80h
 18486 00002DDD 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18487                                  norm_GETPATH:
 18488 00002DE2 E8A011                  	call	GETPATH
 18489                                  	; BX = offset NAME1
 18490                                  ;_getdone:
 18491 00002DE5 7318                    	JNC	short find_check_dev
 18492 00002DE7 7511                    	JNZ	short bad_path3
 18493 00002DE9 08C9                    	OR	CL,CL
 18494 00002DEB 740D                    	JZ	short bad_path3
 18495                                  find_no_more:
 18496                                  	;mov	ax,12h
 18497 00002DED B81200                  	MOV	AX,error_no_more_files
 18498                                  BadBye:
 18499                                  	; MSDOS 6.0
 18500 00002DF0 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18501                                  
 18502 00002DF6 F9                      	STC
 18503                                  	;call	LCritDisk
 18504                                  	;retn
 18505                                  	; 18/12/2022
 18506 00002DF7 E977E5                  	jmp	LCritDisk
 18507                                  
 18508                                  bad_path3:
 18509                                  	;mov	ax,3
 18510 00002DFA B80300                  	MOV	AX,error_path_not_found
 18511 00002DFD EBF1                    	JMP	short BadBye
 18512                                  
 18513                                  find_check_dev:
 18514 00002DFF 08E4                    	OR	AH,AH
 18515 00002E01 790A                    	JNS	short found_entry
 18516 00002E03 C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18517 00002E09 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18518                                  found_entry:
 18519                                  
 18520                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18521                                  ; a search-next may not have wfp_start set correctly
 18522                                  
 18523 00002E0D C43E[2C03]              	LES	DI,[DMAADD]
 18524 00002E11 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18525 00002E15 AC                      	LODSB
 18526 00002E16 2C40                    	SUB	AL,'A'-1                ; logical drive
 18527 00002E18 AA                      	STOSB				; High bit not set (local)
 18528                                  found_it:
 18529 00002E19 C43E[2C03]              	LES	DI,[DMAADD]
 18530 00002E1D 47                      	INC	DI
 18531                                  
 18532                                  	; MSDOS 6.0
 18533 00002E1E 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18534                                  	;test	byte [FastOpenFlg],10h
 18535 00002E1F F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18536 00002E24 7408                    	JZ	short notfast			  ;FO.;AN001;
 18537 00002E26 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18538 00002E28 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18539 00002E2C EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18540                                  
 18541                                  notfast:
 18542 00002E2E BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18543                                  movmov:
 18544                                  ; Special E5 code
 18545 00002E31 A4                      	MOVSB
 18546 00002E32 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18547 00002E37 7505                    	JNZ	short NOTKANJB
 18548 00002E39 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18549                                  NOTKANJB:
 18550 00002E3E B90A00                  	MOV	CX,10
 18551 00002E41 F3A4                    	REP	MOVSB
 18552                                  
 18553                                  	; 08/09/2018
 18554 00002E43 1F                      	POP	DS			;FO.;AN001; restore ds
 18555                                  
 18556 00002E44 A0[6B05]                	MOV	AL,[ATTRIB]
 18557 00002E47 AA                      	STOSB
 18558 00002E48 50                      	PUSH	AX			; Save AH device info
 18559 00002E49 A1[4803]                	MOV	AX,[LASTENT]
 18560 00002E4C AB                      	STOSW
 18561 00002E4D A1[C205]                	MOV	AX,[DIRSTART]
 18562 00002E50 AB                      	STOSW
 18563                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18564 00002E51 83C704                  	ADD	DI,4
 18565 00002E54 58                      	POP	AX			; Recover AH device info
 18566 00002E55 08E4                    	OR	AH,AH
 18567 00002E57 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18568 00002E59 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18569 00002E5E 7510                    	JNZ	short OKSTORE
 18570                                  
 18571                                  	; MSDOS 6.0
 18572 00002E60 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18573                                  					;AN000;;FO. from fastopen and is good
 18574 00002E65 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18575                                  
 18576                                  	; The user has specified the root directory itself, rather than some
 18577                                  	; contents of it. We can't "find" that.
 18578                                  
 18579 00002E67 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18580                                  					;   stuffing a -1 at Lastent
 18581 00002E6D E97DFF                  	JMP	find_no_more
 18582                                  
 18583                                  OKSTORE:
 18584 00002E70 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18585                                  DOSREL:
 18586                                  	; BX = offset NAME1 (from GETPATH)
 18587 00002E74 89DE                    	MOV	SI,BX			; SI-> start of entry
 18588                                  
 18589                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18590                                  
 18591                                  	;mov	cx,32
 18592 00002E76 B92000                  	MOV	CX,dir_entry.size
 18593                                  ;;;;; 7/29/86
 18594 00002E79 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18595 00002E7B F3A4                    	REP	MOVSB
 18596 00002E7D 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18597 00002E7F 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18598 00002E83 7504                    	JNZ	short NO05
 18599 00002E85 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18600                                  NO05:
 18601                                  
 18602                                  ;;;;; 7/29/86
 18603                                  
 18604                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18605                                  	; 16/12/2022
 18606                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18607                                  	; MSDOS 6.0
 18608                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18609                                  	; 18/05/2019 - Retro DOS v4.0
 18610 00002E89 16                      	push	ss
 18611 00002E8A 1F                      	pop	ds
 18612                                  	; 16/12/2022
 18613 00002E8B 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18614                                  
 18615                                  ;hkn; SS is DOSDATA
 18616                                  	;push	ss
 18617                                  	;pop	ds
 18618 00002E90 F8                      	CLC
 18619                                  	;call	LCritDisk
 18620                                  	;retn
 18621                                  	; 16/12/2022
 18622 00002E91 E9DDE4                  	jmp	LCritDisk
 18623                                  
 18624                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18625                                  ;----------------------------------------------------------------------------
 18626                                  ;
 18627                                  ; Procedure Name : DOS_SEARCH_NEXT
 18628                                  ;
 18629                                  ; Inputs:
 18630                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18631                                  ;	    (only first 21 bytes must have valid information)
 18632                                  ; Function:
 18633                                  ;	Look for subsequent matches
 18634                                  ; Outputs:
 18635                                  ;	CARRY CLEAR
 18636                                  ;	    The 53 bytes at DMAADD are updated for next call
 18637                                  ;		(see DOS_SEARCH_FIRST)
 18638                                  ;	CARRY SET
 18639                                  ;	    AX = error code
 18640                                  ;		error_no_more_files
 18641                                  ;			No more files to find
 18642                                  ; DS preserved, others destroyed
 18643                                  ;---------------------------------------------------------------------------
 18644                                  
 18645                                  ;hkn; called from search.asm. DS already set up at this point.
 18646                                  
 18647                                  DOS_SEARCH_NEXT:
 18648 00002E94 C43E[2C03]              	LES	DI,[DMAADD]
 18649 00002E98 268A05                  	MOV	AL,[ES:DI]
 18650 00002E9B A880                    	TEST	AL,80H			; Test for NET
 18651 00002E9D 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18652                                  ;IF NOT Installed
 18653                                  ;	transfer NET_SEARCH_NEXT
 18654                                  ;ELSE
 18655                                  	;mov	ax,111Ch
 18656 00002E9F B81C11                  	MOV	AX,(MultNET<<8)|28
 18657 00002EA2 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18658                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18659                                  		     ; Return: CF set on error, AX = DOS error code
 18660                                  		     ; CF clear if successful
 18661 00002EA4 C3                      	retn
 18662                                  ;ENDIF
 18663                                  
 18664                                  LOCAL_SEARCH_NEXT:
 18665                                  	;AL is drive A=1
 18666                                  	;mov	byte [EXTERR_LOCUS],2
 18667 00002EA5 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18668 00002EAA E8A9E4                  	call	ECritDisk
 18669                                  
 18670                                  ;hkn; DummyCDS is in DOSDATA
 18671 00002EAD C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18672                                  ;hkn; Segment address is DOSDATA - use ds
 18673                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18674 00002EB3 8C1E[A405]              	mov	[THISCDS+2],DS
 18675                                  
 18676 00002EB7 0440                    	ADD	AL,'A'-1
 18677 00002EB9 E88B3B                  	call	InitCDS
 18678                                  
 18679                                  ;	call	GETTHISDRV		; Set CDS pointer
 18680                                  
 18681 00002EBC 7236                    	JC	short No_files		; Bogus drive letter
 18682 00002EBE C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18683                                  	;les	bp,[es:di+45h]
 18684 00002EC2 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18685 00002EC6 E877D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18686                                  
 18687                                  	 ;16/12/2022
 18688 00002EC9 268A4600                	mov	al,[ES:BP]
 18689                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18690                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18691 00002ECD A2[7605]                	mov	[THISDRV],AL
 18692                                  	;mov	word [CREATING],0E500h
 18693 00002ED0 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18694 00002ED6 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18695 00002EDB C536[2C03]              	LDS	SI,[DMAADD]
 18696 00002EDF AC                      	LODSB				; Drive Byte
 18697                                  
 18698                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18699                                  RENAME_NEXT:
 18700                                  	;context ES
 18701 00002EE0 16                      	push	ss
 18702 00002EE1 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18703                                  
 18704                                  ;hkn; NAME1 is in DOSDATA
 18705 00002EE2 BF[4B05]                	MOV	DI,NAME1
 18706                                  
 18707 00002EE5 B90B00                  	MOV	CX,11
 18708 00002EE8 F3A4                    	REP	MOVSB			; Search name
 18709 00002EEA AC                      	LODSB				; Attribute
 18710                                  
 18711                                  ;hkn; SS override
 18712 00002EEB 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18713 00002EEF AD                      	LODSW				; LastEnt
 18714 00002EF0 09C0                    	OR	AX,AX
 18715 00002EF2 7903                    	JNS	short cont_load
 18716                                  No_files:
 18717 00002EF4 E9F6FE                  	JMP	find_no_more
 18718                                  
 18719                                  cont_load:
 18720 00002EF7 50                      	PUSH	AX			; Save LastEnt
 18721 00002EF8 AD                      	LODSW				; DirStart
 18722 00002EF9 89C3                    	MOV	BX,AX
 18723                                  
 18724                                  ;hkn; SS is DOSDATA
 18725                                  	;context DS
 18726 00002EFB 16                      	push	ss
 18727 00002EFC 1F                      	pop	ds
 18728 00002EFD C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18729                                  	;invoke	SetDirSrch
 18730 00002F01 E82410                  	call	SETDIRSRCH
 18731 00002F04 7303                    	JNC	short SEARCH_GOON
 18732 00002F06 58                      	POP	AX			; Clean stack
 18733 00002F07 EBEB                    	JMP	short No_files
 18734                                  
 18735                                  SEARCH_GOON:
 18736 00002F09 E80D13                  	call	STARTSRCH
 18737 00002F0C 58                      	POP	AX
 18738 00002F0D E8E90F                  	call	GETENT
 18739 00002F10 72E2                    	JC	short No_files
 18740 00002F12 E81F0F                  	call	NEXTENT
 18741 00002F15 72DD                    	JC	short No_files
 18742 00002F17 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18743 00002F19 E9FDFE                  	JMP	found_it ; 10/08/2018
 18744                                  
 18745                                  ; MSDOS 6.0
 18746                                  ;---------------------------------------------------------------------------
 18747                                  ;
 18748                                  ; Procedure Name : CHECK_QUESTION
 18749                                  ;
 18750                                  ; Input: [WFP_START]= pointer to final path
 18751                                  ; Function: check '?' char
 18752                                  ; Output: carry clear, if no '?'
 18753                                  ;	 carry set, if '?' exists
 18754                                  ;---------------------------------------------------------------------------
 18755                                  
 18756                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18757                                  CHECK_QUESTION:
 18758                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18759                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18760 00002F1C 16                      	push	ss
 18761 00002F1D 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18762                                  	; 16/12/2022
 18763                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18764 00002F1E 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18765                                  	;mov	si,[ss:WFP_START]
 18766                                  getnext:				;AN000;
 18767 00002F22 AC                      	LODSB				;AN000;;FO. get char
 18768 00002F23 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18769 00002F25 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18770 00002F27 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18771 00002F29 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18772 00002F2B F9                      	STC				;AN000;;FO.
 18773                                  NO_Question:				;AN000;
 18774 00002F2C C3                      	retn				;AN000;;FO.
 18775                                  
 18776                                  ;============================================================================
 18777                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18778                                  ;============================================================================
 18779                                  ; 23/07/2018 - Retro DOS v3.0
 18780                                  ; 18/05/2019 - Retro DOS v4.0
 18781                                  
 18782                                  ;**
 18783                                  ;
 18784                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18785                                  ;  If process has NET resources a close all is sent out over the net.
 18786                                  ;
 18787                                  ;   DOS_ABORT
 18788                                  ;
 18789                                  ;   Modification history:
 18790                                  ;
 18791                                  ;       Created: ARR 30 March 1983
 18792                                  ;
 18793                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18794                                  ;				being terminated only if it is busy.
 18795                                  ;
 18796                                  
 18797                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18798                                  ;--------------------------------------------------------------------------
 18799                                  ;
 18800                                  ; Procedure Name : DOS_ABORT
 18801                                  ;
 18802                                  ; Inputs:
 18803                                  ;       [CurrentPDB] set to PID of process aborting
 18804                                  ; Function:
 18805                                  ;       Close all files and free all SFTs for this PID
 18806                                  ; Returns:
 18807                                  ;       None
 18808                                  ; All destroyed except stack
 18809                                  ;---------------------------------------------------------------------------
 18810                                  
 18811                                  DOS_ABORT:
 18812 00002F2D 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18813 00002F32 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18814                                  reset_free_jfn:
 18815 00002F37 89CB                    	MOV     BX,CX
 18816 00002F39 51                      	PUSH    CX
 18817 00002F3A 4B                      	DEC     BX                      ; get jfn (start with last one)
 18818                                  
 18819 00002F3B E83D38                  	CALL	_$CLOSE
 18820 00002F3E 59                      	POP     CX
 18821 00002F3F E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18822                                  
 18823                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18824                                  ; are running in the no-sharing no-network environment, we are simulating the
 18825                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18826                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18827                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18828                                  ;
 18829                                  ; If sharing is loaded, then the following call to close process will
 18830                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18831                                  ;
 18832                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18833                                  ; known network resources. These resources are then responsible for cleaning
 18834                                  ; up after this process.
 18835                                  ;
 18836                                  ; Sleazy, eh?
 18837                                  
 18838                                  	;context DS			; SS is DOSDATA
 18839 00002F41 16                      	push	ss
 18840 00002F42 1F                      	pop	ds  ; 09/09/2018
 18841                                  
 18842                                  	;CallInstall Net_Abort, MultNET, 29
 18843 00002F43 B81D11                  	mov	ax, 111Dh
 18844 00002F46 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18845                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18846                                  			; DS???, SS = DOS CS
 18847                                  ;if installed
 18848 00002F48 FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18849                                  ;else
 18850                                  ;	call 	MFTCloseP
 18851                                  ;endif
 18852                                  
 18853                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18854                                  ; counts.
 18855                                  					; SS override
 18856 00002F4C 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18857                                  	;mov	cx,[es:di+4]
 18858 00002F51 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18859 00002F55 E317                    	jcxz    FCBScanDone
 18860                                  	;lea	di,[di+6]
 18861 00002F57 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18862 00002F5A 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18863                                  FCBTest:
 18864                                  	;cmp	[es:di+31h],ax
 18865 00002F5E 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18866 00002F62 7505                    	jnz	short FCBNext		; no, skip it
 18867 00002F64 26C7050000              	mov	word [es:di],0
 18868                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18869                                  FCBNext:
 18870 00002F69 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18871 00002F6C E2F0                    	loop    FCBTest
 18872                                  FCBScanDone:
 18873                                  
 18874                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18875                                  
 18876 00002F6E 31DB                    	XOR     BX,BX
 18877                                  Scan:
 18878 00002F70 53                      	push    bx
 18879 00002F71 E88237                  	call	SFFromSFN
 18880 00002F74 5B                      	pop     bx
 18881                                  	;jnc	short Scan1
 18882                                  	;retn
 18883                                  	; 18/12/2022
 18884 00002F75 72B5                    	jc	short NO_Question ; retn
 18885                                  
 18886                                  ;M038
 18887                                  ; Do what the comment above says, check for busy state
 18888                                  
 18889                                  Scan1:
 18890                                  	;cmp	word [es:di],0
 18891                                  	;jz	short scan_next  ; MSDOS 3.3
 18892                                  	; MSDOS 6.0
 18893 00002F77 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18894                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18895                                  				; Is Sft busy? ;M038
 18896 00002F7B 7519                    	jnz	short scan_next
 18897                                  ;
 18898                                  ; we have a SFT that is busy. See if it is for the current process
 18899                                  ;
 18900 00002F7D 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18901                                  	;cmp	[es:di+31h],ax
 18902 00002F81 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18903 00002F85 750F                    	jnz	short scan_next
 18904 00002F87 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18905                                  	;cmp	[es:di+2Fh],ax
 18906 00002F8B 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18907 00002F8F 7505                    	jnz	short scan_next
 18908                                  
 18909                                  ; This SFT is labelled as ours.
 18910                                  
 18911 00002F91 26C7050000              	mov	word [es:di],0
 18912                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18913                                  scan_next:
 18914 00002F96 43                      	inc     bx
 18915 00002F97 EBD7                    	jmp     short Scan
 18916                                  
 18917                                  ;============================================================================
 18918                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18919                                  ;============================================================================
 18920                                  ; 23/07/2018 - Retro DOS v3.0
 18921                                  ; 18/05/2019 - Retro DOS v4.0
 18922                                  
 18923                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18924                                  ;
 18925                                  ;	DOS_CLOSE
 18926                                  ;	DOS_COMMIT
 18927                                  ;	FREE_SFT
 18928                                  ;	SetSFTTimes
 18929                                  ;
 18930                                  ;	Revision history:
 18931                                  ;
 18932                                  ;	   AN000  version 4.00	Jan. 1988
 18933                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18934                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18935                                  
 18936                                  ;Installed = TRUE
 18937                                  
 18938                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18939                                  ;---------------------------------------------------------------------------
 18940                                  ;
 18941                                  ; Procedure Name : DOS_CLOSE
 18942                                  ;
 18943                                  ; Inputs:
 18944                                  ;	[THISSFT] set to the SFT for the file being used
 18945                                  ; Function:
 18946                                  ;	Close the indicated file via the SFT
 18947                                  ; Returns:
 18948                                  ;	sf_ref_count decremented otherwise
 18949                                  ;	ES:DI point to SFT
 18950                                  ;	Carry set if error
 18951                                  ;	    AX has error code
 18952                                  ; DS preserved, others destroyed
 18953                                  ;---------------------------------------------------------------------------
 18954                                  
 18955                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18956                                  
 18957                                  ; 18/05/2019 - Retro DOS v4.0
 18958                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18959                                  
 18960                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18961                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18962                                  
 18963                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18964                                  
 18965                                  DOS_CLOSE:
 18966 00002F99 C43E[9E05]              	LES	DI,[THISSFT]
 18967                                  	;mov	bx,[ES:DI+5]
 18968 00002F9D 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18969                                  
 18970                                  ; Network closes are handled entirely by the net code.
 18971                                  
 18972                                  	;;test	bx,8000h
 18973                                  	;TEST	BX,sf_isnet
 18974                                  	; 17/12/2022
 18975                                  	;test	bh,80h
 18976 00002FA1 F6C780                  	test	bh,(sf_isnet>>8)
 18977 00002FA4 7406                    	JZ	short LocalClose
 18978                                  
 18979                                  	;CallInstall Net_Close,MultNET,6
 18980 00002FA6 B80611                  	mov     ax,1106h
 18981 00002FA9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18982                                  			; ES:DI -> SFT
 18983                                  			; SFT DPB field -> DPB of drive containing file
 18984                                  			; Return: CF set on error, AX = DOS error code
 18985                                  			; CF clear if successful
 18986 00002FAB C3                      	retn
 18987                                  
 18988                                  ; All closes release the sharing information.
 18989                                  ; No commit releases sharing information
 18990                                  ;
 18991                                  ; All closes decrement the ref count.
 18992                                  ; No commit decrements the ref count.
 18993                                  
 18994                                  LocalClose:
 18995 00002FAC E8A7E3                  	call	ECritDisk
 18996 00002FAF E86401                  	CALL	SetSFTTimes
 18997 00002FB2 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 18998                                  
 18999                                  ;hkn; SS is DOSDATA
 19000                                  	;Context DS
 19001 00002FB5 16                      	push	ss
 19002 00002FB6 1F                      	pop	ds
 19003                                  
 19004 00002FB7 50                      	push	ax
 19005 00002FB8 53                      	push	bx
 19006 00002FB9 E82144                  	call	ShareEnd
 19007 00002FBC 5B                      	pop	bx
 19008 00002FBD 58                      	pop	ax
 19009                                  
 19010                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19011                                  
 19012                                  CloseEntry:
 19013 00002FBE 50                      	PUSH	AX
 19014                                  
 19015                                  ; File clean or device does not get stamped nor disk looked at.
 19016                                  
 19017                                  	;test	bx,0C0h
 19018                                  	; 17/12/2022
 19019 00002FBF F6C3C0                  	test	bl,devid_file_clean+devid_device
 19020                                  	;TEST	BX,devid_file_clean+devid_device
 19021 00002FC2 7403                    	JZ	short rdir
 19022                                  	; 14/11/2022
 19023 00002FC4 E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19024                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19025                                  
 19026                                  ; Retrieve the directory entry for the file
 19027                                  
 19028                                  rdir:
 19029 00002FC7 E8DA00                  	CALL	DirFromSFT
 19030                                  	;mov	al,5
 19031 00002FCA B005                    	MOV	AL,error_access_denied
 19032 00002FCC 7303                    	JNC	short clook
 19033                                  	; 14/11/2022
 19034 00002FCE E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19035                                  	;jc	short CloseFinish ; 24/07/2019
 19036                                  clook:
 19037                                  
 19038                                  ; ES:DI points to entry
 19039                                  ; DS:SI points to SFT
 19040                                  ; ES:BX points to buffer header
 19041                                  
 19042 00002FD1 57                      	push	di
 19043 00002FD2 56                      	push	si
 19044                                  	;lea	si,[si+20h]
 19045 00002FD3 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19046                                  
 19047                                  ; ES:DI point to directory entry
 19048                                  ; DS:SI point to unpacked name
 19049                                  
 19050 00002FD6 E86DE2                  	call	XCHGP
 19051                                  
 19052                                  ; ES:DI point to unpacked name
 19053                                  ; DS:SI point to directory entry
 19054                                  
 19055 00002FD9 E8B60E                  	call	MetaCompare
 19056 00002FDC E867E2                  	call	XCHGP
 19057 00002FDF 5E                      	pop	si
 19058 00002FE0 5F                      	pop	di
 19059 00002FE1 740C                    	JZ	short CLOSE_GO		; Name OK
 19060                                  Bye:	
 19061 00002FE3 89F7                    	MOV	DI,SI
 19062 00002FE5 1E                      	PUSH	DS
 19063 00002FE6 07                      	POP	ES			; ES:DI points to SFT
 19064 00002FE7 16                      	PUSH	SS
 19065 00002FE8 1F                      	POP	DS
 19066 00002FE9 F9                      	STC
 19067                                  	;mov	al,2
 19068 00002FEA B002                    	MOV	AL,error_file_not_found
 19069 00002FEC E99600                  	JMP	CloseFinish ; 24/07/2019
 19070                                  
 19071                                  	; 18/05/2019 - Retro DOS v4.0
 19072                                  CLOSE_GO:
 19073                                  	; MSDOS 6.0
 19074                                  	;test	word [si+2],8000h
 19075                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19076                                  	; 17/12/2022
 19077                                  	;test	byte [si+3],80h
 19078 00002FEF F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19079 00002FF3 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19080                                  	; MSDOS 3.3 & MSDOS 6.0
 19081                                  	;mov	ch,[es:di+0Bh]
 19082 00002FF5 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19083                                  	;mov	al,[si+4]
 19084 00002FF9 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19085                                  
 19086                                  ;hkn; SS override
 19087 00002FFC 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19088                                  	; MSDOS 3.3
 19089                                  	;;call	MatchAttributes
 19090                                  	;;JNZ	short Bye		; attributes do not match
 19091                                  	; 18/05/2019
 19092 00003000 EB07                    	JMP	SHORT setattr		;FT.
 19093                                  nofcb:
 19094                                  	; MSDOS 6.0
 19095                                  	;mov	al,[si+4]
 19096 00003002 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19097 00003005 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19098                                  setattr:
 19099                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19100                                  	;or	byte [es:di+0Bh],20h
 19101 00003009 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19102                                  	; MSDOS 6.0
 19103                                  	;mov	ax,[es:di+1Ah]
 19104 0000300E 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19105                                  					;F.O. save old first cluster
 19106                                  ;hkn; SS override
 19107 00003012 36A3[BD0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19108                                  
 19109                                  	;mov	ax,[si+0Bh]
 19110 00003016 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19111                                  	;mov	[es:di+1Ah],ax
 19112 00003019 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19113                                  	;mov	ax,[si+11h]
 19114 0000301D 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19115                                  	;mov	[es:di+1Ch],ax
 19116 00003020 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19117                                  	;mov	ax,[si+13h]
 19118 00003024 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19119                                  	;mov	[es:di+1Eh],ax
 19120 00003027 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19121                                  	;mov	ax,[si+0Fh]
 19122 0000302B 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19123                                  	;mov	[es:di+18h],ax
 19124 0000302E 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19125                                  	;mov	ax,[si+0Dh]
 19126 00003032 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19127                                  	;mov	[es:di+16h],ax
 19128 00003035 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19129                                  
 19130                                  	; MSDOS 6.0
 19131                                  ;; File Tagging
 19132 00003039 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19133                                  				  ;LB. if already dirty		    ;AN000;
 19134 0000303E 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19135                                  	; 02/06/2019
 19136 00003040 E87C2B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19137                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19138                                  	;or	byte [es:bx+5],40h
 19139 00003043 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19140                                  yesdirty4:
 19141 00003048 1E                      	push	ds
 19142 00003049 56                      	push	si
 19143                                  	; MSDOS 6.0
 19144                                  	;mov	cx,[si+0Bh]
 19145                                  	; 07/12/2022
 19146 0000304A 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19147                                  ;hkn; SS override
 19148 0000304D 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19149                                  	; MSDOS 3.3 
 19150                                  	;push	ss
 19151                                  	;pop	ds
 19152                                  	;MOV	AL,[THISDRV]
 19153                                  ;;; 10/1/86  update fastopen cache
 19154                                  	; MSDOS 3.3 & MSDOS 6.0
 19155 00003051 52                      	PUSH	DX
 19156 00003052 B400                    	MOV	AH,0			; dir entry update
 19157 00003054 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19158                                  	; MSDOS 6.0
 19159 00003056 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19160 00003058 750D                    	JNZ	short do_update2	;AN005; no, do update
 19161 0000305A B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19162                                  	;mov	di,[si+1Bh]
 19163 0000305C 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19164                                  	;mov	cx,[si+1Dh]
 19165 0000305F 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19166                                  	;mov	dh,[si+1Fh]
 19167 00003062 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19168 00003065 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19169                                  do_update2:				;AN011;F.O.
 19170                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19171                                  	; 
 19172 00003067 363B0E[BD0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19173 0000306C 7407                    	JZ	short do_update		;AN011;F.O. yes
 19174 0000306E B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19175 00003070 368B0E[BD0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19176                                  do_update:				;AN005;
 19177                                  ;hkn; SS is DOSDATA
 19178                                  	;Context DS
 19179 00003075 16                      	push	ss
 19180 00003076 1F                      	pop	ds	
 19181                                  	; MSDOS 3.3 & MSDOS 6.0
 19182 00003077 E8E5F6                  	call	FastOpen_Update 	; invoke fastopen
 19183 0000307A 5A                      	POP	DX
 19184                                  
 19185                                  ;;; 10/1/86  update fastopen cache
 19186 0000307B E83C2A                  	call	FLUSHBUF		; flush all relevant buffers
 19187 0000307E 5F                      	pop	di
 19188 0000307F 07                      	pop	es
 19189                                  	;mov	al,5
 19190 00003080 B005                    	MOV	AL,error_access_denied
 19191 00003082 7201                    	JC	short CloseFinish
 19192                                  FREE_SFT_OK:
 19193 00003084 F8                      	CLC				; signal no error.
 19194                                  CloseFinish:
 19195                                  
 19196                                  ; Indicate to the device that the SFT is being closed.
 19197                                  
 19198                                  ;;;; 7/21/86
 19199 00003085 9C                      	PUSHF				; save flag from DirFromSFT
 19200 00003086 E8D215                  	call	DEV_CLOSE_SFT
 19201 00003089 9D                      	POPF
 19202                                  ;;;; 7/21/86
 19203                                  ;
 19204                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19205                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19206                                  ; going to be moving from busy to free.
 19207                                  ;
 19208 0000308A 59                      	POP	CX			; get old ref count
 19209 0000308B 9C                      	PUSHF
 19210 0000308C 49                      	DEC	CX			; if cx != 1
 19211 0000308D 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19212 0000308F 26890D                  	mov	[es:di],cx
 19213                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19214                                  NoFree:
 19215 00003092 E8DCE2                  	call	LCritDisk
 19216 00003095 9D                      	POPF
 19217 00003096 C3                      	retn
 19218                                  
 19219                                  ;---------------------------------------------------------------------------
 19220                                  ;
 19221                                  ; Procedure Name : FREE_SFT
 19222                                  ;
 19223                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19224                                  ; Flags preserved. Return old ref count in AX
 19225                                  ;
 19226                                  ; Note that busy is indicated by the SFT ref count being -1.
 19227                                  ;
 19228                                  ;---------------------------------------------------------------------------
 19229                                  
 19230                                  FREE_SFT:
 19231 00003097 9C                      	PUSHF		; Save carry state
 19232 00003098 268B05                  	mov	ax,[es:di]
 19233                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19234 0000309B 48                      	DEC	AX
 19235 0000309C 7501                    	JNZ	short SetCount
 19236 0000309E 48                      	DEC	AX
 19237                                  SetCount:
 19238 0000309F 268705                  	xchg	ax,[es:di]
 19239                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19240 000030A2 9D                      	POPF
 19241 000030A3 C3                      	retn
 19242                                  
 19243                                  	; 18/05/2019 - Retro DOS v4.0
 19244                                  
 19245                                  ;----------------------------------------------------------------------------
 19246                                  ;
 19247                                  ; Procedure Name : DirFromSFT
 19248                                  ;
 19249                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19250                                  ;
 19251                                  ;   Inputs:	ES:DI point to SFT
 19252                                  ;		DS = DOSDATA
 19253                                  ;   Outputs:
 19254                                  ;		EXTERR_LOCUS = errLOC_Disk
 19255                                  ;		CurBuf points to buffer
 19256                                  ;		Carry Clear -> operation OK
 19257                                  ;		    ES:DI point to entry
 19258                                  ;		    ES:BX point to buffer
 19259                                  ;		    DS:SI point to SFT
 19260                                  ;		Carry SET   -> operation failed
 19261                                  ;		    registers trashified
 19262                                  ;   Registers modified: ALL
 19263                                  ;----------------------------------------------------------------------------
 19264                                  
 19265                                  DirFromSFT:
 19266                                  	;mov	byte [EXTERR_LOCUS],2
 19267 000030A4 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19268 000030A9 06                      	push	es
 19269 000030AA 57                      	push	di
 19270                                  	; MSDOS 3.3
 19271                                  	;;mov	dx,[es:di+1Dh]
 19272                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19273                                  	; MSDOS 6.0
 19274                                  	;mov	dx,[es:[di+1Dh]
 19275 000030AB 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19276 000030AF 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19277                                  	;mov	dx,[es:di+1Bh]
 19278 000030B3 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19279                                  	; 19/05/2019
 19280 000030B7 FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19281                                  	; MSDOS 3.3 & MSDOS 6.0
 19282 000030BB 52                      	PUSH	DX
 19283 000030BC E86C26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19284                                  					; [THISDPB] set
 19285 000030BF 5A                      	POP	DX
 19286 000030C0 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19287 000030C4 721E                    	JC	short PopDone
 19288                                  	; 22/09/2023
 19289                                  	;XOR	AL,AL	; *		; Pre read
 19290                                  	;;mov	byte [ALLOWED],18h
 19291                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19292                                  	;call	GETBUFFR
 19293                                  	; 22/09/2023
 19294 000030C6 E8ED28                  	call	GETBUFFER ; * 		; Pre read
 19295 000030C9 7219                    	JC	short PopDone
 19296 000030CB 5E                      	pop	si
 19297 000030CC 1F                      	pop	ds			; Get back SFT pointer
 19298                                  
 19299                                  ;hkn; SS override
 19300 000030CD 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19301                                  	;or	byte [es:di+5],4
 19302 000030D2 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19303 000030D7 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19304                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19305                                  	;lea	di,[di+20] ; MSDOS 6.0
 19306 000030D9 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19307                                  	;mov	al,32
 19308 000030DC B020                    	MOV	AL,dir_entry.size
 19309                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19310 000030DE F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19311 000030E1 01C7                    	ADD	DI,AX			; Point at the entry
 19312 000030E3 C3                      	retn				; carry is clear
 19313                                  PopDone:
 19314 000030E4 5F                      	pop	di
 19315 000030E5 07                      	pop	es
 19316                                  PopDone_retn:
 19317 000030E6 C3                      	retn
 19318                                  
 19319                                  ;----------------------------------------------------------------------------
 19320                                  ;
 19321                                  ;**	DOS_Commit - UPdate Directory Entries
 19322                                  ;
 19323                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19324                                  ;		(DS) = DOSGROUP
 19325                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19326                                  ;	USES	all but DS
 19327                                  ;
 19328                                  ;----------------------------------------------------------------------------
 19329                                  
 19330                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19331                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19332                                  
 19333                                  DOS_COMMIT:
 19334                                  	;hkn; called from srvcall. DS already set up.
 19335 000030E7 C43E[9E05]              	LES	DI,[THISSFT]
 19336                                  	;mov	bx,[es:di+5]
 19337 000030EB 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19338                                  	;test	bx,0C0h
 19339                                  	; 17/12/2022
 19340 000030EF F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19341                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19342 000030F2 75F2                    	jnz	short PopDone_retn
 19343                                  	;test	bx,8000h
 19344                                  	; 17/12/2022
 19345                                  	;test	bh,80h
 19346 000030F4 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19347                                  	;TEST	BX,sf_isnet ; 8000h
 19348 000030F7 7406                    	JZ	short LOCAL_COMMIT
 19349                                  
 19350                                  ;IF NOT Installed
 19351                                  ;	transfer NET_COMMIT
 19352                                  ;ELSE
 19353                                  	;mov	ax,1107h
 19354 000030F9 B80711                  	MOV	AX,(MultNET<<8)|7
 19355 000030FC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19356                                  			; ES:DI -> SFT
 19357                                  			; SFT DPB field -> DPB of drive containing file
 19358                                  			; Return: CF set on error, AX = DOS error code
 19359                                  			; CF clear if successful
 19360                                  localcommit_retn: ; 18/12/2022	
 19361 000030FE C3                      	retn
 19362                                  ;ENDIF
 19363                                  
 19364                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19365                                  ; There are three ways we can do this. One is to enter a critical section to
 19366                                  ; protect a potential free. The second is to increment the ref count to mask
 19367                                  ; the close decrementing.
 19368                                  ;
 19369                                  ; The proper way is to let the caller's of close decide if a decrement should
 19370                                  ; be done. We do this by providing another entry into close after the
 19371                                  ; decrement and after the share information release.
 19372                                  
 19373                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19374                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19375                                  
 19376                                  LOCAL_COMMIT:
 19377 000030FF E854E2                  	call	ECritDisk
 19378                                  	; MSDOS 6.0
 19379 00003102 E851E2                  	call	ECritDisk	;PTM.
 19380 00003105 E80E00                  	call	SetSFTTimes
 19381 00003108 B8FFFF                  	MOV	AX,-1
 19382 0000310B E8B0FE                  	call	CloseEntry
 19383                                  	; MSDOS 6.0
 19384 0000310E 9C                      	PUSHF			;PTM.				;AN000;
 19385 0000310F E84115                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19386 00003112 9D                      	POPF			;PTM.				;AN000;
 19387                                  	;call	LCritDisk	;PTM.				;AN000;
 19388                                  	; 18/12/2022
 19389 00003113 E95BE2                  	jmp	LCritDisk
 19390                                  ;localcommit_retn:
 19391                                  ;	retn
 19392                                  
 19393                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19394                                  ;----------------------------------------------------------------------------
 19395                                  ;
 19396                                  ; Procedure Name : SetSFTTimes
 19397                                  ;
 19398                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19399                                  ;   Reflect these times in other SFT's for the same file.
 19400                                  ;
 19401                                  ;   Inputs:	ES:DI point to SFT
 19402                                  ;		BX = sf_flags set apprpriately
 19403                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19404                                  ;   Registers modified: All except ES:DI, BX, AX
 19405                                  ;
 19406                                  ;----------------------------------------------------------------------------
 19407                                  
 19408                                  SetSFTTimes:
 19409                                  ;	File clean or device does not get stamped nor disk looked at.
 19410                                  	
 19411                                  	;test	bx,0C0h
 19412                                  	; 17/12/2022
 19413 00003116 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19414                                  	;TEST	BX,devid_file_clean+devid_device
 19415                                  	;retnz				; clean or device => no timestamp
 19416 00003119 75E3                    	jnz	short localcommit_retn
 19417                                  
 19418                                  ;	file and dirty. See if date is good
 19419                                  
 19420                                  	;test	bx,4000h
 19421                                  	; 17/12/2022
 19422                                  	;test	bh,40h
 19423 0000311B F6C740                  	test	bh,(sf_close_nodate>>8)
 19424                                  	;TEST	BX,sf_close_nodate
 19425                                  	;retnz				; nodate => no timestamp
 19426 0000311E 75DE                    	jnz	short localcommit_retn
 19427                                  
 19428 00003120 50                      	push	ax
 19429 00003121 53                      	push	bx
 19430 00003122 E8EAD9                  	call	DATE16			; Date/Time to AX/DX
 19431                                  	;mov	[es:di+0Fh],ax
 19432 00003125 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19433                                  	;mov	[es:di+0Dh],dx
 19434 00003129 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19435 0000312D 31C0                    	XOR	AX,AX
 19436                                  ;if installed
 19437                                  	;call	JShare + 14 * 4
 19438 0000312F FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19439                                  ;else
 19440                                  ;	call	ShSU
 19441                                  ;endif
 19442 00003133 5B                      	pop	bx
 19443 00003134 58                      	pop	ax
 19444 00003135 C3                      	retn
 19445                                  
 19446                                  ;============================================================================
 19447                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19448                                  ;============================================================================
 19449                                  ; 23/07/2018 - Retro DOS v3.0
 19450                                  ; 18/05/2019 - Retro DOS v4.0
 19451                                  
 19452                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19453                                  
 19454                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19455                                  ;NAME  DIRCALL
 19456                                  
 19457                                  ;**	Low level directory manipulation routines for making removing and
 19458                                  ;	  verifying local or NET directories
 19459                                  ;
 19460                                  ;	DOS_MKDIR
 19461                                  ;	DOS_CHDIR
 19462                                  ;	DOS_RMDIR
 19463                                  ;
 19464                                  ;	Modification history:
 19465                                  ;
 19466                                  ;		Created: ARR 30 March 1983
 19467                                  
 19468                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19469                                  ;---------------------------------------------------------------------------
 19470                                  ;
 19471                                  ; Procedure Name : DOS_MkDir
 19472                                  ;
 19473                                  ; Inputs:
 19474                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19475                                  ;		terminated)
 19476                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19477                                  ;		( = -1 if current dir not involved, else
 19478                                  ;		 Points to first char after last "/" of current dir part)
 19479                                  ;	[THISCDS] Points to CDS being used
 19480                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19481                                  ; Function:
 19482                                  ;	Make a new directory
 19483                                  ; Returns:
 19484                                  ;	Carry Clear
 19485                                  ;		No error
 19486                                  ;	Carry Set
 19487                                  ;	    AX is error code
 19488                                  ;		error_path_not_found
 19489                                  ;			Bad path (not in curr dir part if present)
 19490                                  ;		error_bad_curr_dir
 19491                                  ;			Bad path in current directory part of path
 19492                                  ;		error_access_denied
 19493                                  ;			Already exists, device name
 19494                                  ; DS preserved, Others destroyed
 19495                                  ;---------------------------------------------------------------------------
 19496                                  
 19497                                  ;hkn; called from path.asm. DS already set up.
 19498                                  
 19499                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19500                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19501                                  
 19502                                  DOS_MKDIR:
 19503 00003136 E859E1                  	call	TestNet
 19504 00003139 7313                    	JNC	short LOCAL_MKDIR
 19505                                  
 19506                                  ;IF NOT Installed
 19507                                  ;	transfer NET_MKDIR
 19508                                  ;ELSE
 19509                                  	;mov	ax,1103h
 19510 0000313B B80311                  	MOV	AX,(MultNET<<8)|3
 19511 0000313E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19512                                  			; SS = DOS CS
 19513                                  			; SDA first filename pointer -> fully-qualified directory name
 19514                                  			; SDA CDS pointer -> current directory
 19515                                  			; Return: CF set on error, AX = DOS error code
 19516                                  			; CF clear if successful
 19517 00003140 C3                      	retn
 19518                                  ;ENDIF
 19519                                  
 19520                                  NODEACCERRJ:
 19521                                  	;mov	ax,5
 19522 00003141 B80500                  	MOV	AX,error_access_denied
 19523                                  _BadRet:
 19524 00003144 F9                      	STC
 19525                                  	;call	LCritDisk
 19526                                  	;retn
 19527                                  	; 18/12/2022
 19528 00003145 E929E2                  	jmp	LCritDisk
 19529                                  
 19530                                  PATHNFJ:
 19531 00003148 E826E2                  	call	LCritDisk
 19532 0000314B E9EFF9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19533                                  
 19534                                  LOCAL_MKDIR:
 19535 0000314E E805E2                  	call	ECritDisk
 19536                                  
 19537                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19538                                  
 19539 00003151 8C16[A005]              	MOV	[THISSFT+2],SS
 19540                                  
 19541                                  ;hkn; DOSDATA
 19542 00003155 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19543                                  
 19544                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19545                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19546                                  
 19547                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19548 0000315B C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19549                                  				; make sure SHARER won't complain.
 19550                                  	;mov	al,10h
 19551 00003161 B010                    	MOV	AL,attr_directory
 19552 00003163 E88C18                  	call	MakeNode
 19553 00003166 72E0                    	JC	short PATHNFJ
 19554 00003168 83F803                  	CMP	AX,3
 19555 0000316B 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19556 0000316D C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19557 00003171 C53E[E205]              	LDS	DI,[CURBUF]
 19558 00003175 29FE                    	SUB	SI,DI
 19559 00003177 56                      	PUSH	SI		; Pointer to dir_first
 19560                                  	; MSDOS 6.0
 19561                                  	;push	word [DI+8]
 19562 00003178 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19563                                  	; MSDOS 3.3 & MSDOS 6.0
 19564                                  	;push	word [di+6]
 19565 0000317B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19566 0000317E 16                      	push	ss
 19567 0000317F 1F                      	pop	ds
 19568 00003180 FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19569 00003184 31C0                    	XOR	AX,AX
 19570 00003186 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19571 00003189 E8A217                  	call	NEWDIR
 19572 0000318C 726F                    	JC	short NODEEXISTSPOPDEL ; No room
 19573 0000318E E8680D                  	call	GETENT		; First entry
 19574 00003191 726A                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19575 00003193 C43E[E205]              	LES	DI,[CURBUF]
 19576                                  
 19577                                  	; MSDOS 6.0
 19578 00003197 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19579                                  				 ;LB. if already dirty		    ;AN000;
 19580 0000319C 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19581 0000319E E81E2A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19582                                  	
 19583                                  	; MSDOS 3.3 & MSDOS 6.0
 19584                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19585 000031A1 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19586                                  yesdirty5:
 19587                                  	;;add	di,16 ; MSDOS 3.3
 19588                                  	;add	di,20 ; MSDOS 6.0
 19589 000031A6 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19590 000031A9 B82E20                  	MOV	AX,202EH	; ". "
 19591 000031AC 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19592 000031B0 E81B18                  	call	SETDOTENT
 19593 000031B3 B82E2E                  	MOV	AX,2E2EH	; ".."
 19594 000031B6 5A                      	POP	DX		; Parent
 19595 000031B7 E81418                  	call	SETDOTENT
 19596 000031BA C42E[8A05]              	LES	BP,[THISDPB]
 19597                                  	; 22/09/2023
 19598                                  	;;mov	byte [ALLOWED],18h
 19599                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19600 000031BE 5A                      	POP	DX		; Entry sector
 19601                                  	; MSDOS 6.0
 19602 000031BF 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19603                                  
 19604                                  	;XOR	AL,AL ; *	; Pre read
 19605                                  	;call	GETBUFFR
 19606                                  	; 22/09/2023
 19607 000031C3 E8F027                  	call	GETBUFFER ; *	 ;Pre read
 19608 000031C6 725B                    	JC	short NODEEXISTSP
 19609 000031C8 8B16[C205]              	MOV	DX,[DIRSTART]
 19610 000031CC C53E[E205]              	LDS	DI,[CURBUF]
 19611                                  	;or	byte [di+5],4
 19612 000031D0 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19613 000031D4 5E                      	POP	SI		; dir_first pointer
 19614 000031D5 01FE                    	ADD	SI,DI
 19615 000031D7 8914                    	MOV	[SI],DX
 19616 000031D9 31D2                    	XOR	DX,DX
 19617 000031DB 895402                  	MOV	[SI+2],DX	; Zero size
 19618 000031DE 895404                  	MOV	[SI+4],DX
 19619                                  DIRUP:
 19620                                  	; MSDOS 6.0
 19621 000031E1 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19622                                  	;			 ;LB. if already dirty 		   ;AN000;
 19623 000031E5 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19624 000031E7 E8D529                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19625                                  	
 19626                                  	; MSDOS 3.3 & MSDOS 6.0
 19627                                  	;or	byte [di+5],40h
 19628 000031EA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19629                                  yesdirty6:
 19630 000031EE 16                      	push	ss
 19631 000031EF 1F                      	pop	ds
 19632 000031F0 268A4600                	mov	al,[es:bp]
 19633                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19634 000031F4 E8C328                  	call	FLUSHBUF
 19635                                  	;mov	ax,5
 19636 000031F7 B80500                  	MOV	AX,error_access_denied
 19637                                  	;call	LCritDisk
 19638                                  	;retn
 19639                                  	; 18/12/2022
 19640 000031FA E974E1                  	jmp	LCritDisk
 19641                                  
 19642                                  NODEEXISTSPOPDEL:
 19643 000031FD 5A                      	POP	DX		; Parent
 19644 000031FE 5A                      	POP	DX		; Entry sector
 19645                                  	; MSDOS 6.0 
 19646 000031FF 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19647 00003203 C42E[8A05]              	LES	BP,[THISDPB]
 19648                                  	; 22/09/2023
 19649                                  	;;mov	byte [ALLOWED],18h
 19650                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19651                                  	;XOR	AL,AL ; *	; Pre read
 19652                                  	;call	GETBUFFR
 19653                                  	; 22/09/2023
 19654 00003207 E8AC27                  	call	GETBUFFER ; *	; Pre read
 19655 0000320A 7217                    	JC	short NODEEXISTSP
 19656 0000320C C53E[E205]              	LDS	DI,[CURBUF]
 19657                                  	;or	byte [di+5],4
 19658 00003210 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19659 00003214 5E                      	POP	SI		; dir_first pointer
 19660 00003215 01FE                    	ADD	SI,DI
 19661                                  	;sub	si,1Ah ; 26
 19662 00003217 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19663 0000321A C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19664 0000321D E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19665                                  NODEEXISTS:
 19666 00003220 E91EFF                  	JMP	NODEACCERRJ ; 10/08/2018
 19667                                  
 19668                                  NODEEXISTSP:
 19669 00003223 5E                      	POP	SI		; Clean stack
 19670 00003224 EBFA                    	JMP	short NODEEXISTS
 19671                                  
 19672                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19673                                  
 19674                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19675                                  ;----------------------------------------------------------------------------
 19676                                  ;
 19677                                  ; Procedure Name : DOS_ChDir
 19678                                  ;
 19679                                  ; Inputs:
 19680                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19681                                  ;		terminated)
 19682                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19683                                  ;		( = -1 if current dir not involved, else
 19684                                  ;		 Points to first char after last "/" of current dir part)
 19685                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19686                                  ; Function:
 19687                                  ;	Validate the path for potential new current directory
 19688                                  ; Returns:
 19689                                  ;	NOTE:
 19690                                  ;	    [SATTRIB] is modified by this call
 19691                                  ;	Carry Clear
 19692                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19693                                  ;		Caller must NOT set ID fields on a NET CDS.
 19694                                  ;	Carry Set
 19695                                  ;	    AX is error code
 19696                                  ;		error_path_not_found
 19697                                  ;			Bad path
 19698                                  ;		error_access_denied
 19699                                  ;			device or file name
 19700                                  ; DS preserved, Others destroyed
 19701                                  ;----------------------------------------------------------------------------
 19702                                  
 19703                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19704                                  
 19705                                  ; 18/05/2019 - Retro DOS v4.0
 19706                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19707                                  
 19708                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19709                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19710                                  
 19711                                  DOS_CHDIR:
 19712 00003226 E869E0                  	call	TestNet
 19713 00003229 7306                    	JNC	short LOCAL_CHDIR
 19714                                  
 19715                                  ;IF NOT Installed
 19716                                  ;	transfer NET_CHDIR
 19717                                  ;ELSE
 19718                                  	;mov	ax,1105h
 19719 0000322B B80511                  	MOV	AX,(MultNET<<8)|5
 19720 0000322E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19721                                  			; SS = DOS CS
 19722                                  			; SDA first filename pointer -> fully-qualified directory name
 19723                                  			; SDA CDS pointer -> current directory
 19724                                  			; Return: CF set on error, AX = DOS error code
 19725                                  			; CF clear if successful
 19726 00003230 C3                      	retn
 19727                                  ;ENDIF
 19728                                  
 19729                                  LOCAL_CHDIR:
 19730 00003231 E822E1                  	call	ECritDisk
 19731                                  	; MSDOS 6.0
 19732                                  	;;test	word [es:di+43h],2000h
 19733                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19734                                  	; 17/12/2022
 19735                                  	;test	byte [es:di+44h],20h
 19736 00003234 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19737 00003239 7406                    	JZ	short nojoin		   ;PTM.
 19738                                  	;mov	word [es:di+49h], 0FFFFh
 19739 0000323B 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19740                                  nojoin:
 19741                                  	; MSDOS 3.3 & MSDOS 6.0
 19742 00003241 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19743                                  	;mov	byte [SATTRIB],16h
 19744 00003246 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19745                                  				; Dir calls can find these
 19746                                  ; DOS 3.3  6/24/86 FastOpen
 19747 0000324B 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19748 00003250 E8320D                  	call	GETPATH
 19749 00003253 9C                      	PUSHF						;AN000;
 19750 00003254 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19751 00003259 9D                      	POPF						;AN000;
 19752                                  ; DOS 3.3  6/24/86 FastOpen
 19753                                  
 19754                                  	; MSDOS 3.3
 19755                                  	;mov	byte [FastOpenFlg],0
 19756                                  	
 19757                                  	;mov	ax,3
 19758 0000325A B80300                  	MOV	AX,error_path_not_found
 19759 0000325D 7207                    	JC	short ChDirDone
 19760 0000325F 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19761 00003261 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19762 00003265 F8                      	CLC
 19763                                  ChDirDone:
 19764                                  	;call	LCritDisk
 19765                                  	;retn
 19766                                  	; 18/12/2022
 19767 00003266 E908E1                  	jmp	LCritDisk
 19768                                  
 19769                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19770                                  ;----------------------------------------------------------------------------
 19771                                  ;
 19772                                  ; Procedure Name : DOS_RmDir
 19773                                  ;
 19774                                  ; Inputs:
 19775                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19776                                  ;		terminated)
 19777                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19778                                  ;		( = -1 if current dir not involved, else
 19779                                  ;		 Points to first char after last "/" of current dir part)
 19780                                  ;	[THISCDS] Points to CDS being used
 19781                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19782                                  ; Function:
 19783                                  ;	Remove a directory
 19784                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19785                                  ; Returns:
 19786                                  ;	NOTE:
 19787                                  ;	    [SATTRIB] is modified by this call
 19788                                  ;	Carry Clear
 19789                                  ;		No error
 19790                                  ;	Carry Set
 19791                                  ;	    AX is error code
 19792                                  ;		error_path_not_found
 19793                                  ;			Bad path (not in curr dir part if present)
 19794                                  ;		error_bad_curr_dir
 19795                                  ;			Bad path in current directory part of path
 19796                                  ;		error_access_denied
 19797                                  ;			device or file name, root directory
 19798                                  ;			Bad directory ('.' '..' messed up)
 19799                                  ; DS preserved, Others destroyed
 19800                                  ;----------------------------------------------------------------------------
 19801                                  
 19802                                  ;hkn; called from path.asm. DS already set up.
 19803                                  
 19804                                  ; 18/05/2019 - Retro DOS v4.0
 19805                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19806                                  
 19807                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19808                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19809                                  
 19810                                  DOS_RMDIR:
 19811 00003269 E826E0                  	call	TestNet
 19812 0000326C 7306                    	JNC	short LOCAL_RMDIR
 19813                                  
 19814                                  ;IF NOT Installed
 19815                                  ;	transfer NET_RMDIR
 19816                                  ;ELSE
 19817                                  	;mov	ax,1101h
 19818 0000326E B80111                  	MOV	AX,(MultNET<<8)|1
 19819 00003271 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19820                                  			; SS = DOS CS
 19821                                  			; SDA first filename pointer -> fully-qualified directory name
 19822                                  			; SDA CDS pointer -> current directory
 19823                                  			; Return: CF set on error, AX = DOS error code
 19824                                  			; CF clear if successful
 19825 00003273 C3                      	retn
 19826                                  ;ENDIF
 19827                                  
 19828                                  LOCAL_RMDIR:
 19829 00003274 E8DFE0                  	call	ECritDisk
 19830 00003277 C606[4C03]00            	MOV	byte [NoSetDir],0
 19831                                  	;mov	byte [SATTRIB],16h
 19832 0000327C C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19833                                  					; Dir calls can find these
 19834 00003281 E8010D                  	call	GETPATH
 19835 00003284 720C                    	JC	short NOPATH		; Path not found
 19836 00003286 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19837 00003288 8B3E[C205]              	MOV	DI,[DIRSTART]
 19838 0000328C 09FF                    	OR	DI,DI			; Root ?
 19839 0000328E 750E                    	JNZ	short rmdir_get_buf	; No
 19840 00003290 EB09                    	JMP	SHORT NOTDIRPATH
 19841                                  
 19842                                  NOPATH:
 19843                                  	;mov	ax,3
 19844 00003292 B80300                  	MOV	AX,error_path_not_found
 19845 00003295 E9ACFE                  	JMP	_BadRet
 19846                                  
 19847                                  NOTDIRPATHPOP:
 19848 00003298 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19849 00003299 58                      	POP	AX
 19850                                  NOTDIRPATHPOP2:
 19851 0000329A 58                      	POP	AX
 19852                                  NOTDIRPATH:
 19853 0000329B E9A3FE                  	JMP	NODEACCERRJ
 19854                                  
 19855                                  rmdir_get_buf:
 19856 0000329E C53E[E205]              	LDS	DI,[CURBUF]
 19857 000032A2 29FB                    	SUB	BX,DI		; Compute true offset
 19858 000032A4 53                      	PUSH	BX		; Save entry pointer
 19859                                  	
 19860                                  	; MSDOS 6.0
 19861                                  	;push	word [di+8]
 19862 000032A5 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19863                                  	
 19864                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19865                                  	;push	word [di+6]
 19866 000032A8 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19867                                  
 19868                                  ;hkn; SS is DOSDATA
 19869                                  	;context DS
 19870 000032AB 16                      	push	ss
 19871 000032AC 1F                      	pop	ds
 19872                                  	;context ES
 19873 000032AD 16                      	push	ss
 19874 000032AE 07                      	pop	es
 19875                                  
 19876                                  ;hkn; NAME1 is in DOSDATA
 19877 000032AF BF[4B05]                	MOV	DI,NAME1
 19878 000032B2 B03F                    	MOV	AL,'?'
 19879 000032B4 B90B00                  	MOV	CX,11
 19880 000032B7 F3AA                    	REP	STOSB
 19881 000032B9 30C0                    	XOR	AL,AL
 19882 000032BB AA                      	STOSB				; Nul terminate it
 19883 000032BC E85A0F                  	call	STARTSRCH		; Set search
 19884 000032BF E8340C                  	call	GETENTRY		; Get start of directory
 19885 000032C2 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19886 000032C4 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19887 000032C8 89DE                    	MOV	SI,BX
 19888 000032CA AD                      	LODSW
 19889                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19890 000032CB 3D2E20                  	cmp	ax,202Eh ; ". "
 19891 000032CE 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19892                                  	;add	si,30
 19893 000032D0 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19894 000032D3 AD                      	LODSW
 19895                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19896                                  	;cmp	ax, '..'
 19897 000032D4 3D2E2E                  	cmp	ax,2E2Eh
 19898 000032D7 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19899                                  
 19900                                  ;hkn; SS is DOSDATA
 19901                                  	;context DS
 19902 000032D9 16                      	push	ss
 19903 000032DA 1F                      	pop	ds
 19904 000032DB C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19905 000032E1 E8120C                  	call	GETENTRY		; Get next entry
 19906 000032E4 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19907                                  	;mov	byte [ATTRIB],16h
 19908 000032E6 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19909 000032EB E8100B                  	call	SRCH			; Do a search
 19910 000032EE 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19911 000032F0 803E[4A03]00            	CMP	byte [FAILERR],0
 19912 000032F5 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19913 000032F7 C42E[8A05]              	LES	BP,[THISDPB]
 19914 000032FB 8B1E[C205]              	MOV	BX,[DIRSTART]
 19915 000032FF E8241C                  	call	RELEASE 		; Release data in sub dir
 19916 00003302 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19917 00003304 5A                      	POP	DX			; Sector # of entry
 19918 00003305 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19919                                  	; 22/09/2023
 19920                                  	;;mov	byte [ALLOWED],18h
 19921                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19922                                  	;XOR	AL,AL ; *		; Pre read
 19923                                  	;call	GETBUFFR		; Get sector back
 19924 00003309 E8AA26                  	call	GETBUFFER ; *		; Pre Read
 19925 0000330C 728C                    	JC	short NOTDIRPATHPOP2	; Screw up
 19926 0000330E C53E[E205]              	LDS	DI,[CURBUF]
 19927                                  	;or	byte [di+5],4
 19928 00003312 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19929 00003316 5B                      	POP	BX			; Pointer to start of entry
 19930 00003317 01FB                    	ADD	BX,DI			; Corrected
 19931 00003319 C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19932                                  
 19933                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19934 0000331C 1E                      	PUSH	DS
 19935                                  
 19936                                  ;hkn; SS is DOSDATA
 19937                                  	;context DS
 19938 0000331D 16                      	push	ss
 19939 0000331E 1F                      	pop	ds
 19940                                  
 19941                                  	; MSDOS 6.0
 19942 0000331F E80EF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19943                                  
 19944                                  ;	; MSDOS 3.3
 19945                                  ;_FastOpen_Delete:
 19946                                  ;	push	ax
 19947                                  ;	mov	si,[WFP_START]
 19948                                  ;	mov	bx,FastTable
 19949                                  ;	;mov	al,3  ; FONC_delete
 19950                                  ;	mov	al,FONC_delete
 19951                                  ;	call	far [BX+2]  ; FastTable+2
 19952                                  ;	pop	ax
 19953                                  
 19954 00003322 1F                      	POP	DS
 19955                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19956                                  
 19957 00003323 E9BBFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19958                                  
 19959                                  ;============================================================================
 19960                                  ; DISK.ASM, MSDOS 6.0, 1991
 19961                                  ;============================================================================
 19962                                  ; 23/07/2018 - Retro DOS v3.0 
 19963                                  ; 04/05/2019 - Retro DOS v4.0
 19964                                  
 19965                                  ;	TITLE	DISK - Disk utility routines
 19966                                  ;	NAME	Disk
 19967                                  
 19968                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19969                                  ;
 19970                                  ;	SWAPCON
 19971                                  ;	SWAPBACK
 19972                                  ;	DOS_READ
 19973                                  ;	DOS_WRITE
 19974                                  ;	get_io_sft
 19975                                  ;	DirRead
 19976                                  ;	FIRSTCLUSTER
 19977                                  ;	SET_BUF_AS_DIR
 19978                                  ;	FATSecRd
 19979                                  ;	DREAD
 19980                                  ;	CHECK_WRITE_LOCK
 19981                                  ;	CHECK_READ_LOCK
 19982                                  ;
 19983                                  ;	Revision history:
 19984                                  ;
 19985                                  ;		A000   version 4.00  Jan. 1988
 19986                                  ;
 19987                                  ;----------------------------------------------------------------------------
 19988                                  ;
 19989                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19990                                  ;		error happens, DOS retries the entire block assuming that
 19991                                  ;		zero characters were transferred. Modified the code to take
 19992                                  ;		into account the number of characters transfered before
 19993                                  ;		retrying the operation.
 19994                                  ;
 19995                                  ;----------------------------------------------------------------------------
 19996                                  ;
 19997                                  
 19998                                  ;Installed = TRUE
 19999                                  
 20000                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20001                                  
 20002                                  ; **** Drivers for file input from devices ****
 20003                                  ;----------------------------------------------------------------------------
 20004                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20005                                  ;   of handles 0 and 1
 20006                                  ;
 20007                                  ;   Inputs:	DS is DOSDATA
 20008                                  ;   Outputs:	CONSWAP is set to false.
 20009                                  ;   Registers modified: none
 20010                                  ;----------------------------------------------------------------------------
 20011                                  
 20012                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20013                                  
 20014                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20015                                  ; 04/05/2019 - Retro DOS v4.0
 20016                                  
 20017                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20018                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20019                                  
 20020                                  SWAPBACK:
 20021 00003326 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20022 0000332B C3                      	retn
 20023                                  
 20024                                  ;----------------------------------------------------------------------------
 20025                                  ;
 20026                                  ; Procedure Name : SWAPCON
 20027                                  ;
 20028                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20029                                  ;
 20030                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20031                                  ;		DS is DOSDATA
 20032                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20033                                  ;   Registers modified: none
 20034                                  ;--------------------------------------------------------------------------
 20035                                  
 20036                                  SWAPCON:
 20037                                  	; MSDOS 3.3
 20038                                  	;push	es
 20039                                  	;push	di
 20040                                  	;mov	byte [CONSWAP],1
 20041                                  	;les	di,[THISSFT]
 20042                                  	;mov	word [CONSFT],di
 20043                                  	;mov	word [CONSFT+2],es
 20044                                  	;pop	di
 20045                                  	;pop	es
 20046                                  	;retn
 20047                                  
 20048                                  	; MSDOS 6.0
 20049 0000332C C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20050 00003331 50                      	push	ax
 20051 00003332 A1[9E05]                	mov	ax,[THISSFT]
 20052 00003335 A3[E605]                	mov	[CONSFT],ax
 20053 00003338 A1[A005]                	mov	ax,[THISSFT+2]
 20054 0000333B A3[E805]                	mov	[CONSFT+2],ax
 20055 0000333E 58                      	pop	ax
 20056 0000333F C3                      	retn
 20057                                  
 20058                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20059                                  ; 04/05/2019 - Retro DOS v4.0
 20060                                  
 20061                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20062                                  ;-----------------------------------------------------------------------------
 20063                                  ;
 20064                                  ; Inputs:
 20065                                  ;	ThisSFT set to the SFT for the file being used
 20066                                  ;	[DMAADD] contains transfer address
 20067                                  ;	CX = No. of bytes to read
 20068                                  ;	DS = DOSDATA
 20069                                  ; Function:
 20070                                  ;	Perform read operation
 20071                                  ; Outputs:
 20072                                  ;    Carry clear
 20073                                  ;	SFT Position and cluster pointers updated
 20074                                  ;	CX = No. of bytes read
 20075                                  ;	ES:DI point to SFT
 20076                                  ;    Carry set
 20077                                  ;	AX is error code
 20078                                  ;	CX = 0
 20079                                  ;	ES:DI point to SFT
 20080                                  ; DS preserved, all other registers destroyed
 20081                                  ;
 20082                                  ;-----------------------------------------------------------------------------
 20083                                  
 20084                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20085                                  
 20086                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20087                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20088                                  
 20089                                  DOS_READ:
 20090 00003340 C43E[9E05]              	LES	DI,[THISSFT]
 20091                                  
 20092                                  ; Verify that the sft has been opened in a mode that allows reading.
 20093                                  
 20094                                  	;mov	al,[es:di+2]
 20095 00003344 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20096                                  	;and	al,0Fh
 20097 00003348 240F                    	AND	AL,access_mask
 20098                                  	;cmp	al,1
 20099 0000334A 3C01                    	CMP	AL,open_for_write
 20100 0000334C 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20101 0000334E E90306                  	jmp	SET_ACC_ERR
 20102                                  
 20103                                  READ_NO_MODE:
 20104 00003351 E8E104                  	call	SETUP
 20105 00003354 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20106 00003356 E852DF                  	call	IsSFTNet
 20107 00003359 7408                    	JZ	short LOCAL_READ
 20108                                  
 20109                                  ;IF NOT Installed
 20110                                  ;	transfer NET_READ
 20111                                  ;ELSE
 20112                                  	;mov	ax,1108h
 20113 0000335B B80811                  	MOV	AX,(MultNET<<8)|8
 20114 0000335E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20115                                  			; ES:DI -> SFT
 20116                                  			; SFT DPB field -> DPB of drive containing file
 20117                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20118                                  			; Return: CF set on error, CX = bytes read
 20119 00003360 C3                      	retn
 20120                                  ;ENDIF
 20121                                  
 20122                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20123                                  ; except return immediately.
 20124                                  
 20125                                  NoIORet:
 20126 00003361 F8                      	CLC
 20127 00003362 C3                      	retn
 20128                                  
 20129                                  LOCAL_READ:
 20130                                  	;test	word [es:di+5],80h
 20131                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20132 00003363 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20133 00003368 750E                    	JNZ	short READDEV
 20134                                  
 20135                                  	;mov	byte [EXTERR_LOCUS],2
 20136 0000336A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20137 0000336F E8E4DF                  	call	ECritDisk
 20138 00003372 E89B05                  	call	DISKREAD
 20139                                  
 20140                                  critexit:
 20141                                  	;call	LCritDisk
 20142                                  	;retn
 20143                                  	; 16/12/2022
 20144 00003375 E9F9DF                  	jmp	LCritDisk
 20145                                  
 20146                                  ; We are reading from a device. Examine the status of the device to see if we
 20147                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20148                                  ; null device, we can safely indicate no transfer.
 20149                                  
 20150                                  READDEV:
 20151                                  	;mov	byte [EXTERR_LOCUS],4
 20152 00003378 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20153                                  	;mov	bl,[es:di+5]
 20154 0000337D 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20155 00003381 C43E[2C03]              	LES	DI,[DMAADD]
 20156                                  	;test	bl,40h
 20157 00003385 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20158 00003388 7407                    	JZ	short ENDRDDEVJ3
 20159                                  	;test	bl,4
 20160 0000338A F6C304                  	test	BL,devid_device_null	; NUL device?
 20161 0000338D 7405                    	JZ	short TESTRAW 		; NO
 20162 0000338F 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20163                                  ENDRDDEVJ3:
 20164                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20165                                  	;JMP	short ENDRDDEVJ2
 20166                                  	; 16/12/2022
 20167 00003391 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20168                                  
 20169                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20170                                  ; bizarre std_con_string_input.
 20171                                  
 20172                                  TESTRAW:
 20173                                  	;test	bl,20h
 20174 00003394 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20175 00003397 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20176                                  	;test	bl,1
 20177 00003399 F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20178 0000339C 7461                    	JZ	short NOTRDCON
 20179 0000339E E98F01                  	JMP	READCON
 20180                                  
 20181                                  DVRDRAW:
 20182 000033A1 06                      	PUSH	ES
 20183 000033A2 1F                      	POP	DS			; Xaddr to DS:DI
 20184                                  
 20185                                  	; 04/05/2019 - Retro DOS v4.0
 20186                                  
 20187                                  	; MSDOS 6.0
 20188                                  ;SR;
 20189                                  ;Check for win386 presence -- if present, do polled read of characters
 20190                                  
 20191 000033A3 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20192 000033A9 7408                    	jz	short ReadRawRetry	;not present
 20193 000033AB F6C301                  	test	bl,devid_device_con_in	;is it console device
 20194 000033AE 7403                    	jz	short ReadRawRetry	;no, do normal read
 20195 000033B0 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20196                                  
 20197                                  ReadRawRetry:
 20198 000033B3 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20199 000033B5 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20200 000033B7 89C2                    	MOV	DX,AX			; Start at 0
 20201 000033B9 E89113                  	call	SETREAD
 20202 000033BC 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20203                                  
 20204                                  ;hkn; SS override
 20205 000033BD 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20206 000033C2 E80F13                  	call	DEVIOCALL
 20207 000033C5 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20208 000033C7 B486                    	MOV	AH,86H			; Read error
 20209                                  
 20210                                  ;hkn; SS override
 20211 000033C9 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20212                                  	; MSDOS 3.3
 20213                                  	;test	di,8000h
 20214                                  	;jz	short CRDROK
 20215                                  	; MSDOS 6.0
 20216 000033CE 09FF                    	or	di,di
 20217 000033D0 7923                    	jns	short CRDROK		; no errors
 20218                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20219 000033D2 E8641F                  	call	CHARHARD
 20220 000033D5 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20221                                  
 20222                                  	; 04/05/2019
 20223                                  
 20224                                  	; MSDOS 6.0
 20225 000033D7 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20226 000033DC 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20227                                  
 20228                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20229 000033E1 08C0                    	OR	AL,AL
 20230 000033E3 7410                    	JZ	short CRDROK		; Ignore
 20231 000033E5 3C03                    	CMP	AL,3
 20232 000033E7 7403                    	JZ	short CRDFERR 		; fail.
 20233 000033E9 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20234 000033EA EBC7                    	JMP	short ReadRawRetry	; Retry
 20235                                  
 20236                                  ; We have encountered a device-driver error. We have informed the user of it
 20237                                  ; and he has said for us to fail the system call.
 20238                                  
 20239                                  CRDFERR:
 20240 000033EC 5F                      	POP	DI			; Clean stack
 20241                                  DEVIOFERR:
 20242                                  
 20243                                  ;hkn; SS override
 20244 000033ED 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20245 000033F2 E95D05                  	jmp	SET_ACC_ERR_DS
 20246                                  
 20247                                  CRDROK:
 20248 000033F5 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20249 000033F6 89D7                    	MOV	DI,DX
 20250                                  
 20251                                  ;hkn; SS override
 20252 000033F8 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20253                                  	;JMP	SHORT ENDRDDEVJ3
 20254                                  	; 16/12/2022
 20255 000033FD EB6B                    	jmp	short ENDRDDEVJ2
 20256                                  
 20257                                  ; We are going to do a cooked read on some character device. There is a
 20258                                  ; problem here, what does the data look like? Is it a terminal device, line
 20259                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20260                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20261                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20262                                  ; included in data). this "simulates" the way con works in cooked mode
 20263                                  ; reading one line at a time. With file data, however, the lines will look
 20264                                  ; like, LF line CR. This is a little weird.
 20265                                  
 20266                                  NOTRDCON:
 20267 000033FF 8CC0                    	MOV	AX,ES
 20268 00003401 8ED8                    	MOV	DS,AX
 20269 00003403 89FB                    	MOV	BX,DI
 20270 00003405 31D2                    	XOR	DX,DX
 20271 00003407 89D0                    	MOV	AX,DX
 20272 00003409 51                      	PUSH	CX
 20273 0000340A B90100                  	MOV	CX,1
 20274 0000340D E83D13                  	call	SETREAD
 20275 00003410 59                      	POP	CX
 20276                                  
 20277                                  ;hkn; SS override
 20278 00003411 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20279                                  	;lds	si,[si+7]
 20280 00003416 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20281                                  DVRDLP:
 20282 00003419 E8FE1C                  	call	DSKSTATCHK
 20283 0000341C E8B812                  	call	DEVIOCALL2
 20284 0000341F 57                      	PUSH	DI		; Save "count" done
 20285 00003420 B486                    	MOV	AH,86H
 20286                                  
 20287                                  ;hkn; SS override
 20288 00003422 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20289                                  	
 20290                                  	; MSDOS 3.3
 20291                                  	;test	di,8000h
 20292                                  	;jz	short CRDOK
 20293                                  	; MSDOS 6.0
 20294 00003427 09FF                    	or	di,di
 20295 00003429 7917                    	jns	short CRDOK
 20296                                  	
 20297 0000342B E80B1F                  	call	CHARHARD
 20298 0000342E 5F                      	POP	DI
 20299                                  
 20300                                  ;hkn; SS override
 20301 0000342F 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20302 00003436 3C01                    	CMP	AL,1
 20303 00003438 74DF                    	JZ	short DVRDLP		;Retry
 20304 0000343A 3C03                    	CMP	AL,3
 20305 0000343C 74AF                    	JZ	short DEVIOFERR		; FAIL
 20306 0000343E 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20307 00003440 EB12                    	JMP	SHORT DVRDIGN
 20308                                  
 20309                                  CRDOK:
 20310 00003442 5F                      	POP	DI
 20311                                  
 20312                                  ;hkn; SS override
 20313 00003443 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20314                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20315 00003449 751F                    	JNZ	short ENDRDDEVJ2
 20316                                  	; 16/12/2022
 20317                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20318                                  
 20319 0000344B 1E                      	PUSH	DS
 20320                                  
 20321                                  ;hkn; SS override
 20322 0000344C 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20323 00003451 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20324 00003453 1F                      	POP	DS
 20325                                  DVRDIGN:
 20326                                  
 20327                                  ;hkn; SS override
 20328 00003454 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20329 00003459 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20330 00003460 47                      	INC	DI			; Next character
 20331 00003461 3C1A                    	CMP	AL,1Ah			; ^Z?
 20332                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20333 00003463 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20334                                  	; 16/12/2022
 20335                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20336 00003465 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20337 00003467 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20338 00003469 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20339                                  					;  AX=FFFF which is not likely
 20340                                  ENDRDDEVJ2:
 20341                                  	; 16/12/2022
 20342                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20343                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20344 0000346A E98E00                  	jmp	ENDRDDEV
 20345                                  
 20346                                  	; 04/05/2019
 20347                                  
 20348                                  	; MSDOS 6.0
 20349                                  ;SR;
 20350                                  ;Polling code for raw read on CON when WIN386 is present
 20351                                  ;
 20352                                  ;At this point -- ds:di is transfer address
 20353                                  ;		  cx is count
 20354                                  
 20355                                  do_polling:
 20356 0000346D 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20357 0000346F 31C0                    	xor	ax,ax
 20358 00003471 89C2                    	mov	dx,ax
 20359 00003473 E8D712                  	call	SETREAD			;prepare device packet
 20360                                  
 20361                                  do_io:
 20362                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20363                                  
 20364 00003476 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20365 0000347B 1E                      	push	ds
 20366 0000347C 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20367 00003481 E85012                  	call	DEVIOCALL		;call device driver
 20368 00003484 1F                      	pop	ds
 20369                                  	
 20370                                  	;test	word [es:bx+3],8000h
 20371                                  	; 16/12/2022
 20372                                  	;test	byte [es:bx+4],80h
 20373 00003485 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20374                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20375 0000348A 7413                    	jz	short check_busy	;no
 20376                                  
 20377 0000348C 1E                      	push	ds
 20378 0000348D 89FA                    	mov	dx,di
 20379                                  	;invoke charhard		;invoke int 24h handler
 20380 0000348F E8A71E                  	call	CHARHARD
 20381 00003492 89D7                    	mov	di,dx
 20382 00003494 08C0                    	or	al,al
 20383 00003496 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20384 00003498 3C03                    	cmp	al,3
 20385 0000349A 7448                    	jz	short devrderr		;user asked to fail
 20386 0000349C 1F                      	pop	ds
 20387 0000349D EBD7                    	jmp	short do_io		;user asked to retry
 20388                                  
 20389                                  check_busy:
 20390                                  	;test	word [es:bx+3],200h
 20391                                  	; 16/12/2022
 20392 0000349F 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20393                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20394 000034A4 7547                    	jnz	short no_char		;yes, no character available
 20395                                  
 20396                                  ;Character is available. Read in 1 character at a time until all characters
 20397                                  ;are read in or no character is available
 20398                                  
 20399 000034A6 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20400 000034AB 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20401 000034B1 1E                      	push	ds
 20402 000034B2 36C536[9E05]            	lds	si,[ss:THISSFT]
 20403 000034B7 E81A12                  	call	DEVIOCALL
 20404                                  
 20405 000034BA 89FA                    	mov	dx,di
 20406 000034BC B486                    	mov	ah,86h
 20407                                  	;mov	di,[es:bx+3]
 20408 000034BE 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20409 000034C2 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20410 000034C6 7410                    	jz	short next_char		;no,read next character
 20411                                  
 20412                                  	;invoke	charhard		;invoke int 24h handler
 20413 000034C8 E86E1E                  	call	CHARHARD
 20414 000034CB 89D7                    	mov	di,dx			;restore di
 20415 000034CD 08C0                    	or	al,al			;
 20416 000034CF 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20417 000034D1 3C03                    	cmp	al,3
 20418 000034D3 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20419 000034D5 1F                      	pop	ds
 20420 000034D6 EB9E                    	jmp	short do_io		;user issued a retry
 20421                                  
 20422                                  next_char:
 20423 000034D8 1F                      	pop	ds
 20424 000034D9 89D7                    	mov	di,dx
 20425 000034DB 49                      	dec	cx			;decrement count
 20426 000034DC E318                    	jcxz	done_read		;all characters read in
 20427 000034DE 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20428 000034E2 EB92                    	jmp	short do_io			;read next character in
 20429                                  
 20430                                  devrderr:
 20431 000034E4 5F                      	pop	di			;discard segment address
 20432 000034E5 36C43E[9E05]            	les	di,[ss:THISSFT]
 20433                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20434 000034EA E96504                  	jmp     SET_ACC_ERR_DS
 20435                                  
 20436                                  no_char:
 20437                                  ;Since no character is available, we let win386 switch the VM out
 20438                                  
 20439 000034ED 50                      	push	ax
 20440 000034EE B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20441 000034F0 CD2A                    	int	2Ah			;indicate idle to WIN386
 20442                                  
 20443                                  ;When control returns from WIN386, we continue the raw read
 20444                                  
 20445 000034F2 58                      	pop	ax
 20446 000034F3 EB81                    	jmp	do_io
 20447                                  
 20448                                  pop_done_read:
 20449 000034F5 1F                      	pop	ds
 20450                                  done_read:
 20451 000034F6 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20452                                  
 20453                                  	; 16/12/2022
 20454                                  
 20455                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20456                                  	;jmp	ENDRDDEV ; 04/05/2019
 20457                                  
 20458                                  	; 04/05/2019 - Retro DOS v4.0
 20459                                  ENDRDDEV:
 20460 000034FB 16                      	push	ss
 20461 000034FC 1F                      	pop	ds
 20462 000034FD EB1F                    	jmp	short endrddev1
 20463                                  
 20464                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20465                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20466                                  
 20467                                  TRANBUF:
 20468 000034FF AC                      	LODSB
 20469 00003500 AA                      	STOSB
 20470 00003501 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20471 00003503 7503                    	JNZ	short NORMCH
 20472 00003505 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20473                                  NORMCH:
 20474 00003508 3C0A                    	CMP	AL,c_LF ; 0Ah
 20475 0000350A E0F3                    	LOOPNZ	TRANBUF
 20476 0000350C 7507                    	JNZ	short ENDRDCON
 20477 0000350E 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20478 00003510 E89FE1                  	call	OUTT		; Transmit linefeed
 20479 00003513 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20480                                  ENDRDCON:
 20481                                  ;hkn; SS is DOSDATA
 20482 00003515 16                      	push	ss
 20483 00003516 1F                      	pop	ds
 20484 00003517 E80CFE                  	CALL	SWAPBACK
 20485 0000351A 8936[2200]              	MOV	[CONTPOS],SI
 20486                                  
 20487                                  	; 16/12/2022
 20488                                  ;ENDRDDEV:
 20489                                  ;;hkn; SS is DOSDATA
 20490                                  ;	push	ss
 20491                                  ;	pop	ds
 20492                                  endrddev1:	; 04/05/2019
 20493 0000351E 893E[B805]              	MOV	[NEXTADD],DI
 20494 00003522 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20495 00003524 C43E[9E05]              	LES	DI,[THISSFT]
 20496                                  	;and	byte [es:di+5],0BFh
 20497 00003528 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20498                                  				; Mark as no more data available
 20499                                  SETSFTC:
 20500                                  	; 31/07/2019
 20501                                  	;call	SETSFT
 20502                                  	;retn
 20503 0000352D E9B604                  	jmp	SETSFT
 20504                                  
 20505                                  ; 16/12/2022
 20506                                  %if 0
 20507                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20508                                  ENDRDDEV:
 20509                                  ;hkn; SS is DOSDATA
 20510                                  	push	ss
 20511                                  	pop	ds
 20512                                  	MOV	[NEXTADD],DI
 20513                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20514                                  	LES	DI,[THISSFT]
 20515                                  	;and	byte [es:di+5],0BFh
 20516                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20517                                  				; Mark as no more data available
 20518                                  SETSFTC:
 20519                                  	;call	SETSFT
 20520                                  	;retn
 20521                                  	jmp	SETSFT	
 20522                                  %endif
 20523                                  
 20524                                  READCON:
 20525 00003530 E8F9FD                  	CALL	SWAPCON
 20526 00003533 8B36[2200]              	MOV	SI,[CONTPOS]
 20527 00003537 09F6                    	OR	SI,SI
 20528 00003539 75C4                    	JNZ	short TRANBUF
 20529 0000353B 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20530 00003540 7406                    	JZ	short GETBUF
 20531 00003542 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20532                                  GETBUF:
 20533 00003548 51                      	PUSH	CX
 20534 00003549 06                      	PUSH	ES
 20535 0000354A 57                      	PUSH	DI
 20536                                  
 20537                                  ;hkn; CONBUF is in DOSDATA
 20538 0000354B BA[7B02]                	MOV	DX,CONBUF
 20539                                  
 20540 0000354E E8D4DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20541 00003551 5F                      	POP	DI
 20542 00003552 07                      	POP	ES
 20543 00003553 59                      	POP	CX
 20544                                  
 20545                                  ;hkn; CONBUF is in DOSDATA
 20546 00003554 BE[7D02]                	MOV	SI,CONBUF+2
 20547                                  
 20548 00003557 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20549 0000355A 75A3                    	JNZ	short TRANBUF
 20550 0000355C B01A                    	MOV	AL,1AH
 20551 0000355E AA                      	STOSB
 20552 0000355F 4F                      	DEC	DI
 20553 00003560 B00A                    	MOV	AL,c_LF
 20554 00003562 E84DE1                  	call	OUTT		; Send linefeed
 20555 00003565 31F6                    	XOR	SI,SI
 20556 00003567 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20557                                  
 20558                                  ; 24/07/2018 - Retro DOS v3.0
 20559                                  
 20560                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20561                                  ;---------------------------------------------------------------------------
 20562                                  ;
 20563                                  ; Procedure Name : DOS_WRITE
 20564                                  ;
 20565                                  ; Inputs:
 20566                                  ;	ThisSFT set to the SFT for the file being used
 20567                                  ;	[DMAADD] contains transfer address
 20568                                  ;	CX = No. of bytes to write
 20569                                  ; Function:
 20570                                  ;	Perform write operation
 20571                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20572                                  ;		to current sf_position
 20573                                  ; Outputs:
 20574                                  ;    Carry clear
 20575                                  ;	SFT Position and cluster pointers updated
 20576                                  ;	CX = No. of bytes written
 20577                                  ;	ES:DI point to SFT
 20578                                  ;    Carry set
 20579                                  ;	AX is error code
 20580                                  ;	CX = 0
 20581                                  ;	ES:DI point to SFT
 20582                                  ; DS preserved, all other registers destroyed
 20583                                  ;---------------------------------------------------------------------------
 20584                                  
 20585                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20586                                  ;hkn; point to DOSDATA.
 20587                                  
 20588                                  ; 04/05/2019 - Retro DOS v4.0
 20589                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20590                                  
 20591                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20592                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20593                                  
 20594                                  DOS_WRITE:
 20595 00003569 C43E[9E05]              	LES	DI,[THISSFT]
 20596                                  	;mov	al,[ES:DI+2]
 20597 0000356D 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20598                                  	;and	al,0Fh
 20599 00003571 240F                    	AND	AL,access_mask
 20600                                  	;cmp	al,0
 20601 00003573 3C00                    	CMP	AL,open_for_read
 20602 00003575 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20603                                  BadMode:
 20604 00003577 E9DA03                  	jmp	SET_ACC_ERR
 20605                                  
 20606                                  ; NOTE: The following check for writting to a Read Only File is performed
 20607                                  ;	    ONLY on FCBs!!!!
 20608                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20609                                  ;	    of a read only file which can then be written to.
 20610                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20611                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20612                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20613                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20614                                  ;	    to a read-only file.
 20615                                  
 20616                                  Check_FCB_RO:
 20617                                  	;;test	word [es:di+2],8000h
 20618                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20619                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20620                                  	
 20621                                  	;test	byte [es:di+3],80h
 20622 0000357A 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20623 0000357F 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20624                                  
 20625                                  	;test	byte [es:di+4],1
 20626 00003581 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20627 00003586 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20628                                  WRITE_NO_MODE:
 20629 00003588 E8AA02                  	call	SETUP
 20630 0000358B E81DDD                  	call	IsSFTNet
 20631 0000358E 7406                    	JZ	short LOCAL_WRITE
 20632                                  
 20633                                  ;IF NOT Installed
 20634                                  ;	transfer NET_WRITE
 20635                                  ;ELSE
 20636                                  	;mov	ax,1109h
 20637 00003590 B80911                  	MOV	AX,(MultNET<<8)|9
 20638 00003593 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20639                                  			; ES:DI -> SFT
 20640                                  			; SFT DPB field -> DPB of drive containing file
 20641                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20642                                  			; Return: CF set on error, CX = bytes written
 20643 00003595 C3                      	retn
 20644                                  ;ENDIF
 20645                                  
 20646                                  LOCAL_WRITE:
 20647                                  	;;test	word [es:di+5],80h
 20648                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20649                                  	;jnz	short WRTDEV
 20650                                  
 20651                                  	;test	byte [es:di+5],80h
 20652 00003596 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20653 0000359B 756E                    	jnz	short WRTDEV
 20654                                  
 20655                                  	;mov	byte [EXTERR_LOCUS],2
 20656 0000359D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20657 000035A2 E8B1DD                  	call	ECritDisk
 20658                                  
 20659 000035A5 E8F404                  	call	DISKWRITE
 20660                                  
 20661                                  	; 04/05/2019 - Retro DOS v4.0
 20662                                  
 20663                                  	; MSDOS 6.0
 20664                                  ; Extended Open
 20665 000035A8 7210                    	JC	short nocommit
 20666                                  	
 20667 000035AA C43E[9E05]              	LES	DI,[THISSFT]
 20668                                  	
 20669                                  	;;test	word [ES:DI+2],4000h
 20670                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20671                                  	;JZ	short nocommit
 20672                                  	
 20673                                  	;test	byte [ES:DI+3],40h
 20674 000035AE 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20675 000035B3 7405                    	JZ	short nocommit
 20676                                  	
 20677 000035B5 51                      	PUSH	CX
 20678 000035B6 E82EFB                  	call	DOS_COMMIT
 20679 000035B9 59                      	POP	CX
 20680                                  nocommit:
 20681                                  ; Extended Open
 20682                                  	;call	LCritDisk
 20683                                  	;retn
 20684                                  	; 18/12/2022
 20685 000035BA E9B4DD                  	jmp	LCritDisk
 20686                                  
 20687                                  DVWRTRAW:
 20688 000035BD 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20689 000035BF E8BE11                  	call	SETWRITE
 20690 000035C2 1E                      	PUSH	DS			; Save seg of transfer
 20691                                  
 20692                                  ;hkn; SS override
 20693 000035C3 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20694 000035C8 E80911                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20695                                  
 20696 000035CB 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20697 000035CD B487                    	MOV	AH,87H
 20698                                  
 20699                                  ;hkn; SS override
 20700 000035CF 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20701                                  
 20702                                  	; MSDOS 3.3
 20703                                  	;test	di,8000h
 20704                                  	;jz	short CWRTROK
 20705                                  
 20706                                  	; MSDOS 6.0
 20707 000035D4 09FF                    	or	di,di
 20708 000035D6 7920                    	jns	short CWRTROK
 20709                                  	
 20710                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20711 000035D8 E85E1D                  	call	CHARHARD
 20712                                  
 20713                                  	; 04/05/2019  - Retro DOS v4.0
 20714                                  
 20715                                  	; MSDOS 6.0
 20716 000035DB 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20717 000035E0 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20718 000035E2 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20719 000035E7 89DF                    	mov	di,bx			;				M065
 20720                                  	
 20721                                  	; MSDOS 3.3
 20722                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20723                                  
 20724                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20725 000035E9 08C0                    	OR	AL,AL
 20726 000035EB 740B                    	JZ	short CWRTROK 		; Ignore
 20727 000035ED 3C03                    	CMP	AL,3
 20728 000035EF 7403                    	JZ	short CWRFERR
 20729 000035F1 1F                      	POP	DS			; Recover saved seg of transfer
 20730 000035F2 EBC9                    	JMP	short DVWRTRAW		; Try again
 20731                                  CWRFERR:
 20732 000035F4 58                      	POP	AX			; Chuck saved seg of transfer
 20733 000035F5 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20734                                  CWRTROK:
 20735 000035F8 58                      	POP	AX			; Chuck saved seg of transfer
 20736 000035F9 1F                      	POP	DS
 20737 000035FA A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20738                                  ENDWRDEV:
 20739 000035FD C43E[9E05]              	LES	DI,[THISSFT]
 20740 00003601 89C1                    	MOV	CX,AX
 20741                                  	;call	ADDREC
 20742                                  	;retn
 20743                                  	; 16/12/2022
 20744                                  	; 10/06/2019
 20745 00003603 E90104                  	jmp	ADDREC
 20746                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20747                                  	;call	ADDREC
 20748                                  	;retn
 20749                                  	
 20750                                  WRTNUL:
 20751 00003606 89CA                    	MOV	DX,CX			; Entire transfer done
 20752                                  WRTCOOKJ:
 20753 00003608 E98D00                  	JMP	WRTCOOKDONE
 20754                                  WRTDEV:
 20755                                  	;mov	byte [EXTERR_LOCUS],4
 20756 0000360B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20757                                  	;or	byte [es:di+5],40h
 20758 00003610 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20759                                  					; Reset EOF for input
 20760                                  	;mov	bl,[es:di+5]
 20761 00003615 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20762 00003619 31C0                    	XOR	AX,AX
 20763 0000361B E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20764 0000361D 1E                      	PUSH	DS
 20765 0000361E 88D8                    	MOV	AL,BL
 20766 00003620 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20767 00003624 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20768 00003626 31D2                    	XOR	DX,DX			; Set starting point
 20769                                  	;test	al,20h
 20770 00003628 A820                    	test	AL,devid_device_raw	; Raw?
 20771                                  	;JZ	short TEST_DEV_CON
 20772                                  	;JMP	DVWRTRAW
 20773                                  	; 16/12/2022
 20774 0000362A 7591                    	jnz	short DVWRTRAW
 20775                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20776                                  	;JZ	short TEST_DEV_CON
 20777                                  	;JMP	short DVWRTRAW
 20778                                  
 20779                                  TEST_DEV_CON:
 20780                                  	;test	al,2
 20781 0000362C A802                    	test	AL,devid_device_con_out ; Console output device?
 20782 0000362E 756E                    	jnz	short WRITECON
 20783                                  	;test	al,4
 20784 00003630 A804                    	test	AL,devid_device_null
 20785 00003632 75D2                    	JNZ	short WRTNUL
 20786 00003634 89D0                    	MOV	AX,DX
 20787 00003636 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20788 00003639 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20789 0000363B 51                      	PUSH	CX
 20790 0000363C B90100                  	MOV	CX,1
 20791 0000363F E83E11                  	call	SETWRITE
 20792 00003642 59                      	POP	CX
 20793                                  
 20794                                  ;hkn; SS override
 20795 00003643 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20796                                  ;
 20797                                  ;SR; Removed X25 support from here
 20798                                  ;
 20799                                  	;lds	si,[si+7]
 20800 00003648 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20801                                  DVWRTLP:
 20802 0000364B E8CC1A                  	call	DSKSTATCHK
 20803 0000364E E88610                  	call	DEVIOCALL2
 20804 00003651 57                      	PUSH	DI
 20805 00003652 B487                    	MOV	AH,87H
 20806                                  
 20807                                  ;hkn; SS override
 20808 00003654 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20809                                  	
 20810                                  	; MSDOS 3.3
 20811                                  	;test	di,8000h
 20812                                  	;jz	short CWROK
 20813                                  
 20814                                  	; MSDOS 6.0
 20815 00003659 09FF                    	or	di,di
 20816 0000365B 7916                    	jns	short CWROK
 20817                                  	
 20818                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20819 0000365D E8D91C                  	call	CHARHARD
 20820 00003660 5F                      	POP	DI
 20821                                  
 20822                                  ;hkn; SS override
 20823 00003661 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20824 00003668 3C01                    	CMP	AL,1
 20825 0000366A 74DF                    	JZ	short DVWRTLP 	; Retry
 20826 0000366C 08C0                    	OR	AL,AL
 20827 0000366E 740C                    	JZ	short DVWRTIGN	; Ignore
 20828                                  	; 10/08/2018
 20829 00003670 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20830                                  CWROK:
 20831 00003673 5F                      	POP	DI
 20832                                  
 20833                                  ;hkn; SS override
 20834 00003674 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20835 0000367A 741C                    	JZ	short WRTCOOKDONE
 20836                                  DVWRTIGN:
 20837 0000367C 42                      	INC	DX
 20838                                  
 20839                                  ;hkn; SS override for CALLXAD
 20840 0000367D 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20841 00003682 47                      	INC	DI
 20842 00003683 1E                      	PUSH	DS
 20843 00003684 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20844 00003689 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20845 0000368C 1F                      	POP	DS
 20846 0000368D 7409                    	JZ	short WRTCOOKDONE
 20847                                  
 20848                                  ;hkn; SS override
 20849 0000368F 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20850 00003696 E2B3                    	LOOP	DVWRTLP
 20851                                  WRTCOOKDONE:
 20852 00003698 89D0                    	MOV	AX,DX
 20853 0000369A 1F                      	POP	DS
 20854 0000369B E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20855                                  
 20856                                  WRITECON:
 20857 0000369E 1E                      	PUSH	DS
 20858                                  
 20859                                  ;hkn; SS is DOSDATA
 20860 0000369F 16                      	push	ss
 20861 000036A0 1F                      	pop	ds
 20862 000036A1 E888FC                  	CALL	SWAPCON
 20863 000036A4 1F                      	POP	DS
 20864 000036A5 89DE                    	MOV	SI,BX
 20865 000036A7 51                      	PUSH	CX
 20866                                  WRCONLP:
 20867 000036A8 AC                      	LODSB
 20868 000036A9 3C1A                    	CMP	AL,1Ah		; ^Z?
 20869 000036AB 7405                    	JZ	short CONEOF
 20870 000036AD E802E0                  	call	OUTT
 20871 000036B0 E2F6                    	LOOP	WRCONLP
 20872                                  CONEOF:
 20873 000036B2 58                      	POP	AX			; Count
 20874 000036B3 29C8                    	SUB	AX,CX			; Amount actually written
 20875 000036B5 1F                      	POP	DS
 20876 000036B6 E86DFC                  	CALL	SWAPBACK
 20877 000036B9 E941FF                  	JMP	ENDWRDEV
 20878                                  
 20879                                  ;---------------------------------------------------------------------------
 20880                                  ;
 20881                                  ; Procedure Name : get_io_sft
 20882                                  ;
 20883                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20884                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20885                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20886                                  ;
 20887                                  ;---------------------------------------------------------------------------
 20888                                  
 20889                                  ; 04/05/2019 - Retro DOS v4.0
 20890                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20891                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20892                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20893                                  
 20894                                  GET_IO_SFT:
 20895                                  	;test	byte [SS:CONSWAP],0FFh
 20896 000036BC 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20897 000036C2 7512                    	JNZ	short GetRedir
 20898                                  GetNormal:
 20899 000036C4 16                      	push	ss
 20900 000036C5 1F                      	pop	ds
 20901 000036C6 06                      	PUSH	ES
 20902 000036C7 57                      	PUSH	DI
 20903 000036C8 E81530                  	call	SFFromHandle
 20904 000036CB 7206                    	JC	short RET44P
 20905 000036CD 8CC6                    	MOV	SI,ES
 20906 000036CF 8EDE                    	MOV	DS,SI
 20907 000036D1 89FE                    	MOV	SI,DI
 20908                                  RET44P:
 20909 000036D3 5F                      	POP	DI
 20910 000036D4 07                      	POP	ES
 20911 000036D5 C3                      	retn
 20912                                  GetRedir:
 20913 000036D6 83FB01                  	CMP	BX,1
 20914 000036D9 77E9                    	JA	short GetNormal
 20915 000036DB 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20916 000036E0 F8                      	CLC
 20917                                  get_io_sft_retn:
 20918 000036E1 C3                      	retn
 20919                                  
 20920                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20921                                  ;---------------------------------------------------------------------------
 20922                                  ;
 20923                                  ; Procedure Name : DIRREAD
 20924                                  ;
 20925                                  ; Inputs:
 20926                                  ;	AX = Directory block number (relative to first block of directory)
 20927                                  ;	ES:BP = Base of drive parameters
 20928                                  ;	[DIRSEC] = First sector of first cluster of directory
 20929                                  ;	[CLUSNUM] = Next cluster
 20930                                  ;	[CLUSFAC] = Sectors/Cluster
 20931                                  ; Function:
 20932                                  ;	Read the directory block into [CURBUF].
 20933                                  ; Outputs:
 20934                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20935                                  ;	[SECCLUSPOS] Set
 20936                                  ;	ES:BP unchanged
 20937                                  ;	[CURBUF] Points to Buffer with dir sector
 20938                                  ;	Carry set if error (user said FAIL to I 24)
 20939                                  ; DS preserved, all other registers destroyed.
 20940                                  ;---------------------------------------------------------------------------
 20941                                  
 20942                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20943                                  
 20944                                  DIRREAD:
 20945                                  
 20946                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20947                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20948                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20949                                  ; by DIRStart = 0.
 20950                                  
 20951 000036E2 31D2                    	XOR	DX,DX
 20952                                  	;CMP	word [DIRSTART],0
 20953                                  	; 21/09/2023
 20954 000036E4 3916[C205]              	cmp	[DIRSTART],dx ; 0
 20955 000036E8 7503                    	jnz	short SubDir
 20956 000036EA 92                      	XCHG	AX,DX
 20957 000036EB EB0C                    	JMP	short DoRead
 20958                                  
 20959                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20960                                  
 20961                                  SubDir:
 20962 000036ED 88C2                    	MOV	DL,AL
 20963                                  	;and	dl,[es:bp+4]
 20964 000036EF 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20965                                  
 20966                                  ;	(DX) = sector-in-cluster
 20967                                  
 20968                                  	;mov	cl,[es:bp+5]
 20969 000036F3 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20970 000036F7 D3E8                    	SHR	AX,CL
 20971                                  
 20972                                  ;	(DX) = position in cluster
 20973                                  ;	(AX) = number of clusters to skip
 20974                                  
 20975                                  DoRead:
 20976 000036F9 8816[7305]              	MOV	[SECCLUSPOS],DL
 20977 000036FD 89C1                    	MOV	CX,AX
 20978 000036FF 88D4                    	MOV	AH,DL
 20979                                  
 20980                                  ;	(CX) = number of clusters to skip.
 20981                                  ;	(AH) = remainder
 20982                                  
 20983                                  	; 04/05/2019 - Retro DOS v4.0
 20984                                  
 20985                                  	; MSDOS 6.0
 20986                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20987                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 20988                                  	;MOV	DX,[DIRSEC]
 20989                                  	;ADD	DL,AH
 20990                                  	;ADC	DH,0
 20991                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 20992                                  	; 21/09/2023
 20993 00003701 31DB                    	xor	bx,bx ; 0
 20994 00003703 8B16[BE05]              	mov	dx,[DIRSEC]
 20995 00003707 00E2                    	add	dl,ah
 20996 00003709 10DE                    	adc	dh,bl ; 0
 20997 0000370B 131E[C005]              	adc	bx,[DIRSEC+2]
 20998 0000370F 891E[0706]              	mov	[HIGH_SECTOR],bx
 20999                                  
 21000 00003713 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21001 00003717 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21002 0000371B E319                    	JCXZ	FIRSTCLUSTER
 21003                                  SKPCLLP:
 21004 0000371D E8841E                  	call	UNPACK
 21005 00003720 72BF                    	jc	short get_io_sft_retn
 21006 00003722 87DF                    	XCHG	BX,DI
 21007 00003724 E8661E                  	call	IsEOF			; test for eof based on fat size
 21008 00003727 7302                    	JAE	short HAVESKIPPED
 21009 00003729 E2F2                    	LOOP	SKPCLLP
 21010                                  HAVESKIPPED:
 21011 0000372B 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21012 0000372F 89FA                    	MOV	DX,DI
 21013 00003731 88E3                    	MOV	BL,AH
 21014 00003733 E81717                  	call	FIGREC
 21015                                  
 21016                                  	;entry	FIRSTCLUSTER
 21017                                  
 21018                                  FIRSTCLUSTER:
 21019                                  	; 22/09/2023
 21020                                  	;;mov	byte [ALLOWED],18h
 21021                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21022                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21023                                  	;call	GETBUFFR
 21024 00003736 E87D22                  	call	GETBUFFER ; *	; pre-read
 21025 00003739 72A6                    	jc	short get_io_sft_retn
 21026                                  
 21027                                  	;entry	SET_BUF_AS_DIR
 21028                                  
 21029                                  SET_BUF_AS_DIR:
 21030                                  
 21031                                  ;	Set the type of CURBUF to be a directory sector.
 21032                                  ;	Only flags are modified.
 21033                                  
 21034 0000373B 1E                      	PUSH	DS
 21035 0000373C 56                      	PUSH	SI
 21036 0000373D C536[E205]              	LDS	SI,[CURBUF]
 21037                                  	;or	byte [si+5],4
 21038 00003741 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21039 00003745 5E                      	POP	SI
 21040 00003746 1F                      	POP	DS
 21041                                  dirread_retn:
 21042 00003747 C3                      	retn
 21043                                  
 21044                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21045                                  ;----------------------------------------------------------------------------
 21046                                  ;
 21047                                  ; Procedure Name : FATSECRD
 21048                                  ; Inputs:
 21049                                  ;	Same as DREAD
 21050                                  ;	DS:BX = Transfer address
 21051                                  ;	CX = Number of sectors
 21052                                  ;	DX = Absolute record number
 21053                                  ;	ES:BP = Base of drive parameters
 21054                                  ; Function:
 21055                                  ;	Calls BIOS to perform FAT read.
 21056                                  ; Outputs:
 21057                                  ;	Same as DREAD
 21058                                  ;---------------------------------------------------------------------------
 21059                                  
 21060                                  	; 04/05/2019 - Retro DOS v4.0
 21061                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21062                                  
 21063                                  FATSECRD:
 21064                                  ;hkn; SS override
 21065                                  	;mov	byte [ss:ALLOWED],18h
 21066 00003748 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21067 0000374E 89CF                    	MOV	DI,CX
 21068                                  	;mov	cl,[es:bp+8]
 21069 00003750 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21070                                  	; MSDOS 3.3
 21071                                  	;;mov	al,[es:bp+0Fh]
 21072                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21073                                  	;XOR	AH,AH
 21074                                  	; MSDOS 6.0
 21075                                  	;mov	ax,[es:bp+0Fh]
 21076 00003754 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21077 00003758 30ED                    	XOR	CH,CH	
 21078 0000375A 52                      	PUSH	DX
 21079                                  NXTFAT:
 21080                                  	; MSDOS 6.0
 21081                                  ;hkn; SS override
 21082 0000375B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21083 00003762 51                      	PUSH	CX			;32mb
 21084 00003763 50                      	PUSH	AX
 21085 00003764 89F9                    	MOV	CX,DI
 21086 00003766 E85B00                  	call	DSKREAD
 21087 00003769 58                      	POP	AX
 21088 0000376A 59                      	POP	CX
 21089 0000376B 7420                    	JZ	short RET41P		; Carry clear
 21090 0000376D 01C2                    	ADD	DX,AX
 21091 0000376F E2EA                    	LOOP	NXTFAT
 21092 00003771 5A                      	POP	DX
 21093 00003772 89F9                    	MOV	CX,DI
 21094                                  
 21095                                  ; NOTE FALL THROUGH
 21096                                  
 21097                                  ;Break	<DREAD -- DO A DISK READ>
 21098                                  ;---------------------------------------------------------------------------
 21099                                  ;
 21100                                  ; Procedure Name : DREAD
 21101                                  ;
 21102                                  ; Inputs:
 21103                                  ;	DS:BX = Transfer address
 21104                                  ;	CX = Number of sectors
 21105                                  ;	DX = Absolute record number	      (LOW)
 21106                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21107                                  ;	ES:BP = Base of drive parameters
 21108                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21109                                  ; Function:
 21110                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21111                                  ;	errors, will call HARDERRRW for further action.
 21112                                  ; Outputs:
 21113                                  ;	Carry set if error (currently user FAILED to INT 24)
 21114                                  ; DS,ES:BP preserved. All other registers destroyed.
 21115                                  ;---------------------------------------------------------------------------
 21116                                  
 21117                                  	;entry	DREAD
 21118                                  DREAD:
 21119 00003774 E84D00                  	call	DSKREAD
 21120 00003777 74CE                    	jz	short dirread_retn	; Carry clear
 21121                                  ;hkn; SS override
 21122 00003779 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21123 0000377F E89A00                  	call	HARDERRRW
 21124 00003782 3C01                    	CMP	AL,1			; Check for retry
 21125 00003784 74EE                    	JZ	short DREAD
 21126 00003786 3C03                    	CMP	AL,3			; Check for FAIL
 21127 00003788 F8                      	CLC
 21128 00003789 7501                    	JNZ	short NO_CAR		; Ignore
 21129 0000378B F9                      	STC
 21130                                  NO_CAR:
 21131 0000378C C3                      	retn
 21132                                  RET41P: 
 21133 0000378D 5A                      	POP	DX
 21134 0000378E C3                      	retn
 21135                                  
 21136                                  ; 24/07/2018 - Retro DOS v3.0
 21137                                  
 21138                                  ;Break	<CHECK_WRITE_LOCK>
 21139                                  ;---------------------------------------------------------------------------
 21140                                  ;
 21141                                  ; Procedure Name : CHECK_WRITE_LOCK
 21142                                  ;
 21143                                  ; Inputs:
 21144                                  ;	output of SETUP
 21145                                  ;	ES:DI -> SFT
 21146                                  ; Function:
 21147                                  ;	check write lock
 21148                                  ; Outputs:
 21149                                  ;	Carry set if error
 21150                                  ;	Carry clear if ok
 21151                                  ;
 21152                                  ;----------------------------------------------------------------------------
 21153                                  
 21154                                  	; 04/05/2019 - Retro DOS v4.0
 21155                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21156                                  
 21157                                  CHECK_WRITE_LOCK:
 21158                                  	; MSDOS 6.0
 21159                                  	;test	byte [es:di+4],8
 21160 0000378F 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21161                                  	;JZ	short write_cont			     ;no
 21162                                  	;;call	SET_ACC_ERR_DS
 21163                                  	;;retn
 21164                                  	;;jnz	SET_ACC_ERR_DS
 21165                                  	; 19/08/2018
 21166                                  	;jz	short write_cont
 21167                                  	;jmp	SET_ACC_ERR_DS
 21168                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21169 00003794 7403                    	JZ	short write_cont
 21170                                  	;call	SET_ACC_ERR_DS
 21171                                  	;retn
 21172                                  	; 16/12/2022
 21173 00003796 E9B901                  	jmp	SET_ACC_ERR_DS
 21174                                  
 21175                                  write_cont:				;
 21176 00003799 51                      	PUSH	CX			;save reg
 21177 0000379A 09C9                    	OR	CX,CX			;
 21178 0000379C 7501                    	JNZ	short Not_Truncate	;
 21179 0000379E 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21180                                  Not_Truncate:				;
 21181 0000379F B080                    	MOV	AL,80H			;check write access
 21182 000037A1 E8C53B                  	call	LOCK_CHECK		;check lock
 21183 000037A4 59                      	POP	CX			;restore reg
 21184 000037A5 7305                    	JNC	short WRITE_OK		;lock ok
 21185 000037A7 E85F01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21186 000037AA 73ED                    	JNC	short write_cont	;retry
 21187                                  WRITE_OK:				;
 21188 000037AC C3                      	retn				;
 21189                                  
 21190                                  ;Break	<CHECK_READ_LOCK>
 21191                                  ;---------------------------------------------------------------------------
 21192                                  ;
 21193                                  ; Procedure Name : CHECK_READ_LOC
 21194                                  ;
 21195                                  ; Inputs:
 21196                                  ;	ES:DI -> SFT
 21197                                  ;	output of SETUP
 21198                                  ; Function:
 21199                                  ;	check read lock
 21200                                  ; Outputs:
 21201                                  ;	Carry set if error
 21202                                  ;	Carry clear if ok
 21203                                  ;----------------------------------------------------------------------------
 21204                                  
 21205                                  CHECK_READ_LOCK:
 21206                                  	; MSDOS 6.0
 21207                                  	;test	byte [es:di+4],8
 21208 000037AD 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21209                                  	;JZ	short do_retry			   	     ; no
 21210                                  	;;call	SET_ACC_ERR
 21211                                  	;;retn
 21212                                  	;;jnz	SET_ACC_ERR
 21213                                  	; 16/12/2022
 21214                                  	; 28/07/2019
 21215 000037B2 7403                    	jz	short do_retry
 21216 000037B4 E99D01                  	jmp	SET_ACC_ERR
 21217                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21218                                  	;JZ	short do_retry
 21219                                  	;call	SET_ACC_ERR
 21220                                  	;retn
 21221                                  do_retry:				;
 21222 000037B7 30C0                    	xor	al,al			;check read access
 21223 000037B9 E8AD3B                  	call	LOCK_CHECK		;check lock
 21224 000037BC 7305                    	JNC	short READLOCK_OK 	;lock ok
 21225 000037BE E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21226 000037C1 73F4                    	JNC	short do_retry		;retry
 21227                                  READLOCK_OK:				;
 21228 000037C3 C3                      	retn				;
 21229                                  
 21230                                  ;============================================================================
 21231                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21232                                  ;============================================================================
 21233                                  ; 24/07/2018 - Retro DOS v3.0
 21234                                  ; 04/05/2019 - Retro DOS v4.0
 21235                                  
 21236                                  ;	TITLE	DISK2 - Disk utility routines
 21237                                  ;	NAME	Disk2
 21238                                  
 21239                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21240                                  ;
 21241                                  ;	DskRead
 21242                                  ;	DWRITE
 21243                                  ;	DSKWRITE
 21244                                  ;	HarderrRW
 21245                                  ;	SETUP
 21246                                  ;	BREAKDOWN
 21247                                  ;	READ_LOCK_VIOLATION
 21248                                  ;	WRITE_LOCK_VIOLATION
 21249                                  ;	DISKREAD
 21250                                  ;	SET_ACC_ERR_DS
 21251                                  ;	SET_ACC_ERR
 21252                                  ;	SETSFT
 21253                                  ;	SETCLUS
 21254                                  ;	AddRec
 21255                                  ;
 21256                                  ;	Revision history:
 21257                                  ;
 21258                                  ;		AN000 version 4.00 Jan. 1988
 21259                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21260                                  
 21261                                  ; 04/05/2019 - Retro DOS v4.0
 21262                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21263                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21264                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21265                                  
 21266                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21267                                  ;---------------------------------------------------------------------------
 21268                                  ;
 21269                                  ; Procedure Name : DSKREAD
 21270                                  ;
 21271                                  ; Inputs:
 21272                                  ;	DS:BX = Transfer addr
 21273                                  ;	CX = Number of sectors
 21274                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21275                                  ;	DX = Absolute record number	       (LOW)
 21276                                  ;	ES:BP = Base of drive parameters
 21277                                  ; Function:
 21278                                  ;	Call BIOS to perform disk read
 21279                                  ; Outputs:
 21280                                  ;	DI = CX on entry
 21281                                  ;	CX = Number of sectors unsuccessfully transfered
 21282                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21283                                  ;	Zero set if OK (from BIOS) (carry clear)
 21284                                  ;	Zero clear if error (carry clear)
 21285                                  ; SI Destroyed, others preserved
 21286                                  ;---------------------------------------------------------------------------
 21287                                  
 21288                                  DSKREAD:
 21289 000037C4 51                      	PUSH	CX
 21290                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21291 000037C5 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21292                                  	;mov	al,[es:bp+1]
 21293 000037C9 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21294 000037CD 53                      	PUSH	BX
 21295 000037CE 06                      	PUSH	ES
 21296 000037CF E87B0F                  	call	SETREAD
 21297 000037D2 EB27                    	JMP	short DODSKOP
 21298                                  
 21299                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21300                                  ;--------------------------------------------------------------------------
 21301                                  ;
 21302                                  ; Procedure Name : DWRITE
 21303                                  ;
 21304                                  ; Inputs:
 21305                                  ;	DS:BX = Transfer address
 21306                                  ;	CX = Number of sectors
 21307                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21308                                  ;	DX = Absolute record number	       (LOW)
 21309                                  ;	ES:BP = Base of drive parameters
 21310                                  ;	[ALLOWED] must be set in case HARDERR called
 21311                                  ; Function:
 21312                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21313                                  ;	errors, will call HARDERRRW for further action.
 21314                                  ; Output:
 21315                                  ;	Carry set if error (currently, user FAILed to I 24)
 21316                                  ; BP preserved. All other registers destroyed.
 21317                                  ;----------------------------------------------------------------------------
 21318                                  
 21319                                  	;entry	DWRITE
 21320                                  DWRITE:
 21321 000037D4 E81600                  	CALL	DSKWRITE
 21322 000037D7 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21323                                  
 21324                                  ;hkn; SS override
 21325 000037D9 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21326 000037DF E83A00                  	call	HARDERRRW
 21327 000037E2 3C01                    	CMP	AL,1		; Check for retry
 21328 000037E4 74EE                    	JZ	short DWRITE
 21329 000037E6 3C03                    	CMP	AL,3		; Check for FAIL
 21330 000037E8 F8                      	CLC
 21331 000037E9 7501                    	JNZ	short NO_CAR2 	; Ignore
 21332 000037EB F9                      	STC
 21333                                  NO_CAR2:
 21334                                  dw_ret_label:
 21335 000037EC C3                      	retn
 21336                                  
 21337                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21338                                  ;---------------------------------------------------------------------------
 21339                                  ;
 21340                                  ; Procedure Name : DSKWRITE
 21341                                  ;
 21342                                  ; Inputs:
 21343                                  ;	DS:BX = Transfer addr
 21344                                  ;	CX = Number of sectors
 21345                                  ;	DX = Absolute record number	       (LOW)
 21346                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21347                                  ;	ES:BP = Base of drive parameters
 21348                                  ; Function:
 21349                                  ;	Call BIOS to perform disk read
 21350                                  ; Outputs:
 21351                                  ;	DI = CX on entry
 21352                                  ;	CX = Number of sectors unsuccessfully transfered
 21353                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21354                                  ;	Zero set if OK (from BIOS) (carry clear)
 21355                                  ;	Zero clear if error (carry clear)
 21356                                  ; SI Destroyed, others preserved
 21357                                  ;
 21358                                  ;----------------------------------------------------------------------------
 21359                                  
 21360                                  	;entry	DSKWRITE
 21361                                  DSKWRITE:
 21362 000037ED 51                      	PUSH	CX
 21363                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21364 000037EE 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21365                                  	;mov	al,[es:bp+1]
 21366 000037F2 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21367 000037F6 53                      	PUSH	BX
 21368 000037F7 06                      	PUSH	ES
 21369 000037F8 E8850F                  	call	SETWRITE
 21370                                  DODSKOP:
 21371 000037FB 8CD9                    	MOV	CX,DS		; Save DS
 21372 000037FD 1F                      	POP	DS		; DS:BP points to DPB
 21373 000037FE 1E                      	PUSH	DS
 21374                                  
 21375                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21376 000037FF 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21377 00003803 E8D10E                  	call	DEVIOCALL2
 21378                                  
 21379 00003806 8ED9                    	MOV	DS,CX		; Restore DS
 21380 00003808 07                      	POP	ES		; Restore ES
 21381 00003809 5B                      	POP	BX
 21382                                  
 21383                                  ;hkn; SS override
 21384 0000380A 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21385 0000380F 5F                      	POP	DI
 21386 00003810 29F9                    	SUB	CX,DI
 21387 00003812 F7D9                    	NEG	CX		; Number of sectors not transferred
 21388                                  
 21389                                  ;hkn; SS override
 21390 00003814 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21391                                  	;test	ax,8000h
 21392                                  	; 17/12/2022
 21393                                  	;test	ah,80h
 21394 00003818 F6C480                  	test	ah,(STERR>>8)
 21395                                  	;test	AX,STERR
 21396 0000381B C3                      	retn
 21397                                  
 21398                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21399                                  ;---------------------------------------------------------------------------
 21400                                  ;
 21401                                  ; Procedure Name : HardErrRW
 21402                                  ;
 21403                                  ; Inputs:
 21404                                  ;	AX is error code from read or write
 21405                                  ;	Other registers set as per HARDERR
 21406                                  ; Function:
 21407                                  ;	Checks the error code for special extended
 21408                                  ;	errors and maps them if needed. Then invokes
 21409                                  ;	Harderr
 21410                                  ; Outputs:
 21411                                  ;	Of HARDERR
 21412                                  ; AX may be modified prior to call to HARDERR.
 21413                                  ; No other registers altered.
 21414                                  ;
 21415                                  ;---------------------------------------------------------------------------
 21416                                  
 21417                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21418                                  HARDERRRW:
 21419                                  	;cmp	al,0Fh
 21420 0000381C 3C0F                    	CMP	AL,error_I24_wrong_disk
 21421 0000381E 7512                    	JNZ	short DO_ERR				; Nothing to do
 21422                                  
 21423                                  	; MSDOS 3.3
 21424                                  	;push	ds
 21425                                  	;push	si
 21426                                  	;lds	si,[ss:CALLVIDRW]
 21427                                  	;mov	[ss:EXTERRPT+2], ds
 21428                                  	;mov	[ss:EXTERRPT], si
 21429                                  	;pop	si
 21430                                  	;pop	ds
 21431                                  
 21432                                  	; MSDOS 6.0
 21433 00003820 50                      	push	ax
 21434 00003821 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21435 00003825 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21436 00003829 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21437 0000382D 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21438 00003831 58                      	pop	ax
 21439                                  DO_ERR:
 21440                                  	;;call	HARDERR
 21441                                  	;;retn
 21442                                  	; 16/12/2022
 21443                                  	; 10/06/2019
 21444 00003832 E9351B                  	jmp	HARDERR	
 21445                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21446                                  	;call	HARDERR
 21447                                  	;retn
 21448                                  
 21449                                  ; 24/07/2018 - Retro DOS v3.0
 21450                                  
 21451                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21452                                  ;----------------------------------------------------------------------------
 21453                                  ;
 21454                                  ; Procedure Name : SETUP
 21455                                  ;
 21456                                  ; Inputs:
 21457                                  ;	ES:DI point to SFT (value also in THISSFT)
 21458                                  ;	DMAAdd contains transfer address
 21459                                  ;	CX = Byte count
 21460                                  ;	DS = DOSDATA
 21461                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21462                                  ;		2nd of caller of caller.
 21463                                  ; Outputs:
 21464                                  ;	    CX = byte count
 21465                                  ;	    [THISDPB] = Base of drive parameters if file
 21466                                  ;		      = Pointer to device header if device or NET
 21467                                  ;	    ES:DI Points to SFT
 21468                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21469                                  ;	    [TRANS] = 0 (No transfers yet)
 21470                                  ;	    BytPos = Byte position in file
 21471                                  ;
 21472                                  ;	The following fields are relevant to local files (not devices) only:
 21473                                  ;
 21474                                  ;	    SecPos = Position of first sector (local files only)
 21475                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21476                                  ;	    [CLUSNUM] = First cluster (local files only)
 21477                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21478                                  ;	    [THISDRV] = Physical unit number (local files only)
 21479                                  ;
 21480                                  ;      RETURNS ONE LEVEL UP WITH:
 21481                                  ;	   CX = 0
 21482                                  ;	   CARRY = Clear
 21483                                  ;	IF AN ERROR IS DETECTED
 21484                                  ; All other registers destroyed
 21485                                  ;----------------------------------------------------------------------------
 21486                                  
 21487                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21488                                  
 21489                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21490                                  
 21491                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21492                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21493                                  
 21494                                  SETUP:
 21495                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21496                                  
 21497                                  	;lds 	si,[es:di+7]
 21498 00003835 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21499                                  
 21500                                  ;hkn; SS override
 21501 00003839 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21502                                  
 21503                                  ;hkn; SS is DOSDATA
 21504 0000383E 16                      	push	ss
 21505 0000383F 1F                      	pop	ds
 21506                                  
 21507 00003840 8936[8A05]              	MOV	[THISDPB],SI
 21508                                  
 21509 00003844 8B1E[2C03]              	MOV	BX,[DMAADD]
 21510 00003848 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21511 0000384C C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21512                                  	;mov	ax,[es:di+15h]
 21513 00003851 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21514                                  	;mov	dx,[es:di+17h]
 21515 00003855 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21516 00003859 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21517 0000385D A3[CE05]                	MOV	[BYTPOS],AX
 21518                                  	;test	word [es:di+5],8080h
 21519 00003860 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21520 00003866 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21521 00003868 06                      	PUSH	ES
 21522 00003869 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21523                                  
 21524                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21525                                  	;;mov	bl,[es:bp+0]
 21526                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21527                                  	; 05/12/2022
 21528 0000386D 268A5E00                	mov	bl,[es:bp]
 21529                                  	
 21530 00003871 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21531                                  	;mov	bx,[es:bp+2]
 21532 00003875 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21533                                  
 21534                                  	;; MSDOS 3.3
 21535                                  	;cmp	dx,bx
 21536                                  	;jnb	short EOFERR
 21537                                  	;div	bx
 21538                                  	;mov	[SECPOS],ax
 21539                                  	;mov	[BYTSECPOS],dx
 21540                                  	;mov	dx,ax
 21541                                  	;;and	al,[es:bp+4]
 21542                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21543                                  	;mov	[SECCLUSPOS],al
 21544                                  	;mov	ax,cx
 21545                                  	;;mov	cl,[es:bp+5]
 21546                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21547                                  	;shr	dx,cl
 21548                                  	;mov	[CLUSNUM],dx
 21549                                  	;pop	es
 21550                                  	;mov	cx,ax
 21551                                  
 21552                                  	; 04/05/2019 - Retro DOS v4.0
 21553                                  
 21554                                  	; MSDOS 6.0
 21555                                  ;M039: Optimized this section.
 21556 00003879 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21557 0000387A E83405                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21558 0000387D 8916[CC05]              	MOV	[BYTSECPOS],DX
 21559 00003881 A3[C405]                	MOV	[SECPOS],AX
 21560 00003884 890E[C605]              	MOV	[SECPOS+2],CX
 21561 00003888 89CA                    	MOV	DX,CX
 21562                                  
 21563 0000388A 89C3                    	MOV	BX,AX
 21564                                  	;and	bl,[es:bp+4]
 21565 0000388C 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21566 00003890 881E[7305]              	MOV	[SECCLUSPOS],BL
 21567                                  
 21568 00003894 E84105                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21569 00003897 59                      	POP	CX			;CX = byte count.
 21570 00003898 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21571                                  	;cmp	ax,[es:bp+0Dh]
 21572 0000389A 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21573 0000389E 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21574                                  
 21575 000038A0 A3[BC05]                	MOV	[CLUSNUM],AX
 21576 000038A3 07                      	POP	ES			; ES:DI point to SFT
 21577                                  ;M039
 21578                                  
 21579                                  NOSETSTUFF:
 21580 000038A4 89C8                    	MOV	AX,CX		; AX = Byte count.
 21581 000038A6 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21582 000038AA 730C                    	JNC	short setup_OK	; Must be less than 64
 21583 000038AC A1[2C03]                	MOV	AX,[DMAADD]
 21584 000038AF F7D8                    	NEG	AX		; Amount of room left in segment (know
 21585                                  				;    less than 64K since max value of CX
 21586                                  				;    is FFFF).
 21587 000038B1 7501                    	JNZ	short NoDec
 21588 000038B3 48                      	DEC	AX
 21589                                  NoDec:
 21590 000038B4 89C1                    	MOV	CX,AX		; Can do this much
 21591 000038B6 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21592                                  setup_OK:
 21593 000038B8 C3                      	retn
 21594                                  
 21595                                  EOFERR:
 21596 000038B9 07                      	POP	ES		; ES:DI point to SFT
 21597 000038BA 31C9                    	XOR	CX,CX		; No bytes read
 21598                                  ;;;;;;;;;;; 7/18/86
 21599                                  	; MSDOS 3.3
 21600                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21601                                  ;;;;;;;;;;;
 21602                                  NOROOM:
 21603 000038BC 5B                      	POP	BX		; Kill return address
 21604 000038BD F8                      	CLC
 21605 000038BE C3                      	retn			; RETURN TO CALLER OF CALLER
 21606                                  
 21607                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21608                                  ;---------------------------------------------------------------------------
 21609                                  ;
 21610                                  ; Procedure Name : BREAKDOWN
 21611                                  ;
 21612                                  ; Inputs:
 21613                                  ;	CX = Length of disk transfer in bytes
 21614                                  ;	ES:BP = Base of drive parameters
 21615                                  ;	[BYTSECPOS] = Byte position within first sector
 21616                                  ;	DS = DOSDATA
 21617                                  ; Outputs:
 21618                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21619                                  ;	[SECCNT] = No. of whole sectors to transfer
 21620                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21621                                  ; AX, BX, DX destroyed. No other registers affected.
 21622                                  ;---------------------------------------------------------------------------
 21623                                  
 21624                                  BREAKDOWN:
 21625 000038BF A1[CC05]                	MOV	AX,[BYTSECPOS]
 21626 000038C2 89CB                    	MOV	BX,CX
 21627 000038C4 09C0                    	OR	AX,AX
 21628 000038C6 740E                    	JZ	short SAVFIR	; Partial first sector?
 21629                                  	;sub	ax,[es:bp+2]
 21630 000038C8 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21631 000038CC F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21632 000038CE 29C3                    	SUB	BX,AX		; Subtract from total length
 21633 000038D0 7304                    	JAE	short SAVFIR
 21634 000038D2 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21635 000038D4 31DB                    	XOR	BX,BX		; And no bytes are left
 21636                                  SAVFIR:
 21637 000038D6 A3[D205]                	MOV	[BYTCNT1],AX
 21638 000038D9 89D8                    	MOV	AX,BX
 21639 000038DB 31D2                    	XOR	DX,DX
 21640                                  	;div	word [ES:BP+2]
 21641 000038DD 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21642 000038E1 A3[D605]                	MOV	[SECCNT],AX
 21643 000038E4 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21644                                  	; MSDOS 3.3
 21645                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21646                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21647                                  	;CMP	AX,1
 21648                                  	;retnz
 21649                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21650                                  	;MOV	[BYTCNT2],AX
 21651                                  	;MOV	[SECCNT],DX	; DX = 0
 21652                                  _RET45:
 21653 000038E8 C3                      	retn
 21654                                  
 21655                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21656                                  
 21657                                  ;----------------------------------------------------------------------------
 21658                                  ;
 21659                                  ; Procedure Name : READ_LOCK_VIOLATION
 21660                                  ;
 21661                                  ; ES:DI points to SFT. This entry used by NET_READ
 21662                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21663                                  ; Else do retrys.
 21664                                  ; ES:DI,DS,CX preserved
 21665                                  ;
 21666                                  ;----------------------------------------------------------------------------
 21667                                  
 21668                                  READ_LOCK_VIOLATION:
 21669 000038E9 C606[7505]00            	MOV	byte [READOP],0
 21670                                  ERR_ON_CHECK:
 21671                                  	;;test	word [es:di+2],8000h
 21672                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21673                                  	;JNZ	short HARD_ERR
 21674                                  
 21675                                  	; 04/05/2019
 21676                                  	;test	byte [es:di+3],80h
 21677 000038EE 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21678 000038F3 7508                    	JNZ	short HARD_ERR
 21679                                  
 21680                                  	;PUSH	CX
 21681                                  	;;mov	cl,[es:di+2]
 21682                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21683                                  	;;and	cl,0F0h
 21684                                  	;AND	CL,SHARING_MASK
 21685                                  	;;cmp	cl,0
 21686                                  	;CMP	CL,SHARING_COMPAT
 21687                                  	;POP	CX
 21688                                  	;JNE	short NO_HARD_ERR
 21689                                  	; 21/09/2023
 21690 000038F5 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 21691 000038F9 24F0                    	and	al,SHARING_MASK
 21692                                  	;cmp	al,SHARING_COMPAT
 21693                                  	;jne	short NO_HARD_ERR
 21694 000038FB 7505                    	jnz	short NO_HARD_ERR
 21695                                  HARD_ERR:
 21696 000038FD E87F3A                  	call	LOCK_VIOLATION
 21697 00003900 73E6                    	jnc	short _RET45		; User wants Retrys
 21698                                  NO_HARD_ERR:
 21699 00003902 31C9                    	XOR	CX,CX			;No bytes transferred
 21700                                  	;mov	ax,21h
 21701 00003904 B82100                  	MOV	AX,error_lock_violation
 21702 00003907 F9                      	STC
 21703 00003908 C3                      	retn
 21704                                  
 21705                                  ;----------------------------------------------------------------------------
 21706                                  ;
 21707                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21708                                  ;
 21709                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21710                                  ; This entry used by NET_WRITE
 21711                                  ;
 21712                                  ;----------------------------------------------------------------------------
 21713                                  
 21714                                  WRITE_LOCK_VIOLATION:
 21715 00003909 C606[7505]01            	MOV	byte [READOP],1
 21716 0000390E EBDE                    	JMP	short ERR_ON_CHECK
 21717                                  
 21718                                  ; 04/05/2019 - Retro DOS v4.0
 21719                                  
 21720                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21721                                  
 21722                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21723                                  ;----------------------------------------------------------------------------
 21724                                  ;
 21725                                  ; Procedure Name : DISKREAD
 21726                                  ;
 21727                                  ; Inputs:
 21728                                  ;	Outputs of SETUP
 21729                                  ; Function:
 21730                                  ;	Perform disk read
 21731                                  ; Outputs:
 21732                                  ;    Carry clear
 21733                                  ;	CX = No. of bytes read
 21734                                  ;	ES:DI point to SFT
 21735                                  ;	SFT offset and cluster pointers updated
 21736                                  ;    Carry set
 21737                                  ;	CX = 0
 21738                                  ;	ES:DI point to SFT
 21739                                  ;	AX has error code
 21740                                  ;----------------------------------------------------------------------------
 21741                                  
 21742                                  ;hkn; called from disk.asm. DS already set up.
 21743                                  
 21744                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21745                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21746                                  
 21747                                  DISKREAD:
 21748                                  	;mov	ax,[es:di+11h]
 21749 00003910 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21750                                  	;mov	bx,[es:di+13h]
 21751 00003914 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21752 00003918 2B06[CE05]              	SUB	AX,[BYTPOS]
 21753 0000391C 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21754 00003920 7226                    	JB	short RDERR		;Read starts past EOF
 21755 00003922 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21756 00003924 09C0                    	OR	AX,AX
 21757 00003926 7420                    	JZ	short RDERR		;Read starts at EOF
 21758 00003928 39C8                    	CMP	AX,CX
 21759 0000392A 7302                    	JAE	short ENUF		;I/O fits
 21760 0000392C 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21761                                  ENUF:
 21762                                  	; MSDOS 3.3
 21763                                  	;test	byte [es:di+4],8
 21764                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21765                                  	;jnz	short SET_ACC_ERR
 21766                                  	;call	LOCK_CHECK
 21767                                  	;jnb	short _READ_OK
 21768                                  	;call	READ_LOCK_VIOLATION
 21769                                  	;jnb	short ENUF
 21770                                  	;retn
 21771                                  
 21772                                  	; MSDOS 6.0
 21773 0000392E E87CFE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21774 00003931 7301                    	JNC	short _READ_OK 		; There are no locks
 21775 00003933 C3                      	retn
 21776                                  
 21777                                  _READ_OK:
 21778 00003934 C42E[8A05]              	LES	BP,[THISDPB]
 21779 00003938 E884FF                  	CALL	BREAKDOWN
 21780 0000393B 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21781                                  
 21782 0000393F E87113                  	call	FNDCLUS
 21783                                       	; MSDOS 6.0			;M022 conditional removed here
 21784 00003942 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21785                                  					; migrated from 330a - HKN
 21786 00003944 09C9                    	OR	CX,CX
 21787 00003946 7413                    	JZ	short SKIPERR
 21788                                  RDERR:
 21789 00003948 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21790 0000394A E92102                  	jmp	WRTERR22
 21791                                  
 21792                                  ;RDLASTJ: 
 21793                                  	;JMP	RDLAST                  ;M039
 21794                                  
 21795                                  SETSFTJ2: 
 21796 0000394D E99600                  	JMP	SETSFT
 21797                                  
 21798                                  CANOT_READ:
 21799                                  	; MSDOS 3.3
 21800                                  	;POP	CX		;M039.
 21801                                  	; MSDOS 3.3 & MSDOS 6.0
 21802 00003950 59                      	POP	CX              ;Clean stack.
 21803 00003951 5B                      	POP	BX
 21804                                  
 21805                                  	;entry	SET_ACC_ERR_DS
 21806                                  SET_ACC_ERR_DS:
 21807                                  
 21808                                  ;hkn; SS is DOSDATA
 21809                                  	;Context DS
 21810 00003952 16                      	push	ss
 21811 00003953 1F                      	pop	ds
 21812                                  
 21813                                  	;entry	SET_ACC_ERR
 21814                                  SET_ACC_ERR:
 21815 00003954 31C9                    	XOR	CX,CX
 21816                                  	;mov	ax,5
 21817 00003956 B80500                  	MOV	AX,error_access_denied
 21818 00003959 F9                      	STC
 21819 0000395A C3                      	retn
 21820                                  
 21821                                  SKIPERR:
 21822 0000395B 8916[BA05]              	MOV	[LASTPOS],DX
 21823 0000395F 891E[BC05]              	MOV	[CLUSNUM],BX
 21824 00003963 833E[D205]00            	CMP	word [BYTCNT1],0
 21825 00003968 7405                    	JZ	short RDMID
 21826                                  
 21827 0000396A E8BC13                  	call	BUFRD
 21828 0000396D 72E3                    	JC	short SET_ACC_ERR_DS
 21829                                  
 21830                                  RDMID:
 21831 0000396F 833E[D605]00            	CMP	word [SECCNT],0
 21832                                  	;JZ	RDLAST ; 10/08/2018
 21833 00003974 7453                    	jz	short RDLAST
 21834                                  
 21835 00003976 E84514                  	call	NEXTSEC
 21836 00003979 72D2                    	JC	short SETSFTJ2
 21837                                  
 21838 0000397B C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21839                                  ONSEC:
 21840 00003980 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21841 00003984 8B0E[D605]              	MOV	CX,[SECCNT]
 21842 00003988 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21843                                  RDLP:
 21844 0000398C E86014                  	call	OPTIMIZE
 21845 0000398F 72C1                    	JC	short SET_ACC_ERR_DS
 21846                                  
 21847 00003991 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21848 00003992 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21849 00003993 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21850                                  	;mov	byte [ALLOWED],38h
 21851 00003994 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21852 00003999 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21853                                  
 21854 0000399D 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21855 0000399E 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21856                                  
 21857                                  	; 04/05/2019 - Retro DOS v4.0
 21858                                  
 21859                                  	; MSDOS 6.0
 21860 0000399F E80A22                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21861                                  
 21862                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21863 000039A2 E8CFFD                  	call	DREAD
 21864                                  
 21865                                  	; MSDOS 3.3 
 21866                                  	;pop	bx
 21867                                  	;pop	dx
 21868                                  	;jc	short CANOT_READ
 21869                                  	;add	bx,dx	; (bx = Extent end)
 21870                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21871                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21872                                  	;call	SETVISIT
 21873                                  	; ->***
 21874                                  ;M039
 21875                                  	; MSDOS 6.0 
 21876 000039A5 59                      	pop	cx
 21877 000039A6 5A                      	pop	dx
 21878 000039A7 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21879 000039AC 72A2                    	jc	short CANOT_READ
 21880                                  
 21881 000039AE 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21882                                  
 21883                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21884                                  ;            sectors, also termed an "Extent".)
 21885                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21886                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21887                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21888                                  ;
 21889                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21890                                  ;	buffers must be "read" into the transfer memory block, so that the
 21891                                  ;       transfer memory reflects the most recent data.
 21892                                  
 21893 000039B3 E85E00                  	call	DskRdBufScan
 21894                                  
 21895                                  	;Context DS
 21896 000039B6 16                      	push	ss
 21897 000039B7 1F                      	pop	ds
 21898                                          
 21899 000039B8 59                      	pop	cx
 21900 000039B9 5B                              pop	bx
 21901                                  
 21902                                  ;       CX = # of sector remaining.
 21903                                  ;       BX = Next physical cluster.
 21904                                  
 21905                                  ;M039
 21906                                  
 21907                                  ;;;;;;;;
 21908                                  ;	; 25/07/2018 - Retro DOS v3.0
 21909                                  ;	; ***->
 21910                                  ;	; MSDOS 3.3
 21911                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21912                                  ;bufq:
 21913                                  ;;	DX = Extent start.
 21914                                  ;;	BX = Extent end.
 21915                                  ;;	 AL = Drive #.
 21916                                  ;;     DS:DI-> 1st buffer in queue.
 21917                                  ;
 21918                                  ;	;or	byte [di+5],20h
 21919                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21920                                  ;	;cmp	al,[di+4]	
 21921                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21922                                  ;	jnz	short bufq3
 21923                                  ;	;cmp	[di+6],dx
 21924                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21925                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21926                                  ;	;cmp	[di+6],bx
 21927                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21928                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21929                                  ;	
 21930                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21931                                  ;
 21932                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21933                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21934                                  ;;      as MRU (Most Recently Used).
 21935                                  ;
 21936                                  ;	;test	byte [di+5],40h
 21937                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21938                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21939                                  ;	pop	ax ; transfer address
 21940                                  ;	push	ax
 21941                                  ;	push	di
 21942                                  ;	push	dx
 21943                                  ;	;sub	dx,[di+6]
 21944                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21945                                  ;	neg	dx
 21946                                  ;
 21947                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21948                                  ;;           block.
 21949                                  ;
 21950                                  ;	mov	si,di
 21951                                  ;	mov	di,ax
 21952                                  ;	mov	ax,dx
 21953                                  ;	;mov	cx,[es:bp+6]	
 21954                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21955                                  ;	mul	cx
 21956                                  ;	add	di,ax
 21957                                  ;
 21958                                  ;	lea	si,[si+16]
 21959                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21960                                  ;	shr	cx,1
 21961                                  ;	push	es
 21962                                  ;	mov	es,[SS:DMAADD+2]
 21963                                  ;
 21964                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21965                                  ;;      DS:SI-> Buffer sector data.
 21966                                  ;;      ES:DI-> Destination within Transfer memory block.
 21967                                  ;
 21968                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21969                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21970                                  ;	;rep	movsb                   ;Copy last byte.
 21971                                  ;	jnc	short bufq1
 21972                                  ;	movsb
 21973                                  ;bufq1:
 21974                                  ;	pop	es
 21975                                  ;	pop	dx
 21976                                  ;	pop	di
 21977                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21978                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21979                                  ;bufq2:
 21980                                  ;	call	SCANPLACE
 21981                                  ;bufq3:
 21982                                  ;	call	SKIPVISIT
 21983                                  ;	jnz	short bufq
 21984                                  ;	
 21985                                  ;	push	ss
 21986                                  ;	pop	ds
 21987                                  ;	pop	cx
 21988                                  ;	pop	cx
 21989                                  ;	pop	bx	
 21990                                  ;bufq4:
 21991                                  ;;;;;;;
 21992 000039BA E30D                    	JCXZ	RDLAST
 21993                                  
 21994 000039BC E8CE1B                  	call	IsEOF			; test for eof on fat size
 21995 000039BF 7325                    	JAE	short SETSFT
 21996                                  
 21997 000039C1 B200                    	MOV	DL,0
 21998 000039C3 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21999 000039C7 EBC3                    	JMP	short RDLP ; 19/05/2019
 22000                                  
 22001                                  RDLAST:
 22002 000039C9 A1[D405]                	MOV	AX,[BYTCNT2]
 22003 000039CC 09C0                    	OR	AX,AX
 22004 000039CE 7416                    	JZ	short SETSFT
 22005 000039D0 A3[D205]                	MOV	[BYTCNT1],AX
 22006                                  
 22007 000039D3 E8E813                  	call	NEXTSEC
 22008 000039D6 720E                    	JC	short SETSFT
 22009                                  
 22010 000039D8 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22011 000039DE E84813                  	call	BUFRD
 22012                                  	; 10/08/2018
 22013                                  
 22014 000039E1 7303                    	JNC	short SETSFT
 22015 000039E3 E96CFF                  	JMP	SET_ACC_ERR_DS
 22016                                  
 22017                                  ;------------------------------------------------------------------------------
 22018                                  ;
 22019                                  ; Procedure Name : SETSFT
 22020                                  ; Inputs:
 22021                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22022                                  ;		and set cluster fields
 22023                                  ; Function:
 22024                                  ;	Update [THISSFT] based on the transfer
 22025                                  ; Outputs:
 22026                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22027                                  ;	ES:DI points to [THISSFT]
 22028                                  ;	CX No. of bytes transferred
 22029                                  ;	Carry clear
 22030                                  ;
 22031                                  ;----------------------------------------------------------------------------
 22032                                  
 22033                                  	;entry	SETSFT
 22034                                  
 22035                                  ; 26/07/2018 - Retro DOS v3.0
 22036                                  SETSFT:
 22037 000039E6 C43E[9E05]              	LES	DI,[THISSFT]
 22038                                  
 22039                                  ; Same as SETSFT except ES:DI already points to SFT
 22040                                  	;entry	SETCLUS
 22041                                  SETCLUS:	
 22042 000039EA 8B0E[B805]              	MOV	CX,[NEXTADD]
 22043 000039EE 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22044                                  	;;test	word [es:di+5],80h
 22045                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22046                                  	;JNZ	short ADDREC		; don't set clusters if device
 22047                                  
 22048                                  	; 04/05/2019 - Retro DOS v4.0
 22049                                  	;test	byte [es:di+5],80h
 22050 000039F2 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22051 000039F7 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22052                                  
 22053 000039F9 A1[BC05]                	MOV	AX,[CLUSNUM]
 22054                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22055                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22056 000039FC 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22057 00003A00 A1[BA05]                	MOV	AX,[LASTPOS]
 22058                                  	;mov	[es:di+19h],ax
 22059 00003A03 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22060                                  
 22061                                  ;----------------------------------------------------------------------------
 22062                                  ;
 22063                                  ; Procedure : AddRec
 22064                                  ; Inputs:
 22065                                  ;	ES:DI points to SFT
 22066                                  ;	CX is No. Bytes transferred
 22067                                  ; Function:
 22068                                  ;	Update the SFT offset based on the transfer
 22069                                  ; Outputs:
 22070                                  ;	sf_position updated to point to first byte after transfer
 22071                                  ;	ES:DI points to SFT
 22072                                  ;	CX No. of bytes transferred
 22073                                  ;	Carry clear
 22074                                  ;----------------------------------------------------------------------------
 22075                                  
 22076                                  	;entry	AddRec
 22077                                  ADDREC:
 22078 00003A07 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22079                                  	;add	[es:di+15h],cx
 22080 00003A09 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22081                                  	;adc	word [es:di+17h], 0
 22082 00003A0D 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22083                                  RET28:	
 22084 00003A12 F8                      	CLC
 22085 00003A13 C3                      	retn
 22086                                  
 22087                                  ; 25/07/2018
 22088                                  ; MSDOS 6.0
 22089                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22090                                  ;----------------------------------------------------------------------------
 22091                                  ;
 22092                                  ; Procedure Name : DskRdBufScan
 22093                                  ;
 22094                                  ; Inputs:
 22095                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22096                                  ;            sectors, also termed an "Extent".)
 22097                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22098                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22099                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22100                                  ;
 22101                                  ; Function:
 22102                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22103                                  ;	"read" into the transfer memory block, so that the transfer memory
 22104                                  ;	reflects the most recent data.
 22105                                  ;
 22106                                  ; Outputs:
 22107                                  ;       Transfer memory updated as required.
 22108                                  ;
 22109                                  ; Uses:
 22110                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22111                                  ;       SS override for all global variables.
 22112                                  ;
 22113                                  ; Notes:
 22114                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22115                                  ;	than the FIRST.
 22116                                  ;----------------------------------------------------------------------------
 22117                                  ;M039: Created
 22118                                  
 22119                                  ; 04/05/2019 - Retro DOS v4.0
 22120                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22121                                  
 22122                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22123                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22124                                  
 22125                                  ;procedure DskRdBufScan,NEAR
 22126                                  ;
 22127                                  ;ASSUME  DS:NOTHING
 22128                                  
 22129                                  DskRdBufScan:
 22130 00003A14 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22131 00003A1A 743C                    	je	short bufx		     ; -no, skip all work.
 22132                                  
 22133 00003A1C 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22134 00003A21 89DE                    	mov     si,bx
 22135 00003A23 01D1                    	add     cx,dx
 22136 00003A25 83D600                  	adc     si,0
 22137                                  
 22138 00003A28 E8191F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22139                                  	;mov	ax,[di+2]
 22140 00003A2B 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22141 00003A2E 36A3[BA0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22142                                  		
 22143                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22144                                  	;;mov	al,[es:bp+0]
 22145                                  	;mov	al,[es:bp+DPB.DRIVE]
 22146                                  	; 15/12/2022
 22147 00003A32 268A4600                	mov	al,[es:bp]
 22148                                  
 22149                                  ;       BX:DX = Extent start.
 22150                                  ;       SI:CX = Extent end + 1.
 22151                                  ;          AL = Drive #.
 22152                                  ;       DS:DI-> 1st buffer in queue.
 22153                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22154                                  
 22155                                  bufq:	
 22156                                  	;cmp	al,[di+4]
 22157 00003A36 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22158 00003A39 7514                    	jne	short bufq1        	;  -no, jump.
 22159                                  
 22160                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22161                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22162                                  
 22163                                  	;cmp	bx,[di+8]
 22164 00003A3B 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22165 00003A3E 7503                    	jne	short bufq01
 22166                                  	;cmp	dx,[di+6]
 22167 00003A40 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22168                                  bufq01:
 22169 00003A43 770A                    	ja	short bufq1
 22170                                  
 22171                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22172                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22173                                  
 22174                                  	;cmp	si,[di+8]
 22175 00003A45 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22176 00003A48 7503                    	jne	short bufq02
 22177                                  	;cmp	cx,[di+6]
 22178 00003A4A 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22179                                  bufq02:
 22180 00003A4D 770A                    	ja	short bufq2
 22181                                  bufq1:	
 22182 00003A4F 363B3E[BA0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22183 00003A54 8B3D                    	mov	di,[di]
 22184                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22185 00003A56 75DE                    	jne	short bufq		; -no, do next buffer
 22186                                  bufx:
 22187 00003A58 C3                      	retn				;Exit.
 22188                                  
 22189                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22190                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22191                                  ;       as MRU (Most Recently Used).
 22192                                  
 22193                                  bufq2:	
 22194 00003A59 50                      	push	ax
 22195                                  	;test	byte [di+5],40h
 22196 00003A5A F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22197 00003A5E 742D                    	jz	short bufq3                    ; -no, jump.
 22198                                  
 22199                                  ;       SaveReg <cx,dx,si,di,es>
 22200 00003A60 51                      	push	cx
 22201 00003A61 52                      	push	dx
 22202 00003A62 56                      	push	si
 22203 00003A63 57                      	push	di
 22204 00003A64 06                      	push	es
 22205                                  
 22206 00003A65 89D0                    	mov     ax,dx
 22207                                  	;sub	ax,[di+6]
 22208 00003A67 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22209 00003A6A F7D8                    	neg	ax
 22210                                  
 22211                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22212                                  ;            block. (Note: the upper word of the sector # may be ignored
 22213                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22214                                  ;            is imposed by the input parameters of the disk read operation.)
 22215                                  
 22216                                  	;lea	si,[di+20]
 22217 00003A6C 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22218                                  	;mov	cx,[es:bp+2]
 22219 00003A6F 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22220 00003A73 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22221 00003A75 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22222 00003A7A 01C7                    	add	di,ax
 22223 00003A7C 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22224 00003A81 D1E9                    	shr	cx,1
 22225                                  
 22226                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22227                                  ;       DS:SI-> Buffer sector data.
 22228                                  ;       ES:DI-> Destination within Transfer memory block.
 22229                                  
 22230 00003A83 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22231                                  	;; 04/05/2019
 22232                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22233                                  	;;rep	movsb                   ;Copy last byte.
 22234                                  	;jnc	short bufq03	
 22235                                  	;movsb
 22236                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22237                                  	;adc	cx,0
 22238                                  	;rep	movsb
 22239                                  	; 22/09/2023
 22240 00003A85 7301                    	jnc	short bufq03
 22241 00003A87 A4                      	movsb
 22242                                  bufq03:
 22243                                  	;RestoreReg <es,di,si,dx,cx>
 22244 00003A88 07                      	pop	es
 22245 00003A89 5F                      	pop	di
 22246 00003A8A 5E                      	pop	si
 22247 00003A8B 5A                      	pop	dx
 22248 00003A8C 59                      	pop	cx
 22249                                  
 22250                                  ;       DS:DI -> current buffer.
 22251                                  bufq3:	
 22252 00003A8D 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22253                                          ;invoke SCANPLACE
 22254 00003A8F E8C41E                  	call	SCANPLACE
 22255 00003A92 363B06[BA0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22256 00003A97 58                      	pop	ax
 22257                                  	;jne	short bufq		; -no, jump.
 22258                                  	;;jmp	short bufx		; -yes, exit.
 22259                                  	;; 12/06/2019
 22260                                  	;retn
 22261                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22262 00003A98 759C                    	jne	short bufq
 22263 00003A9A EBBC                    	jmp	short bufx
 22264                                  
 22265                                  ;EndProc DskRdBufScan
 22266                                  
 22267                                  ;============================================================================
 22268                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22269                                  ;============================================================================
 22270                                  ; 04/05/2019 - Retro DOS v4.0
 22271                                  ; 24/07/2018 - Retro DOS v3.0
 22272                                  
 22273                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22274                                  ;----------------------------------------------------------------------------
 22275                                  ;
 22276                                  ; Procedure Name : DISKWRITE
 22277                                  ;
 22278                                  ; Inputs:
 22279                                  ;       Outputs of SETUP
 22280                                  ; Function:
 22281                                  ;       Perform disk write
 22282                                  ; Outputs:
 22283                                  ;    Carry clear
 22284                                  ;       CX = No. of bytes written
 22285                                  ;       ES:DI point to SFT
 22286                                  ;       SFT offset and cluster pointers updated
 22287                                  ;    Carry set
 22288                                  ;       CX = 0
 22289                                  ;       ES:DI point to SFT
 22290                                  ;       AX has error code
 22291                                  ;----------------------------------------------------------------------------
 22292                                  
 22293                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22294                                  
 22295                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22296                                  
 22297                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22298                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22299                                  
 22300                                  DISKWRITE:
 22301                                  	; MSDOS 3.3
 22302                                  	; IBMDOS.COM - Offset 436Dh
 22303                                  	;;test	byte [es:di+4],8
 22304                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22305                                  	;jz	short write_cont
 22306                                  	;jmp	SET_ACC_ERR_DS
 22307                                  ;write_cont:
 22308                                  	;push	cx
 22309                                  	;or	cx,cx
 22310                                  	;jnz	short Not_Truncate
 22311                                  	;;mov	cx,-1
 22312                                  	;dec	cx
 22313                                  ;Not_Truncate:
 22314                                  	;call	LOCK_CHECK
 22315                                  	;pop	cx
 22316                                  	;jnb	short _WRITE_OK
 22317                                  	;call	WRITE_LOCK_VIOLATION
 22318                                  	;jnb	short DISKWRITE
 22319                                  	;retn
 22320                                  
 22321                                  	; MSDOS 6.0
 22322 00003A9C E8F0FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22323                                  	; 19/08/2018
 22324 00003A9F 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22325 00003AA1 C3                      	retn
 22326                                  
 22327                                  WRTEOFJ:
 22328 00003AA2 E9DC01                  	JMP     WRTEOF
 22329                                  
 22330                                  _WRITE_OK:
 22331                                   	; 27/07/2018
 22332                                  	; IBMDOS.COM - Offset 438Eh
 22333                                  	
 22334                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22335                                  	;and	word [es:di+5],0BFBFh
 22336 00003AA5 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22337                                  				; Mark file as dirty, clear no date on close
 22338                                  
 22339                                  	; 04/05/2019 - Retro DOS v4.0	
 22340                                  
 22341                                  	; MSDOS 6.0
 22342                                  	; mov 	ax,[es:di+11h]
 22343 00003AAB 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22344 00003AAF A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22345                                  	;mov	ax,[es:di+13h]
 22346 00003AB2 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22347 00003AB6 A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22348                                  
 22349                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22350                                  
 22351                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22352 00003AB9 C42E[8A05]              	LES     BP,[THISDPB]
 22353                                  
 22354 00003ABD E8FFFD                  	call	BREAKDOWN
 22355                                  
 22356 00003AC0 A1[CE05]                	MOV     AX,[BYTPOS]
 22357 00003AC3 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22358 00003AC7 E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22359 00003AC9 01C8                    	ADD     AX,CX
 22360 00003ACB 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22361                                  
 22362                                  	;mov	bx,[es:bp+2]
 22363 00003ACE 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22364                                  
 22365                                  	; MSDOS 3.3
 22366                                  	;cmp	dx,bx
 22367                                  	;jnb	short WRTERR33
 22368                                  	;div	bx
 22369                                  	;mov	bx,ax
 22370                                  	;OR	DX,DX
 22371                                  	;JNZ	short CALCLUS
 22372                                  	;dec	ax
 22373                                  ;CALCLUS:
 22374                                  	; MSDOS 3.3
 22375                                  	;mov	cl,[es:bp+5]
 22376                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22377                                  	;shr	ax,cl
 22378                                  	;push	ax
 22379                                  	;push	dx
 22380                                  	;push	es
 22381                                  	;les	di,[THISSFT]
 22382                                  	;;mov	ax,[es:di+11h]
 22383                                  	;;mov	dx,[es:di+13h]
 22384                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22385                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22386                                  	;pop	es
 22387                                  	;;DX:AX = current file size (in bytes).
 22388                                  	;;div	word [es:bp+2]
 22389                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22390                                  	;mov	cx,ax
 22391                                  	;or	dx,dx
 22392                                  	;jz	short NORND
 22393                                  	;inc	ax
 22394                                  ;NORND:
 22395                                  	; MSDOS 6.0
 22396 00003AD2 E8DC02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22397 00003AD5 89C6                    	MOV	SI,AX
 22398 00003AD7 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22399                                  
 22400                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22401                                  
 22402 00003ADB 09D2                    	OR	DX,DX
 22403 00003ADD 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22404 00003ADE 89CA                    	MOV	DX,CX			;M039
 22405 00003AE0 7506                    	JNZ	short CALCLUS
 22406 00003AE2 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22407 00003AE5 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22408                                  
 22409                                  CALCLUS:
 22410                                  	; MSDOS 6.0
 22411 00003AE8 E8ED02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22412 00003AEB 5A                      	POP	DX
 22413                                  
 22414                                  ;       AX = Last cluster to write.
 22415                                  ;       DX = # of bytes in last sector to write (the "tail").
 22416                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22417                                  
 22418 00003AEC 50                      	PUSH	AX
 22419 00003AED 52                      	PUSH	DX
 22420                                  ;M039
 22421 00003AEE 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22422 00003AF2 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22423 00003AF5 E8B902                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22424 00003AF8 890E[0E06]              	mov	[TEMP_VAR2],cx
 22425 00003AFC 890E[CA05]              	mov	[VALSEC+2],cx
 22426 00003B00 89C1                    	mov	cx,ax
 22427 00003B02 89F3                    	mov	bx,si
 22428                                  
 22429                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22430                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22431                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22432                                  ;                     DX = # of bytes in last sector of current file.
 22433                                  ;M039
 22434 00003B04 09D2                    	OR	DX,DX
 22435 00003B06 7407                    	JZ	short NORND
 22436                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 22437                                  	;ADC	word [VALSEC+2],0
 22438                                  	; 22/09/2023
 22439 00003B08 40                      	inc	ax  ; 0FFFFh -> 0
 22440 00003B09 7504                    	jnz	short NORND
 22441 00003B0B FF06[CA05]              	inc	word [VALSEC+2]
 22442                                  NORND:		
 22443                                  	; MSDOS 3.3 & MSDOS 6.0
 22444 00003B0F A3[C805]                	MOV     [VALSEC],AX
 22445                                  
 22446                                  ;       [VALSEC] = Last sector of current file.
 22447                                  
 22448 00003B12 31C0                    	XOR     AX,AX
 22449 00003B14 A3[DE05]                	MOV     [GROWCNT],AX
 22450 00003B17 A3[E005]                	MOV     [GROWCNT+2],AX
 22451 00003B1A 58                      	POP     AX
 22452                                  
 22453                                  	; MSDOS 6.0
 22454 00003B1B 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22455 00003B1F 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22456 00003B23 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22457 00003B25 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22458 00003B27 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22459 00003B29 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22460 00003B2D EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22461                                  lowsec:
 22462                                  	;MOV	DI,0			;F.C. >32mb
 22463                                  	; 22/09/2023
 22464 00003B2F 31FF                    	xor	di,di
 22465                                  	; MSDOS 3.3 & MSDOS 6.0
 22466 00003B31 29CB                    	SUB	BX,CX			; Number of full sectors
 22467 00003B33 7253                    	JB	short NOGROW
 22468 00003B35 7444                    	JZ	short TESTTAIL
 22469                                  yesgrow:
 22470                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22471 00003B37 89D1                    	MOV     CX,DX
 22472 00003B39 93                      	XCHG    AX,BX
 22473                                  	;mul	word [es:bp+2]
 22474 00003B3A 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22475                                  	
 22476                                  	; MSDOS 6.0
 22477 00003B3E 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22478 00003B42 A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22479 00003B45 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22480                                  	;mul	word [es:bp+2]
 22481 00003B47 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22482                                  	
 22483 00003B4B 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22484 00003B4F 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22485 00003B51 A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22486                                  
 22487                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22488 00003B54 29C8                    	SUB     AX,CX			; Take off current "tail"
 22489 00003B56 83DA00                  	SBB     DX,0			; 32-bit extension
 22490 00003B59 01D8                    	ADD     AX,BX			; Add on new "tail"
 22491 00003B5B 83D200                  	ADC     DX,0			; ripple tim's head off
 22492 00003B5E EB21                    	JMP     SHORT SETGRW
 22493                                  
 22494                                  HAVSTART:
 22495                                  	;int 3
 22496 00003B60 89C1                    	MOV     CX,AX
 22497 00003B62 E86E11                  	call	SKPCLP
 22498                                  	;JCXZ	DOWRTJ
 22499                                  	; 16/12/2022
 22500 00003B65 E357                    	jcxz	DOWRT
 22501                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22502                                  	;jcxz	DOWRTJ
 22503                                  
 22504 00003B67 E81013                  	call	ALLOCATE
 22505                                  	;JNC	short DOWRTJ
 22506                                  	; 16/12/2022
 22507 00003B6A 7352                    	jnc	short DOWRT
 22508                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22509                                  	;jnc	short DOWRTJ
 22510                                  
 22511                                  	;entry   WRTERR
 22512                                  WRTERR:
 22513 00003B6C B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22514                                  
 22515                                  	;entry WRTERR22
 22516                                  WRTERR22:
 22517 00003B6E A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22518                                  
 22519                                  	; 27/07/2018
 22520                                  WRTERR33:
 22521                                  	;MOV	CX,0			;No bytes transferred
 22522 00003B71 31C9                    	XOR     CX,CX
 22523                                  					
 22524 00003B73 C43E[9E05]              	LES     DI,[THISSFT]
 22525                                  	;CLC ; 19/05/2019
 22526                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22527                                  	; 16/12/2022
 22528                                  	;clc
 22529 00003B77 C3                      	retn
 22530                                  
 22531                                  	; 16/12/2022
 22532                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22533                                  ;DOWRTJ:
 22534                                  	;JMP	short DOWRT
 22535                                  
 22536                                  ACC_ERRWJ:
 22537                                  	; 10/08/2018
 22538                                  	;JMP	SET_ACC_ERRW
 22539                                  	; 16/12/2022
 22540 00003B78 E9D7FD                  	jmp	SET_ACC_ERR_DS
 22541                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22542                                  	;jmp	SET_ACC_ERRW	
 22543                                  
 22544                                  TESTTAIL:
 22545 00003B7B 29D0                    	SUB     AX,DX
 22546 00003B7D 7609                    	JBE	short NOGROW
 22547 00003B7F 31D2                    	XOR     DX,DX
 22548                                  SETGRW:
 22549 00003B81 A3[DE05]                	MOV	[GROWCNT],AX
 22550 00003B84 8916[E005]              	MOV	[GROWCNT+2],DX
 22551                                  NOGROW:
 22552 00003B88 58                      	POP     AX
 22553 00003B89 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22554 00003B8D E82311                  	call	FNDCLUS
 22555 00003B90 72E6                    	JC	short ACC_ERRWJ
 22556 00003B92 891E[BC05]              	MOV     [CLUSNUM],BX
 22557 00003B96 8916[BA05]              	MOV     [LASTPOS],DX
 22558                                  
 22559 00003B9A 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22560 00003B9C 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22561 00003B9E E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22562 00003BA0 51                      	PUSH    CX              ; No. of clusters short of first
 22563 00003BA1 89C1                    	MOV     CX,AX
 22564 00003BA3 E8D412                  	call	ALLOCATE
 22565 00003BA6 59                      	POP     CX
 22566 00003BA7 72C3                    	JC	short WRTERR
 22567 00003BA9 8B16[BA05]              	MOV     DX,[LASTPOS]
 22568 00003BAD 42                      	INC     DX
 22569 00003BAE 49                      	DEC     CX
 22570 00003BAF 7405                    	JZ	short NOSKIP
 22571 00003BB1 E81F11                  	call	SKPCLP
 22572 00003BB4 72C2                    	JC	short ACC_ERRWJ
 22573                                  NOSKIP:
 22574 00003BB6 891E[BC05]              	MOV     [CLUSNUM],BX
 22575 00003BBA 8916[BA05]              	MOV     [LASTPOS],DX
 22576                                  DOWRT:
 22577 00003BBE 833E[D205]00            	CMP     word [BYTCNT1],0
 22578 00003BC3 7409                    	JZ	short WRTMID
 22579 00003BC5 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22580 00003BC9 E89611                  	call	BUFWRT
 22581 00003BCC 72AA                    	JC	short ACC_ERRWJ
 22582                                  WRTMID:
 22583 00003BCE A1[D605]                	MOV     AX,[SECCNT]
 22584 00003BD1 09C0                    	OR      AX,AX
 22585                                  	; 20/11/2022
 22586 00003BD3 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22587 00003BD5 0106[C405]              	ADD     [SECPOS],AX
 22588                                  	; 19/05/2019
 22589                                  	; MSDOS 6.0
 22590 00003BD9 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22591 00003BDE E8DD11                  	call	NEXTSEC
 22592                                  	; 16/12/2022
 22593 00003BE1 7295                    	JC	short ACC_ERRWJ
 22594                                  	;JC	short SET_ACC_ERRW	;M039
 22595 00003BE3 C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22596 00003BE8 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22597 00003BEC 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22598 00003BF0 8B0E[D605]              	MOV     CX,[SECCNT]
 22599                                  WRTLP:
 22600 00003BF4 E8F811                  	call	OPTIMIZE
 22601 00003BF7 7248                    	JC	short SET_ACC_ERRW
 22602                                  	; 16/12/2022
 22603                                  	;JC	short ACC_ERRWJ
 22604                                  
 22605                                  ;M039
 22606                                  ;       DI = Next physical cluster.
 22607                                  ;       AX = # sectors remaining.
 22608                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22609                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22610                                  ;	     sectors, also termed an "Extent".)
 22611                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22612                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22613                                  ;
 22614                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22615                                  ;	are in Extent; they are being over-written.
 22616                                  
 22617 00003BF9 57                      	push    di
 22618 00003BFA 50                      	push    ax
 22619                                  
 22620                                  	; MSDOS 3.3
 22621                                  	; IBMDOS.COM (1987) - Offset 4497h
 22622                                  	;push	dx
 22623                                  	;push	bx
 22624                                  	;mov	al,[es:bp]
 22625                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22626                                  	;mov	bx,cx
 22627                                  	;add	bx,dx	; (bx = Extent end)
 22628                                  
 22629                                  ;	DX = Extent start.
 22630                                  ;	BX = Extent end.
 22631                                  ;	AL = Drive #.
 22632                                  
 22633                                  	;call	SETVISIT
 22634                                  
 22635                                  ;wbufq1:
 22636                                  	;;or	byte [di+5],20h
 22637                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22638                                  	;;cmp	al,[di+4]	
 22639                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22640                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22641                                  	;;cmp	[di+6],dx
 22642                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22643                                  	;jb	short wbufq2
 22644                                  	;;cmp	[di+6],bx
 22645                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22646                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22647                                  
 22648                                  	;; Buffer sector is in the Extent
 22649                                  
 22650                                  	;;mov	word [di+4],20FFh
 22651                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22652                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22653                                  	;				; .buf_flags, AH = 0, reset/clear
 22654                                  	;call	SCANPLACE
 22655                                  ;wbufq2:
 22656                                  	;call	SKIPVISIT
 22657                                  	;jnz	short wbufq1
 22658                                  	;pop	bx
 22659                                  	;pop	dx
 22660                                  
 22661                                          ; MSDOS 6.0
 22662 00003BFB E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22663                                  
 22664                                  ;ASSUME DS:NOTHING
 22665                                  ;M039
 22666                                  	; MSDOS 3.3 & MSDOS 6.0
 22667                                  ;hkn; SS override for DMAADD and ALLOWED
 22668 00003BFE 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22669                                  	;mov	byte [ss:ALLOWED],38h
 22670 00003C03 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22671                                  
 22672                                  ;	put logic from DWRITE in-line here so we can modify it
 22673                                  ;	for DISK FULL conditions.
 22674                                  
 22675                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22676                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22677                                  
 22678                                  	; 16/12/2022
 22679                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22680                                  	;call	DWRITE
 22681                                  
 22682                                  ;DWRITE_OKAY:
 22683                                  
 22684                                  	; 16/12/2022
 22685                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22686                                  	;pop     cx
 22687                                  	;pop     bx
 22688                                  	;push    ss
 22689                                  	;pop     ds
 22690                                  	;jc      short SET_ACC_ERRW
 22691                                  	;jcxz    WRTLAST
 22692                                  	;mov     dl, 0
 22693                                  	;inc     word [LASTPOS]
 22694                                  	;jmp     short WRTLP
 22695                                  
 22696                                  	; 16/12/2022
 22697                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22698                                  DWRITE_LUP:
 22699                                  	; 23/07/2019 - Retro DOS v3.2
 22700                                  
 22701                                  	; MSDOS 6.0
 22702 00003C09 E8E1FB                  	call	DSKWRITE
 22703 00003C0C 7417                    	jz	short DWRITE_OKAY
 22704                                  
 22705                                  ;;	int	3
 22706                                  
 22707 00003C0E 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22708 00003C10 7423                    	jz	short DWRITE_DISK_FULL
 22709                                  
 22710                                  	; 16/12/2022
 22711                                  
 22712                                  ;;hkn; SS override
 22713 00003C12 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22714 00003C18 E801FC                  	call	HARDERRRW
 22715 00003C1B 3C01                    	CMP	AL,1		; Check for retry
 22716 00003C1D 74EA                    	JZ	short DWRITE_LUP
 22717                                  
 22718                                  	; 16/12/2022
 22719                                  	; 23/07/2019
 22720                                  	;POP	CX ; *4*
 22721                                  	;POP	BX ; *5*
 22722                                  	;
 22723                                  	;push	ss
 22724                                  	;pop	ds
 22725                                  	;
 22726                                  
 22727                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22728                                  
 22729                                  	; 16/12/2022
 22730 00003C1F 3C03                    	CMP	AL,3		; Check for FAIL
 22731 00003C21 F8                      	CLC
 22732 00003C22 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22733 00003C24 F9                      	STC
 22734                                  
 22735                                  DWRITE_OKAY:
 22736                                  	; 16/12/2022
 22737                                  	; 23/07/2019
 22738                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22739 00003C25 59                      	POP	CX ; *4*
 22740 00003C26 5B                      	POP	BX ; *5*
 22741                                  
 22742                                  ;       CX = # sectors remaining.
 22743                                  ;       BX = Next physical cluster.
 22744                                  
 22745                                  ;hkn; SS override
 22746                                          ;Context DS
 22747                                  	; 16/12/2022
 22748                                  	;push	ss
 22749                                  	;pop	ds
 22750                                  
 22751                                  	; 16/12/2022
 22752 00003C27 7218                    	jc	short SET_ACC_ERRW
 22753                                  
 22754                                  	; 16/12/2022
 22755 00003C29 16                      	push	ss
 22756 00003C2A 1F                      	pop	ds
 22757                                  
 22758 00003C2B E317                    	JCXZ    WRTLAST
 22759                                  
 22760                                  	;MOV	DL,0
 22761 00003C2D 30D2                    	xor	dl,dl ; 23/07/2019
 22762 00003C2F FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22763 00003C33 EBBF                    	JMP     short WRTLP
 22764                                  
 22765                                  	; 23/07/2019 - Retro DOS v3.2
 22766                                  	; 09/08/2018
 22767                                  	; MSDOS 6.0
 22768                                  DWRITE_DISK_FULL:
 22769                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22770                                  	; 16/12/2022
 22771 00003C35 16                      	push	ss
 22772 00003C36 1F                      	pop	ds
 22773 00003C37 59                      	pop	cx		; unjunk stack
 22774 00003C38 5B                      	pop	bx
 22775 00003C39 C606[0B06]01            	mov	byte [DISK_FULL],1
 22776                                  	;stc
 22777 00003C3E E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22778                                  
 22779                                  	; 16/12/2022
 22780                                  SET_ACC_ERRW:
 22781 00003C41 E90EFD                  	jmp	SET_ACC_ERR_DS
 22782                                  
 22783                                  WRTLAST:
 22784 00003C44 A1[D405]                	MOV     AX,[BYTCNT2]
 22785 00003C47 09C0                    	OR      AX,AX
 22786 00003C49 7413                    	JZ	short FINWRT
 22787 00003C4B A3[D205]                	MOV     [BYTCNT1],AX
 22788 00003C4E E86D11                  	call	NEXTSEC
 22789 00003C51 72EE                    	JC	short SET_ACC_ERRW
 22790 00003C53 C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22791 00003C59 E80611                  	call	BUFWRT
 22792 00003C5C 72E3                    	JC	short SET_ACC_ERRW
 22793                                  FINWRT:
 22794 00003C5E C43E[9E05]              	LES     DI,[THISSFT]
 22795 00003C62 A1[DE05]                	MOV     AX,[GROWCNT]
 22796 00003C65 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22797 00003C69 09C0                    	OR      AX,AX
 22798 00003C6B 7502                    	JNZ	short UPDATE_size
 22799 00003C6D E30F                    	JCXZ    SAMSIZ
 22800                                  UPDATE_size:
 22801                                  	;add	[es:di+11h],ax
 22802 00003C6F 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22803                                  	;adc	[es:di+13h],cx
 22804 00003C73 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22805                                  
 22806                                  ; Make sure that all other SFT's see this growth also.
 22807                                  
 22808 00003C77 B80100                  	MOV     AX,1
 22809                                  ;if installed
 22810                                  	;Call	JShare + 14 * 4
 22811 00003C7A FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22812                                  ;else
 22813                                  ;	Call    ShSU
 22814                                  ;endif
 22815                                  
 22816                                  SAMSIZ:
 22817 00003C7E E969FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22818                                  
 22819                                  	; 16/12/2022
 22820                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22821                                  ;SET_ACC_ERRW:
 22822                                  	;jmp	SET_ACC_ERR_DS
 22823                                  
 22824                                  WRTEOF:
 22825 00003C81 89C1                    	MOV     CX,AX
 22826 00003C83 09D1                    	OR      CX,DX
 22827 00003C85 746C                    	JZ	short KILLFIL
 22828 00003C87 83E801                  	SUB     AX,1
 22829 00003C8A 83DA00                  	SBB     DX,0
 22830                                  
 22831                                  	; MSDOS 3.3
 22832                                  	;;div	word [es:bp+2]
 22833                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22834                                  	;;mov	cl,[es:bp+5]
 22835                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22836                                  	;shr	ax,cl
 22837                                  
 22838                                  	; MSDOS 6.0
 22839 00003C8D 53                      	PUSH	BX
 22840                                  	;mov	bx,[es:bp+2]
 22841 00003C8E 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22842 00003C92 E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22843 00003C95 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22844 00003C96 89CA                    	MOV	DX,CX			      ;M039
 22845 00003C98 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22846 00003C9C E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22847                                  
 22848 00003C9F 89C1                    	MOV     CX,AX
 22849 00003CA1 E80F10                  	call	FNDCLUS
 22850                                  SET_ACC_ERRWJ2:
 22851 00003CA4 729B                    	JC	short SET_ACC_ERRW
 22852                                  
 22853 00003CA6 E326                    	JCXZ    RELFILE
 22854 00003CA8 E8CF11                  	call	ALLOCATE
 22855                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22856                                  	; 16/12/2022
 22857 00003CAB 7303                    	jnc	short UPDATE
 22858 00003CAD E9BCFE                  	JMP	WRTERR
 22859                                  UPDATE:
 22860 00003CB0 C43E[9E05]              	LES	DI,[THISSFT]
 22861 00003CB4 A1[CE05]                	MOV	AX,[BYTPOS]
 22862                                  	;mov	[es:di+11h],ax
 22863 00003CB7 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22864 00003CBB A1[D005]                	MOV	AX,[BYTPOS+2]
 22865                                  	;mov	[es:di+13h],ax
 22866 00003CBE 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22867                                  ;
 22868                                  ; Make sure that all other SFT's see this growth also.
 22869                                  ;
 22870 00003CC2 B80200                  	MOV     AX,2
 22871                                  ;if installed
 22872                                  	;Call	JShare + 14 * 4
 22873 00003CC5 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22874                                  ;else
 22875                                  ;	Call    ShSU
 22876                                  ;endif
 22877 00003CC9 31C9                    	XOR     CX,CX
 22878 00003CCB E939FD                  	jmp	ADDREC
 22879                                  
 22880                                  	; 16/12/2022
 22881                                  ;WRTERRJ: 
 22882                                  	;JMP	WRTERR
 22883                                  
 22884                                  ;;;;;;;;;;;;;;;; 7/18/86
 22885                                  ;;;;;;;;;;;;;;;;
 22886                                  
 22887                                  RELFILE:
 22888                                  	; MSDOS 6.0
 22889 00003CCE 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22890 00003CCF C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22891                                  	;cmp	dx,[es:di+19h]
 22892 00003CD3 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22893 00003CD7 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22894                                  	;mov	[es:di+19h],0
 22895 00003CD9 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22896                                  	;mov	dx,[es:di+0Bh]
 22897 00003CDF 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22898                                  	;mov	[es:di+35h],dx
 22899 00003CE3 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22900                                  SKIPRESET:                            		;AN002; BL
 22901 00003CE7 07                      	POP     ES                    		;AN002; BL
 22902                                  ;
 22903 00003CE8 BAFFFF                  	MOV     DX,0FFFFH
 22904 00003CEB E83A12                  	call	RELBLKS
 22905                                  	; 16/12/2022
 22906                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22907 00003CEE 73C0                    	jnc	short UPDATE
 22908                                  SET_ACC_ERRWJ:
 22909                                  	;JC	short SET_ACC_ERRWJ2
 22910                                  	;JMP	SHORT UPDATE
 22911                                  	; 16/12/2022
 22912 00003CF0 E95FFC                  	jmp	SET_ACC_ERR_DS
 22913                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22914                                  	;JC	short SET_ACC_ERRWJ2
 22915                                  	;JMP	SHORT UPDATE
 22916                                  
 22917                                  KILLFIL:
 22918 00003CF3 31DB                    	XOR     BX,BX
 22919 00003CF5 06                      	PUSH    ES
 22920 00003CF6 C43E[9E05]              	LES     DI,[THISSFT]
 22921                                  	;mov	[es:di+19h],bx
 22922 00003CFA 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22923                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22924 00003CFE 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22925                                  	;xchg	bx,[es:di+0Bh]
 22926 00003D02 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22927 00003D06 07                      	POP	ES
 22928                                  
 22929 00003D07 09DB                    	OR	BX,BX
 22930                                  	;JZ	short UPDATEJ
 22931                                  	; 16/12/2022
 22932 00003D09 74A5                    	jz	short UPDATE
 22933                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22934                                  	;jz	short UPDATEJ
 22935                                  
 22936                                  ;; 10/23/86 FastOpen update
 22937 00003D0B 06                      	PUSH	ES              ; since first cluster # is 0
 22938 00003D0C 55                      	PUSH	BP              ; we must delete the old cache entry
 22939 00003D0D 50                      	PUSH	AX
 22940 00003D0E 51                      	PUSH	CX
 22941 00003D0F 52                      	PUSH	DX
 22942 00003D10 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22943                                  	; 15/12/2022
 22944 00003D14 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22945                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22946                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22947 00003D18 89D9                    	MOV	CX,BX                    ; first cluster #
 22948 00003D1A B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22949 00003D1C E840EA                  	call	FastOpen_Update          ; call fastopen
 22950 00003D1F 5A                      	POP	DX
 22951 00003D20 59                      	POP	CX
 22952 00003D21 58                      	POP	AX
 22953 00003D22 5D                      	POP	BP
 22954 00003D23 07                      	POP	ES
 22955                                  ;; 10/23/86 FastOpen update
 22956                                  
 22957 00003D24 E8FF11                  	call	RELEASE
 22958 00003D27 72C7                    	JC	short SET_ACC_ERRWJ
 22959                                  UPDATEJ:
 22960                                  	; 20/11/2022
 22961 00003D29 EB85                    	JMP	short UPDATE ; 10/08/2018
 22962                                  
 22963                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22964                                  ;----------------------------------------------------------------------------
 22965                                  ;
 22966                                  ; Procedure Name : DskWrtBufPurge
 22967                                  ;
 22968                                  ; Inputs:
 22969                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22970                                  ;	     sectors, also termed an "Extent".)
 22971                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22972                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22973                                  ;
 22974                                  ; Function:
 22975                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22976                                  ;	are in Extent; they are being over-written.
 22977                                  ;
 22978                                  ; Outputs:
 22979                                  ;       (Same as Input.)
 22980                                  ; Uses:
 22981                                  ;       All registers except DS,AX,SI,DI preserved.
 22982                                  ;       SS override for all global variables.
 22983                                  ;----------------------------------------------------------------------------
 22984                                  ;M039: Created
 22985                                  
 22986                                  ;procedure   DskWrtBufPurge,NEAR
 22987                                  ;
 22988                                  ;ASSUME  DS:NOTHING
 22989                                  
 22990                                  ; 04/05/2019 - Retro DOS v4.0
 22991                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22992                                  
 22993                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22994                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22995                                  
 22996                                  DskWrtBufPurge:
 22997                                  	;SaveReg <bx,cx>
 22998 00003D2B 53                      	push	bx
 22999 00003D2C 51                      	push	cx
 23000                                  
 23001 00003D2D 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23002 00003D32 89DE                    	mov	si,bx
 23003 00003D34 01D1                    	add	cx,dx
 23004 00003D36 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23005                                  
 23006                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23007                                  	;;mov	al,[es:bp+0]
 23008                                  	;mov	al,[es:bp+DPB.DRIVE]
 23009                                  	; 15/12/2022
 23010 00003D39 268A4600                	mov	al,[es:bp]
 23011                                  
 23012                                  ;	BX:DX = Extent start.
 23013                                  ;	SI:CX = Extent end + 1.
 23014                                  ;	AL = Drive #
 23015                                  
 23016 00003D3D 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23017 00003D43 7431                    	je	short nosc		; -no, jump.
 23018                                  
 23019                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23020                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23021                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23022                                  
 23023 00003D45 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23024 00003D4A 752A                    	jne	short nosc		; -no, jump.
 23025                                  
 23026 00003D4C 50                      	push    ax
 23027 00003D4D 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23028 00003D51 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23029                                  
 23030                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23031                                  	;jbe	short sc5		; -yes, jump.
 23032                                  
 23033 00003D56 39FE                    	cmp	si,di
 23034 00003D58 7502                    	jne	short sc01
 23035 00003D5A 39C1                    	cmp	cx,ax
 23036                                  sc01: 
 23037 00003D5C 7617                    	jbe	short sc5	
 23038                                  
 23039 00003D5E 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23040 00003D63 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23041                                  	
 23042                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23043                                  	;jae	short sc5		; -yes, jump.
 23044                                  
 23045 00003D66 39FB                    	cmp	bx,di
 23046 00003D68 7502                    	jne	short sc02
 23047 00003D6A 39C2                    	cmp	dx,ax
 23048                                  sc02:
 23049 00003D6C 7307                    	jnb	short sc5
 23050                                  
 23051 00003D6E 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23052                                  sc5:	
 23053 00003D75 58                      	pop     ax
 23054                                  
 23055                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23056                                  ;	written.
 23057                                  
 23058                                  nosc:	
 23059 00003D76 E8CB1B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23060                                  
 23061                                  _bufq:	
 23062                                  	;cmpo	al,[di+4]
 23063 00003D79 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23064 00003D7C 7527                    	jne	short bufq5		; -no, jump.
 23065                                  
 23066                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23067                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23068                                  
 23069                                  	;cmp	bx,[di+8]
 23070 00003D7E 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23071 00003D81 7503                    	jne	short bufq04
 23072                                  	;cmp	dx,[di+6]
 23073 00003D83 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23074                                  bufq04:
 23075 00003D86 771D                    	ja	short bufq5
 23076                                  
 23077                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23078                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23079                                  
 23080                                  	;cmp	si,[di+8]
 23081 00003D88 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23082 00003D8B 7503                    	jne	short bufq05
 23083                                  	;cmp	cx,[di+6]
 23084 00003D8D 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23085                                  bufq05:
 23086 00003D90 7613                    	jbe	short bufq5
 23087                                  
 23088                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23089                                  
 23090                                  	;test	byte [di+5],40h
 23091 00003D92 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23092 00003D96 7403                    	jz	short bufq4		; -no, jump.
 23093 00003D98 E82A1E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23094                                  bufq4:
 23095                                  	;mov	word [di+4],20FFh
 23096 00003D9B C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23097                                  
 23098 00003DA0 E8B31B                  	call	SCANPLACE
 23099 00003DA3 EB02                    	jmp     short bufq6
 23100                                  bufq5: 
 23101 00003DA5 8B3D                    	mov     di,[di]
 23102                                  	;mov	di,[di+BUFFINFO.buf_next]
 23103                                  bufq6: 
 23104 00003DA7 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23105 00003DAC 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23106                                  	
 23107                                  	;RestoreReg <cx,bx>
 23108 00003DAE 59                      	pop	cx
 23109 00003DAF 5B                      	pop	bx
 23110 00003DB0 C3                      	retn
 23111                                  
 23112                                  ;EndProc DskWrtBufPurge
 23113                                  
 23114                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23115                                  ;----------------------------------------------------------------------------
 23116                                  ;
 23117                                  ; Procedure Name : DIV32
 23118                                  ;
 23119                                  ; Inputs:
 23120                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23121                                  ; Function:
 23122                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23123                                  ; Outputs:
 23124                                  ;       CX:AX = quotient , DX= remainder
 23125                                  ; Uses:
 23126                                  ;       All registers except AX,CX,DX preserved.
 23127                                  ;----------------------------------------------------------------------------
 23128                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23129                                  
 23130                                  ; 04/05/2019 - Retro DOS v4.0
 23131                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23132                                  
 23133                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23134                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23135                                  
 23136                                  DIV32:
 23137 00003DB1 81FB0002                	cmp	bx,512
 23138 00003DB5 7515                    	jne	short div5
 23139                                  
 23140 00003DB7 89D1                    	mov	cx,dx
 23141 00003DB9 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23142 00003DBB 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23143 00003DBF 88E0                    	mov	al,ah
 23144 00003DC1 88CC                    	mov	ah,cl
 23145 00003DC3 88E9                    	mov	cl,ch
 23146 00003DC5 30ED                    	xor	ch,ch
 23147 00003DC7 D1E9                    	shr	cx,1
 23148 00003DC9 D1D8                    	rcr	ax,1
 23149 00003DCB C3                      	retn
 23150                                  div5:	
 23151 00003DCC 89C1                    	mov	cx,ax
 23152 00003DCE 89D0                    	mov	ax,dx
 23153 00003DD0 31D2                    	xor	dx,dx
 23154 00003DD2 F7F3                    	div	bx              ; 0:AX/BX
 23155 00003DD4 91                      	xchg	cx,ax
 23156 00003DD5 F7F3                    	div	bx              ; DX:AX/BX
 23157 00003DD7 C3                      	retn
 23158                                  
 23159                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23160                                  ;----------------------------------------------------------------------------
 23161                                  ;
 23162                                  ; Procedure Name : SHR32
 23163                                  ;
 23164                                  ; Inputs:
 23165                                  ;	DX:AX = 32 bit sector number
 23166                                  ; Function:
 23167                                  ;       Perform 32 bit shift right
 23168                                  ; Outputs:
 23169                                  ;	AX = cluster number
 23170                                  ;	ZF = 1 if no error
 23171                                  ;	   = 0 if error (cluster number > 64k)
 23172                                  ; Uses:
 23173                                  ;       DX,CX
 23174                                  ;---------------------------------------------------------------------------
 23175                                  ; M017	- SHR32 rewritten for better performance
 23176                                  ; M039	- Additional optimization
 23177                                  
 23178                                  ; 04/05/2019 - Retro DOS v4.0
 23179                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23180                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23181                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23182                                  
 23183                                  SHR32:
 23184                                  	;mov	cl,[es:bp+5]
 23185 00003DD8 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23186 00003DDC 30ED                    	xor	ch,ch	    ;ZF=1
 23187 00003DDE E306                    	jcxz	norota
 23188                                  
 23189                                  rotashft2:
 23190 00003DE0 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23191 00003DE2 D1D8                    	rcr	ax,1	    ;ZF not affected.
 23192 00003DE4 E2FA                    	loop	rotashft2
 23193                                  norota:
 23194 00003DE6 C3                      	retn
 23195                                  
 23196                                  ;============================================================================
 23197                                  ; DIR.ASM, MSDOS 6.0, 1991
 23198                                  ;============================================================================
 23199                                  ; 27/07/2018 - Retro DOS v3.0
 23200                                  ; 19/05/2019 - Retro DOS v4.0 
 23201                                  
 23202                                  ;	TITLE	DIR - Directory and path cracking
 23203                                  ;	NAME	Dir
 23204                                  
 23205                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23206                                  ;---------------------------------------------------------------------------
 23207                                  ;
 23208                                  ; Procedure Name : FINDENTRY,SEARCH
 23209                                  ;
 23210                                  ; Inputs:
 23211                                  ;	[THISDPB] set
 23212                                  ;	[SECCLUSPOS] = 0
 23213                                  ;	[DIRSEC] = Starting directory sector number
 23214                                  ;	[CLUSNUM] = Next cluster of directory
 23215                                  ;	[CLUSFAC] = Sectors/Cluster
 23216                                  ;	[NAME1] = Name to look for
 23217                                  ; Function:
 23218                                  ;	Find file name in disk directory.
 23219                                  ;	"?" matches any character.
 23220                                  ; Outputs:
 23221                                  ;	Carry set if name not found
 23222                                  ;	ELSE
 23223                                  ;	Zero set if attributes match (always except when creating)
 23224                                  ;	AH = Device ID (bit 7 set if not disk)
 23225                                  ;	[THISDPB] = Base of drive parameters
 23226                                  ;	DS = DOSGROUP
 23227                                  ;	ES = DOSGROUP
 23228                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23229                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23230                                  ;	[CURBUF] has directory record with match
 23231                                  ;	[NAME1] has file name
 23232                                  ;	[LASTENT] is entry number of the entry
 23233                                  ; All other registers destroyed.
 23234                                  ;----------------------------------------------------------------------------
 23235                                  
 23236                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23237                                  ;hkn; this point.
 23238                                  
 23239                                  SEARCH:
 23240                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23241                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23242                                  
 23243                                  	; 19/05/2019 - Retro DOS v4.0
 23244                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23245                                  
 23246                                  	; 27/07/2018 - Retro DOS v3.0
 23247                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23248                                  	; 15/03/2018 - Retro DOS v2.0
 23249                                  
 23250                                  	;entry	FindEntry
 23251                                  FINDENTRY:
 23252 00003DE7 E82F04                  	call	STARTSRCH
 23253 00003DEA A0[6B05]                	MOV	AL,[ATTRIB]
 23254                                  	;and	al,9Eh
 23255 00003DED 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23256                                  	;cmp	al,8
 23257 00003DEF 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23258 00003DF1 7503                    	JNZ	short NOTVOLSRCH	; No
 23259 00003DF3 E86D01                  	CALL	SETROOTSRCH		; Yes force search of root
 23260                                  NOTVOLSRCH:
 23261 00003DF6 E8FD00                  	CALL	GETENTRY
 23262 00003DF9 7303                    	JNC	short SRCH
 23263 00003DFB E99100                  	JMP	SETESRET
 23264                                  
 23265                                  	;entry	Srch
 23266                                  SRCH:
 23267 00003DFE 1E                      	PUSH	DS
 23268 00003DFF 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23269                                  
 23270                                  ;	(DS:BX) = directory entry address
 23271                                  
 23272 00003E03 8A27                    	mov	ah,[BX]
 23273                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23274 00003E05 08E4                    	OR	AH,AH			; End of directory?
 23275 00003E07 7436                    	JZ	short FREE
 23276                                  
 23277                                  ;hkn; SS override
 23278 00003E09 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23279 00003E0E 742F                    	JZ	short FREE
 23280                                  	;test	byte [bx+0Bh],8
 23281 00003E10 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23282                                  					; Volume ID file?
 23283 00003E14 7405                    	JZ	short CHKFNAM 		; NO
 23284                                  
 23285                                  ;hkn; SS override
 23286 00003E16 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23287                                  CHKFNAM:
 23288                                  ;	Context ES
 23289 00003E1B 8CD6                    	MOV	SI,SS
 23290 00003E1D 8EC6                    	MOV	ES,SI
 23291 00003E1F 89DE                    	MOV	SI,BX
 23292                                  
 23293                                  ;hkn; NAME1 is in DOSDATA
 23294 00003E21 BF[4B05]                	MOV	DI,NAME1
 23295                                  ;;;;; 7/29/86
 23296                                  
 23297                                  ;hkn; SS override for NAME1
 23298                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 23299                                  	;JNZ	short NO_E5
 23300                                  	;MOV	BYTE [SS:NAME1],05H
 23301                                  	; 22/09/2023
 23302 00003E24 26803DE5                	cmp	byte [es:di],0E5h
 23303 00003E28 7504                    	jnz	short NO_E5
 23304 00003E2A 26C60505                	mov	byte [es:di],05h
 23305                                  NO_E5:
 23306                                  ;;;;; 7/29/86
 23307 00003E2E E86100                  	CALL	MetaCompare
 23308 00003E31 7428                    	JZ	short FOUND
 23309 00003E33 1F                      	POP	DS
 23310                                  
 23311                                  	;entry	NEXTENT
 23312                                  NEXTENT:
 23313 00003E34 C42E[8A05]              	LES	BP,[THISDPB]
 23314 00003E38 E86600                  	CALL	NEXTENTRY
 23315 00003E3B 73C1                    	JNC	short SRCH
 23316 00003E3D EB50                    	JMP	SHORT SETESRET
 23317                                  
 23318                                  FREE:
 23319 00003E3F 1F                      	POP	DS
 23320 00003E40 8B0E[4803]              	MOV	CX,[LASTENT]
 23321 00003E44 3B0E[D805]              	CMP	CX,[ENTFREE]
 23322 00003E48 7304                    	JAE	short TSTALL
 23323 00003E4A 890E[D805]              	MOV	[ENTFREE],CX
 23324                                  TSTALL:
 23325 00003E4E 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23326                                  NEXTENTJ:
 23327 00003E52 74E0                    	je	short NEXTENT 		; No - continue search
 23328 00003E54 890E[DA05]              	MOV	[ENTLAST],CX
 23329 00003E58 F9                      	STC
 23330 00003E59 EB34                    	JMP	SHORT SETESRET
 23331                                  
 23332                                  FOUND:
 23333                                  ; We have a file with a matching name. We must now consider the attributes:
 23334                                  ; ATTRIB	Action
 23335                                  ; ------	------
 23336                                  ; Volume_ID	Is Volume_ID in test?
 23337                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23338                                  ;		If create then Is ATTRIB equal to test?
 23339                                  
 23340 00003E5B 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23341 00003E5D 1F                      	POP	DS
 23342 00003E5E 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23343                                  	;and	ah,9Eh
 23344 00003E62 80E4DE                  	AND	AH,~attr_ignore
 23345                                  	;lea	si,[si+15]
 23346 00003E65 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23347                                  					; point to first cluster field
 23348                                  	;test	ch,8
 23349 00003E68 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23350 00003E6B 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23351                                  	;test	ah,8
 23352 00003E6D F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23353                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23354                                  	; 16/12/2022
 23355 00003E70 74C2                    	jz	short NEXTENT ; 19/05/2019
 23356                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23357                                  	;JZ	short NEXTENTJ
 23358 00003E72 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23359 00003E74 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23360                                  check_one_volume_id:
 23361                                  	;CMP	ah,8
 23362 00003E76 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23363                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23364                                  	; 16/12/2022
 23365 00003E79 74B9                    	je	short NEXTENT ; 19/05/2019
 23366                                  	;JZ	short NEXTENTJ
 23367 00003E7B E8AF03                  	CALL	MatchAttributes
 23368 00003E7E 7407                    	JZ	SHORT RETFF
 23369 00003E80 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23370                                  	; 16/12/2022
 23371                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23372 00003E85 74AD                    	jz	short NEXTENT ; 19/05/2019
 23373                                  RETFF:
 23374 00003E87 C42E[8A05]              	LES	BP,[THISDPB]
 23375                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23376                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23377                                  	; 15/12/2022
 23378 00003E8B 268A6600                	MOV	AH,[ES:BP]
 23379                                  SETESRET:
 23380 00003E8F 16                      	PUSH	SS
 23381 00003E90 07                      	POP	ES
 23382 00003E91 C3                      	retn
 23383                                  
 23384                                  ;----------------------------------------------------------------------------
 23385                                  ;
 23386                                  ; Procedure Name : MetaCompare
 23387                                  ;
 23388                                  ; Inputs:
 23389                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23390                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23391                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23392                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23393                                  ; Function:
 23394                                  ;	Compare FCB style names allowing for ? match to any char
 23395                                  ; Outputs:
 23396                                  ;	Zero if match else NZ
 23397                                  ; Destroys CX,SI,DI all others preserved
 23398                                  ;----------------------------------------------------------------------------
 23399                                  
 23400                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23401                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23402                                  
 23403                                  MetaCompare:
 23404 00003E92 B90B00                  	MOV	CX,11
 23405                                  WILDCRD:
 23406 00003E95 F3A6                    	REPE	CMPSB
 23407 00003E97 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23408                                  CHECK_META:
 23409 00003E99 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23410 00003E9E 74F5                    	JZ	short WILDCRD
 23411                                  MetaRet:
 23412 00003EA0 C3                       	retn				; Zero set, Match
 23413                                  
 23414                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23415                                  ;----------------------------------------------------------------------------
 23416                                  ;
 23417                                  ; Procedure Name : NEXTENTRY
 23418                                  ;
 23419                                  ; Inputs:
 23420                                  ;	Same as outputs of GETENTRY, above
 23421                                  ; Function:
 23422                                  ;	Update BX, and [LASTENT] for next directory entry.
 23423                                  ;	Carry set if no more.
 23424                                  ;----------------------------------------------------------------------------
 23425                                  
 23426                                  NEXTENTRY:
 23427                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23428                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23429                                  
 23430                                  	; 19/05/2019 - Retro DOS v4.0
 23431                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23432                                  
 23433                                  	; 27/07/2018 - Retro DOS v3.0
 23434                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23435                                  	; 15/03/2018 - Retro DOS v2.0
 23436                                  
 23437 00003EA1 A1[4803]                	MOV	AX,[LASTENT]
 23438 00003EA4 3B06[DA05]              	CMP	AX,[ENTLAST]
 23439 00003EA8 7422                    	JZ	short NONE
 23440 00003EAA 40                      	INC	AX
 23441                                  	;ADD	BX,32
 23442 00003EAB 8D5F20                  	LEA	BX,[BX+32]
 23443 00003EAE 39D3                    	CMP	BX,DX
 23444                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23445                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23446                                  	; 16/12/2022
 23447 00003EB0 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23448 00003EB2 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23449 00003EB6 FEC3                    	INC	BL
 23450 00003EB8 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23451 00003EBC 7215                    	JB	short SAMECLUS
 23452 00003EBE 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23453 00003EC2 E8C816                  	call	IsEOF
 23454 00003EC5 7305                    	JAE	short NONE
 23455                                  	; 23/07/2019
 23456 00003EC7 83FB02                  	CMP	BX,2
 23457                                  	;JB	short NONE
 23458                                  	;JMP	short GETENT
 23459                                  	; 16/12/2022
 23460 00003ECA 732D                    	jnb	short GETENT
 23461                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23462                                  	;JB	short NONE
 23463                                  	;JMP	short GETENT
 23464                                  NONE:
 23465 00003ECC F9                      	STC
 23466 00003ECD C3                      	retn
 23467                                  HAVIT:
 23468 00003ECE A3[4803]                	MOV	[LASTENT],AX
 23469 00003ED1 F8                      	CLC
 23470                                  nextentry_retn:
 23471 00003ED2 C3                      	retn
 23472                                  SAMECLUS:
 23473 00003ED3 881E[7305]              	MOV	[SECCLUSPOS],BL
 23474 00003ED7 A3[4803]                	MOV	[LASTENT],AX
 23475 00003EDA 1E                      	PUSH	DS
 23476 00003EDB C53E[E205]              	LDS	DI,[CURBUF]
 23477                                  	; 19/05/2019
 23478                                  	; MSDOS 6.0
 23479                                  	;;mov	dx,[di+8]
 23480                                  	; 23/09/2023
 23481                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23482                                  ;hkn; SS override
 23483                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23484                                  	; 23/09/2023
 23485 00003EDF 8B7508                  	mov	si,[di+BUFFINFO.buf_sector+2]	
 23486                                  	
 23487                                  	;mov	dx,[di+6]
 23488 00003EE2 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23489                                  	;inc	dx ; MSDOS 3.3
 23490                                  	; MSDOS 6.0
 23491                                  	;ADD	DX,1				;AN000; >32mb
 23492                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23493                                  	; 23/09/2023
 23494 00003EE5 42                      	inc	dx
 23495 00003EE6 7501                    	jnz	short nextexntry_fc
 23496 00003EE8 46                      	inc	si
 23497                                  	;inc	word [SS:HIGH_SECTOR]
 23498                                  nextexntry_fc:
 23499                                  	; 23/09/2023
 23500 00003EE9 368936[0706]            	mov	[SS:HIGH_SECTOR],si
 23501                                  	; MSDOS 3.3 & MSDOS 6.0
 23502 00003EEE 1F                      	POP	DS
 23503 00003EEF E844F8                  	call	FIRSTCLUSTER
 23504 00003EF2 31DB                    	XOR	BX,BX
 23505 00003EF4 EB23                    	JMP	short SETENTRY
 23506                                  
 23507                                  ;----------------------------------------------------------------------------
 23508                                  ;
 23509                                  ; Procedure Name : GETENTRY
 23510                                  ;
 23511                                  ; Inputs:
 23512                                  ;	[LASTENT] has directory entry
 23513                                  ;	ES:BP points to drive parameters
 23514                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23515                                  ; Function:
 23516                                  ;	Locates directory entry in preparation for search
 23517                                  ;	GETENT provides entry for passing desired entry in AX
 23518                                  ; Outputs:
 23519                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23520                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23521                                  ;	[LASTENT] = New directory entry number
 23522                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23523                                  ;	Carry set if error (currently user FAILed to I 24)
 23524                                  ;----------------------------------------------------------------------------
 23525                                  
 23526                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23527                                  GETENTRY:
 23528                                  	; 27/07/2018 - Retro DOS v3.0
 23529 00003EF6 A1[4803]                	MOV	AX,[LASTENT]
 23530                                  
 23531                                  	;entry	GETENT
 23532                                  GETENT:
 23533 00003EF9 A3[4803]                	MOV	[LASTENT],AX
 23534                                  ;
 23535                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23536                                  ; directory.
 23537                                  ;
 23538 00003EFC B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23539 00003EFE D3C0                    	rol	ax,cl			; keep hight order bits
 23540 00003F00 89C2                    	mov	dx,ax
 23541                                  	; 19/05/2019 - Retro DOS v4.0
 23542                                  	;and	ax,0FFE0h
 23543                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23544                                  	;and	ax,~(32-1)		; mask off high order bits
 23545                                  	; 16/12/2022
 23546 00003F02 24E0                    	and	al,0E0h ; ~31
 23547 00003F04 83E21F                  	and	dx,1Fh
 23548                                  	;and	dx,32-1			; mask off low order bits
 23549                                  ;
 23550                                  ; DX:AX contain the byte offset of the required directory entry from the
 23551                                  ; beginning of the directory. Convert this to a sector number. Round the
 23552                                  ; sector size down to a multiple of 32.
 23553                                  ;
 23554                                  	;mov	bx,[es:bp+2]
 23555 00003F07 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23556 00003F0B 80E3E0                  	and	bl,0E0h
 23557                                  	;AND	BL,255-31		; Must be multiple of 32
 23558 00003F0E F7F3                    	DIV	BX
 23559 00003F10 89D3                    	MOV	BX,DX			; Position within sector
 23560 00003F12 53                      	PUSH	BX
 23561 00003F13 E8CCF7                  	call	DIRREAD
 23562 00003F16 5B                      	POP	BX
 23563                                  	;retc
 23564 00003F17 72B9                    	jc	short nextentry_retn	
 23565                                  SETENTRY:
 23566 00003F19 8B16[E205]              	MOV	DX,[CURBUF]
 23567                                  	;add	dx,16 ; MSDOS 3.3
 23568                                  	;add	dx,20 ; MSDOS 6.0 
 23569 00003F1D 83C214                  	ADD	DX,BUFINSIZ
 23570 00003F20 01D3                    	ADD	BX,DX
 23571                                  	;add	dx,[es:bp+2]
 23572 00003F22 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23573                                  	; 29/12/2022
 23574                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23575 00003F26 F8                      	clc
 23576 00003F27 C3                      	retn
 23577                                  
 23578                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23579                                  ;----------------------------------------------------------------------------
 23580                                  ;
 23581                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23582                                  ;
 23583                                  ; Inputs:
 23584                                  ;	BX cluster number of start of directory
 23585                                  ;	ES:BP Points to DPB
 23586                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23587                                  ; Function:
 23588                                  ;	Set up a directory search
 23589                                  ; Outputs:
 23590                                  ;	[DIRSTART] = BX
 23591                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23592                                  ;	Carry set if error (currently user FAILed to I 24)
 23593                                  ; destroys AX,DX,BX
 23594                                  ;----------------------------------------------------------------------------
 23595                                  
 23596                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23597                                  SETDIRSRCH:
 23598 00003F28 09DB                    	OR	BX,BX
 23599 00003F2A 7437                    	JZ	short SETROOTSRCH
 23600 00003F2C 891E[C205]              	MOV	[DIRSTART],BX
 23601                                  	;mov	al,[es:bp+4]
 23602 00003F30 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23603 00003F34 FEC0                    	INC	AL
 23604 00003F36 A2[7705]                	MOV	[CLUSFAC],AL
 23605                                  
 23606                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23607                                  	;SAVE	<SI>
 23608 00003F39 56                      	push	si
 23609                                  	;test	byte [FastOpenFlg],2
 23610 00003F3A F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23611 00003F3F 7507                    	JNZ	short UNP_OK
 23612                                  
 23613                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23614                                  	;invoke	UNPACK
 23615 00003F41 E86016                  	call	UNPACK
 23616 00003F44 7302                    	JNC	short UNP_OK
 23617                                  	;RESTORE <SI>
 23618 00003F46 5E                      	pop	si
 23619                                  	;return
 23620 00003F47 C3                      	retn
 23621                                  
 23622                                  UNP_OK:
 23623 00003F48 893E[BC05]              	MOV	[CLUSNUM],DI
 23624 00003F4C 89DA                    	MOV	DX,BX
 23625 00003F4E 30DB                    	XOR	BL,BL
 23626 00003F50 881E[7305]              	MOV	[SECCLUSPOS],BL
 23627                                  	;invoke	FIGREC
 23628 00003F54 E8F60E                  	call	FIGREC
 23629                                  	;RESTORE <SI>
 23630 00003F57 5E                      	pop	si
 23631                                  	
 23632                                  	; 19/05/2019 - Retro DOS v4.0
 23633                                  
 23634                                  	; MSDOS 6.0
 23635                                  	;PUSH	DX			   ;AN000; >32mb
 23636                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23637                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23638                                  	;POP	DX			   ;AN000; >32mb
 23639                                  
 23640                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23641                                  	;push	dx
 23642                                  	;mov	dx,[HIGH_SECTOR]
 23643                                  	;mov	[DIRSEC+2],dx
 23644                                  	;pop	dx
 23645                                  	;MOV	[DIRSEC],dx
 23646                                  	; 16/12/2022
 23647 00003F58 A1[0706]                	mov	ax,[HIGH_SECTOR]
 23648 00003F5B A3[C005]                	mov	[DIRSEC+2],AX
 23649 00003F5E 8916[BE05]              	MOV	[DIRSEC],DX
 23650                                  
 23651                                  	; 16/12/2022
 23652                                  	; cf=0 (at the return of FIGREC)
 23653                                  	;CLC
 23654 00003F62 C3                      	retn
 23655                                  
 23656                                  	;entry	SETROOTSRCH
 23657                                  SETROOTSRCH:
 23658 00003F63 31C0                    	XOR	AX,AX
 23659 00003F65 A3[C205]                	MOV	[DIRSTART],AX
 23660                                  	; 22/09/2023
 23661 00003F68 A3[C005]                	mov	[DIRSEC+2],ax ; 0
 23662 00003F6B A2[7305]                	MOV	[SECCLUSPOS],AL
 23663 00003F6E 48                      	DEC	AX
 23664 00003F6F A3[BC05]                	MOV	[CLUSNUM],AX
 23665                                  	;mov	ax,[es:bp+0Bh]
 23666 00003F72 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23667                                  	; 19/05/2019
 23668                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23669                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23670 00003F76 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23671 00003F7A 29D0                    	SUB	AX,DX
 23672 00003F7C A2[7705]                	MOV	[CLUSFAC],AL
 23673 00003F7F 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23674                                  	; 22/09/2023
 23675                                  	; MSDOS 6.0
 23676                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23677 00003F83 F8                      	CLC
 23678 00003F84 C3                      	retn
 23679                                  
 23680                                  ;============================================================================
 23681                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23682                                  ;============================================================================
 23683                                  ; 27/07/2018 - Retro DOS v3.0
 23684                                  ; 19/05/2019 - Retro DOS v4.0 
 23685                                  
 23686                                  ;	TITLE	DIR2 - Directory and path cracking
 23687                                  ;	NAME	Dir2
 23688                                  
 23689                                  ;Break	<GETPATH -- PARSE A WFP>
 23690                                  ;----------------------------------------------------------------------------
 23691                                  ;
 23692                                  ; Procedure Name : GETPATH
 23693                                  ;
 23694                                  ; Inputs:
 23695                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23696                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23697                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23698                                  ;		( = -1 if current dir not involved, else
 23699                                  ;		 Points to first char after last "/" of current dir part)
 23700                                  ;	[THISCDS] Points to CDS being used
 23701                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23702                                  ;	[NoSetDir] set
 23703                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23704                                  ; Function:
 23705                                  ;	Crack the path
 23706                                  ; Outputs:
 23707                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23708                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23709                                  ;	ID1 field of [THISCDS] updated appropriately
 23710                                  ;	[ATTRIB] = [SATTRIB]
 23711                                  ;	ES:BP Points to DPB
 23712                                  ;	Carry set if bad path
 23713                                  ;	   SI Points to path element causing failure
 23714                                  ;	   Zero set
 23715                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23716                                  ;	      start a search on the last directory
 23717                                  ;	      CL is zero if there is a bad name in the path
 23718                                  ;	      CL is non-zero if the name was simply not found
 23719                                  ;		 [ENTFREE] may have free spot in directory
 23720                                  ;		 [NAME1] is the name.
 23721                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23722                                  ;	   Zero reset
 23723                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23724                                  ;		or path too long or malformed path
 23725                                  ;	ELSE
 23726                                  ;	   [CurBuf] = -1 if root directory
 23727                                  ;	   [CURBUF] contains directory record with match
 23728                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23729                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23730                                  ;	   AH = device ID
 23731                                  ;	      bit 7 of AH set if device SI and BX
 23732                                  ;	      will point DOSGROUP relative The firclus
 23733                                  ;	      field of the device entry contains the device pointer
 23734                                  ;	   [NAME1] Has name looked for
 23735                                  ;	   If last element is a directory zero is set and:
 23736                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23737                                  ;	      are set up to start a search on it.
 23738                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23739                                  ;	      like that for a file (except for zero flag)
 23740                                  ;	   If last element is a file zero is reset
 23741                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23742                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23743                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23744                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23745                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23746                                  ; DS preserved, Others destroyed
 23747                                  ;---------------------------------------------------------------------------
 23748                                  
 23749                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23750                                  ;hkn; DS already set up at this point.
 23751                                  
 23752                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23753                                  GETPATH:
 23754                                  	;mov	word [CREATING],0E500h
 23755 00003F85 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23756                                  
 23757                                  ; Same as GetPath only CREATING and DELALL already set
 23758                                  
 23759                                  	;entry	GetPathNoSet
 23760                                  GetPathNoSet:
 23761                                  	;mov	byte [EXTERR_LOCUS],2	
 23762 00003F8B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23763 00003F90 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23764                                  
 23765                                  ; See if the input indicates a device that has already been detected. If so,
 23766                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23767                                  
 23768 00003F96 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23769                                  	;cmp	word [DI+1],5C3Ah
 23770                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23771 00003F9A 817D013A5C              	cmp	word [DI+1],':\'
 23772 00003F9F 7438                    	JZ	short CrackIt
 23773                                  
 23774                                  ; Let ChkDev find it in the device list
 23775                                  
 23776 00003FA1 83C703                  	ADD	DI,3
 23777                                  	; 18/08/2018
 23778                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23779                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23780                                  	; 16/12/2022
 23781                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23782 00003FA4 E8AB00                  	CALL	CHKDEV
 23783 00003FA7 722E                    	JC	short InternalError
 23784                                  
 23785                                  Build_devJ:
 23786 00003FA9 A0[6D05]                	MOV	AL,[SATTRIB]
 23787 00003FAC A2[6B05]                	MOV	[ATTRIB],AL
 23788                                  	;mov	byte [EXTERR_LOCUS],1
 23789 00003FAF C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23790                                  					; "finding" a char device
 23791                                  					; set LOCUS to Unknown. This makes
 23792                                  					; certain idiotic problems reported
 23793                                  					; by a certain 3 letter OEM go away.
 23794                                  
 23795                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23796                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23797                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23798                                  ; wfp into the share set.
 23799                                  ;
 23800                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23801                                  ; non-space seen +1.  This position is kept in DX.
 23802                                  
 23803                                  ;hkn; SS is DOSDATA
 23804 00003FB4 16                      	push	ss
 23805 00003FB5 07                      	pop	es
 23806                                  
 23807                                  ;hkn; NAME1 is in DOSDATA
 23808 00003FB6 BE[4B05]                	mov	si,NAME1
 23809 00003FB9 8B3E[B205]              	mov	di,[WFP_START]
 23810 00003FBD 89FA                    	mov	dx,di
 23811 00003FBF B90800                  	mov	cx,8			; 8 chars in device name
 23812                                  MoveLoop:
 23813 00003FC2 AC                      	lodsb
 23814 00003FC3 AA                      	stosb
 23815 00003FC4 3C20                    	cmp	al," "
 23816 00003FC6 7402                    	jz	short NoSave
 23817                                  
 23818 00003FC8 89FA                    	mov	dx,di
 23819                                  NoSave:
 23820 00003FCA E2F6                    	loop	MoveLoop
 23821                                  
 23822                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23823                                  ; at this point.
 23824                                  
 23825 00003FCC 89D7                    	mov	di,dx
 23826 00003FCE C60500                  	mov	byte [di],0		; end of string
 23827 00003FD1 E8C502                  	call	Build_device_ent	; Clears carry sets zero
 23828 00003FD4 FEC0                    	INC	AL			; reset zero
 23829 00003FD6 C3                      	retn
 23830                                  
 23831                                  InternalError:
 23832                                  InternalError_loop:
 23833 00003FD7 EBFE                    	JMP	short InternalError_loop	; freeze
 23834                                  
 23835                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23836                                  
 23837                                  CrackIt:
 23838 00003FD9 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23839 00003FDD 83FEFF                  	CMP	SI,-1			; valid?
 23840 00003FE0 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23841 00003FE2 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23842                                  LOOK_SING:
 23843                                  	;mov	byte [ATTRIB],16h
 23844 00003FE5 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23845                                  					; Attributes to search through Dirs
 23846 00003FEA C43E[A205]              	LES	DI,[THISCDS]
 23847 00003FEE B8FFFF                  	MOV	AX,-1
 23848                                  	;mov	bx,[es:di+73]
 23849 00003FF1 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23850 00003FF5 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23851                                  
 23852                                  ; AX = -1
 23853                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23854                                  ;      has been uncertainly changed.
 23855                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23856                                  ;      may be -1 if no current directory part has been used.
 23857                                  
 23858 00003FF9 39C6                    	CMP	SI,AX			; if Current directory is not part
 23859 00003FFB 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 23860 00003FFD 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23861                                  
 23862                                  ; DOS 3.3  6/25/86
 23863 00003FFF 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 23864                                  	;test	byte [FastOpenFlg],1
 23865 00004001 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23866 00004006 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23867 00004008 06                      	PUSH	ES			; save registers
 23868 00004009 57                      	PUSH	DI
 23869 0000400A 51                      	PUSH	CX
 23870 0000400B FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23871 0000400E 56                      	PUSH	SI
 23872 0000400F 53                      	PUSH	BX
 23873                                  
 23874 00004010 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23875 00004014 8B36[B205]              	MOV	SI,[WFP_START]
 23876                                  
 23877                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23878 00004018 BB[300D]                	MOV	BX,FastOpenTable
 23879 0000401B BF[460D]                	MOV	DI,Dir_Info_Buff
 23880 0000401E B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23881                                  	;mov	al,1
 23882 00004021 B001                    	MOV	AL,FONC_Look_up
 23883 00004023 1E                      	PUSH	DS
 23884 00004024 07                      	POP	ES
 23885                                  	;call	far [BX+2]
 23886 00004025 FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23887 00004028 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23888                                  					; Go to Got_Srch_cluster
 23889                                  	; 29/12/2022
 23890                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 23891                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23892                                  	;stc
 23893                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 23894                                  
 23895 0000402A 803C01                  	cmp	byte [si],1
 23896                                  GO_Chk_end1:	; 29/12/2022
 23897 0000402D F5                      	cmc 
 23898                                  	; [si] = 0 -> cf = 0
 23899                                  	; [si] > 0 -> cf = 1
 23900                                  
 23901                                  ;GO_Chk_end1:
 23902                                  	; 29/12/2022
 23903                                  	;clc
 23904                                  
 23905                                  GO_Chk_end:				; restore registers
 23906 0000402E 5B                      	POP	BX
 23907 0000402F 5E                      	POP	SI
 23908 00004030 8F44FF                  	POP	word [SI-1]
 23909 00004033 59                      	POP	CX
 23910 00004034 5F                      	POP	DI
 23911 00004035 07                      	POP	ES
 23912 00004036 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23913                                  
 23914                                  ; DOS 3.3  6/25/86
 23915                                  ;
 23916                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23917                                  ; of path and go crack from root.
 23918                                  
 23919                                  NO_CURR_D:
 23920 00004038 8B36[B205]              	MOV	SI,[WFP_START]
 23921 0000403C 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23922 0000403F C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23923 00004043 EB3B                    	JMP	short ROOTPATH
 23924                                  
 23925                                  ; We are able to crack from the current directory part. Go set up for search
 23926                                  ; of specified cluster.
 23927                                  
 23928                                  GOT_SEARCH_CLUSTER:
 23929 00004045 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23930 00004049 E8DCFE                  	call	SETDIRSRCH
 23931                                  	;JC	short SETFERR
 23932                                  	;JMP	short FINDPATH
 23933                                  	; 16/12/2022
 23934 0000404C 7343                    	jnc	short FINDPATH ; 17/08/2018
 23935                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23936                                  	;JC	short SETFERR
 23937                                  	;JMP	short FINDPATH
 23938                                  SETFERR:
 23939 0000404E 30C9                    	XOR	CL,CL			; set zero
 23940 00004050 F9                      	STC
 23941 00004051 C3                      	retn
 23942                                  
 23943                                  ;---------------------------------------------------------------------------
 23944                                  ;
 23945                                  ; Procedure Name : ChkDev
 23946                                  ;
 23947                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23948                                  ;   device.
 23949                                  ; Blasts CX,SI,DI,AX,BX
 23950                                  ;---------------------------------------------------------------------------
 23951                                  
 23952                                  CHKDEV:
 23953 00004052 89FE                    	MOV	SI,DI
 23954 00004054 8CD7                    	MOV	DI,SS
 23955 00004056 8EC7                    	MOV	ES,DI
 23956                                  
 23957 00004058 BF[4B05]                	MOV	DI,NAME1
 23958 0000405B B90900                  	MOV	CX,9
 23959                                  TESTLOOP:
 23960 0000405E E84A10                  	call	GETLET
 23961                                  
 23962 00004061 3C2E                    	CMP	AL,'.'
 23963 00004063 740E                    	JZ	short TESTDEVICE
 23964 00004065 E89910                  	call	PATHCHRCMP
 23965 00004068 7407                    	JZ	short NOTDEV
 23966 0000406A 08C0                    	OR	AL,AL
 23967 0000406C 7405                    	JZ	short TESTDEVICE
 23968                                  
 23969 0000406E AA                      	STOSB
 23970 0000406F E2ED                    	LOOP	TESTLOOP
 23971                                  NOTDEV:
 23972 00004071 F9                      	STC
 23973 00004072 C3                      	retn
 23974                                  
 23975                                  TESTDEVICE:
 23976                                  	;ADD	CX,2
 23977                                  	; 23/09/2023
 23978 00004073 41                      	inc	cx
 23979 00004074 41                      	inc	cx
 23980 00004075 B020                    	MOV	AL,' '
 23981 00004077 F3AA                    	REP	STOSB
 23982 00004079 8CD0                    	MOV	AX,SS
 23983 0000407B 8ED8                    	MOV	DS,AX
 23984                                  	;call	DEVNAME
 23985                                  	;retn
 23986                                  	; 18/12/2022
 23987 0000407D E9BA01                  	jmp	DEVNAME
 23988                                  
 23989                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23990                                  ;----------------------------------------------------------------------------
 23991                                  ;
 23992                                  ; Procedure Name : ROOTPATH,FINDPATH
 23993                                  ;
 23994                                  ; Inputs:
 23995                                  ;	Same as FINDPATH but,
 23996                                  ;	SI Points to asciz string of path which is assumed to start at
 23997                                  ;		the root (no leading '/').
 23998                                  ; Function:
 23999                                  ;	Search from root for path
 24000                                  ; Outputs:
 24001                                  ;	Same as FINDPATH but:
 24002                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24003                                  ;	[NoSetDir] is ignored.
 24004                                  ;----------------------------------------------------------------------------
 24005                                  
 24006                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24007                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24008                                  
 24009                                  ROOTPATH:
 24010 00004080 E8E0FE                  	call	SETROOTSRCH
 24011 00004083 803C00                  	CMP	BYTE [SI],0
 24012 00004086 7509                    	JNZ	short FINDPATH
 24013                                  
 24014                                  ; Root dir specified
 24015 00004088 A0[6D05]                	MOV	AL,[SATTRIB]
 24016 0000408B A2[6B05]                	MOV	[ATTRIB],AL
 24017 0000408E 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24018                                  					; (dir), clears carry.
 24019 00004090 C3                      	retn
 24020                                  
 24021                                  ; Inputs:
 24022                                  ;	[ATTRIB] Set to get through directories
 24023                                  ;	[SATTRIB] Set to find last element
 24024                                  ;	ES:BP Points to DPB
 24025                                  ;	SI Points to asciz string of path (no leading '/').
 24026                                  ;	[SECCLUSPOS] = 0
 24027                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24028                                  ;	[CLUSNUM] = Cluster # of next cluster
 24029                                  ;	[CLUSFAC] = Sectors per cluster
 24030                                  ;	[NoSetDir] set
 24031                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24032                                  ;		( = -1 if current dir not involved, else
 24033                                  ;		 Points to first char after last "/" of current dir part)
 24034                                  ;	[THISCDS] Points to CDS being used
 24035                                  ;	[CREATING] and [DELALL] set
 24036                                  ; Function:
 24037                                  ;	Parse path name
 24038                                  ; Outputs:
 24039                                  ;	ID1 field of [THISCDS] updated appropriately
 24040                                  ;	[ATTRIB] = [SATTRIB]
 24041                                  ;	ES:BP Points to DPB
 24042                                  ;	[THISDPB] = ES:BP
 24043                                  ;	Carry set if bad path
 24044                                  ;	   SI Points to path element causing failure
 24045                                  ;	   Zero set
 24046                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24047                                  ;	      start a search on the last directory
 24048                                  ;	      CL is zero if there is a bad name in the path
 24049                                  ;	      CL is non-zero if the name was simply not found
 24050                                  ;		 [ENTFREE] may have free spot in directory
 24051                                  ;		 [NAME1] is the name.
 24052                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24053                                  ;	   Zero reset
 24054                                  ;	      File in middle of path or bad name in path
 24055                                  ;		or path too long or malformed path
 24056                                  ;	ELSE
 24057                                  ;	   [CURBUF] contains directory record with match
 24058                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24059                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24060                                  ;	   [NAME1] Has name looked for
 24061                                  ;	   AH = device ID
 24062                                  ;	      bit 7 of AH set if device SI and BX
 24063                                  ;	      will point DOSGROUP relative The firclus
 24064                                  ;	      field of the device entry contains the device pointer
 24065                                  ;	   If last element is a directory zero is set and:
 24066                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24067                                  ;	      are set up to start a search on it,
 24068                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24069                                  ;	      like that for a file (except for zero flag)
 24070                                  ;	   If last element is a file zero is reset
 24071                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24072                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24073                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24074                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24075                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24076                                  ; Destroys all other registers
 24077                                  
 24078                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24079                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24080                                  
 24081                                      	;entry	FINDPATH
 24082                                  FINDPATH:
 24083 00004091 06                      	PUSH	ES			; Save ES:BP
 24084 00004092 56                      	PUSH	SI
 24085 00004093 89F7                    	MOV	DI,SI
 24086 00004095 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24087 00004099 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24088 0000409E 740E                    	JZ	short NOIDS		; No current dir part
 24089 000040A0 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24090 000040A4 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24091 000040A6 C43E[A205]              	LES	DI,[THISCDS]
 24092                                  	;mov	[es:di+73],cx
 24093 000040AA 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24094                                  NOIDS:
 24095                                  
 24096                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24097                                  ; character in the string. CX,DI may be destroyed.
 24098                                  ;
 24099                                  ;	invoke	NAMETRANS
 24100                                  ;	MOV	CL,AL
 24101                                  ;
 24102                                  ; The above is the slow method. The name has *already* been munged by
 24103                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24104                                  ; the name until ., \ or 0 is hit.
 24105                                  
 24106 000040AE 8CD0                    	MOV	AX,SS
 24107 000040B0 8EC0                    	MOV	ES,AX
 24108                                  
 24109                                  ;hkn; Name1 is in DOSDATA
 24110 000040B2 BF[4B05]                	MOV	DI,NAME1
 24111 000040B5 B82020                  	MOV	AX,'  ' ; 2020h
 24112 000040B8 AA                      	STOSB
 24113 000040B9 AB                      	STOSW
 24114 000040BA AB                      	STOSW
 24115 000040BB AB                      	STOSW
 24116 000040BC AB                      	STOSW
 24117 000040BD AB                      	STOSW
 24118                                  
 24119                                  ;hkn; Name1 is in DOSDATA
 24120 000040BE BF[4B05]                	MOV	DI,NAME1
 24121 000040C1 30E4                    	XOR	AH,AH			; bits for CL
 24122                                  GetNam:
 24123                                  	; 19/05/2019 - Retro DOS v4.0
 24124                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24125                                  
 24126                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24127                                  	; 16/12/2022
 24128                                  	;inc	cl ; not required !	
 24129                                  	
 24130 000040C3 AC                      	LODSB
 24131 000040C4 3C2E                    	CMP	AL,'.'	; 2Eh
 24132 000040C6 7412                    	JZ	short _SetExt
 24133 000040C8 08C0                    	OR	AL,AL
 24134 000040CA 7424                    	JZ	short _GetDone
 24135 000040CC 3C5C                    	CMP	AL,'\'	; 5Ch
 24136 000040CE 7420                    	JZ	short _GetDone
 24137 000040D0 3C3F                    	CMP	AL,'?'	; 3Fh
 24138 000040D2 7503                    	JNZ	short StoNam
 24139 000040D4 80CC01                  	OR	AH,1
 24140                                  StoNam: 
 24141 000040D7 AA                      	STOSB
 24142 000040D8 EBE9                    	JMP	short GetNam
 24143                                  _SetExt:
 24144 000040DA BF[5305]                	MOV	DI,NAME1+8
 24145                                  GetExt:
 24146 000040DD AC                      	LODSB
 24147 000040DE 08C0                    	OR	AL,AL
 24148 000040E0 740E                    	JZ	short _GetDone
 24149 000040E2 3C5C                    	CMP	AL,'\'
 24150 000040E4 740A                    	JZ	short _GetDone
 24151 000040E6 3C3F                    	CMP	AL,'?'
 24152 000040E8 7503                    	JNZ	short StoExt
 24153 000040EA 80CC01                  	OR	AH,1
 24154                                  StoExt: 
 24155 000040ED AA                      	STOSB
 24156 000040EE EBED                    	JMP	short GetExt
 24157                                  _GetDone:
 24158 000040F0 4E                      	DEC	SI
 24159 000040F1 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24160 000040F3 80C980                  	OR	CL,80H
 24161 000040F6 5F                      	POP	DI			; Start of this element
 24162 000040F7 07                      	POP	ES			; Restore ES:BP
 24163 000040F8 39FE                    	CMP	SI,DI
 24164 000040FA 7503                    	JNZ	short check_device
 24165 000040FC E9E200                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24166                                  check_device:
 24167 000040FF 56                      	PUSH	SI			; Start of next element
 24168                                  	;MOV	AL,[SI]
 24169                                  	;OR	AL,AL
 24170                                  	; 23/09/2023
 24171 00004100 803C00                  	cmp	byte [si],0
 24172 00004103 7508                    	JNZ	short NOT_LAST
 24173                                  
 24174                                  ; for last element of the path switch to the correct search attributes
 24175                                  
 24176 00004105 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24177 00004109 883E[6B05]              	MOV	[ATTRIB],BH
 24178                                  
 24179                                  NOT_LAST:
 24180                                  
 24181                                  ; check name1 to see if we have a device...
 24182                                  
 24183 0000410D 06                      	PUSH	ES			; Save ES:BP
 24184                                  
 24185                                  ;hkn; SS is DOSDATA
 24186                                  	;context ES
 24187 0000410E 16                      	push	ss
 24188 0000410F 07                      	pop	es
 24189 00004110 E82701                  	call	DEVNAME 		; blast BX
 24190 00004113 07                      	POP	ES			; Restore ES:BP
 24191 00004114 720B                    	JC	short FindFile		; Not a device
 24192 00004116 08C0                    	OR	AL,AL			; Test next char again
 24193 00004118 7403                    	JZ	short GO_BDEV
 24194 0000411A E9C800                  	JMP	FILEINPATH		; Device name in middle of path
 24195                                  
 24196                                  GO_BDEV:
 24197 0000411D 5E                      	POP	SI			; Points to NUL at end of path
 24198 0000411E E988FE                  	JMP	Build_devJ
 24199                                  
 24200                                  FindFile:
 24201                                  ;;;; 7/28/86
 24202 00004121 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24203 00004126 7505                    	JNZ	short NOE5		; no
 24204 00004128 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24205                                  NOE5:
 24206                                  ;;;; 7/28/86
 24207 0000412D 57                      	PUSH	DI			; Start of this element
 24208 0000412E 06                      	PUSH	ES			; Save ES:BP
 24209 0000412F 51                      	PUSH	CX			; CL return from NameTrans
 24210                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24211                                  
 24212 00004130 E89502                  	CALL	LookupPath		; call fastopen to get dir entry
 24213 00004133 7303                    	JNC	short DIR_FOUND		; found dir entry
 24214                                  
 24215                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24216 00004135 E8AFFC                  	call	FINDENTRY
 24217                                  DIR_FOUND:
 24218 00004138 59                      	POP	CX
 24219 00004139 07                      	POP	ES
 24220 0000413A 5F                      	POP	DI
 24221 0000413B 7303                    	JNC	short LOAD_BUF
 24222 0000413D E9CA00                  	JMP	BADPATHPOP
 24223                                  
 24224                                  LOAD_BUF:
 24225 00004140 C53E[E205]              	LDS	DI,[CURBUF]
 24226                                  	;test	byte [bx+0Bh],10h
 24227 00004144 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24228 00004148 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24229 0000414A E99800                  	JMP	FILEINPATH		; Error or end of path
 24230                                  
 24231                                  ; if we are not setting the directory, then check for end of string
 24232                                  
 24233                                  GO_NEXT:
 24234                                  ;hkn; SS override
 24235 0000414D 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24236 00004153 7423                    	JZ	short SetDir
 24237 00004155 89FA                    	MOV	DX,DI			; Save pointer to entry
 24238 00004157 8CD9                    	MOV	CX,DS
 24239                                  
 24240                                  ;hkn; SS is DOSDATA
 24241                                  	;context DS
 24242 00004159 16                      	push	ss
 24243 0000415A 1F                      	pop	ds
 24244 0000415B 5F                      	POP	DI			; Start of next element
 24245                                  	; 19/05/2019 - Retro DOS v4.0
 24246                                  	; MSDOS 6.0
 24247 0000415C F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24248 00004161 740B                    	JZ	short _nofast			; the FastOpen
 24249 00004163 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24250 00004168 7404                    	JZ	short _nofast			; no
 24251 0000416A 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24252                                  _nofast:
 24253 0000416E 803D00                  	CMP	BYTE [DI],0
 24254                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24255                                  	;;JMP	_SETRET  ; retn		; Got it
 24256                                  	;retn	; 05/09/2018
 24257                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24258                                  	;jmp	_SETRET
 24259                                  	; 16/12/2022
 24260 00004171 7421                    	jz	short _SETRET
 24261                                  
 24262                                  NEXT_ONE:
 24263 00004173 57                      	PUSH	DI			; Put start of next element back on stack
 24264 00004174 89D7                    	MOV	DI,DX
 24265 00004176 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24266                                  SetDir:
 24267 00004178 8B14                    	MOV	DX,[SI] 		; Dir_first
 24268                                  
 24269                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24270 0000417A 1E                      	PUSH	DS		      ; save [curbuf+2]
 24271                                  ;hkn; SS is DOSDATA
 24272 0000417B 16                      	push	ss
 24273 0000417C 1F                      	pop	ds		      ; set DS Dosgroup
 24274                                  	;test	byte [FastOpenFlg],2
 24275 0000417D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24276 00004182 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24277 00004184 89D3                    	MOV	BX,DX		      ; not found
 24278 00004186 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24279 0000418A 50                      	PUSH	AX		      ; save device id (AH)
 24280 0000418B E89AFD                  	call	SETDIRSRCH
 24281 0000418E 58                      	POP	AX		      ; restore device id (AH)
 24282 0000418F 83C402                  	ADD	SP,2		      ; pop ds in stack
 24283 00004192 EB37                    	JMP	short FAST_OPEN_SKIP
 24284                                  
 24285                                  	; 16/12/2022
 24286                                  _SETRET:
 24287 00004194 C3                      	retn
 24288                                  
 24289                                  DO_NORMAL:
 24290 00004195 1F                      	POP	DS			; DS = [curbuf + 2]
 24291                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24292                                  
 24293 00004196 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24294 00004198 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24295 0000419A 53                      	PUSH	BX
 24296 0000419B 50                      	PUSH	AX
 24297 0000419C 56                      	PUSH	SI
 24298 0000419D 51                      	PUSH	CX
 24299                                  	;push	word [di+6]
 24300 0000419E FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24301                                  	; 19/05/2019
 24302                                  	; MSDOS 6.0
 24303                                  	;push	word [di+8]
 24304 000041A1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24305 000041A4 89D3                    	MOV	BX,DX
 24306                                  
 24307                                  ;hkn; SS is DOSDATA
 24308                                  	;context DS
 24309 000041A6 16                      	push	ss
 24310 000041A7 1F                      	pop	ds
 24311                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24312 000041A8 E87DFD                  	call	SETDIRSRCH		; the entry sector buffer
 24313                                  	; 19/05/2019
 24314                                  	; MSDOS 6.0
 24315 000041AB 8F06[0706]              	POP	word [HIGH_SECTOR]
 24316 000041AF 5A                      	POP	DX
 24317 000041B0 7203                    	JC	short SKIP_GETB
 24318                                  	; 22/09/2023
 24319                                  	;;mov	byte [ALLOWED],18h
 24320                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 24321                                  	;XOR	AL,AL ; *
 24322                                  	;;invoke GETBUFFR		; Get the entry buffer back
 24323                                  	;call	GETBUFFR
 24324 000041B2 E80118                  	call	GETBUFFER ; * ; pre-read
 24325                                  SKIP_GETB:
 24326 000041B5 59                      	POP	CX
 24327 000041B6 5E                      	POP	SI
 24328 000041B7 58                      	POP	AX
 24329 000041B8 5B                      	POP	BX
 24330 000041B9 7305                    	JNC	short SET_THE_BUF
 24331 000041BB 5F                      	POP	DI			; Start of next element
 24332 000041BC 89FE                    	MOV	SI,DI			; Point with SI
 24333 000041BE EB21                    	JMP	SHORT _BADPATH
 24334                                  
 24335                                  SET_THE_BUF:
 24336 000041C0 E878F5                  	call	SET_BUF_AS_DIR
 24337 000041C3 8B3E[E205]              	MOV	DI,[CURBUF]
 24338 000041C7 01FE                    	ADD	SI,DI			; Get the offsets back
 24339 000041C9 01FB                    	ADD	BX,DI
 24340                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24341                                  FAST_OPEN_SKIP:
 24342 000041CB 5F                      	POP	DI			; Start of next element
 24343 000041CC E89D02                  	CALL	InsertPath		; insert dir entry info
 24344                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24345 000041CF 8A05                    	MOV	AL,[DI]
 24346 000041D1 08C0                    	OR	AL,AL
 24347 000041D3 74BF                    	JZ	short _SETRET		; At end
 24348 000041D5 47                      	INC	DI			; Skip over "/"
 24349 000041D6 89FE                    	MOV	SI,DI			; Point with SI
 24350 000041D8 E8260F                  	call	PATHCHRCMP
 24351 000041DB 7503                    	JNZ	short find_bad_name	; oops
 24352 000041DD E9B1FE                  	JMP	FINDPATH		; Next element
 24353                                  
 24354                                  find_bad_name:
 24355 000041E0 4E                      	DEC	SI			; Undo above INC to get failure point
 24356                                  _BADPATH:
 24357 000041E1 30C9                    	XOR	CL,CL			; Set zero
 24358 000041E3 EB2C                    	JMP	SHORT BADPRET
 24359                                  
 24360                                  FILEINPATH:
 24361 000041E5 5F                      	POP	DI			; Start of next element
 24362                                  
 24363                                  ;hkn; SS is DOSDATA
 24364                                  	;context DS			; Got to from one place with DS gone
 24365 000041E6 16                      	push	ss
 24366 000041E7 1F                      	pop	ds
 24367                                  
 24368                                  ; DOS 3.3 FastOpen
 24369                                  	;test	byte [FastOpenFlg],1
 24370 000041E8 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24371 000041ED 740B                    	JZ	short NO_FAST		; device info to fastopen
 24372                                  	;test	byte [FastOpenFlg],2
 24373 000041EF F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24374 000041F4 7404                    	JZ	short NO_FAST
 24375 000041F6 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24376                                  					 ; success
 24377                                  NO_FAST:
 24378                                  ; DOS 3.3 FastOpen
 24379 000041FA 8A05                    	MOV	AL,[DI]
 24380 000041FC 08C0                    	OR	AL,AL
 24381 000041FE 7404                    	JZ	short INCRET
 24382 00004200 89FE                    	MOV	SI,DI			; Path too long
 24383 00004202 EB0D                    	JMP	SHORT BADPRET
 24384                                  
 24385                                  INCRET:
 24386                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24387                                  
 24388 00004204 E86502                  	CALL   InsertPath		; insert dir entry info
 24389                                  
 24390                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24391 00004207 FEC0                    	INC	AL			; Reset zero
 24392                                  	; 16/12/2022	
 24393                                  ;_SETRET:
 24394 00004209 C3                      	retn
 24395                                  
 24396                                  BADPATHPOP:
 24397 0000420A 5E                      	POP	SI			; Start of next element
 24398 0000420B 8A04                    	MOV	AL,[SI]
 24399 0000420D 89FE                    	MOV	SI,DI			; Start of bad element
 24400 0000420F 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24401                                  BADPRET:
 24402 00004211 A0[6D05]                	MOV	AL,[SATTRIB]
 24403 00004214 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24404 00004217 F9                      	STC
 24405 00004218 C3                      	retn
 24406                                  
 24407                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24408                                  ;---------------------------------------------------------------------------
 24409                                  ;
 24410                                  ; Procedure Name : STARTSRCH
 24411                                  ;
 24412                                  ; Inputs:
 24413                                  ;	[THISDPB] Set
 24414                                  ; Function:
 24415                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24416                                  ; Outputs:
 24417                                  ;	ES:BP = Drive parameters
 24418                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24419                                  ; Destroys ES,BP,AX
 24420                                  ;--------------------------------------------------------------------------
 24421                                  
 24422                                  STARTSRCH:
 24423 00004219 C42E[8A05]              	LES	BP,[THISDPB]
 24424 0000421D 31C0                    	XOR	AX,AX
 24425 0000421F A3[4803]                	MOV	[LASTENT],AX
 24426 00004222 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24427 00004225 48                      	DEC	AX
 24428 00004226 A3[D805]                	MOV	[ENTFREE],AX
 24429 00004229 A3[DA05]                	MOV	[ENTLAST],AX
 24430 0000422C C3                      	retn
 24431                                  
 24432                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24433                                  ;----------------------------------------------------------------------------
 24434                                  ; Procedure Name : MatchAttributes
 24435                                  ;
 24436                                  ; Input:    [Attrib] = attribute to search for
 24437                                  ;	    CH = found attribute
 24438                                  ; Output:   JZ <match>
 24439                                  ;	    JNZ <nomatch>
 24440                                  ; Registers modified: noneski
 24441                                  ;----------------------------------------------------------------------------
 24442                                  
 24443                                  MatchAttributes:
 24444 0000422D 50                      	PUSH	AX
 24445                                  
 24446                                  ;hkn; SS override
 24447 0000422E 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24448 00004232 F6D0                    	NOT	AL			; AL <- SearchSet'
 24449 00004234 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24450                                  	;and	al,16h
 24451 00004236 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24452                                  ;
 24453                                  ; the result is non-zero if an attribute is not in the search set
 24454                                  ; and in the found set and in the important set. This means that we do not
 24455                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24456                                  ;
 24457 00004238 58                      	POP	AX
 24458 00004239 C3                      	retn
 24459                                  
 24460                                  ; 19/05/2019 - Retro DOS v4.0
 24461                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24462                                  
 24463                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24464                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24465                                  
 24466                                  ;Break <DevName - Look for name of device>
 24467                                  ;---------------------------------------------------------------------------
 24468                                  ;
 24469                                  ; Procedure Name : DevName
 24470                                  ;
 24471                                  ; Inputs:
 24472                                  ;	DS,ES:DOSDATA
 24473                                  ;	Filename in NAME1
 24474                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24475                                  ; Function:
 24476                                  ;	Determine if file is in list of I/O drivers
 24477                                  ; Outputs:
 24478                                  ;	Carry set if not a device
 24479                                  ;	ELSE
 24480                                  ;	Zero flag set
 24481                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24482                                  ;	     bits 0-4 set from low byte of attribute word
 24483                                  ;	DEVPT = DWORD pointer to Device header of device
 24484                                  ; BX destroyed, others preserved
 24485                                  ;---------------------------------------------------------------------------
 24486                                  
 24487                                  DEVNAME:
 24488                                  	; 28/07/2018 - Retro DOS v3.0
 24489                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24490                                  
 24491 0000423A 56                      	PUSH	SI
 24492 0000423B 57                      	PUSH	DI
 24493 0000423C 51                      	PUSH	CX
 24494 0000423D 50                      	PUSH	AX
 24495                                  
 24496                                  ; E5 special code
 24497 0000423E FF36[4B05]              	PUSH	WORD [NAME1]
 24498 00004242 803E[4B05]05            	CMP	byte [NAME1],5
 24499 00004247 7505                    	JNZ	short NOKTR
 24500 00004249 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24501                                  NOKTR:
 24502                                  	;test	byte [ATTRIB],8
 24503 0000424E F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24504                                  					; If looking for VOL id don't find devs
 24505 00004253 7521                    	JNZ	short RET31
 24506                                  
 24507                                  ;hkn; NULDEV is in DOSDATA
 24508 00004255 BE[4800]                	MOV	SI,NULDEV
 24509                                  LOOKIO:
 24510                                  	; 21/11/2022
 24511                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24512                                  	; 17/12/2022
 24513                                  	;test	byte [si+5],80h
 24514 00004258 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24515                                  	;;test	word [si+4],8000h
 24516                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24517 0000425C 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24518 0000425E 89F0                    	MOV	AX,SI
 24519                                  	;add	si,10
 24520 00004260 83C60A                  	ADD	SI,SYSDEV.NAME
 24521                                  
 24522                                  ;hkn; NAME1 is in DOSDATA
 24523 00004263 BF[4B05]                	MOV	DI,NAME1
 24524 00004266 B90400                  	MOV	CX,4			; All devices are 8 letters
 24525 00004269 F3A7                    	REPE	CMPSW			; Check for name in list
 24526 0000426B 89C6                    	MOV	SI,AX
 24527 0000426D 7415                    	JZ	short IOCHK		; Found it?
 24528                                  SKIPDEV:
 24529 0000426F C534                    	LDS	SI,[SI]			; Get address of next device
 24530 00004271 83FEFF                  	CMP	SI,-1			; At end of list?
 24531 00004274 75E2                    	JNZ	short LOOKIO
 24532                                  RET31:	
 24533 00004276 F9                      	STC				; Not found
 24534                                  RETNV:	
 24535 00004277 8CD1                    	MOV	CX,SS
 24536 00004279 8ED9                    	MOV	DS,CX
 24537                                  
 24538 0000427B 8F06[4B05]              	POP	WORD [NAME1]
 24539 0000427F 58                      	POP	AX
 24540 00004280 59                      	POP	CX
 24541 00004281 5F                      	POP	DI
 24542 00004282 5E                      	POP	SI
 24543 00004283 C3                      	RETN
 24544                                  
 24545                                  IOCHK:
 24546                                  ;hkn; SS override for DEVPT
 24547 00004284 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24548                                  	;mov	bh,[si+4]
 24549 00004289 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24550 0000428C 80CFC0                  	OR	BH,0C0h
 24551 0000428F 80E7DF                  	and	bh,0DFh
 24552                                  	;AND	BH,~(020h)		; Clears Carry
 24553 00004292 368936[9A05]            	MOV	[SS:DEVPT],SI
 24554 00004297 EBDE                    	JMP	short RETNV
 24555                                  
 24556                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24557                                  ;---------------------------------------------------------------------------
 24558                                  ; Procedure Name : Build_device_ent
 24559                                  ;
 24560                                  ; Inputs:
 24561                                  ;	[NAME1] has name
 24562                                  ;	BH is attribute field (supplied by DEVNAME)
 24563                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24564                                  ; Function:
 24565                                  ;	Build a directory entry for a device at DEVFCB
 24566                                  ; Outputs:
 24567                                  ;	BX points to DEVFCB
 24568                                  ;	SI points to dir_first field
 24569                                  ;	AH = input BH
 24570                                  ;	AL = 0
 24571                                  ;	dir_first = DEVPT
 24572                                  ;	Zero Set, Carry Clear
 24573                                  ; DS,ES,BP preserved, others destroyed
 24574                                  ;--------------------------------------------------------------------------
 24575                                  
 24576                                  Build_device_ent:
 24577 00004299 B82020                  	MOV	AX,"  " ; 2020h
 24578                                  
 24579                                  ;hkn; DEVFCB is in DOSDATA
 24580 0000429C BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24581                                  
 24582                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 24583                                  
 24584 0000429F AB                      	STOSW
 24585 000042A0 AA                      	STOSB				; Blank out extent field
 24586                                  	;mov	al,40h
 24587 000042A1 B040                    	MOV	AL,attr_device
 24588                                  
 24589                                  ;	Fill Dir_attr
 24590                                  
 24591 000042A3 AA                      	STOSB				; Set attribute field
 24592 000042A4 31C0                    	XOR	AX,AX
 24593 000042A6 B90A00                  	MOV	CX,10
 24594                                  
 24595                                  ; Fill dir_pad
 24596                                  
 24597 000042A9 F3AB                    	REP	STOSW			; Fill rest with zeros
 24598 000042AB E861C8                  	call	DATE16
 24599                                  
 24600                                  ;hkn; DEVFCB is in DOSDATA
 24601 000042AE BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24602 000042B1 92                      	XCHG	AX,DX
 24603                                  
 24604                                  ; Fill dir_time
 24605                                  
 24606 000042B2 AB                      	STOSW
 24607 000042B3 92                      	XCHG	AX,DX
 24608                                  
 24609                                  ; Fill dir_date
 24610                                  
 24611 000042B4 AB                      	STOSW
 24612 000042B5 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24613 000042B7 A1[9A05]                	MOV	AX,[DEVPT]
 24614                                  
 24615                                  ; Fill dir_first
 24616                                  
 24617 000042BA AB                      	STOSW				; Dir_first points to device
 24618 000042BB A1[9C05]                	MOV	AX,[DEVPT+2]
 24619                                  ;
 24620                                  ; Fill dir_size_l
 24621                                  ;
 24622 000042BE AB                      	STOSW
 24623 000042BF 88FC                    	MOV	AH,BH			; Put device atts in AH
 24624                                  
 24625                                  ;hkn; DEVFCB is in DOSDATA
 24626 000042C1 BB[4B05]                	MOV	BX,DEVFCB
 24627 000042C4 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24628 000042C6 C3                      	retn
 24629                                  
 24630                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24631                                  ;----------------------------------------------------------------------------
 24632                                  ;
 24633                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24634                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24635                                  ;   If invalid, reset original CDS to root.
 24636                                  ;
 24637                                  ;   Inputs:	ThisCDS points to CDS of interest
 24638                                  ;		SS:DI points to temp buffer
 24639                                  ;   Outputs:	The current directory string is validated on the appropriate
 24640                                  ;		    drive
 24641                                  ;		ThisDPB changed
 24642                                  ;		ES:DI point to CDS
 24643                                  ;		Carry set if error (currently user FAILed to I 24)
 24644                                  ;   Registers modified: all
 24645                                  ;----------------------------------------------------------------------------
 24646                                  
 24647                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24648                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24649                                  
 24650                                  ValidateCDS:
 24651                                  	; 19/05/2019 - Retro DOS v4.0
 24652                                  	; 28/07/2018 - Retro DOS v3.0
 24653                                  
 24654                                     %define  Temp	[bp-2]	; word
 24655                                     %define  SaveCDS	[bp-6]	; dword
 24656                                     %define  SaveCDSL	[bp-6]	; word
 24657                                     %define  SaveCDSH	[bp-4]	; word
 24658                                  
 24659                                  	;Enter
 24660 000042C7 55                      	push	bp
 24661 000042C8 89E5                    	mov	bp,sp
 24662 000042CA 83EC06                  	sub	sp,6
 24663                                  
 24664 000042CD 897EFE                  	MOV	Temp,DI
 24665                                  
 24666                                  ;hkn; SS override
 24667 000042D0 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24668 000042D5 8976FA                  	MOV	SaveCDSL,SI
 24669 000042D8 8C5EFC                  	MOV	SaveCDSH,DS
 24670                                  	;EnterCrit critDisk
 24671 000042DB E878D0                  	call	ECritDisk
 24672                                  	; 21/11/2022
 24673                                  	;test	byte [SI+curdir.flags+1],80h
 24674                                  	;test	word [si+67],8000h
 24675                                  	; 17/12/2022
 24676                                  	;test	byte [SI+68],80h
 24677 000042DE F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24678                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24679 000042E2 7403                    	JZ	short _DoSplice
 24680 000042E4 E99200                  	JMP	FatFail
 24681                                  _DoSplice:
 24682 000042E7 30D2                    	XOR	DL,DL
 24683 000042E9 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24684                                  
 24685                                  ;hkn; SS is DOSDATA
 24686                                  	;Context ES
 24687 000042EE 16                      	push	ss
 24688 000042EF 07                      	pop	es
 24689                                  	;Invoke	FStrcpy
 24690 000042F0 E836CF                  	call	FStrCpy
 24691 000042F3 8B76FE                  	MOV	SI,Temp
 24692                                  
 24693                                  ;hkn; SS is DOSDATA
 24694                                  	;Context DS
 24695 000042F6 16                      	push	ss
 24696 000042F7 1F                      	pop	ds	
 24697                                  	;Invoke	Splice
 24698 000042F8 E8642B                  	call	Splice
 24699                                  
 24700                                   ;hkn; SS is DOSDATA
 24701                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24702 000042FB 16                      	push	ss
 24703 000042FC 1F                      	pop	ds
 24704 000042FD 8816[4C03]              	MOV	[NoSetDir],DL
 24705 00004301 C43E[A205]              	LES	DI,[THISCDS]
 24706                                  	;SAVE	<BP>
 24707 00004305 55                      	push	bp
 24708                                  	;Invoke	FATREAD_CDS
 24709 00004306 E83214                  	call	FATREAD_CDS	
 24710                                  	;RESTORE <BP>
 24711 00004309 5D                      	pop	bp
 24712 0000430A 726D                    	JC	short FatFail
 24713                                  
 24714 0000430C C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24715                                  	;cmp	word [si+73],-1
 24716 00004310 837C49FF                	CMP	word [SI+curdir.ID],-1
 24717 00004314 7555                    	JNZ	short RestoreCDS
 24718                                  
 24719                                  ;hkn; SS is DOSDATA
 24720                                  	;Context ES
 24721 00004316 16                      	push	ss
 24722 00004317 07                      	pop	es
 24723                                  
 24724                                  ;hkn; SS override
 24725                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24726 00004318 36FF36[B205]            	push	word [SS:WFP_START]
 24727                                  	;cmp	si,[bp-6]
 24728 0000431D 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24729 00004320 750B                    	JNZ	short DoChdir
 24730                                  	;mov	di,[bp-2]
 24731 00004322 8B7EFE                  	MOV	DI,Temp
 24732                                  
 24733                                  ;hkn; SS override
 24734 00004325 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24735                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24736 0000432A E8FCCE                  	call	FStrCpy
 24737                                  DoChdir:
 24738                                  ;hkn; SS is DOSDATA
 24739                                  	;Context DS
 24740 0000432D 16                      	push	ss
 24741 0000432E 1F                      	pop	ds
 24742                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24743 0000432F FF36[6D05]              	push	word [SATTRIB]
 24744 00004333 55                      	push	bp
 24745                                  	;Invoke	DOS_ChDir
 24746 00004334 E8EFEE                  	call	DOS_CHDIR
 24747                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24748 00004337 5D                      	pop	bp
 24749 00004338 5B                      	pop	bx
 24750 00004339 8F06[B205]              	pop	word [WFP_START]
 24751 0000433D 881E[6D05]              	MOV	[SATTRIB],BL
 24752 00004341 C576FA                  	LDS	SI,SaveCDS
 24753 00004344 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24754                                  
 24755                                  ;hkn; SS override for THISCDS
 24756 00004346 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24757 0000434B 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24758 00004350 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24759 00004352 884C03                  	MOV	[SI+3],CL		;	    }
 24760                                  SetCluster:
 24761                                  	;mov	word [si+73],0FFFFh
 24762 00004355 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24763 0000435A 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24764                                  	; 21/11/2022
 24765                                  	;test	byte [si+curdir.flags+1],20h
 24766                                  	; 19/05/2019
 24767                                  	; MSDOS 6.0
 24768                                  	; 17/12/2022
 24769                                  	;test	byte [si+68],20h
 24770 0000435F F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24771                                  	;;test	word [si+67],2000h
 24772                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24773 00004363 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24774 00004365 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24775                                  _setdirclus:
 24776                                  	;mov	[si+73],cx
 24777 00004368 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24778                                  RestoreCDS:
 24779 0000436B C47EFA                  	LES	DI,SaveCDS
 24780 0000436E 36893E[A205]            	MOV	[SS:THISCDS],DI
 24781 00004373 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24782 00004378 F8                      	CLC
 24783                                  FatFail:
 24784                                  	;LeaveCrit critDisk
 24785 00004379 E8F5CF                  	call	LCritDisk
 24786                                  
 24787                                  	;les	di,[bp-6]
 24788 0000437C C47EFA                  	LES	DI,SaveCDS
 24789                                  	;Leave
 24790 0000437F 89EC                    	mov	sp,bp
 24791 00004381 5D                      	pop	bp
 24792 00004382 C3                      	retn
 24793                                  
 24794                                  ; 28/07/2018 - Retro DOS v3.0
 24795                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24796                                  
 24797                                  ;Break	<CheckThisDevice - Check for being a device>
 24798                                  ;---------------------------------------------------------------------------
 24799                                  ;
 24800                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24801                                  ;   device specified. We will return carry if there is a device present. 
 24802                                  ;   The forms of devices we will recognize are:
 24803                                  ;
 24804                                  ;	[path]device
 24805                                  ;
 24806                                  ;   Note that the drive letter has *already* been removed. All other forms
 24807                                  ;   are not considered to be devices. If such a device is found we change
 24808                                  ;   the source pointer to point to the device component.
 24809                                  ;
 24810                                  ;   Inputs:	ES is DOSDATA
 24811                                  ;		DS:SI contains name
 24812                                  ;   Outputs:	ES is DOSDATA
 24813                                  ;		DS:SI point to name or device
 24814                                  ;		Carry flag set if device was found
 24815                                  ;		Carry flag reset otherwise
 24816                                  ;   Registers Modified: all except ES:DI, DS
 24817                                  ;----------------------------------------------------------------------------
 24818                                  
 24819                                  CheckThisDevice:
 24820 00004383 57                      	push	di
 24821 00004384 56                      	push	si
 24822 00004385 89F7                    	MOV	DI,SI
 24823                                  
 24824                                  ; Check for presence of \dev\ (Dam multiplan!)
 24825                                  
 24826 00004387 8A04                    	MOV	AL,[SI]
 24827 00004389 E8750D                  	call	PATHCHRCMP		; is it a path char?
 24828 0000438C 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24829 0000438E 46                      	INC	SI			; simulate LODSB
 24830                                  
 24831                                  ; We have the leading path separator. Look for DEV part.
 24832                                  
 24833 0000438F AD                      	LODSW
 24834 00004390 0D2020                  	OR	AX,2020h
 24835 00004393 3D6465                  	cmp	ax,"de"
 24836                                  	;CMP	AX,"e"<< 8 + "d"
 24837 00004396 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24838 00004398 AC                      	LODSB
 24839 00004399 0C20                    	OR	AL,20h
 24840 0000439B 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24841 0000439D 7526                    	JNZ	short NotDevice
 24842 0000439F AC                      	LODSB
 24843 000043A0 E85E0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24844 000043A3 7520                    	JNZ	short NotDevice		; no. go for it.
 24845                                  
 24846                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24847                                  ; SI and DevName may destroy DS.
 24848                                  
 24849                                  ParseDev:
 24850 000043A5 1E                      	push	ds
 24851 000043A6 56                      	push	si			; preserve the source pointer
 24852 000043A7 E8950C                  	call	NameTrans		; advance DS:SI
 24853 000043AA 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24854 000043AD F9                      	STC				; simulate a Carry return from DevName
 24855 000043AE 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24856                                  
 24857                                  ;hkn; SS is DOSDATA
 24858 000043B0 16                      	push	ss
 24859 000043B1 1F                      	pop	ds
 24860                                  
 24861                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24862                                  ;
 24863                                  ; SR;
 24864                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24865                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24866                                  ; old call set the volume attribute bit.
 24867                                  
 24868 000043B2 A0[6D05]                	mov	al,[SATTRIB]
 24869 000043B5 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24870                                  
 24871                                  ; M026 - end
 24872                                  
 24873 000043B8 E87FFE                  	call	DEVNAME
 24874                                  
 24875                                  SkipSearch:
 24876 000043BB 5E                      	pop	si
 24877 000043BC 1F                      	pop	ds
 24878                                  
 24879                                  ; SI points to the beginning of the potential device. If we have a device
 24880                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24881                                  ; original value. At this point Carry set indicates FILE.
 24882                                  
 24883                                  CheckReturn:
 24884 000043BD 5F                      	pop	di			; get original SI
 24885 000043BE 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24886 000043C0 89FE                    	MOV	SI,DI
 24887                                  Check_Done:
 24888 000043C2 5F                      	pop	di
 24889 000043C3 F5                      	CMC				; invert carry. Carry => device
 24890 000043C4 C3                      	retn
 24891                                  NotDevice:
 24892 000043C5 F9                      	STC
 24893 000043C6 EBF5                    	JMP	short CheckReturn
 24894                                  
 24895                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24896                                  ;-----------------------------------------------------------------------------
 24897                                  ;
 24898                                  ; Procedure Name : LookupPath
 24899                                  ;
 24900                                  ; Output  DS:SI -> path name,
 24901                                  ;	  ES:DI -> dir entry info buffer
 24902                                  ;	  ES:CX -> extended dir info buffer
 24903                                  ;
 24904                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24905                                  ;			     FastOpen, DS:SI points to char just one after
 24906                                  ;			     the last char of path name which is fully or
 24907                                  ;			     partially found in FastOPen
 24908                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24909                                  ;
 24910                                  ;----------------------------------------------------------------------------
 24911                                  
 24912                                  LookupPath:
 24913                                  ;	PUSH	AX
 24914                                  
 24915                                  ;hkn; SS override
 24916                                  	;test	byte [ss:FastOpenFlg],1
 24917 000043C8 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24918 000043CE 7503                    	JNZ	short FASTINST			    ; and this routine is
 24919                                  NOLOOK:
 24920 000043D0 E99700                  	JMP	NOLOOKUP			    ; executed once
 24921                                  
 24922                                  FASTINST:
 24923                                  ;hkn; SS override
 24924                                  	;test	byte [ss:FastOpenFlg],8
 24925 000043D3 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24926 000043D9 75F5                    	JNZ	short NOLOOK			    ; yes
 24927                                  
 24928 000043DB BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24929                                  
 24930                                  ;hkn; SS override
 24931 000043DE 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24932 000043E3 BF[460D]                	MOV	DI,Dir_Info_Buff
 24933 000043E6 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24934 000043E9 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24935 000043EB 1E                      	PUSH	DS
 24936 000043EC 07                      	POP	ES
 24937                                  
 24938                                  ;hkn; SS override
 24939                                  	;call	far [bx+2]
 24940 000043ED FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24941 000043F0 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24942                                  
 24943 000043F2 8D5CFE                  	LEA	BX,[SI-2]
 24944                                  
 24945                                  ;hkn; SS override
 24946 000043F5 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24947 000043FA 745D                    	JZ	short NOTFOUND			    ; no
 24948                                  
 24949                                  	; 19/05/2019 - Retro DOS v4.0
 24950                                  
 24951                                  	; MSDOS 6.0				    ; fully or partially found
 24952 000043FC 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24953 000043FF 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24954 00004401 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24955                                  
 24956                                  ;hkn; SS override for attrib/sattrib
 24957 00004402 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24958 00004407 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24959 0000440C 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24960                                  	;mov	ch,[es:di+0Bh]
 24961 00004411 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24962 00004415 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24963                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24964 00004418 59                      	POP	CX				    ;AN000;FO.;
 24965 00004419 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24966                                  parfnd:
 24967                                  
 24968                                  ;hkn; SS override
 24969 0000441B 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24970 00004420 89CB                    	MOV	BX,CX
 24971                                  	; MSDOS 6.0
 24972                                  	;mov	ax,[bx+7]
 24973 00004422 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24974                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24975 00004425 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24976 00004429 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24977 0000442C 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24978                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24979                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24980                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24981 00004430 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24982 00004433 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24983                                  
 24984 00004437 06                      	PUSH	ES				    ; save ES
 24985                                  ;hkn; SS override
 24986 00004438 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24987 0000443D 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24988                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24989 00004440 07                      	POP	ES				    ; pop ES
 24990                                  ;SR;
 24991                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24992                                  ;indicate it is not a root dir
 24993                                  
 24994 00004441 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24995 00004448 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24996 0000444D 89FB                    	MOV	BX,DI				    ; start of entry
 24997                                  	;lea	si,[di+1Ah]
 24998 0000444F 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24999                                  						    ; dir_first field in the
 25000                                  						    ; dir entry
 25001                                  ;hkn; SS override for FastOpenFlg
 25002                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25003 00004452 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25004                                  ;	POP	AX
 25005 00004458 C3                      	RETN
 25006                                  NOTFOUND:
 25007 00004459 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25008 0000445C 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25009 0000445E 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25010                                  Partial_Success:
 25011                                  	;and	byte [SS:FastOpenFlg],0FBh
 25012 00004464 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25013                                  NOLOOKUP:
 25014                                  ;	POP	AX
 25015 0000446A F9                      	STC
 25016 0000446B C3                      	RETN
 25017                                  
 25018                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25019                                  ;-----------------------------------------------------------------------------
 25020                                  ;
 25021                                  ; Procedure Name : InsertPath
 25022                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25023                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25024                                  ;	  DS = DOSDATA
 25025                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25026                                  ;
 25027                                  ;-----------------------------------------------------------------------------
 25028                                  
 25029                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25030                                  
 25031                                  InsertPath:
 25032 0000446C 9C                      	PUSHF
 25033                                  ;hkn; SS override for FastOpenFlag
 25034                                  	;test	byte [SS:FastOpenFlg], 1
 25035 0000446D 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25036 00004473 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25037                                  	;test	byte [ss:FastOpenFlg],2
 25038 00004475 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25039 0000447B 740D                    	JZ	short INSERT_DIR_INFO		; no
 25040                                  	;and	byte [ss:FastOpenFlg],0FDh
 25041 0000447D 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25042 00004483 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25043 00004488 EB5E                    	JMP	short GET_NEXT2
 25044                                  INSERT_DIR_INFO:				; save registers
 25045 0000448A 1E                      	PUSH	DS
 25046 0000448B 06                      	PUSH	ES
 25047 0000448C 53                      	PUSH	BX
 25048 0000448D 56                      	PUSH	SI
 25049 0000448E 57                      	PUSH	DI
 25050 0000448F 51                      	PUSH	CX
 25051 00004490 50                      	PUSH	AX
 25052                                  
 25053                                  ;hkn; SS override
 25054 00004491 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25055 00004496 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25056                                  	;mov	ax,[di+6]
 25057 00004499 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25058                                  	; MSDOS 6.0
 25059                                  	;mov	[ss:si+1],ax
 25060 0000449C 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25061                                  	; 19/05/2019 - Retro DOS v4.0
 25062 000044A0 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25063                                  
 25064                                  ;hkn; SS is DOSDATA
 25065 000044A3 16                      	push	ss
 25066 000044A4 1F                      	pop	ds
 25067                                  	; MSDOS 3.3	
 25068                                  	;;mov	[si+1],ax	
 25069                                  	;MOV	[SI+FEI.dirsec],AX
 25070                                  	; MSDOS 6.0
 25071                                  	;mov	[si+3],ax
 25072 000044A5 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25073                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25074 000044A8 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25075                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25076                                  	;mov	[si+3],ax ; MSDOS 3.3
 25077 000044AB 894405                  	MOV	[SI+FEI.clusnum],AX
 25078                                  	; MSDOS 6.0
 25079 000044AE A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25080                                  	;mov	[si+7],ax
 25081 000044B1 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25082 000044B4 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25083                                  	;mov	[si+9],ax
 25084 000044B7 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25085                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25086 000044BA 89D8                    	MOV	AX,BX
 25087                                  	;;add	di,16  ; MSDOS 3.3
 25088                                  	;add	di,20  ; MSDOS 6.0
 25089 000044BC 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25090 000044BF 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25091                                  	;mov	cl,32
 25092 000044C1 B120                    	MOV	CL,dir_entry.size
 25093 000044C3 F6F1                    	DIV	CL
 25094                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25095 000044C5 8804                    	mov	[si],al
 25096                                  
 25097 000044C7 1E                      	PUSH	DS
 25098 000044C8 07                      	POP	ES
 25099                                  
 25100 000044C9 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25101 000044CD 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25102                                  	;cmp	word [di+1Ah],0
 25103 000044CF 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25104                                  					; never insert info when file is empty
 25105 000044D3 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25106                                  
 25107 000044D5 56                      	PUSH	SI			; ES:BX -> extended info
 25108 000044D6 5B                      	POP	BX
 25109                                  
 25110                                  	;mov	al,2
 25111 000044D7 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25112 000044D9 BE[300D]                	MOV	SI,FastOpenTable
 25113                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25114                                  	; 07/12/2022
 25115 000044DC 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25116                                  
 25117 000044E0 F8                      	CLC
 25118                                  SKIP_INSERT:
 25119 000044E1 58                      	POP	AX
 25120 000044E2 59                      	POP	CX			; restore registers
 25121 000044E3 5F                      	POP	DI
 25122 000044E4 5E                      	POP	SI
 25123 000044E5 5B                      	POP	BX
 25124 000044E6 07                      	POP	ES
 25125 000044E7 1F                      	POP	DS
 25126                                  GET_NEXT2:
 25127                                  	;or	[ss:FastOpenFlg],8
 25128 000044E8 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25129                                  					; we got dir info from fastopen so
 25130                                  GET_NEXT_ELEMENT:
 25131 000044EE 9D                      	POPF
 25132 000044EF C3                      	RETN
 25133                                  
 25134                                  ;============================================================================
 25135                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25136                                  ;============================================================================
 25137                                  ; 17/07/2018 - Retro DOS v3.0
 25138                                  ; 30/04/2019 - Retro DOS v4.0
 25139                                  
 25140                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25141                                  
 25142                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25143                                  
 25144                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25145                                  
 25146                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25147                                  ;DEV001s:
 25148                                  ;		length of packets
 25149 000044F0 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25150                                  ;LenTab: db	22,14,22,13,15,14
 25151                                  
 25152                                  ;	Error Function
 25153                                  
 25154                                  CmdTab:
 25155 000044F6 8604                    	DB	86h, DEVRD	; 0 input
 25156 000044F8 8605                    	DB	86h, DEVRDND	; 1 input status
 25157 000044FA 8708                    	DB	87h, DEVWRT	; 2 output
 25158 000044FC 870A                    	DB	87h, DEVOST	; 3 output status
 25159 000044FE 8607                    	DB	86h, DEVIFL	; 4 input flush
 25160 00004500 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25161                                  
 25162                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25163                                  
 25164                                  ;CmdTab:
 25165                                  ;	db	86h, 4
 25166                                  ;	db	86h, 5
 25167                                  ;	db	87h, 8
 25168                                  ;	db	87h, 10
 25169                                  ;	db	86h, 7
 25170                                  ;	db	86h, 5
 25171                                  
 25172                                  ;DEV001E:
 25173                                  
 25174                                  ; 30/04/2019 - Retro DOS v4.0
 25175                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25176                                  
 25177                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25178                                  ;----------------------------------------------------------------------------
 25179                                  ;
 25180                                  ; Procedure Name : IOFUNC
 25181                                  ;
 25182                                  ; Inputs:
 25183                                  ;	DS:SI Points to SFT
 25184                                  ;	AH is function code
 25185                                  ;		= 0 Input
 25186                                  ;		= 1 Input Status
 25187                                  ;		= 2 Output
 25188                                  ;		= 3 Output Status
 25189                                  ;		= 4 Flush
 25190                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25191                                  ;				   present.
 25192                                  ;	AL = character if output
 25193                                  ; Function:
 25194                                  ;	Perform indicated I/O to device or file
 25195                                  ; Outputs:
 25196                                  ;	AL is character if input
 25197                                  ;	If a status call
 25198                                  ;		zero set if not ready
 25199                                  ;		zero reset if ready (character in AL for input status)
 25200                                  ; For regular files:
 25201                                  ;	Input Status
 25202                                  ;		Gets character but restores position
 25203                                  ;		Zero set on EOF
 25204                                  ;	Input
 25205                                  ;		Gets character advances position
 25206                                  ;		Returns ^Z on EOF
 25207                                  ;	Output Status
 25208                                  ;		Always ready
 25209                                  ; AX altered, all other registers preserved
 25210                                  ;----------------------------------------------------------------------------
 25211                                  
 25212                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25213                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25214                                  
 25215                                  IOFUNC:
 25216 00004502 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25217                                  					; DEVIOBUF
 25218 00004507 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25219 0000450E 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25220 00004515 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25221                                  	;test	byte [si+6],80h
 25222                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25223 00004519 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25224 0000451D 7403                    	JZ	short IOTO22		;AN000;
 25225 0000451F E9A500                  	JMP	IOTOFILE		;AN000;
 25226                                  IOTO22:
 25227                                  	;test	word [si+5],80h
 25228                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25229 00004522 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25230 00004526 7503                    	JNZ	short IOTO33		;AN000;
 25231 00004528 E99C00                  	JMP	IOTOFILE		;AN000;
 25232                                  IOTO33:
 25233 0000452B 06                      	push	es ; * (MSDOS 6.21)
 25234 0000452C E841BF                  	call	save_world
 25235 0000452F 8CDA                    	MOV	DX,DS
 25236 00004531 8CD3                    	MOV	BX,SS
 25237 00004533 8EDB                    	MOV	DS,BX
 25238 00004535 8EC3                    	MOV	ES,BX
 25239 00004537 31DB                    	XOR	BX,BX
 25240 00004539 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25241 0000453C 7503                    	jnz	short _no_sys_wait
 25242                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25243                                  	; 16/12/2022
 25244 0000453E 80CF04                  	or	bh,04h
 25245                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25246                                  				    ; It is up to device driver to carry out
 25247                                  				    ; appropriate action.
 25248                                  _no_sys_wait:
 25249 00004541 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25250 00004545 31DB                    	XOR	BX,BX
 25251 00004547 881E[8903]              	MOV	[IOMED],BL
 25252                                  
 25253 0000454B 88E3                    	MOV	BL,AH		 	; get function
 25254 0000454D 2E8AA7[F044]            	MOV	AH,[cs:BX+LenTab]
 25255 00004552 D1E3                    	SHL	BX,1
 25256 00004554 2E8B8F[F644]            	MOV	CX,[cs:BX+CmdTab]
 25257 00004559 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25258 0000455C 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25259 00004560 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25260                                  
 25261 00004564 8EDA                    	MOV	DS,DX
 25262 00004566 E86B01                  	CALL	DEVIOCALL
 25263 00004569 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25264 0000456E 21FF                    	and	di,di
 25265 00004570 7834                    	js	short DevErr
 25266                                  OKDevIO:
 25267 00004572 8CD0                    	MOV	AX,SS
 25268 00004574 8ED8                    	MOV	DS,AX
 25269                                  
 25270                                  	;cmp	ch,5
 25271 00004576 80FD05                  	CMP	CH,DEVRDND
 25272 00004579 7506                    	JNZ	short DNODRD
 25273 0000457B A0[8903]                	MOV	AL,[IORCHR]
 25274 0000457E A2[BC03]                	MOV	[DEVIOBUF],AL
 25275                                  
 25276                                  DNODRD: 
 25277 00004581 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25278 00004585 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25279                                  	;and	ah,2
 25280 00004587 80E402                  	AND	AH,STBUI>>8
 25281                                  
 25282                                  QuickReturn:				;AN000; 2/13/KK
 25283 0000458A E8CCBE                  	call	restore_world
 25284 0000458D 07                      	pop	es ; * (MSDOS 6.21)
 25285                                  
 25286                                  	; SR;
 25287                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25288                                  	; IoStatFail = -1 (set after return from the I24)
 25289                                  
 25290                                  	; MSDOS 6.0
 25291 0000458E 9C                      	pushf
 25292 0000458F 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25293 00004593 98                      	cbw				;sign extend to word
 25294 00004594 83F8FF                  	cmp	ax,-1
 25295 00004597 7507                    	jne	short not_fail_ret
 25296 00004599 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25297 0000459E 9D                      	popf
 25298 0000459F C3                      	retn
 25299                                  
 25300                                  not_fail_ret:
 25301 000045A0 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25302 000045A4 9D                      	popf
 25303 000045A5 C3                      	retn
 25304                                  
 25305                                  DevErr:
 25306 000045A6 88CC                    	MOV	AH,CL
 25307 000045A8 E88E0D                  	call	CHARHARD
 25308 000045AB 3C01                    	CMP	AL,1
 25309 000045AD 7507                    	JNZ	short NO_RETRY
 25310 000045AF E8A7BE                  	call	restore_world
 25311                                  	; 12/05/2019
 25312 000045B2 07                      	pop	es ; * (MSDOS 6.21)		
 25313 000045B3 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25314                                  
 25315                                  NO_RETRY:
 25316                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25317                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25318                                  	; simply wants to ignore the error.
 25319                                  	;
 25320                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25321                                  	; should be checked by the caller on return
 25322                                  
 25323                                  					; SS override
 25324 000045B6 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25325                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25326                                  
 25327                                  	; SR;
 25328                                  	; Check if user failed
 25329                                  
 25330                                  	; MSDOS 6.0
 25331 000045BC 3C03                    	cmp	al,3
 25332 000045BE 7505                    	jnz	short not_fail
 25333 000045C0 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25334                                  not_fail:
 25335 000045C5 EBAB                    	JMP	short OKDevIO
 25336                                  
 25337                                  IOTOFILE:
 25338 000045C7 08E4                    	OR	AH,AH
 25339 000045C9 7421                    	JZ	short IOIN
 25340 000045CB FECC                    	DEC	AH
 25341 000045CD 7405                    	JZ	short IOIST
 25342 000045CF FECC                    	DEC	AH
 25343 000045D1 7411                    	JZ	short IOUT
 25344                                  IOUT_retn:	; 18/12/2022
 25345 000045D3 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25346                                  IOIST:
 25347                                  	;push	word [si+15h]
 25348 000045D4 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25349                                  	;push	word [si+17h]
 25350 000045D7 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25351 000045DA E80F00                  	CALL	IOIN
 25352                                  	;pop	word [si+17h]
 25353 000045DD 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25354                                  	;pop	word [si+15h]
 25355 000045E0 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25356 000045E3 C3                      	retn
 25357                                  IOUT:
 25358 000045E4 E82500                  	CALL	SETXADDR
 25359 000045E7 E87FEF                  	call	DOS_WRITE
 25360                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25361                                  	; 18/12/2022
 25362 000045EA EB52                    	jmp	RESTXADDR
 25363                                  ;IOUT_retn:
 25364                                  	;retn			; come crying to me when things don't
 25365                                  				; work ARR
 25366                                  IOIN:
 25367 000045EC E81D00                  	CALL	SETXADDR
 25368                                  					; SS override for DOS34_FLAG
 25369                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25370                                  	;or	word [ss:DOS34_FLAG],40h
 25371                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25372                                  	; 16/12/2022
 25373 000045EF 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25374 000045F5 E848ED                  	CALL	DOS_READ
 25375                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25376                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25377                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25378                                  	; 16/12/2022
 25379 000045F8 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25380 000045FE 09C9                    	OR	CX,CX			; Check EOF
 25381 00004600 E83B00                  	CALL	RESTXADDR
 25382                                  					; SS override
 25383 00004603 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25384 00004607 75CA                    	jnz	short IOUT_retn	
 25385 00004609 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25386 0000460B C3                      	retn
 25387                                  
 25388                                  SETXADDR:
 25389                                  					; SS override
 25390 0000460C 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25391                                  
 25392 00004611 06                      	push	es ; * (MSDOS 6.21)
 25393                                  
 25394 00004612 E85BBE                  	call	save_world
 25395                                  					; SS override for DMAADD and THISSFT
 25396                                  	; 24/09/2023
 25397                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25398                                  	;PUSH	WORD [SS:DMAADD+2]
 25399 00004615 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25400                                  
 25401 0000461A 16                      	push	ss
 25402 0000461B 1F                      	pop	ds
 25403                                  
 25404                                  	; 24/09/2023
 25405 0000461C FF36[2C03]              	push	word [DMAADD]
 25406 00004620 FF36[2E03]              	push	word [DMAADD+2]
 25407                                  
 25408 00004624 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25409 00004628 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25410 0000462C 890E[2E03]              	MOV	[DMAADD+2],CX
 25411 00004630 8B0E[8A03]              	MOV	CX,[IOXAD]
 25412 00004634 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25413 00004638 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25414 0000463C EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25415                                  
 25416                                  RESTXADDR:
 25417 0000463E 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25418 00004642 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25419 00004646 8F06[2C03]              	POP	WORD [DMAADD]
 25420                                  
 25421 0000464A E80CBE                  	call	restore_world
 25422                                  
 25423 0000464D 07                      	pop	es ; * (MSDOS 6.21)
 25424                                  					; SS override
 25425                                  RESTRET:
 25426 0000464E 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25427                                  
 25428                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25429                                  ; 21/11/2022
 25430                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25431                                  
 25432                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25433                                  
 25434                                  ;----------------------------------------------------------------------------
 25435                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25436                                  ;
 25437                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25438                                  ;	the SFT.
 25439                                  ;
 25440                                  ;	ENTRY	(ES:DI) = SFT
 25441                                  ;	EXIT	none
 25442                                  ;	USES	all
 25443                                  ;----------------------------------------------------------------------------
 25444                                  
 25445                                  DEV_OPEN_SFT:
 25446 00004653 06                      	push	es ; * (MSDOS 6.21)
 25447 00004654 E819BE                  	call	save_world
 25448                                  	;mov	al,0Dh	
 25449 00004657 B00D                    	MOV	AL,DEVOPN
 25450 00004659 EB06                    	JMP	SHORT DO_OPCLS
 25451                                  
 25452                                  ;----------------------------------------------------------------------------
 25453                                  ; Procedure Name : DEV_CLOSE_SFT
 25454                                  ;
 25455                                  ; Inputs:
 25456                                  ;	ES:DI Points to SFT
 25457                                  ; Function:
 25458                                  ;	Issue a CLOSE call to the correct device
 25459                                  ; Outputs:
 25460                                  ;	None
 25461                                  ; ALL preserved
 25462                                  ;----------------------------------------------------------------------------
 25463                                  
 25464                                  DEV_CLOSE_SFT:
 25465 0000465B 06                      	push	es ; * (MSDOS 6.21)
 25466 0000465C E811BE                  	call	save_world
 25467                                  	;mov	al,0Eh	
 25468 0000465F B00E                    	MOV	AL,DEVCLS
 25469                                  
 25470                                  	; Main entry for device open and close. AL contains the function 
 25471                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25472                                  	; open/close to block devices. This allows networks to function but 
 25473                                  	; does NOT hang up with bogus change-line code.
 25474                                  
 25475                                  	;entry	DO_OPCLS
 25476                                  DO_OPCLS:
 25477                                  	; Is the SFT for the net? If so, no action necessary.
 25478                                  
 25479                                  	; MSDOS 6.0
 25480                                  	;test	word [es:di+5],8000h
 25481                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25482 00004661 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25483 00004666 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25484 00004668 30E4                    	XOR	AH,AH			; Unit
 25485                                  	;test	byte [es:di+5],80h
 25486 0000466A 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25487                                  	;les	di,[es:di+7]
 25488 0000466F 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25489 00004673 7513                    	JNZ	short GOT_DEV_ADDR
 25490                                  
 25491                                  	; We are about to call device open/close on a block driver. If no 
 25492                                  	; sharing then just short circuit to done.
 25493                                  	
 25494                                  	; MSDOS 6.0
 25495                                  					; SS override
 25496 00004675 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25497 0000467B 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25498                                  
 25499                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25500                                  	;mov	ah,[es:di+1]
 25501 0000467D 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25502 00004681 268A0D                  	mov	cl,[es:di]
 25503                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25504                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25505                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25506 00004684 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25507                                  GOT_DEV_ADDR:				; ES:DI -> device
 25508                                  	;test	word [es:di+4],800h
 25509                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25510 00004688 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25511 0000468D 7440                    	JZ	short OPCLS_DONE	; Device can't
 25512 0000468F 06                      	PUSH	ES
 25513 00004690 1F                      	POP	DS
 25514 00004691 89FE                    	MOV	SI,DI			; DS:SI -> device
 25515                                  
 25516                                  OPCLS_RETRY:
 25517                                  	;Context ES
 25518 00004693 16                      	push	ss
 25519 00004694 07                      	pop	es
 25520                                  					; DEVCALL is in DOSDATA
 25521 00004695 BF[5A03]                	MOV	DI,DEVCALL
 25522                                  
 25523 00004698 89FB                    	MOV	BX,DI
 25524 0000469A 50                      	PUSH	AX
 25525                                  	;mov	al,13
 25526 0000469B B00D                    	MOV	AL,DOPCLHL
 25527 0000469D AA                      	STOSB				; Length
 25528 0000469E 58                      	POP	AX
 25529 0000469F 86E0                    	XCHG	AH,AL
 25530 000046A1 AA                      	STOSB				; Unit
 25531 000046A2 86E0                    	XCHG	AH,AL
 25532 000046A4 AA                      	STOSB				; Command
 25533 000046A5 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25534 000046AA 50                      	PUSH	AX			; Save Unit,Command
 25535                                  	;invoke	DEVIOCALL2
 25536 000046AB E82900                  	call	DEVIOCALL2
 25537                                  
 25538                                  	;mov	di,[es:bx+3]
 25539 000046AE 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25540                                  	;test	di,8000h
 25541                                  	;jz	short OPCLS_DONEP	
 25542 000046B2 21FF                    	and	di,di
 25543 000046B4 7918                    	jns	short OPCLS_DONEP	; No error
 25544                                  	; 21/11/2022
 25545                                  	;test	word [si+4],8000h
 25546                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25547                                  	;test	word [si+5],80h
 25548 000046B6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25549 000046BA 7404                    	JZ	short BLKDEV
 25550 000046BC B486                    	MOV	AH,86H			; Read error in data, Char dev
 25551 000046BE EB04                    	JMP	SHORT HRDERR
 25552                                  BLKDEV:
 25553 000046C0 88C8                    	MOV	AL,CL			; Drive # in AL
 25554 000046C2 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25555                                  HRDERR:
 25556                                  	;invoke	CHARHARD
 25557 000046C4 E8720C                  	call	CHARHARD
 25558 000046C7 3C01                    	cmp	al,1
 25559 000046C9 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25560                                  					;  Note that FAIL is essentually IGNORED
 25561 000046CB 58                      	POP	AX			; Get back Unit, Command
 25562 000046CC EBC5                    	JMP	short OPCLS_RETRY
 25563                                  OPCLS_DONEP:
 25564 000046CE 58                      	POP	AX			; Clean stack
 25565                                  OPCLS_DONE:
 25566 000046CF E887BD                  	call	restore_world
 25567 000046D2 07                      	pop	es ; * (MSDOS 6.21)
 25568 000046D3 C3                      	retn
 25569                                  
 25570                                  ; 30/04/2019 - Retro DOS v4.0
 25571                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25572                                  
 25573                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25574                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25575                                  
 25576                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25577                                  ;----------------------------------------------------------------------------
 25578                                  ;**	DevIoCall  - Call Device
 25579                                  ;
 25580                                  ;	ENTRY	DS:SI Points to device SFT
 25581                                  ;		ES:BX Points to request data
 25582                                  ;	EXIT	DS:SI -> Device driver
 25583                                  ;	USES	DS:SI,AX
 25584                                  ;----------------------------------------------------------------------------
 25585                                  ;**	DevIoCall2 - Call Device
 25586                                  ;
 25587                                  ;	ENTRY	DS:SI Points to DPB
 25588                                  ;		ES:BX Points to request data
 25589                                  ;	EXIT	DS:SI -> Device driver
 25590                                  ;	USES	DS:SI,AX
 25591                                  ;----------------------------------------------------------------------------
 25592                                  
 25593                                  DEVIOCALL:
 25594                                  					; SS override for CALLSSEC, 
 25595                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25596 000046D4 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25597                                  
 25598                                  	;entry	DEVIOCALL2
 25599                                  DEVIOCALL2:
 25600                                  	;EnterCrit critDevice
 25601 000046D7 E8B1CC                  	call	ECritDevice
 25602                                  
 25603                                  	; MSDOS 6.0
 25604                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25605                                  	;test	byte [si+5],80h
 25606 000046DA F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25607 000046DE 7548                    	jnz	short chardev2		;AN000; >32mb no
 25608                                  
 25609                                  	; 16/12/2022
 25610                                  	; 22/11/2022
 25611 000046E0 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25612 000046E4 3C04                    	cmp	al,DEVRD	; 4
 25613 000046E6 7408                    	je	short chkext	
 25614 000046E8 3C08                    	cmp	al,DEVWRT	; 8
 25615 000046EA 7404                    	je	short chkext
 25616 000046EC 3C09                    	cmp	al,DEVWRTV	; 9
 25617 000046EE 7538                    	jne	short chardev2
 25618                                  
 25619                                  	; 16/12/2022
 25620                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25621                                  	;;cmp	byte [es:bx+2],4
 25622                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25623                                  	;JZ	short chkext		;AN000; >32mb   yes
 25624                                  	;;cmp	byte [es:bx+2],8
 25625                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25626                                  	;JZ	short chkext		;AN000; >32mb   yes
 25627                                  	;;cmp	byte [es:bx+2],9
 25628                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25629                                  	;				;AN000; >32mb write/verify ?
 25630                                  	;JNZ	short chardev2		;AN000; >32mb no
 25631                                  chkext:
 25632 000046F0 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25633 000046F3 7255                    	JC	short dev_exit		;AN000;LB. done
 25634                                  
 25635                                  	;test	byte [si+4],2
 25636 000046F5 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25637 000046F9 741D                    	JZ	short chksector		;AN000;>32mb   no
 25638 000046FB 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25639 000046FF 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25640 00004703 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25641 0000470A 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25642 0000470E 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25643 00004712 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25644 00004716 EB10                    	JMP	short chardev2		;AN000; >32mb
 25645                                  chksector:				;AN000; >32mb
 25646 00004718 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25647 0000471E 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25648                                  	;mov	word [es:bx+3],8107h
 25649 00004720 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25650                                  					;AN000; >32mb
 25651 00004726 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25652                                  
 25653                                  chardev2:				;AN000;
 25654                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25655                                  	; preserved
 25656                                  
 25657                                  	;mov	ax,[si+6]
 25658 00004728 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25659 0000472B 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25660 0000472F 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25661 00004734 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25662                                  
 25663                                  	;mov	ax,[si+8]
 25664 00004739 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25665 0000473C 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25666 00004740 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25667                                  
 25668                                  	; MSDOS 6.0
 25669 00004745 E83A01                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25670 00004748 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25671                                  
 25672                                  dev_exit:
 25673                                  	;LeaveCrit critDevice
 25674                                  	;call	LCritDevice
 25675                                  	;retn
 25676                                  	; 18/12/2022
 25677 0000474A E959CC                  	jmp	LCritDevice
 25678                                  
 25679                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25680                                  ; 22/11/2022
 25681                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25682                                  
 25683                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25684                                  ;---------------------------------------------------------------------------
 25685                                  ;
 25686                                  ; Procedure Name : SETREAD, SETWRITE
 25687                                  ;
 25688                                  ; Inputs:
 25689                                  ;	DS:BX = Transfer Address
 25690                                  ;	CX = Record Count
 25691                                  ;	DX = Starting Record
 25692                                  ;	AH = Media Byte
 25693                                  ;	AL = Unit Code
 25694                                  ; Function:
 25695                                  ;	Set up the device call header at DEVCALL
 25696                                  ; Output:
 25697                                  ;	ES:BX Points to DEVCALL
 25698                                  ; No other registers effected
 25699                                  ;
 25700                                  ;---------------------------------------------------------------------------
 25701                                  
 25702                                  SETREAD:
 25703 0000474D 57                      	PUSH	DI
 25704 0000474E 51                      	PUSH	CX
 25705 0000474F 50                      	PUSH	AX
 25706 00004750 B104                    	MOV	CL,DEVRD ; mov cl,4
 25707                                  SETCALLHEAD:
 25708 00004752 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25709 00004754 16                      	PUSH	SS
 25710 00004755 07                      	POP	ES
 25711                                  					; DEVCALL is in DOSDATA
 25712 00004756 BF[5A03]                	MOV	DI,DEVCALL
 25713                                  
 25714 00004759 AA                      	STOSB				; length
 25715 0000475A 58                      	POP	AX			; 
 25716 0000475B AA                      	STOSB				; Unit
 25717 0000475C 50                      	PUSH	AX
 25718 0000475D 88C8                    	MOV	AL,CL
 25719 0000475F AA                      	STOSB				; Command code
 25720 00004760 31C0                    	XOR	AX,AX
 25721 00004762 AB                      	STOSW				; Status
 25722 00004763 83C708                  	ADD	DI,8			; Skip link fields
 25723 00004766 58                      	POP	AX
 25724 00004767 86E0                    	XCHG	AH,AL
 25725 00004769 AA                      	STOSB				; Media byte
 25726 0000476A 86C4                    	XCHG	AL,AH
 25727 0000476C 50                      	PUSH	AX
 25728 0000476D 89D8                    	MOV	AX,BX
 25729 0000476F AB                      	STOSW
 25730                                  
 25731 00004770 8CD8                    	MOV	AX,DS
 25732 00004772 AB                      	STOSW				; Transfer addr
 25733                                  
 25734 00004773 59                      	POP	CX			; Real AX
 25735 00004774 58                      	POP	AX			; Real CX
 25736 00004775 AB                      	STOSW				; Count
 25737                                  
 25738 00004776 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25739 00004777 AB                      	STOSW				; Start
 25740 00004778 91                      	XCHG	AX,CX
 25741 00004779 87D1                    	XCHG	DX,CX
 25742 0000477B 5F                      	POP	DI
 25743                                  					; DEVCALL is in DOSDATA
 25744 0000477C BB[5A03]                	MOV	BX,DEVCALL
 25745 0000477F C3                      	retn
 25746                                  
 25747                                  	;entry	SETWRITE
 25748                                  SETWRITE:
 25749                                  
 25750                                  ; Inputs:
 25751                                  ;	DS:BX = Transfer Address
 25752                                  ;	CX = Record Count
 25753                                  ;	DX = Starting Record
 25754                                  ;	AH = Media Byte
 25755                                  ;	AL = Unit Code
 25756                                  ; Function:
 25757                                  ;	Set up the device call header at DEVCALL
 25758                                  ; Output:
 25759                                  ;	ES:BX Points to DEVCALL
 25760                                  ; No other registers effected
 25761                                  
 25762 00004780 57                      	PUSH	DI
 25763 00004781 51                      	PUSH	CX
 25764 00004782 50                      	PUSH	AX
 25765 00004783 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25766 00004785 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25767 0000478A EBC6                    	JMP	SHORT SETCALLHEAD
 25768                                  
 25769                                  ; 30/04/2019 - Retro DOS v4.0
 25770                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25771                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25772                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25773                                  
 25774                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25775                                  ;---------------------------------------------------------------------------
 25776                                  ;
 25777                                  ; Procedure Name : RW_SC
 25778                                  ;
 25779                                  ; Inputs:
 25780                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25781                                  ;	 [SC_STATUS]= SC validity status
 25782                                  ;	 [SEQ_SECTOR]= last sector read
 25783                                  ; Function:
 25784                                  ;	Read from or write through secondary cache
 25785                                  ; Output:
 25786                                  ;	ES:BX Points to DEVCALL
 25787                                  ;	carry clear, I/O is not done
 25788                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25789                                  ;	carry set, I/O is done
 25790                                  ;
 25791                                  ;----------------------------------------------------------------------------
 25792                                  
 25793                                  RW_SC:
 25794                                  	; SS override for all variables used.
 25795                                  	
 25796 0000478C 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25797 00004792 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25798 00004794 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25799 0000479A 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25800 0000479C 51                      	PUSH	CX			    ;AN000;LB.
 25801 0000479D 52                      	PUSH	DX			    ;AN000;LB. yes
 25802 0000479E 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25803 0000479F 56                      	PUSH	SI			    ;AN000;LB.
 25804 000047A0 06                      	PUSH	ES			    ;AN000;LB.
 25805 000047A1 57                      	PUSH	DI			    ;AN000;LB.
 25806                                  
 25807 000047A2 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25808 000047A7 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25809 000047AD 7408                    	JZ	short doread		    ;AN000;LB. yes
 25810 000047AF E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25811 000047B2 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25812                                  scexit4:				    ;AN000;
 25813 000047B5 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25814 000047B6 C3                      	retn				    ;AN000;LB.
 25815                                  doread: 				    ;AN000;
 25816 000047B7 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25817 000047BA 720A                    	JC	short readSC		    ;AN000;LB.
 25818 000047BC 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25819 000047C3 F9                      	STC				    ;AN000;LB. set carry
 25820 000047C4 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25821                                  readSC: 				    ;AN000;
 25822 000047C6 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25823 000047CA 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25824 000047CF 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25825 000047D4 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25826                                  	; 24/09/2023
 25827                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 25828 000047D9 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25829                                  chklow: 						
 25830 000047DB 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25831 000047DE 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25832 000047E0 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25833 000047E7 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25834 000047EB 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25835                                  readsr:
 25836 000047EF 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25837 000047F3 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25838 000047F7 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25839 000047FB 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25840                                  
 25841 000047FF 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25842 00004803 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25843 00004807 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25844 0000480B 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25845 0000480F 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25846 00004815 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25847 00004819 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25848 0000481D 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25849 00004821 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25850 00004825 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25851 00004829 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25852                                  saveseq2:				    ;AN000;
 25853 0000482D F8                      	CLC				    ;AN000;LB. clear carry
 25854                                  saveseq:				    ;AN000;	
 25855 0000482E 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25856 00004832 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25857 00004836 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25858 0000483A 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25859 0000483E EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25860                                  scexit2:				    ;AN000;LB.
 25861 00004840 F8                      	CLC				    ;AN000;LB.	clear carry
 25862                                  scexit: 				    ;AN000;		
 25863 00004841 5F                      	POP	DI			    ;AN000;LB.
 25864 00004842 07                      	POP	ES			    ;AN000;LB. restore registers
 25865 00004843 5E                      	POP	SI			    ;AN000;LB.
 25866 00004844 1F                      	POP	DS			    ;AN000;LB.
 25867 00004845 5A                      	POP	DX			    ;AN000;LB.
 25868 00004846 59                      	POP	CX			    ;AN000;LB.
 25869 00004847 C3                      	retn				    ;AN000;LB.
 25870                                  
 25871                                  ;Break	<IN_SC -- check if in secondary cache>
 25872                                  ;--------------------------------------------------------------------------
 25873                                  ;
 25874                                  ; Procedure Name : IN_SC
 25875                                  ;
 25876                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25877                                  ;	   [CURSC_DRIVE]= current SC drive
 25878                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25879                                  ;	   [SC_CACHE_COUNT]= SC count
 25880                                  ;	   [HIGH_SECTOR]:DX= sector number
 25881                                  ; Function:
 25882                                  ;	Check if the sector is in secondary cache
 25883                                  ; Output:
 25884                                  ;	carry clear, in SC
 25885                                  ;	   CX= the index in the secondary cache
 25886                                  ;	carry set, not in SC
 25887                                  ;
 25888                                  ;---------------------------------------------------------------------------
 25889                                  
 25890                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25891                                  IN_SC:
 25892                                  	; SS override for all variables used
 25893 00004848 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25894 0000484C 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25895 00004851 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 25896 00004853 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25897 00004857 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25898 00004859 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25899 0000485E 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25900                                  	; 24/09/2023
 25901                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 25902 00004863 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25903 00004865 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25904 0000486A 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25905 0000486C F8                      	CLC				    ;AN000;;LB. clear carry
 25906                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25907                                  	; 16/12/2022
 25908 0000486D C3                      	retn	; 30/04/2019
 25909                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25910                                  	;jmp	short inexit
 25911                                  
 25912                                  outrange2:				    ;AN000;;LB. set carry
 25913 0000486E F9                      	STC				    ;AN000;;LB.
 25914                                  inexit: 				    ;AN000;;LB.
 25915 0000486F C3                      	retn				    ;AN000;;LB.
 25916                                  
 25917                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25918                                  ;---------------------------------------------------------------------------
 25919                                  ;
 25920                                  ; Procedure Name : Invalidate_Sc
 25921                                  ;
 25922                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25923                                  ;	   [CURSC_DRIVE]= current SC drive
 25924                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25925                                  ;	   [SC_CACHE_COUNT]= SC count
 25926                                  ;	   [SC_STATUS]= SC status word
 25927                                  ;	   [HIGH_SECTOR]:DX= sector number
 25928                                  ;
 25929                                  ; Function:
 25930                                  ;	invalidate secondary cache if in there
 25931                                  ; Output:
 25932                                  ;	[SC_STATUS] is updated
 25933                                  ;---------------------------------------------------------------------------
 25934                                  
 25935                                  INVALIDATE_SC:
 25936                                  	; SS override for all variables used
 25937                                  
 25938 00004870 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25939 00004873 720C                    	JC	short outrange		    ;AN000;;LB. no
 25940 00004875 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25941 00004878 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25942 0000487A F7D0                    	NOT	AX			    ;AN000;;LB.
 25943 0000487C 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25944                                  outrange:				    ;AN000;;LB.
 25945 00004881 C3                      	retn				    ;AN000;;LB.
 25946                                  
 25947                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25948                                  ; 22/11/2022
 25949                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25950                                  
 25951                                  ;Break	<VIRREAD- virtually read data into buffer>
 25952                                  ;--------------------------------------------------------------------------
 25953                                  ;
 25954                                  ; Procedure Name : SC_FLAG
 25955                                  ;
 25956                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25957                                  ;		     1, continuous sectors were read into SC
 25958                                  ; Function:
 25959                                  ;	   Move data from SC to buffer
 25960                                  ; Output:
 25961                                  ;	 carry clear, data is moved to buffer
 25962                                  ;	 carry set, bad sector or exceeds maximum sector
 25963                                  ;	   SC_FLAG =0
 25964                                  ;	   CALLSCNT=1
 25965                                  ;	   SC_STATUS= -1 if succeeded
 25966                                  ;     
 25967                                  ;		       0 if failed
 25968                                  ;--------------------------------------------------------------------------
 25969                                  
 25970                                  VIRREAD:
 25971                                  	; SS override for all variables used
 25972                                  
 25973 00004882 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25974 00004888 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25975 0000488A 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25976 0000488E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25977 00004892 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25978 00004896 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25979 0000489A 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25980 000048A0 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25981                                  
 25982                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25983 000048A7 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25984 000048AD 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25985 000048AF 1E                      	PUSH	DS			    ;AN000;;LB.
 25986 000048B0 56                      	PUSH	SI			    ;AN000;;LB.
 25987 000048B1 06                      	PUSH	ES			    ;AN000;;LB.
 25988 000048B2 57                      	PUSH	DI			    ;AN000;;LB.
 25989 000048B3 52                      	PUSH	DX			    ;AN000;;LB.
 25990 000048B4 51                      	PUSH	CX			    ;AN000;;LB.
 25991 000048B5 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25992 000048B7 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 25993 000048BA 59                      	POP	CX
 25994 000048BB 5A                      	POP	DX			    ;AN000;;LB.
 25995 000048BC 5F                      	POP	DI			    ;AN000;;LB.
 25996 000048BD 07                      	POP	ES			    ;AN000;;LB.
 25997 000048BE 5E                      	POP	SI			    ;AN000;;LB.
 25998 000048BF 1F                      	POP	DS			    ;AN000;;LB.
 25999 000048C0 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 26000                                  scerror:				    ;AN000;
 26001 000048C2 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 26002 000048C9 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 26003 000048D0 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 26004 000048D6 F9                      	STC				    ;AN000;;LB. carry set
 26005 000048D7 C3                      	retn				    ;AN000;;LB.
 26006                                  sc2end: 				    ;AN000;
 26007 000048D8 F8                      	CLC				    ;AN000;;LB. carry clear
 26008 000048D9 C3                      	retn				    ;AN000;;LB.
 26009                                  
 26010                                  ; 30/04/2019 - Retro  DOS v4.0
 26011                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 26012                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26013                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 26014                                  
 26015                                  ;Break	<SC2BUF- move data from SC to buffer>
 26016                                  ;----------------------------------------------------------------------------
 26017                                  ;
 26018                                  ; Procedure Name : SC2BUF
 26019                                  ;
 26020                                  ; Inputs:  [SC_STATUS] = SC validity status
 26021                                  ;	   [SC_SECTOR_SIZE] = request sector size
 26022                                  ;	   [SC_CACHE_PTR] = pointer to SC
 26023                                  ; Function:
 26024                                  ;	   Move data from SC to buffer
 26025                                  ; Output:
 26026                                  ;	   carry clear, in SC  and data is moved
 26027                                  ;	   carry set, not in SC and data is not moved
 26028                                  ;---------------------------------------------------------------------------
 26029                                  
 26030                                  SC2BUF:
 26031                                  	; SS override for all variables used
 26032 000048DA E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 26033                                  	;JC	short noSC		    ;AN000;LB. no
 26034                                  	; 24/09/2023
 26035 000048DD 723D                    	jc	short sexit
 26036 000048DF B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 26037 000048E2 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 26038 000048E4 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 26039 000048E9 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 26040                                  ;entry SC2BUF2
 26041                                  SC2BUF2:				    ;AN000;
 26042                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 26043                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 26044                                  	; 24/09/2023
 26045 000048EB 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 26046 000048EF 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 26047 000048F0 F7E1                    	mul	cx
 26048 000048F2 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 26049 000048F7 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26050 000048FC 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 26051 000048FE 89C6                    	MOV	SI,AX			    ;AN000;LB.
 26052 00004900 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 26053 00004905 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 26054                                  	; 24/09/2023
 26055                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 26056 0000490A D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 26057                                  ;entry MOVWORDS
 26058                                  MOVWORDS:				    ;AN000;
 26059 0000490C 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 26060 00004912 7403                    	JZ	short nodd		    ;AN000;LB. no
 26061 00004914 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 26062 00004916 66                      	DB	66H			    ;AN000;LB. use double word move
 26063                                  nodd:
 26064 00004917 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 26065 00004919 F8                      	CLC				    ;AN000;LB. clear carry
 26066 0000491A C3                      	retn				    ;AN000;LB. exit
 26067                                  noSC:					    ;AN000;
 26068 0000491B F9                      	STC				    ;AN000;LB. set carry
 26069                                  sexit:					    ;AN000;
 26070 0000491C C3                      	retn				    ;AN000;LB.
 26071                                  
 26072                                  ;============================================================================
 26073                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 26074                                  ;============================================================================
 26075                                  ; 29/07/2018 - Retro DOS v3.0
 26076                                  ; 19/05/2019 - Retro DOS v4.0
 26077                                  
 26078                                  ;	TITLE	MKNODE - Node maker
 26079                                  ;	NAME	MKNODE
 26080                                  
 26081                                  ;**	MKNODE.ASM
 26082                                  ;----------------------------------------------------------------------------
 26083                                  ;	Low level routines for making a new local file system node
 26084                                  ;	and filling in an SFT from a directory entry
 26085                                  ;
 26086                                  ;	BUILDDIR
 26087                                  ;	SETDOTENT
 26088                                  ;	MakeNode
 26089                                  ;	NEWENTRY
 26090                                  ;	FREEENT
 26091                                  ;	NEWDIR
 26092                                  ;	DOOPEN
 26093                                  ;	RENAME_MAKE
 26094                                  ;	CHECK_VIRT_OPEN
 26095                                  ;
 26096                                  ;	Revision history:
 26097                                  ;
 26098                                  ;	 AN000	version 4.0  Jan. 1988
 26099                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26100                                  
 26101                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26102                                  ;----------------------------------------------------------------------------
 26103                                  ;
 26104                                  ; Procedure Name : BUILDDIR,NEWDIR
 26105                                  ;
 26106                                  ; Inputs:
 26107                                  ;       ES:BP Points to DPB
 26108                                  ;       [THISSFT] Set if using NEWDIR entry point
 26109                                  ;               (used by ALLOCATE)
 26110                                  ;       [LASTENT] current last valid entry number in directory if no free
 26111                                  ;               entries
 26112                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26113                                  ; Function:
 26114                                  ;       Grow directory if no free entries and not root
 26115                                  ; Outputs:
 26116                                  ;       CARRY SET IF FAILURE
 26117                                  ;       ELSE
 26118                                  ;          AX entry number of new entry
 26119                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26120                                  ;               AX = first entry of new dir
 26121                                  ;       GETENT should be called to set [LASTENT]
 26122                                  ;
 26123                                  ;----------------------------------------------------------------------------
 26124                                  
 26125                                  ; 19/05/2019 - Retro DOS v4.0
 26126                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26127                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26128                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26129                                  
 26130                                  BUILDDIR:
 26131                                  	; 29/07/2018 - Retro DOS v3.0
 26132                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26133                                  
 26134 0000491D A1[D805]                        MOV     AX,[ENTFREE]
 26135 00004920 83F8FF                          CMP     AX,-1 ; 0FFFFh
 26136                                  	;JZ	short CHECK_IF_ROOT
 26137                                          ;CLC
 26138                                          ;retn
 26139                                  	; 24/09/2023
 26140 00004923 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 26141                                  
 26142                                  CHECK_IF_ROOT:
 26143 00004925 833E[C205]00                    CMP     word [DIRSTART],0
 26144 0000492A 7502                            JNZ	short NEWDIR
 26145                                          ;STC
 26146                                  	; 24/09/2023
 26147                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 26148                                  builddir_cmc_retn:
 26149                                  	; 24/09/2023
 26150 0000492C F5                      	cmc	; cf=1 <-> cf=0
 26151                                  builddir_retn:
 26152 0000492D C3                              retn				; Can't grow root
 26153                                  
 26154                                  	;entry   NEWDIR
 26155                                  NEWDIR: 
 26156 0000492E 8B1E[C205]              	MOV     BX,[DIRSTART]
 26157 00004932 09DB                            OR      BX,BX
 26158 00004934 7405                            JZ	short NULLDIR
 26159 00004936 E82806                  	call	GETEOF
 26160 00004939 72F2                            jc	short builddir_retn	; Screw up
 26161                                  NULLDIR:
 26162 0000493B B90100                          MOV     CX,1
 26163 0000493E E83905                  	call	ALLOCATE
 26164 00004941 72EA                            jc	short  builddir_retn
 26165 00004943 8B16[C205]                      MOV     DX,[DIRSTART]
 26166 00004947 09D2                            OR      DX,DX
 26167 00004949 750D                            JNZ	short ADDINGDIR
 26168 0000494B E8DAF5                  	call	SETDIRSRCH
 26169 0000494E 72DD                            jc	short  builddir_retn
 26170 00004950 C706[4803]FFFF                  MOV     word [LASTENT],-1
 26171 00004956 EB29                            JMP     SHORT GOTDIRREC
 26172                                  ADDINGDIR:
 26173 00004958 53                              PUSH    BX
 26174 00004959 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26175 0000495D E82D0C                          call	IsEOF
 26176 00004960 5B                              POP     BX
 26177 00004961 7217                            JB	short NOTFIRSTGROW
 26178                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26179 00004963 891E[BC05]                      MOV     [CLUSNUM],BX
 26180                                  	; 24/09/2023
 26181                                  	;PUSH	CX ; (not necessary)
 26182 00004967 50                      	PUSH	AX
 26183 00004968 55                      	PUSH	BP
 26184 00004969 B401                            MOV     AH,1			; CLUSNUM update
 26185                                  	; 15/12/2022
 26186 0000496B 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26187                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26188                                  	;;mov	dl,[es:bp+0]
 26189                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26190 0000496F 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26191 00004973 89DD                            MOV     BP,BX 			; CLUSNUM
 26192 00004975 E8E7DD                  	call	FastOpen_Update
 26193 00004978 5D                              POP     BP
 26194 00004979 58                              POP     AX
 26195                                  	; 24/09/2023
 26196                                          ;POP	CX
 26197                                  
 26198                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26199                                  NOTFIRSTGROW:
 26200 0000497A 89DA                            MOV     DX,BX
 26201 0000497C 30DB                            XOR     BL,BL
 26202 0000497E E8CC04                  	call	FIGREC
 26203                                  GOTDIRREC:
 26204                                  	;mov	cl,[es:bp+4]
 26205 00004981 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26206 00004985 FEC1                            INC     CL
 26207 00004987 30ED                            XOR     CH,CH
 26208                                  ZERODIR:
 26209 00004989 51                              PUSH    CX
 26210                                  	; 22/09/2023
 26211                                  	;;mov	byte [ALLOWED],18h
 26212                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 26213 0000498A B0FF                            MOV     AL,0FFH
 26214                                          ;call	GETBUFFR
 26215 0000498C E82910                          call	GETBUFFRD ; *
 26216 0000498F 7302                    	JNC	short GET_SSIZE
 26217 00004991 59                              POP     CX
 26218 00004992 C3                              retn
 26219                                  
 26220                                  GET_SSIZE:
 26221                                  	;mov	cx,[es:bp+2]
 26222 00004993 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26223 00004997 06                              PUSH    ES
 26224 00004998 C43E[E205]                      LES     DI,[CURBUF]
 26225                                  	;or	byte [es:di+5],4
 26226 0000499C 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26227 000049A1 57                              PUSH    DI
 26228                                  	;;add	di,16	; MSDOS 3.3
 26229                                  	;add	di,20	; MSDOS 6.0	
 26230 000049A2 83C714                          ADD     DI,BUFINSIZ
 26231 000049A5 31C0                            XOR     AX,AX
 26232 000049A7 D1E9                            SHR     CX,1
 26233 000049A9 F3AB                            REP     STOSW
 26234 000049AB 7301                            JNC	short EVENZ
 26235 000049AD AA                              STOSB
 26236                                  EVENZ:
 26237 000049AE 5F                              POP     DI
 26238                                  
 26239                                  	; MSDOS 6.0
 26240 000049AF 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26241                                  					;LB. if already dirty		  ;AN000;
 26242 000049B4 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26243 000049B6 E80612                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26244                                          
 26245                                  	;or	byte [es:di+5],40h
 26246 000049B9 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26247                                  yesdirty7:
 26248 000049BE 07                              POP	ES
 26249 000049BF 59                              POP	CX
 26250                                  
 26251                                  	; 19/05/2019 - Retro DOS v4.0
 26252                                  
 26253                                  	; MSDOS 3.3
 26254                                  	;INC	DX
 26255                                  
 26256                                  	; MSDOS 6.0
 26257                                  	; 24/09/2023
 26258                                  	;add	dx,1
 26259                                  	;;adc	word [HIGH_SECTOR],0
 26260                                  	;; 24/09/2023
 26261                                  	;; ax=0
 26262                                  	;adc	[HIGH_SECTOR],ax ; 0
 26263                                  	; 24/09/2023
 26264 000049C0 42                      	inc	dx
 26265 000049C1 7504                    	jnz	short loop_zerodir
 26266 000049C3 FF06[0706]              	inc	word [HIGH_SECTOR]
 26267                                  loop_zerodir:
 26268 000049C7 E2C0                            LOOP    ZERODIR
 26269                                  
 26270 000049C9 A1[4803]                        MOV     AX,[LASTENT]
 26271 000049CC 40                              INC     AX
 26272                                  	; 24/09/2023
 26273                                  	; cf=0
 26274                                  	;CLC
 26275 000049CD C3                              retn
 26276                                  
 26277                                  ;--------------------------------------------------------------------------
 26278                                  ;
 26279                                  ; Procedure Name : SETDOTENT
 26280                                  ;
 26281                                  ; set up a . or .. directory entry for a directory.
 26282                                  ;
 26283                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26284                                  ;               AX contains ". " or ".."
 26285                                  ;               DX contains first cluster of entry
 26286                                  ;
 26287                                  ;----------------------------------------------------------------------------
 26288                                  
 26289                                  SETDOTENT:
 26290                                  ;	Fill in name field
 26291 000049CE AB                              STOSW
 26292 000049CF B90400                          MOV     CX,4
 26293 000049D2 B82020                          MOV     AX,"  " ; 2020h
 26294 000049D5 F3AB                            REP     STOSW
 26295 000049D7 AA                              STOSB
 26296                                  
 26297                                  ;	Set up attribute
 26298                                  	;mov	al, 10h
 26299 000049D8 B010                            MOV     AL,attr_directory
 26300 000049DA AA                              STOSB
 26301                                  
 26302                                  ;	Initialize time and date of creation
 26303 000049DB 83C70A                          ADD     DI,10
 26304 000049DE 8B36[9E05]                      MOV     SI,[THISSFT]
 26305                                  	;mov	ax,[si+0Dh]
 26306 000049E2 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26307 000049E5 AB                              STOSW
 26308                                  	;mov	ax,[si+0Fh]
 26309 000049E6 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26310 000049E9 AB                      	STOSW
 26311                                  
 26312                                  ;	Set up first cluster field
 26313 000049EA 89D0                            MOV     AX,DX
 26314 000049EC AB                              STOSW
 26315                                  
 26316                                  ;	0 file size
 26317 000049ED 31C0                            XOR     AX,AX
 26318 000049EF AB                              STOSW
 26319 000049F0 AB                              STOSW
 26320 000049F1 C3                              retn
 26321                                  
 26322                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26323                                  ;---------------------------------------------------------------------------
 26324                                  ;
 26325                                  ; Procedure Name : MakeNode
 26326                                  ;
 26327                                  ; Inputs:
 26328                                  ;       AL - attribute to create
 26329                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26330                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26331                                  ;               (AH ignored on dirs and devices)
 26332                                  ;
 26333                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26334                                  ;               a name already existant is ALWAYS an error in these cases.
 26335                                  ;
 26336                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26337                                  ;               terminated)
 26338                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26339                                  ;               ( = -1 if current dir not involved, else
 26340                                  ;                Points to first char after last "/" of current dir part)
 26341                                  ;       [THISCDS] Points to CDS being used
 26342                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26343                                  ; Function:
 26344                                  ;       Make a new node
 26345                                  ; Outputs:
 26346                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26347                                  ;       CARRY SET IF ERROR
 26348                                  ;          AX = 1 A node by this name exists and is a directory
 26349                                  ;          AX = 2 A new node could not be created
 26350                                  ;          AX = 3 A node by this name exists and is a disk file
 26351                                  ;               (AH was NZ on input)
 26352                                  ;          AX = 4 Bad Path
 26353                                  ;               SI return from GetPath maintained
 26354                                  ;          AX = 5 Attribute mismatch
 26355                                  ;          AX = 6 Sharing Violation
 26356                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26357                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26358                                  ;       ELSE
 26359                                  ;          AX = 0 Disk Node
 26360                                  ;          AX = 3 Device Node (error in some cases)
 26361                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26362                                  ;               containing new node.
 26363                                  ;          [CURBUF+2]:BX Points to entry
 26364                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26365                                  ;          [THISSFT] is filled in
 26366                                  ;               sf_mode = unchanged.
 26367                                  ;          Attribute byte in entry is input AL
 26368                                  ; DS preserved, others destroyed
 26369                                  ;
 26370                                  ;-------------------------------------------------------------------------
 26371                                  
 26372                                  ; 19/05/2019 - Retro DOS v4.0
 26373                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26374                                  
 26375                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26376                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26377                                  
 26378                                  MakeNode:
 26379                                  	;mov	word [CREATING],0E5FFh
 26380 000049F2 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26381 000049F8 50                              PUSH    AX              ; Save AH value
 26382 000049F9 C606[4C03]00            	MOV	byte [NoSetDir],0
 26383 000049FE A2[6D05]                	MOV	[SATTRIB],AL
 26384 00004A01 E887F5                  	call	GetPathNoSet
 26385 00004A04 88CA                            MOV     DL,CL           ; Save CL info
 26386 00004A06 89C1                            MOV     CX,AX           ; Device ID to CH
 26387 00004A08 58                              POP     AX              ; Get back AH
 26388 00004A09 732E                            JNC	short make_exists ; File existed
 26389 00004A0B 7505                            JNZ	short make_err_4 ; Path bad
 26390 00004A0D 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26391 00004A10 7406                            JZ	short make_type	; Name simply not found, and no metas
 26392                                  make_err_4:
 26393 00004A12 B004                            MOV     AL,4            ; case 1 bad path
 26394                                  make_err_ret:
 26395 00004A14 30E4                            XOR     AH,AH
 26396 00004A16 F9                              STC
 26397                                  ;make_retn:	; 22/11/2022
 26398 00004A17 C3                              retn
 26399                                  
 26400                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26401                                  RENAME_MAKE:
 26402                                  make_type:
 26403                                  ;Extended Open hooks
 26404                                  	; MSDOS 6.0
 26405                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26406 00004A18 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26407 00004A1D 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26408 00004A1F 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26409                                  					;FT. set for extended open ;AN000;
 26410                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26411 00004A24 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26412 00004A29 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26413 00004A2B F9                      	STC				;FT. set carry			;AN000;
 26414 00004A2C B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26415                                  	; 22/11/2022
 26416                                  make_retn:
 26417                                  	;return
 26418 00004A2F C3                      	retn				;FT.				;AN000;
 26419                                  
 26420                                  ;	Extended Open hooks
 26421                                  
 26422                                  make_type2:
 26423 00004A30 C43E[9E05]                      LES     DI,[THISSFT]
 26424 00004A34 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26425 00004A36 F9                              STC                     ; Not found
 26426 00004A37 EB5A                            JMP     short make_new
 26427                                  
 26428                                  ; The node exists. It may be either a device, directory or file:
 26429                                  ;   Zero set => directory
 26430                                  ;   High bit of CH on => device
 26431                                  ;   else => file
 26432                                  
 26433                                  make_exists:
 26434 00004A39 7448                            JZ	short make_exists_dir
 26435 00004A3B B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26436                                  	;test	byte [ATTRIB],18h
 26437 00004A3D F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26438 00004A42 753B                            JNZ	short make_err_ret_5
 26439                                  				; Cannot already exist as Disk or Device Node
 26440                                                                  ;       if making DIR or Volume ID
 26441 00004A44 08ED                            OR      CH,CH
 26442 00004A46 781A                            JS	short make_share ; No further checks on attributes if device
 26443 00004A48 08E4                            OR      AH,AH
 26444 00004A4A 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26445 00004A4C 51                              PUSH    CX              ; Save device ID
 26446 00004A4D 8E06[E405]                      MOV     ES,[CURBUF+2]
 26447                                  	;mov	ch,[es:bx+0Bh]
 26448 00004A51 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26449                                  	;test	ch,1
 26450 00004A55 F6C501                  	test	CH,attr_read_only
 26451 00004A58 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26452 00004A5A E8D0F7                  	call	MatchAttributes
 26453 00004A5D 59                              POP     CX              ; Devid back in CH
 26454 00004A5E 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26455 00004A60 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26456                                  make_share:
 26457 00004A62 30E4                            XOR     AH,AH
 26458 00004A64 50                              PUSH    AX              ; Save Disk or Device node
 26459 00004A65 51                              PUSH    CX              ; Save Device ID
 26460 00004A66 88EC                            MOV     AH,CH           ; Device ID to AH
 26461 00004A68 E84501                          CALL    DOOPEN          ; Fill in SFT for share check
 26462 00004A6B C43E[9E05]                      LES     DI,[THISSFT]
 26463 00004A6F 56                      	push	si
 26464 00004A70 53                      	push	bx		; Save CURBUF pointers
 26465 00004A71 E86E29                  	call	ShareEnter
 26466 00004A74 735A                            jnc	short MakeEndShare
 26467                                  
 26468                                  ; User failed request.
 26469 00004A76 5B                      	pop	bx
 26470 00004A77 5E                      	pop	si
 26471 00004A78 59                      	pop	cx
 26472 00004A79 58                      	pop	ax
 26473                                  
 26474                                  Make_Share_ret:
 26475 00004A7A B006                            MOV     AL,6
 26476 00004A7C EB96                            JMP	short make_err_ret
 26477                                  
 26478                                  make_err_ret_5P:
 26479 00004A7E 59                              POP     CX              ; Get back device ID
 26480                                  make_err_ret_5:
 26481 00004A7F B005                            MOV     AL,5            ; Attribute mismatch
 26482                                          ; 22/11/2022
 26483 00004A81 EB91                    	JMP     short make_err_ret
 26484                                  
 26485                                  make_exists_dir:
 26486 00004A83 B001                            MOV     AL,1            ; exists as directory, always an error
 26487                                  	; 22/11/2022
 26488 00004A85 EB8D                    	JMP     short make_err_ret
 26489                                  
 26490                                  make_save:
 26491 00004A87 50                              PUSH    AX              ; Save whether Disk or File
 26492 00004A88 89C8                            MOV     AX,CX           ; Device ID to AH
 26493 00004A8A E87400                          CALL    NEWENTRY
 26494 00004A8D 58                              POP     AX              ; 0 if Disk, 3 if File
 26495 00004A8E 739F                            jnc	short make_retn
 26496 00004A90 B002                            MOV     AL,2            ; create failed case 2
 26497                                  make_save_retn:
 26498 00004A92 C3                              retn
 26499                                  
 26500                                  make_new:
 26501 00004A93 E8F1FF                          call    make_save
 26502 00004A96 72FA                            jc	short make_save_retn	; case 2 fail
 26503                                  	;test	byte [ATTRIB],10h
 26504 00004A98 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26505 00004A9D 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26506                                  					; so don't tell the sharer about them
 26507 00004A9F 50                      	push	ax
 26508 00004AA0 53                      	push	bx
 26509 00004AA1 56                      	push	si		
 26510 00004AA2 E83D29                          call	ShareEnter
 26511 00004AA5 5E                      	pop	si
 26512 00004AA6 5B                      	pop	bx
 26513 00004AA7 58                      	pop	ax
 26514 00004AA8 73E8                    	jnc	short make_save_retn
 26515                                  
 26516                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26517                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26518                                  ; possible: delete the newly created directory entry and return share_error.
 26519                                  
 26520 00004AAA 50                              PUSH    AX
 26521 00004AAB C43E[E205]                      LES     DI,[CURBUF]
 26522                                  	;mov	byte [es:bx],0E5h
 26523 00004AAF 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26524                                  	
 26525                                  	; MSDOS 6.0
 26526                                  	;test	byte [es:di+5],40h
 26527 00004AB3 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26528                                  					;LB. if already dirty		  ;AN000;
 26529 00004AB8 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26530                                  	; 22/11/2022
 26531 00004ABA E80211                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26532                                  	;or	byte [es:di+5],40h
 26533 00004ABD 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26534                                  yesdirty8:
 26535 00004AC2 C42E[8A05]                      LES     BP,[THISDPB]
 26536                                  	; 15/12/2022
 26537 00004AC6 268A4600                        mov	al,[ES:BP]
 26538                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26539                                  	;;mov	al,[es:bp+0]
 26540                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26541 00004ACA E8ED0F                          call	FLUSHBUF		; write out buffer.
 26542 00004ACD 58                              POP     AX
 26543 00004ACE EBAA                            jmp	short Make_Share_ret
 26544                                  
 26545                                  ; We have found an existing file. We have also entered it into the share set.
 26546                                  ; At this point we need to call newentry to correctly address the problem of
 26547                                  ; getting rid of old data (create an existing file) or creating a new
 26548                                  ; directory entry (create a new file). Unfortunately, this operation may
 26549                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26550                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26551                                  ; the share set now, do the operation and then reassert the share access.
 26552                                  ;
 26553                                  ; We are allowed to do this! There is no window! After all, we are in
 26554                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26555                                  
 26556                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26557                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26558                                  
 26559                                  MakeEndShare:
 26560 00004AD0 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26561 00004AD4 31C0                            XOR     AX,AX
 26562 00004AD6 E87DC8                  	call	ECritSFT
 26563 00004AD9 268705                  	xchg	AX,[ES:DI]
 26564                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26565 00004ADC 50                      	push	ax
 26566 00004ADD 57                      	push	di
 26567 00004ADE 06                      	push	es
 26568 00004ADF 9C                              PUSHF
 26569 00004AE0 E8FA28                          call	ShareEnd                ; remove sharing
 26570 00004AE3 9D                              POPF
 26571 00004AE4 07                      	pop	es
 26572 00004AE5 5F                      	pop	di
 26573 00004AE6 268F05                          pop	word [ES:DI]	
 26574                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26575 00004AE9 E885C8                  	call	LCritSFT
 26576                                  	; 22/11/2022
 26577                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26578 00004AEC 5B                      	pop	bx
 26579 00004AED 5E                      	pop	si
 26580 00004AEE 59                      	pop	cx
 26581 00004AEF 58                      	pop	ax
 26582 00004AF0 E894FF                          CALL    make_save
 26583                                  
 26584                                  ; If the user failed, we do not reenter into the sharing set.
 26585                                  
 26586 00004AF3 729D                            jc	short make_save_retn	; bye if error
 26587 00004AF5 50                      	push	ax
 26588 00004AF6 53                      	push	bx
 26589 00004AF7 56                      	push	si
 26590 00004AF8 9C                              PUSHF
 26591 00004AF9 E8E628                          call	ShareEnter
 26592 00004AFC 9D                              POPF
 26593 00004AFD 5E                      	pop	si
 26594 00004AFE 5B                      	pop	bx
 26595 00004AFF 58                      	pop	ax
 26596                                  
 26597                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26598                                  
 26599                                  makeendshare_retn:
 26600 00004B00 C3                              retn
 26601                                  
 26602                                  ;---------------------------------------------------------------------------
 26603                                  ;
 26604                                  ; Procedure Name : NEWENTRY
 26605                                  ;
 26606                                  ; Inputs:
 26607                                  ;       [THISSFT] set
 26608                                  ;       [THISDPB] set
 26609                                  ;       [LASTENT] current last valid entry number in directory if no free
 26610                                  ;               entries
 26611                                  ;       [VOLID] set if a volume ID was found during search
 26612                                  ;	Attrib Contains attributes for new file
 26613                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26614                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26615                                  ;               NC means file existed (device)
 26616                                  ;               C  means file did not exist
 26617                                  ;       AH = Device ID byte
 26618                                  ;       If FILE
 26619                                  ;           [CURBUF+2]:BX points to start of directory entry
 26620                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26621                                  ;       If device
 26622                                  ;           DS:BX points to start of "fake" directory entry
 26623                                  ;           DS:SI points to dir_first of "fake" directory entry
 26624                                  ;               (has DWORD pointer to device header)
 26625                                  ; Function:
 26626                                  ;       Make a new directory entry
 26627                                  ;       If an old one existed it is truncated first
 26628                                  ; Outputs:
 26629                                  ;       Carry set if error
 26630                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26631                                  ;               vol ID, user FAILed to I 24
 26632                                  ;       else
 26633                                  ;               outputs of DOOPEN
 26634                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26635                                  ;
 26636                                  ;----------------------------------------------------------------------------
 26637                                  
 26638                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26639                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26640                                  
 26641                                  NEWENTRY:
 26642 00004B01 C42E[8A05]              	LES     BP,[THISDPB]
 26643 00004B05 7315                            JNC	short EXISTENT	
 26644 00004B07 803E[4A03]00                    CMP     byte [FAILERR],0
 26645                                  	;STC
 26646                                          ;jnz	short makeendshare_retn	; User FAILed, node might exist
 26647                                          ; 24/09/2023
 26648 00004B0C 750C                    	jnz	short ERRRET3
 26649 00004B0E E80CFE                  	CALL    BUILDDIR        ; Try to build dir
 26650 00004B11 72ED                            jc	short makeendshare_retn	; Failed
 26651 00004B13 E8E3F3                          call	GETENT          ; Point at that free entry
 26652 00004B16 72E8                            jc	short makeendshare_retn	; Failed
 26653 00004B18 EB0E                            JMP     SHORT FREESPOT
 26654                                  
 26655                                  ERRRET3:
 26656 00004B1A F9                              STC
 26657                                  newentry_retn:
 26658 00004B1B C3                              retn
 26659                                  
 26660                                  EXISTENT:
 26661 00004B1C 08E4                            OR      AH,AH           ; Check if file is I/O device
 26662 00004B1E 7903                            JNS	short NOT_DEV1
 26663 00004B20 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26664                                  
 26665                                  NOT_DEV1:
 26666 00004B23 E82901                          call	FREEENT		; Free cluster chain
 26667 00004B26 72F3                            jc	short newentry_retn ; Failed
 26668                                  FREESPOT:
 26669                                  	;test	byte [ATTRIB],8
 26670 00004B28 F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26671 00004B2D 7407                            JZ	short NOTVOLID
 26672 00004B2F 803E[7B05]00                    CMP     BYTE [VOLID],0
 26673 00004B34 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26674                                  NOTVOLID:
 26675 00004B36 8E06[E405]                      MOV     ES,[CURBUF+2]
 26676 00004B3A 89DF                            MOV     DI,BX
 26677                                  
 26678 00004B3C BE[4B05]                        MOV     SI,NAME1
 26679                                  
 26680 00004B3F B90500                          MOV     CX,5
 26681 00004B42 F3A5                            REP     MOVSW
 26682 00004B44 A4                              MOVSB                   ; Move name into dir entry
 26683 00004B45 A0[6B05]                	MOV	AL,[ATTRIB]
 26684 00004B48 AA                      	STOSB                   ; Attributes
 26685                                  
 26686                                  ;; File Tagging for Create DOS 4.00
 26687 00004B49 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26688                                  ;; File Tagging for Create DOS 4.00
 26689                                  
 26690 00004B4B 31C0                            XOR     AX,AX
 26691 00004B4D F3AB                            REP     STOSW           ; Zero pad
 26692 00004B4F E8BDBF                          call	DATE16
 26693 00004B52 92                              XCHG    AX,DX
 26694 00004B53 AB                              STOSW                   ; dir_time
 26695 00004B54 92                              XCHG    AX,DX
 26696 00004B55 AB                              STOSW                   ; dir_date
 26697 00004B56 31C0                            XOR     AX,AX
 26698 00004B58 57                              PUSH    DI              ; Correct SI input value
 26699                                  				; 	(recomputed for new buffer)
 26700 00004B59 AB                              STOSW                   ; Zero dir_first and size
 26701 00004B5A AB                              STOSW
 26702 00004B5B AB                              STOSW
 26703                                  updnxt:
 26704 00004B5C 8B36[E205]              	MOV	SI,[CURBUF]
 26705                                  
 26706                                  	; 19/05/2019 - Retro DOS v4.0
 26707                                  
 26708                                  	; MSDOS 6.0
 26709 00004B60 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26710                                  				;LB. if already dirty		  ;AN000;
 26711 00004B65 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26712 00004B67 E85510                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26713                                          
 26714                                  	;or	byte [es:si+5],40h
 26715 00004B6A 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26716                                  yesdirty9:
 26717 00004B6F C42E[8A05]                      LES     BP,[THISDPB]
 26718                                  	; 15/12/2022
 26719 00004B73 268A4600                	MOV	AL,[ES:BP]
 26720                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26721                                  	;;mov	al,[es:bp+0]
 26722                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26723 00004B77 50                              PUSH    AX
 26724 00004B78 53                              PUSH    BX
 26725                                  
 26726                                  ; If we have a file, we need to increment the open ref. count so that
 26727                                  ; we have some protection against invalid media changes if an Int 24
 26728                                  ; error occurs.
 26729                                  ; Do nothing for a device.
 26730                                  
 26731 00004B79 06                      	push	es
 26732 00004B7A 57                      	push	di
 26733 00004B7B C43E[9E05]                      LES     DI,[THISSFT]
 26734                                  	;test	word [es:di+5],80h
 26735                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26736 00004B7F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26737 00004B84 751A                            jnz	short GotADevice
 26738 00004B86 1E                      	push	ds
 26739 00004B87 53                      	push	bx
 26740 00004B88 C51E[8A05]                      LDS     BX,[THISDPB]
 26741                                  	;mov	[es:di+7],bx
 26742 00004B8C 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26743 00004B90 8CDB                            MOV     BX,DS
 26744                                  	;mov	[es:di+9],bx
 26745 00004B92 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26746 00004B96 5B                      	pop	bx
 26747 00004B97 1F                      	pop	ds ; need to use DS for segment later on
 26748 00004B98 E8B8FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26749 00004B9B C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26750                                  GotADevice:
 26751 00004BA0 5F                      	pop	di
 26752 00004BA1 07                      	pop	es
 26753                                  
 26754 00004BA2 E8150F                          call	FLUSHBUF
 26755 00004BA5 E8EF00                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26756 00004BA8 5B                              POP     BX
 26757 00004BA9 58                              POP     AX
 26758 00004BAA 5E                              POP     SI              ; Get SI input back
 26759 00004BAB 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26760 00004BAD 7301                    	jnc	short DOOPEN    ; Failed
 26761 00004BAF C3                      	retn
 26762                                  	
 26763                                  ;NOTE FALL THROUGH
 26764                                  
 26765                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26766                                  
 26767                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26768                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26769                                  
 26770                                  ; DOOPEN
 26771                                  ;----------------------------------------------------------------------------
 26772                                  ;
 26773                                  ; Inputs:
 26774                                  ;       [THISDPB] points to DPB if file
 26775                                  ;       [THISSFT] points to SFT being used
 26776                                  ;       AH = Device ID byte
 26777                                  ;       If FILE
 26778                                  ;           [CURBUF+2]:BX points to start of directory entry
 26779                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26780                                  ;       If device
 26781                                  ;           DS:BX points to start of "fake" directory entry
 26782                                  ;           DS:SI points to dir_first of "fake" directory entry
 26783                                  ;               (has DWORD pointer to device header)
 26784                                  ; Function:
 26785                                  ;       Fill in SFT from dir entry
 26786                                  ; Outputs:
 26787                                  ;       CARRY CLEAR
 26788                                  ;       sf_ref_count and sf_mode fields not altered
 26789                                  ;       sf_flags high byte = 0
 26790                                  ;       sf_flags low byte = AH except
 26791                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26792                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26793                                  ;       sf_position = 0
 26794                                  ;       If device
 26795                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26796                                  ;           sf_size = 0
 26797                                  ;       If file
 26798                                  ;           sf_firclus sf_size set from entry
 26799                                  ;           sf_devptr = [THISDPB]
 26800                                  ;           sf_cluspos = 0
 26801                                  ;           sf_lstclus = sf_firclus
 26802                                  ;           sf_dirsec sf_dirpos set
 26803                                  ; DS,SI,BX preserved, others destroyed
 26804                                  ;
 26805                                  ;----------------------------------------------------------------------------
 26806                                  
 26807                                  	;entry	DOOPEN
 26808                                  DOOPEN:
 26809                                  ;	Generate and store attribute
 26810                                  
 26811 00004BB0 88E6                            MOV     DH,AH           ; AH to different place
 26812 00004BB2 C43E[9E05]                      LES     DI,[THISSFT]
 26813                                  	;add	di,4
 26814 00004BB6 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26815                                  	; 24/09/2023
 26816 00004BB9 31C0                    	xor	ax,ax
 26817                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 26818                                  				;   attribute of 0 (for R/O testing etc).
 26819 00004BBB 08F6                            OR      DH,DH           ; See if our assumption good.
 26820 00004BBD 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26821 00004BBF 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26822                                  	;mov	al,[BX+0Bh]
 26823 00004BC3 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26824                                  				; If file, get attrib from dir entry
 26825                                  DEV_SFT1:
 26826 00004BC6 AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26827                                  
 26828                                  ;	Generate and store flags word
 26829                                  
 26830                                  	; 24/09/2023
 26831                                  	;XOR	AX,AX
 26832                                          ; ah=0
 26833 00004BC7 88F0                    	MOV     AL,DH
 26834                                  	;or	al,40h
 26835 00004BC9 0C40                            OR      AL,devid_file_clean
 26836 00004BCB AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26837                                  
 26838                                  ;	Generate and store device pointer
 26839                                  
 26840 00004BCC 1E                              PUSH    DS
 26841                                  	;lds	ax,[bx+1Ah]
 26842 00004BCD C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26843 00004BD0 08F6                            OR      DH,DH
 26844 00004BD2 7805                            JS	short DEV_SFT2
 26845                                  
 26846                                  ;hkn; SS override
 26847 00004BD4 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26848                                  DEV_SFT2:
 26849 00004BD9 AB                              STOSW 			; store offset
 26850 00004BDA 8CD8                            MOV     AX,DS
 26851 00004BDC 1F                              POP     DS
 26852 00004BDD AB                      	STOSW			; store segment
 26853                                  				; ES:DI -> sf_firclus
 26854                                  
 26855                                  ;	Generate pointer to, generate and store first cluster 
 26856                                  ;	(irrelevant for devices)
 26857                                  
 26858 00004BDE 56                              PUSH    SI              ; Save pointer to dir_first
 26859 00004BDF A5                              MOVSW                   ; dir_first -> sf_firclus
 26860                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26861                                  
 26862                                  ;	Copy time/date of last modification
 26863                                  
 26864                                  	;sub	si,6
 26865 00004BE0 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26866                                  				; DS:SI->dir_time
 26867 00004BE3 A5                              MOVSW                   ; dir_time -> sf_time
 26868                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26869 00004BE4 A5                              MOVSW                   ; dir_date -> sf_date
 26870                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26871                                  
 26872                                  ;	Generate and store file size (0 for devices)
 26873                                  
 26874 00004BE5 AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26875 00004BE6 AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26876 00004BE7 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26877 00004BE9 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26878 00004BEA 08F6                            OR      DH,DH
 26879 00004BEC 7904                            JNS	short FILE_SFT1
 26880 00004BEE 31C0                            XOR     AX,AX
 26881 00004BF0 89C1                            MOV     CX,AX           ; Devices are open ended
 26882                                  FILE_SFT1:
 26883 00004BF2 91                              XCHG    AX,CX
 26884 00004BF3 AB                              STOSW                   ; Low word of sf_size
 26885 00004BF4 91                              XCHG    AX,CX
 26886 00004BF5 AB                              STOSW                   ; High word of sf_size
 26887                                                                  ; ES:DI -> sf_position
 26888                                  ; Initialize position to 0
 26889                                  
 26890 00004BF6 31C0                            XOR     AX,AX
 26891 00004BF8 AB                              STOSW
 26892 00004BF9 AB                              STOSW                   ; sf_position
 26893                                                                  ; ES:DI -> sf_cluspos
 26894                                  
 26895                                  ; Generate cluster optimizations for files
 26896                                  
 26897 00004BFA 08F6                            OR      DH,DH
 26898 00004BFC 7843                            JS	short DEV_SFT3
 26899 00004BFE AB                              STOSW                   ; sf_cluspos ; 19h
 26900                                  	;mov	ax,[bx+1Ah]
 26901 00004BFF 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26902                                  	; 19/05/2019
 26903                                  	; MSDOS 3.3
 26904                                  	;STOSW 			; sf_lstclus ; 1Bh
 26905                                  	; MSDOS 6.0
 26906 00004C02 57                              PUSH	DI              ;AN004; save dirsec offset
 26907                                  	;sub	di,1Bh
 26908 00004C03 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26909                                  	;mov	[es:di+35h],ax
 26910 00004C06 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26911 00004C0A 5F                              POP	DI              ;AN004; restore dirsec offset
 26912                                  
 26913                                  ; DOS 3.3  FastOpen  6/13/86
 26914                                  
 26915 00004C0B 1E                      	PUSH	DS
 26916                                  
 26917                                  ;hkn; SS is DOSDATA
 26918 00004C0C 16                      	push	ss
 26919 00004C0D 1F                      	pop	ds
 26920                                  	;test	byte [FastOpenFlg],4
 26921 00004C0E F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26922 00004C13 7411                    	JZ	short Not_FastOpen
 26923                                  
 26924                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26925 00004C15 BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26926                                  
 26927                                  	;mov	ax,[si+1]
 26928 00004C18 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26929 00004C1B AB                              STOSW                   ; sf_dirsec
 26930                                  	; MSDOS 6.0
 26931                                  	;mov	ax,[si+3]
 26932 00004C1C 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26933                                  				;;; changed for >32mb
 26934 00004C1F AB                              STOSW                   ; sf_dirsec
 26935                                  	; 19/08//2018
 26936 00004C20 8A04                    	mov	al,[SI]
 26937                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26938 00004C22 AA                              STOSB                   ; sf_dirpos
 26939 00004C23 1F                              POP	DS
 26940                                          ;JMP	short Next_Name
 26941                                  	; 24/09/2023
 26942 00004C24 EB1E                    	jmp	short FILE_SFT2  ; cf=0 (after 'test' instruction)
 26943                                  
 26944                                  ; DOS 3.3  FastOpen  6/13/86
 26945                                  
 26946                                  Not_FastOpen:
 26947                                          ;POP     DS		; normal path
 26948                                  
 26949                                  ;hkn; SS override
 26950                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26951                                  	; 16/12/2022
 26952                                  	; 28/07/2019
 26953 00004C26 8B36[E205]              	mov	si,[CURBUF]
 26954 00004C2A 1F                      	pop	ds
 26955                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26956                                  	;pop	ds
 26957                                  	;mov	si,[ss:CURBUF]
 26958                                  	
 26959                                  	;mov	ax,[si+6]
 26960 00004C2B 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26961 00004C2E AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26962                                  	; 19/05/2019        
 26963                                  	; MSDOS 6.0
 26964                                  	;mov	ax,[si+8]
 26965 00004C2F 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26966 00004C32 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26967                                          
 26968 00004C33 89D8                    	MOV     AX,BX
 26969                                  	;;add	si,16	; MSDOS 3.3	
 26970                                  	;add	si,20	; MSDOS 6.0
 26971 00004C35 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26972 00004C38 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26973                                          ;mov	cl,32
 26974 00004C3A B120                    	MOV     CL,dir_entry.size
 26975 00004C3C F6F1                            DIV     CL
 26976 00004C3E AA                              STOSB                   ; sf_dirpos
 26977                                  Next_Name:
 26978 00004C3F EB03                            JMP     SHORT FILE_SFT2
 26979                                  
 26980                                  	; 24/09/2023
 26981                                  	; cf=0 (after 'or' instruction)
 26982                                  DEV_SFT3:
 26983                                  	;add	di,7
 26984 00004C41 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26985                                  FILE_SFT2:
 26986                                  
 26987                                  ; Copy in the object's name
 26988                                  
 26989 00004C44 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26990 00004C46 B90B00                          MOV     CX,11
 26991 00004C49 F3A4                            REP     MOVSB           ; sf_name
 26992 00004C4B 5E                              POP     SI              ; recover DS:SI -> dir_first
 26993                                  
 26994                                  ;hkn; SS is DOSDATA
 26995 00004C4C 16                              push	ss
 26996 00004C4D 1F                      	pop	ds
 26997                                  	; 24/09/2023
 26998                                  	; cf=0
 26999                                          ;CLC
 27000 00004C4E C3                              retn
 27001                                  
 27002                                  ;---------------------------------------------------------------------------
 27003                                  ;
 27004                                  ; Procedure Name : FREEENT
 27005                                  ;
 27006                                  ; Inputs:
 27007                                  ;       ES:BP -> DPB
 27008                                  ;       [CURBUF] Set
 27009                                  ;       [CURBUF+2]:BX points to directory entry
 27010                                  ;       [CURBUF+2]:SI points to above dir_first
 27011                                  ; Function:
 27012                                  ;       Free the cluster chain for the entry if present
 27013                                  ; Outputs:
 27014                                  ;       Carry set if error (currently user FAILed to I 24)
 27015                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 27016                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 27017                                  ;---------------------------------------------------------------------------
 27018                                  
 27019                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27020                                  FREEENT:
 27021 00004C4F 1E                              PUSH    DS
 27022 00004C50 C53E[E205]                      LDS     DI,[CURBUF]
 27023 00004C54 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 27024                                  	; 19/05/2019 - Retro DOS v4.0
 27025                                  	; MSDOS 6.0
 27026 00004C56 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 27027                                  ;hkn; SS override
 27028 00004C59 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 27029 00004C5E 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 27030 00004C61 1F                              POP     DS
 27031 00004C62 83F902                  	CMP	CX,2
 27032 00004C65 722E                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 27033                                  	;cmp	cx,[es:bp+0Dh]
 27034 00004C67 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 27035 00004C6B 7728                            JA	short RET1	; Treat like zero length file (firclus mucked)
 27036 00004C6D 29FB                            SUB     BX,DI
 27037 00004C6F 53                              PUSH    BX              ; Save offset
 27038 00004C70 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27039 00004C74 52                              PUSH    DX              ; Save sector number
 27040 00004C75 89CB                            MOV     BX,CX
 27041 00004C77 E8AC02                          call	RELEASE         ; Free any data allocated
 27042 00004C7A 5A                              POP     DX
 27043 00004C7B 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 27044 00004C7F 7302                            JNC	short GET_BUF_BACK
 27045 00004C81 5B                              POP     BX
 27046                                  freeent_retn:
 27047 00004C82 C3                              retn			; Screw up
 27048                                  
 27049                                  GET_BUF_BACK:
 27050                                  	; 22/09/2023
 27051                                  	;;mov	byte [ALLOWED],18h
 27052                                          ;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 27053                                          ;XOR	AL,AL ; *
 27054                                  	;call	GETBUFFR        ; Get sector back
 27055 00004C83 E8300D                  	call	GETBUFFER ; * ; pre read  
 27056                                  
 27057 00004C86 5B                              POP     BX              ; Get offset back
 27058 00004C87 72F9                            jc	short freeent_retn
 27059 00004C89 E8AFEA                  	call	SET_BUF_AS_DIR
 27060 00004C8C 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 27061 00004C90 89DE                            MOV     SI,BX
 27062                                  	;add	si,1Ah
 27063 00004C92 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 27064                                  RET1:
 27065 00004C95 F8                              CLC
 27066 00004C96 C3                              retn
 27067                                  
 27068                                  ;---------------------------------------------------------------------------
 27069                                  ;
 27070                                  ; Procedure Name : CHECK_VIRT_OPEN
 27071                                  ;
 27072                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 27073                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 27074                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 27075                                  ; flag [VIRTUAL_OPEN].
 27076                                  ; No registers affected (including flags).
 27077                                  ; On input, [THISSFT] points to current SFT.
 27078                                  ;
 27079                                  ;---------------------------------------------------------------------------
 27080                                  
 27081                                  CHECK_VIRT_OPEN:
 27082 00004C97 50                      	PUSH    AX
 27083 00004C98 9F                              lahf                    ; preserve flags
 27084 00004C99 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 27085 00004C9E 7410                            JZ	short ALL_CLOSED
 27086 00004CA0 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 27087 00004CA5 06                      	push	es
 27088 00004CA6 57                      	push	di
 27089 00004CA7 C43E[9E05]                      LES     DI,[THISSFT]
 27090 00004CAB E8ADF9                          call	DEV_CLOSE_SFT
 27091 00004CAE 5F                      	pop	di
 27092 00004CAF 07                      	pop	es
 27093                                  
 27094                                  ALL_CLOSED:
 27095 00004CB0 9E                              sahf                    ; restore flags
 27096 00004CB1 58                              POP     AX
 27097 00004CB2 C3                              retn
 27098                                  
 27099                                  ;============================================================================
 27100                                  ; ROM.ASM, MSDOS 6.0, 1991
 27101                                  ;============================================================================
 27102                                  ; 29/07/2018 - Retro DOS v3.0
 27103                                  ; 20/05/2019 - Retro DOS v4.0
 27104                                  
 27105                                  ;	TITLE	ROM - Miscellaneous routines
 27106                                  ;	NAME	ROM
 27107                                  
 27108                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 27109                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 27110                                  ;
 27111                                  ;	SKPCLP
 27112                                  ;	FNDCLUS
 27113                                  ;	BUFSEC
 27114                                  ;	BUFRD
 27115                                  ;	BUFWRT
 27116                                  ;	NEXTSEC
 27117                                  ;	OPTIMIZE
 27118                                  ;	FIGREC
 27119                                  ;	ALLOCATE
 27120                                  ;	RESTFATBYT
 27121                                  ;	RELEASE
 27122                                  ;	RELBLKS
 27123                                  ;	GETEOF
 27124                                  ;
 27125                                  ;	Modification history:
 27126                                  ;
 27127                                  ;		Created: ARR 30 March 1983
 27128                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27129                                  
 27130                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27131                                  ;--------------------------------------------------------------------------
 27132                                  ;
 27133                                  ; Procedure Name : FNDCLUS
 27134                                  ;
 27135                                  ; Inputs:
 27136                                  ;       CX = No. of clusters to skip
 27137                                  ;       ES:BP = Base of drive parameters
 27138                                  ;       [THISSFT] point to SFT
 27139                                  ; Outputs:
 27140                                  ;       BX = Last cluster skipped to
 27141                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27142                                  ;       DX = Position of last cluster
 27143                                  ;       Carry set if error (currently user FAILed to I 24)
 27144                                  ; DI destroyed. No other registers affected.
 27145                                  ;--------------------------------------------------------------------------
 27146                                  
 27147                                  ; 20/05/2019 - Retro DOS v4.0
 27148                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27149                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27150                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27151                                  
 27152                                  FNDCLUS:
 27153 00004CB3 06                      	PUSH	ES
 27154 00004CB4 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27155                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27156                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27157 00004CB8 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27158                                  	;mov	dx,[es:di+19h]
 27159 00004CBC 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27160 00004CC0 09DB                    	OR	BX,BX
 27161 00004CC2 7424                    	JZ	short NOCLUS
 27162                                  
 27163 00004CC4 29D1                            SUB     CX,DX
 27164 00004CC6 7308                            JNB	short FINDIT
 27165                                  
 27166 00004CC8 01D1                            ADD     CX,DX
 27167 00004CCA 31D2                            XOR     DX,DX
 27168                                  	;mov	bx,[es:di+0Bh]
 27169 00004CCC 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27170                                  FINDIT:
 27171 00004CD0 07                              POP	ES
 27172 00004CD1 E313                    	JCXZ	RET9
 27173                                  
 27174                                  	;entry	SKPCLP
 27175                                  SKPCLP:
 27176 00004CD3 E8CE08                  	call	UNPACK
 27177 00004CD6 7214                            jc	short fndclus_retn	; retc
 27178                                  
 27179                                  	; 09/09/2018
 27180                                  
 27181                                  	; MSDOS 3.3
 27182                                  	;push	bx
 27183                                  	;mov	bx,di
 27184                                  	;call	IsEOF
 27185                                  	;pop	bx	
 27186                                  	;jae	short RET9
 27187                                  
 27188                                  	; 20/05/2019 - Retro DOS v4.0
 27189                                  
 27190                                  	; MSDOS 6.0
 27191 00004CD8 87DF                    	xchg	bx,di
 27192 00004CDA E8B008                  	call	IsEOF
 27193 00004CDD 87DF                    	xchg	bx,di
 27194 00004CDF 7305                    	jae	short RET9
 27195                                  
 27196 00004CE1 87DF                            XCHG    BX,DI
 27197 00004CE3 42                              INC     DX
 27198                                  
 27199 00004CE4 E2ED                    	LOOP	SKPCLP			; RMFS
 27200                                  RET9:	
 27201 00004CE6 F8                      	CLC
 27202 00004CE7 C3                              retn
 27203                                  NOCLUS:
 27204 00004CE8 07                              POP	ES
 27205 00004CE9 41                              INC	CX
 27206 00004CEA 4A                              DEC	DX
 27207 00004CEB F8                              CLC
 27208                                  
 27209                                  fndclus_retn:
 27210 00004CEC C3                              retn
 27211                                  
 27212                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27213                                  ;--------------------------------------------------------------------------
 27214                                  ;
 27215                                  ; Procedure Name : BUFSEC
 27216                                  ;
 27217                                  ; Inputs:
 27218                                  ;       AH = priority of buffer
 27219                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27220                                  ;       ES:BP = Base of drive parameters
 27221                                  ;       [CLUSNUM] = Physical cluster number
 27222                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27223                                  ;       [BYTCNT1] = Size of transfer
 27224                                  ; Function:
 27225                                  ;       Insure specified sector is in buffer, flushing buffer before
 27226                                  ;       read if necessary.
 27227                                  ; Outputs:
 27228                                  ;       ES:DI = Pointer to buffer
 27229                                  ;       SI = Pointer to transfer address
 27230                                  ;       CX = Number of bytes
 27231                                  ;       [NEXTADD] updated
 27232                                  ;       [TRANS] set to indicate a transfer will occur
 27233                                  ;       Carry set if error (user FAILed to I 24)
 27234                                  ;--------------------------------------------------------------------------
 27235                                  
 27236                                  BUFSEC:
 27237 00004CED 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27238 00004CF1 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27239                                  	;mov	byte [ALLOWED],38h
 27240 00004CF5 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27241 00004CFA E85001                          CALL    FIGREC
 27242 00004CFD E8BD0C                  	call	GETBUFFR
 27243 00004D00 72EA                            jc	short fndclus_retn
 27244                                  
 27245 00004D02 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27246 00004D07 8B36[B805]                      MOV     SI,[NEXTADD]
 27247 00004D0B 89F7                            MOV     DI,SI
 27248 00004D0D 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27249 00004D11 01CF                            ADD     DI,CX
 27250 00004D13 893E[B805]                      MOV     [NEXTADD],DI
 27251 00004D17 C43E[E205]                      LES     DI,[CURBUF]
 27252                                  	;or	byte [es:di+5],8
 27253 00004D1B 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27254                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27255                                  	;lea	di,[di+20] ; MSDOS 6.0
 27256 00004D20 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27257 00004D23 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27258 00004D27 F8                              CLC
 27259 00004D28 C3                              retn
 27260                                  
 27261                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27262                                  
 27263                                  ;---------------------------------------------------------------------------
 27264                                  ;
 27265                                  ; Procedure Name : BUFRD
 27266                                  ;
 27267                                  ; Do a partial sector read via one of the system buffers
 27268                                  ; ES:BP Points to DPB
 27269                                  ; Carry set if error (currently user FAILed to I 24)
 27270                                  ;
 27271                                  ; DS - set to DOSDATA
 27272                                  ;
 27273                                  ;----------------------------------------------------------------------------
 27274                                  
 27275                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27276                                  	; 20/05/2019 - Retro DOS v4.0
 27277                                  BUFRD:
 27278 00004D29 06                              PUSH	ES
 27279 00004D2A 31C0                            xor	ax, ax			; pre-read sector
 27280 00004D2C E8BEFF                          CALL    BUFSEC
 27281 00004D2F 7303                            JNC	short BUF_OK
 27282                                  
 27283                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27284 00004D31 07                              POP	ES
 27285 00004D32 EB2B                            JMP     SHORT RBUFPLACED
 27286                                  
 27287                                  BUF_OK:
 27288 00004D34 8CC3                            MOV     BX,ES
 27289 00004D36 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27290 00004D3A 8EDB                            MOV     DS,BX
 27291 00004D3C 87FE                    	XCHG    DI,SI
 27292 00004D3E D1E9                            SHR     CX,1
 27293                                  ;M039
 27294                                  	; MSDOS 3.3
 27295                                  	;JNC	short EVENRD
 27296                                  	;MOVSB
 27297                                  ;EVENRD:
 27298                                  	;REP     MOVSW
 27299                                  
 27300                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27301                                  ;       DS:SI-> Source within Buffer.
 27302                                  ;       ES:DI-> Destination within Transfer memory block.
 27303                                  
 27304                                  	; MSDOS 6.0
 27305 00004D40 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27306                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27307                                  	;rep	movsb                   ;Copy last byte.
 27308                                  	; 16/12/2022
 27309 00004D42 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27310 00004D44 A4                      	movsb ; ****
 27311                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27312                                  	;adc	cx,0
 27313                                  	;rep	movsb
 27314                                  ;M039
 27315                                  EVENRD: ; ****
 27316 00004D45 07                              POP	ES
 27317                                  ;hkn; SS override
 27318 00004D46 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27319                                  	;;lea	bx,[di+16]
 27320                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27321 00004D4B 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27322 00004D4E 29DE                            SUB     SI,BX                   ; Position in buffer
 27323 00004D50 E80A0C                          call	PLACEBUF
 27324                                  	;cmp	si,[es:bp+2]
 27325 00004D53 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27326 00004D57 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27327                                  ;M039
 27328                                  	; MSDOS 3.3
 27329                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27330                                                                          ;  even though it is MRU.
 27331                                          ; MSDOS 6.0
 27332 00004D59 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27333                                  ;M039					; chucking even though it is MRU.
 27334                                  
 27335                                  RBUFPLACEDC:
 27336 00004D5E F8                              CLC
 27337                                  RBUFPLACED:
 27338 00004D5F 16                      	push	ss
 27339 00004D60 1F                      	pop	ds
 27340 00004D61 C3                              retn
 27341                                  
 27342                                  ;----------------------------------------------------------------------------
 27343                                  ;
 27344                                  ; Procedure : BUFWRT
 27345                                  ;
 27346                                  ; Do a partial sector write via one of the system buffers
 27347                                  ; ES:BP Points to DPB
 27348                                  ; Carry set if error (currently user FAILed to I 24)
 27349                                  ;
 27350                                  ; DS - set to DOSDATA
 27351                                  ;
 27352                                  ;----------------------------------------------------------------------------
 27353                                  
 27354                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27355                                  	; 20/05/2019 - Retro DOS v4.0
 27356                                  BUFWRT:
 27357                                          ;MOV     AX,[SECPOS]
 27358                                          ; MSDOS 6.0
 27359                                  	;ADD	AX,1            	; Set for next sector
 27360                                          ;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27361                                          ;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27362                                          ; 24/09/2023
 27363 00004D62 FF06[C405]              	inc	word [SECPOS]
 27364 00004D66 7504                    	jnz	short bufw_secpos
 27365 00004D68 FF06[C605]              	inc	word [SECPOS+2]
 27366                                  bufw_secpos:
 27367 00004D6C A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27368 00004D6F 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27369 00004D73 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27370 00004D75 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27371 00004D77 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27372 00004D79 A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27373                                  
 27374                                  	; MSDOS 3.3
 27375                                  	;INC	AX
 27376                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27377                                  
 27378                                  	; 20/05/2019
 27379                                  	; MSDOS 3.3 & MSDOS 6.0
 27380 00004D7C 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27381 00004D80 B001                            MOV     AL,1
 27382 00004D82 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27383                                  _doread:
 27384 00004D84 30C0                            XOR     AL,AL
 27385                                  NOREAD:
 27386 00004D86 06                              PUSH	ES
 27387 00004D87 E863FF                          CALL    BUFSEC
 27388 00004D8A 72A5                    	JC	short BUF_IO_FAIL
 27389 00004D8C 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27390 00004D90 D1E9                            SHR     CX,1
 27391                                  ;M039
 27392                                  	; MSDOS 3.3
 27393                                  	;JNC	short EVENWRT ; 09/09/2018
 27394                                  	;MOVSB
 27395                                  ;EVENWRT:
 27396                                  	;REP	MOVSW
 27397                                  
 27398                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27399                                  ;       DS:SI-> Source within Transfer memory block.
 27400                                  ;       ES:DI-> Destination within Buffer.
 27401                                  
 27402                                  	; MSDOS 6.0
 27403 00004D92 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27404                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27405                                  	;rep	movsb                   ;Copy last byte.
 27406                                  	; 16/12/2022
 27407 00004D94 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27408 00004D96 A4                      	movsb ; ****
 27409                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27410                                  	;adc	cx,0
 27411                                  	;rep	movsb
 27412                                  ;M039
 27413                                  EVENWRT: ; ****
 27414 00004D97 07                              POP	ES
 27415                                  
 27416                                  ;hkn; SS override
 27417 00004D98 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27418                                  
 27419                                  	; MSDOS 6.0
 27420 00004D9D F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27421                                  					;LB. if already dirty		  ;AN000;
 27422 00004DA1 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27423 00004DA3 E8190E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27424                                  	
 27425                                  	;or	byte [bx+5],40h
 27426 00004DA6 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27427                                  yesdirty10:
 27428                                  	;;lea	si,[bx+16]
 27429                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27430 00004DAA 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27431 00004DAD 29F7                            SUB     DI,SI                   ; Position in buffer
 27432                                  ;M039
 27433                                  	; MSDOS 3.3
 27434                                  	;MOV	SI,DI
 27435                                  	;MOV	DI,BX
 27436                                  	;call	PLACEBUF
 27437                                  	;;cmp	si,[es:bp+2]
 27438                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27439                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27440                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27441                                                                          ;  even though it is MRU.
 27442                                  	; MSDOS 6.0
 27443                                  	;cmp	di,[es:bp+2]
 27444 00004DAF 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27445 00004DB3 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27446 00004DB5 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27447                                  					; chucking even though it is MRU.
 27448                                  ;M039
 27449                                  
 27450                                  WBUFPLACED:
 27451 00004DBA F8                              CLC
 27452 00004DBB 16                      	push	ss
 27453 00004DBC 1F                      	pop	ds
 27454 00004DBD C3                              retn
 27455                                  
 27456                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27457                                  ;---------------------------------------------------------------------------
 27458                                  ;
 27459                                  ; Procedure Name : NEXTSEC
 27460                                  ;
 27461                                  ; Compute the next sector to read or write
 27462                                  ; ES:BP Points to DPB
 27463                                  ;
 27464                                  ;---------------------------------------------------------------------------
 27465                                  
 27466                                  NEXTSEC:
 27467 00004DBE F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27468 00004DC3 7426                            JZ	short CLRET
 27469                                  
 27470 00004DC5 A0[7305]                        MOV     AL,[SECCLUSPOS]
 27471 00004DC8 FEC0                            INC     AL
 27472                                  	;cmp	al,[es:bp+4]
 27473 00004DCA 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27474 00004DCE 7618                            JBE	short SAVPOS
 27475                                  
 27476 00004DD0 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27477 00004DD4 E8B607                          call	IsEOF
 27478 00004DD7 7314                            JAE	short NONEXT
 27479                                  
 27480 00004DD9 E8C807                          call	UNPACK
 27481 00004DDC 720F                            JC	short NONEXT
 27482                                  clusgot:
 27483 00004DDE 893E[BC05]                      MOV     [CLUSNUM],DI
 27484 00004DE2 FF06[BA05]                      INC     word [LASTPOS]
 27485 00004DE6 B000                            MOV     AL,0
 27486                                  SAVPOS:
 27487 00004DE8 A2[7305]                        MOV     [SECCLUSPOS],AL
 27488                                  CLRET:
 27489 00004DEB F8                              CLC
 27490 00004DEC C3                              retn
 27491                                  NONEXT:
 27492 00004DED F9                              STC
 27493 00004DEE C3                              retn
 27494                                  
 27495                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27496                                  ;----------------------------------------------------------------------------
 27497                                  ;
 27498                                  ; Procedure Name : OPTIMIZE
 27499                                  ;
 27500                                  ; Inputs:
 27501                                  ;       BX = Physical cluster
 27502                                  ;       CX = No. of records
 27503                                  ;       DL = sector within cluster
 27504                                  ;       ES:BP = Base of drive parameters
 27505                                  ;       [NEXTADD] = transfer address
 27506                                  ; Outputs:
 27507                                  ;       AX = No. of records remaining
 27508                                  ;       BX = Transfer address
 27509                                  ;       CX = No. or records to be transferred
 27510                                  ;       DX = Physical sector address            (LOW)
 27511                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27512                                  ;       DI = Next cluster
 27513                                  ;       [CLUSNUM] = Last cluster accessed
 27514                                  ;       [NEXTADD] updated
 27515                                  ;       Carry set if error (currently user FAILed to I 24)
 27516                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27517                                  ;
 27518                                  ;---------------------------------------------------------------------------
 27519                                  
 27520                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27521                                  OPTIMIZE:
 27522 00004DEF 52                      	PUSH    DX
 27523 00004DF0 53                              PUSH    BX
 27524                                  	;mov	al,[es:bp+4]
 27525 00004DF1 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27526 00004DF5 FEC0                            INC     AL              ; Number of sectors per cluster
 27527 00004DF7 88C4                            MOV     AH,AL
 27528 00004DF9 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27529 00004DFB 89CA                            MOV     DX,CX
 27530                                  	;MOV	CX,0
 27531                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27532                                  	; 16/12/2022
 27533 00004DFD 31C9                    	xor	cx,cx	; sub cx,cx
 27534                                  OPTCLUS:
 27535                                  ; AL has number of sectors available in current cluster
 27536                                  ; AH has number of sectors available in next cluster
 27537                                  ; BX has current physical cluster
 27538                                  ; CX has number of sequential sectors found so far
 27539                                  ; DX has number of sectors left to transfer
 27540                                  ; ES:BP Points to DPB
 27541                                  ; ES:SI has FAT pointer
 27542                                  
 27543                                  do_norm3:
 27544 00004DFF E8A207                          call	UNPACK
 27545 00004E02 7236                            JC	short OP_ERR
 27546                                  clusgot2:
 27547 00004E04 00C1                    	ADD	CL,AL
 27548 00004E06 80D500                          ADC     CH,0
 27549 00004E09 39D1                            CMP     CX,DX
 27550 00004E0B 7332                            JAE	short BLKDON
 27551 00004E0D 88E0                            MOV     AL,AH
 27552 00004E0F 43                              INC     BX
 27553 00004E10 39DF                            CMP     DI,BX
 27554 00004E12 74EB                            JZ	short OPTCLUS
 27555 00004E14 4B                              DEC     BX
 27556                                  FINCLUS:
 27557 00004E15 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27558 00004E19 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27559 00004E1B 52                              PUSH    DX
 27560 00004E1C 89C8                            MOV     AX,CX
 27561                                  	;mul	word[ES:BP+2]
 27562 00004E1E 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27563                                  				; Number of sectors times sector size
 27564 00004E22 8B36[B805]                      MOV     SI,[NEXTADD]
 27565 00004E26 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27566 00004E28 A3[B805]                        MOV     [NEXTADD],AX
 27567 00004E2B 58                              POP     AX              ; Number of sectors still needed
 27568 00004E2C 5A                              POP     DX              ; Starting cluster
 27569 00004E2D 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27570 00004E2F 011E[BA05]                      ADD     [LASTPOS],BX
 27571 00004E33 5B                              POP     BX              ; BL = sector position within cluster
 27572 00004E34 E81600                  	call	FIGREC
 27573 00004E37 89F3                            MOV     BX,SI
 27574                                  	; 24/09/2023
 27575                                  	; cf=0 (at the return of FIGREC)
 27576                                  	;CLC
 27577 00004E39 C3                              retn
 27578                                  OP_ERR:
 27579 00004E3A 83C404                          ADD     SP,4
 27580 00004E3D F9                      	STC
 27581 00004E3E C3                              retn
 27582                                  BLKDON:
 27583 00004E3F 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27584 00004E41 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27585 00004E43 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27586 00004E45 8826[7305]                      MOV     [SECCLUSPOS],AH
 27587 00004E49 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27588 00004E4B EBC8                            JMP     SHORT FINCLUS
 27589                                  
 27590                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27591                                  ;---------------------------------------------------------------------------
 27592                                  ;
 27593                                  ; Procedure Name : FIGREC
 27594                                  ;
 27595                                  ; Inputs:
 27596                                  ;       DX = Physical cluster number
 27597                                  ;       BL = Sector position within cluster
 27598                                  ;       ES:BP = Base of drive parameters
 27599                                  ; Outputs:
 27600                                  ;       DX = physical sector number           (LOW)
 27601                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27602                                  ; No other registers affected.
 27603                                  ;
 27604                                  ;---------------------------------------------------------------------------
 27605                                  
 27606                                  	; 10/06/2019
 27607                                  	; 20/05/2019 - Retro DOS v4.0
 27608                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27609                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27610                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27611                                  FIGREC:
 27612 00004E4D 51                              PUSH    CX
 27613                                  	;mov	cl,[es:bp+5]
 27614 00004E4E 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27615 00004E52 4A                              DEC     DX
 27616 00004E53 4A                              DEC     DX
 27617                                  
 27618                                  	; MSDOS 3.3
 27619                                  	;SHL	DX,CL
 27620                                  
 27621                                  ;hkn; SS override HIGH_SECTOR
 27622                                  	; MSDOS 6.0
 27623 00004E54 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27624                                  	; 24/09/2023
 27625 00004E5B 30ED                    	xor	ch,ch				;F.C. >32mb
 27626 00004E5D 08C9                    	OR	CL,CL				;F.C. >32mb
 27627 00004E5F 740C                    	JZ	short noshift			;F.C. >32mb
 27628 00004E61 30ED                    	XOR	CH,CH				;F.C. >32mb
 27629                                  rotleft:					;F.C. >32mb
 27630 00004E63 F8                      	CLC					;F.C. >32mb
 27631 00004E64 D1D2                    	RCL	DX,1				;F.C. >32mb
 27632                                  	; 10/06/2019
 27633 00004E66 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27634 00004E6B E2F6                    	LOOP	rotleft				;F.C. >32mb
 27635                                  noshift:
 27636                                  	; MSDOS 3.3 & MSDOS 6.0
 27637 00004E6D 08DA                            OR      DL,BL
 27638                                  	;add	dx,[es:bp+0Bh]
 27639 00004E6F 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27640                                  	; MSDOS 6.0
 27641                                  	; 10/06/2019
 27642                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27643                                  	; 24/09/2023
 27644                                  	; cx=0
 27645 00004E73 36110E[0706]            	ADC	word [ss:HIGH_SECTOR],cx ; 0
 27646                                  
 27647                                  	; MSDOS 3.3 & MSDOS 6.0
 27648 00004E78 59                      	POP     CX
 27649                                  figrec_retn:
 27650 00004E79 C3                              retn
 27651                                  
 27652                                  ; 20/05/2019 - Retro DOS v4.0
 27653                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27654                                  
 27655                                  ; 30/07/2018 - Retro DOS v3.0
 27656                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27657                                  
 27658                                  ;Break   <ALLOCATE -- Assign disk space>
 27659                                  ;---------------------------------------------------------------------------
 27660                                  ;
 27661                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27662                                  ;
 27663                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27664                                  ;   FAT-chained onto the end of the existing file.
 27665                                  ;
 27666                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27667                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27668                                  ;   numbered clusters, looking for the necessary free blocks.
 27669                                  ;
 27670                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27671                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27672                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27673                                  ;
 27674                                  ;       If we get to the end of the disk without satisfaction:
 27675                                  ;
 27676                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27677                                  ;               return (insufficient_disk_space)
 27678                                  ;           ELSE
 27679                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27680                                  ;
 27681                                  ;   Note that there is no multitasking interlock. There is no race when
 27682                                  ;   examining the entrys in an in-core FAT block since there will be no
 27683                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27684                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27685                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27686                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27687                                  ;   satisfied. We can't allow another activation to think this cluster is
 27688                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27689                                  ;   allocated.
 27690                                  ;
 27691                                  ;   Note that when we run out of space this algorithem will scan from
 27692                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27693                                  ;   redundantly scanning the later part of the disk. This only happens when
 27694                                  ;   we run out of space, so sue me.
 27695                                  ;
 27696                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27697                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27698                                  ;                                                                          ;
 27699                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27700                                  ;   explanation:
 27701                                  ;
 27702                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27703                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27704                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27705                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27706                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27707                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27708                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27709                                  ;   the
 27710                                  ;           LOOP   findfre         ; alloc more if needed
 27711                                  ;   instruction when the first cluster is allocated to the nul file. The
 27712                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27713                                  ;
 27714                                  ;   This method is obviously useless (because it is non-reentrant) for
 27715                                  ;   multitasking, and will have to be changed. Storing the required value on
 27716                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27717                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27718                                  ;   problems with INT 24 well.
 27719                                  ;
 27720                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27721                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27722                                  ;                                                                          ;
 27723                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27724                                  ;               CX = No. of clusters to allocate
 27725                                  ;               ES:BP = Base of drive parameters
 27726                                  ;               [THISSFT] = Points to SFT
 27727                                  ;
 27728                                  ;       EXIT    'C' set if insufficient space
 27729                                  ;                 [FAILERR] can be tested to see the reason for failure
 27730                                  ;                 CX = max. no. of clusters that could be added to file
 27731                                  ;               'C' clear if space allocated
 27732                                  ;                 BX = First cluster allocated
 27733                                  ;                 FAT is fully updated
 27734                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27735                                  ;
 27736                                  ;       USES    ALL but SI, BP
 27737                                  
 27738                                  ;callmagic  proc near
 27739                                  ;       push    ds                             ;push segment of routine 
 27740                                  ;       push    Offset MagicPatch              ;push offset for routine
 27741                                  ;       retf                                   ;simulate jmp far
 27742                                  ;                                              ;far return address is on
 27743                                  ;                                              ;stack, so far return from
 27744                                  ;                                              ;call will return this routine
 27745                                  ;callmagic  endp
 27746                                  
 27747                                  ALLOCATE:
 27748                                  	; 10/09/2018
 27749                                  ;BEGIN MAGICDRV MODIFICATIONS
 27750                                  ;
 27751                                  ;7/5/92 scottq
 27752                                  ;
 27753                                  ;This is the disk compression patch location which allows
 27754                                  ;the disk compression software to fail allocations if the
 27755                                  ;FAT would allows allocation, but the free space for compressed
 27756                                  ;data would not.
 27757                                  ;        
 27758                                  ;;;	call    far ptr MAGICPATCH
 27759                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27760                                  ;;; but we do know the segment and offset of the routine
 27761                                  ;;; so simulate a far call to dosdata:magicpatch
 27762                                  ;;; note dosassume above, so DS -> dosdata
 27763                                  
 27764                                  	; MSDOS 6.0
 27765                                          ;clc				;clear carry so we fall through
 27766                                  	;				;if no patch is present
 27767                                  	;push	cs			;push segment for far return
 27768                                          ;call	callmagic		;this is a near call
 27769                                          ;jnc	short Regular_Allocate_Path
 27770                                  	;jmp	Disk_Full_Return
 27771                                  
 27772                                  ;Regular_Allocate_Path:
 27773                                  	; 20/05/2019 - Retro DOS v4.0
 27774                                  ;END MAGICDRV MODIFICATIONS
 27775                                  
 27776                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27777                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27778                                  
 27779 00004E7A 53                              PUSH    BX                      ; save (bx)
 27780 00004E7B 31DB                            XOR     BX,BX
 27781 00004E7D E82407                  	call	UNPACK
 27782 00004E80 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27783 00004E84 5B                              POP     BX
 27784 00004E85 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27785                                  
 27786 00004E87 51                              PUSH    CX
 27787 00004E88 53                              PUSH    BX
 27788                                  
 27789 00004E89 89DA                            MOV     DX,BX
 27790                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27791                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27792 00004E8B 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27793 00004E8F 83FB02                          cmp     bx,2
 27794 00004E92 7709                            ja	short FINDFRE
 27795                                  
 27796                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27797                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27798                                  
 27799                                  ads1:
 27800                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27801                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27802 00004E94 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27803 00004E9A BB0100                          mov     bx,1                    ; Counter next instruction so first
 27804                                                                          ;       cluster examined is 2
 27805                                  
 27806                                  ;   Scanning both forwards and backwards for a free cluster
 27807                                  ;
 27808                                  ;       (BX) = forwards scan pointer
 27809                                  ;       (CX) = clusters remaining to be allocated
 27810                                  ;       (DX) = current last cluster in file
 27811                                  ;       (TOS) = last cluster of file
 27812                                  
 27813                                  FINDFRE:
 27814 00004E9D 43                              INC     BX
 27815                                  	;cmp	bx,[es:bp+0Dh]
 27816 00004E9E 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27817 00004EA2 7757                    	ja	short ads7	; at end of disk
 27818 00004EA4 E8FD06                          call	UNPACK          ; check out this cluster
 27819 00004EA7 722F                            jc	short ads4	; FAT error             [INTERR?]
 27820 00004EA9 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27821                                  
 27822                                  ;   Have found a free cluster. Chain it to the file
 27823                                  ;
 27824                                  ;       (BX) = found free cluster #
 27825                                  ;       (DX) = current last cluster in file
 27826                                  
 27827                                  	;;mov	[es:bp+1Ch],bx
 27828                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27829 00004EAB 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27830 00004EAF 92                              xchg    ax,dx           ; save (dx) in ax
 27831 00004EB0 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27832 00004EB3 E84207                  	call	PACK            ; set special "temporary" mark
 27833 00004EB6 7220                            jc	short ads4	; FAT error             [INTERR?]
 27834                                  	;;cmp	word [es:bp+1Eh],-1
 27835                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27836 00004EB8 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27837 00004EBD 7404                            JZ	short NO_ALLOC	; No
 27838                                  	;;dec	word [es:bp+1Eh]
 27839                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27840 00004EBF 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27841                                  NO_ALLOC:
 27842 00004EC3 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27843 00004EC4 87DA                            XCHG    BX,DX
 27844 00004EC6 89D0                            MOV     AX,DX
 27845 00004EC8 E82D07                  	call	PACK            ; link free cluster onto file
 27846                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27847                                                                  ;    cluster 0 with FIRCLUS value.
 27848 00004ECB 720B                            jc	short ads4	; FAT error [INTERR?]
 27849 00004ECD 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27850 00004ECE 89DA                            mov     dx,bx           ; (dx) = current end of file
 27851 00004ED0 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27852                                  
 27853                                  ;   We've successfully extended the file. Clean up and exit
 27854                                  ;
 27855                                  ;       (BX) = last cluster in file
 27856                                  
 27857 00004ED2 BAFFFF                          MOV     DX,0FFFFH
 27858 00004ED5 E82007                  	call	PACK            ; mark last cluster EOF
 27859                                  
 27860                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27861                                  ;   2 whole bytes. Hope its worth it...
 27862                                  ;
 27863                                  ;       'C' set if error
 27864                                  ;       calling (BX) and (CX) pushed on stack
 27865                                  
 27866                                  ads4:   
 27867 00004ED8 5B                      	POP     BX
 27868 00004ED9 59                              POP     CX              ; Don't need this stuff since we're successful
 27869 00004EDA 729D                            jc	short figrec_retn
 27870 00004EDC E8C506                          call	UNPACK          ; Get first cluster allocated for return
 27871                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27872 00004EDF 7298                            jc	short figrec_retn
 27873 00004EE1 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27874 00004EE4 7293                            jc	short figrec_retn
 27875 00004EE6 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27876 00004EE8 09FF                            OR      DI,DI           ; clear 'C'
 27877 00004EEA 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27878                                  
 27879                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27880                                  ;   info
 27881                                  dofastk:
 27882                                  	; 20/05/2019
 27883                                  	; MSDOS 6.0
 27884                                  	;push	dx ; * MSDOS 6.0
 27885                                  	;;mov	dl,[es:bp+0]
 27886                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27887                                  	;mov	dl,[es:bp]
 27888                                  
 27889                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27890                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27891                                  	
 27892                                  	; 16/12/2022
 27893                                  	;push	dx ; *
 27894                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27895                                  	; 15/12/2022
 27896                                  	;mov	dl,[es:bp]
 27897                                  	
 27898                                  	; MSDOS 3.3 & MSDOS 6.0
 27899 00004EEC 06                      	PUSH	ES
 27900 00004EED C43E[9E05]              	LES     DI,[THISSFT]
 27901                                  	;mov	[es:di+0Bh],bx
 27902 00004EF1 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27903                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27904                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27905 00004EF5 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27906 00004EF9 07                      	POP	ES
 27907                                  	;retn
 27908                                  
 27909                                  	;pop	dx ; * MSDOS 6.0
 27910                                  
 27911                                  	; 16/12/2022
 27912                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27913                                  	;pop	dx ; *
 27914                                  
 27915 00004EFA C3                      	retn	
 27916                                  
 27917                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27918                                  ;   of the disk...
 27919                                  
 27920                                  ads7:   
 27921 00004EFB 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27922 00004F00 7592                    	jnz	short ads1	; start scan from front of disk
 27923                                  
 27924                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27925                                  ;   the space back to the free list and tell the caller how much he could have
 27926                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27927                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27928                                  ;
 27929                                  ;       (CX) = clusters remaining to be allocated
 27930                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27931                                  ;       (TOS+1) = # of clusters wanted to allocate
 27932                                  
 27933 00004F02 5B                              POP     BX              ; (BX) = last cluster of file
 27934 00004F03 BAFFFF                          MOV     DX,0FFFFH
 27935 00004F06 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27936 00004F09 58                              POP     AX              ; No. of clusters requested
 27937                                                                  ; Don't "retc". We are setting Carry anyway,
 27938                                                                  ;   Alloc failed, so proceed with return CX
 27939                                                                  ;   setup.
 27940 00004F0A 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27941 00004F0C E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27942                                                                  ;   Alloc failed.
 27943                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27944                                          ; MSDOS 6.0
 27945 00004F0F C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27946 00004F14 F9                              STC
 27947 00004F15 C3                              retn
 27948                                  
 27949                                  ;-----------------------------------------------------------------------
 27950                                  ;
 27951                                  ; Procedure Name : RESTFATBYT
 27952                                  ;
 27953                                  ; SEE ALLOCATE CAVEAT
 27954                                  ;       Carry set if error (currently user FAILed to I 24)
 27955                                  ;-----------------------------------------------------------------------
 27956                                  
 27957                                  RESTFATBYT:
 27958 00004F16 53                              PUSH    BX
 27959 00004F17 52                              PUSH    DX
 27960 00004F18 57                              PUSH    DI
 27961 00004F19 31DB                            XOR     BX,BX
 27962 00004F1B 8B16[9605]                      MOV     DX,[FATBYT]
 27963 00004F1F E8D606                  	call	PACK
 27964 00004F22 5F                              POP     DI
 27965 00004F23 5A                              POP     DX
 27966 00004F24 5B                              POP     BX
 27967                                  ; 16/12/2022
 27968                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27969                                  ;RELEASE_flush:
 27970 00004F25 C3                      	retn
 27971                                  
 27972                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27973                                  ;---------------------------------------------------------------------------
 27974                                  ;
 27975                                  ; Procedure Name : RELEASE
 27976                                  ;
 27977                                  ; Inputs:
 27978                                  ;       BX = Cluster in file
 27979                                  ;       ES:BP = Base of drive parameters
 27980                                  ; Function:
 27981                                  ;       Frees cluster chain starting with [BX]
 27982                                  ;       Carry set if error (currently user FAILed to I 24)
 27983                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27984                                  ;
 27985                                  ;-----------------------------------------------------------------------------
 27986                                  
 27987                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27988                                  	; 20/05/2019 - Retro DOS v4.0
 27989                                  RELEASE:
 27990 00004F26 31D2                            XOR     DX,DX
 27991                                  
 27992                                  	;entry	RELBLKS
 27993                                  RELBLKS:
 27994                                  
 27995                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27996                                  ;   and free the rest in the chain.
 27997                                  
 27998 00004F28 E87906                  	call	UNPACK
 27999 00004F2B 7224                    	jc	short RELEASE_flush
 28000 00004F2D 7422                    	jz	short RELEASE_flush
 28001 00004F2F 89F8                            MOV     AX,DI
 28002 00004F31 52                              PUSH    DX
 28003 00004F32 E8C306                  	call	PACK
 28004 00004F35 5A                              POP     DX
 28005 00004F36 7219                    	jc	short RELEASE_flush
 28006 00004F38 09D2                            OR      DX,DX
 28007 00004F3A 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 28008                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 28009                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28010 00004F3C 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28011 00004F41 7404                            JZ	short NO_DEALLOC	; No
 28012 00004F43 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 28013                                  NO_DEALLOC:
 28014 00004F47 89C3                            MOV     BX,AX
 28015 00004F49 48                              dec     ax              ; check for "1"
 28016 00004F4A 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 28017 00004F4C E83E06                  	call	IsEOF
 28018 00004F4F 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 28019                                  
 28020                                  	; 16/12/2022
 28021                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28022                                  ;%if 0
 28023                                  RELEASE_flush:
 28024                                  	; MSDOS 6.0
 28025 00004F51 268A4600                	mov	al,[es:bp]
 28026                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 28027 00004F55 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 28028 00004F56 51                      	push	cx		;  them to be preserved.
 28029 00004F57 06                      	push	es
 28030 00004F58 55                      	push	bp
 28031 00004F59 E85E0B                  	call	FLUSHBUF	; commit buffers for this drive
 28032 00004F5C 5D                      	pop	bp
 28033 00004F5D 07                      	pop	es
 28034 00004F5E 59                      	pop	cx
 28035 00004F5F 5E                      	pop	si
 28036                                  ;%endif
 28037                                  RET12:
 28038 00004F60 C3                      	retn
 28039                                  
 28040                                  ;Break	<GETEOF -- Find the end of a file>
 28041                                  ;------------------------------------------------------------------------
 28042                                  ;
 28043                                  ; Procedure Name : GETEOF
 28044                                  ;
 28045                                  ; Inputs:
 28046                                  ;       ES:BP Points to DPB
 28047                                  ;       BX = Cluster in a file
 28048                                  ;       DS = CS
 28049                                  ; Outputs:
 28050                                  ;       BX = Last cluster in the file
 28051                                  ;       Carry set if error (currently user FAILed to I 24)
 28052                                  ; DI destroyed. No other registers affected.
 28053                                  ;
 28054                                  ;--------------------------------------------------------------------------
 28055                                  
 28056                                  GETEOF:
 28057 00004F61 E84006                  	call	UNPACK
 28058 00004F64 72FA                            jc	short RET12
 28059 00004F66 53                              PUSH    BX
 28060 00004F67 89FB                            MOV     BX,DI
 28061 00004F69 E82106                  	call	IsEOF
 28062 00004F6C 5B                              POP     BX
 28063 00004F6D 73F1                            JAE     short RET12
 28064 00004F6F 89FB                            MOV     BX,DI
 28065 00004F71 EBEE                            JMP     short GETEOF
 28066                                  
 28067                                  ;============================================================================
 28068                                  ; FCB.ASM, MSDOS 6.0, 1991
 28069                                  ;============================================================================
 28070                                  ; 30/07/2018 - Retro DOS v3.0
 28071                                  ; 20/05/2019 - Retro DOS v4.0
 28072                                  
 28073                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 28074                                  ;	NAME	FCB
 28075                                  
 28076                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 28077                                  ;		  filename characters
 28078                                  ;
 28079                                  ;	MakeFcb
 28080                                  ;	NameTrans
 28081                                  ;	PATHCHRCMP
 28082                                  ;	GetLet
 28083                                  ;	UCase
 28084                                  ;	GetLet3
 28085                                  ;	GetCharType
 28086                                  ;	TESTKANJ
 28087                                  ;	NORMSCAN
 28088                                  ;	DELIM
 28089                                  ;
 28090                                  ;	Revision history:
 28091                                  ;
 28092                                  ;		A000  version 4.00  Jan. 1988
 28093                                  ;	
 28094                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 28095                                  
 28096                                  TableLook	EQU	-1
 28097                                  
 28098                                  SCANSEPARATOR	EQU	1
 28099                                  DRVBIT		EQU	2
 28100                                  NAMBIT		EQU	4
 28101                                  EXTBIT		EQU	8
 28102                                  
 28103                                  ;----------------------------------------------------------------------------
 28104                                  ;
 28105                                  ; Procedure : MakeFcb
 28106                                  ;
 28107                                  ;----------------------------------------------------------------------------
 28108                                  
 28109                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28110                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 28111                                  MAKEFCB:
 28112                                  ;hkn; SS override
 28113 00004F73 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 28114 00004F79 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 28115                                  	;test	al,2
 28116 00004F7B A802                    	test	AL,DRVBIT	; Use current drive field if default?
 28117 00004F7D 7504                    	JNZ	short DEFDRV
 28118 00004F7F 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 28119                                  DEFDRV:
 28120 00004F83 47                      	INC	DI
 28121 00004F84 B90800                  	MOV	CX,8
 28122                                  	;test	al,4
 28123 00004F87 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28124 00004F89 93                      	XCHG	AX,BX		; Save bits in BX
 28125 00004F8A B020                    	MOV	AL," "
 28126 00004F8C 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28127 00004F8E 01CF                    	ADD	DI,CX
 28128 00004F90 31C9                    	XOR	CX,CX		; Don't fill any
 28129                                  FILLB:
 28130 00004F92 F3AA                    	REP	STOSB
 28131 00004F94 B103                    	MOV	CL,3
 28132 00004F96 F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28133 00004F99 7404                    	JZ	short FILLB2
 28134 00004F9B 01CF                    	ADD	DI,CX
 28135 00004F9D 31C9                    	XOR	CX,CX
 28136                                  FILLB2:
 28137 00004F9F F3AA                    	REP	STOSB
 28138 00004FA1 91                      	XCHG	AX,CX		; Put zero in AX
 28139 00004FA2 AB                      	STOSW
 28140 00004FA3 AB                      	STOSW			; Initialize two words after to zero
 28141 00004FA4 83EF10                  	SUB	DI,16		; Point back at start
 28142                                  	;test	bl,1
 28143 00004FA7 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28144 00004FAA 7409                    	JZ	short SKPSPC
 28145 00004FAC E88800                  	CALL	SCANB		; Peel off blanks and tabs
 28146 00004FAF E82201                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28147 00004FB2 7504                    	JNZ	short NOSCAN
 28148 00004FB4 46                      	INC	SI		; Skip over the delimiter
 28149                                  SKPSPC:
 28150 00004FB5 E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28151                                  NOSCAN:
 28152 00004FB8 E8F000                  	CALL	GETLET
 28153 00004FBB 761E                    	JBE	short NODRV	; Quit if termination character
 28154 00004FBD 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28155 00004FC0 7519                    	JNZ	short NODRV
 28156 00004FC2 46                      	INC	SI		; Skip over colon
 28157 00004FC3 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28158 00004FC5 760F                    	JBE	short BADDRV	; Drive letter out of range
 28159                                  
 28160 00004FC7 50                      	PUSH	AX
 28161 00004FC8 E81D1B                  	call	GetVisDrv
 28162 00004FCB 58                      	POP	AX
 28163 00004FCC 730A                    	JNC	short HAVDRV
 28164                                  
 28165                                  	; 20/05/2019 - Retro DOS v4.0
 28166                                  	; MSDOS 6.0
 28167                                  ;hkn; SS override
 28168 00004FCE 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28169                                  					; if not FAT drive ;AN000;
 28170 00004FD4 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28171                                  BADDRV:
 28172 00004FD6 B2FF                    	MOV	DL,-1
 28173                                  HAVDRV:
 28174 00004FD8 AA                      	STOSB			; Put drive specifier in first byte
 28175 00004FD9 46                      	INC	SI
 28176 00004FDA 4F                      	DEC	DI		; Counteract next two instructions
 28177                                  NODRV:
 28178 00004FDB 4E                      	DEC	SI		; Back up
 28179 00004FDC 47                      	INC	DI		; Skip drive byte
 28180                                  
 28181                                  	;entry	NORMSCAN
 28182                                  NORMSCAN:
 28183 00004FDD B90800                  	MOV	CX,8
 28184 00004FE0 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 28185 00004FE3 803C2E                  	CMP	BYTE [SI],"."
 28186 00004FE6 7510                    	JNZ	short NODOT
 28187 00004FE8 46                      	INC	SI		; Skip over dot if present
 28188                                  
 28189                                  	; 24/09/2023
 28190                                  	;mov	cx,3
 28191 00004FE9 B103                    	mov	cl,3	; ch=0
 28192                                  
 28193                                  	; MSDOS 6.0
 28194                                  ;hkn; SS override
 28195                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28196                                  	; 10/06/2019
 28197 00004FEB 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28198 00004FF1 7402                    	JZ	short VOLOK				;AN000;
 28199 00004FF3 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28200                                  	; 24/09/2023
 28201                                  	;MOV	CX,2					;AN000;
 28202 00004FF4 49                      	dec	cx  ; cx=2
 28203                                  	;JMP	SHORT contvol				;AN000;
 28204                                  VOLOK:
 28205                                  	;MOV	CX,3		; Get 3-letter extension
 28206                                  contvol:
 28207 00004FF5 E81300                  	CALL	MUSTGETWORD
 28208                                  NODOT:
 28209 00004FF8 88D0                    	MOV	AL,DL
 28210                                  
 28211                                  	; MSDOS 6.0
 28212                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28213                                  	; 18/12/2022
 28214 00004FFA 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28215                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28216                                  
 28217 00005000 C3                      	retn
 28218                                  
 28219                                  NONAM:
 28220 00005001 01CF                    	ADD	DI,CX
 28221 00005003 4E                      	DEC	SI
 28222 00005004 C3                      	retn
 28223                                  
 28224                                  GETWORD:
 28225 00005005 E8A300                  	CALL	GETLET		
 28226 00005008 76F7                    	JBE	short NONAM	; Exit if invalid character
 28227 0000500A 4E                      	DEC	SI
 28228                                  
 28229                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28230                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28231                                  
 28232                                  MUSTGETWORD:
 28233 0000500B E89D00                  	CALL	GETLET
 28234                                  
 28235                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28236                                  
 28237                                  ;IF NOT TABLELOOK
 28238                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28239                                  ;ENDIF
 28240 0000500E 750C                    	JNZ	short MustCheckCX
 28241                                  
 28242                                  ;hkn; SS override
 28243 00005010 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28244 00005016 7419                    	JZ	short FILLNAM
 28245 00005018 3C20                    	CMP	AL," "
 28246 0000501A 7515                    	JNZ	short FILLNAM
 28247                                  
 28248                                  MustCheckCX:
 28249 0000501C E3ED                    	JCXZ	MUSTGETWORD
 28250 0000501E 49                      	DEC	CX
 28251 0000501F 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28252 00005021 7504                    	JNZ	short NOSTAR
 28253 00005023 B03F                    	MOV	AL,"?"
 28254 00005025 F3AA                    	REP	STOSB
 28255                                  NOSTAR:
 28256 00005027 AA                      	STOSB
 28257 00005028 3C3F                    	CMP	AL,"?"
 28258 0000502A 75DF                    	JNZ	short MUSTGETWORD
 28259 0000502C 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28260 0000502F EBDA                    	JMP	short MUSTGETWORD
 28261                                  FILLNAM:
 28262 00005031 B020                    	MOV	AL," "
 28263 00005033 F3AA                    	REP	STOSB
 28264 00005035 4E                      	DEC	SI
 28265 00005036 C3                      	retn
 28266                                  
 28267                                  SCANB:
 28268 00005037 AC                      	LODSB
 28269 00005038 E8A100                  	CALL	SPCHK
 28270 0000503B 74FA                    	JZ	short SCANB
 28271 0000503D 4E                      	DEC	SI
 28272                                  scanb_retn:
 28273 0000503E C3                      	retn
 28274                                  
 28275                                  ;----------------------------------------------------------------------------
 28276                                  ;
 28277                                  ; Procedure Name : NameTrans
 28278                                  ;
 28279                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28280                                  ; allow spaces in pathnames
 28281                                  ;
 28282                                  ;   Inputs:	DS:SI points to start of path element
 28283                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28284                                  ;		ES = DOSGroup
 28285                                  ;		DS:SI advanced after name
 28286                                  ;   Registers modified: DI,AX,DX,CX
 28287                                  ;
 28288                                  ;----------------------------------------------------------------------------
 28289                                  
 28290                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28291                                  	; 20/05/2019 - Retro DOS v4.0
 28292                                  NameTrans:
 28293                                  ;hkn; SS override
 28294 0000503F 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28295 00005045 16                      	push	ss
 28296 00005046 07                      	pop	es
 28297                                  
 28298                                  ;hkn; NAME1 is in DOSDATA
 28299 00005047 BF[4B05]                	MOV	DI,NAME1
 28300 0000504A 57                      	PUSH	DI
 28301 0000504B B82020                  	MOV	AX,'  '
 28302 0000504E B90500                  	MOV	CX,5
 28303 00005051 AA                      	STOSB
 28304 00005052 F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28305 00005054 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28306 00005056 88C2                    	MOV	DL,AL
 28307 00005058 AA                      	STOSB
 28308 00005059 5F                      	POP	DI
 28309                                  
 28310 0000505A E880FF                  	CALL	NORMSCAN
 28311                                  
 28312                                  ;hkn; SS override for NAME1
 28313 0000505D 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28314 00005063 75D9                    	jnz	short scanb_retn
 28315 00005065 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28316 0000506B C3                      	retn
 28317                                  
 28318                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28319                                  ;============================================================================
 28320                                  
 28321                                  ; 20/05/2019 - Retro DOS v4.0
 28322                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28323                                  
 28324                                  ;If TableLook
 28325                                  
 28326                                  ;hkn; Table	SEGMENT
 28327                                  ;	PUBLIC	CharType
 28328                                  ;----------------------------------------------------------------------------
 28329                                  
 28330                                  ; Character type table for file name scanning
 28331                                  ; Table provides a mapping of characters to validity bits.
 28332                                  ; Four bits are provided for each character. Values 7Dh and above
 28333                                  ; have all bits set, so that part of the table is chopped off, and
 28334                                  ; the translation routine is responsible for screening these values.
 28335                                  ; The bit values are defined in DOSSYM.INC
 28336                                  
 28337                                  ;	      ; ^A and NUL
 28338                                  ;CharType:
 28339                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28340                                  ;	      ; ^C and ^B
 28341                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28342                                  ;	      ; ^E and ^D
 28343                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28344                                  ;	      ; ^G and ^F
 28345                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28346                                  ;	      ; TAB and BS
 28347                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28348                                  ;	      ; ^K and ^J
 28349                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28350                                  ;	      ; ^M and ^L
 28351                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28352                                  ;	      ; ^O and ^N
 28353                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28354                                  ;	      ; ^Q and ^P
 28355                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28356                                  ;	      ; ^S and ^R
 28357                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28358                                  ;	      ; ^U and ^T
 28359                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28360                                  ;	      ; ^W and ^V
 28361                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28362                                  ;	      ; ^Y and ^X
 28363                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28364                                  ;	      ; ESC and ^Z
 28365                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28366                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28368                                  ;	      ; ^_ and ^^
 28369                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28370                                  ;	      ; ! and SPACE
 28371                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28372                                  ;	      ; # and "
 28373                                  ;	 db   LOW (NOT FFCB+FCHK)
 28374                                  ;	      ; $ - )
 28375                                  ;	 db   3 dup (0FFh)
 28376                                  ;	      ; + and *
 28377                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28378                                  ;	      ; - and '
 28379                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28380                                  ;	      ; / and .
 28381                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28382                                  ;	      ; 0 - 9
 28383                                  ;	 db   5 dup (0FFh)
 28384                                  ;	      ; ; and :
 28385                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28386                                  ;	      ; = and <
 28387                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28388                                  ;	      ; ? and >
 28389                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28390                                  ;	      ; A - Z
 28391                                  ;	 db   13 dup (0FFh)
 28392                                  ;	      ; \ and [
 28393                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28394                                  ;	      ; ^ and ]
 28395                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28396                                  ;	      ; _ - {
 28397                                  ;	 db   15 dup (0FFh)
 28398                                  ;	      ; } and |
 28399                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28400                                  
 28401                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28402                                  ;					; character in the table
 28403                                  
 28404                                  ;FCHK	equ 1		; normal name char, no chks needed
 28405                                  ;FDELIM	equ 2		; is a delimiter
 28406                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28407                                  ;FFCB	equ 8		; is valid in an FCB
 28408                                  
 28409                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28410                                  ;----------------------------------------------------------------------------
 28411                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28412                                  
 28413                                  CharType: ; 63 bytes
 28414 0000506C 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28415 00005074 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28416 0000507C F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28417 00005084 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28418 0000508C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28419 00005094 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28420 0000509C FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28421 000050A4 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28422                                  
 28423                                  CharType_last equ ($ - CharType) * 2
 28424                                  
 28425                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28426                                  ;----------------------------------------------------------------------------
 28427                                  ;CharType:
 28428                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28429                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28430                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28431                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28432                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28433                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28434                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28435                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28436                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28437                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28438                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28439                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28440                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28441                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28442                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28443                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28444                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28445                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28446                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28447                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28448                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28449                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28450                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28451                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28452                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28453                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28454                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28455                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28456                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28457                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28458                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28459                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28460                                  
 28461                                  ;hkn; Table	ENDS
 28462                                  
 28463                                  ;ENDIF
 28464                                  
 28465                                  ; 20/05/2019 - Retro DOS v4.0
 28466                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28467                                  
 28468                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28469                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28470                                  
 28471                                  ;----------------------------------------------------------------------------
 28472                                  ;
 28473                                  ; Procedure Names : GetLet, UCase, GetLet3
 28474                                  ;
 28475                                  ; These routines take a character, convert it to upper case, and check
 28476                                  ; for delimiters.  Three different entry points:
 28477                                  ;	GetLet -  DS:[SI] = character to convert
 28478                                  ;	UCase  -  AL = character to convert
 28479                                  ;	GetLet3 - AL = character
 28480                                  ;		  [BX] = translation table to use
 28481                                  ;
 28482                                  ;	Exit (in all cases) : AL = upper case character
 28483                                  ;			      CY set if char is control char other than TAB
 28484                                  ;			      ZF set if char is a delimiter
 28485                                  ;	Uses : AX, flags
 28486                                  ;
 28487                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28488                                  ; inline version.  Return with carry set is only possible in the inline
 28489                                  ; version. The table lookup version is the one in use.
 28490                                  ;
 28491                                  ;----------------------------------------------------------------------------
 28492                                  
 28493                                  ; This entry point has character at [SI]
 28494                                  
 28495                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28496                                  GETLET:	
 28497 000050AB AC                      	LODSB
 28498                                  
 28499                                  ; This entry point has character in AL
 28500                                  
 28501                                  	;entry	UCase
 28502                                  UCase:	
 28503                                  	; 09/08/2018
 28504                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28505                                  _UCase:
 28506 000050AC 53                      	PUSH	BX
 28507 000050AD BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28508                                  
 28509                                  ; Convert the character in AL to upper case
 28510                                  
 28511                                  gl_0:
 28512 000050B0 3C61                    	CMP	AL,"a"
 28513 000050B2 7214                    	JB	short gl_2	; Already upper case, go check type
 28514 000050B4 3C7A                    	CMP	AL,"z"
 28515 000050B6 7702                    	JA	short gl_1
 28516 000050B8 2C20                    	SUB	AL,20H		; Convert to upper case
 28517                                  
 28518                                  ; Map European character to upper case
 28519                                  
 28520                                  gl_1:
 28521 000050BA 3C80                    	CMP	AL,80H
 28522 000050BC 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28523 000050BE 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28524                                  
 28525                                  	; M048 - Start 
 28526                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28527                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28528                                  	; preserve it.
 28529                                  
 28530                                  	; 09/08/2018 - Retro DOS v3.0
 28531                                  	; MSDOS 3.3
 28532                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28533                                  	;CS	XLAT
 28534                                  
 28535                                  	; 20/05/2019 - Retro DOS v4.0
 28536                                  
 28537                                  	; MSDOS 6.0
 28538 000050C0 1E                      	push	ds
 28539                                  	;getdseg <ds>
 28540 000050C1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28541 000050C6 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28542 000050C7 1F                      	pop	ds
 28543                                  
 28544                                  	; M048 - End
 28545                                  
 28546                                  ; Now check the type
 28547                                  
 28548                                  ;If TableLook
 28549                                  gl_2:
 28550                                  	; 20/05/2019 - Retro DOS v4.0
 28551 000050C8 50                      	PUSH	AX
 28552                                  
 28553                                  	; MSDOS 3.3
 28554                                  	;mov	bx,CharType
 28555                                  	;; 09/08/2018
 28556                                  	;;xlat	byte [cs:bx]
 28557                                  	;cs	xlat	
 28558                                  	
 28559                                  	; MSDOS 6.0
 28560 000050C9 E81800                  	CALL	GetCharType	; returns type flags in AL
 28561                                  	
 28562                                  	;test	al,1	
 28563 000050CC A801                    	TEST	AL,FCHK 	; test for normal character
 28564 000050CE 58                      	POP	AX
 28565 000050CF 5B                      	POP	BX
 28566 000050D0 C3                      	RETN
 28567                                  
 28568                                  ; This entry has character in AL and lookup table in BX
 28569                                  
 28570                                  	; MSDOS 6.0
 28571                                  ;	;entry GetLet3
 28572                                  GETLET3: ; 10/08/2018
 28573 000050D1 53                      	PUSH	BX
 28574 000050D2 EBDC                    	JMP	short gl_0
 28575                                  ;ELSE
 28576                                  ;
 28577                                  ;gl_2:
 28578                                  ;	POP	BX
 28579                                  ;	CMP	AL,"."
 28580                                  ;	retz
 28581                                  ;	CMP	AL,'"'
 28582                                  ;	retz
 28583                                  ;	CALL	PATHCHRCMP
 28584                                  ;	retz
 28585                                  ;	CMP	AL,"["
 28586                                  ;	retz
 28587                                  ;	CMP	AL,"]"
 28588                                  ;	retz
 28589                                  ;ENDIF
 28590                                  
 28591                                  ;---------------------------------------------------------------------
 28592                                  ;
 28593                                  ; DELIM - check if character is a delimiter
 28594                                  ;	Entry : AX = character to check
 28595                                  ;	Exit  : ZF set if character is not a delimiter
 28596                                  ;	Uses  : Flags
 28597                                  ;
 28598                                  ;--------------------------------------------------------------------
 28599                                  
 28600                                  	;entry	DELIM
 28601                                  DELIM:
 28602                                  ;IF TableLook
 28603                                  	; 20/05/2019 - Retro DOS v4.0
 28604 000050D4 50                      	PUSH	AX
 28605                                  
 28606                                  	; MSDOS 3.3
 28607                                  	;push	bx
 28608                                  	;mov	bx,CharType
 28609                                  	;;09/08/2018
 28610                                  	;;xlat	byte [cs:bx]
 28611                                  	;cs	xlat
 28612                                  	;pop	bx
 28613                                  
 28614                                  	; MSDOS 6.0
 28615 000050D5 E80C00                  	CALL	GetCharType
 28616                                  	
 28617                                  	;test	al,2
 28618 000050D8 A802                    	TEST	AL,FDELIM
 28619 000050DA 58                      	POP	AX
 28620 000050DB C3                      	RETN
 28621                                  ;ELSE
 28622                                  ;	CMP	AL,":"
 28623                                  ;	retz
 28624                                  ;
 28625                                  ;	CMP	AL,"<"
 28626                                  ;	retz
 28627                                  ;	CMP	AL,"|"
 28628                                  ;	retz
 28629                                  ;	CMP	AL,">"
 28630                                  ;	retz
 28631                                  ;
 28632                                  ;	CMP	AL,"+"
 28633                                  ;	retz
 28634                                  ;	CMP	AL,"="
 28635                                  ;	retz
 28636                                  ;	CMP	AL,";"
 28637                                  ;	retz
 28638                                  ;	CMP	AL,","
 28639                                  ;	retz
 28640                                  ;ENDIF
 28641                                  
 28642                                  ;-------------------------------------------------------------------------
 28643                                  ;
 28644                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28645                                  ;	Entry : AL = character to check
 28646                                  ;	Exit  : ZF set if character is a space
 28647                                  ;	Uses  : flags
 28648                                  ;
 28649                                  ;-------------------------------------------------------------------------
 28650                                  
 28651                                  	;entry SPCHK
 28652                                  SPCHK:
 28653                                  ;IF TableLook
 28654                                  	; 20/05/2019 - Retro DOS v4.0
 28655 000050DC 50                      	PUSH	AX
 28656                                  
 28657                                  	; MSDOS 3.3
 28658                                  	;push	bx
 28659                                  	;mov	bx,CharType
 28660                                  	;; 09/08/2018
 28661                                  	;;xlat	byte [cs:bx]
 28662                                  	;cs	xlat
 28663                                  	;pop	bx
 28664                                  
 28665                                  	; MSDOS 6.0
 28666 000050DD E80400                  	CALL	GetCharType
 28667                                  	
 28668                                  	;test	al,4
 28669 000050E0 A804                    	TEST	AL,FSPCHK
 28670 000050E2 58                      	POP	AX
 28671 000050E3 C3                      	RETN
 28672                                  ;ELSE
 28673                                  ;	CMP	AL,9		; Filter out tabs too
 28674                                  ;	retz
 28675                                  ;; WARNING! " " MUST be the last compare
 28676                                  ;	CMP	AL," "
 28677                                  ;	return
 28678                                  ;ENDIF
 28679                                  
 28680                                  ;-------------------------------------------------------------------------
 28681                                  ;
 28682                                  ;  GetCharType - return flag bits indicating character type
 28683                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28684                                  ;	defined above at label CharType.
 28685                                  ;
 28686                                  ;	Entry : AL = character to return type flags for
 28687                                  ;	Exit  : AL = type flags
 28688                                  ;	Uses  : AL, flags
 28689                                  ;
 28690                                  ;-------------------------------------------------------------------------
 28691                                  
 28692                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28693                                  
 28694                                  	; 20/05/2019 - Retro DOS v4.0
 28695                                  	; MSDOS 6.0
 28696                                  GetCharType:
 28697                                  	;cmp	al,7Eh
 28698 000050E4 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28699 000050E6 7316                    	jae	short gct_90		; return standard value
 28700                                  
 28701 000050E8 53                      	push	bx
 28702 000050E9 BB[6C50]                	mov	bx,CharType		; load lookup table
 28703 000050EC D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28704                                  	;xlat	cs:[bx] 		; get flags
 28705 000050EE 2ED7                    	cs	xlat	
 28706 000050F0 5B                      	pop	bx
 28707                                  
 28708                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28709                                  ; we have to shift the flags down to the low nibble
 28710                                  
 28711 000050F1 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28712                                  
 28713 000050F3 D0E8                    	shr	al,1			; we want high nibble, shift it down
 28714 000050F5 D0E8                    	shr	al,1
 28715 000050F7 D0E8                    	shr	al,1
 28716 000050F9 D0E8                    	shr	al,1
 28717                                  gct_80:
 28718 000050FB 240F                    	and	al,0Fh			; clear the unused nibble
 28719 000050FD C3                      	retn
 28720                                  gct_90:
 28721 000050FE B00F                    	mov	al,0Fh			; set all flags
 28722 00005100 C3                      	retn
 28723                                  
 28724                                  ;----------------------------------------------------------------------------
 28725                                  ;
 28726                                  ; Procedure : PATHCHRCMP
 28727                                  ;
 28728                                  ;----------------------------------------------------------------------------
 28729                                  
 28730                                  PATHCHRCMP:
 28731 00005101 3C2F                    	CMP	AL,'/'
 28732 00005103 7606                    	JBE	short PathRet
 28733 00005105 3C5C                    	CMP	AL,'\'
 28734 00005107 C3                      	retn
 28735                                  GotFor:
 28736 00005108 B05C                    	MOV	AL,'\'
 28737 0000510A C3                      	retn
 28738                                  PathRet:
 28739 0000510B 74FB                    	JZ	short GotFor
 28740 0000510D C3                      	retn
 28741                                  
 28742                                  ;============================================================================
 28743                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28744                                  ;============================================================================
 28745                                  ; 30/07/2018 - Retro DOS v3.0
 28746                                  ; 29/04/2019 - Retro DOS v4.0
 28747                                  
 28748                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28749                                  
 28750                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28751                                  
 28752                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28753                                  ;	NAME	IBMCTRLC
 28754                                  
 28755                                  ;**	Low level routines for detecting special characters on CON input,
 28756                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28757                                  ;	process termination code, and the INT 0 divide overflow handler.
 28758                                  ;
 28759                                  ;	FATAL
 28760                                  ;	FATAL1
 28761                                  ;	reset_environment
 28762                                  ;	DSKSTATCHK
 28763                                  ;	SPOOLINT
 28764                                  ;	STATCHK
 28765                                  ;	CNTCHAND
 28766                                  ;	DIVOV
 28767                                  ;	CHARHARD
 28768                                  ;	HardErr
 28769                                  ;
 28770                                  ;	Revision history:
 28771                                  ;
 28772                                  ;	    AN000	version 4.0   Jan 1988
 28773                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28774                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28775                                  ;
 28776                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28777                                  ;	      flags register. In order to return to user normally DOS used to
 28778                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28779                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28780                                  ;
 28781                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28782                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28783                                  ;	      charhard.
 28784                                  
 28785                                  ; 29/04/2019 - Retro DOS v4.0
 28786                                  	; MSDOS 6.0
 28787                                  ;		public	LowInt23Addr		
 28788                                  LowInt23Addr: ;	LABEL	DWORD
 28789 0000510E [CD10]0000              	DW	LowInt23, 0
 28790                                  
 28791                                  ;		public	LowInt24Addr
 28792                                  LowInt24Addr: ;	LABEL	DWORD
 28793 00005112 [E110]0000              	DW	LowInt24, 0
 28794                                  
 28795                                  ;		public	LowInt28Addr
 28796                                  LowInt28Addr: ;	LABEL	DWORD
 28797 00005116 [F510]0000              	DW	LowInt28, 0
 28798                                  
 28799                                  ;Break	<Checks for ^C in CON I/O>
 28800                                  
 28801                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28802                                  ; 05/05/2019 - Retro DOS v4.0
 28803                                  
 28804                                  ;---------------------------------------------------------------------------
 28805                                  ;
 28806                                  ; Procedure Name : DSKSTATCHK
 28807                                  ;
 28808                                  ; Check for ^C if only one level in
 28809                                  ;
 28810                                  ;---------------------------------------------------------------------------
 28811                                  
 28812                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28813                                  
 28814                                  DSKSTATCHK:        
 28815                                  	;CMP	BYTE [INDOS],1
 28816 0000511A 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28817                                  	;retnz			; Do NOTHING
 28818                                  	; 16/12/2022
 28819 00005120 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28820                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28821                                  	;jz	short _RET37 ; dskstatchk1
 28822                                  	;retn
 28823                                  ;_RET37:
 28824                                  ;dskstatchk1:
 28825 00005122 51                      	PUSH    CX
 28826 00005123 06                              PUSH    ES
 28827 00005124 53                              PUSH    BX
 28828 00005125 1E                              PUSH    DS
 28829 00005126 56                              PUSH    SI
 28830                                          
 28831                                  	;PUSH	CS
 28832                                          ;POP	ES
 28833                                          ;PUSH	CS
 28834                                          ;POP	DS
 28835                                  
 28836 00005127 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28837 00005129 8EC3                    	MOV	ES,BX		; for deviocall2
 28838 0000512B 8EDB                    	MOV	DS,BX
 28839                                  
 28840                                  	; 16/12/2022
 28841                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28842                                  
 28843                                  	; 05/05/2019
 28844                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28845                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28846                                  	;mov	word [ss:DSKSTST],0
 28847                                  
 28848                                  	; 16/12/2022
 28849                                  	; 25/06/2019
 28850 0000512D C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28851 00005132 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28852 00005137 C706[9503]0000          	mov	word [DSKSTST],0
 28853                                  
 28854 0000513D BB[9203]                        MOV     BX,DSKSTCALL
 28855                                  
 28856                                  	;LDS	SI,[ss:BCON]
 28857                                          ; 25/062019
 28858 00005140 C536[3200]              	lds	si,[BCON]
 28859                                  
 28860                                  ; 16/12/2022
 28861                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28862                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28863                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28864                                  ;	mov	word [ss:DSKSTST],0
 28865                                  ;	mov	bx,DSKSTCALL
 28866                                  ;	lds	si,[ss:BCON]
 28867                                  
 28868 00005144 E890F5                  	CALL	DEVIOCALL2
 28869                                   	; 15/03/2018
 28870                                  	;;test	word [ss:DSKSTST],200h
 28871                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28872                                  	; 05/05/2019
 28873 00005147 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28874 0000514D 7408                    	jz	short _GotCh		; No characters available
 28875                                  
 28876 0000514F 30C0                            XOR     AL,AL                   ; Set zero
 28877                                  RET36:
 28878 00005151 5E                              POP     SI
 28879 00005152 1F                              POP     DS
 28880 00005153 5B                              POP     BX
 28881 00005154 07                              POP     ES
 28882 00005155 59                              POP     CX
 28883                                  	; 16/12/2022
 28884                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28885                                  _RET37:
 28886 00005156 C3                              RETN
 28887                                  
 28888                                  _GotCh:
 28889 00005157 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28890                                  
 28891 0000515B 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28892 0000515D 75F2                            JNZ     SHORT RET36
 28893 0000515F 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28894 00005165 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28895 0000516B 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28896                                  	; 09/09/2018
 28897 00005170 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28898 00005177 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28899 0000517E E856F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28900 00005181 5E                              POP     SI
 28901 00005182 1F                              POP     DS
 28902 00005183 5B                              POP     BX                      ; Clean stack
 28903 00005184 07                              POP     ES
 28904 00005185 59                              POP     CX
 28905 00005186 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 28906                                  
 28907                                  	; 05/05/2019
 28908                                  NOSTOP:
 28909                                  	; MSDOS 6.0
 28910 00005189 3C10                    	CMP	AL,"P"-"@"
 28911 0000518B 7509                    	JNZ	short check_next
 28912                                  				    	; SS override
 28913 0000518D 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28914 00005193 7405                    	JZ	short INCHKJ		; no
 28915                                  check_end:	; 24/09/2023
 28916 00005195 C3                      	retn
 28917                                  check_next:
 28918                                  	;IF	NOT TOGLPRN
 28919                                  	;CMP	AL,"N"-"@"
 28920                                  	;JZ	short INCHKJ
 28921                                  	;ENDIF
 28922                                  
 28923 00005196 3C03                    	CMP	AL,"C"-"@"
 28924                                  	; 24/09/2023
 28925                                  	;JZ	short INCHKJ
 28926                                  ;check_end:
 28927                                  	;retn
 28928 00005198 75FB                    	jnz	short check_end
 28929                                  
 28930                                  	; 24/09/2023
 28931                                  	; 08/09/2018
 28932                                  INCHKJ:	; 10/08/2018
 28933 0000519A E9A500                  	jmp	INCHK
 28934                                  
 28935                                  	; MSDOS 3.3
 28936                                          ;CMP     AL,"P"-"@"  ; cmp al,16
 28937                                          ;JZ	short INCHKJ
 28938                                  
 28939                                  	; 15/04/2018
 28940                                          ;;IF	NOT TOGLPRN
 28941                                          ;CMP	AL,"N"-"@"
 28942                                          ;JZ	SHORT INCHKJ
 28943                                          ;;ENDIF
 28944                                  	
 28945                                  	;CMP     AL,"C"-"@"  ; cmp al,3
 28946                                          ;JZ	short INCHKJ
 28947                                  	;RETN
 28948                                  
 28949                                  ;	; 08/09/2018
 28950                                  ;INCHKJ:; 10/08/2018
 28951                                  ;	JMP	INCHK
 28952                                  
 28953                                  ;----------------------------------------------------------------------------
 28954                                  ;
 28955                                  ; Procedure Name : SpoolInt
 28956                                  ;
 28957                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28958                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28959                                  ; the middle of an INT 24.
 28960                                  ;
 28961                                  ;----------------------------------------------------------------------------
 28962                                  
 28963                                  SPOOLINT:
 28964 0000519D 9C                              PUSHF
 28965                                  	; 15/03/2018
 28966 0000519E 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28967 000051A4 7423                            JZ      SHORT POPFRET
 28968 000051A6 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28969 000051AC 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28970                                  
 28971                                  	; 30/07/2018
 28972                                  
 28973                                  	; Note that we are going to allow an external program to issue system 
 28974                                  	; calls at this time. We MUST preserve IdleInt across this.
 28975                                  
 28976 000051AE 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28977                                  
 28978                                  	; 05/05/2019 - Retro DOS v4.0
 28979                                   
 28980                                  	; MSDOS 6.0
 28981 000051B3 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28982 000051B9 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28983 000051BB CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28984 000051BD EB05                    	jmp	short spool_ret_addr
 28985                                  
 28986                                  do_low_int28:
 28987                                  	;call	far [ss:LowInt28Addr]
 28988 000051BF 2EFF1E[1651]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28989                                  
 28990                                  spool_ret_addr:
 28991                                  	;INT	int_spooler		; INT 28h
 28992                                  
 28993 000051C4 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28994                                  POPFRET:
 28995 000051C9 9D                              POPF
 28996                                  _RET18:  
 28997 000051CA C3                      	RETN
 28998                                  
 28999                                  ; 05/05/2019 - Retro DOS v4.0
 29000                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 29001                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29002                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 29003                                  
 29004                                  ;----------------------------------------------------------------------------
 29005                                  ;
 29006                                  ; Procedure Name : STATCHK
 29007                                  ;
 29008                                  ;----------------------------------------------------------------------------
 29009                                  
 29010                                  STATCHK:
 29011 000051CB E84CFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 29012                                                                          ; input redirection
 29013 000051CE 53                              PUSH    BX
 29014 000051CF 31DB                            XOR     BX,BX
 29015 000051D1 E8E8E4                          CALL	GET_IO_SFT
 29016 000051D4 5B                              POP     BX
 29017 000051D5 72F3                            JC      SHORT _RET18
 29018                                  
 29019 000051D7 B401                            MOV     AH,1
 29020 000051D9 E826F3                          CALL	IOFUNC
 29021 000051DC 74BF                            JZ      SHORT SPOOLINT
 29022 000051DE 3C13                            CMP     AL,'S'-'@'
 29023 000051E0 75A7                            JNZ     SHORT NOSTOP
 29024                                  
 29025                                  	; 05/05/2019
 29026                                  	; MSDOS 6.0			; SS override
 29027 000051E2 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 29028 000051E8 75AB                    	JNZ	short check_end		; AN000; yes
 29029                                  
 29030 000051EA 30E4                            XOR     AH,AH
 29031 000051EC E813F3                          CALL	IOFUNC                  ; Eat Cntrl-S
 29032 000051EF EB4A                            JMP     SHORT PAUSOSTRT
 29033                                  PRINTOFF:
 29034                                  PRINTON:
 29035 000051F1 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 29036                                  
 29037                                  	; 30/07/2018 - Retro DOS v3.0
 29038 000051F6 53                      	PUSH	BX
 29039 000051F7 BB0400                  	MOV	BX,4
 29040 000051FA E8BFE4                  	call	GET_IO_SFT
 29041 000051FD 5B                      	POP	BX
 29042 000051FE 72CA                    	jc	short _RET18
 29043 00005200 06                      	PUSH	ES
 29044 00005201 57                      	PUSH	DI
 29045 00005202 1E                      	PUSH	DS
 29046 00005203 07                      	POP	ES
 29047 00005204 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 29048                                  	;test	word [es:di+5],800h
 29049                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 29050                                  	; 05/05/2019
 29051 00005206 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 29052 0000520B 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 29053                                  
 29054                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 29055                                  					; See if allowed
 29056 0000520D 50                      	push	ax
 29057 0000520E B82611                  	mov	ax,1126h
 29058 00005211 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29059                                  			; Return: CF set on error, AX = error code
 29060                                  			; STACK unchanged
 29061 00005213 58                      	pop	ax
 29062                                  
 29063 00005214 730F                    	JNC	short NORM_PR 		; Echo is OK
 29064                                  
 29065                                  					; SS override
 29066 00005216 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 29067                                  
 29068                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 29069                                  
 29070 0000521C 50                      	push    ax
 29071 0000521D B82411                  	mov     ax,1124h
 29072 00005220 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 29073                                  			; ES:DI -> SFT, SS = DOS CS
 29074 00005222 58                      	pop     ax
 29075                                  
 29076 00005223 EB10                    	JMP	SHORT RETP6
 29077                                  NORM_PR:
 29078 00005225 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 29079 0000522B 7505                    	JNZ	short PRNOPN
 29080 0000522D E82BF4                  	call	DEV_CLOSE_SFT
 29081 00005230 EB03                    	JMP	SHORT RETP6
 29082                                  PRNOPN:
 29083 00005232 E81EF4                  	call	DEV_OPEN_SFT
 29084                                  RETP6:
 29085 00005235 5F                      	POP	DI
 29086 00005236 07                      	POP	ES
 29087                                  STATCHK_RETN:
 29088 00005237 C3                              RETN
 29089                                  PAUSOLP:
 29090 00005238 E862FF                          CALL    SPOOLINT
 29091                                  PAUSOSTRT:
 29092 0000523B B401                            MOV     AH,1
 29093 0000523D E8C2F2                          CALL	IOFUNC
 29094 00005240 74F6                            JZ      SHORT PAUSOLP
 29095                                  INCHK:
 29096 00005242 53                              PUSH    BX
 29097 00005243 31DB                            XOR     BX,BX
 29098 00005245 E874E4                          CALL	GET_IO_SFT
 29099 00005248 5B                              POP     BX
 29100 00005249 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 29101 0000524B 30E4                            XOR     AH,AH
 29102 0000524D E8B2F2                          CALL	IOFUNC
 29103                                  	; 30/07/2018
 29104                                  	; MSDOS 3.3
 29105                                          ;CMP	AL,'P'-'@' ;cmp al,16
 29106                                          ;JNZ	SHORT NOPRINT
 29107                                  
 29108                                  	;cmp	byte [SS:SCAN_FLAG],0
 29109                                  	;JZ	SHORT PRINTON	
 29110                                  	;mov	byte [ss:SCAN_FLAG],0
 29111                                  
 29112                                  	; 05/05/2019
 29113                                  	; MSDOS 6.0
 29114 00005250 3C10                    	CMP	AL,"P"-"@"
 29115                                  	;;;;  7/14/86	ALT_Q key fix
 29116 00005252 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 29117                                  ;NOPRINT:	
 29118                                  	;IF	NOT TOGLPRN
 29119                                  	;CMP	AL,"N"-"@"
 29120                                  	;JZ	short PRINTOFF
 29121                                  	;ENDIF
 29122 00005254 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 29123                                  	;retnz
 29124 00005256 75DF                    	jnz	short STATCHK_RETN
 29125                                  
 29126                                  	; !! NOTE: FALL THROUGH !!
 29127                                  
 29128                                  ;---------------------------------------------------------------------------
 29129                                  ;
 29130                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 29131                                  ;
 29132                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 29133                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 29134                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 29135                                  ; processing to continue; 2) the original interrupt return address to the code
 29136                                  ; that performed the function call in the first place. If the user CTRL-C
 29137                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29138                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29139                                  ; is simulated.
 29140                                  ;
 29141                                  ;---------------------------------------------------------------------------
 29142                                  
 29143                                  CNTCHAND:
 29144                                  	; MSDOS 6.0			; SS override
 29145                                  					; AN002; from RAWOUT
 29146                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29147                                  	;JNZ	short around_deadlock 	; AN002;
 29148                                  
 29149                                  	; 05/05/2019 - Retro DOS v4.0
 29150                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29151 00005258 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29152 0000525E 7508                    	JNZ	short around_deadlock 	; AN002;
 29153                                  
 29154 00005260 B003                            MOV     AL,3			; Display "^C"
 29155 00005262 E8E1C4                          CALL	BUFOUT
 29156 00005265 E87DC3                          CALL	CRLF
 29157                                  around_deadlock:
 29158 00005268 16                              PUSH    SS
 29159 00005269 1F                              POP     DS
 29160 0000526A 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29161 0000526F 7403                            JZ      SHORT NOSWAP
 29162 00005271 E8B2E0                          CALL	SWAPBACK
 29163                                  NOSWAP:
 29164 00005274 FA                      	CLI				; Prepare to play with stack
 29165 00005275 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29166 00005279 8B26[8405]              	MOV	SP,[USER_SP]
 29167 0000527D E8D9B1                          CALL	restore_world       ; User registers now restored
 29168                                  
 29169                                  	; 30/07/2018 - Retro DOS v3.0 
 29170                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29171                                          ; 14/03/2018 - Retro DOS v2.0
 29172                                  	;MOV	BYTE [CS:INDOS],0	
 29173                                          ;MOV	BYTE [CS:ERRORMODE],0
 29174                                          ;MOV	[CS:ConC_Spsave],SP
 29175                                  	;clc	;30/07/2018
 29176                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29177                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29178                                  			; Return: return via RETF 2 with CF set
 29179                                  			; DOS will abort program with errorlevel 0
 29180                                  			; else
 29181                                  			; interrupted DOS call continues
 29182                                  
 29183                                  	; 05/05/2019 - Retro DOS v4.0
 29184                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29185                                  
 29186                                  	; CS was used to address these variables. We have to use DOSDATA
 29187                                  	
 29188 00005280 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29189                                  			; (pop es, after 'call restore_world')	
 29190 00005281 1E                      	push	ds
 29191                                  	;getdseg <ds>			; ds -> dosdata
 29192 00005282 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29193 00005287 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29194 0000528C C606[2003]00            	mov	byte [ERRORMODE],0
 29195 00005291 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29196                                  	; User SP has changed because of push. Adjust for it
 29197 00005295 8306[3203]02            	add	word [ConC_Spsave],2
 29198                                  
 29199 0000529A 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29200 0000529F 1F                       	pop	ds	; restore ds
 29201 000052A0 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29202 000052A2 F8                      	CLC				
 29203 000052A3 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29204 000052A5 EB06                    	jmp	short ctrlc_ret_addr
 29205                                  
 29206                                  	; 05/05/2019
 29207                                  do_low_int23:
 29208 000052A7 F8                      	clc
 29209 000052A8 2EFF1E[0E51]            	call	far [cs:LowInt23Addr]	
 29210                                  
 29211                                  	; 30/07/2018 
 29212                                  
 29213                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29214                                  
 29215                                  ; The user has returned to us. The circumstances we allow are:
 29216                                  ;
 29217                                  ;   IRET	We retry the operation by redispatching the system call
 29218                                  ;   CLC/RETF	POP the stack and retry
 29219                                  ;   ... 	Exit the current process with ^C exit
 29220                                  ;
 29221                                  ; User's may RETURN to us and leave interrupts on. 
 29222                                  ; Turn 'em off just to be sure
 29223                                  
 29224                                  ctrlc_ret_addr: ; 05/05/2019
 29225                                  
 29226 000052AD FA                      	CLI
 29227                                  
 29228                                  	; MSDOS 3.3 
 29229                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29230                                  	;PUSHF				; and the flags (maybe new call)
 29231                                  	;POP	AX
 29232                                  
 29233                                  	; 05/05/2019
 29234                                  	; MSDOS 6.0
 29235                                  
 29236                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29237                                  
 29238 000052AE 50                      	push	ax
 29239 000052AF 8CD8                    	mov	ax,ds
 29240                                  	;getdseg <ds>			; ds -> dosdata
 29241 000052B1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29242 000052B6 A3[0A0D]                	mov	[TEMPSEG],ax
 29243 000052B9 58                      	pop	ax
 29244 000052BA A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29245 000052BD 9C                      	pushf				; and the flags (maybe new call)
 29246 000052BE 58                      	pop	ax
 29247                                  
 29248                                  ; See if the input stack is identical to the output stack
 29249                                  
 29250                                  	; MSDOS 3.3
 29251                                  	;CMP	SP,[CS:ConC_Spsave]
 29252                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29253                                  
 29254                                  	; MSDOS 6.0
 29255 000052BF 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29256 000052C3 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29257                                  
 29258                                  ; Repeat the operation by redispatching the system call.
 29259                                  
 29260                                  ctrlc_repeat:
 29261                                  	; MSDOS 3.3
 29262                                  	;MOV	AX,[CS:USER_IN_AX]
 29263                                  	; 05/05/2019
 29264                                  	; MSDOS 6.0
 29265 000052C5 A1[3A03]                	mov	ax,[USER_IN_AX]
 29266 000052C8 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29267                                  	; MSDOS 3.3 & MSDOS 6.0 
 29268                                  	;transfer COMMAND
 29269                                  COMMANDJ:
 29270 000052CC E93DB0                  	JMP	COMMAND
 29271                                  
 29272                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29273                                  ; RETF'd leaving some flags on the stack and examine the input
 29274                                  
 29275                                  ctrlc_try_new:
 29276 000052CF 83C402                  	ADD	SP,2			; pop those flags
 29277                                  	;;test	ax,1
 29278                                  	;TEST	AX,f_Carry		; did he return with carry?
 29279 000052D2 A801                    	test	al,f_Carry ; test al,1
 29280 000052D4 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29281                                  
 29282                                  	; MSDOS 6.0
 29283 000052D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29284                                  
 29285                                  	; Well...  time to abort the user.  
 29286                                  	; Signal a ^C exit and use the EXIT system call..
 29287                                  
 29288                                  ctrlc_abort:
 29289                                  	; MSDOS 3.3
 29290                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29291                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29292                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29293                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29294                                  	;;JMP	SHORT COMMANDJ
 29295                                  	;JMP	COMMAND
 29296                                  
 29297                                  	; 05/05/2019 - Retro DOS v4.0
 29298                                  	; MSDOS 6.0
 29299 000052DA B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29300 000052DD 1E                      	push	ds
 29301                                  	;getdseg <ds>			; ds -> dosdata
 29302 000052DE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29303 000052E3 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29304 000052E8 1F                      	pop	ds
 29305                                  	;transfer COMMAND		; give up by faking $EXIT
 29306 000052E9 EBE1                    	JMP	SHORT COMMANDJ
 29307                                  	;JMP	COMMAND
 29308                                  
 29309                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29310                                  ;----------------------------------------------------------------------------
 29311                                  ;
 29312                                  ; Procedure Name : DIVOV
 29313                                  ;
 29314                                  ; Default handler for division overflow trap
 29315                                  ;
 29316                                  ;----------------------------------------------------------------------------
 29317                                  
 29318                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29319                                  DIVOV: 
 29320                                  	; 05/05/2019 - Retro DOS v4.0
 29321                                  	; 30/07/2018
 29322                                  	; 07/07/2018 - Retro DOS v3.0
 29323 000052EB BE[BA09]                	mov	si,DIVMES
 29324 000052EE 2E8B1E[CD09]            	mov	bx,[cs:DivMesLen]
 29325                                  	;mov	ax,cs
 29326                                  	;mov	ss,ax
 29327                                  	; 05/05/2019
 29328                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29329 000052F3 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29330 000052F8 BC[A007]                	mov     sp,AUXSTACK
 29331                                  	;call	RealDivOv ; MSDOS 3.3
 29332 000052FB E80200                  	call	_OUTMES ; MSDOS 6.0
 29333 000052FE EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29334                                  
 29335                                  ; 30/07/2018
 29336                                  
 29337                                  ; MSDOS 6.0
 29338                                  ;---------------------------------------------------------------------------
 29339                                  ;
 29340                                  ; Procedure Name : OutMes
 29341                                  ;
 29342                                  ;
 29343                                  ; OutMes: perform message output
 29344                                  ; Inputs:   SS:SI points to message
 29345                                  ;	    BX has message length
 29346                                  ; Outputs:  message to BCON
 29347                                  ;
 29348                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29349                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29350                                  ;NB. This procedure is called only from DIVOV. -SR
 29351                                  ;
 29352                                  ;---------------------------------------------------------------------------
 29353                                  
 29354                                  ;MSDOS 3.3
 29355                                  ;---------------------------------------------------------------------------
 29356                                  ; RealDivOv: perform actual divide overflow stuff.
 29357                                  ; Inputs:   none
 29358                                  ; Outputs:  message to BCON
 29359                                  ;---------------------------------------------------------------------------
 29360                                  
 29361                                  	; 05/05/2019 - Retro DOS v4.0
 29362                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29363                                  
 29364                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29365                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29366                                  
 29367                                  ;---------------------------------------------------------------------------
 29368                                  ;
 29369                                  ; Procedure Name : OutMes
 29370                                  ;
 29371                                  ; OutMes: perform message output
 29372                                  ; Inputs:   SS:SI points to message
 29373                                  ;	    BX has message length
 29374                                  ; Outputs:  message to BCON
 29375                                  ;
 29376                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29377                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29378                                  ;NB. This procedure is called only from DIVOV. -SR
 29379                                  ;
 29380                                  ;---------------------------------------------------------------------------
 29381                                  
 29382                                  	; 30/07/2018
 29383                                  	; MSDOS 6.0
 29384                                  _OUTMES:
 29385                                  	; MSDOS 3.3
 29386                                  ;RealDivOv:
 29387                                  	; 07/07/2018 - Retro DOS v3.0
 29388                                          ;Context ES
 29389 00005300 16                      	push	ss ; 05/05/2019
 29390                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29391 00005301 07                      	POP	ES
 29392                                          ;Context DS
 29393 00005302 16                      	push	ss ; 05/05/2019	
 29394                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29395 00005303 1F                      	POP	DS
 29396 00005304 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29397 00005309 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29398 0000530E C706[9503]0000                  MOV     WORD [DSKSTST],0
 29399                                  	; BX = [DivMesLen] = 19
 29400 00005314 891E[A403]                      MOV     [DSKSTCNT],BX
 29401 00005318 BB[9203]                        MOV     BX,DSKSTCALL
 29402 0000531B 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29403                                  	; 08/09/2018
 29404                                  	;mov	[DEVIOBUF_PTR],si
 29405                                  	; MSDOS 6.0
 29406                                  					; CS is used for string, fill in 
 29407                                  					; segment address 
 29408 0000531F 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29409                                  
 29410 00005323 C536[3200]                      LDS     SI,[BCON]
 29411 00005327 E8ADF3                          CALL	DEVIOCALL2
 29412                                  
 29413                                  	;; 14/03/2018
 29414                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29415                                  	;; 08/09/2018
 29416                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29417                                          ;MOV	WORD [CS:DSKSTCNT],1
 29418                                          
 29419                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29420                                  
 29421                                  	; ES still points to DOSDATA. ES is
 29422                                  					; not destroyed by deviocall2. So use
 29423                                  					; ES override.
 29424                                  
 29425 0000532A 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29426 00005331 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29427                                  
 29428 00005338 C3                      	RETN
 29429                                  
 29430                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29431                                  ;---------------------------------------------------------------------------
 29432                                  ;
 29433                                  ; Procedure Name : CHARHARD
 29434                                  ;
 29435                                  ;
 29436                                  ; Character device error handler
 29437                                  ; Same function as HARDERR
 29438                                  ;
 29439                                  ;---------------------------------------------------------------------------
 29440                                  
 29441                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29442                                  CHARHARD:
 29443                                  	; 05/05/2019 - Retro DOS v4.0
 29444                                  	; 30/07/2018
 29445                                  	; 08/07/2018 - Retro DOS v3.0
 29446                                  
 29447                                  	; MSDOS 6.0
 29448                                  		   			; M024 - start
 29449 00005339 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29450                                  	;jne	short @f		; Y: allow fail
 29451 0000533F 750B                    	jne	short chard1
 29452                                  
 29453 00005341 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29454                                  
 29455 00005344 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29456 0000534A 7503                    	jnz	short ctrlp		; Y: 
 29457                                  ;@@:
 29458                                  chard1:					; M024 - end
 29459                                  	; MSDOS 6.0 & MSDOS 3.3
 29460                                  
 29461                                  ; Character device error handler
 29462                                  ; Same function as HARDERR
 29463                                  
 29464                                  	;or	ah,38h
 29465 0000534C 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29466                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29467 0000534F 368826[4B03]            	mov	[SS:ALLOWED],ah
 29468                                  
 29469                                  	; 15/03/2018
 29470 00005354 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29471 00005359 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29472 0000535E 56                              PUSH    SI
 29473                                  	;and	di,0FFh
 29474 0000535F 81E7FF00                        AND     DI,STECODE
 29475 00005363 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29476 00005365 E86400                          CALL    FATALC
 29477 00005368 5E                              POP     SI
 29478                                  	;return
 29479 00005369 C3                              RETN
 29480                                  
 29481                                  ;---------------------------------------------------------------------------
 29482                                  ;
 29483                                  ; Procedure Name : HardErr
 29484                                  ;
 29485                                  ; Hard disk error handler. Entry conditions:
 29486                                  ;	DS:BX = Original disk transfer address
 29487                                  ;	DX = Original logical sector number
 29488                                  ;	CX = Number of sectors to go (first one gave the error)
 29489                                  ;	AX = Hardware error code
 29490                                  ;	DI = Original sector transfer count	
 29491                                  ;	ES:BP = Base of drive parameters
 29492                                  ;	[READOP] = 0 for read, 1 for write
 29493                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29494                                  ; Output:
 29495                                  ;	[FAILERR] will be set if user responded FAIL
 29496                                  ;
 29497                                  ;--------------------------------------------------------------------------
 29498                                  
 29499                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29500                                  HARDERR:
 29501                                  	; 05/05/2019 - Retro DOS v4.0
 29502                                  	; 30/07/2018
 29503                                  	; 08/07/2018 - Retro DOS v3.0
 29504 0000536A 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29505                                          ;and	di,0FFh
 29506 0000536B 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29507                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29508                                  	;cmp	di,0
 29509 0000536F 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29510 00005372 750A                            JNZ     short NOSETWRPERR
 29511 00005374 50                              PUSH    AX
 29512                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29513                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29514                                          ;;MOV	AL,[ES:BP+0]
 29515                                  	; 15/12/2022
 29516 00005375 268A4600                	mov	al,[ES:BP]
 29517                                          	; 15/03/2018
 29518 00005379 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29519 0000537D 58                              POP     AX
 29520                                  NOSETWRPERR:
 29521 0000537E 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29522 00005380 01C2                            ADD     DX,AX                   ; First sector number to retry
 29523 00005382 52                              PUSH    DX
 29524                                  	; 08/07/2018
 29525                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29526 00005383 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29527 00005387 5A                              POP     DX
 29528 00005388 01C3                            ADD     BX,AX                   ; First address for retry
 29529 0000538A 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29530                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29531 0000538C 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29532 00005390 721A                            JB      SHORT ERRINT
 29533 00005392 FEC4                            INC     AH                      ; Flag for FAT
 29534                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29535                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29536 00005394 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29537 00005398 7308                    	JAE	short TESTDIR 		; No
 29538                                  		 ; Err in FAT must force recomp of freespace
 29539                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29540                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29541 0000539A 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29542 000053A0 EB0A                    	JMP	SHORT ERRINT
 29543                                  TESTDIR:
 29544 000053A2 FEC4                            INC     AH
 29545                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29546 000053A4 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29547 000053A8 7202                            JB      SHORT ERRINT
 29548 000053AA FEC4                            INC     AH                      ; Must be in data area
 29549                                  ERRINT:
 29550 000053AC D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29551 000053AE 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29552                                  
 29553                                  	; 15/08/2018
 29554                                  					; SS override for allowed and EXITHOLD
 29555 000053B3 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29556                                  
 29557                                          ;entry   FATAL
 29558                                  FATAL:
 29559                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29560                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29561                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29562                                  	; 15/12/2022
 29563 000053B8 268A4600                	MOV	AL,[ES:BP]        
 29564                                  
 29565                                  	;entry   FATAL1
 29566                                  FATAL1:  
 29567                                  	; 15/03/2018      
 29568 000053BC 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29569 000053C1 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29570                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29571                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29572 000053C6 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29573 000053CA 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29574                                  
 29575                                  	; DI has the INT-24-style extended error. We now map the error code 
 29576                                  	; for this into the normalized get extended error set by using the 
 29577                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29578                                  	; the device returned codes and leave all others beyond the look up 
 29579                                  	; table alone.
 29580                                  
 29581                                  	; 08/07/2018 - Retro DOS v3.0
 29582                                  FATALC:
 29583 000053CC E89701                  	call	SET_I24_EXTENDED_ERROR
 29584                                  	;cmp	di,0Ch
 29585 000053CF 83FF0C                  	CMP	DI,error_I24_gen_failure
 29586 000053D2 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29587 000053D4 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29588                                  					;  Only come via GetExtendedError
 29589                                  ;** ----------------------------------------------------------------
 29590                                  ;
 29591                                  ; Entry point used by REDIRector on Network I 24 errors.
 29592                                  ;
 29593                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29594                                  ;
 29595                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29596                                  ;     EXITHOLD set for restore of ES:BP.
 29597                                  ; ------------------------------------------------------------------
 29598                                  	;entry	NET_I24_ENTRY
 29599                                  NET_I24_ENTRY:
 29600                                  GOT_RIGHT_CODE:
 29601 000053D7 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29602 000053DD 7404                            JZ	SHORT NoSetFail
 29603 000053DF B003                    	MOV	AL,3
 29604 000053E1 EB6C                    	JMP	short FailRet
 29605                                  NoSetFail:
 29606 000053E3 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29607 000053E8 16                              PUSH	SS
 29608 000053E9 07                              POP	ES
 29609                                      
 29610                                  	; Wango!!! We may need to free some user state info... In 
 29611                                  	; particular, we may have locked down a JFN for a user and he may 
 29612                                  	; NEVER return to us. Thus,we need to free it here and then 
 29613                                  	; reallocate it when we come back.
 29614                                  
 29615 000053EA 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29616 000053F0 740C                    	JZ	short _NoFree
 29617 000053F2 1E                      	push	ds
 29618 000053F3 56                      	push	si
 29619 000053F4 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29620 000053F9 C604FF                  	MOV	BYTE [SI],0FFH
 29621 000053FC 5E                      	pop	si
 29622 000053FD 1F                      	pop	ds
 29623                                  
 29624                                  _NoFree:
 29625 000053FE FA                      	CLI
 29626                                  					; Prepare to play with stack
 29627 000053FF 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29628 00005404 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29629                                  
 29630                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29631                                  
 29632                                  	;; Extended Open hooks
 29633                                  					; AN000;IFS.I24 error disabled
 29634                                  	;test	byte [ss:EXTOPEN_ON],2
 29635 00005409 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29636 0000540F 7404                    	JZ	short i24yes		; AN000;IFS.no
 29637                                  faili24:				; AN000;
 29638 00005411 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29639 00005413 EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29640                                  i24yes: 				; AN000;
 29641                                  	;; Extended Open hooks
 29642                                  
 29643 00005415 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29644 0000541A 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29645                                  
 29646                                  	;;int	24h	
 29647                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29648                                  					; must preserve ES
 29649                                  	; 05/05/2019
 29650 0000541F 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29651 00005425 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29652 00005427 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29653                                  					; must preserve ES
 29654 00005429 EB05                    	jmp	short criterr_ret_addr
 29655                                  
 29656                                  do_low_int24:
 29657                                  	; 05/05/2019
 29658                                  	; MSDOS 6.0
 29659 0000542B 2EFF1E[1251]            	call    far [cs:LowInt24Addr]
 29660                                  criterr_ret_addr:
 29661 00005430 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29662 00005435 268C16[8605]                    MOV     [ES:USER_SS],SS
 29663 0000543A 8CC5                            MOV     BP,ES
 29664 0000543C 8ED5                            MOV     SS,BP
 29665                                  passi24:
 29666 0000543E 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29667 00005443 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29668 00005448 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29669 0000544E FB                              STI
 29670                                  FailRet:
 29671 0000544F 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29672                                  	
 29673                                  	; 08/07/2018
 29674                                  
 29675                                  	; Triage the user's reply.
 29676                                  
 29677 00005454 3C01                    	CMP	AL,1
 29678 00005456 723D                    	JB	short CheckIgnore	; 0 => ignore
 29679 00005458 7445                    	JZ	short CheckRetry	; 1 => retry
 29680 0000545A 3C03                    	CMP	AL,3			; 3 => fail
 29681 0000545C 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29682                                  
 29683                                  	; The reply was fail. See if we are allowed to fail.
 29684                                  
 29685                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29686                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29687                                  	;test	byte [ss:ALLOWED],8
 29688 0000545E 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29689 00005464 7443                    	jz	short DoAbort	; No, do abort
 29690                                  DoFail:
 29691 00005466 B003                    	MOV	AL,3		; just in case...
 29692                                  				; AN000;EO. I24 error disabled
 29693                                  	; 05/05/2019
 29694                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29695 00005468 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29696 0000546E 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29697                                  	
 29698 00005470 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29699                                  CleanUp:
 29700 00005475 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29701 0000547B 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29702                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29703                                  	;jnz	short CleanUp2
 29704                                  	;retn
 29705                                  	; 17/12/2022
 29706 00005481 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29707                                  CleanUp2:
 29708 00005483 1E                      	push	ds
 29709 00005484 56                      	push	si
 29710 00005485 50                      	push	ax
 29711 00005486 36A1[AA05]              	MOV	AX,[ss:SFN]
 29712 0000548A 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29713 0000548F 8804                    	MOV	[SI],AL
 29714 00005491 58                      	pop	ax
 29715 00005492 5E                      	pop	si
 29716 00005493 1F                      	pop	ds
 29717                                  Cleanup_retn:
 29718 00005494 C3                      	retn
 29719                                  
 29720                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29721                                  
 29722                                  CheckIgnore:
 29723                                  	;test	byte [ss:ALLOWED],20h
 29724 00005495 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29725 0000549B 74C9                    	jz	short DoFail			 ; No, do fail
 29726 0000549D EBD6                    	jmp	short CleanUp
 29727                                  
 29728                                  	; The reply was RETRY. See if we are allowed to retry.
 29729                                  
 29730                                  CheckRetry:
 29731                                  	;test	byte [ss:ALLOWED],10h
 29732 0000549F 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29733 000054A5 74BF                    	jz	short DoFail			; No, do fail
 29734 000054A7 EBCC                    	JMP	short CleanUp
 29735                                  
 29736                                  	; The reply was ABORT.
 29737                                  DoAbort:
 29738 000054A9 16                      	push	ss
 29739 000054AA 1F                      	pop	ds
 29740                                  
 29741 000054AB 803E[5703]00            	CMP	byte [CONSWAP],0
 29742 000054B0 7403                    	JZ	short NOSWAP2
 29743 000054B2 E871DE                  	call	SWAPBACK
 29744                                  NOSWAP2:
 29745                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29746                                  	; turn this abort into a fail.
 29747                                  
 29748                                  	;test	[fAborting],0FFh
 29749                                  	;jnz	short DoFail
 29750                                  
 29751 000054B5 803E[5903]00            	cmp	byte [fAborting],0
 29752 000054BA 75AA                    	JNZ	short DoFail
 29753                                  
 29754                                  	; Set return code
 29755                                  
 29756 000054BC C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29757 000054C1 30C0                    	XOR	AL,AL
 29758                                  
 29759                                  	; we are truly aborting the process. Go restore information from 
 29760                                  	; the PDB as necessary.
 29761                                  
 29762 000054C3 E98C0D                  	jmp	exit_inner
 29763                                  
 29764                                  ;** --------------------------------------------------------------------------
 29765                                  ;
 29766                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29767                                  ; different, then an old-style return is performed. If they are the same,
 29768                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29769                                  ; the source of the terminate addresses.
 29770                                  ;
 29771                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29772                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29773                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29774                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29775                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29776                                  ; operation. In essence, we dis-allow the abort response.
 29777                                  ;
 29778                                  ; output:   none.
 29779                                  ; ----------------------------------------------------------------------------
 29780                                  
 29781                                  	;entry	reset_environment
 29782                                  	
 29783                                  reset_environment:
 29784                                  	; 30/07/2018 - Retro DOS v3.0
 29785                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29786                                  
 29787                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29788                                  
 29789 000054C6 1E                      	PUSH	DS			; save PDB of process
 29790                                  
 29791                                  	; There are no critical sections in force. Although we may enter 
 29792                                  	; here with critical sections locked down, they are no longer 
 29793                                  	; relevant. We may safely free all allocated resources.
 29794                                  
 29795 000054C7 B482                    	MOV	AH,82h
 29796                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29797                                  	;int	2Ah 	
 29798 000054C9 CD2A                    	INT	int_IBM
 29799                                  
 29800                                  					; SS override
 29801 000054CB 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29802                                  
 29803                                  					; DOS 4.00 doesn't need it
 29804                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29805                                  					; Allow REDIR to clear some stuff
 29806                                  					; On process exit.
 29807 000054D1 B82211                  	mov     ax, 1122h
 29808 000054D4 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29809                                  			; SS = DOS CS
 29810                                  	;mov	al,22h	
 29811 000054D6 B022                    	MOV	AL,int_terminate
 29812 000054D8 E8F0B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29813                                  
 29814 000054DB 59                      	POP	CX			; get ThisPDB
 29815 000054DC 06                      	push	es
 29816 000054DD 53                      	push	bx			; save return address
 29817                                  
 29818 000054DE 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29819 000054E3 8EDB                    	MOV	DS,BX
 29820 000054E5 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29821                                  
 29822                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29823                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29824                                  	; is not Exit_keep_process
 29825                                  	
 29826 000054E8 39D8                    	CMP	AX,BX
 29827 000054EA 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29828 000054EC 39CB                    	CMP	BX,CX
 29829 000054EE 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29830 000054F0 50                      	PUSH	AX			; save parent
 29831                                  
 29832                                  					; SS override
 29833                                  	;cmp	byte [SS:EXIT_TYPE],3
 29834 000054F1 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29835 000054F7 7406                    	JZ	short reset_to_parent 	; keeping this process
 29836                                  
 29837                                  	; We are truly removing a process. Free all allocation blocks 
 29838                                  	; belonging to this PDB
 29839                                  
 29840                                  	;invoke	arena_free_process
 29841 000054F9 E88E0D                  	call	arena_free_process
 29842                                  
 29843                                  	; Kill off remainder of this process. Close file handles and signal 
 29844                                  	; to relevant network folks that this process is dead. Remember that 
 29845                                  	; CurrentPDB is STILL the current process!
 29846                                  
 29847                                  	;invoke	DOS_ABORT
 29848 000054FC E82EDA                  	call	DOS_ABORT
 29849                                  
 29850                                  reset_to_parent:
 29851                                  					; SS override
 29852 000054FF 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29853                                  
 29854                                  reset_return:				; come here for normal return
 29855                                  	;Context DS			; DS is used to refer to DOSDATA  
 29856 00005504 16                      	push	ss
 29857 00005505 1F                      	pop	ds	
 29858                                  
 29859 00005506 B0FF                    	MOV	AL,-1
 29860                                  
 29861                                  	; make sure that everything is clean In this case ignore any errors, 
 29862                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29863                                  
 29864                                  	;EnterCrit critDisk
 29865 00005508 E84BBE                  	call	ECritDisk
 29866                                  	;invoke	FLUSHBUF
 29867 0000550B E8AC05                  	call	FLUSHBUF
 29868                                  	;LeaveCrit critDisk
 29869 0000550E E860BE                  	call	LCritDisk
 29870                                  
 29871                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29872                                  
 29873 00005511 E883F7                  	call	CHECK_VIRT_OPEN
 29874 00005514 FA                      	CLI
 29875 00005515 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29876 0000551A C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29877 0000551F C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29878 00005524 8F06[8005]              	POP	WORD [EXITHOLD]
 29879 00005528 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29880                                  
 29881                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29882                                  
 29883 0000552C 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29884 00005530 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29885 00005534 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29886                                  
 29887 00005538 E81EAF                  	call	restore_world
 29888                                  
 29889                                  	; 05/05/2019
 29890 0000553B 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29891                                  
 29892                                  	; MSDOS 6.0
 29893 0000553C 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29894 0000553D 8CD8                    	mov	ax,ds			; and not on stack.
 29895                                  	;getdseg <ds>			; ds -> dosdata
 29896 0000553F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29897 00005544 A3[0A0D]                	mov	[TEMPSEG],ax
 29898 00005547 58                      	pop	ax
 29899                                  					; set up ds to DOSDATA
 29900                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29901 00005548 A3[8405]                	mov	[USER_SP],ax
 29902                                  
 29903 0000554B 58                      	POP	AX			; suck off CS:IP of interrupt...
 29904 0000554C 58                      	POP	AX
 29905 0000554D 58                      	POP	AX
 29906                                  
 29907                                  ; M011 : BEGIN
 29908                                  
 29909                                  	; MSDOS 3.3
 29910                                  ;	MOV	AX,0F202h	; STI
 29911                                  
 29912                                  	; MSDOS 6.0
 29913 0000554E 9F                      	LAHF
 29914 0000554F 86E0                    	XCHG	AH,AL
 29915 00005551 2402                    	AND	AL,2
 29916 00005553 B4F2                    	MOV	AH,0F2h
 29917                                  
 29918                                  ; M011 : END
 29919                                  
 29920                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29921 00005555 50                      	PUSH	AX
 29922                                   
 29923                                  	;PUSH	word [CS:EXITHOLD+2]
 29924                                  	;PUSH	word [CS:EXITHOLD]
 29925                                  	
 29926                                  	; MSDOS 6.0
 29927 00005556 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29928 0000555A FF36[8005]              	PUSH	word [EXITHOLD]
 29929                                  
 29930                                  	;MOV	AX,[CS:USER_SP]
 29931                                  
 29932                                  	; MSDOS 6.0
 29933 0000555E A1[8405]                	MOV	AX,[USER_SP]
 29934 00005561 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29935                                  
 29936 00005565 CF                      	IRET			; Long return back to user terminate address
 29937                                  
 29938                                  ;---------------------------------------------------------------------------
 29939                                  ;
 29940                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29941                                  ;
 29942                                  ; This routine handles extended error codes.
 29943                                  ; Input : DI = error code from device
 29944                                  ; Output: All EXTERR fields are set
 29945                                  ;
 29946                                  ;--------------------------------------------------------------------------
 29947                                  
 29948                                  SET_I24_EXTENDED_ERROR:
 29949 00005566 50                      	PUSH	AX
 29950                                  					; ErrMap24End is in DOSDATA
 29951 00005567 B8[BA0E]                	MOV	AX,ErrMap24End
 29952 0000556A 2D[AA0E]                	SUB	AX,ErrMap24
 29953                                  					; Change to dosdata to access 
 29954                                  					; ErrMap24 and EXTERR -SR
 29955                                  	; 05/05/2019 - Retro DOS v4.0
 29956                                  	
 29957                                  	; MSDOS 6.0
 29958 0000556D 1E                      	push	ds
 29959                                  	;getdseg <ds>			; ds ->dosdata
 29960 0000556E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29961                                  
 29962                                  	; AX is the index of the first unavailable error. Do not translate 
 29963                                  	; if greater or equal to AX.
 29964                                  
 29965 00005573 39C7                    	CMP	DI,AX
 29966 00005575 89F8                    	MOV	AX,DI
 29967 00005577 7306                    	JAE	short NoTrans
 29968                                  
 29969                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29970 00005579 8A85[AA0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29971 0000557D 30E4                    	XOR	AH,AH
 29972                                  NoTrans:
 29973                                  	;MOV	[CS:EXTERR],AX
 29974 0000557F A3[2403]                	mov	[EXTERR],AX
 29975 00005582 1F                      	pop	ds
 29976                                  	;assume	ds:nothing
 29977 00005583 58                      	POP	AX
 29978                                  
 29979                                  	; Now Extended error is set correctly. Translate it to get correct 
 29980                                  	; error locus class and recommended action.
 29981                                  
 29982 00005584 56                      	PUSH	SI
 29983                                  					; ERR_TABLE_24 is in DOSCODE 
 29984 00005585 BE[5A0E]                	MOV	SI,ERR_TABLE_24
 29985 00005588 E801B1                  	call	CAL_LK			; Set other extended error fields
 29986 0000558B 5E                      	POP	SI
 29987 0000558C C3                      	retn
 29988                                  
 29989                                  ;============================================================================
 29990                                  ; FAT.ASM, MSDOS 6.0, 1991
 29991                                  ;============================================================================
 29992                                  ; 30/07/2018 - Retro DOS v3.0
 29993                                  ; 20/05/2019 - Retro DOS v4.0
 29994                                  
 29995                                  ;	TITLE	FAT - FAT maintenance routines
 29996                                  ;	NAME	FAT
 29997                                  
 29998                                  ;**	FAT.ASM
 29999                                  ;----------------------------------------------------------------------------
 30000                                  ;	Low level local device routines for performing disk change sequence,
 30001                                  ;	setting cluster validity, and manipulating the FAT
 30002                                  ;
 30003                                  ;	IsEof
 30004                                  ;	UNPACK
 30005                                  ;	PACK
 30006                                  ;	MAPCLUSTER
 30007                                  ;	FATREAD_SFT
 30008                                  ;	FATREAD_CDS
 30009                                  ;	FAT_operation
 30010                                  ;
 30011                                  ;	Revision history:
 30012                                  ;
 30013                                  ;	  AN000  version Jan. 1988
 30014                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 30015                                  ;
 30016                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 30017                                  ;	       from CL0FATENTRY rather than disk.
 30018                                  
 30019                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 30020                                  
 30021                                  ;Break <IsEOF - check the quantity in BX for EOF>
 30022                                  ;----------------------------------------------------------------------------
 30023                                  ;
 30024                                  ; Procedure Name : IsEOF
 30025                                  ;
 30026                                  ; IsEOF - check the fat value in BX for eof.
 30027                                  ;
 30028                                  ;   Inputs:	ES:BP point to DPB
 30029                                  ;		BX has fat value
 30030                                  ;   Outputs:	JAE eof
 30031                                  ;   Registers modified: none
 30032                                  ;
 30033                                  ;---------------------------------------------------------------------------
 30034                                  
 30035                                  IsEOF:
 30036                                  	;cmp	word [es:bp+0Dh],0FF6h
 30037 0000558D 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 30038 00005593 730B                    	JAE	short EOF16			; yes, check for eof there
 30039                                  
 30040                                  ;J.K. 8/27/86
 30041                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 30042                                  ;of any media that has "F0"(Other) as a MediaByte.
 30043                                  ;Hopely, this does not create any side effect for those who may use any value
 30044                                  ;other than "FF8-FFF" as an EOF for their own file.
 30045                                  
 30046 00005595 81FBF00F                	cmp	bx,0FF0h
 30047 00005599 7404                    	je	short IsEOF_other
 30048                                  
 30049 0000559B 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 30050                                  IsEOF_other:
 30051 0000559F C3                      	retn
 30052                                  EOF16:
 30053 000055A0 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 30054 000055A3 C3                      	retn
 30055                                  
 30056                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 30057                                  
 30058                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 30059                                  ;---------------------------------------------------------------------------
 30060                                  ;
 30061                                  ; Procedur Name : UNPACK
 30062                                  ;
 30063                                  ; Inputs:
 30064                                  ;	BX = Cluster number (may be full 16-bit quantity)
 30065                                  ;	ES:BP = Base of drive parameters
 30066                                  ; Outputs:
 30067                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 30068                                  ;	Zero set means DI=0 (free cluster)
 30069                                  ;	Carry set means error (currently user FAILed to I 24)
 30070                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 30071                                  ;
 30072                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 30073                                  ;
 30074                                  ;----------------------------------------------------------------------------
 30075                                  	
 30076                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30077                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 30078                                  
 30079                                  	; 20/05/2019 - Retro DOS v4.0
 30080                                  UNPACK:
 30081                                  	; MSDOS 6.0			; M014 - Start
 30082 000055A4 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 30083 000055A6 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 30084 000055A8 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 30085 000055AC 09FF                    	or	di,di 			; return z if di=0
 30086 000055AE C3                      	retn				; done
 30087                                  up_cont:				; M014 - End
 30088                                  	; MSDOS 3.3 & MSDOS 6.0
 30089                                  	;cmp	bx,[es:bp+0Dh]
 30090 000055AF 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 30091 000055B3 7726                    	JA	short HURTFAT
 30092 000055B5 E8D700                  	CALL	MAPCLUSTER
 30093 000055B8 721E                    	jc	short _DoContext
 30094 000055BA 8B3D                    	MOV	DI,[DI]
 30095 000055BC 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 30096 000055BE 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 30097 000055C2 81FEF60F                	CMP	SI,4096-10
 30098 000055C6 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 30099 000055C8 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 30100 000055CA EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 30101                                  High12:
 30102 000055CC D1EF                    	SHR	DI,1
 30103 000055CE D1EF                    	SHR	DI,1
 30104 000055D0 D1EF                    	SHR	DI,1
 30105 000055D2 D1EF                    	SHR	DI,1
 30106                                  Unpack12:
 30107 000055D4 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 30108                                  _DoContext:
 30109 000055D8 16                      	PUSH	SS
 30110 000055D9 1F                      	POP	DS
 30111 000055DA C3                      	retn
 30112                                  HURTFAT:
 30113                                  	;;mov	word [es:bp+1Eh],0FFFFh
 30114                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30115 000055DB 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 30116 000055E1 50                      	PUSH	AX
 30117 000055E2 B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 30118                                  
 30119                                  ;hkn; SS override
 30120 000055E4 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 30121                                  ;
 30122                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 30123                                  ;
 30124 000055EA BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 30125 000055ED E8C8FD                  	call	FATAL
 30126 000055F0 3C03                    	CMP	AL,3
 30127 000055F2 F8                      	CLC
 30128 000055F3 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 30129 000055F5 F9                      	STC				; User said FAIL
 30130                                  OKU_RET:
 30131 000055F6 58                      	POP	AX
 30132                                  hurtfat_retn:
 30133 000055F7 C3                      	retn
 30134                                  
 30135                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 30136                                  
 30137                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30138                                  ;----------------------------------------------------------------------------
 30139                                  ;
 30140                                  ; Procedure Name : PACK
 30141                                  ;
 30142                                  ; Inputs:
 30143                                  ;	BX = Cluster number
 30144                                  ;	DX = Data
 30145                                  ;	ES:BP = Pointer to drive DPB
 30146                                  ; Outputs:
 30147                                  ;	The data is stored in the FAT at the given cluster.
 30148                                  ;	SI,DX,DI all destroyed
 30149                                  ;	Carry set means error (currently user FAILed to I 24)
 30150                                  ;	No other registers affected
 30151                                  ;
 30152                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 30153                                  ;
 30154                                  ;---------------------------------------------------------------------------
 30155                                  
 30156                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30157                                  	; 20/05/2019 - Retro DOS v4.0
 30158                                  PACK:
 30159                                  	; MSDOS 6.0			; M014 - start
 30160 000055F8 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30161 000055FA 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30162 000055FC 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30163 00005600 C3                      	retn				; done
 30164                                  p_cont:					; M014 - end
 30165                                  	; MSDOS 3.3 & MSDOS 6.0
 30166 00005601 E88B00                  	CALL	MAPCLUSTER
 30167 00005604 72D2                    	JC	short _DoContext
 30168 00005606 8B35                    	MOV	SI,[DI]
 30169 00005608 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30170 0000560A 51                      	PUSH	CX			; move data to upper 12 bits
 30171 0000560B B104                    	MOV	CL,4
 30172 0000560D D3E2                    	SHL	DX,CL
 30173 0000560F 59                      	POP	CX
 30174 00005610 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30175 00005613 EB14                    	JMP	SHORT PACKIN
 30176                                  ALIGNED:
 30177                                  	;cmp	word [es:bp+0Dh],0FF6h
 30178 00005615 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30179 0000561B 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30180 0000561D 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30181 00005621 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30182 00005625 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30183                                  Pack16:
 30184 00005627 31F6                    	XOR	SI,SI			; MZ no original data
 30185                                  PACKIN:
 30186 00005629 09D6                    	OR	SI,DX
 30187 0000562B 8935                    	MOV	[DI],SI
 30188                                  
 30189                                  ;hkn; SS override
 30190 0000562D 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30191                                  	; MSDOS 6.0
 30192 00005632 F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30193                                  					;LB. if already dirty		  ;AN000;
 30194 00005636 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30195                                  	; 10/06/2019
 30196 00005638 E88405                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30197                                  	
 30198                                  	;or	byte [si+5],40h
 30199 0000563B 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30200                                  yesdirty11:				;LB.				;AN000;
 30201                                  ;hkn; SS override
 30202 0000563F 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30203                                  ;hkn; SS is DOSDATA
 30204 00005645 16                      	push	ss
 30205 00005646 1F                      	pop	ds
 30206 00005647 74AE                    	jz	short hurtfat_retn	; Carry clear
 30207 00005649 50                      	PUSH	AX
 30208 0000564A 53                      	PUSH	BX
 30209 0000564B 51                      	PUSH	CX
 30210 0000564C A1[8E05]                	MOV	AX,[CLUSSAVE]
 30211 0000564F 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30212                                  	;;add	si,16 ; MSDOS 3.3
 30213                                  	;add	si,20 ; MSDOS 6.0
 30214 00005653 83C614                  	ADD	SI,BUFINSIZ
 30215 00005656 8824                    	MOV	[SI],AH
 30216                                  ;hkn; SS is DOSDATA
 30217                                  	;Context DS
 30218 00005658 16                      	push	ss
 30219 00005659 1F                      	pop	ds
 30220                                  	
 30221 0000565A 50                      	PUSH	AX
 30222                                  	
 30223                                  	; MSDOS 6.0
 30224 0000565B 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30225 0000565F 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30226                                  
 30227                                  	; MSDOS 3.3 & MSDOS 6.0
 30228 00005663 8B16[9005]              	MOV	DX,[CLUSSEC]
 30229                                  
 30230                                  	;MOV	SI,1	  ; *
 30231                                  	;XOR	AL,AL     ; *
 30232                                  	;call	GETBUFFRB ; *
 30233                                  	; 22/09/2023
 30234 00005667 E84503                  	call	GETBUFFRA ; *
 30235                                  
 30236 0000566A 58                      	POP	AX
 30237 0000566B 721C                    	JC	short POPP_RET
 30238 0000566D C53E[E205]              	LDS	DI,[CURBUF]
 30239                                  	
 30240                                  	; MSDOS 6.0
 30241 00005671 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30242                                  					;LB. if already dirty		  ;AN000;
 30243 00005675 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30244 00005677 E84505                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30245                                  	
 30246                                  	;or	byte [di+5],40h
 30247 0000567A 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30248                                  yesdirty12:
 30249                                  	;;add	di,16
 30250                                  	;add	di,20 ; MSDOS 6.0
 30251 0000567E 83C714                  	ADD	DI,BUFINSIZ
 30252 00005681 4F                      	DEC	DI
 30253                                  	;add	di,[es:bp+2]
 30254 00005682 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30255 00005686 8805                    	MOV	[DI],AL
 30256 00005688 F8                      	CLC
 30257                                  POPP_RET:
 30258 00005689 16                      	PUSH	SS
 30259 0000568A 1F                      	POP	DS
 30260 0000568B 59                      	POP	CX
 30261 0000568C 5B                      	POP	BX
 30262 0000568D 58                      	POP	AX
 30263 0000568E C3                      	retn
 30264                                  
 30265                                  ; 31/07/2018 - Retro DOS v3.0
 30266                                  
 30267                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30268                                  ;---------------------------------------------------------------------------
 30269                                  ;
 30270                                  ; Procedure Name : MAPCLUSTER
 30271                                  ;
 30272                                  ; Inputs:
 30273                                  ;	ES:BP Points to DPB
 30274                                  ;	BX Is cluster number
 30275                                  ; Function:
 30276                                  ;	Get a pointer to the cluster
 30277                                  ; Outputs:
 30278                                  ;	DS:DI Points to contents of FAT for given cluster
 30279                                  ;	DS:SI Points to start of buffer
 30280                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30281                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30282                                  ;	Carry set if failed.
 30283                                  ; SI is destroyed.
 30284                                  ;
 30285                                  ;---------------------------------------------------------------------------
 30286                                  
 30287                                  	; 20/05/2019 - Retro DOS v4.0
 30288                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30289                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30290                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30291                                  
 30292                                  MAPCLUSTER:
 30293                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30294 0000568F C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30295                                  	;SAVE	<AX,BX,CX,DX>
 30296 00005694 50                      	push	ax
 30297 00005695 53                      	push	bx
 30298 00005696 51                      	push	cx
 30299 00005697 52                      	push	dx
 30300 00005698 89D8                    	MOV	AX,BX			; AX = BX
 30301 0000569A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30302 000056A0 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30303 000056A2 D1E8                    	SHR	AX,1			; AX = BX/2
 30304                                  Map16:	
 30305                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30306 000056A4 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30307                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30308 000056A6 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30309 000056A8 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30310 000056AA 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30311                                  
 30312                                  ;IF FastDiv
 30313                                  ;
 30314                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30315                                  ; case and apply a really fast algorithm to get the desired results
 30316                                  ;
 30317                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30318                                  ; Fast method takes 39+20*4=119
 30319                                  ;
 30320                                  ; This saves a bunch.
 30321                                  
 30322 000056AE 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30323 000056B2 7510                    	jne	short _DoDiv		; 4  for no jump
 30324 000056B4 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30325 000056B6 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30326 000056BA 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30327                                  	; MDOS 3.3
 30328                                  	;shr	al,1	
 30329                                  	; MDOS 6.0
 30330 000056BC D1EF                    	shr	di,1			; 2
 30331 000056BE D0D8                    	rcr	al,1			; 2
 30332                                  	; MDOS 3.3 (& MSDOS 6.0)
 30333 000056C0 30E4                    	xor	ah,ah			; 3
 30334 000056C2 EB04                    	jmp	short DivDone		; 16
 30335                                  _DoDiv:
 30336                                  ;ENDIF
 30337                                  	; MSDOS 3.3
 30338                                  	;xor	dx,dx
 30339                                  	; MSDOS 6.0
 30340 000056C4 89FA                    	mov	dx,di			; 2
 30341                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30342 000056C6 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30343                                  ;IF FastDiv
 30344                                  DivDone:
 30345                                  ;ENDIF
 30346                                  	;add	ax,[es:bp+6]
 30347 000056C8 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30348 000056CC 49                      	DEC	CX			; CX is sector size - 1
 30349                                  	;SAVE	<AX,DX,CX>
 30350 000056CD 50                      	push	ax
 30351 000056CE 52                      	push	dx
 30352 000056CF 51                      	push	cx
 30353 000056D0 89C2                    	MOV	DX,AX
 30354                                  
 30355                                  	; MSDOS 6.0
 30356                                  	; 22/09/2023
 30357                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 30358                                  	;
 30359                                  	; MDOS 3.3 (& MSDOS 6.0)
 30360                                  	;XOR	AL,AL	   ; *
 30361                                  	;MOV	SI,1	   ; *
 30362                                  	;;invoke GETBUFFRB ; *
 30363                                  	;call	GETBUFFRB  ; *
 30364                                  	; 22/09/2023
 30365 000056D2 E8D402                  	call	GETBUFFRC  ; *!
 30366                                  
 30367                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30368 000056D5 59                      	pop	cx
 30369 000056D6 58                      	pop	ax
 30370 000056D7 5A                      	pop	dx
 30371 000056D8 724C                    	JC	short MAP_POP
 30372                                  
 30373 000056DA C536[E205]              	LDS	SI,[CURBUF]
 30374                                  	;;lea	di,[si+16]
 30375                                  	;lea	di,[si+20] ; MSDOS 6.0
 30376 000056DE 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30377 000056E1 01C7                    	ADD	DI,AX
 30378 000056E3 39C8                    	CMP	AX,CX
 30379 000056E5 752C                    	JNZ	short MAPRET
 30380 000056E7 8A05                    	MOV	AL,[DI]
 30381                                  	;Context DS		 	;hkn; SS is DOSDATA
 30382 000056E9 16                      	push	ss
 30383 000056EA 1F                      	pop	ds	
 30384 000056EB FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30385 000056EF A2[8E05]                	MOV	[CLUSSAVE],AL
 30386 000056F2 8916[9005]              	MOV	[CLUSSEC],DX
 30387                                  	; MSDOS 6.0
 30388 000056F6 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 30389 000056FC 42                      	INC	DX
 30390                                  
 30391                                  	; 22/09/2023
 30392                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 30393                                  	;
 30394                                  	; MDOS 3.3 (& MSDOS 6.0)
 30395                                  	;XOR	AL,AL	   ; *
 30396                                  	;MOV	SI,1	   ; *
 30397                                  	;;invoke GETBUFFRB ; *
 30398                                  	;call	GETBUFFRB  ; *
 30399                                  	; 22/09/2023
 30400 000056FD E8A902                  	call	GETBUFFRC  ; *!
 30401 00005700 7224                    	JC	short MAP_POP
 30402                                  
 30403 00005702 C536[E205]              	LDS	SI,[CURBUF]
 30404 00005706 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30405 00005709 8A05                    	MOV	AL,[DI]
 30406                                  	;Context DS			;hkn; SS is DOSDATA
 30407 0000570B 16                      	push	ss
 30408 0000570C 1F                      	pop	ds
 30409 0000570D A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30410                                  
 30411                                  ;hkn; CLUSSAVE is in DOSDATA
 30412 00005710 BF[8E05]                	MOV	DI,CLUSSAVE
 30413                                  MAPRET:
 30414                                  	;RESTORE <DX,CX,BX>
 30415 00005713 5A                      	pop	dx
 30416 00005714 59                      	pop	cx
 30417 00005715 5B                      	pop	bx
 30418 00005716 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30419 00005718 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30420 0000571E 7302                    	JAE	short MapSet		; MZ no, set flags
 30421 00005720 89D8                    	MOV	AX,BX
 30422                                  MapSet:
 30423 00005722 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30424                                  	;RESTORE <AX>
 30425 00005724 58                      	pop	ax
 30426 00005725 C3                      	retn
 30427                                  
 30428                                  MAP_POP:
 30429                                  	;RESTORE <DX,CX,BX,AX>
 30430 00005726 5A                      	pop	dx
 30431 00005727 59                      	pop	cx
 30432 00005728 5B                      	pop	bx
 30433 00005729 58                      	pop	ax
 30434                                  fatread_sft_retn: ; 17/12/2022
 30435 0000572A C3                      	retn
 30436                                  
 30437                                  ; 20/05/2019 - Retro DOS v4.0
 30438                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30439                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30440                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30441                                  
 30442                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30443                                  ;----------------------------------------------------------------------------
 30444                                  ;
 30445                                  ; Procedure Name : FATREAD_SFT
 30446                                  ;
 30447                                  ; Inputs:
 30448                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30449                                  ;		giving a NET SFT will produce system crashing results).
 30450                                  ;	DS DOSDATA
 30451                                  ; Function:
 30452                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30453                                  ;	if disk changed.
 30454                                  ;	In other respects, same as FATREAD_CDS.
 30455                                  ;	(note ES:DI destroyed!)
 30456                                  ; Outputs:
 30457                                  ;	Carry set if error (currently user FAILed to I 24)
 30458                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30459                                  ;	as far as invalidating curdir_ID is concerned.
 30460                                  ;	Since getting a true disk changed on this call is a screw up
 30461                                  ;	anyway, that's the way it goes.
 30462                                  ;
 30463                                  ;---------------------------------------------------------------------------
 30464                                  
 30465                                  FATREAD_SFT:
 30466 0000572B 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30467                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30468                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30469                                  	; 15/12/2022
 30470 0000572F 268A4600                	mov	AL,[ES:BP]
 30471 00005733 A2[7605]                	MOV	[THISDRV],AL
 30472 00005736 E807AF                  	call	GOTDPB			;Set THISDPB
 30473                                  	;CALL	FAT_GOT_DPB
 30474                                  	; 17/12/2022
 30475 00005739 EB78                    	jmp	FAT_GOT_DPB
 30476                                  ;fatread_sft_retn:
 30477                                  	;retn
 30478                                  
 30479                                  ;----------------------------------------------------------------------------
 30480                                  ;
 30481                                  ; Procedure Name : FATREAD_CDS
 30482                                  ;
 30483                                  ; Inputs:
 30484                                  ;	DS:DOSDATA
 30485                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30486                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30487                                  ; Function:
 30488                                  ;	If disk may have been changed, media is determined and buffers are
 30489                                  ;	flagged invalid. If not, no action is taken.
 30490                                  ; Outputs:
 30491                                  ;	ES:BP = Drive parameter block
 30492                                  ;	THISDPB = ES:BP
 30493                                  ;	THISDRV set
 30494                                  ;	Carry set if error (currently user FAILed to I 24)
 30495                                  ; DS preserved , all other registers destroyed
 30496                                  ;
 30497                                  ;---------------------------------------------------------------------------
 30498                                  
 30499                                  	; 20/05/2019 - Retro DOS v4.0
 30500                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30501                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30502                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30503                                  
 30504                                  FATREAD_CDS:
 30505 0000573B 06                      	PUSH	ES
 30506 0000573C 57                      	PUSH	DI
 30507                                  	;les	bp,[es:di+45h]
 30508 0000573D 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30509                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30510                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30511                                  	; 15/12/2022
 30512 00005741 268A4600                	mov	AL,[ES:BP]
 30513 00005745 A2[7605]                	MOV	[THISDRV],AL
 30514 00005748 E8F5AE                  	call	GOTDPB			;Set THISDPB
 30515 0000574B E86500                  	CALL	FAT_GOT_DPB
 30516 0000574E 5F                      	POP	DI			;Get back CDS pointer
 30517 0000574F 07                      	POP	ES
 30518 00005750 72D8                    	jc	short fatread_sft_retn
 30519 00005752 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30520                                  
 30521                                  ;	Media changed. We now need to find all CDS structures which use this
 30522                                  ;	DPB and invalidate their ID pointers.
 30523                                  
 30524                                  MED_CHANGE:
 30525 00005754 31C0                    	XOR	AX,AX
 30526 00005756 48                      	DEC	AX			; AX = -1
 30527 00005757 1E                      	PUSH	DS
 30528 00005758 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30529 0000575C 30ED                    	XOR	CH,CH			; CX is number of structures
 30530                                  	;lds	si,[es:di+45h]
 30531 0000575E 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30532                                  
 30533                                  ;hkn; SS override
 30534                                  
 30535                                  ;	Find all CDSs with this DevPtr
 30536                                  ;
 30537                                  ;	(ax) = -1
 30538                                  ;	(ds:si) = DevPtr
 30539                                  
 30540 00005762 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30541                                  frcd20: 
 30542                                  	;;test	word [es:di+43h],8000h
 30543                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30544 00005767 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30545 0000576C 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30546                                  
 30547                                  	; MSDOS 3.3
 30548                                  	;push	es
 30549                                  	;push	di
 30550                                  	;les	di,[es:di+45h]
 30551                                  	;;les	di,[ES:DI+curdir.devptr]
 30552                                  	;call	POINTCOMP
 30553                                  	;pop	di
 30554                                  	;pop	es
 30555                                  	;jnz	short frcd25
 30556                                  
 30557                                  	; MSDOS 6.0
 30558 0000576E 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30559 00005772 7512                    	jne	short frcd25		; no match
 30560 00005774 8CDB                    	mov	bx,ds
 30561 00005776 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30562 0000577A 750A                    	jne	short frcd25		; CDS not for this drive
 30563                                  
 30564                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30565                                  	;test	[es:di+49h],ax
 30566 0000577C 26854549                	test	[ES:DI+curdir.ID],AX
 30567 00005780 7404                    	JZ	short frcd25		; If root (0), leave root
 30568                                  	;mov	[es:di+49h],ax
 30569 00005782 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30570                                  frcd25:	
 30571                                  	;;add	di,81  ; MSDOS 3.3
 30572                                  	;add	di,88  ; MSDOS 6.0	 
 30573 00005786 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30574 00005789 E2DC                    	LOOP	frcd20
 30575 0000578B 1F                      	POP	DS
 30576                                  NO_CHANGE:
 30577 0000578C C42E[8A05]              	LES	BP,[THISDPB]
 30578 00005790 F8                      	CLC
 30579 00005791 C3                      	retn
 30580                                  
 30581                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30582                                  ;----------------------------------------------------------------------------
 30583                                  ;
 30584                                  ; Procedure Name : FAT_operation
 30585                                  ;
 30586                                  ;----------------------------------------------------------------------------
 30587                                  
 30588                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30589                                  
 30590                                  FAT_operation:
 30591                                  	; 31/07/2018 - Retro DOS v3.0
 30592                                  FATERR:
 30593                                  	;mov	word [es:bp+1Eh],-1
 30594                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30595 00005792 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30596                                  					; Err in FAT must force recomp of freespace
 30597                                  	;and	di,0FFh
 30598 00005798 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30599                                  	;mov	byte [ALLOWED],18h
 30600 0000579C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30601                                  	;mov	ah,1Ah
 30602 000057A1 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30603 000057A3 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30604 000057A6 E813FC                  	call	FATAL1
 30605 000057A9 C42E[8A05]              	LES	BP,[THISDPB]
 30606 000057AD 3C03                    	CMP	AL,3
 30607 000057AF 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30608 000057B1 F9                      	STC				; User said FAIL
 30609 000057B2 C3                      	retn
 30610                                  
 30611                                  FAT_GOT_DPB:
 30612                                  	;Context DS			;hkn; SS is DOSDATA
 30613 000057B3 16                      	push	ss			
 30614 000057B4 1F                      	pop	ds
 30615                                  	;mov	al,0Fh
 30616 000057B5 B00F                    	MOV	AL,DMEDHL
 30617                                  	;mov	ah,[es:bp+1]
 30618 000057B7 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30619 000057BB A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30620 000057BE C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30621 000057C3 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30622                                  	;;mov	al,[es:bp+16h]
 30623                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30624 000057C9 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30625 000057CD A2[6703]                	MOV	[CALLMED],AL
 30626 000057D0 06                      	PUSH	ES
 30627 000057D1 1E                      	PUSH	DS
 30628                                  
 30629                                  ;hkn; DEVCALL is in DOSDATA
 30630 000057D2 BB[5A03]                	MOV	BX,DEVCALL
 30631                                  	;;lds	si,[es:bp+12h]
 30632                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30633 000057D5 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30634 000057D9 07                      	POP	ES			; ES:BX Points to call header
 30635 000057DA E8FAEE                  	call	DEVIOCALL2
 30636                                  	;Context DS		 	;hkn; SS is DOSDATA
 30637 000057DD 16                      	push	ss
 30638 000057DE 1F                      	pop	ds
 30639 000057DF 07                      	POP	ES			; Restore ES:BP
 30640 000057E0 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30641                                  	;test	di,8000h
 30642                                  	;jnz	short FATERR
 30643 000057E4 09FF                    	or	di,di
 30644 000057E6 78AA                    	js	short FATERR		; have error
 30645 000057E8 30E4                    	XOR	AH,AH
 30646                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30647                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30648 000057EA 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30649 000057EE A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30650                                  ; See if we had changed volume id by creating one on the diskette
 30651 000057F1 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30652 000057F5 7508                    	jnz	short CHECK_BYT
 30653 000057F7 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30654 000057FC E9A500                  	jmp	GOGETBPB		; Need to get device driver to read in
 30655                                  					; new volume label.
 30656                                  CHECK_BYT:
 30657 000057FF 0A26[6803]              	OR	AH,[CALLRBYT]
 30658                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30659                                  	;JMP	short NEWDSK
 30660                                  	; 17/12/2022
 30661 00005803 7863                    	js	short NEWDSK
 30662                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30663                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30664                                  	;JMP	short NEWDSK
 30665                                  
 30666                                  CHECK_ZR:
 30667 00005805 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30668                                  	; 24/09/2023
 30669                                  	; cf=0 (after 'or' instruction)
 30670                                  	;CLC
 30671 00005807 C3                      	retn				; If Media not changed (NZ)
 30672                                  
 30673                                  DISK_CHNG_ERR:
 30674 00005808 06                      	PUSH	ES
 30675 00005809 55                      	PUSH	BP
 30676                                  	;;les	bp,[es:bp+12h]
 30677                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30678 0000580A 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30679                                  	;;test	word [es:bp+4],800h
 30680                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30681 0000580E 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30682 00005813 5D                      	POP	BP
 30683 00005814 07                      	POP	ES
 30684 00005815 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30685 00005817 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30686 00005818 57                      	PUSH	DI
 30687 00005819 16                      	push	ss			;hkn; SS is DOSDATA
 30688 0000581A 1F                      	pop	ds
 30689                                  	;mov	byte [ALLOWED],18h
 30690 0000581B C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30691 00005820 06                      	PUSH	ES
 30692 00005821 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30693 00005825 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30694 00005829 07                      	POP	ES
 30695 0000582A 893E[2803]              	MOV	[EXTERRPT],DI
 30696                                  	;mov	ax,0Fh
 30697 0000582E B80F00                  	MOV	AX,error_I24_wrong_disk
 30698 00005831 C606[7505]01            	MOV	byte [READOP],1		; Write
 30699                                  	;invoke	HARDERR
 30700 00005836 E831FB                  	call	HARDERR
 30701 00005839 5F                      	POP	DI			; Get back buffer for ignore
 30702 0000583A 1F                      	POP	DS
 30703 0000583B 3C03                    	CMP	AL,3
 30704                                  FAIL_OPJ2:
 30705 0000583D 741C                    	JZ	short FAIL_OP
 30706 0000583F E971FF                  	JMP	FAT_GOT_DPB		; Retry
 30707                                  
 30708                                  CHKBUFFDIRT:
 30709                                  	; 20/05/2019 - Retro DOS v4.0
 30710                                  
 30711                                  	; MSDOS 3.3
 30712                                  	;lds	di,[BUFFHEAD]
 30713                                  
 30714                                  	; MSDOS 6.0
 30715 00005842 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30716 00005848 741E                    	je	short NEWDSK			; no, skip the check
 30717 0000584A E8F700                  	call	GETCURHEAD			; get pointer to first buffer
 30718                                  nbuffer:
 30719                                  	;cmp	al,[di+4]
 30720 0000584D 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30721 00005850 750D                    	jne	short lfnxt			; no, go for next buffer
 30722                                  	;test   byte [di+5],40h
 30723 00005852 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30724 00005856 7407                    	jz	short lfnxt			; no, go for next buffer
 30725                                  	;Context DS
 30726 00005858 16                      	push	ss
 30727 00005859 1F                      	pop	ds
 30728                                  	; 24/09/2023
 30729                                  	; cf=0 (after 'test' instruction)
 30730                                  	;clc
 30731 0000585A C3                      	retn
 30732                                  
 30733                                  FAIL_OP:					; This label & code is here
 30734                                  	;Context DS				;  for reachability
 30735 0000585B 16                      	push	ss
 30736 0000585C 1F                      	pop	ds
 30737 0000585D F9                      	STC
 30738 0000585E C3                      	retn
 30739                                  
 30740                                  lfnxt:
 30741                                  	; 15/08/2018 - Retro DOS v3.0
 30742                                  	; MSDOS 3.3
 30743                                  	;lds	di,[di]
 30744                                  
 30745                                  	; 20/05/2019 - Retro DOS v4.0
 30746 0000585F 8B3D                    	mov	di,[di]
 30747                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30748                                  	
 30749                                  	; MSDOS 3.3
 30750                                  	;cmp	di,-1
 30751                                  	;jne	short nbuffer
 30752                                  	
 30753                                  	; MSDOS 6.0
 30754 00005861 36393E[BA0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30755 00005866 75E5                    	jne	short nbuffer			; no, check this guy also
 30756                                  
 30757                                  ; If no dirty buffers, assume Media changed
 30758                                  NEWDSK:
 30759                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30760                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30761 00005868 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30762                                  						;  recompute
 30763                                  	; MSDOS 3.3
 30764                                  	;call	SETVISIT
 30765                                  	; MSDOS 6.0
 30766 0000586E E8D300                  	call	 GETCURHEAD
 30767                                  nxbuffer:
 30768                                  	; MSDOS 3.3
 30769                                  	;or 	byte [di+5],20h
 30770                                  	; MSDOS 3.3 & MSDOS 6.0
 30771                                  	;cmp	[di+4],al
 30772 00005871 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30773 00005874 7510                    	jne	short lfnxt2
 30774                                  	;test	byte [di+5],40h
 30775 00005876 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30776 0000587A 758C                    	jnz	short DISK_CHNG_ERR
 30777                                  	;mov	word [di+4],20FFh
 30778 0000587C C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30779 00005881 E8D200                  	call	SCANPLACE
 30780                                  	; MSDOS 6.0
 30781 00005884 EB02                    	jmp	short skpbuff
 30782                                  lfnxt2:
 30783 00005886 8B3D                    	mov	di,[di]
 30784                                  	;mov	di,[di+BUFFINFO.buf_next]
 30785                                  skpbuff:
 30786                                  	; MSDOS 6.0
 30787 00005888 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30788 0000588D 75E2                    	jne	short nxbuffer
 30789                                  
 30790 0000588F 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30791 00005895 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30792 00005897 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30793 0000589C 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30794 0000589E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30795                                  ;lfnxt2:
 30796                                  	; MSDOS 3.3
 30797                                  	;call	SKIPVISIT
 30798                                  	;jnz	short nxbuffer
 30799                                  GOGETBPB:
 30800                                  	; MSDOS 3.3 & MSDOS 6.0
 30801                                  	;;lds	di,[es:bp+12h]
 30802                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30803 000058A4 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30804                                  	; 20/05/2019
 30805                                  	;test	word [di+4],2000h
 30806                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30807 000058A8 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30808 000058AC 7510                    	JNZ	short GETFREEBUF
 30809                                  	;context DS	    		;hkn; SS is DOSDATA
 30810 000058AE 16                      	push	ss
 30811 000058AF 1F                      	pop	ds
 30812 000058B0 BB0200                  	MOV	BX,2
 30813 000058B3 E8EEFC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30814                                  FAIL_OPJ:
 30815 000058B6 72A3                    	JC	short FAIL_OP
 30816 000058B8 C53E[E205]              	LDS	DI,[CURBUF]
 30817 000058BC EB13                    	JMP	SHORT GOTGETBUF
 30818                                  
 30819                                  GETFREEBUF:
 30820 000058BE 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30821 000058BF 55                      	PUSH	BP
 30822                                  	; MSDOS 3.3
 30823                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30824                                  	; MSDOS 6.0
 30825 000058C0 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30826                                  ;hkn; SS override
 30827 000058C2 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30828 000058C7 E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30829                                  	; MSDOS 3.3 & MSDOS 6.0
 30830 000058CA E85502                  	call	BUFWRITE
 30831 000058CD 5D                      	POP	BP
 30832 000058CE 07                      	POP	ES
 30833                                  	;JC	short FAIL_OPJ
 30834 000058CF 728A                    	jc	short FAIL_OP
 30835                                  GOTGETBUF:
 30836                                  	;;add	di,16
 30837                                  	;add	di,20 ; MSDOS 6.0
 30838 000058D1 83C714                  	ADD	DI,BUFINSIZ
 30839                                  
 30840                                  ;hkn; SS override
 30841 000058D4 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30842                                  	;Context DS			;hkn; SS is DOSDATA
 30843 000058D9 16                      	push	ss
 30844 000058DA 1F                      	pop	ds
 30845 000058DB 893E[6803]              	MOV	[CALLXAD],DI
 30846                                  	;mov	al,16h
 30847 000058DF B016                    	MOV	AL,DBPBHL
 30848                                  	;mov	ah,[es:bp+1]
 30849 000058E1 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30850 000058E5 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30851 000058E8 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30852 000058ED C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30853                                  	;;mov	al,[es:bp+16h]
 30854                                  	;mov	al,[es:bp+17h]
 30855 000058F3 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30856 000058F7 A2[6703]                	MOV	[CALLMED],AL
 30857 000058FA 06                      	PUSH	ES
 30858 000058FB 1E                      	PUSH	DS
 30859                                  	;;push	word [es:bp+14h]
 30860                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30861 000058FC 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30862                                  	;;push	word [es:bp+12h]
 30863                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30864 00005900 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30865                                  
 30866                                  ;hkn; DEVCALL is in DOSDATA
 30867 00005904 BB[5A03]                	MOV	BX,DEVCALL
 30868 00005907 5E                      	POP	SI
 30869 00005908 1F                      	POP	DS			; DS:SI Points to device header
 30870 00005909 07                      	POP	ES			; ES:BX Points to call header
 30871                                  	;invoke	DEVIOCALL2
 30872 0000590A E8CAED                  	call	DEVIOCALL2
 30873 0000590D 07                      	POP	ES			; Restore ES:BP
 30874                                  	;Context DS
 30875 0000590E 16                      	push	ss		 	;hkn; SS is DOSDATA
 30876 0000590F 1F                      	pop	ds
 30877 00005910 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30878                                  	; MSDOS 3.3
 30879                                  	;test	di,8000h
 30880                                  	;jnz	short FATERRJ
 30881                                  	; MSDOS 6.0
 30882 00005914 09FF                    	or	di,di
 30883 00005916 7829                    	js	short FATERRJ 		; have error
 30884                                  	;;mov	al,[es:bp+16h]
 30885                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30886 00005918 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30887 0000591C C536[6C03]              	LDS	SI,[CALLBPB]
 30888                                  	;;mov	word [es:bp+1Ch],0
 30889                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30890 00005920 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30891                                  	;invoke	$SETDPB
 30892 00005926 E8EFB6                  	call	_$SETDPB
 30893                                  
 30894                                  ;hkn; SS override
 30895 00005929 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30896                                  	;mov	al,[es:bp+8]
 30897 0000592E 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30898                                  
 30899                                  	; MSDOS 3.3
 30900                                  	;;mov	ah,[es:bp+0Fh]
 30901                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30902                                  	;;mov	[DI-8],ax
 30903                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30904                                  
 30905                                  	; MSDOS 6.0
 30906                                  	;mov	[di-0Ah],al
 30907 00005932 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30908                                  						;>32mb		  ;AN000;
 30909                                  	;mov	ax,[es:bp+0Fh]
 30910 00005935 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30911                                  	;mov	[di-9h],ax			  ;AC000;
 30912 00005939 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30913                                  					;>32mb Correct buffer info ;AC000;
 30914                                  	;Context DS			;hkn; SS is DOSDATA
 30915 0000593C 16                      	push	ss
 30916 0000593D 1F                      	pop	ds
 30917 0000593E 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30918 00005940 C3                      	retn
 30919                                  
 30920                                  FATERRJ: 
 30921 00005941 E94EFE                  	JMP	FATERR
 30922                                  
 30923                                  ;============================================================================
 30924                                  ; STDBUF.ASM
 30925                                  ;============================================================================
 30926                                  ; Retro DOS v2.0 - 12/03/2018
 30927                                  
 30928                                  ;
 30929                                  ; Standard buffer management for MSDOS
 30930                                  ;
 30931                                  
 30932                                  ;.xlist
 30933                                  ;.xcref
 30934                                  ;INCLUDE STDSW.ASM
 30935                                  ;.cref
 30936                                  ;.list
 30937                                  
 30938                                  ;TITLE	STDBUF - MSDOS buffer management
 30939                                  ;NAME	STDBUF
 30940                                  
 30941                                  ;INCLUDE BUF.ASM
 30942                                  
 30943                                  ;============================================================================
 30944                                  ; BUF.ASM
 30945                                  ;============================================================================
 30946                                  ; 31/07/2018 - Retro DOS v3.0
 30947                                  ; Retro DOS v2.0 - 12/03/2018
 30948                                  ;
 30949                                  ; buffer management for MSDOS
 30950                                  ;
 30951                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30952                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30953                                  ;
 30954                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30955                                  ;
 30956                                  ;SETVISIT:
 30957                                  ;	; 31/07/2018 - Retro DOS v3.0
 30958                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30959                                  ;; Inputs:
 30960                                  ;;      None
 30961                                  ;; Function:
 30962                                  ;;      Set up a scan of I/O buffers
 30963                                  ;; Outputs:
 30964                                  ;;      All visit flags = 0
 30965                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30966                                  ;;                    may cause a scan to stop in the middle leaving some
 30967                                  ;;                    visit flags set, and some not set.
 30968                                  ;;      DS:DI Points to [BUFFHEAD]
 30969                                  ;; No other registers altered
 30970                                  ;
 30971                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30972                                  ;	PUSH    AX
 30973                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30974                                  ;	;mov	al,0DFh
 30975                                  ;	mov	al,~buf_visit
 30976                                  ;SETLOOP:
 30977                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30978                                  ;	;and	[DI+5],al
 30979                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30980                                  ;       LDS     DI,[DI]
 30981                                  ;       CMP     DI,-1
 30982                                  ;       JNZ     SHORT SETLOOP
 30983                                  ;       POP     AX ; 09/09/2018
 30984                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30985                                  ;SVISIT_RETN:
 30986                                  ;       RETN
 30987                                  ;
 30988                                  ;SKIPVISIT:
 30989                                  ;	; 31/07/2018 - Retro DOS v3.0
 30990                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30991                                  ;
 30992                                  ;; Inputs:
 30993                                  ;;      DS:DI Points to a buffer
 30994                                  ;; Function:
 30995                                  ;;      Skip visited buffers
 30996                                  ;; Outputs:
 30997                                  ;;      DS:DI Points to next unvisited buffer
 30998                                  ;;      Zero is set if skip to LAST buffer
 30999                                  ;; No other registers altered
 31000                                  ;
 31001                                  ;       CMP     DI,-1
 31002                                  ;       ;retz
 31003                                  ;       JZ	SHORT SVISIT_RETN
 31004                                  ;
 31005                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 31006                                  ;       ;;;retnz
 31007                                  ;       ;;JNZ	SHORT SVISIT_RETN
 31008                                  ;
 31009                                  ;	;test	byte [di+5],20h
 31010                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 31011                                  ;	JNZ	short SKIPLOOP
 31012                                  ;	
 31013                                  ;	push	ax
 31014                                  ;	or	al,1
 31015                                  ;	pop	ax
 31016                                  ;	retn	
 31017                                  ;
 31018                                  ;SKIPLOOP:
 31019                                  ;	LDS     DI,[DI]
 31020                                  ;       JMP     SHORT SKIPVISIT
 31021                                  
 31022                                  ;============================================================================
 31023                                  ; BUF.ASM, MSDOS 6.0, 1991
 31024                                  ;============================================================================
 31025                                  ; 31/07/2018 - Retro DOS v3.0
 31026                                  ; 04/05/2019 - Retro DOS v4.0
 31027                                  
 31028                                  ;	TITLE	BUF - MSDOS buffer management
 31029                                  ;	NAME	BUF
 31030                                  
 31031                                  ;**	BUF.ASM - Low level routines for buffer cache management
 31032                                  ;
 31033                                  ;	GETCURHEAD
 31034                                  ;	ScanPlace
 31035                                  ;	PLACEBUF
 31036                                  ;	PLACEHEAD
 31037                                  ;	PointComp
 31038                                  ;	GETBUFFR
 31039                                  ;	GETBUFFRB
 31040                                  ;	FlushBuf
 31041                                  ;	BufWrite
 31042                                  ;	SET_RQ_SC_PARMS
 31043                                  ;
 31044                                  ;	Revision history:
 31045                                  ;
 31046                                  ;		AN000  version 4.00  Jan. 1988
 31047                                  ;		A004   PTM 3765 -- Disk reset failed
 31048                                  ;		M039 DB 10/17/90 - Disk write optimization
 31049                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 31050                                  
 31051                                  ;Break	<GETCURHEAD -- Get current buffer header>
 31052                                  ;----------------------------------------------------------------------------
 31053                                  ; Procedure Name : GetCurHead
 31054                                  ; Inputs:
 31055                                  ;	 No Inputs
 31056                                  ; Function:
 31057                                  ;	Returns the pointer to the first buffer in Queue
 31058                                  ;	and updates FIRST_BUFF_ADDR
 31059                                  ;       and invalidates LASTBUFFER (recency pointer)
 31060                                  ; Outputs:
 31061                                  ;	DS:DI = pointer to the first buffer in Queue
 31062                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 31063                                  ;       LASTBUFFER = -1
 31064                                  ; No other registers altered
 31065                                  ;----------------------------------------------------------------------------
 31066                                  
 31067                                  ; 04/05/2019 - Retro DOS v4.0
 31068                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 31069                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31070                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 31071                                  
 31072                                  GETCURHEAD:
 31073 00005944 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 31074 00005949 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 31075 00005950 36893E[BA0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 31076 00005955 C3                      	retn
 31077                                  
 31078                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 31079                                  ;----------------------------------------------------------------------------
 31080                                  ; Procedure Name : ScanPlace
 31081                                  ; Inputs:
 31082                                  ;	Same as PLACEBUF
 31083                                  ; Function:
 31084                                  ;	Save scan location and call PLACEBUF
 31085                                  ; Outputs:
 31086                                  ;	DS:DI Points to saved scan location
 31087                                  ; All registers, except DS:DI, preserved.
 31088                                  ;----------------------------------------------------------------------------
 31089                                  ;M039: Rewritten to preserve registers.
 31090                                  
 31091                                  ;SCANPLACE:
 31092                                  ;	; 31/07/2018 - Retro DOS v3.0
 31093                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31094                                  ;	push	es
 31095                                  ;	les	si,[di]
 31096                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 31097                                  ;	call	PLACEBUF
 31098                                  ;	push	es
 31099                                  ;	pop	ds
 31100                                  ;	mov	di,si
 31101                                  ;	pop	es
 31102                                  ;scanplace_retn:
 31103                                  ;	retn	
 31104                                  	
 31105                                  	; MSDOS 6.0
 31106                                  SCANPLACE:
 31107 00005956 FF35                    	push	word [di]
 31108                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 31109 00005958 E80200                  	call	PLACEBUF
 31110 0000595B 5F                      	pop	di
 31111 0000595C C3                      	retn
 31112                                  
 31113                                  ;----------------------------------------------------------------------------
 31114                                  ; Procedure Name : PlaceBuf
 31115                                  ; Input:
 31116                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 31117                                  ; Function:
 31118                                  ;	Remove buffer from queue and re-insert it in proper place.
 31119                                  ; NO registers altered
 31120                                  ;----------------------------------------------------------------------------
 31121                                  
 31122                                  ;procedure PLACEBUF,NEAR
 31123                                  
 31124                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31125                                  	; 20/05/2019 - Retro DOS v4.0
 31126                                  PLACEBUF:
 31127                                  	; 31/07/2018 - Retro DOS v3.0
 31128                                  
 31129                                  	; MSDOS 6.0
 31130 0000595D 50                      	push	AX			;Save only regs we modify	;AN000;
 31131 0000595E 53                      	push	BX							;AN000;
 31132                                  	; 23/09/2023
 31133                                  	;push	SI							;AN000;
 31134                                  	
 31135 0000595F 8B05                    	mov	ax,[di]
 31136                                  	;mov	ax,[di+BUFFINFO.buf_next]
 31137 00005961 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 31138                                  	
 31139 00005966 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 31140 00005968 7422                    	je	short nret			;Yes, special case	;AN000;
 31141 0000596A 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 31142 0000596C 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 31143 0000596E 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 31144 00005972 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 31145                                  not_first:
 31146                                  	; 23/09/2023
 31147 00005974 56                      	push	si
 31148                                  	;mov	si,[di+2]
 31149 00005975 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 31150 00005978 8904                    	mov	[si],ax
 31151                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 31152 0000597A 96                      	xchg	si,ax
 31153                                  	;mov	[si+2],ax
 31154 0000597B 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 31155                                  	
 31156 0000597E 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 31157 00005981 893C                    	mov	[si],di
 31158                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 31159 00005983 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31160 00005986 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31161 00005989 891D                    	mov	[di],bx
 31162                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31163                                  	; 23/09/2023
 31164 0000598B 5E                      	pop	si
 31165                                  nret:	
 31166                                  	; 23/09/2023							;AN000;
 31167                                  	;pop	SI							;AN000;
 31168 0000598C 5B                      	pop	BX							;AN000;
 31169 0000598D 58                      	pop	AX							;AN000;
 31170                                  									;AN000;
 31171                                  	;cmp	byte [di+4],0FFh
 31172 0000598E 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31173 00005992 7505                            jne	short pbx			; M039: -no, jump.
 31174 00005994 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31175                                  pbx:	
 31176 00005999 C3                      	retn								;AN000;
 31177                                  
 31178                                  	; 31/07/2018 - Retro DOS v3.0
 31179                                  
 31180                                  	; MSDOS 3.3
 31181                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31182                                  
 31183                                  ;PLACEBUF:
 31184                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31185                                  ;	
 31186                                  ;       CALL	save_world
 31187                                  ;       LES     CX,[DI]
 31188                                  ;       CMP     CX,-1           	; Buf is LAST?
 31189                                  ;       JZ      SHORT NRET		; Buffer already last
 31190                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31191                                  ;       PUSH    DS
 31192                                  ;       POP     ES              	; Buf is ES:DI
 31193                                  ;	; 15/03/2018
 31194                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31195                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31196                                  ;       JNZ     SHORT BUFLOOP
 31197                                  ;       MOV     [SS:BUFFHEAD],CX
 31198                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31199                                  ;       JMP     SHORT LOOKEND
 31200                                  ;BUFLOOP:
 31201                                  ;	; 31/07/2018
 31202                                  ;	mov	ax,ds
 31203                                  ;	mov	bx,si
 31204                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31205                                  ;       LDS     SI,[SI]
 31206                                  ;       CALL    POINTCOMP
 31207                                  ;       jnz	short BUFLOOP
 31208                                  ;	;
 31209                                  ;	mov	ds,ax
 31210                                  ;	mov	si,bx
 31211                                  ;	mov	[SI],cx
 31212                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31213                                  ;	mov	[SI+2],bp
 31214                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31215                                  ;LOOKEND:
 31216                                  ;	mov	ax,ds
 31217                                  ;	mov	bx,si
 31218                                  ;       LDS     SI,[SI]
 31219                                  ;       CMP     SI,-1
 31220                                  ;       jnz     short LOOKEND
 31221                                  ;GOTHEEND:
 31222                                  ;       mov	ds,ax
 31223                                  ;	mov	[BX],di
 31224                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31225                                  ;       MOV     WORD [ES:DI],-1
 31226                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31227                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31228                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31229                                  ;NRET:
 31230                                  ;       CALL	restore_world
 31231                                  ;	
 31232                                  ;	;cmp	byte [di+4],-1
 31233                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31234                                  ;	jnz     short scanplace_retn
 31235                                  ;	call    PLACEHEAD
 31236                                  ;	retn
 31237                                  
 31238                                  ;EndProc PLACEBUF
 31239                                  
 31240                                  ;M039 - Removed PLACEHEAD.
 31241                                  ;----------------------------------------------------------------------------
 31242                                  ; places buffer at head
 31243                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31244                                  ;	ONE IN THE LIST!!!!!!!
 31245                                  ; BUGBUG ---- this routine can be removed because it has only
 31246                                  ; BUGBUG ---- one instruction. This routine is called from
 31247                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31248                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31249                                  ; BUGBUG ---- But kept as it is for modularity
 31250                                  ;----------------------------------------------------------------------------
 31251                                  ;procedure   PLACEHEAD,NEAR
 31252                                  ;	mov	word ptr [BufferQueue], di
 31253                                  ;	ret
 31254                                  ;EndProc PLACEHEAD
 31255                                  ;M039
 31256                                  
 31257                                  ;----------------------------------------------------------------------------
 31258                                  ; Procedure Name : PLACEHEAD
 31259                                  ;
 31260                                  ; SAME AS PLACEBUF except places buffer at head
 31261                                  ;----------------------------------------------------------------------------
 31262                                  
 31263                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31264                                  	; 05/09/2018
 31265                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31266                                  ;PLACEHEAD:
 31267                                  ;	; 31/07/2018 - Retro DOS v3.0
 31268                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31269                                  ;
 31270                                  ;       CALL	save_world
 31271                                  ;       PUSH	DS
 31272                                  ;       POP	ES
 31273                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31274                                  ;       LDS     SI,[SS:BUFFHEAD]
 31275                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31276                                  ;	CALL    POINTCOMP
 31277                                  ;       JZ      SHORT GOTHEEND2
 31278                                  ;	MOV	[ES:DI],SI
 31279                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31280                                  ;       MOV	[ES:DI+2],DS
 31281                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31282                                  ;       MOV	[SS:BUFFHEAD],DI
 31283                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31284                                  ;LOOKEND2:
 31285                                  ;       mov	ax,ds
 31286                                  ;	mov	bx,si
 31287                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31288                                  ;       LDS     SI,[SI]
 31289                                  ;       CALL    POINTCOMP
 31290                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31291                                  ;       mov	ds,ax
 31292                                  ;	mov	word [bx],-1
 31293                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31294                                  ;	mov	word [bx+2],-1
 31295                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31296                                  ;GOTHEEND2:
 31297                                  ;      	call	restore_world
 31298                                  ;placehead_retn:
 31299                                  ;	retn
 31300                                  
 31301                                  ; 20/05/2019 - Retro DOS v4.0
 31302                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31303                                  
 31304                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31305                                  ;----------------------------------------------------------------------------
 31306                                  ;
 31307                                  ; Procedure Name : PointComp
 31308                                  ; Inputs:
 31309                                  ;         DS:SI & ES:DI
 31310                                  ; Function:
 31311                                  ;          Checks for ((SI==DI) && (ES==DS))
 31312                                  ;	   Assumes that pointers are normalized for the
 31313                                  ;	   same segment
 31314                                  ;
 31315                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31316                                  ; DO NOT USE FOR < or >
 31317                                  ; No Registers altered
 31318                                  ;
 31319                                  ;----------------------------------------------------------------------------
 31320                                  
 31321                                  POINTCOMP:
 31322                                  	; 31/07/2018 - Retro DOS v3.0
 31323                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31324 0000599A 39FE                    	CMP	SI,DI
 31325 0000599C 750A                    	jnz	short _ret_label	; return if nz
 31326                                  	;jnz	short placehead_retn 
 31327 0000599E 51                      	PUSH	CX
 31328 0000599F 52                      	PUSH	DX
 31329 000059A0 8CD9                    	MOV	CX,DS
 31330 000059A2 8CC2                    	MOV	DX,ES
 31331 000059A4 39D1                    	CMP	CX,DX
 31332 000059A6 5A                      	POP	DX
 31333 000059A7 59                      	POP	CX
 31334                                  _ret_label:
 31335 000059A8 C3                      	retn
 31336                                  
 31337                                  ; 01/08/2018 - Retro DOS v3.0
 31338                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31339                                  
 31340                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31341                                  
 31342                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31343                                  ;----------------------------------------------------------------------------
 31344                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31345                                  ;	It gets the specified local sector into one of the I/O buffers
 31346                                  ;	and shuffles the queue
 31347                                  ; 
 31348                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31349                                  ;		       ELSE no pre-read
 31350                                  ;		(DX) = Desired physical sector number	      (LOW)
 31351                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31352                                  ;		(ES:BP) = Pointer to drive parameters
 31353                                  ;		ALLOWED set in case of INT 24
 31354                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31355                                  ;		'C' clear if OK
 31356                                  ;		CURBUF Points to the Buffer for the sector
 31357                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31358                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31359                                  ;----------------------------------------------------------------------------
 31360                                  
 31361                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31362                                  ;----------------------------------------------------------------------------
 31363                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 31364                                  ;	It gets the specified sector into one of the I/O buffers
 31365                                  ;	and shuffles the queue. We need a special entry point so that
 31366                                  ;	we can read the alternate FAT sector if the first read fails, also
 31367                                  ;	so we can mark the buffer as a FAT sector.
 31368                                  ; 
 31369                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31370                                  ;		       ELSE no pre-read
 31371                                  ;		(DX) = Desired physical sector number	     (LOW)
 31372                                  ;		(SI) != 0
 31373                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31374                                  ;		(ES:BP) = Pointer to drive parameters
 31375                                  ;		ALLOWED set in case of INT 24
 31376                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31377                                  ;		'C' clear if OK
 31378                                  ;		CUR ddBUF Points to the Buffer for the sector
 31379                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31380                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31381                                  ;----------------------------------------------------------------------------
 31382                                  
 31383                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 31384                                  GETBUFFRC:
 31385 000059A9 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 31386                                  GETBUFFRA:
 31387 000059AF 30C0                    	xor	al,al
 31388 000059B1 BE0100                  	mov	si,1
 31389 000059B4 EB09                    	jmp	short GETBUFFRB
 31390                                  
 31391                                  	; 22/09/2023
 31392                                  GETBUFFER:
 31393 000059B6 30C0                    	xor	al,al
 31394                                  GETBUFFRD:
 31395                                  	;mov	byte [ALLOWED],18h
 31396 000059B8 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31397                                  
 31398                                  	; 20/05/2019 - Retro DOS v4.0
 31399                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31400                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31401                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31402                                  GETBUFFR:
 31403 000059BD 31F6                    	XOR	SI,SI
 31404                                  
 31405                                  ;	This entry point is called for FAT buffering with SI != 0
 31406                                  
 31407                                  GETBUFFRB:
 31408 000059BF A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31409                                  	; 15/12/2022
 31410 000059C2 268A4600                	mov	al,[ES:BP]
 31411                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31412                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31413 000059C6 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31414                                  	; MSDOS 6.0
 31415                                  ;hkn; SS override
 31416 000059CA 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 31417                                  
 31418                                  ;	See if this is the buffer that was most recently returned.
 31419                                  ;	A big performance win if it is.
 31420                                  
 31421 000059CF 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31422 000059D2 7412                    	je	short getb5			; No
 31423                                  	;cmp	dx,[di+6]
 31424 000059D4 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31425 000059D7 750D                    	JNZ	short getb5			; Wrong sector
 31426                                  	
 31427                                  	; MSDOS 6.0
 31428                                  	;cmp	cx,[di+8]
 31429 000059D9 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 31430 000059DC 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 31431                                  	
 31432                                  	;cmp	al,[di+4]
 31433 000059DE 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31434                                  	;JZ	getb35				; Just asked for same buffer
 31435 000059E1 7503                    	jnz	short getb5
 31436                                  	;jmp	getb35
 31437                                  	; 17/12/2022
 31438                                  	; 28/07/2019
 31439 000059E3 E9C700                  	jmp	getb35x
 31440                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31441                                  	;jmp	getb35
 31442                                  
 31443                                  ;	It's not the buffer most recently returned. See if it's in the
 31444                                  ;	cache.
 31445                                  ;
 31446                                  ;	(cx:dx) = sector #
 31447                                  ;	(al) = drive #
 31448                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31449                                  ;	??? list may be incomplete ???
 31450                                  
 31451                                  getb5:	
 31452                                  	; MSDOS 3.3
 31453                                  	;lds	di,[SS:BUFFHEAD]
 31454                                  	; MSDOS 6.0
 31455 000059E6 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 31456                                  getb10:	
 31457                                  	;cmp	dx,[di+6]
 31458 000059E9 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31459 000059EC 750D                    	jne	short getb12			; wrong sector lo
 31460                                  	
 31461                                  	; MSDOS 6.0
 31462                                  	;cmp	cx,[di+8]
 31463 000059EE 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31464 000059F1 7508                    	jne	short getb12			; wrong sector hi
 31465                                  	
 31466                                  	;cmp	al,[di+4]
 31467 000059F3 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31468                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31469 000059F6 7503                    	jne	short getb12
 31470 000059F8 E98C00                  	jmp	getb25
 31471                                  getb12:	
 31472                                  	; MSDOS 3.3
 31473                                  	;;mov	di,[DI]
 31474                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31475                                  	;
 31476                                  	; 15/08/2018
 31477                                  	;lds	di,[di]
 31478                                  
 31479                                  	;cmp	di,-1 ; 0FFFFh
 31480                                  	;jne	short getb10
 31481                                  	;lds	di,[SS:BUFFHEAD]
 31482                                  
 31483                                  	; MSDOS 6.0
 31484 000059FB 8B3D                    	mov	di,[di]
 31485                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31486 000059FD 363B3E[BA0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31487 00005A02 75E5                    	jne	short getb10			; no, continue looking
 31488                                  
 31489                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31490                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31491                                  ;	new sector into it.
 31492                                  ;
 31493                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31494                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31495                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31496                                  ;	down a chain, but should be hashed.
 31497                                  ;
 31498                                  ;	(DS:DI) = first buffer in the queue
 31499                                  ;	(CX:DX) = sector # we want
 31500                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31501                                  
 31502                                  	; MSDOS 3.3 & MSDOS 6.0
 31503                                  ;hkn; SS override
 31504 00005A04 51                      	PUSH	CX  ; MSDOS 6.0
 31505 00005A05 56                      	push	si
 31506 00005A06 52                      	push	dx
 31507 00005A07 55                      	push	bp
 31508 00005A08 06                      	push	es
 31509 00005A09 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 31510 00005A0C 07                      	pop	es
 31511 00005A0D 5D                      	pop	bp
 31512 00005A0E 5A                      	pop	dx
 31513 00005A0F 5E                      	pop	si
 31514 00005A10 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31515                                  	;jc	short getbx			; if got hard error
 31516 00005A15 7303                    	jnc	short getb13
 31517 00005A17 E99D00                  	jmp	getbx
 31518                                  
 31519                                  getb13:
 31520                                  	; MSDOS 6.0
 31521 00005A1A E88F01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31522                                  
 31523                                  ;	We're ready to read in the buffer, if need be. If the caller
 31524                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31525                                  
 31526 00005A1D 30E4                    	XOR	AH,AH				; initial flags
 31527                                  ;hkn; SS override
 31528                                  	;test	byte [ss:PREREAD],0FFh
 31529                                  	;jnz	short getb20
 31530 00005A1F 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31531 00005A24 7549                    	JNZ	short getb20			; no, we're done
 31532                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31533                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31534 00005A26 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31535                                  	;MOV	CX,1
 31536                                  	; 22/09/2023
 31537 00005A29 29C9                    	sub	cx,cx ; 0
 31538 00005A2B 56                      	push	si
 31539 00005A2C 57                      	push	di
 31540 00005A2D 52                      	push	dx
 31541                                  	; MSDOS 6.0
 31542 00005A2E 06                      	push	es ; ***
 31543                                  
 31544                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31545                                  ;	this point. -mrw 10/88
 31546                                  	
 31547                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31548                                  	; 22/09/2023
 31549 00005A2F 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 31550 00005A34 7407                    	jz	short getb14
 31551 00005A36 1E                      	push	ds ; **
 31552 00005A37 53                      	push	bx ; *
 31553 00005A38 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31554                                  getb14:
 31555                                  ;M039: Eliminated redundant HMA code.
 31556                                  
 31557                                  	; 22/09/2023
 31558 00005A3D 41                      	inc	cx ; cx = 1
 31559                                  
 31560                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31561 00005A3E 09F6                    	OR	SI,SI			; FAT sector ?
 31562 00005A40 7407                    	JZ	short getb15		
 31563                                  
 31564 00005A42 E803DD                  	call	FATSECRD
 31565                                  	;mov	ah,2
 31566 00005A45 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31567                                  
 31568 00005A47 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31569                                  
 31570                                  getb15:
 31571 00005A49 E828DD                  	call	DREAD			; Buffer is marked free if read barfs
 31572 00005A4C B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31573                                  getb17:
 31574                                  	; 17/12/2022	
 31575                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31576                                  ;%if 0
 31577                                  	; MSDOS 6.0							  ;I001
 31578 00005A4E 9C                      	pushf								  ;I001
 31579 00005A4F 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31580 00005A55 7411                    	jz	short not_in_hma	; no				  ;I001
 31581                                  	;mov	cx,[es:bp+2]
 31582 00005A57 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31583 00005A5B D1E9                    	shr	cx,1							  ;I001
 31584 00005A5D 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31585 00005A5E 89DE                    	mov	si,bx							  ;I001
 31586 00005A60 5F                      	pop	di ; *							  ;I001
 31587 00005A61 07                      	pop	es ; **							  ;I001
 31588 00005A62 FC                      	cld								  ;I001
 31589 00005A63 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31590 00005A64 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31591 00005A66 06                      	push	es							  ;I001
 31592 00005A67 1F                      	pop	ds							  ;I001
 31593                                  ;%endif
 31594                                  
 31595                                  ; 17/12/2022
 31596                                  %if 0
 31597                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31598                                  	; MSDOS 5.0
 31599                                  	pushf
 31600                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31601                                  	jz	short not_in_hma	; no
 31602                                  	popf
 31603                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31604                                  	shr	cx,1
 31605                                  	mov	si,bx
 31606                                  	pop	di ; *
 31607                                  	pop	es ; **
 31608                                  	cld
 31609                                  	rep	movsw
 31610                                  	push	es
 31611                                  	pop	ds
 31612                                  	jmp	short getb19 ; 27/11/2022
 31613                                  %endif
 31614                                  
 31615                                  not_in_hma:								  ;I001
 31616 00005A68 9D                      	popf							 	  ;I001
 31617                                  getb19:
 31618 00005A69 07                      	pop	es ; ***
 31619 00005A6A 5A                      	pop	dx
 31620 00005A6B 5F                      	pop	di
 31621 00005A6C 5E                      	pop	si
 31622 00005A6D 7248                    	JC	short getbx
 31623                                  
 31624                                  ;	The buffer has the data setup in it (if we were to read)
 31625                                  ;	Setup the various buffer fields
 31626                                  ;
 31627                                  ;	(ds:di) = buffer address
 31628                                  ;	(es:bp) = DPB address
 31629                                  ;	(HIGH_SECTOR:DX) = sector #
 31630                                  ;	(ah) = BUF_FLAGS value
 31631                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31632                                  
 31633                                  ;hkn; SS override
 31634                                  getb20:	; MSDOS 6.0
 31635 00005A6F 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31636                                  	;mov	[di+8],cx
 31637 00005A74 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31638                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31639                                   	;mov	[di+6],dx
 31640 00005A77 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31641                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31642                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31643 00005A7A 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31644                                  	;;mov	[di+0Ch],es
 31645                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31646 00005A7D 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31647                                  	; 15/12/2022
 31648 00005A80 268A4600                	mov	al,[es:bp]
 31649                                  	;mov	al,[es:bp+0]
 31650                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31651                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31652                                  	;mov	[di+4],ax
 31653 00005A84 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31654                                  getb25:	
 31655                                  	; MSDOS 3.3
 31656                                  	;mov     ax,1
 31657                                  
 31658                                  	; MSDOS 6.0
 31659                                  	;mov	byte [di+0Ah],1
 31660 00005A87 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31661 00005A8B 31C0                    	XOR	AX,AX
 31662                                  
 31663                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31664 00005A8D 09F6                    	OR	SI,SI				; FAT sector ?
 31665 00005A8F 740B                    	JZ	short getb30
 31666                                  
 31667                                  	;mov	al,[es:bp+8]
 31668 00005A91 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31669                                  	
 31670                                  	; MSDOS 6.0
 31671 00005A95 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31672                                  	;mov	ax,[es:bp+0Fh]
 31673 00005A98 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31674                                  						;  sectors
 31675                                  	; MSDOS 3.3
 31676                                  	;;mov	ah,[es:bp+0Fh]
 31677                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31678                                  
 31679                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31680                                  ;		is set
 31681                                  
 31682                                  getb30:	
 31683                                  	; MSDOS 6.0
 31684                                  	;mov	[di+0Bh],ax
 31685 00005A9C 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31686                                  
 31687                                  	; MSDOS 3.3
 31688                                  	;;mov	[di+8],ax ; 15/08/2018	
 31689                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31690                                  
 31691 00005A9F E8BBFE                  	CALL	PLACEBUF
 31692                                  
 31693                                  ;hkn; SS override for next 4
 31694                                  getb35: 
 31695                                  	; 17/12/2022
 31696                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31697                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31698                                  	;MOV	[SS:CURBUF+2],DS
 31699                                  	;MOV	[SS:LastBuffer+2],DS
 31700                                  	;MOV	[SS:CURBUF],DI
 31701                                  	;MOV	[SS:LastBuffer],DI
 31702                                  	;CLC
 31703                                  
 31704                                  	; 17/12/2022
 31705                                  	; 07/12/2022
 31706                                  	; Retro DOS v4.0
 31707 00005AA2 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31708 00005AA7 36893E[1E00]            	mov	[ss:LastBuffer],di
 31709 00005AAC F8                      	clc
 31710                                  getb35x: ; 28/07/2019
 31711 00005AAD 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31712 00005AB2 36893E[E205]            	MOV	[ss:CURBUF],di
 31713                                  
 31714                                  ;	Return with 'C' set appropriately
 31715                                  ;	(dx) = caller's original value
 31716                                  
 31717                                  getbx:	
 31718 00005AB7 16                      	push	ss
 31719 00005AB8 1F                      	pop	ds
 31720                                  	;retn
 31721                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31722                                  getbuffrb_retn:
 31723                                  ;flushbuf_retn:	; 17/12/2022
 31724 00005AB9 C3                      	retn
 31725                                  
 31726                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31727                                  ;----------------------------------------------------------------------------
 31728                                  ; Input:
 31729                                  ;	DS = DOSGROUP
 31730                                  ;	AL = Physical unit number local buffers only
 31731                                  ;	   = -1 for all units and all remote buffers
 31732                                  ; Function:
 31733                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31734                                  ;	Carry set if error (user FAILed to I 24)
 31735                                  ;	    Flush operation completed.
 31736                                  ; DS Preserved, all others destroyed (ES too)
 31737                                  ;----------------------------------------------------------------------------
 31738                                  
 31739                                  	; 20/05/2019 - Retro DOS v4.0
 31740                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31741                                  
 31742                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31743                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31744                                  FLUSHBUF:
 31745                                  	; MSDOS 3.3
 31746                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31747                                  	;lds	di,[BUFFHEAD]
 31748                                  
 31749                                  	; MSDOS 6.0
 31750 00005ABA E887FE                  	call	GETCURHEAD
 31751                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31752 00005ABD 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31753 00005AC3 7508                    	jnz	short scan_buf_queue
 31754 00005AC5 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31755 00005ACB 7423                    	je	short end_scan
 31756                                  	
 31757                                  scan_buf_queue:
 31758 00005ACD E82900                  	call	CHECKFLUSH
 31759                                  	;push	ax  ; MSDOS 3.3
 31760                                  	; MSDOS 6.0
 31761                                  	;mov	ah,[di+4]
 31762 00005AD0 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31763 00005AD3 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31764 00005AD8 7408                    	je	short free_the_buf
 31765                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31766 00005ADA 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31767 00005AE0 7405                    	jz	short dont_free_the_buf
 31768                                  	; MSDOS 3.3
 31769                                  	;;mov	al,[di+4]
 31770                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31771                                  	;cmp	[SS:WPERR],al					;hkn;
 31772                                  	; 15/08/2018
 31773                                  	;jne	short dont_free_the_buf	
 31774                                  free_the_buf:
 31775                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31776 00005AE2 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31777                                  dont_free_the_buf:
 31778                                  	;pop	ax  ; MSDOS 3.3 	   	
 31779                                  
 31780                                  	; MSDOS 3.3
 31781                                  	;mov	di,[DI]
 31782                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31783                                  	;
 31784                                  	; 15/08/2018
 31785                                  	;lds	di,[di]
 31786                                  	;
 31787                                  	;cmp	di,-1 ; 0FFFFh
 31788                                  	;jnz	short scan_buf_queue 
 31789                                  	
 31790                                  	; MSDOS 6.0
 31791 00005AE7 8B3D                    	mov	di,[di]
 31792                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31793 00005AE9 363B3E[BA0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31794 00005AEE 75DD                    	jne	short scan_buf_queue
 31795                                  
 31796                                  end_scan:
 31797 00005AF0 16                      	push	ss
 31798 00005AF1 1F                      	pop	ds
 31799                                  	; 01/08/2018 - Retro DOS v3.0
 31800                                  	;cmp	byte [FAILERR],0
 31801                                  	;jne	short bad_flush
 31802                                  	;retn
 31803                                  ;bad_flush:
 31804                                  	;stc
 31805                                  	;retn
 31806                                  
 31807                                  	; 17/12/2022
 31808                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31809                                  	; 01/08/2018 - Retro DOS v3.0
 31810 00005AF2 803E[4A03]01            	cmp	byte [FAILERR],1
 31811 00005AF7 F5                      	cmc
 31812                                  flushbuf_retn:
 31813 00005AF8 C3                      	retn
 31814                                  	
 31815                                  	; 17/12/2022
 31816                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31817                                  	;cmp	byte [FAILERR],0
 31818                                  	;jne	short bad_flush
 31819                                  	;retn
 31820                                  ;bad_flush:
 31821                                  	;stc
 31822                                  	;retn
 31823                                  
 31824                                  ;----------------------------------------------------------------------------
 31825                                  ;
 31826                                  ; Procedure Name : CHECKFLUSH
 31827                                  ;
 31828                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31829                                  ;	   DS:DI - pointer to buffer
 31830                                  ;
 31831                                  ; Function : Write out a buffer if it is dirty
 31832                                  ;
 31833                                  ; Carry set if problem (currently user FAILed to I 24)
 31834                                  ;
 31835                                  ;----------------------------------------------------------------------------
 31836                                  
 31837                                  CHECKFLUSH:
 31838                                  	; MSDOS 6.0
 31839 00005AF9 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 31840                                  	;cmp	[di+4],ah
 31841 00005AFB 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31842 00005AFE 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31843 00005B00 38C4                    	CMP	AH,AL			; 
 31844 00005B02 7406                    	JZ	short DOBUFFER		; do this buffer
 31845                                  	;cmp	al,[di+4]
 31846 00005B04 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31847 00005B07 F8                      	CLC
 31848 00005B08 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31849                                  DOBUFFER:
 31850                                  	;test	byte [di+5],40h
 31851 00005B0A F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31852 00005B0E 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31853 00005B10 50                      	PUSH	AX
 31854                                  	;push	word [di+4]
 31855 00005B11 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31856 00005B14 E80B00                  	CALL	BUFWRITE
 31857 00005B17 58                      	POP	AX
 31858 00005B18 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31859                                  	;and	ah,0BFh
 31860 00005B1A 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31861                                  	;mov	[di+4],ax
 31862 00005B1D 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31863                                  LEAVE_BUF:
 31864 00005B20 58                      	POP	AX			; Search info
 31865                                  checkflush_retn:
 31866 00005B21 C3                      	retn
 31867                                  
 31868                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31869                                  ;----------------------------------------------------------------------------
 31870                                  ;
 31871                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31872                                  ;
 31873                                  ;	ENTRY	DS:DI Points to the buffer
 31874                                  ;
 31875                                  ;	EXIT	Buffer marked free
 31876                                  ;		Carry set if error (currently user FAILed to I 24)
 31877                                  ;
 31878                                  ;	USES	All buf DS:DI
 31879                                  ;		HIGH_SECTOR
 31880                                  ;----------------------------------------------------------------------------
 31881                                  
 31882                                  	; 20/05/2019 - Retro DOS v4.0
 31883                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31884                                  
 31885                                  
 31886                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31887                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31888                                  
 31889                                  BUFWRITE:
 31890                                  	; 10/09/2018
 31891                                  	; 01/08/2018 - Retro DOS v3.0
 31892                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31893 00005B22 B8FF00                  	MOV	AX,00FFH
 31894                                  	;xchg	ax,[di+4]
 31895 00005B25 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31896 00005B28 3CFF                    	CMP	AL,0FFH
 31897 00005B2A 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31898                                  	;test	ah,40h
 31899 00005B2C F6C440                  	test	AH,buf_dirty
 31900 00005B2F 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31901                                  	; MSDOS 6.0
 31902 00005B31 E89100                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31903                                  
 31904                                  ;hkn; SS override
 31905 00005B34 363A06[2203]            	CMP	AL,[SS:WPERR]
 31906 00005B39 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31907                                  
 31908                                  ;hkn; SS override
 31909                                  	; MSDOS 6.0
 31910 00005B3B 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31911                                  	
 31912                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31913                                  	;les	bp,[di+13] ; MSDOS 6.0
 31914 00005B3F C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31915                                  	;;lea	bx,[di+16]
 31916                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31917 00005B42 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31918                                  	;mov	dx,[di+6]
 31919 00005B45 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31920                                  	
 31921                                  	; MSDOS 6.0
 31922                                  	;mov	cx,[di+8]
 31923 00005B48 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31924                                  
 31925                                  ;hkn; SS override
 31926 00005B4B 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31927 00005B50 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31928                                  	; MSDOS 3.3
 31929                                  	;; mov	cx,[DI+8]
 31930                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31931                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31932 00005B53 30ED                    	XOR	CH,CH
 31933                                  	;;mov	ah,ch ; MSDOS 3.3
 31934                                  
 31935                                  ;hkn; SS override for ALLOWED
 31936                                  	;mov	byte [SS:ALLOWED],18h
 31937 00005B55 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31938                                  	;test	byte [di+5],8
 31939                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31940                                  	;test	ah,8
 31941 00005B5B F6C408                  	test	AH,buf_isDATA
 31942 00005B5E 7406                    	JZ	short NO_IGNORE
 31943                                  	;or	byte [SS:ALLOWED],20h
 31944 00005B60 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31945                                  NO_IGNORE:
 31946                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31947                                  	; MSDOS 6.0
 31948                                  	;mov	ax,[di+11]
 31949 00005B66 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31950                                  
 31951 00005B69 57                      	PUSH	DI		; Save buffer pointer
 31952 00005B6A 31FF                    	XOR	DI,DI		; Indicate failure
 31953                                  
 31954 00005B6C 1E                      	push	ds ; *
 31955 00005B6D 53                      	push	bx ; **
 31956                                  WRTAGAIN:
 31957 00005B6E 57                      	push	di ; ***
 31958 00005B6F 51                      	push	cx ; ****
 31959 00005B70 50                      	push	ax ; *****
 31960                                  	;MOV	CX,1
 31961                                  	; 17/12/2022
 31962                                  	; ch = 0
 31963 00005B71 B101                    	mov	cl,1 ; 24/07/2019
 31964                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31965                                  	;mov	cx,1
 31966 00005B73 53                      	push	bx ; ******
 31967 00005B74 52                      	push	dx ; *******
 31968 00005B75 1E                      	push	ds ; ********
 31969                                  
 31970                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31971                                  
 31972                                  	; MSDOS 6.0
 31973                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31974                                  	; 22/09/2023
 31975 00005B76 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 31976 00005B7B 7418                    	jz	short NBUFFINHMA
 31977 00005B7D 51                      	push	cx
 31978 00005B7E 06                      	push	es
 31979 00005B7F 89DE                    	mov	si,bx
 31980 00005B81 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31981 00005B85 D1E9                    	shr	cx,1
 31982 00005B87 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31983 00005B8C 89FB                    	mov	bx,di
 31984 00005B8E FC                      	cld
 31985 00005B8F F3A5                    	rep	movsw
 31986 00005B91 06                      	push	es
 31987 00005B92 1F                      	pop	ds
 31988 00005B93 07                      	pop	es
 31989 00005B94 59                      	pop	cx
 31990                                  NBUFFINHMA:
 31991 00005B95 E83CDC                  	call	DWRITE		; Write out the dirty buffer
 31992 00005B98 1F                      	pop	ds ; ********
 31993 00005B99 5A                      	pop	dx ; *******
 31994 00005B9A 5B                      	pop	bx ; ******
 31995 00005B9B 58                      	pop	ax ; *****
 31996 00005B9C 59                      	pop	cx ; ****
 31997 00005B9D 5F                      	pop	di ; ***
 31998 00005B9E 7201                    	JC	short NOSET
 31999 00005BA0 47                      	INC	DI		; If at least ONE write succeedes, the operation
 32000                                  NOSET:				;	succeedes.
 32001 00005BA1 01C2                    	ADD	DX,AX
 32002 00005BA3 E2C9                    	LOOP	WRTAGAIN
 32003 00005BA5 5B                      	pop	bx ; **
 32004 00005BA6 1F                      	pop	ds ; *
 32005                                  	;OR	DI,DI		; Clears carry
 32006                                  	;JNZ	short BWROK	; At least one write worked
 32007                                  	;STC			; DI never got INCed, all writes failed.
 32008                                  	; 22/09/2023
 32009 00005BA7 83FF01                  	cmp	di,1
 32010                                  BWROK:	
 32011 00005BAA 5F                      	POP	DI
 32012 00005BAB C3                      	retn
 32013                                  
 32014                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 32015                                  ;----------------------------------------------------------------------------
 32016                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 32017                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 32018                                  ;	SC_DRIVE even if SC is disabled to save the testing
 32019                                  ;	code and time
 32020                                  ;
 32021                                  ;	ENTRY	ES:BP = drive parameter block
 32022                                  ;
 32023                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 32024                                  ;		[SC_DRIVE]= drive #
 32025                                  ;
 32026                                  ;	USES	Flags
 32027                                  ;----------------------------------------------------------------------------
 32028                                  
 32029                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32030                                  ; 04/05/2019 - Retro DOS v4.0
 32031                                  
 32032                                  SET_RQ_SC_PARMS:
 32033                                  ;hkn; SS override for all variables used in this procedure.
 32034 00005BAC 50                      	push	ax
 32035                                  	;mov	ax,[es:bp+2]
 32036 00005BAD 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 32037 00005BB1 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 32038                                  	;;mov	al,[es:bp+0]
 32039                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32040                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 32041                                  	; 15/12/2022
 32042 00005BB5 268A4600                	mov	al,[ES:BP]
 32043 00005BB9 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 32044 00005BBD 58                      	pop	ax
 32045                                  srspx:	
 32046 00005BBE C3                      	retn					;LB. return
 32047                                  
 32048                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 32049                                  ;----------------------------------------------------------------------------
 32050                                  ; Input:
 32051                                  ;	none
 32052                                  ; Function:
 32053                                  ;	increment dirty buffers count
 32054                                  ; Output:
 32055                                  ;	dirty buffers count is incremented
 32056                                  ;
 32057                                  ; All registers preserved
 32058                                  ;----------------------------------------------------------------------------
 32059                                  
 32060                                  INC_DIRTY_COUNT:
 32061                                  ;; BUGBUG  ---- remove this routine
 32062                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 32063 00005BBF 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 32064 00005BC4 C3                      	retn
 32065                                  
 32066                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 32067                                  ;----------------------------------------------------------------------------
 32068                                  ; Input:
 32069                                  ;	none
 32070                                  ; Function:
 32071                                  ;	decrement dirty buffers count
 32072                                  ; Output:
 32073                                  ;	dirty buffers count is decremented
 32074                                  ;
 32075                                  ; All registers preserved
 32076                                  ;----------------------------------------------------------------------------
 32077                                  
 32078                                  DEC_DIRTY_COUNT:
 32079 00005BC5 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 32080 00005BCB 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 32081 00005BCD 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 32082                                  					; error condition to underflow here? ;hkn;
 32083                                  ddcx:	
 32084 00005BD2 C3                      	retn
 32085                                  
 32086                                  ;============================================================================
 32087                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 32088                                  ;============================================================================
 32089                                  ; 02/08/2018 - Retro DOS v3.0
 32090                                  ; 29/04/2019 - Retro DOS v4.0
 32091                                  
 32092                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 32093                                  
 32094                                  ; Pseudo EXEC system call for DOS
 32095                                  
 32096                                  ;	TITLE	MSPROC - process maintenance
 32097                                  ;	NAME	MSPROC
 32098                                  
 32099                                  ; =========================================================================
 32100                                  ;**	Process related system calls and low level routines for DOS 2.X.
 32101                                  ;	I/O specs are defined in DISPATCH.
 32102                                  ;
 32103                                  ;	$WAIT
 32104                                  ;	$EXEC
 32105                                  ;	$Keep_process
 32106                                  ;	Stay_resident
 32107                                  ;	$EXIT
 32108                                  ;	$ABORT
 32109                                  ;	abort_inner
 32110                                  ;
 32111                                  ;	Modification history:
 32112                                  ;
 32113                                  ;		Created: ARR 30 March 1983
 32114                                  ;		AN000	version 4.0 jan. 1988
 32115                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 32116                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 32117                                  ;
 32118                                  ;		M000	added support for loading programs into UMBs 7/9/90
 32119                                  ;
 32120                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 32121                                  ;		       dossym.inc. 7/30/90
 32122                                  ;		M005 - Support for EXE programs with out STACK segment and 
 32123                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 32124                                  ;		       stack is provided at the end of the program. Note that
 32125                                  ;		       only SP is changed.
 32126                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 32127                                  ;
 32128                                  ;		M028 - 4b04 implementation
 32129                                  ;
 32130                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 32131                                  ;			in memory block >= 64K, sp = 0. If memory block
 32132                                  ;			obtained is <64K, point sp at the end of the memory
 32133                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 32134                                  ;			added for a stack segment which may be needed if it
 32135                                  ;			is loaded in low memory situations.
 32136                                  ;
 32137                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 32138                                  ;
 32139                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 32140                                  ;			a bad environment if it reached 32767 bytes. Changed
 32141                                  ;			to allow 32768 bytes of environment.
 32142                                  ;
 32143                                  ;		M047 - Release the allocated UMB when we failed to load a 
 32144                                  ;		       COM file high. Also ensure that if the biggest block
 32145                                  ;		       into which we load the com file is less than 64K then
 32146                                  ;		       we provide atleast 256 bytes of stack to the user.
 32147                                  ;
 32148                                  ;		M050 - Made Lie table search CASE insensitive
 32149                                  ;
 32150                                  ;		M060 - Removed special version table from the kernal and
 32151                                  ;                      put it in a device drive which puts the address
 32152                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 32153                                  ;		       as a DWORD.
 32154                                  ;
 32155                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 32156                                  ;		       entry do not try to load low if there is no space in
 32157                                  ;		       UMBs.
 32158                                  ;
 32159                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 32160                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 32161                                  ;		       change return address to LeaveDos if AL=5.
 32162                                  ;
 32163                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 32164                                  ;                      controls building a version of MSDOS.SYS that only
 32165                                  ;                      runs programs from a fixed list (defined in the
 32166                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 32167                                  ;                      for details.  This feature is used to build a
 32168                                  ;                      "special" version of DOS that can be handed out to
 32169                                  ;                      OEM/ISV customers as part of a "service" disk.
 32170                                  ;
 32171                                  ; =========================================================================
 32172                                  
 32173                                  ;SAVEXIT  EQU  10
 32174                                  
 32175                                  ;BREAK	<$WAIT - return previous process error code>
 32176                                  ; =========================================================================
 32177                                  ;	$WAIT - Return previous process error code.
 32178                                  ;
 32179                                  ;	Assembler usage:
 32180                                  ;
 32181                                  ;	    MOV     AH, WaitProcess
 32182                                  ;	    INT     int_command
 32183                                  ;
 32184                                  ;	ENTRY	none
 32185                                  ;	EXIT	(ax) = exit code
 32186                                  ;	USES	all
 32187                                  ; =========================================================================
 32188                                  
 32189                                  	; 20/05/2019 - Retro DOS v4.0
 32190                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32191                                  
 32192                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32193                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32194                                  _$WAIT:
 32195                                  	; 02/08/2018 - Retro DOS v3.0
 32196                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32197                                  
 32198 00005BD3 31C0                    	xor	AX,AX
 32199 00005BD5 368706[3403]            	xchg	AX,[ss:exit_code]
 32200 00005BDA E96CAA                  	jmp	SYS_RET_OK
 32201                                  
 32202                                  ; =========================================================================
 32203                                  ;BREAK <$exec - load/go a program>
 32204                                  ;	EXEC.ASM - EXEC System Call
 32205                                  ;
 32206                                  ;
 32207                                  ; Assembler usage:
 32208                                  ;	    lds     DX, Name
 32209                                  ;	    les     BX, Blk
 32210                                  ;	    mov     AH, Exec
 32211                                  ;	    mov     AL, FUNC
 32212                                  ;	    int     INT_COMMAND
 32213                                  ;
 32214                                  ;	AL  Function
 32215                                  ;	--  --------
 32216                                  ;	 0  Load and execute the program.
 32217                                  ;	 1  Load, create the program header but do not
 32218                                  ;	    begin execution.
 32219                                  ;	 3  Load overlay. No header created.
 32220                                  ;
 32221                                  ;	    AL = 0 -> load/execute program
 32222                                  ;
 32223                                  ;	    +---------------------------+
 32224                                  ;	    | WORD segment address of	|
 32225                                  ;	    | environment.		|
 32226                                  ;	    +---------------------------+
 32227                                  ;	    | DWORD pointer to ASCIZ	|
 32228                                  ;	    | command line at 80h	|
 32229                                  ;	    +---------------------------+
 32230                                  ;	    | DWORD pointer to default	|
 32231                                  ;	    | FCB to be passed at 5Ch	|
 32232                                  ;	    +---------------------------+
 32233                                  ;	    | DWORD pointer to default	|
 32234                                  ;	    | FCB to be passed at 6Ch	|
 32235                                  ;	    +---------------------------+
 32236                                  ;
 32237                                  ;	    AL = 1 -> load program
 32238                                  ;
 32239                                  ;	    +---------------------------+
 32240                                  ;	    | WORD segment address of	|
 32241                                  ;	    | environment.		|
 32242                                  ;	    +---------------------------+
 32243                                  ;	    | DWORD pointer to ASCIZ	|
 32244                                  ;	    | command line at 80h	|
 32245                                  ;	    +---------------------------+
 32246                                  ;	    | DWORD pointer to default	|
 32247                                  ;	    | FCB to be passed at 5Ch	|
 32248                                  ;	    +---------------------------+
 32249                                  ;	    | DWORD pointer to default	|
 32250                                  ;	    | FCB to be passed at 6Ch	|
 32251                                  ;	    +---------------------------+
 32252                                  ;	    | DWORD returned value of	|
 32253                                  ;	    | CS:IP			|
 32254                                  ;	    +---------------------------+
 32255                                  ;	    | DWORD returned value of	|
 32256                                  ;	    | SS:IP			|
 32257                                  ;	    +---------------------------+
 32258                                  ;
 32259                                  ;	    AL = 3 -> load overlay
 32260                                  ;
 32261                                  ;	    +---------------------------+
 32262                                  ;	    | WORD segment address where|
 32263                                  ;	    | file will be loaded.	|
 32264                                  ;	    +---------------------------+
 32265                                  ;	    | WORD relocation factor to |
 32266                                  ;	    | be applied to the image.	|
 32267                                  ;	    +---------------------------+
 32268                                  ;
 32269                                  ; Returns:
 32270                                  ;	    AX = error_invalid_function
 32271                                  ;	       = error_bad_format
 32272                                  ;	       = error_bad_environment
 32273                                  ;	       = error_not_enough_memory
 32274                                  ;	       = error_file_not_found
 32275                                  ; =========================================================================
 32276                                  ;
 32277                                  ;   Revision history:
 32278                                  ;
 32279                                  ;	 A000	version 4.00  Jan. 1988
 32280                                  ;
 32281                                  ; =========================================================================
 32282                                  
 32283                                  Exec_Internal_Buffer		EQU	OPENBUF
 32284                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32285                                  
 32286                                  ; =========================================================================
 32287                                  
 32288                                  ;IF1		; warning message on buffers
 32289                                  ;%out	Please make sure that the following are contiguous and of the
 32290                                  ;%out	following sizes:
 32291                                  ;%out
 32292                                  ;%out	OpenBuf     128
 32293                                  ;%out	RenBuf	    128
 32294                                  ;%out	SearchBuf    53
 32295                                  ;%out	DummyCDS    curdirLen
 32296                                  ;ENDIF
 32297                                  
 32298                                  ; =========================================================================
 32299                                  
 32300                                  ; =========================================================================
 32301                                  ;
 32302                                  ; =========================================================================
 32303                                  
 32304                                  	; 20/05/2019 - Retro DOS v4.0
 32305                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32306                                  
 32307                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32308                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32309                                  	
 32310                                  _$EXEC:
 32311                                  	; 02/08/2018 - Retro DOS v3.0
 32312                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32313                                  
 32314                                  EXEC001S:
 32315                                  	;LocalVar    Exec_Blk		,DWORD
 32316                                  	;LocalVar    Exec_Func		,BYTE
 32317                                  	;LocalVar    Exec_Load_High	,BYTE
 32318                                  	;LocalVar    Exec_FH		,WORD
 32319                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32320                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32321                                  	;LocalVar    Exec_Environ	,WORD
 32322                                  	;LocalVar    Exec_Size		,WORD
 32323                                  	;LocalVar    Exec_Load_Block	,WORD
 32324                                  	;LocalVar    Exec_DMA		,WORD
 32325                                  	;LocalVar    ExecNameLen 	,WORD
 32326                                  	;LocalVar    ExecName		,DWORD
 32327                                  	;
 32328                                  	;LocalVar    Exec_DMA_Save	,WORD
 32329                                  	;LocalVar    Exec_NoStack	,BYTE
 32330                                  
 32331                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32332                                  	;%define	Exec_Blk	dword [bp-4]
 32333                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32334                                  	%define		Exec_BlkL	word [bp-4]	
 32335                                  	%define		Exec_BlkH	word [bp-2]
 32336                                  	%define		Exec_Func	byte [bp-5]
 32337                                  	%define		Exec_Load_High	byte [bp-6]
 32338                                  	%define		Exec_FH		word [bp-8]
 32339                                  	%define		Exec_Rel_Fac	word [bp-10]
 32340                                  	%define		Exec_Res_Len_Para word [bp-12]
 32341                                  	%define		Exec_Environ	word [bp-14]
 32342                                  	%define		Exec_Size	word [bp-16]
 32343                                  	%define		Exec_Load_Block	word [bp-18]
 32344                                  	%define		Exec_DMA	word [bp-20]
 32345                                  	%define		ExecNameLen	word [bp-22]
 32346                                  	;%define	ExecName	dword [bp-26]
 32347                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32348                                  	%define		ExecNameL	word [bp-26]	
 32349                                  	%define		ExecNameH	word [bp-24]
 32350                                  	; MSDOS 6.0
 32351                                  	%define		Exec_DMA_Save	word [bp-28]
 32352                                  	%define		Exec_NoStack	byte [bp-29]
 32353                                  	
 32354                                  	; ==================================================================
 32355                                  	; validate function
 32356                                  	; ==================================================================
 32357                                  		      	
 32358                                  	; M068 - Start
 32359                                  	;
 32360                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32361                                  	; possibility that the count may not be decremented all the way to
 32362                                  	; 0. A typical case is if the program for which we intended to keep 
 32363                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32364                                  	; calls), exits pre-maturely due to error conditions.
 32365                                  
 32366                                  	; MSDOS 6.0
 32367 00005BDD 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32368                                  
 32369                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32370                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32371                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32372                                  
 32373 00005BE3 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32374                                  	;jne	short @f
 32375 00005BE5 7505                    	jne	short Exec_@f		; N: continue
 32376                                  					; Y: change ret addr. to LeaveDos.
 32377 00005BE7 59                      	pop	cx			; Note CX is not input to ExecReady
 32378 00005BE8 B9[1104]                	mov	cx,LeaveDOS
 32379 00005BEB 51                      	push	cx
 32380                                  ;@@:
 32381                                  Exec_@f:
 32382                                  	; M068 - End
 32383                                  	
 32384                                  	;Enter
 32385                                  
 32386 00005BEC 55                      	push	bp
 32387 00005BED 89E5                    	mov	bp,sp
 32388                                  	;;sub	sp,26	; MSDOS 3.3
 32389                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32390                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32391                                  	; 17/12/2022
 32392                                  	; 20/05/2019
 32393 00005BEF 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32394                                  
 32395                                  	; MSDOS 6.0
 32396 00005BF2 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32397                                  					; M030
 32398 00005BF4 7614                    	jna	short Exec_Check_2
 32399                                  
 32400                                  	; MSDOS 3.3
 32401                                  	;cmp	AL,3
 32402                                  	;jna	short Exec_Check_2
 32403                                  
 32404                                  Exec_Bad_Fun:
 32405 00005BF6 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32406                                  					; Extended Error Locus	;smr;SS Override
 32407                                  	;mov	al,1
 32408 00005BFC B001                    	mov	al,error_invalid_function
 32409                                  
 32410                                  Exec_Ret_Err:
 32411                                  	;Leave
 32412 00005BFE 89EC                    	mov	sp,bp
 32413 00005C00 5D                      	pop	bp
 32414                                  	;transfer SYS_RET_ERR
 32415 00005C01 E94EAA                  	jmp	SYS_RET_ERR
 32416                                  
 32417                                  	; MSDOS 6.0
 32418                                  ExecReadyJ:
 32419 00005C04 E8FD17                  	call	ExecReady		; M028
 32420 00005C07 E90504                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32421                                  
 32422                                  Exec_Check_2:
 32423 00005C0A 3C02                    	cmp	AL,2			
 32424 00005C0C 74E8                    	je	short Exec_Bad_Fun
 32425                                  
 32426                                  	; MSDOS 6.0
 32427 00005C0E 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32428 00005C10 74E4                    	je	short Exec_Bad_Fun
 32429                                  	
 32430 00005C12 3C05                    	cmp	al,5			; M028 ; M030
 32431 00005C14 74EE                    	je	short ExecReadyJ	; M028
 32432                                  
 32433                                  	;mov	[bp-4],bx
 32434 00005C16 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32435                                  	;mov	[bp-2],es
 32436 00005C19 8C46FE                  	mov	Exec_BlkH,ES
 32437                                  	;mov	[bp-5],al
 32438 00005C1C 8846FB                  	mov	Exec_Func,AL
 32439                                  	;mov	byte [bp-6],0
 32440 00005C1F C646FA00                	mov	Exec_Load_High,0
 32441                                  
 32442                                  	;mov	[bp-26],dx
 32443 00005C23 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32444                                  	;mov	[bp-24],ds
 32445 00005C26 8C5EE8                  	mov	ExecNameH,DS
 32446 00005C29 89D6                    	mov	SI,DX			; move pointer to convenient place
 32447                                  	;invoke	DStrLen
 32448 00005C2B E812B6                  	call	DStrLen
 32449                                  	;mov	[bp-22],cx
 32450 00005C2E 894EEA                  	mov	ExecNameLen,CX		; save length
 32451                                  
 32452                                  	; MSDOS 6.0
 32453 00005C31 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32454 00005C35 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32455                                  
 32456 00005C39 30C0                    	xor	AL,AL			; open for reading
 32457 00005C3B 55                      	push	BP
 32458                                  
 32459                                  	; MSDOS 6.0
 32460                                  	;or	byte [ss:DOS_FLAG],1
 32461 00005C3C 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32462                                  					; the redir that this open call is
 32463                                  					; due to an exec.
 32464                                  
 32465                                  	;invoke	$OPEN			; is the file there?
 32466 00005C42 E80513                  	call	_$OPEN
 32467                                  
 32468                                  	; MSDOS 6.0
 32469 00005C45 9C                      	pushf
 32470                                  	; 02/06/2019
 32471                                  	;and	byte [ss:DOS_FLAG],0FEh
 32472 00005C46 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32473 00005C4C 9D                      	popf
 32474                                  
 32475 00005C4D 5D                      	pop	BP
 32476                                  
 32477                                  	; MSDOS 3.3 & MSDOS 6.0
 32478 00005C4E 72AE                    	jc	short Exec_Ret_Err
 32479                                  
 32480                                  	;mov	[bp-8],ax
 32481 00005C50 8946F8                  	mov	Exec_FH,AX
 32482 00005C53 89C3                    	mov	BX,AX
 32483 00005C55 30C0                    	xor	AL,AL
 32484                                  	;invoke	$Ioctl
 32485 00005C57 E882C6                  	call	_$IOCTL
 32486 00005C5A 7207                    	jc	short Exec_BombJ
 32487                                  
 32488                                  	;test	dl,80h
 32489 00005C5C F6C280                  	test	DL,devid_ISDEV
 32490 00005C5F 740A                    	jz	short Exec_Check_Environ
 32491                                  
 32492                                  	;mov	al,2
 32493 00005C61 B002                    	mov	AL,error_file_not_found
 32494                                  Exec_BombJ:
 32495 00005C63 E9CA00                  	jmp	Exec_Bomb
 32496                                  
 32497                                  BadEnv:
 32498                                  	;mov	al,0Ah
 32499 00005C66 B00A                    	mov	AL,error_bad_environment
 32500 00005C68 E9C500                  	jmp	Exec_Bomb
 32501                                  
 32502                                  Exec_Check_Environ:
 32503                                  	;mov	word [bp-18],0
 32504 00005C6B C746EE0000              	mov	Exec_Load_Block,0
 32505                                  	;mov	word [bp-14],0
 32506 00005C70 C746F20000              	mov	Exec_Environ,0
 32507                                  					; overlays... no environment
 32508                                  	;test	byte [bp-5],2
 32509 00005C75 F646FB02                	test	Exec_Func,exec_func_overlay
 32510 00005C79 7552                    	jnz	short Exec_Read_Header
 32511                                  
 32512                                  	;lds	si,[bp-4]
 32513 00005C7B C576FC                  	lds	SI,Exec_Blk		; get block
 32514 00005C7E 8B04                    	mov	ax,[SI]
 32515                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32516 00005C80 09C0                    	or	AX,AX
 32517 00005C82 750C                    	jnz	short Exec_Scan_Env
 32518                                  
 32519 00005C84 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32520                                  	;mov	ax,[44]
 32521 00005C89 A12C00                  	mov	AX,[PDB.ENVIRON]
 32522                                  
 32523                                  ; MSDOS 6.0
 32524                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32525                                  ;
 32526                                  ; Exec_environ is being correctly initialized after the environment has been
 32527                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32528                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32529                                  ; parent's environment.
 32530                                  ;	mov	Exec_Environ,AX
 32531                                  ;
 32532                                  ;----------------------------------------------------------------------------
 32533                                  
 32534                                  	;mov	[bp-14],ax
 32535                                  	;mov	Exec_Environ,ax
 32536                                  
 32537 00005C8C 09C0                    	or	AX,AX
 32538 00005C8E 743D                    	jz	short Exec_Read_Header
 32539                                  
 32540                                  Exec_Scan_Env:
 32541 00005C90 8EC0                    	mov	ES,AX
 32542 00005C92 31FF                    	xor	DI,DI
 32543                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32544 00005C94 B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32545 00005C97 30C0                    	xor	AL,AL
 32546                                  
 32547                                  Exec_Get_Environ_Len:
 32548 00005C99 F2AE                    	repnz	scasb			; find that nul byte
 32549 00005C9B 75C9                    	jnz	short BadEnv
 32550                                  
 32551 00005C9D 49                      	dec	CX			; Dec CX for the next nul byte test
 32552 00005C9E 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32553                                  
 32554 00005CA0 AE                      	scasb				; is there another nul byte?
 32555 00005CA1 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32556                                  
 32557 00005CA3 57                      	push	DI
 32558                                  	;lea	bx,[DI+11h]
 32559 00005CA4 8D5D11                  	lea	BX,[DI+0Fh+2]
 32560                                  	;add	bx,[bp-22]
 32561 00005CA7 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32562                                  					; remember argv[0] length
 32563                                  					; round up and remember argc
 32564 00005CAA B104                    	mov	CL,4
 32565 00005CAC D3EB                    	shr	BX,CL			; number of paragraphs needed
 32566 00005CAE 06                      	push	ES
 32567                                  	;invoke	$Alloc			; can we get the space?
 32568 00005CAF E84406                  	call	_$ALLOC
 32569 00005CB2 1F                      	pop	DS
 32570 00005CB3 59                      	pop	CX
 32571                                  
 32572                                  	;jnc	short Exec_Save_Environ
 32573                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32574                                  	; 17/12/2022
 32575 00005CB4 7274                    	jc	short Exec_No_Mem ; 02/06/2019
 32576                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32577                                  	;jnc	short Exec_Save_Environ
 32578                                  	;jmp	SHORT Exec_No_Mem
 32579                                  
 32580                                  Exec_Save_Environ:
 32581 00005CB6 8EC0                    	mov	ES,AX
 32582                                  	;mov	[bp-14],ax
 32583 00005CB8 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32584 00005CBB 31F6                    	xor	SI,SI
 32585 00005CBD 89F7                    	mov	DI,SI
 32586 00005CBF F3A4                    	rep	movsb			; copy the environment
 32587 00005CC1 B80100                  	mov	AX,1
 32588 00005CC4 AB                      	stosw
 32589                                  	;lds	si,[bp-26]
 32590 00005CC5 C576E6                  	lds	SI,ExecName
 32591                                  	;mov	cx,[bp-22]
 32592 00005CC8 8B4EEA                  	mov	CX,ExecNameLen
 32593 00005CCB F3A4                    	rep	movsb
 32594                                  
 32595                                  Exec_Read_Header:
 32596                                  	; We read in the program header into the above data area and
 32597                                  	; determine where in this memory the image will be located.
 32598                                  
 32599                                  	;Context DS
 32600 00005CCD 16                      	push	ss
 32601 00005CCE 1F                      	pop	ds
 32602                                  	;mov	cx,26
 32603 00005CCF B91A00                  	mov	CX,exec_header_len	; header size
 32604 00005CD2 BA[C70F]                	mov	DX,exec_signature
 32605 00005CD5 06                      	push	ES
 32606 00005CD6 1E                      	push	DS
 32607 00005CD7 E88304                  	call	ExecRead
 32608 00005CDA 1F                      	pop	DS
 32609 00005CDB 07                      	pop	ES
 32610 00005CDC 7250                    	jc	short Exec_Bad_File
 32611                                  
 32612 00005CDE 09C0                    	or	AX,AX
 32613 00005CE0 744C                    	jz	short Exec_Bad_File
 32614                                  	;cmp	ax,26
 32615 00005CE2 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32616 00005CE5 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32617                                  
 32618 00005CE7 F706[D30F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32619 00005CED 7504                    	jnz	short Exec_Check_Sig
 32620                                  
 32621                                  	;mov	byte [bp-6],0FFh
 32622 00005CEF C646FAFF                	mov	Exec_Load_High,-1
 32623                                  
 32624                                  Exec_Check_Sig:
 32625 00005CF3 A1[C70F]                	mov	AX,[exec_signature]	; rms;NSS
 32626                                  	;cmp	ax,5A4Dh ; 'MZ'
 32627 00005CF6 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32628 00005CF9 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32629                                  
 32630                                  	;cmp	ax,4D5Ah ; 'ZM'
 32631 00005CFB 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32632 00005CFE 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32633                                  
 32634                                  Exec_Com_Filej:
 32635 00005D00 E9E901                  	jmp	Exec_Com_File
 32636                                  
 32637                                  	; We have the program header... determine memory requirements
 32638                                  
 32639                                  Exec_Save_Start:
 32640 00005D03 A1[CB0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32641 00005D06 B105                    	mov	CL,5			; convert to paragraphs
 32642 00005D08 D3E0                    	shl	AX,CL
 32643 00005D0A 2B06[CF0F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32644                                  	;mov	[bp-12],ax
 32645 00005D0E 8946F4                  	mov	Exec_Res_Len_Para,AX
 32646                                  
 32647                                  		; Do we need to allocate memory?
 32648                                  		; Yes if function is not load-overlay
 32649                                  
 32650                                  	;test	byte [bp-5],2
 32651 00005D11 F646FB02                	test	Exec_Func,exec_func_overlay
 32652 00005D15 7445                    	jz	short Exec_Allocate	; allocation of space
 32653                                  
 32654                                  		; get load address from block
 32655                                  
 32656                                  	;les	di,[bp-4]
 32657 00005D17 C47EFC                  	les	DI,Exec_Blk
 32658 00005D1A 268B05                  	mov	ax,[es:di]
 32659                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32660                                  	;mov	[bp-20],ax
 32661 00005D1D 8946EC                  	mov	Exec_DMA,AX
 32662                                  
 32663                                  	; 17/12/2022
 32664                                  	;;mov	ax,[es:di+2]
 32665                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32666                                  	;;mov	[bp-10],ax
 32667                                  	;mov	Exec_Rel_Fac,AX
 32668                                  
 32669                                  	; 17/12/2022
 32670                                  	; 30/11/2022 (!most proper code!)
 32671                                  	;mov	dx,[es:di+2]
 32672 00005D20 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32673                                  	;mov	[bp-10],dx
 32674 00005D24 8956F6                  	mov	Exec_Rel_Fac,dx
 32675                                  	; ax = Exec_DMA
 32676 00005D27 E9DE00                  	jmp	Exec_Find_Res
 32677                                  
 32678                                  ; 17/12/2022
 32679                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32680                                  ; 27/09/2023
 32681                                  %if 0
 32682                                  	; 02/06/2019 - Retro DOS v4.0
 32683                                  	;mov	ax,[bp-20]  ; *+*
 32684                                  	mov	AX,Exec_DMA ; *+*
 32685                                  	; 10/08/2018
 32686                                  	jmp	Exec_Find_Res		; M000
 32687                                  %endif
 32688                                  
 32689                                  Exec_No_Mem:
 32690                                  	;mov	al,8
 32691 00005D2A B008                    	mov	AL,error_not_enough_memory
 32692 00005D2C EB02                    	jmp	short Exec_Bomb
 32693                                  
 32694                                  Exec_Bad_File:
 32695                                  	;mov	al,0Bh
 32696 00005D2E B00B                    	mov	AL,error_bad_format
 32697                                  
 32698                                  Exec_Bomb:
 32699                                  	;mov	bx,[bp-8]
 32700 00005D30 8B5EF8                  	mov	BX,Exec_FH
 32701 00005D33 E84004                  	call	Exec_Dealloc
 32702                                  	;LeaveCrit CritMem
 32703 00005D36 E838B6                  	call	LCritMEM
 32704                                  	;save	<AX,BP>
 32705 00005D39 50                      	push	ax
 32706 00005D3A 55                      	push	bp
 32707                                  	;invoke	$CLOSE
 32708 00005D3B E83D0A                  	call	_$CLOSE
 32709                                  	;restore <BP,AX>
 32710 00005D3E 5D                      	pop	bp
 32711 00005D3F 58                      	pop	ax
 32712 00005D40 E9BBFE                  	jmp	Exec_Ret_Err
 32713                                  
 32714                                  Exec_Chk_Mem: 
 32715                                  	
 32716                                  	; 24/09/2023
 32717                                  	; ds = DOSDATA
 32718                                  ; 17/12/2022
 32719                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32720                                  ;%if 0
 32721                                  	; MSDOS 6.0    			; M063 - Start
 32722                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32723                                  	; 10/06/2019
 32724 00005D43 A0[0203]                	mov	al,[AllocMethod]
 32725                                  	;mov	bl,[ss:ALLOCMSAVE]
 32726 00005D46 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32727                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32728 00005D4A 881E[0203]              	mov	[AllocMethod],bl
 32729                                  	
 32730 00005D4E F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32731 00005D51 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32732                                  	;				; N: continue
 32733                                  	;
 32734 00005D53 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32735 00005D55 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32736                                  	; 02/06/2019
 32737                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32738 00005D57 A1[8A00]                	mov	ax,[SAVE_AX]
 32739                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32740                                  					; M063 - End
 32741 00005D5A EB2B                    	jmp	short Exec_Norm_Alloc1
 32742                                  ;%endif
 32743                                  
 32744                                  ; 17/12/2022
 32745                                  %if 0
 32746                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32747                                  	; MSDOS 6.0    			; M063 - Start
 32748                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32749                                  	mov	bl,[ss:ALLOCMSAVE]
 32750                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32751                                  
 32752                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32753                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32754                                  	;				; N: continue
 32755                                  	;
 32756                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32757                                  	jz	short Exec_No_Mem	; N: no memory 
 32758                                  
 32759                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32760                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32761                                  					; M063 - End
 32762                                  %endif
 32763                                  
 32764                                  Exec_Allocate:
 32765                                  	; 09/09/2018
 32766                                  
 32767                                  	; M005 - START
 32768                                  	; If there is no STACK segment for this exe file and if this
 32769                                  	; not an overlay and the resident size is less than 64K - 
 32770                                  	; 256 bytes we shall add 256 bytes to the programs 
 32771                                  	; resident memory requirement and set Exec_SP to this value.
 32772                                  	
 32773                                  	; 17/12/2022
 32774 00005D5C 29DB                    	sub	bx,bx ; 0	
 32775                                  
 32776                                  	; MSDOS 6.0
 32777                                  	;;mov	byte [bp-29],0
 32778                                  	;mov	Exec_NoStack,0
 32779                                  	; 17/12/2022
 32780 00005D5E 885EE3                  	mov	Exec_NoStack,bl ; 0
 32781 00005D61 391E[D50F]              	cmp	[exec_SS],bx ; 0
 32782                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32783 00005D65 7511                    	jne	short ea1		; Y: continue normal processing
 32784 00005D67 391E[D70F]              	cmp	[exec_SP],bx ; 0
 32785                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32786 00005D6B 750B                    	jne	short ea1		; Y: continue normal processing
 32787                                  
 32788                                  	;inc	byte [bp-29]
 32789 00005D6D FE46E3                  	inc	Exec_NoStack
 32790 00005D70 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32791 00005D73 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32792                                  
 32793 00005D75 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32794                                  ea1:
 32795                                  	; M005 - END
 32796                                  
 32797                                  	; MSDOS 6.0			; M000 - start
 32798                                  	; 20/05/2019
 32799                                  	; (ds = ss = DOSDATA)
 32800 00005D78 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32801                                  					; Q: is the alloc strat high_first
 32802 00005D7D 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32803                                  					; Y: set high_only bit
 32804 00005D7F 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32805                                  					; M000 - end
 32806                                  Exec_Norm_Alloc:
 32807 00005D84 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32808                                  Exec_Norm_Alloc1:	; 02/06/2019
 32809                                  					; M000: attempt at allocating memory
 32810                                  	; MSDOS 3.3
 32811                                  	;push	ax			; M000
 32812                                  
 32813 00005D87 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32814 00005D8A 1E                      	push	DS
 32815                                  	;invoke	$Alloc			; should have carry set and BX has max
 32816 00005D8B E86805                  	call	_$ALLOC
 32817 00005D8E 1F                      	pop	DS
 32818                                  
 32819                                  	; MSDOS 6.0
 32820 00005D8F A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32821                                  	; MSDOS 3.3
 32822                                  	;pop	ax			; M000
 32823                                  
 32824 00005D92 83C010                  	add	AX,10h			; room for header
 32825 00005D95 83FB11                  	cmp	BX,11h			; enough room for a header
 32826                                  	; MSDOS 6.0
 32827 00005D98 72A9                    	jb	short Exec_Chk_Mem	; M000
 32828                                  	; MSDOS 3.3	
 32829                                  	;jb	short Exec_No_Mem
 32830                                  
 32831 00005D9A 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32832                                  	; MSDOS 6.0
 32833 00005D9C 77A5                    	ja	short Exec_Chk_Mem	; M000
 32834                                  	; MSDOS 3.3
 32835                                  	;ja	short Exec_No_Mem
 32836                                  
 32837                                  	;test	byte [bp-6],0FFh
 32838 00005D9E F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32839 00005DA2 7518                    	jnz	short Exec_BX_Max	; use max
 32840                                  
 32841                                  	; 09/09/2018
 32842                                  
 32843 00005DA4 0306[D10F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32844                                  	; MSDOS 6.0
 32845 00005DA8 7299                    	jc	short Exec_Chk_Mem		; M000
 32846                                  	; MSDOS 3.3
 32847                                  	;jc	short Exec_No_Mem
 32848                                  
 32849 00005DAA 39D8                    	cmp	AX,BX			; enough space?
 32850                                  	; MSDOS 6.0
 32851 00005DAC 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32852                                  	; MSDOS 3.3
 32853                                  	;ja	short Exec_No_Mem
 32854                                  
 32855 00005DAE 2B06[D10F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32856 00005DB2 0306[D30F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32857 00005DB6 7204                    	jc	short Exec_BX_Max
 32858                                  
 32859 00005DB8 39D8                    	cmp	AX,BX
 32860 00005DBA 7602                    	jbe	short Exec_Got_Block
 32861                                  
 32862                                  Exec_BX_Max:
 32863 00005DBC 89D8                    	mov	AX,BX
 32864                                  
 32865                                  Exec_Got_Block:
 32866                                  	; 03/08/2018 - Retro DOS v3.0
 32867                                  
 32868 00005DBE 1E                      	push	DS
 32869 00005DBF 89C3                    	mov	BX,AX
 32870                                  	;mov	[bp-16],bx
 32871 00005DC1 895EF0                  	mov	Exec_Size,BX
 32872                                  	;invoke	$Alloc			; get the space
 32873 00005DC4 E82F05                  	call	_$ALLOC
 32874 00005DC7 1F                      	pop	DS
 32875                                  	; MSDOS 6.0
 32876                                  	;jc	short Exec_Chk_Mem	; M000
 32877                                  	; MSDOS 3.3
 32878                                  	;;jc	short Exec_No_Mem
 32879                                  	; 20/05/2019
 32880 00005DC8 7303                    	jnc	short ea0
 32881 00005DCA E976FF                  	jmp	Exec_Chk_Mem
 32882                                  ea0:
 32883                                  	; MSDOS 6.0
 32884 00005DCD 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32885 00005DD1 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32886                                  
 32887                                  ;M029; Begin changes
 32888                                  ; This code does special handling for programs with no stack segment. If so,
 32889                                  ;check if the current block is larger than 64K. If so, we do not modify
 32890                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32891                                  ;case Exec_SS is not changed.
 32892                                  
 32893                                  	; MSDOS 6.0
 32894                                  	;cmp	byte [bp-29],0
 32895 00005DD5 807EE300                	cmp	Exec_NoStack,0
 32896                                  	;je	@f
 32897 00005DD9 7412                    	je	short ea2
 32898                                  
 32899 00005DDB 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32900                                  	;jae	@f			; Y: Exec_SP = 0
 32901 00005DDF 730C                    	jae	short ea2
 32902                                  
 32903                                  ;Make Exec_SP point at the top of the memory block
 32904                                  
 32905 00005DE1 B104                    	mov	cl,4
 32906 00005DE3 D3E3                    	shl	bx,cl			; get byte offset
 32907 00005DE5 81EB0001                	sub	bx,100h			; take care of PSP
 32908 00005DE9 891E[D70F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32909                                  ea2:
 32910                                  ;@@:
 32911                                  ;M029; end changes
 32912                                  
 32913                                  	;mov	[bp-18],ax
 32914 00005DED 8946EE                  	mov	Exec_Load_Block,AX
 32915 00005DF0 83C010                  	add	AX,10h
 32916                                  	;test	byte [bp-6],0FFh
 32917 00005DF3 F646FAFF                	test	Exec_Load_High,-1
 32918 00005DF7 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32919                                  
 32920                                  	;add	ax,[bp-16]
 32921 00005DF9 0346F0                  	add	AX,Exec_Size		; go to end
 32922                                  	;sub	ax,[bp-12]
 32923 00005DFC 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32924 00005DFF 83E810                  	sub	AX,10h			; drop off pdb
 32925                                  
 32926                                  Exec_Use_AX:
 32927                                  	;mov	[bp-10],ax
 32928 00005E02 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32929                                  	;mov	[bp-20],ax
 32930 00005E05 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32931                                  
 32932                                  	; Determine the location in the file of the beginning of
 32933                                  	; the resident
 32934                                  
 32935                                  ; 17/12/2022
 32936                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32937                                  ;%if 0
 32938                                  
 32939                                  Exec_Find_Res:
 32940                                  	; MSDOS 6.0
 32941                                  	;;mov	dx,[bp-20]
 32942                                  	;mov	DX,Exec_DMA ; *+*
 32943                                  	;;mov	[bp-28],dx
 32944                                  	;mov	Exec_DMA_Save,DX
 32945                                  
 32946                                  	; 17/12/2022
 32947                                  	; AX = Exec_DMA
 32948                                  
 32949                                  	; 02/06/2019 - Retro DOS v4.0
 32950                                  	;mov	[bp-28],ax ; *+*
 32951 00005E08 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32952                                  
 32953                                  ;%endif
 32954                                  
 32955                                  ; 17/12/2022
 32956                                  %if 0
 32957                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32958                                  Exec_Find_Res:
 32959                                  	;mov	dx,[bp-20]
 32960                                  	mov	DX,Exec_DMA ; *+*
 32961                                  	;mov	[bp-28],dx
 32962                                  	mov	Exec_DMA_Save,DX
 32963                                  %endif
 32964                                  
 32965                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32966 00005E0B 8B16[CF0F]              	mov	DX,[exec_par_dir]
 32967 00005E0F 52                      	push	DX
 32968 00005E10 B104                    	mov	CL,4
 32969 00005E12 D3E2                    	shl	DX,CL			; low word of location
 32970 00005E14 58                      	pop	AX
 32971 00005E15 B10C                    	mov	CL,12
 32972 00005E17 D3E8                    	shr	AX,CL			; high word of location
 32973 00005E19 89C1                    	mov	CX,AX			; CX <- high
 32974                                  
 32975                                  		; Read in the resident image (first, seek to it)
 32976                                  	;mov	bx,[bp-8]
 32977 00005E1B 8B5EF8                  	mov	BX,Exec_FH
 32978 00005E1E 1E                      	push	DS
 32979 00005E1F 30C0                    	xor	AL,AL
 32980                                  	;invoke	$Lseek			; Seek to resident
 32981 00005E21 E8D30A                  	call	_$LSEEK
 32982 00005E24 1F                      	pop	DS
 32983 00005E25 7303                    	jnc	short Exec_Big_Read
 32984                                  
 32985 00005E27 E906FF                  	jmp	Exec_Bomb
 32986                                  
 32987                                  Exec_Big_Read:				; Read resident into memory
 32988                                  	;mov	bx,[bp-12]
 32989 00005E2A 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32990 00005E2D 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32991 00005E31 7203                    	jb	short Exec_Read_OK
 32992                                  
 32993 00005E33 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32994                                  
 32995                                  Exec_Read_OK:
 32996                                  	;sub	[bp-12],bx
 32997 00005E36 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32998 00005E39 53                      	push	BX
 32999 00005E3A B104                    	mov	CL,4
 33000 00005E3C D3E3                    	shl	BX,CL			; Get count in bytes from paras
 33001 00005E3E 89D9                    	mov	CX,BX			; Count in correct register
 33002 00005E40 1E                      	push	DS
 33003                                  	;mov	ds,[bp-20]
 33004 00005E41 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 33005                                  
 33006 00005E44 31D2                    	xor	DX,DX
 33007 00005E46 51                      	push	CX			; Save our count
 33008 00005E47 E81303                  	call	ExecRead
 33009 00005E4A 59                      	pop	CX			; Get old count to verify
 33010 00005E4B 1F                      	pop	DS
 33011 00005E4C 7248                    	jc	short Exec_Bad_FileJ
 33012                                  
 33013 00005E4E 39C1                    	cmp	CX,AX			; Did we read enough?
 33014 00005E50 5B                      	pop	BX			; Get paragraph count back
 33015 00005E51 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 33016                                  
 33017                                  	; The read did not match the request. If we are off by 512
 33018                                  	; bytes or more then the header lied and we have an error.
 33019                                  
 33020 00005E53 29C1                    	sub	CX,AX
 33021 00005E55 81F90002                	cmp	CX,512
 33022 00005E59 733B                    	jae	short Exec_Bad_FileJ
 33023                                  
 33024                                  	; We've read in CX bytes... bump DTA location
 33025                                  
 33026                                  ExecCheckEnd:
 33027                                  	;add	[bp-20],bx
 33028 00005E5B 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 33029                                  	;test	word [bp-12],0FFFFh
 33030 00005E5E F746F4FFFF              	test	Exec_Res_Len_Para,-1
 33031 00005E63 75C5                    	jnz	short Exec_Big_Read
 33032                                  
 33033                                  	; The image has now been read in. We must perform relocation
 33034                                  	; to the current location.
 33035                                  
 33036                                  exec_do_reloc:
 33037                                  	;mov	cx,[bp-10]
 33038 00005E65 8B4EF6                  	mov	CX,Exec_Rel_Fac
 33039 00005E68 A1[D50F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 33040 00005E6B 01C8                    	add	AX,CX			; and relocate him
 33041 00005E6D A3[C10F]                	mov	[exec_init_SS],AX 	; rms;NSS
 33042                                  
 33043 00005E70 A1[D70F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 33044 00005E73 A3[BF0F]                	mov	[exec_init_SP],AX 	; rms;NSS
 33045                                  
 33046 00005E76 C406[DB0F]              	les	AX,[exec_IP]		; rms;NSS
 33047 00005E7A A3[C30F]                	mov	[exec_init_IP],AX 	; rms;NSS
 33048 00005E7D 8CC0                    	mov	AX,ES			; rms;NSS
 33049 00005E7F 01C8                    	add	AX,CX			; relocated...
 33050 00005E81 A3[C50F]                	mov	[exec_init_CS],AX 	; rms;NSS
 33051                                  
 33052 00005E84 31C9                    	xor	CX,CX
 33053 00005E86 8B16[DF0F]              	mov	DX,[exec_rle_table]	; rms;NSS
 33054                                  	;mov	bx,[bp-8]
 33055 00005E8A 8B5EF8                  	mov	BX,Exec_FH
 33056 00005E8D 1E                      	push	DS
 33057 00005E8E 31C0                    	xor	AX,AX
 33058                                  	;invoke	$Lseek
 33059 00005E90 E8640A                  	call	_$LSEEK
 33060 00005E93 1F                      	pop	DS
 33061 00005E94 7303                    	jnc	short exec_get_entries
 33062                                  
 33063                                  Exec_Bad_FileJ:
 33064 00005E96 E995FE                  	jmp	Exec_Bad_File
 33065                                  
 33066                                  exec_get_entries:
 33067 00005E99 8B16[CD0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 33068                                  
 33069                                  exec_read_reloc:
 33070 00005E9D 52                      	push	DX
 33071                                  	;mov	dx,OPENBUF
 33072 00005E9E BA[BE03]                	mov	DX,Exec_Internal_Buffer
 33073                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 33074                                  	;mov	cx,396 ; MSDOS 6.0
 33075 00005EA1 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 33076 00005EA4 1E                      	push	DS
 33077 00005EA5 E8B502                  	call	ExecRead
 33078 00005EA8 07                      	pop	ES
 33079 00005EA9 5A                      	pop	DX
 33080 00005EAA 72EA                    	jc	short Exec_Bad_FileJ
 33081                                  
 33082                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 33083                                  	;mov	cx,99 ;  MSDOS 6.0
 33084 00005EAC B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 33085                                  					; Pointer to byte location in header
 33086                                  	;mov	di,OPENBUF
 33087 00005EAF BF[BE03]                	mov	DI,Exec_Internal_Buffer
 33088                                  	;mov	si,[bp-10]
 33089 00005EB2 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 33090                                  
 33091                                  exec_reloc_one:
 33092 00005EB5 09D2                    	or	DX,DX			; Any more entries?
 33093 00005EB7 7416                    	jz	short Exec_Set_PDBJ
 33094                                  
 33095                                  exec_get_addr:
 33096 00005EB9 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 33097 00005EBC 8CD8                    	mov	AX,DS			; Relocate address of item
 33098                                  
 33099                                  	; MSDOS 6.0
 33100                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 33101                                  	;add	ax,[bp-28]
 33102 00005EBE 0346E4                  	add	AX,Exec_DMA_Save
 33103                                  
 33104 00005EC1 8ED8                    	mov	DS,AX
 33105 00005EC3 0137                    	add	[BX],SI
 33106 00005EC5 83C704                  	add	DI,4
 33107 00005EC8 4A                      	dec	DX
 33108 00005EC9 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 33109                                  
 33110                                  	; We've exhausted a single buffer's worth. Read in the next
 33111                                  	; piece of the relocation table.
 33112                                  
 33113 00005ECB 06                      	push	ES
 33114 00005ECC 1F                      	pop	DS
 33115 00005ECD EBCE                    	jmp	short exec_read_reloc
 33116                                  
 33117                                  Exec_Set_PDBJ:
 33118                                  	; MSDOS 6.0
 33119                                  	
 33120                                  	; We now determine if this is a buggy exe packed file and if 
 33121                                  	; so we patch in the right code. Note that fixexepatch will
 33122                                  	; point to a ret if dos loads low. The load segment as 
 33123                                  	; determined above will be in exec_dma_save
 33124                                  	
 33125 00005ECF 06                      	push	es
 33126 00005ED0 50                      	push	ax			; M030
 33127 00005ED1 51                      	push	cx			; M030
 33128                                  	;mov	es,[bp-28]
 33129 00005ED2 8E46E4                  	mov	es,Exec_DMA_Save
 33130 00005ED5 36A1[C50F]              	mov	ax,[ss:exec_init_CS]	; M030
 33131 00005ED9 368B0E[C30F]            	mov	cx,[ss:exec_init_IP]	; M030
 33132 00005EDE 36FF16[F811]            	call	word [ss:FixExePatch]
 33133                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33134                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 33135                                  	;call	word [ss:Rational386PatchPtr]
 33136 00005EE3 59                      	pop	cx			; M030
 33137 00005EE4 58                      	pop	ax			; M030
 33138 00005EE5 07                      	pop	es
 33139                                  
 33140 00005EE6 E9DE00                  	jmp	Exec_Set_PDB
 33141                                  
 33142                                  Exec_No_Memj:
 33143 00005EE9 E93EFE                  	jmp	Exec_No_Mem
 33144                                  
 33145                                  	; we have a .COM file. First, determine if we are merely
 33146                                  	; loading an overlay.
 33147                                  
 33148                                  Exec_Com_File:
 33149                                  	;test	byte [bp-5],2
 33150 00005EEC F646FB02                	test	Exec_Func,exec_func_overlay
 33151 00005EF0 742D                    	jz	short Exec_Alloc_Com_File
 33152                                  	;lds	si,[bp-4]
 33153 00005EF2 C576FC                  	lds	SI,Exec_Blk		; get arg block
 33154 00005EF5 AD                      	lodsw				; get load address
 33155                                  	;mov	[bp-20],ax
 33156 00005EF6 8946EC                  	mov	Exec_DMA,AX
 33157 00005EF9 B8FFFF                  	mov	AX,0FFFFh
 33158 00005EFC EB63                    	jmp	short Exec_Read_Block	; read it all!
 33159                                  
 33160                                  Exec_Chk_Com_Mem:			
 33161                                  	; MSDOS 6.0	     		; M063 - Start
 33162 00005EFE 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33163 00005F02 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 33164 00005F07 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33165 00005F0C F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33166 00005F0F 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 33167                                  					; N: continue
 33168                                  	
 33169 00005F11 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33170 00005F13 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 33171                                  	
 33172                                  	;mov	ax,[bp-18]
 33173 00005F15 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 33174 00005F18 31DB                    	xor	bx,bx			; M047: bx => free arena
 33175 00005F1A E87502                  	call	ChangeOwner		; M047: free this block
 33176                                  	
 33177 00005F1D EB0E                    	jmp	short Exec_Norm_Com_Alloc
 33178                                  					; M063 - End
 33179                                  	
 33180                                  	; We must allocate the max possible size block (ick!)
 33181                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 33182                                  	; size of block.
 33183                                  
 33184                                  Exec_Alloc_Com_File:
 33185                                  	; MSDOS 6.0			; M000 -start
 33186 00005F1F 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 33187                                  					; Q: is the alloc strat high_first
 33188 00005F25 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 33189                                  					; Y: set high_only bit
 33190 00005F27 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 33191                                  					; M000 - end
 33192                                  Exec_Norm_Com_Alloc:			; M000
 33193                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33194 00005F2D BBFFFF                  	mov	BX,0FFFFh
 33195                                  	;invoke	$Alloc			; largest piece available as error
 33196 00005F30 E8C303                  	call	_$ALLOC
 33197 00005F33 09DB                    	or	BX,BX
 33198                                  	; MSDOS 6.0
 33199 00005F35 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33200                                  	; MSDOS 3.3
 33201                                  	;jz	short Exec_No_Memj
 33202                                  
 33203                                  	;mov	[bp-16],bx
 33204 00005F37 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33205 00005F3A 53                      	push	BX
 33206                                  	;invoke	$ALLOC			; largest piece available
 33207 00005F3B E8B803                  	call	_$ALLOC
 33208 00005F3E 5B                      	pop	BX			; get size of block...
 33209                                  	;mov	[bp-18],ax
 33210 00005F3F 8946EE                  	mov	Exec_Load_Block,AX
 33211                                  
 33212 00005F42 83C010                  	add	AX,10h			; increment for header
 33213                                  	;mov	[bp-20],ax
 33214 00005F45 8946EC                  	mov	Exec_DMA,AX
 33215                                  
 33216 00005F48 31C0                    	xor	AX,AX			; presume 64K read...
 33217 00005F4A 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33218 00005F4E 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33219                                  
 33220 00005F50 89D8                    	mov	AX,BX			; convert size to bytes
 33221 00005F52 B104                    	mov	CL,4
 33222 00005F54 D3E0                    	shl	AX,CL
 33223                                  	; 17/12/2022
 33224                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33225                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33226                                  	; MSDOS 5.0
 33227                                  	;cmp	AX,100h   
 33228                                  	; 02/06/2019 - Retro DOS v4.0
 33229                                  	; MSDOS 6.0
 33230                                          ; 17/12/2022
 33231 00005F56 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33232 00005F59 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33233                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33234                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33235                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33236                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33237                                  
 33238                                  					; M047: size of the block is < 64K
 33239 00005F5B 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33240                                  
 33241                                  Exec_Read_Com:
 33242                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33243 00005F5E 2D0001                  	sub	AX,100h 		; remember size of psp
 33244                                  Exec_Read_Block:
 33245 00005F61 50                      	push	AX			; save number to read
 33246                                  	;mov	bx,[bp-8]
 33247 00005F62 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33248 00005F65 31C9                    	xor	CX,CX			; but seek to 0:0
 33249 00005F67 89CA                    	mov	DX,CX
 33250 00005F69 31C0                    	xor	AX,AX			; seek relative to beginning
 33251                                  	;invoke	$Lseek			; back to beginning of file
 33252 00005F6B E88909                  	call	_$LSEEK
 33253 00005F6E 59                      	pop	CX			; number to read
 33254                                  	;mov	ds,[bp-20]
 33255 00005F6F 8E5EEC                  	mov	DS,Exec_DMA
 33256 00005F72 31D2                    	xor	DX,DX
 33257 00005F74 51                      	push	CX
 33258 00005F75 E8E501                  	call	ExecRead
 33259 00005F78 5E                      	pop	SI			; get number of bytes to read
 33260 00005F79 7303                    	jnc	short OkRead
 33261 00005F7B E9B0FD                  	jmp	Exec_Bad_File
 33262                                  
 33263                                  	; 10/09/2018
 33264                                  OkRead:
 33265 00005F7E 39F0                    	cmp	AX,SI			; did we read them all?
 33266                                  	; MSDOS 6.0
 33267                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33268                                  	; MSDOS 3.3
 33269                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33270 00005F80 7503                    	jne	short OkRead2
 33271 00005F82 E979FF                  	jmp	Exec_Chk_Com_Mem
 33272                                  OkRead2:
 33273                                  	; MSDOS 6.0
 33274 00005F85 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33275 00005F8A 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33276                                  
 33277                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33278                                  	;test	byte [bp-5],2
 33279 00005F8F F646FB02                	test	Exec_Func,exec_func_overlay
 33280 00005F93 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33281                                  
 33282                                  	;mov	ax,[bp-20]
 33283 00005F95 8B46EC                  	mov	AX,Exec_DMA
 33284 00005F98 83E810                  	sub	AX,10h
 33285 00005F9B 36A3[C50F]              	mov	[SS:exec_init_CS],AX
 33286 00005F9F 36C706[C30F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33287                                  
 33288                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33289                                  	; of 0 on stack.
 33290                                  
 33291 00005FA6 81C6FE00                	add	SI,0FEh 		; make room for stack
 33292                                  
 33293                                  	; MSDOS 6.0
 33294 00005FAA 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33295 00005FAD 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33296 00005FAF 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33297                                  
 33298                                  Exec_St_Ok:
 33299                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33300 00005FB3 368936[BF0F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33301 00005FB8 36A3[C10F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33302 00005FBC 8ED8                    	mov	DS,AX
 33303 00005FBE C7040000                	mov	WORD [SI],0		; 0 for return
 33304                                  
 33305                                  	; MSDOS 6.0
 33306                                  
 33307                                  	; M068
 33308                                  	;
 33309                                  	; We now determine if this is a Copy Protected App. If so the 
 33310                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33311                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33312                                  
 33313 00005FC2 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33314                                  
 33315                                  Exec_Set_PDB:
 33316                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33317                                  	;mov	bx,[bp-8]
 33318 00005FC7 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33319 00005FCA E8A901                  	call	Exec_Dealloc
 33320 00005FCD 55                      	push	BP
 33321                                  	;invoke	$Close			; release the jfn
 33322 00005FCE E8AA07                  	call	_$CLOSE
 33323 00005FD1 5D                      	pop	BP
 33324 00005FD2 E89301                  	call	Exec_Alloc
 33325                                  	;test	byte [bp-5],2
 33326 00005FD5 F646FB02                	test	Exec_Func,exec_func_overlay
 33327 00005FD9 743A                    	jz	short Exec_Build_Header
 33328                                  
 33329                                  	; MSDOS 6.0
 33330 00005FDB E8C201                  	call	Scan_Execname
 33331 00005FDE E8D601                  	call	Scan_Special_Entries
 33332                                  ;SR;
 33333                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33334                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33335                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33336                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33337                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33338                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33339                                  ;issues the version check, it gets the lie version until the next overlay
 33340                                  ;call is issued.
 33341                                  
 33342 00005FE1 36803E[3E10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33343 00005FE7 7426                    	je	short norm_ovl		;yes, no special handling
 33344 00005FE9 56                      	push	si
 33345 00005FEA 06                      	push	es
 33346 00005FEB 36C436[3F10]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33347                                  	 
 33348                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33349 00005FF0 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33350 00005FF4 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33351                                  	
 33352 00005FF6 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33353 00005FFB 36FF36[BC0E]            	push	word [ss:SPECIAL_VERSION]
 33354 00006000 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33355                                  		;;; PDB.VERSION
 33356 00006005 EB06                    	jmp	short setver_done
 33357                                  sysinit_done:
 33358 00006007 36C606[3E10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33359                                  setver_done:
 33360 0000600D 07                      	pop	es
 33361 0000600E 5E                      	pop	si
 33362                                  norm_ovl:
 33363                                  	;leave
 33364 0000600F 89EC                    	mov	sp,bp		
 33365 00006011 5D                      	pop	bp
 33366                                  
 33367                                  	;transfer SYS_RET_OK		; overlay load -> done
 33368 00006012 E934A6                  	jmp	SYS_RET_OK
 33369                                  
 33370                                  Exec_Build_Header:
 33371                                  	;mov	dx,[bp-18]
 33372 00006015 8B56EE                  	mov	DX,Exec_Load_Block
 33373                                  					; assign the space to the process
 33374                                  	;mov	si,1
 33375 00006018 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33376                                  	;mov	ax,[bp-14]
 33377 0000601B 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33378 0000601E 09C0                    	or	AX,AX
 33379 00006020 7405                    	jz	short No_Owner		; no environment
 33380                                  
 33381 00006022 48                      	dec	AX			; point to header
 33382 00006023 8ED8                    	mov	DS,AX
 33383 00006025 8914                    	mov	[SI],DX 		; assign ownership
 33384                                  No_Owner:
 33385                                  	;mov	ax,[bp-18]
 33386                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33387                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33388                                  	; 17/12/2022
 33389 00006027 89D0                    	mov	ax,dx ; 06/06/2019
 33390                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33391                                  	
 33392 00006029 48                      	dec	AX
 33393 0000602A 8ED8                    	mov	DS,AX			; point to header
 33394 0000602C 8914                    	mov	[SI],DX 		; assign ownership
 33395                                  
 33396                                  	; MSDOS 6.0
 33397 0000602E 1E                      	push	DS			;AN000;MS. make ES=DS
 33398 0000602F 07                      	pop	ES			;AN000;MS.
 33399                                  	;mov	di,8
 33400 00006030 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33401 00006033 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33402                                  					;	   ds:si->name, cx=name length
 33403 00006036 51                      	push	CX			;AN007;;MS. save for fake version
 33404 00006037 56                      	push	SI			;AN007;;MS. save for fake version
 33405                                  
 33406                                  MoveName:				;AN000;
 33407 00006038 AC                      	lodsb				;AN000;;MS. get char
 33408 00006039 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33409 0000603B 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33410                                  					;AN000;
 33411 0000603D AA                      	stosb				;AN000;;MS. move char
 33412                                  					; MSKK bug fix - limit length copied
 33413 0000603E 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33414 00006041 7302                    	jae	short Mem_Done		; jump if so
 33415                                  	;
 33416 00006043 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33417                                  Mem_Done:				;AN000;
 33418 00006045 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33419                                  	;cmp	di,16
 33420 00006047 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33421 0000604A 7301                    	jae	short Fill8		;AN000;MS.
 33422                                  	
 33423 0000604C AA                      	stosb				;AN000;MS.
 33424                                  	
 33425                                  Fill8:					;AN000;
 33426 0000604D 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33427 0000604E 59                      	pop	CX			;AN007;MS.
 33428                                  	
 33429 0000604F E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33430                                  
 33431                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33432 00006052 52                      	push	DX
 33433                                  	;mov	si,[bp-16]
 33434 00006053 8B76F0                  	mov	SI,Exec_Size
 33435 00006056 01D6                    	add	SI,DX
 33436                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33437 00006058 E883B0                  	call	_$DUP_PDB
 33438 0000605B 5A                      	pop	DX
 33439                                  
 33440                                  	;push	word [bp-14]
 33441 0000605C FF76F2                  	push	Exec_Environ
 33442                                  	;pop	WORD [ES:2Ch]
 33443 0000605F 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33444                                  
 33445                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33446                                  					; version number in PSP
 33447 00006064 36FF36[BC0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33448 00006069 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33449                                  		; PDB.VERSION
 33450                                  
 33451                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33452                                  	;lds	si,[bp-4]
 33453 0000606E C576FC                  	lds	SI,Exec_Blk		; get the block
 33454 00006071 1E                      	push	DS			; save its location
 33455 00006072 56                      	push	SI
 33456                                  	;lds	si,[si+6]
 33457 00006073 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33458                                  
 33459                                  	; DS points to user space 5C FCB
 33460                                  
 33461 00006076 B90C00                  	mov	CX,12			; copy drive, name and ext
 33462 00006079 51                      	push	CX
 33463 0000607A BF5C00                  	mov	DI,5Ch
 33464 0000607D 8A1C                    	mov	BL,[SI]
 33465 0000607F F3A4                    	rep	movsb
 33466                                  
 33467                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33468                                  
 33469 00006081 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33470 00006083 AB                      	stosw
 33471 00006084 AB                      	stosw
 33472                                  
 33473                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33474                                  
 33475 00006085 59                      	pop	CX
 33476 00006086 5E                      	pop	SI			; get block
 33477 00006087 1F                      	pop	DS
 33478 00006088 1E                      	push	DS			; save (again)
 33479 00006089 56                      	push	SI
 33480                                  	;lds	si,[si+0Ah]
 33481 0000608A C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33482                                  
 33483                                  	; DS points to user space 6C FCB
 33484                                  
 33485 0000608D 8A3C                    	mov	BH,[SI] 		; do same as above
 33486 0000608F F3A4                    	rep	movsb
 33487 00006091 AB                      	stosw
 33488 00006092 AB                      	stosw
 33489 00006093 5E                      	pop	SI			; get block (last time)
 33490 00006094 1F                      	pop	DS
 33491                                  	;ld	si,[si+2]
 33492 00006095 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33493                                  
 33494                                  	; DS points to user space 80 command line
 33495                                  
 33496 00006098 80C980                  	or	CL,80h
 33497 0000609B 89CF                    	mov	DI,CX
 33498 0000609D F3A4                    	rep	movsb			; Wham!
 33499                                  
 33500                                  	; Process BX into default AX (validity of drive specs on args).
 33501                                  	; We no longer care about DS:SI.
 33502                                  
 33503 0000609F FEC9                    	dec	CL			; get 0FFh in CL
 33504 000060A1 88F8                    	mov	AL,BH
 33505 000060A3 30FF                    	xor	BH,BH
 33506                                  	;invoke	GetVisDrv
 33507 000060A5 E8400A                  	call	GetVisDrv
 33508 000060A8 7302                    	jnc	short Exec_BL
 33509                                  
 33510 000060AA 88CF                    	mov	BH,CL
 33511                                  
 33512                                  Exec_BL:
 33513 000060AC 88D8                    	mov	AL,BL
 33514 000060AE 30DB                    	xor	BL,BL
 33515                                  	;invoke	GetVisDrv
 33516 000060B0 E8350A                  	call	GetVisDrv
 33517 000060B3 7302                    	jnc	short Exec_Set_Return
 33518                                  
 33519 000060B5 88CB                    	mov	BL,CL
 33520                                  
 33521                                  Exec_Set_Return:
 33522                                  	;invoke	Get_User_Stack			; get his return address
 33523 000060B7 E8D5A3                  	call	Get_User_Stack
 33524                                  
 33525                                  	;push	word [si+14h]
 33526 000060BA FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33527                                  	;push	word [si+12h]
 33528 000060BD FF7412                  	push	word [SI+user_env.user_IP]
 33529                                  	;push	word [si+14h]
 33530 000060C0 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33531                                  	;push	word [si+12h]
 33532 000060C3 FF7412                  	push	word [SI+user_env.user_IP]
 33533                                  	;pop	word [ES:0Ah]
 33534 000060C6 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33535                                  	;pop	word [ES:0Ch]
 33536 000060CB 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33537                                  
 33538 000060D0 31C0                    	xor	AX,AX
 33539 000060D2 8ED8                    	mov	DS,AX
 33540                                  					; save them where we can get them
 33541                                  					; later when the child exits.
 33542                                  	;pop	word [88h]
 33543 000060D4 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33544                                  	;pop	word [90h]
 33545 000060D8 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33546                                  
 33547 000060DC 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33548 000060E3 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33549 000060E8 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33550                                  
 33551                                  	;test	byte [bp-5],1
 33552 000060ED F646FB01                	test	Exec_Func,exec_func_no_execute
 33553 000060F1 7427                    	jz	short exec_go
 33554                                  
 33555 000060F3 36C536[BF0F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33556                                  	;les	di,[bp-4]
 33557 000060F8 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33558                                  	;mov	[es:di+10h],ds
 33559 000060FB 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33560                                  
 33561 000060FF 4E                      	dec	SI			; 'push' default AX
 33562 00006100 4E                      	dec	SI
 33563 00006101 891C                    	mov	[SI],BX 		; save default AX reg
 33564                                  	;mov	[es:di+0Eh], si
 33565 00006103 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33566                                  
 33567 00006107 36C506[C30F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33568                                  	;mov	[es:di+14h],ds
 33569 0000610C 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33570                                  	;mov	[es:di+12h],ax
 33571 00006110 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33572                                  	
 33573                                  	;leave
 33574 00006114 89EC                    	mov	sp,bp
 33575 00006116 5D                      	pop	bp	
 33576                                  
 33577                                  	;transfer SYS_RET_OK
 33578 00006117 E92FA5                  	jmp	SYS_RET_OK
 33579                                  
 33580                                  exec_go:
 33581 0000611A 36C536[C30F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33582 0000611F 36C43E[BF0F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33583 00006124 8CC0                    	mov	AX,ES
 33584                                  
 33585                                  	; MSDOS 6.0
 33586 00006126 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33587 0000612C 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33588                                  
 33589 0000612E 1E                      	push	ds			; Y: control must go to low mem stub
 33590                                  		
 33591 0000612F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33592                                  					;    control to user 
 33593 00006134 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33594                                  					; M004: Set bit to signal int 21
 33595                                  					; ah = 25 & ah= 49. See dossym.inc 
 33596                                  					; under TAG M003 & M009 for 
 33597                                  					; explanation
 33598 00006139 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33599                                  					; M068: going to be turned OFF.
 33600                                  	
 33601 0000613D 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33602 0000613F 1F                      	pop	ds
 33603                                  	
 33604 00006140 50                      	push	ax			; ret far into the low mem stub
 33605 00006141 B8[FB10]                	mov	ax,disa20_xfer
 33606 00006144 50                      	push	ax
 33607 00006145 8CC0                    	mov	AX,ES			; restore ax
 33608 00006147 CB                      	retf
 33609                                  
 33610                                  Xfer_To_User:
 33611                                  	; DS:SI points to entry point
 33612                                  	; AX:DI points to initial stack
 33613                                  	; DX has PDB pointer
 33614                                  	; BX has initial AX value
 33615                                  
 33616 00006148 FA                      	cli
 33617                                  	; 15/08/2018
 33618 00006149 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33619                                  
 33620 0000614F 8ED0                    	mov	SS,AX			; set up user's stack
 33621 00006151 89FC                    	mov	SP,DI			; and SP
 33622 00006153 FB                      	sti
 33623                                  
 33624 00006154 1E                      	push	DS			; fake long call to entry
 33625 00006155 56                      	push	SI
 33626 00006156 8EC2                    	mov	ES,DX			; set up proper seg registers
 33627 00006158 8EDA                    	mov	DS,DX
 33628 0000615A 89D8                    	mov	AX,BX			; set up proper AX
 33629                                  
 33630 0000615C CB                      	retf
 33631                                  
 33632                                  ; 04/08/2018 - Retro DOS v3.0
 33633                                  
 33634                                  ;----------------------------------------------------------------------------
 33635                                  ;
 33636                                  ;----------------------------------------------------------------------------
 33637                                  
 33638                                  ExecRead:
 33639 0000615D E81600                  	CALL	Exec_Dealloc
 33640                                  	;mov	bx,[bp-8]
 33641 00006160 8B5EF8                  	MOV	bx,Exec_FH
 33642                                  
 33643 00006163 55                      	PUSH	BP
 33644 00006164 E82507                  	call	_$READ
 33645 00006167 5D                      	POP	BP
 33646                                  
 33647                                  	;CALL	Exec_Alloc
 33648                                  	;retn
 33649                                  	; 18/12/2022
 33650                                  	;jmp	short Exec_Alloc
 33651                                  
 33652                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33653                                  
 33654                                  ;----------------------------------------------------------------------------
 33655                                  ;
 33656                                  ;----------------------------------------------------------------------------
 33657                                  
 33658                                  Exec_Alloc:
 33659 00006168 53                      	push	BX
 33660                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33661                                  	; 20/05/2019 - Retro DOS v4.0
 33662                                  	; MSDOS 6.0
 33663 00006169 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33664 0000616E E81000                  	call	ChangeOwners
 33665 00006171 E8FDB1                  	call	LCritMEM
 33666 00006174 5B                      	pop	BX
 33667 00006175 C3                      	retn
 33668                                  
 33669                                  ;----------------------------------------------------------------------------
 33670                                  ;
 33671                                  ;----------------------------------------------------------------------------
 33672                                  
 33673                                  Exec_Dealloc:
 33674 00006176 53                      	push	BX
 33675                                  	;mov	bx,0
 33676 00006177 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33677 00006179 E8DAB1                  	call	ECritMEM
 33678 0000617C E80200                  	call	ChangeOwners
 33679 0000617F 5B                      	pop	BX
 33680 00006180 C3                      	retn
 33681                                  
 33682                                  ; 18/12/2022
 33683                                  %if 0
 33684                                  ;----------------------------------------------------------------------------
 33685                                  ;
 33686                                  ;----------------------------------------------------------------------------
 33687                                  
 33688                                  Exec_Alloc:
 33689                                  	push	BX
 33690                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33691                                  	; 20/05/2019 - Retro DOS v4.0
 33692                                  	; MSDOS 6.0
 33693                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33694                                  	call	ChangeOwners
 33695                                  	call	LCritMEM
 33696                                  	pop	BX
 33697                                  	retn
 33698                                  
 33699                                  %endif
 33700                                  
 33701                                  ;----------------------------------------------------------------------------
 33702                                  ;
 33703                                  ;----------------------------------------------------------------------------
 33704                                  
 33705                                  ChangeOwners:
 33706 00006181 9C                      	pushf
 33707 00006182 50                      	push	AX
 33708                                  	;mov	ax,[bp-14]
 33709 00006183 8B46F2                  	mov	AX,Exec_Environ
 33710 00006186 E80900                  	call	ChangeOwner
 33711                                  	;mov	ax,[bp-18]
 33712 00006189 8B46EE                  	mov	AX,Exec_Load_Block
 33713 0000618C E80300                  	call	ChangeOwner
 33714 0000618F 58                      	pop	AX
 33715 00006190 9D                      	popf
 33716                                  chgown_retn:
 33717 00006191 C3                      	retn
 33718                                  
 33719                                  ;----------------------------------------------------------------------------
 33720                                  ;
 33721                                  ;----------------------------------------------------------------------------
 33722                                  
 33723                                  ChangeOwner:
 33724 00006192 09C0                    	or	AX,AX			; is area allocated?
 33725 00006194 74FB                    	jz	short chgown_retn	; no, do nothing
 33726 00006196 48                      	dec	AX
 33727 00006197 1E                      	push	DS
 33728 00006198 8ED8                    	mov	DS,AX
 33729 0000619A 891E0100                	mov	[ARENA.OWNER],BX
 33730 0000619E 1F                      	pop	DS
 33731 0000619F C3                      	retn
 33732                                  
 33733                                  ;----------------------------------------------------------------------------
 33734                                  ;
 33735                                  ;----------------------------------------------------------------------------
 33736                                  
 33737                                  ; 20/05/2019 - Retro DOS v4.0
 33738                                  
 33739                                  	; MSDOS 6.0
 33740                                  Scan_Execname:
 33741 000061A0 C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33742                                  Scan_Execname1:				; M028
 33743                                  Save_Begin:				;
 33744 000061A3 89F1                    	mov	CX,SI			; CX= starting addr
 33745                                  Scan0:					;
 33746 000061A5 AC                      	lodsb				; get char
 33747                                  
 33748 000061A6 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33749 000061A8 74F9                    	jz	short Save_Begin	; yes, save si
 33750 000061AA 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33751 000061AC 74F5                    	jz	short Save_Begin	; yes, save si
 33752 000061AE 3C00                    	cmp	AL,0			; is end of name
 33753 000061B0 75F3                    	jnz	short Scan0		; no, continue scanning
 33754 000061B2 29CE                    	sub	SI,CX			; get name's length
 33755 000061B4 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33756                                  
 33757 000061B6 C3                      	retn
 33758                                  
 33759                                  ;----------------------------------------------------------------------------
 33760                                  ;
 33761                                  ;----------------------------------------------------------------------------
 33762                                  
 33763                                  ; 20/05/2019 - Retro DOS v4.0
 33764                                  
 33765                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33766                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33767                                  
 33768                                  	; MSDOS 6.0
 33769                                  
 33770                                  Scan_Special_Entries:
 33771                                  
 33772 000061B7 49                      	dec	CX			; cx= name length
 33773                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33774                                  					;reset to current version
 33775                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33776                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33777                                  	;mov	word [ss:SPECIAL_VERSION],5
 33778                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33779                                  
 33780                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33781 000061B8 36C706[BC0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33782                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 33783                                  				; 24/09/2023
 33784                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 33785                                  ;***	call	Reset_Version
 33786                                  
 33787                                  ;M060	push	SS
 33788                                  ;M060	pop	ES
 33789                                  
 33790 000061BF 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33791 000061C4 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33792 000061C6 09F8                    	or	AX,DI			;M060; be sure the table exists
 33793 000061C8 7427                    	jz	short End_List		;M060; If ZR then no table
 33794                                  
 33795                                  GetEntries:
 33796 000061CA 268A05                  	mov	AL,[ES:DI]		; end of list
 33797 000061CD 08C0                    	or	AL,AL
 33798 000061CF 7420                    	jz	short End_List		; yes
 33799                                  
 33800 000061D1 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33801 000061D6 38C8                    	cmp	AL,CL			; same length ?
 33802 000061D8 751B                    	jnz	short SkipOne 		; no
 33803                                  
 33804 000061DA 47                      	inc	DI			; es:di -> special name
 33805 000061DB 51                      	push	CX			; save length and name addr
 33806 000061DC 56                      	push	SI
 33807                                  
 33808                                  ; M050 - BEGIN
 33809                                  
 33810 000061DD 50                      	push	ax			; save len
 33811                                  sse_next_char:
 33812 000061DE AC                      	lodsb
 33813 000061DF E8CAEE                  	call	UCase
 33814 000061E2 AE                      	scasb
 33815 000061E3 750D                    	jne	short Not_Matched
 33816 000061E5 E2F7                    	loop	sse_next_char
 33817                                  	
 33818                                  ;	repz	cmpsb			; same name ?
 33819                                  ;	jnz	short Not_Matched	; no
 33820                                  
 33821 000061E7 58                      	pop	ax			; take len off the stack
 33822                                  
 33823                                  ; M050 - END
 33824                                  
 33825 000061E8 268B05                  	mov	AX,[ES:DI]		; get special version
 33826 000061EB 36A3[BC0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33827                                  
 33828                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33829                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33830                                  
 33831 000061EF 5E                      	pop	SI
 33832 000061F0 59                      	pop	CX
 33833                                  	; 18/12/2022
 33834                                  	;jmp	SHORT End_List
 33835                                  
 33836                                  	; 18/12/2022
 33837                                  End_List:
 33838 000061F1 C3                      	retn
 33839                                  
 33840                                  Not_Matched:
 33841 000061F2 58                      	pop	ax			; get len from stack ; M050
 33842 000061F3 5E                      	pop	SI			; restore si,cx
 33843 000061F4 59                      	pop	CX
 33844                                  
 33845                                  SkipOne:
 33846 000061F5 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33847 000061FA 30E4                    	xor	AH,AH			; position to next entry
 33848 000061FC 01C7                    	add	DI,AX
 33849                                  
 33850 000061FE 83C703                  	add	DI,3			; DI -> next entry length
 33851                                  ;***	add	DI,4			; DI -> next entry length
 33852                                  
 33853 00006201 EBC7                    	jmp	short GetEntries
 33854                                  
 33855                                  	; 18/12/2022
 33856                                  ;End_List:
 33857                                  	;retn
 33858                                  
 33859                                  ; 04/08/2018 - Retro DOS v3.0
 33860                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33861                                  
 33862                                  ;----------------------------------------------------------------------------
 33863                                  ;SUBTTL Terminate and stay resident handler
 33864                                  ;
 33865                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33866                                  ;	    truncate the current block.
 33867                                  ;
 33868                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33869                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33870                                  ;	    and restoring the vectors.
 33871                                  ;
 33872                                  ;----------------------------------------------------------------------------
 33873                                  
 33874                                  	; 20/05/2019 - Retro DOS v4.0
 33875                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33876                                  
 33877                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33878                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33879                                  
 33880                                  _$KEEP_PROCESS:
 33881 00006203 50                      	push	AX			; keep exit code around
 33882                                  	;mov	byte [SS:EXIT_TYPE],3
 33883 00006204 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33884 0000620A 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33885 0000620F 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33886 00006212 7303                    	jae	short Keep_Shrink	; info
 33887                                  
 33888 00006214 BA0600                  	mov	DX,6h
 33889                                  
 33890                                  Keep_Shrink:
 33891 00006217 89D3                    	mov	BX,DX
 33892 00006219 53                      	push	BX
 33893 0000621A 06                      	push	ES
 33894 0000621B E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33895 0000621E 1F                      	pop	DS
 33896 0000621F 5B                      	pop	BX
 33897 00006220 7207                    	jc	short Keep_Done		; failed on modification
 33898                                  
 33899 00006222 8CD8                    	mov	AX,DS
 33900 00006224 01D8                    	add	AX,BX
 33901                                  	;mov	[2],ax
 33902 00006226 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33903                                  
 33904                                  Keep_Done:
 33905 00006229 58                      	pop	AX
 33906 0000622A EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33907                                  
 33908                                  ;----------------------------------------------------------------------------
 33909                                  ;
 33910                                  ;----------------------------------------------------------------------------
 33911                                  
 33912                                  STAY_RESIDENT:
 33913                                  	;mov	ax,3100h
 33914 0000622C B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33915 0000622F 83C20F                  	add	DX,15
 33916 00006232 D1DA                    	rcr	DX,1
 33917 00006234 B103                    	mov	CL,3
 33918 00006236 D3EA                    	shr	DX,CL
 33919                                  
 33920 00006238 E9D1A0                  	jmp	COMMAND
 33921                                  
 33922                                  ;----------------------------------------------------------------------------
 33923                                  ;SUBTTL $EXIT - return to parent process
 33924                                  ;   Assembler usage:
 33925                                  ;	    MOV     AL, code
 33926                                  ;	    MOV     AH, Exit
 33927                                  ;	    INT     int_command
 33928                                  ;   Error return:
 33929                                  ;	    None.
 33930                                  ;
 33931                                  ;----------------------------------------------------------------------------
 33932                                  
 33933                                  	; 20/05/2019 - Retro DOS v4.0
 33934                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33935                                  
 33936                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33937                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33938                                  _$EXIT:
 33939                                  	; 04/08/2018 - Retro DOS v3.0
 33940                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33941 0000623B 30E4                    	xor	AH,AH
 33942 0000623D 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33943 00006242 08E4                    	or	AH,AH
 33944                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33945 00006244 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33946 0000624A 7406                    	jz	short exit_inner
 33947                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33948 0000624C 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33949                                  
 33950                                  	;entry	Exit_inner
 33951                                  exit_inner:
 33952 00006252 E83AA2                  	call	Get_User_Stack		;PBUGBUG
 33953                                  
 33954 00006255 36FF36[3003]            	push	word [ss:CurrentPDB]
 33955                                  	;pop	word [si+14h]
 33956 0000625A 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33957 0000625D EB08                    	jmp	short abort_inner
 33958                                  
 33959                                  ;BREAK <$ABORT -- Terminate a process>
 33960                                  ;----------------------------------------------------------------------------
 33961                                  ; Inputs:
 33962                                  ;	user_CS:00 must point to valid program header block
 33963                                  ; Function:
 33964                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33965                                  ;	to the terminate address
 33966                                  ; Returns:
 33967                                  ;	TO THE TERMINATE ADDRESS
 33968                                  ;----------------------------------------------------------------------------
 33969                                  
 33970                                  _$ABORT:
 33971 0000625F 30C0                    	xor	AL,AL
 33972                                  	;mov	byte [SS:EXIT_TYPE],0
 33973                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33974 00006261 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33975                                  
 33976                                  	; abort_inner must have AL set as the exit code! The exit type
 33977                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33978                                  	; to be correct as the one that is terminating.
 33979                                  
 33980                                  abort_inner:
 33981 00006267 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33982 0000626C 36A3[3403]              	mov	[SS:exit_code],AX
 33983 00006270 E81CA2                  	call	Get_User_Stack
 33984                                  
 33985                                  	;mov	ds,[si+14h]
 33986 00006273 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33987 00006276 31C0                    	xor	AX,AX
 33988 00006278 8EC0                    	mov	ES,AX
 33989                                  	;mov	si,10
 33990 0000627A BE0A00                  	mov	SI,SAVEXIT
 33991                                  	;mov	di,88h
 33992 0000627D BF8800                  	mov	DI,addr_int_terminate
 33993 00006280 A5                      	movsw
 33994 00006281 A5                      	movsw
 33995 00006282 A5                      	movsw
 33996 00006283 A5                      	movsw
 33997 00006284 A5                      	movsw
 33998 00006285 A5                      	movsw
 33999 00006286 E93DF2                  	jmp	reset_environment
 34000                                  
 34001                                  ;----------------------------------------------------------------------------
 34002                                  ;
 34003                                  ; fixexepatch will point to this is DOS loads low. 
 34004                                  ;
 34005                                  ;----------------------------------------------------------------------------
 34006                                  ; MSDOS 6.0
 34007                                  
 34008                                  ; 29/04/2019 - Retro DOS v4.0
 34009                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 34010                                  
 34011                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34012                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 34013                                  
 34014                                  RetExePatch: ; proc near
 34015                                  	
 34016 00006289 C3                      	retn
 34017                                  
 34018                                  ;============================================================================
 34019                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 34020                                  ;============================================================================
 34021                                  ; 04/08/2018 - Retro DOS v3.0
 34022                                  ; 14/05/2019 - Retro DOS v4.0
 34023                                  
 34024                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 34025                                  
 34026                                  ;**
 34027                                  ;	Microsoft Confidential
 34028                                  ;	Copyright (C) Microsoft Corporation 1991
 34029                                  ;	All Rights Reserved.
 34030                                  ;
 34031                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 34032                                  ;	I/O specs are defined in DISPATCH.
 34033                                  ;
 34034                                  ;	$ALLOC
 34035                                  ;	$SETBLOCK
 34036                                  ;	$DEALLOC
 34037                                  ;	$AllocOper
 34038                                  ;	arena_free_process
 34039                                  ;	arena_next
 34040                                  ;	check_signature
 34041                                  ;	Coalesce
 34042                                  ;
 34043                                  ;	Modification history:
 34044                                  ;
 34045                                  ;	    Created: ARR 30 March 1983
 34046                                  ;
 34047                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 34048                                  ;		      M003 - added support for link/unlink UMBs from
 34049                                  ;			     DOS arena chain. 7/18/90
 34050                                  ;		      M009 - Added error returns invalid function and 
 34051                                  ;			     arena trashed in set link state call.
 34052                                  ;		      M010 - Release UMB arenas allocated to current PDB
 34053                                  ;			     if UMB_HEAD is initialized.
 34054                                  ;
 34055                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 34056                                  ;			     support. Please see under M009 in 
 34057                                  ;			     ..\inc\dossym.inc. 8/31/90.
 34058                                  ;
 34059                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 34060                                  ;			     sure that umb_head arena is valid and also make
 34061                                  ;			     sure that the previous arena is pointing to 
 34062                                  ;			     umb_head.
 34063                                  ;
 34064                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 34065                                  ;			     set allloc strategy.
 34066                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 34067                                  ;			     bx in AllocSetStrat.
 34068                                  ;
 34069                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 34070                                  ;			     a bit to indicate to dos dispatcher to turn
 34071                                  ;			     a20 off before iret. See M016.
 34072                                  ;
 34073                                  
 34074                                  ;	BREAK	<memory allocation utility routines>
 34075                                  
 34076                                  
 34077                                  ; 15/04/2018 - Retro DOS v2.0
 34078                                  ;----------------------------------------------------------------------------
 34079                                  ; xenix memory calls for MSDOS
 34080                                  ;
 34081                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 34082                                  ; arena_owner_system are all equal to zero and are contained in DI.
 34083                                  ;
 34084                                  ;INCLUDE DOSSEG.ASM
 34085                                  
 34086                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 34087                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 34088                                  
 34089                                  ;.xlist
 34090                                  ;.xcref
 34091                                  ;INCLUDE DOSSYM.ASM
 34092                                  ;INCLUDE DEVSYM.ASM
 34093                                  ;.cref
 34094                                  ;.list
 34095                                  
 34096                                  ;TITLE ALLOC.ASM - memory arena manager
 34097                                  ;NAME Alloc
 34098                                  
 34099                                  ;SUBTTL memory allocation utility routines
 34100                                  ;PAGE
 34101                                  ;
 34102                                  ; arena data
 34103                                  ;
 34104                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 34105                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 34106                                  ;       i_need  FirstArena,WORD         ; first free block found
 34107                                  ;       i_need  BestArena,WORD          ; best free block found
 34108                                  ;       i_need  LastArena,WORD          ; last free block found
 34109                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 34110                                  
 34111                                  ;**	Arena_Free_Process
 34112                                  ;----------------------------------------------------------------------------
 34113                                  ;	Free all arena blocks allocated to a prOcess
 34114                                  ;
 34115                                  ;	ENTRY	(bx) = PID of process
 34116                                  ;	EXIT	none
 34117                                  ;	USES	????? BUGBUG
 34118                                  ;----------------------------------------------------------------------------
 34119                                  
 34120                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34121                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 34122                                  
 34123                                  arena_free_process:
 34124                                  	; 14/05/2019 - Retro DOS v4.0
 34125                                  	; 04/08/2018 - Retro DOS v3.0
 34126 0000628A 36A1[2400]                      MOV	AX,[SS:arena_head]
 34127                                  arena_free_process_start:
 34128 0000628E BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 34129                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 34130 00006291 E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 34131                                  
 34132                                  arena_free_process_loop:
 34133                                          ;retc
 34134 00006294 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 34135 00006296 06                      	PUSH    ES
 34136 00006297 1F                              POP     DS
 34137                                  	;cmp	[1],bx 
 34138 00006298 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 34139 0000629C 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 34140                                  	;mov	[1],di
 34141 0000629E 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 34142                                  
 34143                                  arena_free_next:
 34144                                  	;cmp	byte [di],5Ah ;'Z'
 34145 000062A2 803D5A                          CMP     BYTE [DI],arena_signature_end
 34146                                                                          ; end of road, Jack?
 34147                                          ;retz				; never come back no more
 34148                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 34149                                  	; 14/05/2019
 34150                                  	; MSDOS 6.0
 34151 000062A5 7405                    	jz	short arena_chk_umbs
 34152                                          
 34153 000062A7 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 34154 000062AA EBE8                            JMP     SHORT arena_free_process_loop
 34155                                  
 34156                                  	; MSDOS 6.0
 34157                                  arena_chk_umbs:				; M010 - Start
 34158                                  	; 20/05/2019
 34159 000062AC 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 34160 000062B0 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 34161 000062B3 741E                    	je	short ret_label		; N: we're done
 34162                                  	
 34163 000062B5 8CDF                    	mov	di,ds			; di = last arena
 34164 000062B7 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 34165 000062B9 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 34166 000062BB EBD1                    	jmp	short arena_free_process_start
 34167                                  					; M010 - End
 34168                                  ;AFP_RETN:
 34169                                  ;	RETN
 34170                                  
 34171                                  ;	BREAK	<Arena Helper Routines>
 34172                                  
 34173                                  ;**	Arena_Next - Find Next item in Arena
 34174                                  ;----------------------------------------------------------------------------
 34175                                  ;	ENTRY	DS - pointer to block head
 34176                                  ;		(di) = 0
 34177                                  ;	EXIT	AX,ES - pointers to next head
 34178                                  ;		'C' set iff arena damaged
 34179                                  ;----------------------------------------------------------------------------
 34180                                  
 34181                                  arena_next:
 34182 000062BD 8CD8                            MOV     AX,DS                   ; AX <- current block
 34183 000062BF 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 34184 000062C3 40                              INC     AX                      ; remember that header!
 34185                                  
 34186                                  ;       fall into check_signature and return
 34187                                  ;
 34188                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 34189                                  ;       RETN
 34190                                  
 34191                                  ;**	Check_Signature - Check Memory Block Signature
 34192                                  ;----------------------------------------------------------------------------
 34193                                  ;	ENTRY	(AX) = address of block header
 34194                                  ;		(di) = 0
 34195                                  ;	EXIT	 ES = AX
 34196                                  ;		'C' clear if signature good
 34197                                  ;		'C' set if signature bad
 34198                                  ;	USES	ES, Flags
 34199                                  ;----------------------------------------------------------------------------
 34200                                  
 34201                                  check_signature:        
 34202                                  
 34203 000062C4 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34204                                  	;cmp	byte [es:di],4Dh ; 'M'
 34205 000062C6 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34206                                                                          ; IF next signature = not_end THEN
 34207 000062CA 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34208                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34209 000062CC 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34210                                                                          ; IF next signature = end then
 34211 000062D0 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34212 000062D2 F9                              STC                             ; set error
 34213                                  ret_label: ; MSDOS 6.0
 34214                                  AFP_RETN:
 34215                                   	; Retro DOS v2.0 - 05/03/2018
 34216                                  check_signature_ok:
 34217                                  COALESCE_RETN:
 34218 000062D3 C3                      	RETN
 34219                                  
 34220                                  ;**	Coalesce - Combine free blocks ahead with current block
 34221                                  ;----------------------------------------------------------------------------
 34222                                  ;	Coalesce adds the block following the argument to the argument block,
 34223                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34224                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34225                                  ;	preceeding allocated block.
 34226                                  ;
 34227                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34228                                  ;		(di) = 0
 34229                                  ;	EXIT	'C' clear if OK
 34230                                  ;		  (ds) unchanged, this block updated
 34231                                  ;		  (ax) = address of next block, IFF not at end
 34232                                  ;		'C' set if arena trashed
 34233                                  ;	USES	(cx)
 34234                                  ;----------------------------------------------------------------------------
 34235                                          
 34236                                  Coalesce:
 34237                                  	;cmp	byte [di],5Ah ; 'Z'
 34238 000062D4 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34239                                                                          ; IF current signature = END THEN
 34240                                          ;retz				;   GOTO ok
 34241 000062D7 74FA                            jz	short COALESCE_RETN
 34242 000062D9 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34243                                          ;retc				; IF no error THEN GOTO check
 34244 000062DC 72F5                    	jc	short COALESCE_RETN
 34245                                  
 34246                                  coalesce_check:
 34247                                  	;cmp	[es:1],di
 34248 000062DE 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34249                                          ;retnz				; IF next block isnt free THEN return
 34250 000062E3 75EE                            JNZ	SHORT COALESCE_RETN
 34251                                  	;mov	cx,[ES:3]
 34252 000062E5 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34253 000062EA 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34254                                          ;ADD	[3],CX
 34255 000062EB 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34256 000062EF 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34257 000062F2 880D                            MOV     [DI],CL
 34258 000062F4 EBDE                            JMP     SHORT Coalesce		; try again
 34259                                  
 34260                                  ; 04/08/2018 - Retro DOS v3.0
 34261                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34262                                  
 34263                                  ;	BREAK  <$Alloc - allocate space in memory>
 34264                                  
 34265                                  ; MSDOS 6.0
 34266                                  ;----------------------------------------------------------------------------
 34267                                  ;**	$Alloc - Allocate Memory Space
 34268                                  ;
 34269                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34270                                  ;	Alloc returns a pointer to a free block of memory that
 34271                                  ;	has the requested size in paragraphs.
 34272                                  ;
 34273                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34274                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34275                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34276                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34277                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34278                                  ;
 34279                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34280                                  ;	starts from arena_head.
 34281                                  ;
 34282                                  ;	Assembler usage:
 34283                                  ;           MOV     BX,size
 34284                                  ;           MOV     AH,Alloc
 34285                                  ;           INT     21h
 34286                                  ;
 34287                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34288                                  ;	so that we start searching the arena at it's first non-trivial free
 34289                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34290                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34291                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34292                                  ;	verify that this is true; if so, this can stay as is
 34293                                  ;
 34294                                  ;	ENTRY	(bx) = requested size, in bytes
 34295                                  ;		(DS) = (ES) = DOSGROUP
 34296                                  ;	EXIT	'C' clear if memory allocated
 34297                                  ;		  (ax:0) = address of requested memory
 34298                                  ;		'C' set if request failed
 34299                                  ;		  (AX) = error_not_enough_memory
 34300                                  ;		    (bx) = max size we could have allocated
 34301                                  ;		  (ax) = error_arena_trashed
 34302                                  ;	USES	All
 34303                                  ;----------------------------------------------------------------------------
 34304                                  
 34305                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34306                                  ;----------------------------------------------------------------------------
 34307                                  ;SUBTTL $Alloc - allocate space in memory
 34308                                  ;
 34309                                  ;   Assembler usage:
 34310                                  ;           MOV     BX,size
 34311                                  ;           MOV     AH,Alloc
 34312                                  ;           INT     21h
 34313                                  ;         AX:0 is pointer to allocated memory
 34314                                  ;         BX is max size if not enough memory
 34315                                  ;
 34316                                  ;   Description:
 34317                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34318                                  ;       memory that has the requested  size  in  paragraphs.
 34319                                  ;
 34320                                  ;   Error return:
 34321                                  ;           AX = error_not_enough_memory
 34322                                  ;              = error_arena_trashed
 34323                                  ;----------------------------------------------------------------------------
 34324                                  
 34325                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34326                                  
 34327                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34328                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34329                                  
 34330                                  _$ALLOC:
 34331                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34332                                  	; 14/05/2019 - Retro DOS v4.0
 34333                                  	; 04/08/2018 - Retro DOS v3.0
 34334                                  	;EnterCrit critMem
 34335 000062F6 E85DB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34336                                  
 34337                                  ; 17/12/2022
 34338                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34339                                  ;%if 0
 34340                                  	; 14/05/2019
 34341 000062F9 16                      	push	ss
 34342 000062FA 1F                      	pop	ds
 34343                                  
 34344                                  	; MSDOS 6.0
 34345                                  	;mov	ax,[ss:arena_head]
 34346                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34347                                  
 34348 000062FB A1[2400]                	mov	ax,[arena_head]
 34349 000062FE A3[8E00]                	mov	[START_ARENA],ax			
 34350                                  	
 34351                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34352 00006301 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34353                                  					; Q: should we start scanning from 
 34354                                  					;    UMB's
 34355 00006306 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34356                                  		
 34357                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34358                                  	;cmp	word [UMB_HEAD],-1
 34359                                  	;je	short norm_alloc	; N: scan from arena_head
 34360                                  
 34361                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34362 00006308 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34363 0000630D 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34364                                  	
 34365                                  	;mov	ax,[ss:UMB_HEAD]
 34366                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34367 0000630F A1[8C00]                	mov	ax,[UMB_HEAD]
 34368 00006312 A3[8E00]                	mov	[START_ARENA],ax
 34369                                  					; M000 - end
 34370                                  norm_alloc:
 34371 00006315 31C0                            XOR     AX,AX
 34372 00006317 89C7                            MOV     DI,AX
 34373                                  	; 15/03/2018
 34374                                          ;MOV	[SS:FirstArena],AX	; init the options
 34375                                          ;MOV	[SS:BestArena],AX
 34376                                          ;MOV	[SS:LastArena],AX
 34377                                  	; 14/05/2019
 34378 00006319 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34379 0000631C A3[4203]                        MOV	[BestArena],AX
 34380 0000631F A3[4403]                        MOV	[LastArena],AX
 34381 00006322 50                              PUSH    AX                      ; alloc_max <- 0
 34382                                  	; 04/08/2018
 34383                                  start_scan:
 34384                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34385                                  	;MOV	AX,[arena_head]
 34386                                  
 34387                                  	; 14/05/2019	
 34388                                  	; MSDOS 6.0
 34389                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34390 00006323 A1[8E00]                	mov	ax,[START_ARENA]
 34391                                  
 34392                                  	; 27/09/2023 (BugFix) (*) 
 34393                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 34394                                  start_scan_x:
 34395                                  
 34396 00006326 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34397 00006329 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34398                                  
 34399                                  ;%endif
 34400                                  
 34401                                  ; 17/12/2022
 34402                                  %if 0
 34403                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34404                                  
 34405                                  	; MSDOS 6.0
 34406                                  	mov	ax,[ss:arena_head]
 34407                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34408                                  
 34409                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34410                                  					; Q: should we start scanning from 
 34411                                  					;    UMB's
 34412                                  	jz	short norm_alloc	; N: scan from arena_head
 34413                                  		
 34414                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34415                                  	;je	short norm_alloc	; N: scan from arena_head
 34416                                  
 34417                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34418                                  	jz	short norm_alloc	; N: scan from arena_head
 34419                                  	
 34420                                  	mov	ax,[ss:UMB_HEAD]
 34421                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34422                                  					; M000 - end
 34423                                  norm_alloc:
 34424                                          XOR     AX,AX
 34425                                          MOV     DI,AX
 34426                                  	; 15/03/2018
 34427                                  	MOV	[SS:FirstArena],AX	; init the options
 34428                                  	MOV	[SS:BestArena],AX
 34429                                  	MOV	[SS:LastArena],AX
 34430                                          PUSH    AX                      ; alloc_max <- 0
 34431                                  	; 04/08/2018
 34432                                  start_scan:
 34433                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34434                                  	; 14/05/2019	
 34435                                  	; MSDOS 6.0
 34436                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34437                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34438                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34439                                  %endif
 34440                                  
 34441                                  alloc_scan:
 34442 0000632B 06                              PUSH    ES
 34443 0000632C 1F                              POP     DS                      ; DS <- ES
 34444 0000632D 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34445 00006331 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34446                                  
 34447                                  alloc_next:
 34448                                  	; MSDOS 6.0			; M000 - start 
 34449 00006333 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34450 00006339 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34451                                  	
 34452 0000633B 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34453                                  					; Q: is alloc strategy high_first
 34454 00006341 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34455 00006343 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34456 00006347 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34457                                  					;    arena_head
 34458 0000634C 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34459 0000634E 8CD8                    	mov	ax,ds			; ax = current block
 34460 00006350 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34461 00006355 EB03                    	jmp	short alloc_chk_end
 34462                                  
 34463                                  norm_strat:
 34464                                  	;cmp	byte [di],5Ah ; 'Z'
 34465 00006357 803D5A                          CMP     BYTE [DI],arena_signature_end
 34466                                                                          ; IF current block is last THEN
 34467                                  alloc_chk_end:
 34468 0000635A 740E                            JZ      SHORT alloc_end		;   GOTO end
 34469 0000635C E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34470 0000635F 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34471                                  
 34472                                  alloc_err:
 34473 00006361 58                              POP     AX
 34474                                  
 34475                                  alloc_trashed:
 34476                                  	;LeaveCrit critMem
 34477 00006362 E80CB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34478                                          ;error	error_arena_trashed
 34479                                  	;mov	al,7
 34480 00006365 B007                    	MOV	AL,error_arena_trashed
 34481                                  alloc_errj:
 34482 00006367 E9E8A2                  	JMP	SYS_RET_ERR
 34483                                  
 34484                                  alloc_end:
 34485                                  	; 18/05/2019
 34486 0000636A 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34487 00006370 7403                    	jz	short alloc_chk 
 34488 00006372 E98400                  	jmp	alloc_do_split
 34489                                  
 34490                                  alloc_chk:
 34491                                  	; MSDOS 6.0
 34492 00006375 36A1[2400]              	mov	ax,[ss:arena_head]
 34493 00006379 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34494 0000637E 740E                    	je	short alloc_fail	; Y: not enough memory
 34495                                  					; N:
 34496                                  					; Q: is the alloc strat HIGH_ONLY
 34497 00006380 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34498 00006386 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34499                                  	
 34500 00006388 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34501                                  	; 27/09/2023 (*)
 34502 0000638C EB98                    	jmp	short start_scan_x ; (*) ; (BugFix)
 34503                                  	;jmp	short start_scan
 34504                                  					; M000 - end
 34505                                  
 34506                                  alloc_fail:
 34507                                          ;invoke Get_User_Stack
 34508 0000638E E8FEA0                          CALL	Get_User_Stack
 34509 00006391 5B                      	POP     BX
 34510                                          ;MOV	[SI].user_BX,BX
 34511                                  	;MOV	[SI+2],BX
 34512 00006392 895C02                  	mov	[SI+user_env.user_BX],bx
 34513                                  	;LeaveCrit critMem
 34514 00006395 E8D9AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34515                                  	;error	error_not_enough_memory
 34516                                  	;mov	al,8
 34517 00006398 B008                    	MOV	AL,error_not_enough_memory
 34518                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34519 0000639A EBCB                    	jmp	short alloc_errj
 34520                                  	;JMP	SYS_RET_ERR
 34521                                  
 34522                                  alloc_free:
 34523 0000639C E835FF                          CALL    Coalesce		; add following free block to current
 34524 0000639F 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34525 000063A1 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34526 000063A5 5A                              POP     DX                      ; check for max found size
 34527 000063A6 39D1                            CMP     CX,DX
 34528 000063A8 7602                            JNA     SHORT alloc_test
 34529 000063AA 89CA                            MOV     DX,CX
 34530                                  
 34531                                  alloc_test:
 34532 000063AC 52                              PUSH    DX
 34533 000063AD 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34534 000063AF 7782                    	JA      SHORT alloc_next	;   GOTO next
 34535                                  
 34536                                  	; 15/03/2018
 34537 000063B1 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34538 000063B7 7505                    	JNZ	SHORT alloc_best
 34539 000063B9 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34540                                  alloc_best:
 34541 000063BE 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34542 000063C4 740E                            JZ      SHORT alloc_make_best	; initial best
 34543 000063C6 06                              PUSH	ES
 34544 000063C7 368E06[4203]                    MOV     ES,[SS:BestArena]
 34545 000063CC 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34546 000063D1 07                              POP	ES
 34547 000063D2 7605                            JBE     SHORT alloc_last
 34548                                  alloc_make_best:
 34549 000063D4 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34550                                  alloc_last:
 34551 000063D9 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34552 000063DE E952FF                          JMP     alloc_next
 34553                                  ;
 34554                                  ; split the block high
 34555                                  ;
 34556                                  alloc_do_split_high:
 34557 000063E1 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34558 000063E6 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34559 000063EA 29D9                            SUB     CX,BX
 34560 000063EC 8CDA                            MOV     DX,DS
 34561 000063EE 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34562 000063F0 01CA                            ADD     DX,CX                   ; point to next block
 34563 000063F2 8EC2                            MOV     ES,DX                   ; no decrement!
 34564 000063F4 49                              DEC     CX
 34565 000063F5 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34566 000063F7 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34567                                  ;
 34568                                  ; we have scanned memory and have found all appropriate blocks
 34569                                  ; check for the type of allocation desired; first and best are identical
 34570                                  ; last must be split high
 34571                                  ;
 34572                                  alloc_do_split:
 34573                                  
 34574                                  ; 17/12/2022
 34575                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34576                                  ;%if 0
 34577                                  	; 14/05/2019
 34578                                  	; MSDOS 6.0			; M000 - start
 34579                                  	;xor	cx,cx
 34580 000063F9 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34581                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34582 000063FE 80E13F                  	and	cl,3Fh
 34583                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34584 00006401 80F901                  	cmp	cl,BEST_FIT
 34585 00006404 77DB                    	ja	short alloc_do_split_high
 34586                                  ;%endif
 34587                                  
 34588                                  	; 17/12/2022
 34589                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34590                                  	; MSDOS 6.0 & MSDOS 5.0
 34591                                  	;xor	cx,cx
 34592                                  	;mov	cl,[ss:AllocMethod]
 34593                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34594                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34595                                  	;ja	short alloc_do_split_high
 34596                                  
 34597                                  	; 15/03/2018
 34598                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34599                                  	; 04/08/2018
 34600                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34601                                          ;JA	SHORT alloc_do_split_high
 34602                                          
 34603 00006406 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34604 0000640B 7205                    	JB      SHORT alloc_get_size
 34605 0000640D 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34606                                  
 34607                                  alloc_get_size:
 34608 00006412 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34609 00006416 29D9                            SUB     CX,BX                   ; get room left over
 34610 00006418 8CD8                            MOV     AX,DS
 34611 0000641A 89C2                            MOV     DX,AX                   ; save for owner setting
 34612 0000641C 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34613 0000641E 01D8                            ADD     AX,BX
 34614 00006420 40                              INC     AX                      ; remember the header
 34615 00006421 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34616 00006423 49                              DEC     CX                      ; CX <- size of split block
 34617                                  alloc_set_sizes:
 34618 00006424 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34619 00006428 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34620                                  	;mov	bl,4Dh ; 'M'
 34621 0000642D B34D                            MOV     BL,arena_signature_normal
 34622 0000642F 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34623 00006431 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34624 00006434 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34625                                  
 34626                                  alloc_set_owner:
 34627 00006439 8EDA                            MOV     DS,DX
 34628 0000643B 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34629 0000643F A30100                          MOV     [ARENA.OWNER],AX
 34630 00006442 8CD8                            MOV     AX,DS
 34631 00006444 40                              INC     AX
 34632 00006445 5B                              POP     BX
 34633                                  	;LeaveCrit critMem
 34634 00006446 E828AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34635                                  	
 34636                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34637                                  alloc_ok:
 34638                                          ;transfer SYS_RET_OK
 34639 00006449 E9FDA1                  	JMP	SYS_RET_OK
 34640                                  
 34641                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34642                                  
 34643                                  ; MSDOS 6.0
 34644                                  ;----------------------------------------------------------------------------
 34645                                  ;**	$SETBLOCK - Change size of an Alocated Block
 34646                                  ;
 34647                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34648                                  ;	any following free space onto this block; then we try to trim the
 34649                                  ;	block down to the size requested.
 34650                                  ;
 34651                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34652                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34653                                  ;	Thus the maximum-size-possible value that we return has already
 34654                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34655                                  ;
 34656                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34657                                  ;		finish it's work.  FOr this reason we build the allocsf
 34658                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34659                                  ;		code.
 34660                                  ;
 34661                                  ;	ENTRY	(es) = segment of old block
 34662                                  ;		(bx) = newsize
 34663                                  ;		(ah) = SETBLOCK
 34664                                  ;
 34665                                  ;	EXIT	'C' clear if OK
 34666                                  ;		'C' set if error
 34667                                  ;		  (ax) = error_invalid_block
 34668                                  ;		       = error_arena_trashed
 34669                                  ;		       = error_not_enough_memory
 34670                                  ;		       = error_invalid_function
 34671                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34672                                  ;	USES	???? BUGBUG
 34673                                  ;----------------------------------------------------------------------------
 34674                                  
 34675                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34676                                  ;----------------------------------------------------------------------------
 34677                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34678                                  ;
 34679                                  ;   Assembler usage:
 34680                                  ;           MOV     ES,block
 34681                                  ;           MOV     BX,newsize
 34682                                  ;           MOV     AH,setblock
 34683                                  ;           INT     21h
 34684                                  ;         if setblock fails for growing, BX will have the maximum
 34685                                  ;         size possible
 34686                                  ;   Error return:
 34687                                  ;           AX = error_invalid_block
 34688                                  ;              = error_arena_trashed
 34689                                  ;              = error_not_enough_memory
 34690                                  ;              = error_invalid_function
 34691                                  ;----------------------------------------------------------------------------
 34692                                  
 34693                                  _$SETBLOCK:        
 34694                                  	; 04/08/2018 - Retro DOS v3.0
 34695                                  	;EnterCrit   critMem
 34696 0000644C E807AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34697                                  
 34698 0000644F BF0000                  	MOV     DI,ARENA.SIGNATURE
 34699 00006452 8CC0                            MOV     AX,ES
 34700 00006454 48                              DEC     AX
 34701 00006455 E86CFE                          CALL    check_signature
 34702 00006458 7303                            JNC     SHORT setblock_grab
 34703                                  
 34704                                  setblock_bad:
 34705 0000645A E905FF                          JMP     alloc_trashed
 34706                                  
 34707                                  setblock_grab:
 34708 0000645D 8ED8                            MOV     DS,AX
 34709 0000645F E872FE                          CALL    Coalesce
 34710 00006462 72F6                            JC      SHORT setblock_bad
 34711 00006464 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34712 00006468 51                              PUSH    CX
 34713 00006469 39CB                            CMP     BX,CX
 34714 0000646B 76A5                            JBE     SHORT alloc_get_size
 34715 0000646D E91EFF                          JMP     alloc_fail
 34716                                  
 34717                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34718                                  
 34719                                  ; MSDOS 6.0
 34720                                  ;----------------------------------------------------------------------------
 34721                                  ;**	$DEALLOC - Free Heap Memory
 34722                                  ;
 34723                                  ;	ENTRY	(es) = address of item
 34724                                  ;
 34725                                  ;	EXIT	'C' clear of OK
 34726                                  ;		'C' set if error
 34727                                  ;		  (AX) = error_invalid_block
 34728                                  ;	USES	???? BUGBUG
 34729                                  
 34730                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34731                                  ;----------------------------------------------------------------------------
 34732                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34733                                  ;
 34734                                  ;   Assembler usage:
 34735                                  ;           MOV     ES,block
 34736                                  ;           MOV     AH,dealloc
 34737                                  ;           INT     21h
 34738                                  ;
 34739                                  ;   Error return:
 34740                                  ;           AX = error_invalid_block
 34741                                  ;              = error_arena_trashed
 34742                                  ;---------------------------------------------------------------------------- 
 34743                                  
 34744                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34745                                  _$DEALLOC:
 34746                                  	; 14/05/2019 - Retro DOS v4.0    
 34747                                  	; 04/08/2018 - Retro DOS v3.0
 34748                                  	;EnterCrit   critMem
 34749 00006470 E8E3AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34750                                  
 34751                                  	; MSDOS 6.0			; M016, M068 - Start
 34752 00006473 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34753                                  					; Q: was the previous call an int 21
 34754                                  					;    exec call
 34755 00006479 740D                    	jz	short deallocate	; N: continue
 34756 0000647B 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34757 00006481 7505                    	jne	short deallocate	; N: continue
 34758                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34759                                  	; 25/09/2023
 34760 00006483 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 34761                                  deallocate:				; M016, M068 - End
 34762 00006488 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34763 0000648B 8CC0                            MOV     AX,ES
 34764 0000648D 48                              DEC     AX
 34765 0000648E E833FE                          CALL    check_signature
 34766 00006491 720A                            JC      SHORT dealloc_err
 34767 00006493 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34768                                  	;LeaveCrit critMem
 34769 00006498 E8D6AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34770                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34771                                          ;transfer SYS_RET_OK
 34772                                  dealloc_ok:
 34773 0000649B EBAC                    	jmp	short alloc_ok
 34774                                  	;JMP	SYS_RET_OK
 34775                                  
 34776                                  dealloc_err:
 34777                                  	;LeaveCrit critMem
 34778 0000649D E8D1AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34779                                          ;error	error_invalid_block
 34780                                  	;mov	al,9
 34781 000064A0 B009                    	MOV	AL,error_invalid_block
 34782                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34783                                  dealloc_errj:
 34784                                  AllocOperErrj:	; 17/12/2022
 34785 000064A2 E9ADA1                  	JMP	SYS_RET_ERR
 34786                                  
 34787                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34788                                  
 34789                                  ; MSDOS 6.0
 34790                                  ;----------------------------------------------------------------------------
 34791                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34792                                  ;
 34793                                  ;	Assembler usage:
 34794                                  ;           MOV     AH,AllocOper
 34795                                  ;           MOV     BX,method
 34796                                  ;           MOV     AL,func
 34797                                  ;           INT     21h
 34798                                  ;
 34799                                  ;	ENTRY	
 34800                                  ;		(al) = 0
 34801                                  ;		  Get allocation Strategy in (ax)
 34802                                  ;
 34803                                  ;		(al) = 1, (bx) = method = zw0000xy
 34804                                  ;		  Set allocation strategy.
 34805                                  ;		   w  = 1  => HIGH_ONLY
 34806                                  ;		   z  = 1  => HIGH_FIRST
 34807                                  ;		   xy = 00 => FIRST_FIT
 34808                                  ;		      = 01 => BEST_FIT
 34809                                  ;		      = 10 => LAST_FIT
 34810                                  ;
 34811                                  ;		(al) = 2
 34812                                  ;		  Get UMB link state in (al)
 34813                                  ;
 34814                                  ;		(al) = 3
 34815                                  ;		  Set UMB link state
 34816                                  ;		   (bx) = 0 => Unlink UMBs
 34817                                  ;		   (bx) = 1 => Link UMBs
 34818                                  ;
 34819                                  ;
 34820                                  ;	EXIT	'C' clear if OK
 34821                                  ;
 34822                                  ;		 if (al) = 0
 34823                                  ;		  (ax) = existing method
 34824                                  ;		 if (al) = 1
 34825                                  ;		  Sets allocation strategy
 34826                                  ;		 if (al) = 2
 34827                                  ;		  (al) = 0 => UMBs not linked
 34828                                  ;		  (al) = 1 => UMBs linked in
 34829                                  ;		 if (al) = 3
 34830                                  ;		  Links/Unlinks the UMBs into DOS chain
 34831                                  ;
 34832                                  ;		'C' set if error
 34833                                  ;		  AX = error_invalid_function
 34834                                  ;
 34835                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34836                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34837                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34838                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34839                                  ;		    arena' if an arena sig is damaged.
 34840                                  ;----------------------------------------------------------------------------
 34841                                  
 34842                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34843                                  ;----------------------------------------------------------------------------
 34844                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34845                                  ;
 34846                                  ;   Assembler usage:
 34847                                  ;           MOV     AH,AllocOper
 34848                                  ;           MOV     BX,method
 34849                                  ;           MOV     AL,func
 34850                                  ;           INT     21h
 34851                                  ;
 34852                                  ;   Error return:
 34853                                  ;           AX = error_invalid_function
 34854                                  ;----------------------------------------------------------------------------
 34855                                  
 34856                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34857                                  _$ALLOCOPER:
 34858                                  	; 14/05/2019 - Retro DOS v4.0
 34859                                  	; MSDOS 6.0
 34860 000064A5 08C0                    	or	al,al ; 0
 34861 000064A7 741E                    	jz	short AllocGetStrat
 34862                                  	; 17/12/2022
 34863                                  	;cmp	al,1
 34864                                  	;jz	short AllocSetStrat
 34865                                  
 34866                                  	; 01/12/2022
 34867                                  	;cmp	al, 2
 34868                                  	;jb	short AllocSetStrat
 34869                                  	;ja	short AllocSetLink
 34870                                  	;;jmp	short AllocGetLink
 34871                                  ;AllocGetLink:
 34872                                  	; MSDOS 6.0
 34873                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34874                                  	;and 	al,LINKSTATE		
 34875                                  	;;transfer SYS_RET_OK
 34876                                  	;jmp	SYS_RET_OK
 34877                                  
 34878 000064A9 3C02                    	cmp	al,2
 34879                                  	; 17/12/2022
 34880 000064AB 7223                    	jb	short AllocSetStrat ; al = 1
 34881 000064AD 7432                    	je	short AllocGetLink
 34882                                  
 34883                                  	;cmp	al,2
 34884                                  	;jz	short AllocGetLink
 34885 000064AF 3C03                    	cmp	al,3
 34886 000064B1 7436                    	jz	short AllocSetLink
 34887                                  
 34888                                  	; 15/04/2018
 34889                                  	;CMP	AL,1
 34890                                          ;JB	SHORT AllocOperGet
 34891                                          ;JZ	SHORT AllocOperSet
 34892                                  
 34893                                  AllocOperError:
 34894                                  	; 04/08/2018 - Retro DOS v3.0
 34895                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34896                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34897 000064B3 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34898                                  	;error	error_invalid_function
 34899                                  	;mov	al,1
 34900 000064B9 B001                    	MOV	AL,error_invalid_function
 34901                                  	; 17/12/2022
 34902                                  ;AllocOperErrj:
 34903                                  	;JMP	SYS_RET_ERR
 34904                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34905                                  	;jmp	short dealloc_errj
 34906                                  	; 17/12/2022
 34907 000064BB EBE5                    	jmp	short AllocOperErrj
 34908                                  
 34909                                  AllocArenaError:
 34910                                  	; MSDOS 6.0
 34911 000064BD 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34912                                  					; M009: Extended Error Locus
 34913                                  	;error	error_arena_trashed	; M009:
 34914                                  	;mov	al,7
 34915 000064C3 B007                    	MOV	AL,error_arena_trashed
 34916                                  	;JMP	SYS_RET_ERR
 34917 000064C5 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34918                                  
 34919                                  AllocGetStrat: 
 34920                                  	; MSDOS 6.0
 34921                                  AllocOperGet:
 34922 000064C7 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34923 000064CB 30E4                            XOR     AH,AH
 34924                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34925                                  	;transfer SYS_RET_OK
 34926                                  AllocOperOk:
 34927                                  	; 17/12/2022
 34928                                  	;jmp	short dealloc_ok
 34929 000064CD E979A1                  	JMP	SYS_RET_OK
 34930                                  
 34931                                  AllocSetStrat: 
 34932                                  	; 14/05/2019
 34933                                  	; MSDOS 6.0
 34934 000064D0 53                      	push	bx			; M000 - start
 34935                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34936                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34937                                  	; 17/12/2022
 34938 000064D1 80E33F                  	and	bl,3Fh
 34939 000064D4 83FB02                  	cmp	bx,2			; BX must be 0-2
 34940                                  	;cmp	bl,2
 34941 000064D7 5B                      	pop	bx			; M000 - end
 34942 000064D8 77D9                    	ja	short AllocOperError
 34943                                  
 34944                                  AllocOperSet:
 34945 000064DA 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34946                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34947                                  	;transfer SYS_RET_OK
 34948                                  AllocOperOkj:
 34949 000064DF EBEC                    	jmp	short AllocOperOk
 34950                                  	;JMP	SYS_RET_OK
 34951                                  
 34952                                  AllocGetLink:
 34953                                  	; MSDOS 6.0
 34954 000064E1 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34955                                  	;and	al,1
 34956 000064E5 2401                    	and 	al,LINKSTATE		
 34957                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34958                                  	;transfer SYS_RET_OK
 34959                                  AllocOperOkj2:
 34960                                  	; 17/12/2022
 34961 000064E7 EBE4                    	jmp	short AllocOperOk
 34962                                  	;jmp	short AllocOperOkj
 34963                                  	;;JMP	SYS_RET_OK
 34964                                  
 34965                                  AllocSetLink:
 34966                                  	; MSDOS 6.0			; M009 - start
 34967 000064E9 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34968 000064EE 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34969 000064F1 74C0                    	je	short AllocOperError	; N: error
 34970                                  					; Y: continue
 34971                                  					; M009 - end
 34972 000064F3 83FB01                  	cmp	bx,1			
 34973 000064F6 7204                    	jb	short UnlinkUmbs
 34974 000064F8 741C                    	jz	short LinkUmbs
 34975                                  	
 34976 000064FA EBB7                    	jmp	short AllocOperError
 34977                                  	
 34978                                  UnlinkUmbs:
 34979                                  	;test	byte [ss:UMBFLAG],1
 34980 000064FC 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34981 00006502 7410                    	jz	short unlinked		; Y: return 
 34982                                  	
 34983 00006504 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34984 00006507 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34985                                  	
 34986                                  					; make it last
 34987 00006509 C60600005A              	mov	byte [0],arena_signature_end
 34988                                  	
 34989                                  	;and	byte [ss:UMBFLAG],0FEh
 34990 0000650E 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34991                                  	
 34992                                  unlinked:
 34993                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34994                                  	;transfer SYS_RET_OK
 34995                                  	; 17/12/2022
 34996 00006514 EBB7                    	jmp	short AllocOperOk
 34997                                  	;jmp	short AllocOperOkj2
 34998                                  	;;JMP	SYS_RET_OK
 34999                                  
 35000                                  LinkUmbs:
 35001 00006516 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 35002 0000651C 7510                    	jnz	short linked		; Y: return
 35003                                  	
 35004 0000651E E80F00                  	call	GetLastArena		; get arena before umb_head
 35005 00006521 729A                    	jc	short AllocArenaError	; M009: arena trashed
 35006                                  	
 35007                                  					; make it normal. M061: ds points to
 35008                                  					; arena before umb_head
 35009 00006523 C60600004D              	mov	byte [0],arena_signature_normal
 35010                                  	
 35011 00006528 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 35012                                  linked:
 35013                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35014                                  	;transfer SYS_RET_OK
 35015                                  	; 17/12/2022
 35016 0000652E EB9D                    	jmp	short AllocOperOk
 35017                                  	;jmp	short unlinked
 35018                                  	;;JMP	SYS_RET_OK
 35019                                  
 35020                                  ; MSDOS 6.0
 35021                                  ;--------------------------------------------------------------------------
 35022                                  ; Procedure Name : GetLastArena		-  M003
 35023                                  ;
 35024                                  ; Inputs	 : cx = umb_head
 35025                                  ;
 35026                                  ;
 35027                                  ; Outputs	 : If UMBs are linked
 35028                                  ;			ES = umb_head
 35029                                  ;			DS = arena before umb_head
 35030                                  ;		   else
 35031                                  ;			DS = last arena
 35032                                  ;			ES = next arena. will be umb_head if NC.
 35033                                  ;
 35034                                  ;		   CY if error
 35035                                  ;
 35036                                  ; Uses		 : DS, ES, DI, BX
 35037                                  ;--------------------------------------------------------------------------
 35038                                  
 35039                                  ; 14/05/2019 - Retro DOS v4.0
 35040                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 35041                                  
 35042                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35043                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 35044                                  	
 35045                                  GetLastArena:
 35046 00006530 50                      	push	ax			; save ax
 35047                                  
 35048 00006531 36A1[2400]              	mov	ax,[ss:arena_head]
 35049 00006535 8EC0                    	mov	es,ax			; es = arena_head
 35050 00006537 31FF                    	xor	di,di
 35051                                  
 35052 00006539 26803D5A                	cmp     byte [es:di],arena_signature_end
 35053                                  					; Q: is this the last arena
 35054 0000653D 7419                    	je	short GLA_done		; Y: return last arena in ES		
 35055                                  					
 35056                                  GLA_next:
 35057 0000653F 8ED8                    	mov	ds,ax
 35058 00006541 E879FD                  	call	arena_next		; ax, es -> next arena
 35059                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35060                                  	;jc	short GLA_err
 35061                                  	; 17/12/2022
 35062 00006544 7228                    	jc	short GLA_err2
 35063                                  
 35064 00006546 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35065 0000654C 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 35066                                  					;    umb_head
 35067                                  					; N: terminating condition is 05Ah
 35068                                  
 35069 0000654E 26803D5A                	cmp     byte [es:di],arena_signature_end
 35070                                  					; Q: is this the last arena
 35071 00006552 EB02                    	jmp	short GLA_@f
 35072                                  GLA_chkumb:
 35073 00006554 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35074                                  GLA_@f:
 35075 00006556 75E7                    	jne	short GLA_next		; N: get next arena
 35076                                  
 35077                                  GLA_done:
 35078                                  					; M061 - Start
 35079 00006558 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 35080 0000655E 750B                    	jnz	short GLA_ret		; Y: we're done
 35081                                  					; N: let us confirm that the next 
 35082                                  					;    arena is umb_head
 35083 00006560 8ED8                    	mov	ds,ax
 35084 00006562 E858FD                  	call	arena_next		; ax, es -> next arena
 35085                                  	;jc	short GLA_err
 35086 00006565 7207                    	jc	short GLA_err2
 35087 00006567 39C8                    	cmp	ax,cx			; Q: is this umb_head
 35088 00006569 7502                    	jne	short GLA_err		; N: error
 35089                                  					; M061 - End
 35090                                  GLA_ret:
 35091                                  	; 17/12/2022				
 35092                                  	;clc
 35093                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35094                                  	;clc
 35095 0000656B 58                      	pop	ax			; M061
 35096 0000656C C3                      	retn				; M061
 35097                                  
 35098                                  GLA_err:
 35099 0000656D F9                      	stc				; M061
 35100                                  GLA_err2:
 35101 0000656E 58                      	pop	ax
 35102 0000656F C3                      	retn
 35103                                  
 35104                                  ;============================================================================
 35105                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 35106                                  ;============================================================================
 35107                                  ; 04/08/2018 - Retro DOS v3.0
 35108                                  
 35109                                  ;	TITLE SRVCALL - Server DOS call
 35110                                  ;	NAME  SRVCALL
 35111                                  
 35112                                  ;**	SRVCALL.ASM - Server DOS call functions
 35113                                  ;
 35114                                  ;
 35115                                  ;	$ServerCall
 35116                                  ;
 35117                                  ;	Modification history:
 35118                                  ;
 35119                                  ;	    Created: ARR 08 August 1983
 35120                                  
 35121                                  ;AsmVars <Installed>
 35122                                  
 35123                                  ;include dpl.asm
 35124                                  
 35125                                  ;Installed = TRUE
 35126                                  
 35127                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 35128                                  ; ---------------------------------------------------------------------------
 35129                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35130                                  
 35131                                  ;BREAK <ServerCall -- Server DOS call>
 35132                                  
 35133                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 35134                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 35135                                  
 35136                                  ;hkn; TABLE	SEGMENT
 35137                                  ;Public SRVC001S,SRVC001E
 35138                                  ;SRVC001S label byte
 35139                                  
 35140                                  SRVC001S:
 35141                                  
 35142 00006570 [7465]                  SERVERTAB:	dw	SERVER_DISP
 35143 00006572 [C665]                  SERVERLEAVE:	dw	SERVERRETURN
 35144 00006574 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 35145 00006575 [2E66]                  		dw	SRV_CALL	; 0
 35146 00006577 [C765]                  		dw	COMMIT_ALL	; 1
 35147 00006579 [FD65]                  		dw	CLOSE_NAME	; 2
 35148 0000657B [0866]                  		dw	CLOSE_UID	; 3
 35149 0000657D [0F66]                  		dw	CLOSE_UID_PID	; 4
 35150 0000657F [1666]                  		dw	GET_LIST	; 5
 35151 00006581 [6F66]                  		dw	GET_DOS_DATA	; 6
 35152 00006583 [9366]                  		dw	SPOOL_OPER	; 7
 35153 00006585 [9366]                  		dw	SPOOL_OPER	; 8
 35154 00006587 [9366]                  		dw	SPOOL_OPER	; 9
 35155 00006589 [9F66]                  		dw	_$SetExtendedError  ; 10
 35156                                  
 35157                                  SERVER_DISP_END:  ;  LABEL BYTE
 35158                                  
 35159                                  ;SRVC001E label byte
 35160                                  
 35161                                  SRVC001E:
 35162                                  
 35163                                  ;hkn; TABLE	ENDS
 35164                                  
 35165                                  ;----------------------------------------------------------------------------
 35166                                  ;
 35167                                  ; Procedure Name : $ServerCall
 35168                                  ;
 35169                                  ; Inputs:
 35170                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 35171                                  ; Function:
 35172                                  ;	AL=0	Server DOS call
 35173                                  ;	AL=1	Commit All files
 35174                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 35175                                  ;	AL=3	Close all files for DPL_UID
 35176                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 35177                                  ;	AL=5	Get open file list entry
 35178                                  ;		    IN: BX File Index
 35179                                  ;			CX User Index
 35180                                  ;		    OUT:ES:DI -> Name
 35181                                  ;			BX = UID
 35182                                  ;		    CX = # locked blocks held by this UID
 35183                                  ;	AL=6	Get DOS data area
 35184                                  ;		    OUT: DS:SI -> Start
 35185                                  ;			CX size in bytes of swap if indos
 35186                                  ;			DX size in bytes of swap always
 35187                                  ;	AL=7	Get truncate flag
 35188                                  ;	AL=8	Set truncate flag
 35189                                  ;	AL=9	Close all spool files
 35190                                  ;	AL=10	SetExtendedError
 35191                                  ;
 35192                                  ;----------------------------------------------------------------------------
 35193                                  
 35194                                  _$ServerCall:
 35195                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35196                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 35197                                  	; 10/06/2019
 35198                                  	; 29/04/2019 - Retro DOS v4.0
 35199                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 35200                                  
 35201                                  	; 05/08/2018 - Retro DOS v3.0
 35202                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35203 0000658B 3C07                    	CMP	AL,7
 35204 0000658D 7204                    	JB	short SET_STUFF
 35205 0000658F 3C09                    	CMP	AL,9
 35206 00006591 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35207                                  SET_STUFF:
 35208 00006593 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35209                                  	;mov	bx,[si+12h]
 35210 00006595 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35211                                  
 35212                                  	; MSDOS 6.0
 35213                                  ;SR;
 35214                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35215                                  ; of USER_ID
 35216                                  
 35217 00006598 36F606[2F10]01          	test	byte [SS:IsWin386],1
 35218 0000659E 7505                    	jnz	short skip_win386
 35219                                  
 35220                                  ;hkn; SS override for user_id and proc_id
 35221                                  	; 15/08/2018
 35222 000065A0 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35223                                  
 35224                                  skip_win386:
 35225 000065A5 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35226 000065A8 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35227                                  NO_SET_ID:
 35228                                  	; 10/06/2019 - Retro DOS v4.0
 35229 000065AD 2EFF36[7265]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35230 000065B2 2EFF36[7065]            	PUSH	word [cS:SERVERTAB]	; push table address
 35231 000065B7 50                      	PUSH	AX
 35232 000065B8 E8ACAC                  	call	TableDispatch
 35233                                  
 35234                                  ;hkn; SS override
 35235                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35236 000065BB 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35237                                  	;error	error_invalid_function
 35238                                  	;mov	al,1
 35239 000065C1 B001                    	MOV	AL,error_invalid_function
 35240                                  servercall_error:
 35241 000065C3 E98CA0                  	JMP	SYS_RET_ERR
 35242                                  
 35243                                  SERVERRETURN:
 35244 000065C6 C3                      	retn
 35245                                  
 35246                                  ; Commit - iterate through the open file list and make sure that the
 35247                                  ; directory entries are correctly updated.
 35248                                  
 35249                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35250                                  COMMIT_ALL:
 35251 000065C7 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35252 000065C9 16                      	push	ss
 35253 000065CA 1F                      	pop	ds
 35254 000065CB E888AD                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35255                                  CommitLoop:
 35256 000065CE 53                      	push	bx
 35257 000065CF E82401                  	call	SFFromSFN
 35258 000065D2 7222                    	JC	short CommitDone
 35259 000065D4 26833D00                	cmp	word [es:di],0
 35260                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35261                                  					; if (ThisSFT->refcount != 0)
 35262 000065D8 7418                    	JZ	short CommitNext
 35263                                  	;cmp	word [es:di],0FFFFh ; -1
 35264 000065DA 26833DFF                	cmp	word [ES:DI],sf_busy
 35265                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35266                                  					; BUSY SFTs have god knows what
 35267 000065DE 7412                    	JZ	short CommitNext	;   in them.
 35268                                  	; 17/12/2022
 35269 000065E0 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35270                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35271 000065E5 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35272                                  					;	doesn't deadlock
 35273 000065E7 893E[9E05]              	MOV	[THISSFT],DI
 35274 000065EB 8C06[A005]              	MOV	[THISSFT+2],ES
 35275 000065EF E8F5CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35276                                  CommitNext:
 35277 000065F2 5B                      	pop	bx
 35278 000065F3 43                      	INC	BX
 35279 000065F4 EBD8                    	JMP	short CommitLoop
 35280                                  CommitDone:
 35281 000065F6 E878AD                  	call	LCritSFT
 35282 000065F9 5B                      	pop	bx
 35283                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35284                                  Commit_Ok:
 35285 000065FA E94CA0                  	jmp	SYS_RET_OK
 35286                                  	
 35287                                  
 35288                                  CLOSE_NAME:
 35289                                  
 35290                                  ;if installed
 35291                                  
 35292                                  ;hkn; SS override
 35293                                  	;call	far [ss:MFTcloN]
 35294 000065FD 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35295                                  ;else
 35296                                  ;	Call	MFTcloN
 35297                                  ;endif
 35298                                  
 35299                                  CheckReturns:
 35300 00006602 7202                    	JC	short func_err
 35301                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35302                                  	;transfer SYS_RET_OK
 35303                                  Commit_Okj:
 35304 00006604 EBF4                    	jmp	short Commit_Ok
 35305                                  	;jmp	SYS_RET_OK
 35306                                  
 35307                                  func_err:
 35308                                  	;transfer SYS_RET_ERR
 35309                                  	;jmp	SYS_RET_ERR
 35310 00006606 EBBB                    	jmp	short servercall_error
 35311                                  
 35312                                  CLOSE_UID:
 35313                                  
 35314                                  ;if installed
 35315                                  ;hkn; SS override
 35316                                  	;call	far [ss:MFTclU]
 35317 00006608 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35318                                  ;else
 35319                                  ;	Call	MFTclU
 35320                                  ;endif
 35321 0000660D EBF3                    	JMP	short CheckReturns
 35322                                  
 35323                                  CLOSE_UID_PID:
 35324                                  
 35325                                  ;if installed
 35326                                  ;hkn; SS override
 35327                                  	;call	far [ss:MFTCloseP]
 35328 0000660F 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35329                                  ;else
 35330                                  ;	Call	MFTCloseP
 35331                                  ;endif
 35332 00006614 EBEC                    	JMP	short CheckReturns
 35333                                  
 35334                                  GET_LIST:
 35335                                  
 35336                                  ;if installed
 35337                                  ;hkn; SS override
 35338                                  	;call	far [ss:MFT_get]
 35339 00006616 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35340                                  ;else
 35341                                  ;	Call	MFT_get
 35342                                  ;endif
 35343 0000661B 72E9                    	JC	short func_err
 35344 0000661D E86F9E                  	call	Get_User_Stack
 35345                                  	;mov	[si+2],bx
 35346 00006620 895C02                  	MOV	[SI+user_env.user_BX],BX
 35347                                  	;mov	[si+10],di
 35348 00006623 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35349                                  	;mov	[si+16],es
 35350 00006626 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35351                                  SetCXOK:
 35352                                  	;mov	[si+4],cx
 35353 00006629 894C04                  	MOV	[SI+user_env.user_CX],CX
 35354                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35355                                  	;transfer SYS_RET_OK
 35356                                  Commit_Okj2:
 35357                                  	; 17/12/2022
 35358 0000662C EBCC                    	jmp	short Commit_Ok
 35359                                  	;jmp	short Commit_Okj
 35360                                  	;;jmp	SYS_RET_OK
 35361                                  
 35362                                  SRV_CALL:
 35363 0000662E 58                      	POP	AX			; get rid of call to $srvcall
 35364 0000662F 1E                      	push	ds
 35365 00006630 56                      	push	si
 35366 00006631 E85B9E                  	call	Get_User_Stack
 35367 00006634 5F                      	pop	di
 35368 00006635 07                      	pop	es
 35369                                  
 35370                                  ; DS:SI point to stack
 35371                                  ; ES:DI point to DPL
 35372                                  
 35373 00006636 E80DAC                  	call	XCHGP
 35374                                  
 35375                                  ; DS:SI point to DPL
 35376                                  ; ES:DI point to stack
 35377                                  ;
 35378                                  ; We now copy the registers from DPL to save stack
 35379                                  
 35380 00006639 56                      	push	si
 35381 0000663A B90600                  	MOV	CX,6
 35382 0000663D F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35383 0000663F 47                      	INC	DI
 35384 00006640 47                      	INC	DI			; Skip user_BP
 35385 00006641 A5                      	MOVSW				; DS
 35386 00006642 A5                      	MOVSW				; ES
 35387 00006643 5E                      	pop	si			; DS:SI -> DPL
 35388 00006644 8B04                    	mov	ax,[SI]
 35389                                  	;MOV	AX,[SI+DPL.AX]
 35390                                  	;mov	bx,[si+2]
 35391 00006646 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35392                                  	;mov	cx,[si+4]
 35393 00006649 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35394                                  	;mov	dx,[si+6]
 35395 0000664C 8B5406                  	MOV	DX,[SI+DPL.DX]
 35396                                  	;mov	di,[si+10]
 35397 0000664F 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35398                                  	;mov	es,[si+14]
 35399 00006652 8E440E                  	MOV	ES,[SI+DPL.ES]
 35400                                  	;push	word [si+8]
 35401 00006655 FF7408                  	PUSH	word [SI+DPL.SI]
 35402                                  	;mov	ds,[si+12]
 35403 00006658 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35404 0000665B 5E                      	POP	SI
 35405                                  
 35406                                  ;hkn; SS override for next 3
 35407 0000665C 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35408 00006661 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35409 00006666 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35410 0000666C E91D9D                  	jmp	REDISP
 35411                                  
 35412                                  GET_DOS_DATA:
 35413 0000666F 16                      	push	ss
 35414 00006670 07                      	pop	es
 35415 00006671 BF[2003]                	MOV     DI,SWAP_START
 35416 00006674 B9[AC0A]                	MOV     CX,SWAP_END
 35417 00006677 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35418 0000667A 29F9                    	SUB     CX,DI
 35419 0000667C 29FA                    	SUB     DX,DI
 35420 0000667E D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35421 00006680 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35422 00006683 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35423 00006685 E8079E                  	call	Get_User_Stack
 35424                                  	;mov	[si+14],es
 35425 00006688 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35426                                  	;mov	[si+8],di
 35427 0000668B 897C08                  	MOV     [SI+user_env.user_SI],DI
 35428                                  	;mov	[si+6],dx
 35429 0000668E 895406                  	MOV     [SI+user_env.user_DX],DX
 35430 00006691 EB96                    	JMP	short SetCXOK
 35431                                  
 35432                                  SPOOL_OPER:
 35433                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35434                                  
 35435 00006693 50                      	push    ax
 35436 00006694 B82511                  	mov     ax,1125h
 35437 00006697 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35438                                  			; STACK: WORD subfunction
 35439                                  			; Return: CF set on error, AX = error code
 35440                                  			; STACK unchanged
 35441 00006699 5B                      	pop	bx
 35442                                  	; 17/12/2022
 35443                                  	;JC	short func_err2
 35444 0000669A 7390                    	jnc	short Commit_Okj2
 35445                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35446                                  	;;jmp	SYS_RET_OK
 35447                                  	;jmp	short Commit_Okj2
 35448                                  	
 35449                                  func_err2:
 35450 0000669C E9B39F                  	jmp	SYS_RET_ERR
 35451                                  
 35452                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35453                                  ;--------------------------------------------------------------------------
 35454                                  ;
 35455                                  ; Procedure Name : $SetExtendedError
 35456                                  ;
 35457                                  ; $SetExtendedError takes extended error information and loads it up for the
 35458                                  ; next extended error call. This is used by interrupt-level proccessors to
 35459                                  ; mask their actions.
 35460                                  ;
 35461                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35462                                  ;   Outputs: none
 35463                                  ;
 35464                                  ;---------------------------------------------------------------------------
 35465                                  
 35466                                  _$SetExtendedError:
 35467                                  
 35468                                  ;hkn; SS override for all variables used
 35469                                  
 35470 0000669F 8B04                    	mov	ax,[si]
 35471                                  	;MOV	AX,[SI+DPL.AX]
 35472 000066A1 36A3[2403]              	MOV	[SS:EXTERR],AX
 35473                                  	;mov	ax,[si+10]
 35474 000066A5 8B440A                  	MOV	AX,[SI+DPL.DI]
 35475 000066A8 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35476                                  	;mov	ax,[si+14]
 35477 000066AC 8B440E                  	MOV	AX,[SI+DPL.ES]
 35478 000066AF 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35479                                  	;mov	ax,[si+2]
 35480 000066B3 8B4402                  	MOV	AX,[SI+DPL.BX]
 35481 000066B6 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35482                                  	;mov	ax,[si+4]
 35483 000066BA 8B4404                  	MOV	AX,[SI+DPL.CX]
 35484 000066BD 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35485 000066C2 C3                      	retn
 35486                                  
 35487                                  ;============================================================================
 35488                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35489                                  ;============================================================================
 35490                                  ; 05/08/2018 - Retro DOS v3.0
 35491                                  ; 05/05/2019 - Retro DOS v4.0
 35492                                  
 35493                                  ;**	Handle related utilities for MSDOS 2.X.
 35494                                  ;----------------------------------------------------------------------------
 35495                                  ;	pJFNFromHandle	written
 35496                                  ;	SFFromHandle	written
 35497                                  ;	SFFromSFN	written
 35498                                  ;	JFNFree 	written
 35499                                  ;	SFNFree 	written
 35500                                  ;
 35501                                  ;	Modification history:
 35502                                  ;
 35503                                  ;	    Created: MZ 1 April 1983
 35504                                  ;----------------------------------------------------------------------------
 35505                                  
 35506                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35507                                  
 35508                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35509                                  ;----------------------------------------------------------------------------
 35510                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35511                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35512                                  ;
 35513                                  ;	NOTE:
 35514                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35515                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35516                                  ;
 35517                                  ;	ENTRY	(bx) = handle
 35518                                  ;	EXIT	'C' clear if ok
 35519                                  ;		  (es:di) = address of JFN value
 35520                                  ;		'C' set if error
 35521                                  ;		  (ax) = error code
 35522                                  ;	USES	AX, DI, ES, Flags
 35523                                  ;----------------------------------------------------------------------------
 35524                                  
 35525                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35526                                  
 35527                                  pJFNFromHandle:
 35528                                  	; 05/05/2019 - Retro DOS v4.0
 35529                                  	;getdseg <es>			; es -> dosdata
 35530 000066C3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35531                                  	
 35532                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35533 000066C8 268E06[3003]            	mov	es,[es:CurrentPDB]
 35534                                  
 35535                                  	;cmp	bx,[ES:32h]
 35536 000066CD 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35537 000066D2 7204                    	JB	short pjfn10		; no, get offset
 35538                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35539                                  	;mov	al,6
 35540 000066D4 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35541                                  ReturnCarry:
 35542 000066D6 F9                      	STC                             ; signal error
 35543 000066D7 C3                      	retn				; go back
 35544                                  pjfn10: 
 35545                                  	;les	di,[es:34h]
 35546 000066D8 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35547 000066DD 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35548                                  	;clc
 35549                                  pJFNFromHandle_error:
 35550 000066DF C3                      	retn
 35551                                  
 35552                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35553                                  ;----------------------------------------------------------------------------
 35554                                  ;
 35555                                  ; Procedure Name : SFFromHandle
 35556                                  ;
 35557                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35558                                  ;
 35559                                  ;   Input:      BX has handle
 35560                                  ;   Output:     Carry Set
 35561                                  ;                   AX has error code
 35562                                  ;               Carry Reset
 35563                                  ;                   ES:DI has pointer to SF entry
 35564                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35565                                  ; NOTE:
 35566                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35567                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35568                                  ;
 35569                                  ;----------------------------------------------------------------------------
 35570                                  
 35571                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35572                                  
 35573                                  SFFromHandle:
 35574 000066E0 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35575                                  	;retc				; return if error
 35576 000066E3 72FA                    	jc	short pJFNFromHandle_error
 35577 000066E5 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35578                                  	;JNZ	short GetSF		; nope, suck out SF
 35579                                  	;;mov	al,6
 35580                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35581                                  	;jmp	short ReturnCarry	; signal it
 35582                                  	; 17/12/2022
 35583                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35584 000066E9 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35585                                  	;JNZ	short GetSF		; nope, suck out SF
 35586                                  	;;mov	al,6
 35587                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35588                                  	;jmp	short ReturnCarry	; signal it
 35589                                  GetSF:
 35590 000066EB 53                      	push	bx			; save handle
 35591 000066EC 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35592 000066EF 30FF                    	XOR     BH,BH                   ; ignore upper half
 35593 000066F1 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35594 000066F4 5B                      	pop	bx			; restore
 35595 000066F5 C3                      	retn                        	; say goodbye
 35596                                  
 35597                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35598                                  
 35599                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35600                                  ;----------------------------------------------------------------------------
 35601                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35602                                  ;	is more than just a simple index instruction because the SF table
 35603                                  ;	can be made up of multiple pieces chained together. We follow the
 35604                                  ;	chain to the right piece and then do the index operation.
 35605                                  ;
 35606                                  ;   NOTE:
 35607                                  ;	This routine is called from SFFromHandle which is called
 35608                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35609                                  ;
 35610                                  ;	ENTRY	BX has SF index
 35611                                  ;	EXIT	'C' clear if OK
 35612                                  ;		  ES:DI points to SF entry
 35613                                  ;		'C' set if index too large
 35614                                  ;	USES	BX, DI, ES
 35615                                  ;----------------------------------------------------------------------------
 35616                                  
 35617                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35618                                  
 35619                                  SFFromSFN:
 35620                                  	; 05/05/2019 - Retro DOS v4.0
 35621                                  	;getdseg <es>			; es -> dosdata
 35622 000066F6 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35623                                  
 35624                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35625 000066FB 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35626                                  sfsfn5:	
 35627                                  	;cmp	bx,[es:di+4]
 35628 00006700 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35629 00006704 720E                    	JB	short sfsfn7		; yes, go grab it
 35630                                  	;sub	bx,[es:di+4]
 35631 00006706 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35632 0000670A 26C43D                  	les	di,[es:di] ; 14/08/2018
 35633                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35634 0000670D 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35635 00006710 75EE                    	JNZ	short sfsfn5		; no, try again
 35636 00006712 F9                      	STC
 35637 00006713 C3                      	retn				; return with error, not found
 35638                                  sfsfn7:
 35639 00006714 50                      	push	ax
 35640                                  	;mov	ax,53 ; MSDOS 3.3
 35641                                  	;mov	ax,59 ; MSDOS 6.0
 35642                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35643                                  	
 35644                                  	; 17/12/2022
 35645 00006715 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35646                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35647                                  	;mov	ax,SF_ENTRY.size ; 59
 35648                                  	
 35649 00006717 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35650 00006719 01C7                    	ADD	DI,AX			; add base of SF block
 35651 0000671B 58                      	pop	ax
 35652                                  	;add	di,6
 35653 0000671C 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35654 0000671F C3                      	retn				; return with 'C' clear
 35655                                  
 35656                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35657                                  
 35658                                  ;**	JFNFree - Find a Free JFN Slot
 35659                                  ;----------------------------------------------------------------------------
 35660                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35661                                  ;
 35662                                  ;	ENTRY	(ss) = DOSDATA
 35663                                  ;	EXIT	'C' clear if OK
 35664                                  ;		  (bx) = new handle
 35665                                  ;		  (es:di) = pointer to JFN slot
 35666                                  ;		'C' set if error
 35667                                  ;		  (al) = error code
 35668                                  ;	USES	bx, di, es, flags
 35669                                  ;----------------------------------------------------------------------------
 35670                                  
 35671                                  JFNFree:
 35672 00006720 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35673                                  jfnf1:	
 35674 00006722 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35675 00006725 7209                    	JC	short jfnf5		; no more handles
 35676 00006727 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35677 0000672B 7405                    	je	short jfnfx		; yes, carry is clear
 35678 0000672D 43                      	INC     BX                      ; no, next handle
 35679 0000672E EBF2                    	JMP	short jfnf1		; and try again
 35680                                  
 35681                                  	; Error. 'C' set
 35682                                  jfnf5:	
 35683                                  	;mov	al,4
 35684 00006730 B004                    	MOV	AL,error_too_many_open_files
 35685                                  jfnfx:	
 35686 00006732 C3                      	retn				; bye
 35687                                  
 35688                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35689                                  
 35690                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35691                                  ;----------------------------------------------------------------------------
 35692                                  ;	SFNFree scans through the sf table looking for a free entry
 35693                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35694                                  ;
 35695                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35696                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35697                                  ;	we can't just mark it busy because we may get blown out of our open
 35698                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35699                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35700                                  ;	an SFT with this value we look to see if it belongs to this user
 35701                                  ;	and process.  If it does belong to us then it must be an orphan
 35702                                  ;	and we reclaim it.
 35703                                  ;
 35704                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35705                                  ;		over and over, but we could at least set a high water mark...
 35706                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35707                                  ;		even though this is not a frequently called routine - jgl
 35708                                  ;
 35709                                  ;	ENTRY	(ss) = DOSDATA
 35710                                  ;	EXIT	'C' clear if no error
 35711                                  ;		  (bx) = SFN
 35712                                  ;		  (es:di) = pointer to SFT
 35713                                  ;		  es:[di].SFT_REF_COUNT = -1
 35714                                  ;		'C' set if error
 35715                                  ;		  (al) = error code
 35716                                  ;	USES	bx, di, es, Flags
 35717                                  ;----------------------------------------------------------------------------
 35718                                  
 35719                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35720                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35721                                  
 35722                                  SFNFree:
 35723                                  	; 12/08/2018
 35724                                  	; 05/08/2018 - Retro DOS v3.0
 35725                                  	;
 35726                                  	; MSDOS 6.0
 35727 00006733 50                      	push	ax
 35728 00006734 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35729                                  sfnf5:	
 35730 00006736 53                      	push	bx
 35731 00006737 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35732 0000673A 5B                      	pop	bx
 35733 0000673B 723A                    	jc	short sfnf95		; no more free SFNs
 35734 0000673D 26833D00                	cmp	word [ES:DI],0
 35735                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35736 00006741 741D                    	je	short sfnf20			; yep, got one
 35737                                  	
 35738                                  	;cmp	word [es:di],0FFFFh ; -1
 35739 00006743 26833DFF                	cmp	word [ES:DI],sf_busy
 35740                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35741 00006747 7403                    	je	short sfnf10		; special busy mark
 35742                                  sfnf7:	
 35743 00006749 43                      	inc	bx			; try the next one
 35744 0000674A EBEA                    	jmp	short sfnf5
 35745                                  
 35746                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35747                                  ;	it was abandoned during a earlier call and we can use it.
 35748                                  ;
 35749                                  ;	(bx)	= SFN
 35750                                  ;	(es:di) = pointer to SFT
 35751                                  ;	(TOS)	= caller's (ax)
 35752                                  
 35753                                  sfnf10:	
 35754 0000674C 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35755                                  	;cmp	[es:di+2Fh],ax
 35756 00006750 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35757 00006754 75F3                    	jnz	short sfnf7		; not ours
 35758 00006756 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35759                                  	;cmp	[es:di+31h],ax
 35760 0000675A 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35761 0000675E 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35762                                  
 35763                                  ;	We have an SFT to allocate
 35764                                  ;
 35765                                  ;	(bx)	= SFN
 35766                                  ;	(es:di) = pointer to SFT
 35767                                  ;	(TOS)	= caller's (ax)
 35768                                  
 35769                                  sfnf20:
 35770                                  	; cf = 0 ;; Retro DOS v3.0
 35771                                  
 35772                                  	;mov	word [es:di],0FFFFh
 35773 00006760 26C705FFFF              	mov	word [ES:DI],sf_busy
 35774                                  					; make sure that this is allocated
 35775                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35776                                  
 35777 00006765 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35778                                  	;mov	[es:di+2Fh],ax
 35779 00006769 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35780 0000676D 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35781                                  	;mov	[es:di+31h],ax
 35782 00006771 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35783                                  sfnf21: ;; Retro DOS v3.0
 35784                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35785                                  	;pop	ax
 35786                                  	;;clc
 35787                                  	;retn				; return with no error
 35788                                  	; 17/12/2022
 35789 00006775 58                      	pop	ax
 35790                                  	;clc
 35791 00006776 C3                      	retn
 35792                                  
 35793                                  ;**	Error - no more free SFNs
 35794                                  ;
 35795                                  ;	'C' set
 35796                                  ;	(TOS) = saved ax
 35797                                  
 35798                                  sfnf95: 
 35799 00006777 58                      	pop	ax
 35800                                  	;mov	al,4
 35801 00006778 B004                    	mov	al,error_too_many_open_files
 35802 0000677A C3                      	retn				; return with 'C' and error
 35803                                  
 35804                                  ;============================================================================
 35805                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35806                                  ;============================================================================
 35807                                  ; 13/07/2018 - Retro DOS v3.0
 35808                                  ; 20/05/2019 - Retro DOS v4.0
 35809                                  
 35810                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35811                                  
 35812                                  ;	BREAK <$Close - return a handle to the system>
 35813                                  ;----------------------------------------------------------------------------
 35814                                  ;
 35815                                  ;**	$Close - Close a file Handle
 35816                                  ;
 35817                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35818                                  ;		path
 35819                                  ;
 35820                                  ;	Assembler usage:
 35821                                  ;	    MOV     BX, handle
 35822                                  ;	    MOV     AH, Close
 35823                                  ;	    INT     int_command
 35824                                  ;
 35825                                  ;	ENTRY	(bx) = handle
 35826                                  ;	EXIT	<normal INT21 return convention>
 35827                                  ;	USES	all
 35828                                  ;
 35829                                  ;----------------------------------------------------------------------------
 35830                                  
 35831                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35832                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35833                                  
 35834                                  _$CLOSE:
 35835                                  ;	Grab the SFT pointer from the JFN.
 35836                                  
 35837 0000677B E85A02                  	call	CheckOwner		; get system file entry
 35838 0000677E 722B                    	jc	short CloseError	; error return
 35839 00006780 16                      	push	ss
 35840 00006781 1F                      	pop	ds			; For DOS_CLOSE
 35841 00006782 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35842 00006786 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35843                                  
 35844                                  ; DS:SI point to JFN table entry.
 35845                                  ; ES:DI point to SFT
 35846                                  ;
 35847                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35848                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35849                                  ; If the file was not a net FCB, we free the JFN too.
 35850                                  
 35851                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35852 0000678A 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35853 0000678E 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35854                                  	;mov	al,[ES:DI+2]
 35855 00006790 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35856                                  	;and	al,0F0h
 35857 00006794 24F0                    	AND	AL,SHARING_MASK
 35858                                  	;cmp	al,70h
 35859 00006796 3C70                    	CMP	AL,SHARING_NET_FCB
 35860 00006798 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35861                                  
 35862                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35863                                  ; -1.
 35864                                  
 35865                                  FreeJFN:
 35866 0000679A E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35867 0000679D 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35868                                  PostFree:
 35869                                  
 35870                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35871                                  
 35872 000067A1 E8F5C7                  	call	DOS_CLOSE
 35873                                  
 35874                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35875                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35876                                  
 35877 000067A4 7205                    	JC	short CloseError
 35878                                  	;mov	ah,3Eh
 35879 000067A6 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35880                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35881                                  CloseOk:
 35882 000067A8 E99E9E                  	jmp	SYS_RET_OK
 35883                                  CloseError:
 35884 000067AB E9A49E                  	jmp	SYS_RET_ERR
 35885                                  
 35886                                  ;	BREAK <$Commit - commit the file>
 35887                                  ;----------------------------------------------------------------------------
 35888                                  ;
 35889                                  ;**	$Commit - Commit a File
 35890                                  ;
 35891                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35892                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35893                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35894                                  ;	and fix this!! jgl
 35895                                  ;
 35896                                  ;	Assembler usage:
 35897                                  ;	    MOV     BX, handle
 35898                                  ;	    MOV     AH, Commit
 35899                                  ;	    INT     int_command
 35900                                  ;
 35901                                  ;	ENTRY	(bx) = handle
 35902                                  ;	EXIT	none
 35903                                  ;	USES	all
 35904                                  ;;----------------------------------------------------------------------------
 35905                                  
 35906                                  _$COMMIT:
 35907                                  ;	Grab the SFT pointer from the JFN.
 35908                                  
 35909 000067AE E82702                  	call	CheckOwner		; get system file entry
 35910 000067B1 7213                    	JC	short CommitError	; error return
 35911 000067B3 16                      	push	ss
 35912 000067B4 1F                      	pop	ds			; For DOS_COMMIT
 35913 000067B5 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35914 000067B9 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35915                                  
 35916                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35917                                  ;
 35918                                  ;	ES:DI point to SFT
 35919                                  
 35920 000067BD E827C9                  	call	DOS_COMMIT
 35921 000067C0 7204                    	JC	short CommitError
 35922                                  	; 07/12/2022
 35923                                  	;jc	short CloseError
 35924                                  	;mov	ah,68h
 35925 000067C2 B468                    	MOV	AH,COMMIT
 35926                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35927                                  	;jmp	SYS_RET_OK
 35928                                  CommitOk:
 35929 000067C4 EBE2                    	jmp	short CloseOk	
 35930                                  
 35931                                  CommitError:
 35932                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35933                                  	;jmp	SYS_RET_ERR
 35934 000067C6 EBE3                    	jmp	short CloseError
 35935                                  
 35936                                  ;	BREAK <$ExtHandle - extend handle count>
 35937                                  
 35938                                  ;**	$ExtHandle - Extend Handle Count
 35939                                  ;----------------------------------------------------------------------------
 35940                                  ;	Assembler usage:
 35941                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35942                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35943                                  ;	    INT     int_command 		 busy )
 35944                                  ;
 35945                                  ;	ENTRY	(bx) = new number of handles
 35946                                  ;	EXIT	'C' clear if OK
 35947                                  ;		'C' set iff err
 35948                                  ;		  (ax) = error code
 35949                                  ;			 AX = error_not_enough_memory
 35950                                  ;			      error_too_many_open_files
 35951                                  ;	USES	all
 35952                                  ;----------------------------------------------------------------------------
 35953                                  
 35954                                  _$ExtHandle:
 35955 000067C8 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35956                                  	;cmp	bx,20
 35957 000067CA 83FB14                  	CMP	BX,FILPERPROC
 35958 000067CD 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35959 000067CF BB1400                  	MOV	BX,FILPERPROC
 35960                                  exth2:	
 35961 000067D2 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35962                                  	;mov	cx,[ES:32h]
 35963 000067D7 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35964 000067DC 39CB                    	CMP	BX,CX			; the requested == current
 35965 000067DE 7455                    	JE	short ok_done 		; yes and exit
 35966 000067E0 7722                    	JA	short larger		; go allocate new table
 35967                                  
 35968                                  ;	We're going to shrink the # of handles available
 35969                                  
 35970 000067E2 BD0100                  	MOV	BP,1			; shrink
 35971                                  	;mov	ds,[ES:36h]
 35972 000067E5 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35973 000067EA 89DE                    	MOV	SI,BX			;
 35974 000067EC 29D9                    	SUB	CX,BX			; get difference
 35975                                  
 35976                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35977                                  chck_handles:
 35978 000067EE 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35979 000067F1 753D                    	JNZ	short too_many_files	; status
 35980 000067F3 46                      	INC	SI
 35981 000067F4 E2F8                    	LOOP	chck_handles
 35982 000067F6 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35983 000067F9 7709                    	JA	short larger		; no
 35984                                  
 35985 000067FB BD0200                  	MOV	BP,2			; psp
 35986                                  	;mov	di,24
 35987 000067FE BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35988 00006801 53                      	PUSH	BX
 35989 00006802 EB1D                    	JMP	short movhandl
 35990                                  
 35991                                  larger:
 35992 00006804 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35993 00006807 747F                    	JZ	short invalid_func	; 10/08/2018
 35994 00006809 F8                      	CLC
 35995 0000680A 53                      	PUSH	BX			; save requested number
 35996 0000680B 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35997 0000680E B104                    	MOV	CL,4
 35998                                  	;ror	bx,cl			; MSDOS 3.3
 35999 00006810 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 36000 00006812 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 36001                                  
 36002 00006816 55                      	PUSH	BP
 36003 00006817 E8DCFA                  	call	_$ALLOC			; allocate memory
 36004 0000681A 5D                      	POP	BP
 36005 0000681B 7266                    	JC	short no_memory		; not enough meory
 36006                                  
 36007 0000681D 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 36008 0000681F 31FF                    	XOR	DI,DI
 36009                                  movhandl:
 36010 00006821 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 36011                                  
 36012 00006826 F7C50300                	test	BP,3			; enlarge ?
 36013 0000682A 740C                    	JZ	short enlarge 		; yes
 36014 0000682C 59                      	POP	CX			; cx = the amount you shrink
 36015 0000682D 51                      	PUSH	CX
 36016 0000682E EB0C                    	JMP	short copy_hand
 36017                                  
 36018                                  ;	Done.  'C' clear
 36019                                  
 36020                                  ; 17/12/2022
 36021                                  ;ok_done:
 36022                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36023                                  ;	;jmp	short CommitOk
 36024                                  ;	; 17/12/2022
 36025                                  ;	jmp	SYS_RET_OK
 36026                                  
 36027                                  too_many_files:
 36028                                  	;mov	al,4
 36029 00006830 B004                    	MOV	AL,error_too_many_open_files
 36030                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36031                                  	;jmp	SYS_RET_ERR
 36032                                  CommitErrorj:
 36033                                  	;jmp	short CommitError
 36034                                  	; 17/12/2022
 36035 00006832 E91D9E                  	jmp	SYS_RET_ERR
 36036                                  
 36037                                  ; 17/12/2022 
 36038                                  ok_done:
 36039                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36040                                  	;jmp	short CommitOk
 36041                                  	; 17/12/2022
 36042 00006835 E9119E                  	jmp	SYS_RET_OK
 36043                                  
 36044                                  enlarge:
 36045                                  	;mov	cx,[32h]
 36046 00006838 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 36047                                  copy_hand:
 36048 0000683C 89CA                    	MOV	DX,CX
 36049                                  	;lds	si,[34h]
 36050 0000683E C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 36051 00006842 F3A4                    	REP	MOVSB			; copy infomation to new table
 36052 00006844 59                      	POP	CX			; get new number of handles
 36053 00006845 51                      	PUSH	CX			; save it again
 36054 00006846 29D1                    	SUB	CX,DX			; get the difference
 36055 00006848 B0FF                    	MOV	AL,-1			; set availability to handles
 36056 0000684A F3AA                    	REP	STOSB
 36057 0000684C 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 36058                                  	;cmp	word [34h],0
 36059 00006851 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 36060 00006856 750D                    	JNZ	short update_info	; yes, go update PDB entries
 36061 00006858 55                      	PUSH	BP
 36062 00006859 1E                      	PUSH	DS			; save old table segment
 36063 0000685A 06                      	PUSH	ES			; save new table segment
 36064 0000685B 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 36065 0000685F E80EFC                  	call	_$DEALLOC		; deallocate old table meomory
 36066 00006862 07                      	POP	ES			; restore new table segment
 36067 00006863 1F                      	POP	DS			; restore old table segment
 36068 00006864 5D                      	POP	BP
 36069                                  
 36070                                  update_info:
 36071 00006865 F7C50200                	test	BP,2			; psp?
 36072 00006869 7408                    	JZ	short non_psp 		; no
 36073                                  	;mov	word [34h],18h ; 24
 36074 0000686B C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 36075 00006871 EB06                    	JMP	short final
 36076                                  non_psp:
 36077                                  	;mov	word [34h],0
 36078 00006873 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 36079                                  final:
 36080                                  	;mov	[36h],es	
 36081 00006879 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 36082                                  	;pop	word [32h]
 36083 0000687D 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 36084                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36085                                  	;jmp	SYS_RET_OK
 36086                                  ok_done_j:
 36087 00006881 EBB2                    	jmp	short ok_done
 36088                                  
 36089                                  no_memory:
 36090 00006883 5B                      	POP	BX			; clean stack
 36091                                  	;mov	al,8
 36092 00006884 B008                    	MOV	AL,error_not_enough_memory
 36093                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36094                                  	;jmp	SYS_RET_ERR
 36095                                  CommitErrorj2:
 36096 00006886 EBAA                    	jmp	short CommitErrorj
 36097                                  
 36098                                  invalid_func:
 36099                                  	;mov	al,1
 36100 00006888 B001                    	MOV	AL,error_invalid_function
 36101                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36102                                  	;jmp	SYS_RET_ERR
 36103                                  CommitErrorj3:
 36104                                  	;jmp	short CommitErrorj2
 36105                                  	; 17/12/2022
 36106 0000688A EBA6                    	jmp	short CommitErrorj
 36107                                  
 36108                                  ; 20/05/2019 - Retro DOS v4.0
 36109                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 36110                                  
 36111                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36112                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 36113                                  
 36114                                  ;	BREAK <$READ - Read from a file handle>
 36115                                  ;----------------------------------------------------------------------------
 36116                                  ;
 36117                                  ;**	$Read - Read from a File Handle
 36118                                  ;
 36119                                  ;   Assembler usage:
 36120                                  ;
 36121                                  ;	LDS	DX, buf
 36122                                  ;	MOV	CX, count
 36123                                  ;	MOV	BX, handle
 36124                                  ;	MOV	AH, Read
 36125                                  ;	INT	int_command
 36126                                  ;	  AX has number of bytes read
 36127                                  ;
 36128                                  ;	ENTRY	(bx) = file handle
 36129                                  ;		(cx) = byte count
 36130                                  ;		(ds:dx) = buffer address
 36131                                  ;	EXIT	Through system call return so that to user:
 36132                                  ;		  'C' clear if OK
 36133                                  ;		    (ax) = bytes read
 36134                                  ;		  'C' set if error
 36135                                  ;		    (ax) = error code
 36136                                  ;
 36137                                  ;----------------------------------------------------------------------------
 36138                                  
 36139                                  _$READ:
 36140 0000688C BE[4033]                	MOV	SI,DOS_READ
 36141                                  ReadDo:
 36142 0000688F E831FE                  	call	pJFNFromHandle
 36143 00006892 7208                    	JC	short ReadError
 36144                                  
 36145 00006894 268A05                  	MOV	AL,[ES:DI]
 36146 00006897 E83E01                  	call	CheckOwner		; get the handle
 36147 0000689A 7303                    	JNC	short ReadSetup		; no errors do the operation
 36148                                  
 36149                                  ;	Have an error. 'C' set
 36150                                  
 36151                                  ReadError:
 36152                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36153                                  	;;jmp	SYS_RET_ERR		; go to error traps
 36154                                  	;jmp	short CommitErrorj3
 36155                                  	; 17/12/2022
 36156 0000689C E9B39D                  	jmp	SYS_RET_ERR
 36157                                  
 36158                                  ReadSetup:
 36159 0000689F 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 36160 000068A4 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 36161                                  	; 20/05/2019 - Retro DOS v4.0
 36162                                  	; MSDOS 6.0 
 36163                                  ;; Extended Open
 36164                                  	;test	byte [es:di+3],20h
 36165 000068A9 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 36166                                  						 ;AN000;;EO. need i24
 36167 000068AE 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 36168 000068B0 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 36169                                  					;AN000;;EO. set it off;smr;SS Override
 36170                                  needi24:				;AN000;
 36171                                  ;; Extended Open
 36172 000068B6 36FF36[2C03]            	push	word [SS:DMAADD]
 36173 000068BB 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 36174                                  
 36175                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36176                                  
 36177                                  	; 26/07/2019
 36178                                  
 36179                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36180                                  	;
 36181                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 36182                                  	; there is not another caller; it is better to put the code in this proc
 36183                                   	; here instead of calling it as a subroutine; but I have modified code
 36184                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 36185                                  
 36186                                  	; MSDOS 6.0
 36187 000068C0 E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 36188                                  	
 36189                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36190                                  	; MSDOS 3.3
 36191                                  	;MOV	BX,DX			; copy offset
 36192                                  	;push	cx			; don't stomp on count
 36193                                  	;MOV	CL,4			; bits to shift bytes->para
 36194                                  	;SHR	BX,CL			; get number of paragraphs
 36195                                  	;pop	cx			; get count back
 36196                                  	;MOV	AX,DS			; get original segment
 36197                                  	;ADD	AX,BX			; get new segment
 36198                                  	;MOV	DS,AX			; in seg register
 36199                                  	;AND	DX,0Fh			; normalize offset
 36200                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36201                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36202                                  						;smr;SS Override
 36203                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36204                                  	
 36205 000068C3 16                      	push	ss			; go for DOS addressability
 36206 000068C4 1F                      	pop	ds
 36207                                  
 36208 000068C5 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36209                                  
 36210 000068C7 8F06[2E03]              	pop	word [DMAADD+2]
 36211 000068CB 8F06[2C03]              	pop	word [DMAADD]
 36212                                  	;JNC	short READ_OK		;AN002;
 36213                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36214                                  	; 17/12/2022
 36215 000068CF 72CB                    	jc	short ReadError
 36216                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36217                                  	;jnc	short READ_OK		;AN002;
 36218                                  	;jmp	short ReadError
 36219                                  
 36220                                  READ_OK:
 36221 000068D1 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36222                                  Read_Okj:
 36223                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36224                                  	;;jmp	SYS_RET_OK		; successful return
 36225                                  	;jmp	short ok_done_j
 36226                                  	; 17/12/2022
 36227 000068D3 E9739D                  	jmp	SYS_RET_OK
 36228                                  
 36229                                  ; 13/07/2018 - Retro DOS v3.0
 36230                                  
 36231                                  ;----------------------------------------------------------------------------
 36232                                  
 36233                                  ;   Input: DS:DX points to user's buffer addr
 36234                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36235                                  ;   Output: [DMAADD] set
 36236                                  
 36237                                  ; 20/05/2019 - Retro DOS v4.0
 36238                                  ; 26/07/2019
 36239                                  ;	; MSDOS 6.0
 36240                                  ;Align_Buffer:
 36241                                  ;	MOV	BX,DX			; copy offset
 36242                                  ;	push	cx			; don't stomp on count
 36243                                  ;	MOV	CL,4			; bits to shift bytes->para
 36244                                  ;	SHR	BX,CL			; get number of paragraphs
 36245                                  ;	pop	cx			; get count back
 36246                                  ;	MOV	AX,DS			; get original segment
 36247                                  ;	ADD	AX,BX			; get new segment
 36248                                  ;	MOV	DS,AX			; in seg register
 36249                                  ;	AND	DX,0Fh			; normalize offset
 36250                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36251                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36252                                  ;						;smr;SS Override
 36253                                  ;	retn
 36254                                  
 36255                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36256                                  Align_Buffer:
 36257 000068D6 89D3                    	MOV	BX,DX			; copy offset
 36258 000068D8 51                      	push	cx			; don't stomp on count
 36259 000068D9 B104                    	MOV	CL,4			; bits to shift bytes->para
 36260 000068DB D3EB                    	SHR	BX,CL			; get number of paragraphs
 36261 000068DD 59                      	pop	cx			; get count back
 36262 000068DE 8CD8                    	MOV	AX,DS			; get original segment
 36263 000068E0 01D8                    	ADD	AX,BX			; get new segment
 36264 000068E2 8ED8                    	MOV	DS,AX			; in seg register
 36265 000068E4 83E20F                  	AND	DX,0Fh			; normalize offset
 36266 000068E7 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36267 000068EC 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36268                                  						;smr;SS Override
 36269 000068F1 C3                      	retn
 36270                                  
 36271                                  ; 20/05/2019 - Retro DOS v4.0
 36272                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36273                                  
 36274                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36275                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36276                                  
 36277                                  ;BREAK <$WRITE - write to a file handle>
 36278                                  ;----------------------------------------------------------------------------
 36279                                  ;
 36280                                  ;   Assembler usage:
 36281                                  ;	    LDS     DX, buf
 36282                                  ;	    MOV     CX, count
 36283                                  ;	    MOV     BX, handle
 36284                                  ;	    MOV     AH, Write
 36285                                  ;	    INT     int_command
 36286                                  ;	  AX has number of bytes written
 36287                                  ;   Errors:
 36288                                  ;	    AX = write_invalid_handle
 36289                                  ;	       = write_access_denied
 36290                                  ;
 36291                                  ;   Returns in register AX
 36292                                  ;
 36293                                  ;----------------------------------------------------------------------------
 36294                                  
 36295                                  _$WRITE:
 36296 000068F2 BE[6935]                	MOV	SI,DOS_WRITE
 36297 000068F5 EB98                    	JMP	short ReadDo
 36298                                  
 36299                                  ;BREAK <$LSEEK - move r/w pointer>
 36300                                  ;----------------------------------------------------------------------------
 36301                                  ;
 36302                                  ;   Assembler usage:
 36303                                  ;	    MOV     DX, offsetlow
 36304                                  ;	    MOV     CX, offsethigh
 36305                                  ;	    MOV     BX, handle
 36306                                  ;	    MOV     AL, method
 36307                                  ;	    MOV     AH, LSeek
 36308                                  ;	    INT     int_command
 36309                                  ;	  DX:AX has the new location of the pointer
 36310                                  ;   Error returns:
 36311                                  ;	    AX = error_invalid_handle
 36312                                  ;	       = error_invalid_function
 36313                                  ;   Returns in registers DX:AX
 36314                                  ;
 36315                                  ;----------------------------------------------------------------------------
 36316                                  
 36317                                  ; 21/05/2019 - Retro DOS v4.0
 36318                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36319                                  
 36320                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36321                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36322                                  
 36323                                  _$LSEEK:
 36324 000068F7 E8DE00                  	call	CheckOwner		; get system file entry
 36325                                  
 36326                                  	; 17/12/2022
 36327                                  ;LSeekError:
 36328                                  	;JNC	short CHKOWN_OK		;AN002;
 36329                                  	;JMP	short ReadError		;AN002; error return
 36330                                  	; 17/12/2022
 36331                                  	; 02/06/2019
 36332 000068FA 72A0                    	jc	short ReadError
 36333                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36334                                  	;JNC	short CHKOWN_OK		;AN002;
 36335                                  	;JMP	short ReadError		;AN002; error return
 36336                                  
 36337                                  CHKOWN_OK:
 36338                                  					;AN002;
 36339 000068FC 3C02                    	CMP	AL,2			; is the seek value correct?
 36340 000068FE 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36341                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36342 00006900 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36343                                  					;smr;SS Override
 36344                                  	;mov	al,1
 36345 00006906 B001                    	mov	al,error_invalid_function ; invalid method
 36346                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36347                                  LSeekError2:
 36348 00006908 EB92                    	jmp	short ReadError
 36349                                  
 36350                                  LSeekDisp:
 36351 0000690A 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36352 0000690C 720A                    	JB	short LSeekStore	; just store CX:DX
 36353 0000690E 771B                    	JA	short LSeekEOF		; seek from end of file
 36354                                  	;add	dx,[es:di+21]
 36355 00006910 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36356                                  	;adc	cx,[es:di+23]
 36357 00006914 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36358                                  LSeekStore:
 36359 00006918 89C8                    	MOV	AX,CX			; AX:DX
 36360 0000691A 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36361                                  LSeekSetpos:
 36362                                  	;mov	[es:di+21],ax
 36363 0000691B 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36364                                  	;mov	[es:di+23],dx
 36365 0000691F 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36366 00006923 E8699B                  	call	Get_User_Stack
 36367                                  	;mov	[si+6],dx
 36368 00006926 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36369                                  	;jmp	SYS_RET_OK		; successful return
 36370                                  	; 25/06/2019
 36371                                  	;jmp	SYS_RET_OK_clc
 36372                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36373                                  	;jmp	SYS_RET_OK_clc
 36374                                  LSeekOk:
 36375 00006929 EBA8                    	jmp     short Read_Okj
 36376                                  
 36377                                  LSeekEOF:
 36378                                  	;;test	word [es:di+5],8000h
 36379                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36380                                  	; 21/05/2019 - Retro DOS v4.0
 36381 0000692B 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36382 00006930 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36383                                  LOCAL_LSeek:
 36384                                  	;add	dx,[es:di+17]
 36385 00006932 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36386                                  	;adc	cx,[es:di+19]
 36387 00006936 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36388 0000693A EBDC                    	JMP	short LSeekStore	; go and set the position
 36389                                  
 36390                                  Check_LSeek_Mode:
 36391                                  	;;test	word [es:di+2],8000h
 36392                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36393                                  	; 21/05/2019
 36394 0000693C 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36395 00006941 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36396                                  	;mov	ax,[es:di+2]
 36397 00006943 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36398                                  	;and	ax, 0F0h
 36399 00006947 25F000                  	AND	AX,SHARING_MASK
 36400                                  	;cmp	ax,40h
 36401 0000694A 83F840                  	CMP	AX,SHARING_DENY_NONE
 36402 0000694D 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36403                                  	;cmp	ax,30h
 36404 0000694F 83F830                  	CMP	AX,SHARING_DENY_READ
 36405 00006952 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36406                                  NET_LSEEK:
 36407                                  ;	JMP	short LOCAL_LSeek
 36408                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36409                                  	;CallInstall Net_Lseek,MultNET,33
 36410                                  	;JNC	short LSeekSetPos
 36411                                  
 36412 00006954 B82111                  	mov     ax,1121h
 36413 00006957 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36414                                  			; CX:DX = offset (in bytes) from end
 36415                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36416                                  			; SS = DOS CS
 36417                                  			; Return: CF set on error
 36418                                  			; CF clear if successful, DX:AX = new file position
 36419 00006959 73C0                    	jnb     short LSeekSetpos
 36420                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36421                                  	;jmp	SYS_RET_ERR
 36422                                  ;LSeekError3:
 36423                                  	; 17/12/2022
 36424                                  LSeekError:
 36425                                  	;jmp	short LSeekError2
 36426                                  DupErr:	; 17/12/2022
 36427 0000695B E9F49C                  	jmp	SYS_RET_ERR
 36428                                  
 36429                                  ;BREAK <FileTimes - modify write times on a handle>
 36430                                  ;----------------------------------------------------------------------------
 36431                                  ;
 36432                                  ;   Assembler usage:
 36433                                  ;	    MOV AH, FileTimes (57H)
 36434                                  ;	    MOV AL, func
 36435                                  ;	    MOV BX, handle
 36436                                  ;	; if AL = 1 then then next two are mandatory
 36437                                  ;	    MOV CX, time
 36438                                  ;	    MOV DX, date
 36439                                  ;	    INT 21h
 36440                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36441                                  ;	; for the handle.
 36442                                  ;
 36443                                  ;	AL=02		 get extended attributes
 36444                                  ;	   BX=handle
 36445                                  ;	   CX=size of buffer (0, return max size )
 36446                                  ;	   DS:SI query list (si=-1, selects all EA)
 36447                                  ;	   ES:DI buffer to hold EA list
 36448                                  ;
 36449                                  ;	AL=03		 get EA name list
 36450                                  ;	   BX=handle
 36451                                  ;	   CX=size of buffer (0, return max size )
 36452                                  ;	   ES:DI buffer to hold name list
 36453                                  ;
 36454                                  ;	AL=04		 set extended attributes
 36455                                  ;	   BX=handle
 36456                                  ;	   ES:DI buffer of EA list
 36457                                  ;
 36458                                  ;
 36459                                  ;   Error returns:
 36460                                  ;	    AX = error_invalid_function
 36461                                  ;	       = error_invalid_handle
 36462                                  ;
 36463                                  ;----------------------------------------------------------------------------
 36464                                  
 36465                                  ; 21/05/2019 - Retro DOS v4.0
 36466                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36467                                  
 36468                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36469                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36470                                  
 36471                                  _$FILE_TIMES:
 36472                                  	; 13/07/2018 - Retro DOS v3.0
 36473                                  
 36474                                  	; MSDOS 3.3
 36475                                  	;cmp	al,2			; correct subfunction ?
 36476                                  	;jb	short ft1
 36477                                  
 36478                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36479                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36480                                  						;SS Overr
 36481                                  	;;mov	al,1
 36482                                  	;mov	al,error_invalid_function ; give bad return
 36483                                  	;jmp	SYS_RET_ERR
 36484                                  
 36485                                  	; MSDOS 6.0
 36486 0000695E 3C02                    	cmp	al,2			; correct subfunction ?
 36487 00006960 7340                    	jae	short inval_func
 36488                                  ;ft1:
 36489 00006962 E87300                  	call	CheckOwner		; get sft
 36490                                  	; 17/12/2022
 36491 00006965 72F4                    	jc	short LSeekError	; bad handle
 36492                                  
 36493 00006967 08C0                    	or	al,al			; get time/date ?
 36494 00006969 7515                    	jnz	short ft_set_time
 36495                                  
 36496                                  ;------ here we get the time & date from the sft for the user
 36497                                  
 36498 0000696B FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36499                                  	;mov	cx,[es:di+13]
 36500 0000696C 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36501                                  	;mov	dx,[es:di+15]
 36502 00006970 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36503 00006974 FB                      	sti
 36504 00006975 E8179B                  	call	Get_User_Stack
 36505                                  	;mov	[si+4],cx
 36506 00006978 894C04                  	mov	[si+user_env.user_CX],cx
 36507                                  	;mov	[si+6],dx
 36508 0000697B 895406                  	mov	[si+user_env.user_DX],dx
 36509 0000697E EB1F                    	jmp	short ok_ret
 36510                                  
 36511                                  ;------ here we set the time in sft
 36512                                  
 36513                                  ft_set_time:
 36514 00006980 E8D3A9                  	call    ECritSFT
 36515                                  	;mov	[es:di+13],cx
 36516 00006983 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36517                                  	;mov	[es:di+15],dx
 36518 00006987 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36519                                  
 36520 0000698B 31C0                    	xor	ax, ax
 36521 0000698D 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36522                                  
 36523                                  ;------ set the flags in SFT entry
 36524                                  	;and	word [es:di+5],0FFBFh
 36525                                  	; 18/12/2022
 36526                                  	;and	byte [es:di+5],0BFh
 36527 00006992 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36528                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36529                                  							; mark file as dirty
 36530                                  	;or	word [es:di+5],4000h
 36531                                  	; 17/12/2022
 36532                                  	;or	byte [es:di+6],40h
 36533 00006997 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36534                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36535                                  							; ask close not to
 36536                                  							;   bother about date
 36537                                  							;   and time
 36538 0000699C E8D2A9                  	call	LCritSFT
 36539                                  ok_ret:
 36540                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36541                                  	; 17/12/2022
 36542 0000699F E9A79C                  	jmp	SYS_RET_OK
 36543                                  	;jmp	short LSeekOk
 36544                                  
 36545                                  inval_func:
 36546                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36547 000069A2 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36548                                  						;SS Overr
 36549                                  	;mov	al,1
 36550 000069A8 B001                    	mov	al,error_invalid_function ; give bad return
 36551                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36552                                  ft_error:
 36553                                  	;;jmp	SYS_RET_ERR
 36554                                  	;jmp	short LSeekError3
 36555                                  	; 17/12/2022
 36556 000069AA EBAF                    	jmp	short LSeekError
 36557                                  
 36558                                  ; 21/05/2019 - Retro DOS v4.0
 36559                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36560                                  
 36561                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36562                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36563                                  
 36564                                  ;BREAK <$DUP - duplicate a jfn>
 36565                                  ;----------------------------------------------------------------------------
 36566                                  ;
 36567                                  ;   Assembler usage:
 36568                                  ;	    MOV     BX, fh
 36569                                  ;	    MOV     AH, Dup
 36570                                  ;	    INT     int_command
 36571                                  ;	  AX has the returned handle
 36572                                  ;   Errors:
 36573                                  ;	    AX = dup_invalid_handle
 36574                                  ;	       = dup_too_many_open_files
 36575                                  ;
 36576                                  ;----------------------------------------------------------------------------
 36577                                  
 36578                                  _$DUP:
 36579 000069AC 89D8                    	MOV	AX,BX			; save away old handle in AX
 36580 000069AE E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36581                                  DupErrorCheck:
 36582 000069B1 72A8                    	JC	short DupErr		; nope, bye
 36583 000069B3 06                      	push	es
 36584 000069B4 57                      	push	di			; save away SFT
 36585 000069B5 5E                      	pop	si			; into convenient place DS:SI
 36586 000069B6 1F                      	pop	ds
 36587 000069B7 93                      	XCHG	AX,BX			; get back old handle
 36588 000069B8 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36589 000069BB 729E                    	JC	short DupErr		; errors go home
 36590 000069BD E8EAC0                  	call	DOS_Dup_Direct
 36591 000069C0 E800FD                  	call	pJFNFromHandle		; get pointer
 36592 000069C3 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36593 000069C6 881C                    	MOV	[SI],BL			; stuff in new SFT
 36594                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36595                                  	;jmp	SYS_RET_OK		; and go home
 36596 000069C8 EBD5                    	jmp	short ok_ret
 36597                                  
 36598                                  	; 17/12/2022
 36599                                  ;DupErr:
 36600                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36601                                  	;;jmp	SYS_RET_ERR
 36602                                  	;jmp	short ft_error
 36603                                  
 36604                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36605                                  ;----------------------------------------------------------------------------
 36606                                  ;
 36607                                  ;   Assembler usage:
 36608                                  ;	    MOV     BX, fh
 36609                                  ;	    MOV     CX, newfh
 36610                                  ;	    MOV     AH, Dup2
 36611                                  ;	    INT     int_command
 36612                                  ;   Error returns:
 36613                                  ;	    AX = error_invalid_handle
 36614                                  ;
 36615                                  ;----------------------------------------------------------------------------
 36616                                  
 36617                                  _$DUP2:
 36618 000069CA 53                      	push	bx
 36619 000069CB 51                      	push	cx			; save source
 36620 000069CC 89CB                    	MOV	BX,CX			; get one to close
 36621 000069CE E8AAFD                  	call	_$CLOSE			; close destination handle
 36622 000069D1 5B                      	pop	bx
 36623 000069D2 58                      	pop	ax			; old in AX, new in BX
 36624 000069D3 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36625 000069D6 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36626                                  
 36627                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36628                                  ;----------------------------------------------------------------------------
 36629                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36630                                  ;   process without the process knowing it (delete/rename of open files, for
 36631                                  ;   example), it is possible for the redirector to issue a call to a handle
 36632                                  ;   that it soes not rightfully own. We check here to make sure that the
 36633                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36634                                  ;   SFFromHandle to really make sure that the SFT is good.
 36635                                  ;
 36636                                  ;	ENTRY	BX has the handle
 36637                                  ;		User_ID is the current user
 36638                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36639                                  ;		Carry Set => AX has error code
 36640                                  ;	USES	none
 36641                                  ;----------------------------------------------------------------------------
 36642                                  
 36643                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36644                                  	; 21/05/2019 - Retro DOS v4.0
 36645                                  CheckOwner:
 36646                                  	; 13/07/2018 - Retro DOS v3.0
 36647                                  
 36648 000069D8 E805FD                  	call	SFFromHandle
 36649 000069DB 721B                    	jc	short co_ret_label	; retc
 36650                                  
 36651 000069DD 50                      	push	ax
 36652                                  
 36653                                  	; MSDOS 6.0
 36654                                  
 36655                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36656                                  ;SR; are shared across multiple VMs in win386.
 36657                                  
 36658 000069DE 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36659 000069E4 7404                    	jz	short no_win386		;win386 is not present
 36660 000069E6 31C0                    	xor	ax,ax			;set the zero flag
 36661 000069E8 EB08                    	jmp	short _skip_win386	
 36662                                  
 36663                                  no_win386:
 36664 000069EA 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36665                                  	;cmp	ax,[es:di+47]
 36666 000069EE 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36667                                  
 36668                                  _skip_win386:
 36669 000069F2 58                      	pop	ax
 36670                                  	
 36671                                  	; 17/12/2022
 36672 000069F3 7403                    	jz	short co_ret_label
 36673                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36674                                  	;jnz	short CheckOwner_err
 36675                                  	;retn
 36676                                  	
 36677                                  CheckOwner_err:
 36678                                  	;mov	al,6
 36679 000069F5 B006                    	mov	al,error_invalid_handle
 36680 000069F7 F9                      	stc
 36681                                  
 36682                                  co_ret_label:
 36683 000069F8 C3                      	retn
 36684                                  
 36685                                  ;============================================================================
 36686                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36687                                  ;============================================================================
 36688                                  ; Retro	DOS v3.0 - 11/07/2018
 36689                                  ; 21/05/2019 - Retro DOS v4.0
 36690                                  
 36691                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36692                                  ;	NAME	MACRO
 36693                                  
 36694                                  ;	Microsoft Confidential
 36695                                  ;	Copyright (C) Microsoft Corporation 1991
 36696                                  ;	All Rights Reserved.
 36697                                  
 36698                                  ;**	MACRO.ASM
 36699                                  ;
 36700                                  ;	$AssignOper
 36701                                  ;	FIND_DPB
 36702                                  ;	InitCDS
 36703                                  ;	$UserOper
 36704                                  ;	GetVisDrv
 36705                                  ;	GetThisDrv
 36706                                  ;	GetCDSFromDrv
 36707                                  ;
 36708                                  ;   Revision history:
 36709                                  ;
 36710                                  ;	Created: MZ 4 April 1983
 36711                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36712                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36713                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36714                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36715                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36716                                  ;				    aliasing.
 36717                                  ;
 36718                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36719                                  ;   each valid drive letter the text of the current directory on that drive.
 36720                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36721                                  ;   be at the root. A current directory is either the raw local directory
 36722                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36723                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36724                                  ;
 36725                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36726                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36727                                  ;   this and all * are expanded into ?'s.
 36728                                  ;
 36729                                  ;   The second part of name translation involves subtree aliasing. A list of
 36730                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36731                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36732                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36733                                  ;   replaced with the other subtree in the pair.
 36734                                  ;
 36735                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36736                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36737                                  ;   The output of the previous translation is examined to see if any of the
 36738                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36739                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36740                                  ;   'mount' one device under another.
 36741                                  ;
 36742                                  ;   The final form of name translation involves the mapping of a user's
 36743                                  ;   logical drive number into the internal physical drive. This is
 36744                                  ;   accomplished by converting the drive number into letter:CON, performing
 36745                                  ;   the above translation and then converting the character back into a drive
 36746                                  ;   number.
 36747                                  ;
 36748                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36749                                  ;   take a path and form the real text of the pathname with all . and ..
 36750                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36751                                  ;   TransPath.
 36752                                  ;
 36753                                  ;	A000	version 4.00  Jan. 1988
 36754                                  
 36755                                  ;Installed = TRUE
 36756                                  
 36757                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36758                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36759                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36760                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36761                                  ;					; current drive)
 36762                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36763                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36764                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36765                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36766                                  ;	I_need	MYNAME,16		; machine name
 36767                                  ;	I_need	MYNUM,WORD		; machine number
 36768                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36769                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36770                                  ;	I_need	DrvErr,BYTE		; drive error
 36771                                  
 36772                                  ;BREAK <$AssignOper -- Set up a Macro>
 36773                                  ;----------------------------------------------------------------------------
 36774                                  ; Inputs:
 36775                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36776                                  ;	AL = 01 set assign mode 		    (SetMode)
 36777                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36778                                  ;	AL = 03 Define Macro (attch start)
 36779                                  ;	    BL = Macro type
 36780                                  ;	       = 0 alias
 36781                                  ;	       = 1 file/device
 36782                                  ;	       = 2 drive
 36783                                  ;	       = 3 Char device -> network
 36784                                  ;	       = 4 File device -> network
 36785                                  ;	    DS:SI -> ASCIZ source name
 36786                                  ;	    ES:DI -> ASCIZ destination name
 36787                                  ;	AL = 04 Cancel Macro
 36788                                  ;	    DS:SI -> ASCIZ source name
 36789                                  ;	AL = 05 Modified get attach list entry
 36790                                  ;	AL = 06 Get ifsfunc item
 36791                                  ;	AL = 07 set in_use of a drive's CDS
 36792                                  ;	     DL = drive number, 0=default  0=A,,
 36793                                  ;	AL = 08 reset in_use of a drive's CDS
 36794                                  ;	     DL = drive number, 0=A, 1=B,,,
 36795                                  ; Function:
 36796                                  ;	Do macro stuff
 36797                                  ; Returns:
 36798                                  ;	Std Xenix style error return
 36799                                  ;----------------------------------------------------------------------------
 36800                                  
 36801                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36802                                  	; 21/05/2019 - Retro DOS v4.0
 36803                                  _$AssignOper:
 36804                                  	; MSDOS 6.0
 36805 000069F9 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36806 000069FB 7525                    	JNZ	short chk08		      ; no			;AN000;
 36807                                  srinuse:								;AN000;
 36808 000069FD 50                      	PUSH	AX			      ; save al 		;AN000;
 36809 000069FE 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36810 00006A00 E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36811 00006A03 58                      	POP	AX			      ; 			;AN000;
 36812 00006A04 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36813                                  	;cmp	word [si+45h],0
 36814 00006A06 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36815 00006A0A 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36816 00006A0C 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36817 00006A0E 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36818                                  	;or	word [si+43h],4000h
 36819                                  	; 17/12/2022
 36820                                  	;or	byte [si+44h],40h
 36821 00006A10 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36822                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36823 00006A14 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36824                                  resetdrv:
 36825                                  	;and	word [si+43h],0BFFFh									;AN000;
 36826                                  	; 18/12/2022
 36827 00006A16 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36828                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36829 00006A1A EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36830                                  
 36831                                  	; 17/12/2022
 36832                                  baddrv: 								;AN000;
 36833 00006A1C B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36834                                  
 36835                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36836                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36837                                  	; 17/12/2022
 36838                                  	; 21/05/2019
 36839                                  ASS_ERR:
 36840 00006A1F E9309C                  	jmp	SYS_RET_ERR
 36841                                  
 36842                                  chk08:									;AN000;
 36843 00006A22 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36844 00006A24 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36845                                  
 36846                                    ;IF	NOT INSTALLED
 36847                                  	;transfer NET_ASSOPER
 36848                                    ;ELSE
 36849                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36850 00006A26 50                      	PUSH	AX
 36851                                  	;mov	ax,111Eh
 36852                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36853 00006A27 B81E11                  	mov	ax,(MultNET*256)+30
 36854 00006A2A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36855                                  			; SS = DOS CS
 36856                                  			; STACK: WORD function to execute
 36857                                  			; Return: CF set on error, AX = error code
 36858                                  			; STACK unchanged
 36859 00006A2C 5B                      	POP	BX			; Don't zap error code in AX
 36860 00006A2D 72F0                    	JC	short ASS_ERR
 36861                                  okdone:
 36862 00006A2F E9179C                  	jmp	SYS_RET_OK
 36863                                  
 36864                                  	; 17/12/2022
 36865                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36866                                  ;ASS_ERR:
 36867                                  	;jmp	SYS_RET_ERR
 36868                                  
 36869                                    ;ENDIF
 36870                                  
 36871                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36872                                  ;----------------------------------------------------------------------------
 36873                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36874                                  ;
 36875                                  ;	ENTRY	AL has drive number A = 0
 36876                                  ;	EXIT	'C' set
 36877                                  ;		    No DPB for this drive number
 36878                                  ;		'C' clear
 36879                                  ;		    DS:SI points to DPB for drive
 36880                                  ;	USES	SI, DS, Flags
 36881                                  ;----------------------------------------------------------------------------
 36882                                  
 36883                                  	; 21/05/2019 - Retro DOS v4.0
 36884                                  FIND_DPB:
 36885 00006A32 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36886                                  fdpb5:	
 36887 00006A37 83FEFF                  	CMP	SI,-1
 36888 00006A3A 7409                    	JZ	short fdpb10
 36889 00006A3C 3A04                    	cmp	al,[si]
 36890                                  	;CMP	AL,[SI+DPB.DRIVE]
 36891 00006A3E 7406                    	jz	short ret_label15	; Carry clear (retz)
 36892                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36893                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36894 00006A40 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36895 00006A43 EBF2                    	JMP	short fdpb5
 36896                                  fdpb10:	
 36897 00006A45 F9                      	STC
 36898                                  ret_label15:
 36899 00006A46 C3                      	retn
 36900                                  
 36901                                  ;	Break <InitCDS - set up an empty CDS>
 36902                                  ;----------------------------------------------------------------------------
 36903                                  ;**	InitCDS - Setup an Empty CDS
 36904                                  ;
 36905                                  ;	ENTRY	ThisCDS points to CDS
 36906                                  ;		AL has uppercase drive letter
 36907                                  ;	EXIT	ThisCDS is now empty
 36908                                  ;		(ES:DI) = CDS
 36909                                  ;		'C' set if no DPB associated with drive
 36910                                  ;	USES	AH,ES,DI, Flags
 36911                                  ;----------------------------------------------------------------------------
 36912                                  
 36913                                  ; 21/05/2019 - Retro DOS v4.0
 36914                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36915                                  
 36916                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36917                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36918                                  
 36919                                  InitCDS:
 36920                                  	; 19/08/2018
 36921                                  	; 05/08/2018 - Retro DOS v3.0
 36922                                  	; MSDOS 6.0
 36923 00006A47 50                      	push	ax			; save (AL) for caller
 36924 00006A48 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36925                                  	;mov	word [es:di+67],0
 36926 00006A4D 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36927 00006A53 2C40                    	SUB	AL,"A"-1                ; A = 1
 36928 00006A55 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36929 00006A5A 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36930 00006A5C 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36931 00006A5D 50                      	PUSH	AX			; save drive number for later
 36932 00006A5E 0441                    	add	al,"A"
 36933 00006A60 B43A                    	MOV	AH,':'
 36934 00006A62 268905                  	mov	[ES:DI],ax
 36935                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36936                                  	;mov	ax,"\"
 36937                                  	;mov	[es:di+2],ax
 36938                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36939 00006A65 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36940                                  	;or	word [es:di+67],4000h
 36941                                  	;or	byte [es:di+68],40h
 36942 00006A6B 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36943 00006A70 29C0                    	sub	ax,ax
 36944                                  	;MOV	[es:di+73],ax ; 0
 36945 00006A72 26894549                	MOV	[ES:DI+curdir.ID],ax
 36946                                  	;mov	[es:di+75],ax ; 0
 36947 00006A76 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36948 00006A7A B002                    	mov	al,2
 36949                                  	;mov	[es:di+79],aX ; 2
 36950 00006A7C 2689454F                	MOV	[ES:DI+curdir.end],ax
 36951 00006A80 58                      	POP	AX			; (al) = drive number
 36952 00006A81 1E                      	push	ds
 36953 00006A82 56                      	push	si
 36954 00006A83 E8ACFF                  	call	FIND_DPB
 36955 00006A86 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36956                                  	;mov	[es:di+69],si
 36957 00006A88 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36958                                  	;mov	[es:di+71],ds
 36959 00006A8C 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36960                                  icds5:	
 36961 00006A90 5E                      	pop	si
 36962 00006A91 1F                      	pop	ds
 36963                                  icdsx:	
 36964 00006A92 58                      	pop	ax
 36965                                  RET45:
 36966 00006A93 C3                      	retn
 36967                                  
 36968                                  ;Break <$UserOper - get/set current user ID (for net)>
 36969                                  ;----------------------------------------------------------------------------
 36970                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36971                                  ;	maintain this string and do no verifications.
 36972                                  ;
 36973                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36974                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36975                                  ;		DS:DX is user string pointer (calls 1,2)
 36976                                  ;		ES:DI is user buffer (call 3)
 36977                                  ;		BX is assign index (calls 2,3,4,5)
 36978                                  ;		CX is user number (call 1)
 36979                                  ;		DX is flag word (call 4)
 36980                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36981                                  ;			and user CX is set to the user number
 36982                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36983                                  ;		If AL = 5 then DX is flag word
 36984                                  ;----------------------------------------------------------------------------
 36985                                  
 36986                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36987                                  	; 21/05/2019 - Retro DOS v4.0
 36988                                  _$UserOper:
 36989                                  	; 05/08/2018 - Retro DOS v3.0
 36990                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36991 00006A94 50                      	PUSH	AX
 36992 00006A95 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36993 00006A97 58                      	POP	AX
 36994 00006A98 7211                    	JB	short UserGet 		; return to user the string
 36995 00006A9A 742E                    	JZ	short UserSet 		; set the current user
 36996 00006A9C 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36997 00006A9E 763D                    	JBE	short UserPrint		; yep
 36998                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36999 00006AA0 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 37000                                  					; Extended Error Locus
 37001                                  	;error	error_invalid_function	; not 0,1,2,3
 37002                                  	;mov	al,1
 37003 00006AA6 B001                    	MOV	AL,error_invalid_function
 37004                                  useroper_error:
 37005                                  	; 17/12/2022
 37006                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37007 00006AA8 E9A79B                  	JMP	SYS_RET_ERR
 37008                                  	;jmp	short ASS_ERR
 37009                                  
 37010                                  UserGet:
 37011                                  ; Transfer MYNAME to DS:DX
 37012                                  ; Set Return CX to MYNUM
 37013 00006AAB 1E                      	PUSH	DS			; switch registers
 37014 00006AAC 07                      	POP	ES
 37015 00006AAD 89D7                    	MOV	DI,DX			; destination
 37016 00006AAF 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 37017 00006AB4 E8D899                  	call	Get_User_Stack
 37018                                  	;mov	[si+4],cx
 37019 00006AB7 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 37020 00006ABA 16                      	push	ss			; point to DOSDATA
 37021 00006ABB 1F                      	pop	ds
 37022 00006ABC BE[0503]                	MOV	SI,MYNAME		; point source to user string
 37023                                  UserMove:
 37024 00006ABF B90F00                  	MOV	CX,15
 37025 00006AC2 F3A4                    	REP	MOVSB			; blam.
 37026 00006AC4 31C0                    	XOR	AX,AX			; 16th byte is 0
 37027 00006AC6 AA                      	STOSB
 37028                                  UserBye:
 37029 00006AC7 E97F9B                  	jmp	SYS_RET_OK		; no errors here
 37030                                  
 37031                                  UserSet:
 37032                                  ; Transfer DS:DX to MYNAME
 37033                                  ; CX to MYNUM
 37034 00006ACA 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 37035 00006ACF 89D6                    	MOV	SI,DX			; user space has source
 37036 00006AD1 16                      	push	ss
 37037 00006AD2 07                      	pop	es
 37038 00006AD3 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 37039 00006AD6 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 37040 00006ADB EBE2                    	JMP	short UserMove
 37041                                  
 37042                                  UserPrint:
 37043                                  
 37044                                    ;IF NOT Installed
 37045                                    ;	transfer PRINTER_GETSET_STRING
 37046                                    ;ELSE
 37047 00006ADD 50                      	PUSH	AX
 37048                                  	;mov	ax,111Fh
 37049                                  	;MOV	AX,(MultNET SHL 8) OR 31
 37050 00006ADE B81F11                  	mov	ax,(MultNET<<8)|31
 37051 00006AE1 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 37052                                  			; STACK: WORD function
 37053                                  			; Return: CF set on error, AX = error code
 37054                                  			; STACK unchanged
 37055 00006AE3 5A                      	POP	DX			; Clean stack
 37056                                  	;JNC	short OKPA
 37057 00006AE4 73E1                    	jnc	short UserBye ; 21/05/2019
 37058                                  	; 17/12/2022
 37059 00006AE6 EBC0                    	jmp	short useroper_error
 37060                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37061                                  	;jnb     short OKPA
 37062                                  	;jmp     short useroper_error
 37063                                  
 37064                                  	; 17/12/2022
 37065                                  ;OKPA:
 37066                                  ;	jmp	short UserBye
 37067                                  
 37068                                    ;ENDIF
 37069                                  
 37070                                  
 37071                                  ;Break	<GetVisDrv - return visible drive>
 37072                                  ;----------------------------------------------------------------------------
 37073                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 37074                                  ;
 37075                                  ;   Inputs:	AL has drive identifier (0=default)
 37076                                  ;   Outputs:	Carry Set - invalid drive/macro
 37077                                  ;		Carry Clear - AL has physical drive (0=A)
 37078                                  ;		    ThisCDS points to CDS
 37079                                  ;   Registers modified: AL
 37080                                  ;----------------------------------------------------------------------------
 37081                                  
 37082                                  	; 21/05/2019 - Retro DOS v4.0
 37083                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 37084                                  
 37085                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37086                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 37087                                  GetVisDrv:
 37088                                  	; 05/08/2018 - Retro DOS v3.0
 37089                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 37090 00006AE8 E81900                  	CALL	GETTHISDRV		; get inuse drive
 37091 00006AEB 72A6                    	jc	short RET45
 37092 00006AED 1E                      	push	ds
 37093 00006AEE 56                      	push	si
 37094 00006AEF 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 37095                                  	;test	word [si+67],2000h
 37096                                  	; 17/12/2022
 37097                                  	;test	byte [si+68],20h
 37098 00006AF4 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 37099                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37100 00006AF8 5E                      	pop	si
 37101 00006AF9 1F                      	pop	ds
 37102 00006AFA 7497                    	jz	short RET45		; if not spliced, return OK
 37103                                  	; MSDOS 6.0
 37104                                  	;mov	byte [ss:DrvErr],0Fh
 37105 00006AFC 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 37106 00006B02 F9                      	STC				; signal error
 37107 00006B03 C3                      	retn
 37108                                  
 37109                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 37110                                  ;----------------------------------------------------------------------------
 37111                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 37112                                  ;	macro pointer
 37113                                  ;
 37114                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 37115                                  ;   Outputs:
 37116                                  ;		Carry Set - invalid drive/macro
 37117                                  ;		Carry Clear - AL has physical drive (0=A)
 37118                                  ;		   ThisCDS points to macro
 37119                                  ;   Registers modified: AL
 37120                                  ;----------------------------------------------------------------------------
 37121                                  
 37122                                  	; 21/05/2019 - Retro DOS v4.0
 37123                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 37124                                  
 37125                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37126                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 37127                                  GETTHISDRV:
 37128                                  	; 05/08/2018
 37129                                  	; 12/07/2018 - Retro DOS v3.0
 37130                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 37131                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37132 00006B04 08C0                    	OR	AL,AL			; are we using default drive?
 37133 00006B06 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 37134 00006B08 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 37135                                  	;INC	ax			; Counteract next instruction
 37136                                  	; 04/09/2018
 37137                                  	;inc	al
 37138                                  	; 07/12/2022
 37139 00006B0C 40                      	inc	ax
 37140                                  GTD10:	
 37141                                  	;DEC	AX
 37142                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37143 00006B0D 48                      	dec	ax			; 0 = A
 37144                                  	;dec	al
 37145 00006B0E 1E                      	PUSH	DS			; save world
 37146 00006B0F 56                      	PUSH	SI
 37147                                  	;mov	byte [ss:EXTERR_LOCUS],2
 37148 00006B10 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 37149 00006B16 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 37150 00006B1C 7420                    	JZ	SHORT GTD20		; Logical
 37151 00006B1E 50                      	PUSH	AX
 37152 00006B1F 06                      	PUSH	ES
 37153 00006B20 57                      	PUSH	DI
 37154 00006B21 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 37155                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 37156 00006B28 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 37157 00006B2D 0441                    	ADD	AL,'A'
 37158 00006B2F E815FF                  	CALL	InitCDS			; InitCDS(c);
 37159                                  	;test	word [es:di+67],4000h
 37160                                  	; 17/12/2022
 37161                                  	;test	byte [es:di+68],40h
 37162 00006B32 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 37163                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 37164 00006B37 5F                      	POP	DI
 37165 00006B38 07                      	POP	ES
 37166 00006B39 58                      	POP	AX
 37167 00006B3A 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 37168 00006B3C EB18                    	JMP	SHORT GTDX		; carry clear
 37169                                  GTD20:
 37170 00006B3E E81800                  	CALL	GetCDSFromDrv
 37171 00006B41 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 37172                                  	;test	word [si+43h],4000h
 37173                                  	; 17/12/2022
 37174                                  	;test	byte [si+44h],40h
 37175 00006B43 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 37176                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 37177 00006B47 750D                    	JNZ	SHORT GTDX		; carry clear
 37178                                  GTD30:	
 37179                                  	; 21/05/2019
 37180                                  	; MSDOS 6.0
 37181 00006B49 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 37182 00006B4B 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 37183                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 37184 00006B4F 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 37185 00006B55 F9                      	STC
 37186                                  GTDX:	
 37187 00006B56 5E                      	POP	SI			; restore world
 37188 00006B57 1F                      	POP	DS
 37189 00006B58 C3                      	RETN
 37190                                   
 37191                                  
 37192                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 37193                                  ;----------------------------------------------------------------------------
 37194                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 37195                                  ;	pointer, returning an error if the drive number is greater than the
 37196                                  ;	number of CDS's
 37197                                  ;
 37198                                  ;   Inputs:	AL is physical unit # A=0...
 37199                                  ;   Outputs:	Carry Set if Bad Drive
 37200                                  ;		Carry Clear
 37201                                  ;		    DS:SI -> CDS
 37202                                  ;		    [THISCDS] = DS:SI
 37203                                  ;   Registers modified: DS,SI
 37204                                  ;----------------------------------------------------------------------------
 37205                                  
 37206                                  	; 21/05/2019 - Retro DOS v4.0
 37207                                  GetCDSFromDrv:
 37208 00006B59 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37209                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 37210                                  	;STC				; signal error
 37211                                  	;RETN				; bye
 37212                                  	; 23/09/2023
 37213 00006B5E F5                      	cmc	; cf=1 <-> cf=0
 37214 00006B5F 7217                    	jc	short GetCDS_retn
 37215                                  GetCDS:
 37216                                  	; 23/09/2023
 37217                                  	;PUSH	BX
 37218 00006B61 50                      	PUSH	AX
 37219 00006B62 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37220                                  	;mov	bl,81 ; MSDOS 3.3
 37221                                  	;mov	bl,88 ; MSDOS 6.0 
 37222                                  	; 23/09/2023
 37223                                  	;MOV	BL,curdir.size		; size in convenient spot
 37224                                  	;MUL	BL			; get net offset
 37225 00006B67 B458                    	mov	ah,curdir.size
 37226 00006B69 F6E4                    	mul	ah
 37227 00006B6B 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 37228 00006B6D 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37229 00006B72 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37230 00006B77 58                      	POP	AX
 37231                                  	; 23/09/2023
 37232                                  	;POP	BX
 37233                                  	; (cf must be 0 here) ; *
 37234                                  	;CLC				; no error
 37235                                  GetCDS_retn:
 37236 00006B78 C3                      	RETN				; bye!
 37237                                  
 37238                                  ;============================================================================
 37239                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37240                                  ;============================================================================
 37241                                  ; Retro	DOS v3.0 - 12/07/2018
 37242                                  ; 22/05/2019 - Retro DOS v4.0
 37243                                  
 37244                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37245                                  ;----------------------------------------------------------------------------
 37246                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37247                                  ;       gritty substitution.
 37248                                  ;
 37249                                  ;   Inputs:     DS:DX - pointer to FCB
 37250                                  ;               ES:DI - point to destination
 37251                                  ;   Outputs:    Carry Set - invalid path in final map
 37252                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37253                                  ;                   Sattrib is set from possibly extended FCB
 37254                                  ;                   ExtFCB set if extended FCB found
 37255                                  ;   Registers modified: most
 37256                                  ;----------------------------------------------------------------------------
 37257                                  
 37258                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37259                                  TransFCB:
 37260                                  	; 22/05/2019 - Retro DOS v4.0
 37261                                  	; 12/07/2018 - Retro DOS v3.0
 37262                                  	;LocalVar FCBTmp,16
 37263                                  	;ENTER
 37264 00006B79 55                      	push	bp
 37265 00006B7A 89E5                    	mov	bp,sp
 37266                                  	;sub	sp,15	; MSDOS 3.3
 37267 00006B7C 83EC10                  	sub	sp,16	; MSDOS 6.0
 37268 00006B7F 16                      	push	ss
 37269 00006B80 07                      	pop	es
 37270 00006B81 06                      	push	es
 37271 00006B82 57                      	push	di
 37272                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37273                                  	;LEA	DI,FCBTmp 
 37274 00006B83 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37275 00006B86 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37276 00006B8C 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37277 00006B92 E82EB1                  	call	GetExtended             ; get FCB, extended or not
 37278                                  	; 06/12/2022
 37279 00006B95 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37280 00006B97 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37281 00006B9A 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37282 00006B9E 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37283                                  GetDrive:
 37284 00006BA4 AC                      	lodsb				; get drive byte
 37285 00006BA5 E85CFF                  	call	GETTHISDRV
 37286 00006BA8 722A                    	jc	short BadPack
 37287 00006BAA E87303                  	call	TextFromDrive           ; convert 0-based drive to text
 37288                                  
 37289                                  ; Scan the source to see if there are any illegal chars
 37290                                  
 37291                                  	;mov	bx,CharType		; load lookup table
 37292 00006BAD B90B00                  	mov	cx,11
 37293 00006BB0 56                      	push	si			; back over name, ext
 37294                                  FCBScan:
 37295 00006BB1 AC                      	lodsb				; get a byte
 37296                                  	
 37297                                  	; 09/08/2018
 37298                                  	;;xlat	byte [es:bx]
 37299                                  	;es	xlat
 37300                                  
 37301                                  	; 22/05/2019 - Retro DOS v4.0	
 37302 00006BB2 E82FE5                  	call	GetCharType		; get flags
 37303                                  
 37304                                  	;test	al,8	
 37305 00006BB5 A808                    	test	al,FFCB
 37306 00006BB7 741B                    	jz	short BadPack
 37307                                  NextCh: 
 37308 00006BB9 E2F6                    	loop	FCBScan
 37309 00006BBB 5E                      	pop	si
 37310 00006BBC 89FB                    	mov	bx,di
 37311 00006BBE E85BB5                  	call	PackName                ; crunch the path
 37312 00006BC1 5F                      	pop	di			; get original destination
 37313 00006BC2 07                      	pop	es
 37314 00006BC3 16                      	push	ss			; get DS addressability
 37315 00006BC4 1F                      	pop	ds
 37316                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37317                                  	;LEA	SI,FCBTmp		; point at new pathname
 37318 00006BC5 8D76F0                  	lea	si,[bp-16]
 37319 00006BC8 803F00                  	cmp	byte [bx],0
 37320 00006BCB 7407                    	jz	short BadPack
 37321 00006BCD 55                      	push	bp
 37322 00006BCE E80E00                  	call	TransPathSet            ; convert the path
 37323 00006BD1 5D                      	pop	bp
 37324 00006BD2 7303                    	jnc	short FCBRet		; bye with transPath error code
 37325                                  BadPack:
 37326 00006BD4 F9                      	STC
 37327                                  	;mov	al,3
 37328 00006BD5 B003                    	MOV     AL,error_path_not_found
 37329                                  FCBRet: 
 37330                                  	;LEAVE
 37331 00006BD7 89EC                    	mov	sp,bp
 37332 00006BD9 5D                      	pop	bp
 37333                                  TransPath_retn:
 37334 00006BDA C3                      	retn
 37335                                  
 37336                                  ; 12/07/2018 - Retro DOS v3.0
 37337                                  
 37338                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37339                                  ;----------------------------------------------------------------------------
 37340                                  ;
 37341                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37342                                  ;       substitution, insertion of current directory and fixing . and ..
 37343                                  ;       entries. Perform splicing. Allow input string to match splice
 37344                                  ;       exactly.
 37345                                  ;
 37346                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37347                                  ;       matches splice.
 37348                                  ;
 37349                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37350                                  ;
 37351                                  ;   The following anomalous behaviour is required:
 37352                                  ;
 37353                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37354                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37355                                  ;       Raw net I/O sets ThisCDS => NULL.
 37356                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37357                                  ;
 37358                                  ;   Other behaviour:
 37359                                  ;
 37360                                  ;       ThisCDS set up.
 37361                                  ;       FatRead done on local CDS.
 37362                                  ;       ValidateCDS done on local CDS.
 37363                                  ;
 37364                                  ;   Brief flowchart:
 37365                                  ;
 37366                                  ;       if fSharing then
 37367                                  ;           set up DummyCDS (ThisCDS)
 37368                                  ;           canonicalize (sets cMeta)
 37369                                  ;           splice
 37370                                  ;           fatRead
 37371                                  ;           return
 37372                                  ;       if \\ or d:\\ lead then
 37373                                  ;           set up null CDS (ThisCDS)
 37374                                  ;           canonicalize (sets cMeta)
 37375                                  ;           return
 37376                                  ;       if device then
 37377                                  ;           set up dummyCDS (ThisCDS)
 37378                                  ;           canonicalize (sets cMeta)
 37379                                  ;           return
 37380                                  ;       if file then
 37381                                  ;           getCDS (sets (ThisCDS) from name)
 37382                                  ;           validateCDS (may reset current dir)
 37383                                  ;           Copy current dir
 37384                                  ;           canonicalize (set cMeta)
 37385                                  ;           splice
 37386                                  ;           generate correct CDS (ThisCDS)
 37387                                  ;           if local then
 37388                                  ;               fatread
 37389                                  ;           return
 37390                                  ;
 37391                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37392                                  ;               DI - point to buffer in DOSDATA
 37393                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37394                                  ;                   syntax, etc. or user FAILed to I 24.
 37395                                  ;               WFP_Start - points to beginning of buffer
 37396                                  ;               Curr_Dir_End - points to end of current dir in path
 37397                                  ;               DS - DOSDATA
 37398                                  ;   Registers modified: most
 37399                                  ;
 37400                                  ;----------------------------------------------------------------------------
 37401                                  
 37402                                  ; 22/05/2019
 37403                                  ; 13/05/2019 - Retro DOS v4.0
 37404                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37405                                  
 37406                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37407                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37408                                  
 37409                                  TransPath:
 37410 00006BDB 30C0                    	XOR     AL,AL
 37411 00006BDD EB02                    	JMP     SHORT SetSplice
 37412                                  TransPathSet:
 37413 00006BDF B0FF                    	MOV     AL,-1
 37414                                  SetSplice:
 37415 00006BE1 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37416 00006BE5 B0FF                    	MOV     AL,-1
 37417                                  TransPathNoSet:
 37418 00006BE7 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37419 00006BEB 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37420 00006BF1 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37421 00006BF6 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37422 00006BFD 16                      	push	ss
 37423 00006BFE 07                      	pop	es
 37424                                  	;lea	bp,[di+134]
 37425 00006BFF 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37426                                  ;
 37427                                  ; if this is through the server dos call, fsharing is set. We set up a
 37428                                  ; dummy cds and let the operation go.
 37429                                  ;
 37430 00006C03 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37431 00006C09 7435                    	JZ	short CheckUNC		; skip to UNC check
 37432                                  ;
 37433                                  ; ES:DI point to buffer
 37434                                  ;
 37435 00006C0B E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37436 00006C0E E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37437 00006C11 722A                    	jc	short NoPath
 37438 00006C13 E80A03                  	CALL	TextFromDrive		; drop in new
 37439 00006C16 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37440 00006C19 E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37441 00006C1C 72BC                    	jc	short TransPath_retn	; errors
 37442                                  ;
 37443                                  ; Perform splices for net guys.
 37444                                  ;
 37445 00006C1E 16                      	push	ss
 37446 00006C1F 1F                      	pop	ds
 37447 00006C20 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37448 00006C24 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37449 00006C29 7403                    	JZ	short NoServerSplice
 37450 00006C2B E83102                  	CALL    Splice
 37451                                  NoServerSplice:
 37452 00006C2E 16                      	push	ss
 37453 00006C2F 1F                      	pop	ds                      ; for FATREAD
 37454 00006C30 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37455 00006C34 E81FA7                  	call	ECritDisk
 37456 00006C37 E801EB                  	call	FATREAD_CDS
 37457 00006C3A E834A7                  	call	LCritDisk
 37458                                  NoPath:
 37459                                  	;mov	al,3
 37460 00006C3D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37461 00006C3F C3                      	retn				; any errors are in Carry flag
 37462                                  
 37463                                  ; Let the network decide if the name is for a spooled device. It will map
 37464                                  ; the name if so.
 37465                                  
 37466                                  CheckUNC:
 37467 00006C40 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37468                                  	;CallInstall NetSpoolCheck,MultNET,35
 37469 00006C47 B82311                  	mov	ax,1123h
 37470 00006C4A CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37471                                  			; DS:SI -> ASCIZ filename to canonicalize
 37472                                  			; ES:DI -> 128-byte buffer for qualified name
 37473                                  			; Return: CF set if not resolved
 37474 00006C4C 7329                    	JNC	short UNCDone
 37475                                  
 37476                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37477                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37478                                  ; input, then the name has been changed to the remote spooler by the above net
 37479                                  ; call. Also, there may be a drive in front of the \\.
 37480                                  
 37481                                  NO_CHECK:
 37482 00006C4E E8B902                  	CALL    DriveFromText		; eat drive letter
 37483 00006C51 50                      	PUSH    AX                      ; save it
 37484 00006C52 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37485 00006C54 E8AAE4                  	call    PATHCHRCMP              ; convert to normal form
 37486 00006C57 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37487 00006C59 E8A5E4                  	call    PATHCHRCMP              ; convert to normal form
 37488 00006C5C 751F                    	JNZ	short CheckDevice	; not a path char
 37489 00006C5E 38C4                    	CMP     AH,AL                   ; are they same?
 37490 00006C60 751B                    	JNZ	short CheckDevice	; nope
 37491                                  
 37492                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37493                                  ; local machine root path
 37494                                  
 37495 00006C62 58                      	POP     AX
 37496 00006C63 A5                      	MOVSW                           ; get the lead \\.
 37497                                  UNCCpy:
 37498 00006C64 AC                      	LODSB                           ; get a byte
 37499 00006C65 E844E4                   	call	UCase                   ;AN000;; convert the char
 37500 00006C68 08C0                    	OR      AL,AL
 37501 00006C6A 740E                    	JZ	short UNCTerm		; end of string. All done.
 37502 00006C6C E892E4                  	call    PATHCHRCMP              ; is it a path char?
 37503 00006C6F 89FB                    	MOV     BX,DI                   ; backup position
 37504 00006C71 AA                      	STOSB
 37505 00006C72 75F0                    	JNZ	short UNCCpy		; no, go copy
 37506 00006C74 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37507                                  UNCDone:
 37508 00006C77 16                      	push	ss
 37509 00006C78 1F                      	pop	ds
 37510 00006C79 C3                       	retn				; return error code
 37511                                  UNCTerm:
 37512 00006C7A AA                      	STOSB                           ;AN000;
 37513 00006C7B EBFA                    	JMP	short UNCDone		;AN000;
 37514                                  
 37515                                  CheckDevice:
 37516                                  
 37517                                  ; Check DS:SI for device. First eat any path stuff
 37518                                  
 37519 00006C7D 58                      	POP     AX                      ; retrieve drive info
 37520 00006C7E 803C00                  	CMP     BYTE [SI],0		; check for null file
 37521 00006C81 7504                    	JNZ	short CheckPath
 37522                                  	;mov	al,2 
 37523 00006C83 B002                    	MOV     AL,error_file_not_found ; bad file error
 37524 00006C85 F9                      	STC                             ; signal error on null input
 37525 00006C86 C3                      	RETN				; bye!
 37526                                  CheckPath:
 37527 00006C87 50                      	push	ax
 37528 00006C88 55                      	push	bp			; save drive number
 37529                                  
 37530                                  
 37531                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37532                                  %if 0
 37533                                  	; MSDOS 6.0
 37534                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37535                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37536                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37537                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37538                                  ;;;end up having a 5D in the opcode's displacement field. The
 37539                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37540                                  ;;;
 37541                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37542                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37543                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37544                                  ;;;
 37545                                  ;;;More info:
 37546                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37547                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37548                                  ;;;
 37549                                  	call	no5Dshere
 37550                                  start5Dhack:
 37551                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37552                                  backfrom5Dhack:
 37553                                  
 37554                                  %endif
 37555                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37556                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37557 00006C89 E8F7D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37558                                  
 37559 00006C8C 5D                      	pop	bp
 37560 00006C8D 58                      	pop	ax			; get drive letter back
 37561 00006C8E 731C                    	JNC	short DoFile		; yes we have a file.
 37562                                  
 37563                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37564                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37565                                  ; call.
 37566                                  
 37567 00006C90 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37568 00006C96 E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37569 00006C99 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37570                                  
 37571                                  ; Now that we have noted that we have a device, we put it into a form that
 37572                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37573                                  ; string. We relax this to state that if the d:\ is present then the path
 37574                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37575                                  ; a device.
 37576                                  
 37577 00006C9F E87E02                  	CALL    TextFromDrive
 37578 00006CA2 B02F                    	MOV     AL,'/'                  ; path sep.
 37579 00006CA4 AA                      	STOSB
 37580 00006CA5 E872A5                  	call	StrCpy			; move remainder of string
 37581                                  
 37582 00006CA8 F8                      	CLC                             ; everything OK.
 37583 00006CA9 16                      	push	ss
 37584 00006CAA 1F                      	pop	ds                      ; remainder of OK stuff
 37585                                  DoFile_retn:
 37586 00006CAB C3                      	retn
 37587                                  
 37588                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37589                                  %if 0
 37590                                  
 37591                                  no5Dshere:
 37592                                  	; 10/08/2018
 37593                                  	jmp	CheckThisDevice		; snoop for device
 37594                                  %endif
 37595                                  
 37596                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37597                                  
 37598                                  ; We have a file. Get the raw CDS.
 37599                                  
 37600                                  DoFile:
 37601                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37602                                  
 37603 00006CAC E839FE                  	call	GetVisDrv               ; get proper CDS
 37604                                  	;mov	al,3 
 37605 00006CAF B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37606 00006CB1 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37607                                  
 37608                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37609                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37610                                  ; Use the one that we are going to use (ES:DI).
 37611                                  
 37612                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37613 00006CB3 1E                      	push	ds
 37614 00006CB4 56                      	push	si
 37615 00006CB5 06                      	push	es
 37616 00006CB6 57                      	push	di
 37617 00006CB7 E80DD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 37618                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37619 00006CBA 5F                      	pop	di
 37620 00006CBB 07                      	pop	es
 37621 00006CBC 5E                      	pop	si
 37622 00006CBD 1F                      	pop	ds
 37623                                  	;mov	al,3
 37624 00006CBE B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37625                                  	;retc				; someone failed an operation
 37626 00006CC0 72E9                    	jc	short DoFile_retn
 37627                                  
 37628                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37629                                  ; current directory. Copy it in.
 37630                                  
 37631 00006CC2 1E                      	push	ds
 37632 00006CC3 56                      	push	si
 37633 00006CC4 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37634 00006CC9 89FB                    	MOV     BX,DI                   ; point to destination
 37635                                  	;add	bx,[si+79] ; MSDOS 6.0
 37636 00006CCB 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37637                                  	;lea	bp,[di+134]
 37638 00006CCE 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37639                                  					;AN000;
 37640 00006CD2 E854A5                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37641 00006CD5 4F                      	DEC     DI                      ; point to NUL byte
 37642                                  
 37643                                  ; Make sure that there is a path char at end.
 37644                                  
 37645 00006CD6 B05C                    	MOV     AL,'\'
 37646 00006CD8 263845FF                	CMP     [ES:DI-1],AL
 37647 00006CDC 7401                    	JZ	short GetOrig
 37648 00006CDE AA                      	STOSB
 37649                                  
 37650                                  ; Now get original string.
 37651                                  
 37652                                  GetOrig:
 37653 00006CDF 4F                      	DEC     DI                      ; point to path char
 37654 00006CE0 5E                      	pop	si
 37655 00006CE1 1F                      	pop	ds
 37656                                  
 37657                                  ; BX points to the end of the root part of the CDS (at where a path char
 37658                                  ; should be). Now, we decide whether we use this root or extend it with the
 37659                                  ; current directory. See if the input string begins with a leading 
 37661 00006CE2 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37662 00006CE5 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37663 00006CE7 08C0                    	OR      AL,AL                   ; end of string?
 37664 00006CE9 7410                    	JZ	short DoCanon		; yes, skip.
 37665                                  ;
 37666                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37667                                  ; to this root. Make sure that there is a path char there and advance the
 37668                                  ; source string over all leading \'s.
 37669                                  ;
 37670 00006CEB 89DF                    	MOV     DI,BX                   ; back up to root point.
 37671                                  SkipPath:
 37672 00006CED AC                      	LODSB
 37673 00006CEE E810E4                  	call    PATHCHRCMP
 37674 00006CF1 74FA                    	JZ	short SkipPath
 37675 00006CF3 4E                      	DEC     SI
 37676 00006CF4 08C0                    	OR      AL,AL
 37677 00006CF6 7403                    	JZ	short DoCanon
 37678                                  
 37679                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37680                                  ; for yucks.
 37681                                  
 37682                                  PathAssure:
 37683 00006CF8 B05C                    	MOV     AL,'\'	; 5Ch
 37684 00006CFA AA                      	STOSB
 37685                                  
 37686                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37687                                  ; BP is the max extent to advance DI
 37688                                  ; BX is the backup limit for ..
 37689                                  
 37690                                  DoCanon:
 37691 00006CFB E85200                  	CALL    Canonicalize            ; wham.
 37692                                  	;retc				; badly formatted path.
 37693 00006CFE 72AB                    	jc	short DoFile_retn
 37694                                  
 37695                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37696                                  ; to wfp_start and do string substitution. BP is still the max position in
 37697                                  ; buffer.
 37698                                  
 37699 00006D00 16                      	push	ss
 37700 00006D01 1F                      	pop	ds
 37701 00006D02 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37702 00006D06 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37703 00006D0A E81B02                  	CALL    PathPref                ; is there a prefix?
 37704 00006D0D 7514                    	JNZ	short DoSplice		; no, do splice
 37705                                  
 37706                                  ; We have a match. Check to see if we ended in a path char.
 37707                                  
 37708 00006D0F 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37709 00006D12 E8ECE3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37710 00006D15 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37711                                  Pathline:                               ; 2/13/KK
 37712 00006D17 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37713 00006D1B 7406                    	JZ	short DoSplice
 37714 00006D1D 47                      	INC     DI                      ; point to after current path char
 37715 00006D1E 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37716                                  
 37717                                  ; Splice the result.
 37718                                  
 37719                                  DoSplice:
 37720 00006D23 16                      	push	ss
 37721 00006D24 1F                      	pop	ds			; back to DOSDATA
 37722 00006D25 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37723 00006D29 31C9                    	XOR     CX,CX
 37724 00006D2B F606[7105]FF            	TEST	byte [FSPLICE],-1
 37725 00006D30 7403                    	JZ	short SkipSplice
 37726 00006D32 E82A01                  	CALL    Splice                  ; replaces in place.
 37727                                  SkipSplice:
 37728                                  
 37729                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37730                                  ; device.
 37731                                  
 37732 00006D35 16                      	push	ss
 37733 00006D36 1F                      	pop	ds
 37734 00006D37 C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37735                                  	;test	word [es:di+67],8000h
 37736                                  	; 17/12/2022
 37737                                  	;test	byte [es:di+68],80h
 37738 00006D3B 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37739                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37740 00006D40 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37741 00006D42 E30B                    	JCXZ    Done
 37742 00006D44 E80FA6                  	call	ECritDisk
 37743 00006D47 E8F1E9                  	call	FATREAD_CDS
 37744 00006D4A E824A6                  	call	LCritDisk
 37745                                  	;mov	al, 3
 37746 00006D4D B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37747                                  Done:   
 37748 00006D4F C3                      	retn                         ; any errors in carry flag.
 37749                                  
 37750                                  ; 13/07/2018
 37751                                  
 37752                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37753                                  ;----------------------------------------------------------------------------
 37754                                  ;   Canonicalize - copy path removing . and .. entries.
 37755                                  ;
 37756                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37757                                  ;               ES:DI - point to buffer
 37758                                  ;               BX - backup limit (offset from ES) points to slash
 37759                                  ;               BP - end of buffer
 37760                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37761                                  ;                   syntax, etc.
 37762                                  ;               Carry Clear -
 37763                                  ;                   DS:DI - advanced to end of string
 37764                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37765                                  ;   Registers modified: AX CX DX (in addition to those above)
 37766                                  ;----------------------------------------------------------------------------
 37767                                  
 37768                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37769                                  
 37770                                  Canonicalize:
 37771                                  
 37772                                  ; We copy all leading path separators.
 37773                                  
 37774 00006D50 AC                      	LODSB                           ;   while (PathChr (*s))
 37775 00006D51 E8ADE3                  	call    PATHCHRCMP
 37776 00006D54 7507                    	JNZ	short CanonDec
 37777 00006D56 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37778 00006D58 7319                    	JAE	short CanonBad		;           goto error;
 37779 00006D5A AA                      	STOSB
 37780 00006D5B EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37781                                  CanonDec:
 37782 00006D5D 4E                      	DEC     SI
 37783                                  
 37784                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37785                                  ; component (no leading path separators) and ES:DI being the destination
 37786                                  ; buffer.
 37787                                  
 37788                                  CanonLoop:
 37789                                  
 37790                                  ; If we are at the end of the source string, then we need to check to see that
 37791                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37792                                  ; Otherwise, do nothing
 37793                                  
 37794 00006D5E 31C0                    	XOR     AX,AX
 37795 00006D60 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37796 00006D62 751A                    	JNZ	short DoComponent
 37797 00006D64 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37798 00006D69 7505                    	JNZ	short DoTerminate
 37799 00006D6B B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37800 00006D6D AA                      	STOSB
 37801 00006D6E 88E0                    	MOV     AL,AH
 37802                                  DoTerminate:
 37803 00006D70 AA                      	STOSB                           ;           *d++ = 0;
 37804 00006D71 F8                      	CLC                             ;           return (0);
 37805 00006D72 C3                      	retn
 37806                                  
 37807                                  CanonBad:
 37808 00006D73 E8CB01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37809                                  	;mov	al,3
 37810 00006D76 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37811 00006D78 7402                    	JZ	short PathEnc		; path character encountered in string
 37812                                  	;mov	al,2
 37813 00006D7A B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37814                                  PathEnc:
 37815 00006D7C F9                      	STC
 37816                                  CanonBad_retn:
 37817 00006D7D C3                      	retn
 37818                                  
 37819                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37820                                  ; it to 8.3
 37821                                  
 37822                                  DoComponent:                            ;           }
 37823 00006D7E E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37824 00006D81 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37825                                  
 37826                                  ; We special case the . and .. cases.  These will be backed up.
 37827                                  
 37828                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37829 00006D83 26833D2E                	CMP	WORD [ES:DI],002Eh
 37830 00006D87 7408                    	JZ	short Skip1
 37831                                  	;CMP	WORD PTR ES:[DI],'..'
 37832 00006D89 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37833 00006D8E 750A                    	JNZ	short CanonNormal
 37834 00006D90 4F                      	DEC     DI                      ;           d--;
 37835                                  Skip1:  
 37836 00006D91 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37837                                  	;mov	al,3
 37838 00006D94 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37839 00006D96 72E5                    	jc	short CanonBad_retn
 37840 00006D98 EB02                    	JMP     short CanonPath         ;           }
 37841                                  
 37842                                  ; We have a normal path. Advance destination pointer over it.
 37843                                  
 37844                                  CanonNormal:                            ;       else
 37845 00006D9A 01CF                    	ADD     DI,CX                   ;           d += ct;
 37846                                  
 37847                                  ; We have successfully copied a component. We are now pointing at a path
 37848                                  ; sep char or are pointing at a nul or are pointing at something else.
 37849                                  ; If we point at something else, then we have an error.
 37850                                  
 37851                                  CanonPath:
 37852 00006D9C E81600                  	CALL    PathSep
 37853 00006D9F 75D2                    	JNZ	short CanonBad		; something else...
 37854                                  
 37855                                  ; Copy the first path char we see.
 37856                                  
 37857 00006DA1 AC                      	LODSB                           ; get the char
 37858 00006DA2 E85CE3                  	call    PATHCHRCMP              ; is it path char?
 37859 00006DA5 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37860 00006DA7 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37861 00006DA9 73C8                    	JAE	short CanonBad		; yep, error.
 37862 00006DAB AA                      	STOSB                           ; copy the one byte
 37863                                  
 37864                                  ; Skip all remaining path chars
 37865                                  
 37866                                  CanonPathLoop:
 37867 00006DAC AC                      	LODSB                           ; get next byte
 37868 00006DAD E851E3                  	call    PATHCHRCMP              ; path char again?
 37869 00006DB0 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37870 00006DB2 4E                      	DEC     SI                      ; back up
 37871 00006DB3 EBA9                    	JMP	short  CanonLoop	; go copy component
 37872                                  
 37873                                  ;BREAK <PathSep - determine if char is a path separator>
 37874                                  ;----------------------------------------------------------------------------
 37875                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37876                                  ;   Inputs:     DS:SI - point to a char
 37877                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37878                                  ;               Zero set if AL is / \ or NUL
 37879                                  ;               Zero reset otherwise
 37880                                  ;   Registers modified: AL
 37881                                  ;----------------------------------------------------------------------------
 37882                                  
 37883                                  PathSep:
 37884 00006DB5 8A04                    	MOV     AL,[SI]                 ; get the character
 37885                                  PathSepGotCh:				; already have character
 37886 00006DB7 08C0                    	OR      AL,AL                   ; test for zero
 37887 00006DB9 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37888                                  	;call	PATHCHRCMP              ; check for path character
 37889                                  	;retn				; and return HIS determination
 37890                                  	; 18/12/2022
 37891 00006DBB E943E3                  	jmp	PATHCHRCMP
 37892                                  
 37893                                  
 37894                                  ;BREAK <SkipBack - move backwards to a path separator>
 37895                                  ;----------------------------------------------------------------------------
 37896                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37898                                  ;               BX has current directory back up limit (point to a / \)
 37899                                  ;   Outputs:    ES:DI backed up to point to a path char
 37900                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37901                                  ;               Carry set if illegal backup
 37902                                  ;               Carry Clear if ok
 37903                                  ;   Registers modified: DI,AL
 37904                                  ;----------------------------------------------------------------------------
 37905                                  
 37906                                  SkipBack:
 37907 00006DBE 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37908 00006DC0 720B                    	JB	short SkipBad		;       if (d < dlim)
 37909 00006DC2 4F                      	DEC     DI                      ;           goto err;
 37910 00006DC3 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37911 00006DC6 E838E3                  	call    PATHCHRCMP              ;           break;
 37912 00006DC9 75F3                    	JNZ	short SkipBack		;       }
 37913 00006DCB F8                      	CLC                             ;   return (0);
 37914 00006DCC C3                      	retn				;
 37915                                  SkipBad:                                ;err:
 37916                                  	;mov	al,3
 37917 00006DCD B003                    	MOV     AL,error_path_not_found ; bad path error
 37918 00006DCF F9                      	STC                             ;   return (-1);
 37919 00006DD0 C3                      	retn				;
 37920                                  
 37921                                  ;Break <CopyComponent - copy out a file path component>
 37922                                  ;----------------------------------------------------------------------------
 37923                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37924                                  ;
 37925                                  ;   Inputs:     DS:SI - source path
 37926                                  ;               ES:DI - destination
 37927                                  ;               ES:BP - end of buffer
 37928                                  ;   Outputs:    Carry Set - too long
 37929                                  ;               Carry Clear - DS:SI moved past component
 37930                                  ;                   CX has length of destination
 37931                                  ;   Registers modified: AX,CX,DX
 37932                                  ;----------------------------------------------------------------------------
 37933                                  
 37934                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37935                                  
 37936                                  CopyComponent:
 37937                                  
 37938                                  %define CopyBP	 [BP]		; word
 37939                                  %define CopyD	 [BP+2]		; dword
 37940                                  %define CopyDoff [BP+2]		; word
 37941                                  %define CopyS	 [BP+6]		; dword
 37942                                  %define CopySoff [BP+6]		; word
 37943                                  %define CopyTemp [BP+10]	; byte
 37944                                  
 37945 00006DD1 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37946 00006DD4 1E                      	push	ds
 37947 00006DD5 56                      	push	si
 37948 00006DD6 06                      	push	es
 37949 00006DD7 57                      	push	di
 37950 00006DD8 55                      	push	bp
 37951 00006DD9 89E5                    	MOV     BP,SP
 37952 00006DDB B42E                    	MOV     AH,'.'
 37953 00006DDD AC                      	LODSB
 37954 00006DDE AA                      	STOSB
 37955 00006DDF 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37956 00006DE1 7518                    	JNZ	short NormalComp
 37957 00006DE3 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37958 00006DE6 740B                    	JZ	short NulTerm
 37959                                  TryTwoDot:
 37960 00006DE8 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37961 00006DE9 AA                      	STOSB
 37962 00006DEA 38E0                    	CMP     AL,AH
 37963 00006DEC 7557                    	JNZ	short CopyBad
 37964 00006DEE E8C4FF                  	CALL    PathSep
 37965 00006DF1 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37966                                  NulTerm:                                ;               return -1;
 37967 00006DF3 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37968 00006DF5 AA                      	STOSB
 37969 00006DF6 897606                  	MOV     CopySoff,SI
 37970 00006DF9 EB47                    	JMP     SHORT _GoodRet		;       }
 37971                                  NormalComp:                             ;   else {
 37972 00006DFB 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37973 00006DFE E83EE2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37974 00006E01 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37975 00006E04 743F                    	JZ	short CopyBad		;           return (-1);
 37976 00006E06 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37977 00006E0C 7510                    	JNZ	short DoPack
 37978 00006E0E 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37979 00006E11 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37980 00006E16 7F2D                    	JG	short CopyBad		;               return (-1);
 37981 00006E18 7504                    	JNZ	short DoPack		;           else
 37982 00006E1A 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37983 00006E1C 742F                    	JZ	short CopyBadPath	;               return (-1);
 37984                                  DoPack:                                 ;           }
 37985 00006E1E 897606                  	MOV     CopySoff,SI ; [bp+6]
 37986 00006E21 16                      	push	ss
 37987 00006E22 1F                      	pop	ds
 37988 00006E23 BE[4B05]                	MOV     SI,NAME1
 37989 00006E26 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37990 00006E29 57                      	push	di
 37991 00006E2A E8EFB2                  	call	PackName                ;       PackName (Name1, temp);
 37992 00006E2D 5F                      	pop	di
 37993 00006E2E E801A4                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37994 00006E31 49                      	DEC     CX
 37995 00006E32 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37996                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37997                                  	;cmp	cx,[bp+0]
 37998                                  	; 15/12/2022
 37999                                  	;cmp	cx,[bp]
 38000 00006E35 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 38001 00006E38 730B                    	JAE	short CopyBad		;           return (-1);
 38002 00006E3A 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 38003 00006E3C C47E02                  	LES     DI,CopyD    ; [bp+2]	
 38004 00006E3F E8E7A3                  	call	FStrCpy
 38005                                  _GoodRet:				;       }
 38006 00006E42 F8                      	CLC
 38007 00006E43 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 38008                                  CopyBad:
 38009 00006E45 F9                      	STC
 38010 00006E46 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 38011                                  	;mov	al,2
 38012 00006E49 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 38013 00006E4B 7503                    	JNZ	short CopyEnd
 38014                                  CopyBadPath:
 38015 00006E4D F9                      	STC
 38016                                  	;mov	al,3
 38017 00006E4E B003                    	MOV     AL,error_path_not_found ; Set bad path error
 38018                                  CopyEnd:
 38019 00006E50 5D                      	pop	bp
 38020 00006E51 5F                      	pop	di
 38021 00006E52 07                      	pop	es
 38022 00006E53 5E                      	pop	si
 38023 00006E54 1F                      	pop	ds
 38024 00006E55 9F                      	LAHF
 38025 00006E56 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 38026 00006E59 E8D6A3                  	call	StrLen
 38027 00006E5C 49                      	DEC     CX
 38028 00006E5D 9E                      	SAHF
 38029 00006E5E C3                      	retn
 38030                                  
 38031                                  ; 14/05/2019 - Retro DOS v4.0
 38032                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 38033                                  
 38034                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38035                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 38036                                  
 38037                                  ;Break <Splice - pseudo mount by string substitution>
 38038                                  ;----------------------------------------------------------------------------
 38039                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 38040                                  ;       ThisCDS to point to physical drive CDS.
 38041                                  ;   Inputs:     DS:SI point to string
 38042                                  ;               NoSetDir = TRUE => exact matches with splice fail
 38043                                  ;   Outputs:    DS:SI points to thisCDS
 38044                                  ;               ES:DI points to DPB
 38045                                  ;               String at DS:SI may be reduced in length by removing prefix
 38046                                  ;               and substituting drive letter.
 38047                                  ;               CX = 0 If no splice done
 38048                                  ;               CX <> 0 otherwise
 38049                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 38050                                  ;                   left alone
 38051                                  ;               ThisDPB points to proper DPB
 38052                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 38053                                  ;----------------------------------------------------------------------------
 38054                                  
 38055                                  Splice:
 38056 00006E5F 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 38057 00006E65 7469                    	JZ	short AllDone
 38058 00006E67 36FF36[A205]            	push	word [SS:THISCDS]
 38059 00006E6C 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 38060 00006E71 1E                      	push	ds
 38061 00006E72 56                      	push	si
 38062 00006E73 5F                      	pop	di
 38063 00006E74 07                      	pop	es
 38064 00006E75 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 38065                                  SpliceScan:
 38066 00006E77 E8DFFC                  	call	GetCDSFromDrv
 38067 00006E7A 724A                    	JC	short SpliceDone
 38068 00006E7C FEC0                    	INC     AL
 38069                                  	; 17/12/2022
 38070                                  	;test	byte [si+68],20h
 38071 00006E7E F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 38072                                  	;;test	word [si+67],2000h
 38073                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38074 00006E82 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 38075 00006E84 57                      	push	di
 38076 00006E85 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 38077 00006E88 7403                    	JZ	short SpliceFound	;
 38078                                  SpliceSkip:
 38079 00006E8A 5F                      	pop	di
 38080 00006E8B EBEA                    	JMP	short SpliceScan	;               continue;
 38081                                  SpliceFound:
 38082 00006E8D 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 38083 00006E91 7508                    	JNZ	short SpliceDo
 38084 00006E93 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 38085 00006E99 75EF                    	JNZ	short SpliceSkip
 38086                                  SpliceDo:
 38087 00006E9B 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 38088 00006E9D 06                      	push	es
 38089 00006E9E 1F                      	pop	ds
 38090 00006E9F 5F                      	pop	di
 38091 00006EA0 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 38092 00006EA3 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 38093 00006EA7 09C0                    	OR      AX,AX
 38094 00006EA9 7808                    	JS	short NoPoke
 38095 00006EAB 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 38096 00006EAD 29F0                    	SUB     AX,SI
 38097 00006EAF 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 38098                                  NoPoke:
 38099 00006EB3 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 38100 00006EB6 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 38101 00006EB8 B05C                    	MOV     AL,"\"
 38102 00006EBA AA                      	STOSB
 38103                                  SpliceCopy:                             ;               strcpy (src, p);
 38104 00006EBB E86BA3                  	call	FStrCpy
 38105 00006EBE 83C404                  	ADD     SP,4                    ; throw away saved stuff
 38106 00006EC1 80C901                  	OR      CL,1                    ; signal splice done.
 38107 00006EC4 EB0C                    	JMP     SHORT DoSet             ;               return;
 38108                                  SpliceDone:                             ;               }
 38109 00006EC6 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 38110 00006ECB 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 38111                                  AllDone:
 38112 00006ED0 31C9                    	XOR     CX,CX
 38113                                  DoSet:
 38114 00006ED2 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 38115                                  	;les	di,[si+69]
 38116 00006ED7 C47C45                  	LES     DI,[SI+curdir.devptr]	
 38117 00006EDA 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 38118 00006EDF 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 38119                                  Splice_retn:
 38120 00006EE4 C3                      	retn
 38121                                  
 38122                                  ; 15/05/2019 - Retro DOS v4.0
 38123                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 38124                                  
 38125                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38126                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 38127                                  
 38128                                  ;Break <$NameTrans - partially process a name>
 38129                                  ;----------------------------------------------------------------------------
 38130                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 38131                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 38132                                  ;   to Transpath playing games with devices, we need to insure that the output
 38133                                  ;   has drive letter and : in it.
 38134                                  ;
 38135                                  ;   Inputs:     DS:SI - source string for translation
 38136                                  ;               ES:DI - pointer to buffer
 38137                                  ;   Outputs:
 38138                                  ;       Carry Clear
 38139                                  ;               Buffer at ES:DI is filled in with data
 38140                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 38141                                  ;       Carry Set
 38142                                  ;               AX = error_path_not_found
 38143                                  ;   Registers modified: all
 38144                                  ;----------------------------------------------------------------------------
 38145                                  
 38146                                  _$NameTrans:
 38147 00006EE5 1E                      	push	ds
 38148 00006EE6 56                      	push	si
 38149 00006EE7 06                      	push	es
 38150 00006EE8 57                      	push	di
 38151 00006EE9 51                      	push	cx ; MSDOS 6.0
 38152                                  	
 38153                                  	; MSDOS 6.0	
 38154                                  ; M027 - Start
 38155                                  ;
 38156                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 38157                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 38158                                  ; device if the old call set the volume attribute bit. Note that devname in
 38159                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 38160                                  ; and restore CX.
 38161                                  
 38162                                  	;mov	ch,16h
 38163 00006EEA B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 38164 00006EEC E8B902                  	call	SetAttrib
 38165                                  
 38166                                  ; M027 - End
 38167                                  
 38168                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38169 00006EEF BF[BE03]                	MOV     DI,OPENBUF
 38170 00006EF2 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 38171 00006EF5 59                      	pop	cx ; MSDOS 6.0
 38172 00006EF6 5F                      	pop     di
 38173 00006EF7 07                      	pop	es
 38174 00006EF8 5E                      	pop     si
 38175 00006EF9 1F                      	pop     ds
 38176 00006EFA 7303                    	JNC	short TransOK
 38177 00006EFC E95397                  	jmp	SYS_RET_ERR
 38178                                  TransOK:
 38179 00006EFF BE[BE03]                	MOV     SI,OPENBUF
 38180 00006F02 16                      	push	ss
 38181 00006F03 1F                      	pop	ds
 38182                                  ;GotText:
 38183 00006F04 E822A3                  	call	FStrCpy
 38184 00006F07 E93F97                  	jmp	SYS_RET_OK
 38185                                  
 38186                                  ;Break   <DriveFromText - return drive number from a text string>
 38187                                  ;----------------------------------------------------------------------------
 38188                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 38189                                  ;   pointer.
 38190                                  ;
 38191                                  ;   Inputs:     DS:SI point to a text string
 38192                                  ;   Outputs:    AL has drive number
 38193                                  ;               DS:SI advanced
 38194                                  ;   Registers modified: AX,SI.
 38195                                  ;----------------------------------------------------------------------------
 38196                                  
 38197                                  DriveFromText:
 38198 00006F0A 30C0                    	XOR     AL,AL                   ;       drive = 0;
 38199                                  	;CMP	BYTE [SI],0		;       if (*s &&
 38200                                  	; 23/09/2023
 38201 00006F0C 3804                    	cmp	[si],al ; 0
 38202 00006F0E 74D4                    	jz	short Splice_retn
 38203 00006F10 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 38204 00006F14 75CE                    	jnz	short Splice_retn
 38205 00006F16 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 38206 00006F17 0C20                    	OR      AL,20h
 38207                                  	;sub	al,60h
 38208 00006F19 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 38209 00006F1B 75C7                    	jnz	short Splice_retn
 38210 00006F1D B0FF                    	MOV	AL,-1                   ; nuke AL...
 38211                                  	; 23/09/2023
 38212                                  	;dec	al ; -1
 38213 00006F1F C3                      	retn				;           }
 38214                                  
 38215                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38216                                  ;----------------------------------------------------------------------------
 38217                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38218                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38219                                  ;
 38220                                  ;   Inputs:     AL has 0-based drive number
 38221                                  ;   Outputs:    ES:DI advanced
 38222                                  ;   Registers modified: AX
 38223                                  ;----------------------------------------------------------------------------
 38224                                  
 38225                                  TextFromDrive:
 38226 00006F20 FEC0                    	INC     AL
 38227                                  TextFromDrive1:
 38228                                  	;add	al,40h
 38229 00006F22 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38230 00006F24 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38231 00006F26 AB                      	STOSW
 38232                                  PathPref_retn:
 38233 00006F27 C3                      	retn
 38234                                  
 38235                                  ;Break   <PathPref - see if one path is a prefix of another>
 38236                                  ;----------------------------------------------------------------------------
 38237                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38238                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38239                                  ;   prefix: A:\ and A:\FOO
 38240                                  ;
 38241                                  ;   Inputs:     DS:SI potential prefix
 38242                                  ;               ES:DI string
 38243                                  ;   Outputs:    Zero set => prefix found
 38244                                  ;                   DI/SI advanced past matching part
 38245                                  ;               Zero reset => no prefix, DS/SI garbage
 38246                                  ;   Registers modified: CX
 38247                                  ;----------------------------------------------------------------------------
 38248                                  
 38249                                  PathPref:
 38250 00006F28 E815A3                  	call	DStrLen                 ; get length
 38251 00006F2B 49                      	DEC     CX                      ; do not include nul byte
 38252 00006F2C F3A6                    	REPZ    CMPSB                   ; compare
 38253 00006F2E 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38254 00006F30 50                      	push	ax			; save char register
 38255 00006F31 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38256 00006F34 E8CAE1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38257 00006F37 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38258                                  NotSep:                                 ; 2/13/KK
 38259 00006F39 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38260 00006F3C E878FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38261                                  Prefix:
 38262 00006F3F 58                      	pop	ax			; get back original
 38263 00006F40 C3                      	retn
 38264                                  
 38265                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38266                                  ;----------------------------------------------------------------------------
 38267                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38268                                  ;     a path separator.
 38269                                  ;
 38270                                  ;     Input:    DS:SI target string (null terminated)
 38271                                  ;     Output:   Zero set => path separator encountered in string
 38272                                  ;               Zero clear => null encountered
 38273                                  ;     Registers modified: SI
 38274                                  ;----------------------------------------------------------------------------
 38275                                  
 38276                                  ScanPathChar:
 38277 00006F41 AC                      	LODSB                           ; fetch a character
 38278 00006F42 E872FE                  	call    PathSepGotCh
 38279 00006F45 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38280                                  	;call	PATHCHRCMP              ; path separator?
 38281                                  	;retn
 38282                                  	; 18/12/2022
 38283 00006F47 E9B7E1                  	jmp	PATHCHRCMP
 38284                                  
 38285                                  ;============================================================================
 38286                                  ; FILE.ASM, MSDOS 6.0, 1991
 38287                                  ;============================================================================
 38288                                  ; 14/07/2018 - Retro DOS v3.0
 38289                                  
 38290                                  ; 13/05/2019 - Retro DOS v4.0
 38291                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38292                                  
 38293                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38294                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38295                                  
 38296                                  ; MSDOS 2.11
 38297                                  ;BREAK <$Open - open a file handle>
 38298                                  ;----------------------------------------------------------------------------
 38299                                  ;   Assembler usage:
 38300                                  ;           LDS     DX, Name
 38301                                  ;           MOV     AH, Open
 38302                                  ;           MOV     AL, access
 38303                                  ;           INT     int_command
 38304                                  ;
 38305                                  ;       ACCESS          Function
 38306                                  ;       ------          --------
 38307                                  ;       open_for_read   file is opened for reading
 38308                                  ;       open_for_write  file is opened for writing
 38309                                  ;       open_for_both   file is opened for both reading and writing.
 38310                                  ;
 38311                                  ;   Error returns:
 38312                                  ;           AX = error_invalid_access
 38313                                  ;              = error_file_not_found
 38314                                  ;              = error_access_denied
 38315                                  ;              = error_too_many_open_files
 38316                                  ;----------------------------------------------------------------------------
 38317                                  
 38318                                  ; MSDOS 6.0
 38319                                  ;	BREAK <$Open - open a file from a path string>
 38320                                  ;----------------------------------------------------------------------------
 38321                                  ;
 38322                                  ;**	$OPen - Open a File
 38323                                  ;
 38324                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38325                                  ;	file and and returns a handle
 38326                                  ;
 38327                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38328                                  ;		(AL) = open mode
 38329                                  ;	EXIT	'C' clear if OK
 38330                                  ;		  (ax) = file handle
 38331                                  ;		'C' set if error
 38332                                  ;		  (ax) = error code
 38333                                  ;	USES	all
 38334                                  ;
 38335                                  ;----------------------------------------------------------------------------
 38336                                  
 38337                                  ; 13/05/2019 - Retro DOS v4.0
 38338                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38339                                  
 38340                                  _$OPEN:       
 38341 00006F4A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38342                                  _$Open2:
 38343                                  	;mov	ch,16h
 38344 00006F4C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38345 00006F4E E85702                  	call	SetAttrib
 38346 00006F51 B9[E02B]                	mov	cx,DOS_OPEN
 38347                                  
 38348                                  	;xor	ah,ah  ; MSDOS 3.3
 38349                                  
 38350 00006F54 50                      	push	ax
 38351                                  
 38352                                  ;*	General file open/create code. The $CREATE call and the various
 38353                                  ;	$OPEN calls all come here.
 38354                                  ;
 38355                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38356                                  ;	path names, etc., and then dispatch to our individual handlers.
 38357                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38358                                  ;
 38359                                  ;	(TOS) = create mode
 38360                                  ;	(CX) = address of routine to call to do actual function
 38361                                  ;	(DS:DX) = ASCIZ name
 38362                                  ;	SAttrib = Attribute mask
 38363                                  
 38364                                  ;	Get a free SFT and mark it "being allocated"
 38365                                  
 38366                                  AccessFile:
 38367 00006F55 E8FEA3                  	call	ECritSFT
 38368 00006F58 E8D8F7                  	call	SFNFree			; get a free sfn
 38369 00006F5B E813A4                  	call	LCritSFT
 38370 00006F5E 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38371 00006F60 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38372 00006F65 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38373 00006F6A 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38374                                  
 38375                                  ;	Find a free area in the user's JFN table.
 38376                                  
 38377 00006F6F E8AEF7                  	call	JFNFree			; get a free jfn
 38378 00006F72 7303                    	jnc	short SaveJFN
 38379                                  OpenFailJ:
 38380 00006F74 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38381                                  
 38382                                  SaveJFN:
 38383 00006F77 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38384 00006F7C 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38385 00006F81 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38386                                  
 38387                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38388                                  ;	reusing the same JFN.
 38389                                  
 38390 00006F86 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38391 00006F8B 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38392 00006F8E 89D6                    	MOV	SI,DX			; get name in appropriate place
 38393 00006F90 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38394 00006F93 51                      	push	cx			; save routine to call
 38395 00006F94 E844FC                  	call	TransPath		; convert the path
 38396 00006F97 5B                      	pop	bx			; (bx) = routine to call
 38397                                  
 38398 00006F98 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38399 00006F9D 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38400 00006F9F 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38401 00006FA5 7404                    	JZ	short SetSearch
 38402                                  	;mov	al,2
 38403 00006FA7 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38404                                  OpenCleanJ:
 38405 00006FA9 EB50                    	JMP	short OpenClean
 38406                                  
 38407                                  SetSearch:
 38408 00006FAB 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38409                                  
 38410                                  ;	We need to get the new inheritance bits.
 38411                                  
 38412 00006FAC 31C9                    	xor	cx,cx
 38413                                  	; MSDOS 6.0
 38414                                  	;mov	[si+2],cx ; 0
 38415 00006FAE 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38416                                  	;mov    [si+51],cx ; 0
 38417 00006FB1 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38418                                  	;
 38419 00006FB4 81FB[E02B]              	CMP	BX,DOS_OPEN
 38420 00006FB8 7509                    	JNZ	short _DoOper
 38421                                  	;test   al,80h
 38422 00006FBA A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38423 00006FBC 7405                    	JZ	short _DoOper ; 10/08/2018
 38424 00006FBE 247F                    	AND	AL,7Fh			; mask off inherit bit
 38425                                  	;mov	cx,1000h
 38426 00006FC0 B90010                  	MOV	CX,sf_no_inherit
 38427                                  _DoOper:
 38428                                  	;; MSDOS 3.3
 38429                                  	;;mov	word [si+2], 0
 38430                                  	;;mov	word [si+33h], 0
 38431                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38432                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38433                                  
 38434                                  	; MSDOS 6.0
 38435                                  ;**	Check if this is an extended open. If so you must set the
 38436                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38437                                  ;	Set_EXT_mode in creat.asm
 38438                                  
 38439                                  	; MSDOS 6.0
 38440                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38441 00006FC3 57                      	push	di
 38442 00006FC4 06                      	push	es
 38443 00006FC5 1E                      	push	ds
 38444 00006FC6 07                      	pop	es
 38445 00006FC7 56                      	push	si
 38446 00006FC8 5F                      	pop	di			; (es:di) = SFT address
 38447 00006FC9 E800BC                  	call	Set_EXT_mode
 38448                                  	;RESTORE <es, di>
 38449 00006FCC 07                      	pop	es
 38450 00006FCD 5F                      	pop	di
 38451                                  
 38452                                  	;Context DS
 38453 00006FCE 16                      	push	ss
 38454 00006FCF 1F                      	pop	ds	
 38455                                  
 38456 00006FD0 51                      	push	cx
 38457 00006FD1 FFD3                    	CALL	BX			; blam!
 38458 00006FD3 59                      	pop	cx
 38459 00006FD4 C536[9E05]              	LDS	SI,[THISSFT]
 38460 00006FD8 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38461                                  	;jc	short OpenE ; MSDOS 3.3
 38462                                  
 38463                                  ;	The SFT was successfully opened. Remove busy mark.
 38464                                  
 38465                                  OpenOK:
 38466                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38467 00006FDA C7040100                	mov	word [SI],1
 38468                                  	;or	[SI+5],cx
 38469 00006FDE 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38470                                  
 38471                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38472                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38473                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38474                                  ;
 38475                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38476                                  ; sharer.
 38477                                  
 38478 00006FE1 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38479 00006FE5 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38480                                  
 38481 00006FEA 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38482                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38483                                  OpenOkj:
 38484 00006FF1 E95596                  	jmp	SYS_RET_OK		; bye with no errors
 38485                                  
 38486                                  	; MSDOS 6.0
 38487                                  ;Extended Open hooks check
 38488                                  OpenE2:					;AN000;;EO.
 38489 00006FF4 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38490 00006FF7 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38491 00006FF9 EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38492                                  
 38493                                  ;	Extended Open hooks check
 38494                                  ;
 38495                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38496                                  
 38497                                  OpenClean:
 38498 00006FFB 5B                      	pop	bx			; clean off stack
 38499                                  OpenE:
 38500                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38501 00006FFC C7040000                	mov	word [SI],0
 38502 00007000 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38503 00007005 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38504 00007008 EB02                    	JMP	SHORT OpenCritLeave
 38505                                  
 38506                                  OpenFail:
 38507 0000700A FB                      	STI
 38508 0000700B 59                      	pop	cx			; Clean stack
 38509                                  OpenCritLeave:
 38510 0000700C 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38511                                  
 38512                                  	; MSDOS 6.0
 38513                                  ; File Tagging DOS 4.00
 38514 00007013 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38515                                  					;AN000;;FT. code page mismatch
 38516 00007019 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38517 0000701B E93C96                  	jmp	From_GetSet		;AN000;;FT. yes
 38518                                  NORERR: 				;AN000;
 38519                                  ; File Tagging DOS 4.00
 38520                                  
 38521 0000701E E93196                  	jmp	SYS_RET_ERR		; no free, return error
 38522                                  
 38523                                  ; MSDOS 2.11
 38524                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38525                                  ;----------------------------------------------------------------------------
 38526                                  ;   Assembler usage:
 38527                                  ;           LDS     DX, name
 38528                                  ;           MOV     AH, Creat
 38529                                  ;           MOV     CX, access
 38530                                  ;           INT     21h
 38531                                  ;       ; AX now has the handle
 38532                                  ;
 38533                                  ;   Error returns:
 38534                                  ;           AX = error_access_denied
 38535                                  ;              = error_path_not_found
 38536                                  ;              = error_too_many_open_files
 38537                                  ;----------------------------------------------------------------------------
 38538                                  
 38539                                  ; MSDOS 6.0
 38540                                  ;	BREAK <$Creat - create a brand-new file>
 38541                                  ;----------------------------------------------------------------------------
 38542                                  ;
 38543                                  ;**	$Creat - Create a File
 38544                                  ;
 38545                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38546                                  ;	initial attributes contained in CX
 38547                                  ;
 38548                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38549                                  ;		(CX) = initial attributes
 38550                                  ;	EXIT	'C' set if error
 38551                                  ;		  (ax) = error code
 38552                                  ;		'C' clear if OK
 38553                                  ;		  (ax) = file handle
 38554                                  ;	USES	all
 38555                                  ;
 38556                                  ;----------------------------------------------------------------------------
 38557                                  
 38558                                  _$CREAT:
 38559 00007021 51                      	push	cx			; Save attributes on stack
 38560 00007022 B9[B62A]                	mov	CX,DOS_CREATE		; routine to call
 38561                                  AccessSet:
 38562                                  	;mov	byte [ss:SATTRIB],6
 38563 00007025 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38564                                  	; 10/08/2018
 38565 0000702B E927FF                  	JMP	AccessFile		; use good ol' open
 38566                                  
 38567                                  ; MSDOS 6.0 (MSDOS 3.3)
 38568                                  ;	BREAK <$CHMOD - change file attributes>
 38569                                  ;----------------------------------------------------------------------------
 38570                                  ;
 38571                                  ;**	$CHMOD - Change File Attributes
 38572                                  ;
 38573                                  ;   Assembler usage:
 38574                                  ;	    LDS     DX, name
 38575                                  ;	    MOV     CX, attributes
 38576                                  ;	    MOV     AL,func (0=get, 1=set)
 38577                                  ;	    INT     21h
 38578                                  ;   Error returns:
 38579                                  ;	    AX = error_path_not_found
 38580                                  ;	    AX = error_access_denied
 38581                                  ;
 38582                                  ;----------------------------------------------------------------------------
 38583                                  
 38584                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38585                                  _$CHMOD:
 38586                                  	; 05/08/2018 - Retro DOS v3.0
 38587                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38588 0000702E BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38589 00007031 50                      	push	ax
 38590 00007032 51                      	push	cx			; save function and attributes
 38591 00007033 89D6                    	MOV	SI,DX			; get things in appropriate places
 38592 00007035 E8A7FB                  	call	TransPathSet		; get correct path
 38593 00007038 59                      	pop	cx
 38594 00007039 58                      	pop	ax			; and get function and attrs back
 38595 0000703A 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38596 0000703C 16                      	push	ss			; set up for later possible calls
 38597 0000703D 1F                      	pop	ds
 38598 0000703E 803E[7A05]FF            	CMP	byte [CMETA],-1
 38599 00007043 754E                    	JNZ	short ChModErr
 38600                                  	;mov	byte [SATTRIB],16h
 38601 00007045 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38602 0000704A 2C01                    	SUB	AL,1			; fast way to discriminate
 38603 0000704C 720B                    	JB	short ChModGet		; 0 -> go get value
 38604 0000704E 7417                    	JZ	short ChModSet		; 1 -> go set value
 38605                                  	;mov	byte [EXTERR_LOCUS],1
 38606 00007050 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38607                                  	;mov	al,1
 38608 00007055 B001                    	mov	al,error_invalid_function ; bad value
 38609                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38610                                  chmod_errj:	
 38611                                  	;;jmp	SYS_RET_ERR
 38612                                  	;jmp	short ChModE	
 38613 00007057 EBC5                    	jmp	short NORERR	; 06/12/2022
 38614                                  ChModGet:
 38615 00007059 E844B9                  	call	GET_FILE_INFO		; suck out the ol' info
 38616 0000705C 7237                    	JC	short ChModE		; error codes are already set for ret
 38617 0000705E E82E94                  	call	Get_User_Stack		; point to user saved vaiables
 38618                                  	;mov	[SI+4],ax
 38619 00007061 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38620                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38621                                  OpenOkj2:
 38622                                  	; 17/12/2022
 38623                                  	;;jmp	SYS_RET_OK		; say sayonara
 38624                                  	;jmp	short OpenOkj
 38625                                  	; 25/06/2019
 38626 00007064 E9E595                  	jmp	SYS_RET_OK_clc
 38627                                  
 38628                                  ChModSet:
 38629 00007067 89C8                    	MOV	AX,CX			; get attrs in position
 38630 00007069 E892B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38631 0000706C 7227                    	JC	short ChModE		; errors are set
 38632                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38633                                  	;jmp	SYS_RET_OK
 38634                                  OpenOkj3:
 38635                                  	;jmp	short OpenOkj2
 38636                                  	; 17/12/2022
 38637 0000706E E9D895                  	jmp	SYS_RET_OK
 38638                                  
 38639                                  ; 17/12/2022
 38640                                  %if 0
 38641                                  ChModErr:
 38642                                  NotFound:	; 17/12/2022
 38643                                  	;mov	al,3
 38644                                  	mov	al,error_path_not_found
 38645                                  ChModE:
 38646                                  UnlinkE:	; 17/12/2022
 38647                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38648                                  	;;jmp	SYS_RET_ERR
 38649                                  	;jmp	short chmod_errj
 38650                                  	; 17/12/2022
 38651                                  	jmp	short NORERR
 38652                                  %endif
 38653                                  
 38654                                  ; 22/05/2019 - Retro DOS v4.0
 38655                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38656                                  
 38657                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38658                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38659                                  
 38660                                  ;	BREAK <$UNLINK - delete a file entry>
 38661                                  ;----------------------------------------------------------------------------
 38662                                  ;
 38663                                  ;**	$UNLINK - Delete a File
 38664                                  ;
 38665                                  ;
 38666                                  ;	Assembler usage:
 38667                                  ;	    LDS     DX, name
 38668                                  ;	    IF VIA SERVER DOS CALL
 38669                                  ;	     MOV     CX,SEARCH_ATTRIB
 38670                                  ;	    MOV     AH, Unlink
 38671                                  ;	    INT     21h
 38672                                  ;
 38673                                  ;	ENTRY	(ds:dx) = path name
 38674                                  ;		(cx) = search_attribute, if via server_dos
 38675                                  ;	EXIT	'C' clear if no error
 38676                                  ;		'C' set if error
 38677                                  ;		  (ax) = error code
 38678                                  ;			= error_file_not_found
 38679                                  ;			= error_access_denied
 38680                                  ;
 38681                                  ;----------------------------------------------------------------------------
 38682                                  
 38683                                  _$UNLINK:
 38684 00007071 51                      	push	cx			; Save possible CX input parm
 38685 00007072 89D6                    	MOV	SI,DX			; Point at input string
 38686 00007074 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38687 00007077 E865FB                  	call	TransPathSet		; go get normalized path
 38688 0000707A 59                      	pop	cx
 38689 0000707B 7216                    	JC	short ChModErr		; badly formed path
 38690 0000707D 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38691 00007083 750E                    	JNZ	short NotFound
 38692 00007085 16                      	push	ss
 38693 00007086 1F                      	pop	ds
 38694                                  	;mov	ch,6
 38695 00007087 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38696 00007089 E81C01                  	call	SetAttrib
 38697 0000708C E801B5                  	call	DOS_DELETE		; remove that file
 38698                                  	;JC	short UnlinkE 		; error is there
 38699                                  	; 17/12/2022
 38700 0000708F 728D                    	jc	short NORERR
 38701                                  
 38702                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38703                                  UnlinkOk:
 38704                                  	;jmp	SYS_RET_OK		; okey doksy
 38705 00007091 EBDB                    	jmp	short OpenOkj3
 38706                                  
 38707                                  	; 17/12/2022
 38708                                  ChModErr:	; 17/12/2022
 38709                                  NotFound:
 38710                                  	;mov	al,3
 38711 00007093 B003                    	MOV	AL,error_path_not_found
 38712                                  ChModE:		; 17/12/2022
 38713                                  UnlinkE:
 38714                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38715                                  	;;jmp	SYS_RET_ERR		; bye
 38716                                  	;jmp	short ChModE
 38717                                  	; 17/12/2022
 38718 00007095 EB87                    	jmp	short NORERR
 38719                                  
 38720                                  ;BREAK <$RENAME - move directory entries around>
 38721                                  ;----------------------------------------------------------------------------
 38722                                  ;
 38723                                  ;   Assembler usage:
 38724                                  ;	    LDS     DX, source
 38725                                  ;	    LES     DI, dest
 38726                                  ;	    IF VIA SERVER DOS CALL
 38727                                  ;	      MOV   CX,SEARCH_ATTRIB
 38728                                  ;	    MOV     AH, Rename
 38729                                  ;	    INT     21h
 38730                                  ;
 38731                                  ;   Error returns:
 38732                                  ;	    AX = error_file_not_found
 38733                                  ;	       = error_not_same_device
 38734                                  ;	       = error_access_denied
 38735                                  ;
 38736                                  ;----------------------------------------------------------------------------
 38737                                  
 38738                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38739                                  _$RENAME:
 38740                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38741 00007097 51                      	push	cx
 38742 00007098 1E                      	push	ds
 38743 00007099 52                      	push	dx			; save source and possible CX arg
 38744 0000709A 06                      	PUSH	ES
 38745 0000709B 1F                      	POP	DS			; move dest to source
 38746 0000709C 89FE                    	MOV	SI,DI			; save for offsets
 38747 0000709E BF[3E04]                	MOV	DI,RENBUF
 38748 000070A1 E83BFB                  	call	TransPathSet		; munge the paths
 38749 000070A4 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38750 000070A9 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38751 000070AE 5E                      	pop	si
 38752 000070AF 1F                      	pop	ds
 38753 000070B0 59                      	pop	cx			; get back source and possible CX arg
 38754                                  epjc2:	
 38755 000070B1 72E0                    	JC	short ChModErr		; get old error
 38756 000070B3 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38757 000070B9 75D8                    	JNZ	short NotFound
 38758 000070BB 51                      	push	cx			; Save possible CX arg
 38759 000070BC BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38760 000070BF E81DFB                  	call	TransPathSet		; wham
 38761 000070C2 59                      	pop	cx
 38762 000070C3 72EC                    	JC	short epjc2
 38763 000070C5 16                      	push	ss
 38764 000070C6 1F                      	pop	ds
 38765 000070C7 803E[7A05]FF            	CMP	byte [CMETA],-1
 38766 000070CC 72C5                    	JB	short NotFound
 38767                                  
 38768                                  	; MSDOS 6.0
 38769 000070CE FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38770 000070D2 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38771 000070D6 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38772 000070D9 16                      	PUSH	SS			   ;AN000;;MS.
 38773 000070DA 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38774 000070DB 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38775                                  rnloop: 				   ;AN000;
 38776 000070DD E879FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38777 000070E0 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38778 000070E2 E813A1                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38779 000070E5 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38780 000070E7 FEC0                    	INC	AL			   ;AN000;;MS.	next
 38781 000070E9 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38782                                  rnerr:					   ;AN000;
 38783 000070EB 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38784                                  	;error	error_current_directory    ;AN000;;MS.
 38785 000070EE B010                    	mov	al,error_current_directory 
 38786                                  	;jmp	SYS_RET_ERR
 38787                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38788 000070F0 EBA3                    	jmp	short UnlinkE
 38789                                  dorn:					   ;AN000;
 38790 000070F2 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38791 000070F7 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38792                                  
 38793 000070FC 16                      	push	ss
 38794 000070FD 1F                      	pop	ds
 38795                                  
 38796                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38797                                  	;mov	ch,16h
 38798 000070FE B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38799                                  					; rename appropriate files
 38800 00007100 E8A500                  	call	SetAttrib
 38801 00007103 E868B6                  	call	DOS_RENAME		; do the deed
 38802 00007106 728D                    	JC	short UnlinkE 		; errors
 38803                                  
 38804                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38805                                  	;jmp	SYS_RET_OK
 38806 00007108 EB87                    	jmp	short UnlinkOk
 38807                                  
 38808                                  
 38809                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38810                                  
 38811                                  ; 14/07/2018 - Retro DOS v3.0
 38812                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38813                                  
 38814                                  ;Break <$CreateNewFile - Create a new directory entry>
 38815                                  ;----------------------------------------------------------------------------
 38816                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38817                                  ;	was no previous directory entry, and fail if a directory entry with
 38818                                  ;	the same name existed previously.
 38819                                  ;
 38820                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38821                                  ;		CX contains default file attributes
 38822                                  ;   Outputs:	Carry Clear:
 38823                                  ;		    AX has file handle opened for read/write
 38824                                  ;		Carry Set:
 38825                                  ;		    AX has error code
 38826                                  ;   Registers modified: All
 38827                                  ;----------------------------------------------------------------------------
 38828                                  
 38829                                  _$CreateNewFile:
 38830 0000710A 51                      	push	cx			; Save attributes on stack
 38831 0000710B B9[832B]                	MOV	CX,DOS_Create_New	; routine to call
 38832 0000710E E914FF                  	JMP	AccessSet		; use good ol' open
 38833                                  
 38834                                  ;**	BinToAscii - convert a number to a string.
 38835                                  ;----------------------------------------------------------------------------
 38836                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38837                                  ;	This routine is used to generate temp file names so we don't spend
 38838                                  ;	the time and code needed for a true hex number, we just use
 38839                                  ;	A thorugh O.
 38840                                  ;
 38841                                  ;	ENTRY	(ax) = value
 38842                                  ;		(es:di) = destination
 38843                                  ;	EXIT	(es:di) updated by 4
 38844                                  ;	USES	cx, di, flags
 38845                                  ;----------------------------------------------------------------------------
 38846                                  
 38847                                  ; MSDOS 3.3
 38848                                  ;BinToAscii:
 38849                                  ;	mov     cx,4
 38850                                  ;bta5:
 38851                                  ;	push    cx
 38852                                  ;	mov     cl,4
 38853                                  ;	rol     ax,cl
 38854                                  ;	push    ax
 38855                                  ;	and     al,0Fh
 38856                                  ;	add     al,'0'
 38857                                  ;	cmp     al,'9'
 38858                                  ;	jbe     short bta6
 38859                                  ;	add     al,7
 38860                                  ;bta6: 
 38861                                  ;	stosb
 38862                                  ;	pop     ax
 38863                                  ;	pop     cx
 38864                                  ;	loop    bta5
 38865                                  ;	retn
 38866                                  
 38867                                  ; MSDOS 6.0
 38868                                  BinToAscii:
 38869 00007111 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38870                                  bta5:	
 38871 00007114 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38872 00007116 50                      	push	ax			; preserve remainder of digits
 38873 00007117 240F                    	AND	AL,0Fh			; grab low nibble
 38874 00007119 0441                    	ADD	AL,'A'			; turn into ascii
 38875 0000711B AA                      	STOSB				; drop in the character
 38876 0000711C 58                      	pop	ax			; (ax) = shifted number
 38877 0000711D FECD                    	dec	ch
 38878 0000711F 75F3                    	jnz	short bta5		; process 4 digits
 38879 00007121 C3                      	retn
 38880                                  
 38881                                  ;Break	<$CreateTempFile - create a unique name>
 38882                                  ;----------------------------------------------------------------------------
 38883                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38884                                  ;	Method used is to get the current time, convert to a name and attempt
 38885                                  ;	a create new. Repeat until create new succeeds.
 38886                                  ;
 38887                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38888                                  ;		CX  contains default attributes
 38889                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38890                                  ;		AX has handle
 38891                                  ;   Registers modified: all
 38892                                  ;----------------------------------------------------------------------------
 38893                                  
 38894                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38895                                  
 38896                                  _$CreateTempFile:
 38897                                  	;Enter
 38898 00007122 55                      	push	bp
 38899 00007123 89E5                    	mov	bp,sp
 38900                                  
 38901                                  	;LocalVar  EndPtr,DWORD
 38902                                  	;LocalVar  FilPtr,DWORD
 38903                                  	;LocalVar  Attr,WORD
 38904                                  
 38905 00007125 83EC0A                  	sub	sp,10
 38906                                  
 38907                                  	;test	cx,0FFD8h
 38908 00007128 F7C1D8FF                	test	CX,~attr_changeable
 38909 0000712C 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38910                                  
 38911                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38912                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38913                                  ; below. The code loops on error_access_denied, but if one of the non
 38914                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38915                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38916                                  ; need to detect these cases before getting to the loop.
 38917                                  
 38918                                  	;mov	ax, 5
 38919 0000712E B80500                  	MOV	AX,error_access_denied
 38920 00007131 EB69                    	JMP	SHORT SETTMPERR
 38921                                  
 38922                                  OKatts:
 38923                                  	;MOV	attr,CX 		; save attribute
 38924 00007133 894EF6                  	mov     [bp-10],cx
 38925                                  	;MOV	FilPtrL,DX		; pointer to file
 38926 00007136 8956F8                  	mov	[bp-8],dx
 38927                                  	;MOV	FilPtrH,DS
 38928 00007139 8C5EFA                  	mov	[bp-6],ds
 38929                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38930 0000713C 8C5EFE                  	mov	[bp-2],ds
 38931 0000713F 1E                      	PUSH	DS
 38932 00007140 07                      	POP	ES			; destination for nul search
 38933 00007141 89D7                    	MOV	DI,DX
 38934 00007143 89F9                    	MOV	CX,DI
 38935 00007145 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38936                                  	; MSDOS 6.0
 38937 00007147 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38938 00007149 7501                    	JNZ	short okok		;AN000;MS. no
 38939                                  	;MOV	CX,-1			;AN000;MS.
 38940                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38941                                  	; 17/12/2022
 38942 0000714B 49                      	dec	cx  ; mov cx,-1
 38943                                  	;mov	cx,-1 ; 0FFFh
 38944                                  okok:					;AN000;
 38945 0000714C 31C0                    	XOR	AX,AX			;AN000;
 38946 0000714E F2AE                    	REPNZ	SCASB			;AN000;
 38947                                  					;AN000;
 38948 00007150 4F                      	DEC	DI			; point back to the null
 38949 00007151 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38950 00007155 E8A9DF                  	call	PATHCHRCMP		; Is it a path separator?
 38951 00007158 7403                    	JZ	short SETENDPTR		; Yes
 38952                                  STOREPTH:
 38953 0000715A B05C                    	MOV	AL,'\'
 38954 0000715C AA                      	STOSB				; Add a path separator (and INC DI)
 38955                                  SETENDPTR:
 38956                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38957 0000715D 8856FC                  	mov	[bp-4],dl
 38958                                  CreateLoop:
 38959 00007160 16                      	push	ss			; let ReadTime see variables
 38960 00007161 1F                      	pop	ds
 38961 00007162 55                      	push	bp
 38962 00007163 E8D399                  	call	READTIME		; go get time
 38963 00007166 5D                      	pop	bp
 38964                                  ;
 38965                                  ; Time is in CX:DX. Go drop it into the string.
 38966                                  ;
 38967                                  	;les	di,EndPtr		; point to the string
 38968 00007167 C47EFC                  	les	di,[BP-4]
 38969 0000716A 89C8                    	mov	ax,cx
 38970 0000716C E8A2FF                  	call	BinToAscii		; store upper word
 38971 0000716F 89D0                    	mov	ax,dx
 38972 00007171 E89DFF                  	call	BinToAscii		; store lower word
 38973 00007174 30C0                    	xor	al,al
 38974 00007176 AA                      	STOSB				; nul terminate
 38975                                  	;LDS	DX,FilPtr		; get name
 38976 00007177 C556F8                  	lds	dx,[bp-8]
 38977                                  	;MOV	CX,Attr 		; get attr
 38978 0000717A 8B4EF6                  	mov	cx,[bp-10]
 38979 0000717D 55                      	push	bp
 38980 0000717E E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38981 00007181 5D                      	pop	bp
 38982 00007182 7319                    	JNC	short CreateDone	; failed, go try again
 38983                                  
 38984                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38985                                  ; error and figure out what to do.
 38986                                  
 38987                                  	;; MSDOS 3.3			; M049 - start
 38988                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38989                                  ;;	cmp	al,error_file_exists
 38990                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38991                                  ;;	cmp	al,error_access_denied
 38992                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38993                                  
 38994                                  	; MSDOS 6.0
 38995                                  	;cmp	al,50h
 38996 00007184 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38997 00007186 74D8                    	JZ	short CreateLoop	; Y: try again
 38998                                  	;cmp	al,5
 38999 00007188 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 39000 0000718A 7510                    	JNZ	short SETTMPERR		; N: Error out
 39001                                  					; Y: Check to see if we got this due
 39002                                  					;    to the network drive. Note that
 39003                                  					;    the redir will set the exterr
 39004                                  					;    to error_cannot_make if this is 
 39005                                  					;    so. 
 39006 0000718C 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 39007                                  					; See if it's REALLY an att mismatch
 39008 00007192 7408                    	je	short SETTMPERR		; no, network error, stop
 39009                                  ;M070
 39010                                  ; If the user failed on an I24, we do not want to try again
 39011                                  ;
 39012 00007194 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 39013                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 39014                                  
 39015                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 39016                                  	; 17/12/2022
 39017 0000719A 75C4                    	jne	short CreateLoop ; 10/06/2019 
 39018                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39019                                  	;jz	short SETTMPERR
 39020                                  	;jmp	short CreateLoop
 39021                                  
 39022                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 39023                                  					; M049 - end
 39024                                  SETTMPERR:
 39025 0000719C F9                      	STC
 39026                                  CreateDone:
 39027                                  	;Leave
 39028 0000719D 89EC                    	mov	sp,bp
 39029 0000719F 5D                      	pop	bp
 39030 000071A0 7203                    	JC	short CreateFail
 39031 000071A2 E9A494                  	jmp	SYS_RET_OK		; success!
 39032                                  CreateFail:
 39033 000071A5 E9AA94                  	jmp	SYS_RET_ERR
 39034                                  
 39035                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 39036                                  ;   (CH) or to the value in CL if the current system call is through
 39037                                  ;   serverdoscall.
 39038                                  ;
 39039                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 39040                                  ;		fSharing == TRUE => set sattrib to CL
 39041                                  ;   Outputs:	none
 39042                                  ;   Registers changed:	CX
 39043                                  
 39044                                  SetAttrib:
 39045 000071A8 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 39046 000071AE 7502                    	jnz	short Set
 39047 000071B0 88E9                    	mov	cl,ch
 39048                                  Set:
 39049 000071B2 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 39050 000071B7 C3                      	retn
 39051                                  
 39052                                  ; 14/07/2018 - Retro DOS v3.0
 39053                                  ; MSDOS 6.0
 39054                                  
 39055                                  ; 29/04/2019 - Retro DOS v4.0
 39056                                  
 39057                                  ;Break	<Extended_Open- Extended open the file>
 39058                                  ;----------------------------------------------------------------------------
 39059                                  ; Input: AL= 0 reserved  AH=6CH
 39060                                  ;	 BX= mode
 39061                                  ;	 CL= create attribute  CH=search attribute (from server)
 39062                                  ;	 DX= flag
 39063                                  ;	 DS:SI = file name
 39064                                  ;	 ES:DI = parm list
 39065                                  ;			   DD  SET EA list (-1) null
 39066                                  ;			   DW  n  parameters
 39067                                  ;			   DB  type (TTTTTTLL)
 39068                                  ;			   DW  IOMODE
 39069                                  ; Function: Extended Open
 39070                                  ; Output: carry clear
 39071                                  ;		     AX= handle
 39072                                  ;		     CX=1 file opened
 39073                                  ;			2 file created/opened
 39074                                  ;			3 file replaced/opened
 39075                                  ;	  carry set: AX has error code
 39076                                  ;----------------------------------------------------------------------------
 39077                                  
 39078                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39079                                  _$Extended_Open:			  ;AN000;
 39080                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 39081 000071B8 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 39082 000071BD 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 39083                                  	; 17/12/2022
 39084 000071C4 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 39085                                  	;;test	dx,0FE00h
 39086                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 39087 000071C7 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 39088 000071C9 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 39089 000071CB 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 39090 000071CE 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 39091                                  	;and	dl,0Fh
 39092 000071D0 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 39093 000071D3 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 39094 000071D6 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 39095                                  	;and	ah,0F0h
 39096 000071D8 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 39097 000071DB 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 39098 000071DE 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 39099                                  
 39100 000071E0 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 39101 000071E5 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 39102 000071EA 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 39103 000071EF 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 39104 000071F4 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 39105 000071F9 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 39106 000071FE 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 39107 00007203 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 39108 00007208 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 39109 0000720A 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 39110 0000720C EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 39111                                  ext_inval2:				  ;AN000;;EO.
 39112                                  	;mov	al,1
 39113 0000720E B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 39114                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39115                                  eo_err:
 39116                                  	;jmp	SYS_RET_ERR
 39117 00007210 EB93                    	jmp	short CreateFail
 39118                                  
 39119                                  ext_inval_parm:				  ;AN000;EO..
 39120 00007212 59                      	POP	CX			  ;AN000;EO..  pop up satck
 39121 00007213 5E                      	POP	SI			  ;AN000;EO..
 39122                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 39123                                  	;mov	al,13
 39124 00007214 B00D                    	mov	al,error_invalid_data
 39125                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39126                                  	;;jmp	SYS_RET_ERR
 39127                                  	;jmp	short eo_err
 39128                                  	; 17/12/2022
 39129 00007216 EB8D                    	jmp	short CreateFail
 39130                                  
 39131                                  	; 17/12/2022	
 39132                                  ;error_return:				  ;AN000;EO.
 39133                                  ;	retn				  ;AN000;EO.. return with error
 39134                                  
 39135                                  goopen2:				  ;AN000;
 39136                                  	; 17/12/2022
 39137                                  	;test	bh,20h				 
 39138 00007218 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 39139                                  	;;test	bx,2000h
 39140                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 39141 0000721B 7406                    	JZ	short goopen		  ;AN000;EO.. no
 39142                                  	;or	byte [SS:EXTOPEN_ON],2
 39143 0000721D 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 39144                                  goopen:					  ;AN000;
 39145                                  	;or	byte [SS:EXTOPEN_ON],1 
 39146 00007223 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 39147                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 39148                                  	; 18/12/2022
 39149 00007229 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 39150                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 39151 0000722F 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 39152 00007235 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 39153 00007237 E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 39154 0000723A 723F                    	JC	short error_return	  ;AN000;;EO. error
 39155                                  
 39156 0000723C 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39157 00007242 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39158                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39159 00007244 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 39160 0000724B EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 39161                                  
 39162                                  	; 17/12/2022
 39163                                  ;ok_return2:
 39164                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 39165                                  
 39166                                  chknext:
 39167                                  	; 17/12/2022
 39168 0000724D 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 39169                                  	;;test	word [SS:EXTOPEN_FLAG],1
 39170                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 39171 00007253 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 39172 00007255 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 39173 00007258 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 39174 0000725A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 39175 00007260 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 39176 00007262 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 39177 00007269 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 39178 0000726F 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 39179 00007271 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 39180 00007278 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39181                                  error_return2:
 39182 0000727A F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 39183                                  error_return:	 ;17/12/2022
 39184 0000727B C3                      	retn				  ;AN000;;EO. return with error
 39185                                  
 39186                                  	; 17/12/2022
 39187                                  ok_return:
 39188                                  ok_return2:
 39189 0000727C E9CA93                  	jmp	SYS_RET_OK
 39190                                  
 39191                                  exist_open:				  ;AN000;
 39192 0000727F 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 39193 00007285 7402                    	jz	short noserver		  ;AN000;;EO. no
 39194 00007287 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 39195                                  noserver:
 39196 00007289 E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 39197 0000728C 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 39198 0000728E 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 39199 00007294 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 39200                                  local_extopen:
 39201                                  	;cmp	ax,2
 39202 00007296 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 39203 00007299 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 39204                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 39205                                  	; 17/12/2022
 39206 0000729B 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 39207                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 39208                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 39209                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 39210                                  	; 17/12/2022
 39211 000072A1 745D                    	jz	short extexit ; 10/06/2019
 39212                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39213                                  	;jnz	short do_creat
 39214                                  	;jmp	short extexit
 39215                                  do_creat:
 39216 000072A3 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39217 000072A8 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39218 000072AD 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39219 000072AF E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39220 000072B2 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39221                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39222 000072B4 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39223                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39224 000072BB EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39225                                  
 39226                                  ext_ok:
 39227 000072BD 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39228 000072C3 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39229                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39230 000072C5 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39231                                  setXAttr:
 39232                                  	; 29/04/2019
 39233 000072CC 50                      	push	ax
 39234 000072CD E8BF91                  	call	Get_User_Stack		  ;AN000;;EO.
 39235 000072D0 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39236                                  	;mov	[si+4],ax
 39237 000072D4 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39238 000072D7 58                      	pop	ax			  ;AN000;;EO.
 39239 000072D8 8904                    	mov	[si],ax
 39240                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39241                                  	; 17/12/2022
 39242 000072DA EBA0                    	jmp	short ok_return
 39243                                  ;ok_return:				  ;AN000;
 39244                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39245                                  
 39246                                  extexit2:				  ;AN000; ERROR RECOVERY
 39247 000072DC 5B                      	POP	BX			  ;AN000;EO. close the handle
 39248 000072DD 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39249                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39250 000072DE 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39251                                  					  ;AN000;EO. from create;smr;SS Override
 39252 000072E4 750C                    	JNZ	short justopen		  ;AN000;EO.
 39253 000072E6 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39254 000072EB C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39255 000072ED E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39256 000072F0 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39257                                  
 39258                                  justopen:				  ;AN000;
 39259 000072F2 E886F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39260                                  reserror:				  ;AN000;
 39261 000072F5 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39262 000072F6 EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39263                                  
 39264                                  ext_file_unfound:			  ;AN000;
 39265                                  	;mov	ax,2
 39266 000072F8 B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39267 000072FB EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39268                                  ext_inval:				  ;AN000;
 39269                                  	;mov	ax,1
 39270 000072FD B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39271                                  lockoperr:	; 17/12/2022
 39272                                  extexit:
 39273 00007300 E94F93                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39274                                  
 39275                                  ;============================================================================
 39276                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39277                                  ;============================================================================
 39278                                  ; 14/07/2018 - Retro DOS v3.0
 39279                                  ; 22/05/2019 - Retro DOS v4.0
 39280                                  
 39281                                  ;BREAK <$LockOper - Lock Calls>
 39282                                  ;----------------------------------------------------------------------------
 39283                                  ;
 39284                                  ;   Assembler usage:
 39285                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39286                                  ;	    MOV     CX, OffsetHigh
 39287                                  ;	    MOV     DX, OffsetLow
 39288                                  ;	    MOV     SI, LengthHigh
 39289                                  ;	    MOV     DI, LengthLow
 39290                                  ;	    MOV     AH, LockOper
 39291                                  ;	    MOV     AL, Request
 39292                                  ;	    INT     21h
 39293                                  ;
 39294                                  ;   Error returns:
 39295                                  ;	    AX = error_invalid_handle
 39296                                  ;	       = error_invalid_function
 39297                                  ;	       = error_lock_violation
 39298                                  ;
 39299                                  ;   Assembler usage:
 39300                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39301                                  ;
 39302                                  ;				    0? lock all
 39303                                  ;				    8? lock write
 39304                                  ;				    ?2 lock multiple
 39305                                  ;				    ?3 unlock multiple
 39306                                  ;				    ?4 lock/read
 39307                                  ;				    ?5 write/unlock
 39308                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39309                                  ;	    MOV     BX, Handle
 39310                                  ;	    MOV     CX, count or size
 39311                                  ;	    LDS     DX, buffer
 39312                                  ;	    INT     21h
 39313                                  ;
 39314                                  ;   Error returns:
 39315                                  ;	    AX = error_invalid_handle
 39316                                  ;	       = error_invalid_function
 39317                                  ;	       = error_lock_violation
 39318                                  ;
 39319                                  ;----------------------------------------------------------------------------
 39320                                  
 39321                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39322                                  _$LockOper:
 39323 00007303 3C01                    	CMP	AL,1
 39324 00007305 770B                    	JA	short lock_bad_func
 39325                                  
 39326 00007307 57                      	PUSH	DI			       ; Save LengthLow
 39327 00007308 E8D5F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39328 0000730B 731D                    	JNC	short lock_do 		       ; have valid handle
 39329 0000730D 5F                      	POP	DI			       ; Clean stack
 39330                                  	;mov	al,6
 39331 0000730E B006                    	mov	al,error_invalid_handle
 39332                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39333                                  ;lockoperr:
 39334                                  	;jmp	SYS_RET_ERR
 39335                                  	; 17/12/2022
 39336 00007310 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39337                                  
 39338                                  lock_bad_func:
 39339                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39340 00007312 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39341                                  	;mov	al,1
 39342 00007318 B001                    	mov	al,error_invalid_function
 39343                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39344                                  lockoperrj:
 39345                                  	;jmp	SYS_RET_ERR
 39346 0000731A EBE4                    	jmp	short lockoperr
 39347                                  
 39348                                  	; 22/05/2019 - Retro DOS v4.0
 39349                                  
 39350                                  	; MSDOS 6.0 
 39351                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39352                                  ; Dead code deleted, MD, 23 Mar 90
 39353                                  
 39354                                  ;lock_do:
 39355                                  ;	; MSDOS 3.3
 39356                                  ;	or	al,al
 39357                                  ;	pop	ax
 39358                                  ;	jz	short DOS_Lock
 39359                                  ;DOS_Unlock:
 39360                                  ;	;test	word [es:di+5],8000h
 39361                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39362                                  ;	JZ	short LOCAL_UNLOCK
 39363                                  ;	push    ax
 39364                                  ;	mov     ax,110Bh
 39365                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39366                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39367                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39368                                  ;			; SFT DPB field -> DPB of drive containing file
 39369                                  ;			; Return: CF set error
 39370                                  ;	pop     bx
 39371                                  ;	jmp     short ValChk
 39372                                  ;
 39373                                  ;LOCAL_UNLOCK:
 39374                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39375                                  ;ValChk:
 39376                                  ;	JNC	short Lock_OK
 39377                                  ;lockerror:
 39378                                  ;	jmp	SYS_RET_ERR
 39379                                  ;Lock_OK:
 39380                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39381                                  ;	jmp	SYS_RET_OK
 39382                                  ;DOS_Lock:
 39383                                  ;	;test	word [es:di+5],8000h
 39384                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39385                                  ;	JZ	short LOCAL_LOCK
 39386                                  ;	;CallInstall NET_XLock,MultNET,10
 39387                                  ;	mov     ax, 110Ah
 39388                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39389                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39390                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39391                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39392                                  ;			; Return: CF set error
 39393                                  ;	JMP	short ValChk
 39394                                  ;
 39395                                  ;LOCAL_LOCK:
 39396                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39397                                  ;	JMP	short ValChk
 39398                                  
 39399                                  ; 17/12/2022
 39400                                  LOCAL_UNLOCK:
 39401                                  	; MSDOS 3.3
 39402                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39403                                  	; MSDOS 6.0
 39404 0000731C FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39405                                  ValChk:
 39406 00007320 7302                    	JNC	short Lock_OK
 39407                                  lockerror:
 39408                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39409                                  	;;jmp	SYS_RET_ERR
 39410                                  	;jmp	short lockoperrj
 39411                                  	; 17/12/2022
 39412 00007322 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39413                                  Lock_OK:
 39414                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39415                                  	; 10/06/2019
 39416 00007324 A1[0C06]                	mov	ax,[TEMP_VAR]
 39417 00007327 E91F93                  	jmp	SYS_RET_OK
 39418                                  
 39419                                  	; 22/05/2019
 39420                                  lock_do:
 39421                                  	; MSDOS 6.0
 39422 0000732A 89C3                    	MOV	BX,AX				; save AX
 39423 0000732C BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39424                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39425                                  	;;mov	[bp+0],dx
 39426                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39427                                  	; 15/12/2022
 39428 0000732F 895600                  	mov	[bp],dx
 39429                                  	;mov	[bp+2],cx
 39430 00007332 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39431 00007335 59                      	POP	CX				; get low length
 39432                                  	;mov	[bp+4],cx
 39433 00007336 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39434                                  	;mov	[bp+6],si
 39435 00007339 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39436 0000733C B90100                  	MOV	CX,1				; one range
 39437                                  
 39438                                  ;	PUSH	CS				;
 39439                                  ;	POP	DS				; DS:DX points to
 39440                                  
 39441 0000733F 16                      	push	ss
 39442 00007340 1F                      	pop	ds
 39443                                  
 39444 00007341 89EA                    	MOV	DX,BP				; Lock_Buffer
 39445                                  	;test	al,1
 39446 00007343 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39447                                  	;JNZ	short DOS_Unlock		; yes
 39448                                  	;JMP	short DOS_Lock			; function 0
 39449                                  	; 17/12/2022
 39450                                  	; 10/06/2019
 39451 00007345 740E                    	jz	short DOS_Lock
 39452                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39453                                  	;JNZ	short DOS_Unlock
 39454                                  	;JMP	short DOS_Lock
 39455                                  
 39456                                  DOS_Unlock:
 39457                                  	;;test	word [es:di+5],8000h
 39458                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39459 00007347 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39460 0000734C 74CE                    	JZ	short LOCAL_UNLOCK
 39461                                  
 39462                                  lock_unlock: ; 22/05/2019
 39463                                  	
 39464                                  	;CallInstall Net_Xlock,MultNET,10
 39465                                  	
 39466                                  	; MSDOS 3.3
 39467                                  	;mov     ax,110Bh
 39468                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39469                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39470                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39471                                  			; SFT DPB field -> DPB of drive containing file
 39472                                  			; Return: CF set error
 39473                                  	; MSDOS 6.0
 39474 0000734E B80A11                  	mov     ax,110Ah
 39475 00007351 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39476                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39477                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39478                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39479                                  			; Return: CF set error
 39480                                  
 39481 00007353 EBCB                    	JMP	SHORT ValChk
 39482                                  
 39483                                  ; 17/12/2022
 39484                                  %if 0
 39485                                  LOCAL_UNLOCK:
 39486                                  	; MSDOS 3.3
 39487                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39488                                  	; MSDOS 6.0
 39489                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39490                                  ValChk:
 39491                                  	JNC	short Lock_OK
 39492                                  lockerror:
 39493                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39494                                  	;jmp	SYS_RET_ERR
 39495                                  	jmp	short lockoperrj
 39496                                  Lock_OK:
 39497                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39498                                  	; 10/06/2019
 39499                                  	mov	ax,[TEMP_VAR]
 39500                                  	jmp	SYS_RET_OK
 39501                                  %endif
 39502                                  
 39503                                  DOS_Lock:
 39504                                  	;;test	word [es:di+5],8000h
 39505                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39506 00007355 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39507 0000735A 7407                    	JZ	short LOCAL_LOCK
 39508                                  
 39509                                  	;CallInstall NET_XLock,MultNET,10
 39510                                  
 39511 0000735C B80A11                  	mov     ax,110Ah
 39512 0000735F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39513                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39514                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39515                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39516                                  			; Return: CF set error
 39517                                  
 39518 00007361 EBBD                    	JMP	short ValChk
 39519                                  
 39520                                  LOCAL_LOCK:
 39521                                  	; MSDOS 3.3
 39522                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39523                                  	; MSDOS 6.0
 39524 00007363 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39525                                  
 39526 00007367 EBB7                    	JMP	short ValChk
 39527                                  
 39528                                  ; 14/07/2018 - Retro DOS v3.0
 39529                                  ; LOCK_CHECK
 39530                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39531                                  
 39532                                  ;----------------------------------------------------------------------------
 39533                                  ; Inputs:
 39534                                  ;	Outputs of SETUP
 39535                                  ;	[USER_ID] Set
 39536                                  ;	[PROC_ID] Set
 39537                                  ; Function:
 39538                                  ;	Check for lock violations on local I/O
 39539                                  ;	Retries are attempted with sleeps in between
 39540                                  ; Outputs:
 39541                                  ;    Carry clear
 39542                                  ;	Operation is OK
 39543                                  ;    Carry set
 39544                                  ;	A lock violation detected
 39545                                  ; Outputs of SETUP preserved
 39546                                  ;----------------------------------------------------------------------------
 39547                                  
 39548                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39549                                  	; 22/05/2019 - Retro DOS v4.0
 39550                                  LOCK_CHECK:
 39551 00007369 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39552                                  LockRetry:
 39553 0000736D 53                      	push	bx		; save regs
 39554 0000736E 50                      	push	ax ; MSDOS 6.0
 39555                                  
 39556                                  	;MSDOS 3.3
 39557                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39558                                  	;MSDOS 6.0
 39559 0000736F FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39560                                  
 39561 00007373 58                      	pop	ax ; MSDOS 6.0
 39562 00007374 5B                      	pop	bx		; restrore regs
 39563 00007375 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39564                                  LockN:
 39565 00007377 E8D39E                  	call	Idle		; wait a while
 39566 0000737A 4B                      	DEC	BX		; remember a retry
 39567 0000737B 75F0                    	JNZ	short LockRetry	; more retries left...
 39568 0000737D F9                      	STC
 39569                                  lc_ret_label:
 39570 0000737E C3                      	retn
 39571                                  
 39572                                  ; 14/07/2018 - Retro DOS v3.0
 39573                                  ; LOCK_VIOLATION
 39574                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39575                                  
 39576                                  ;----------------------------------------------------------------------------
 39577                                  ; Inputs:
 39578                                  ;	[THISDPB] set
 39579                                  ;	[READOP] indicates whether error on read or write
 39580                                  ; Function:
 39581                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39582                                  ; Outputs:
 39583                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39584                                  ;	Carry clear if user wants a retry
 39585                                  ;
 39586                                  ; DS, ES, DI, CX preserved, others destroyed
 39587                                  ;----------------------------------------------------------------------------
 39588                                  
 39589                                  LOCK_VIOLATION:
 39590 0000737F 1E                      	PUSH	DS
 39591 00007380 06                      	PUSH	ES
 39592 00007381 57                      	PUSH	DI
 39593 00007382 51                      	PUSH	CX
 39594                                  	;mov	ax,21h
 39595 00007383 B82100                  	MOV	AX,error_lock_violation
 39596                                  	;mov	byte [ALLOWED],18h
 39597 00007386 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39598 0000738B C42E[8A05]              	LES	BP,[THISDPB]
 39599 0000738F BF0100                  	MOV	DI,1		; Fake some registers
 39600 00007392 89F9                    	MOV	CX,DI
 39601                                  	;mov	dx,[es:bp+11]
 39602 00007394 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39603 00007398 E8CFDF                  	call	HARDERR
 39604 0000739B 59                      	POP	CX
 39605 0000739C 5F                      	POP	DI
 39606 0000739D 07                      	POP	ES
 39607 0000739E 1F                      	POP	DS
 39608 0000739F 3C01                    	CMP	AL,1
 39609 000073A1 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39610 000073A3 F9                      	STC
 39611 000073A4 C3                      	retn
 39612                                  
 39613                                  ; 14/07/2018 - Retro DOS v3.0
 39614                                  
 39615                                  ;----------------------------------------------------------------------------
 39616                                  
 39617                                  ;	do a retz to return error
 39618                                  
 39619                                  	; 22/05/2019 - Retro DOS v4.0
 39620                                  CheckShare:
 39621                                  	; MSDOS 3.3
 39622                                  	;cmp	byte [cs:fShare],0
 39623                                  	;retn
 39624                                  
 39625                                  	; MSDOS 6.0
 39626 000073A5 1E                      	push	ds			;smr;
 39627                                  	;getdseg <ds>			; ds -> dosdata
 39628 000073A6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39629 000073AB 803E[0303]00            	cmp	byte [fShare],0
 39630 000073B0 1F                      	pop	ds			;smr;
 39631 000073B1 C3                      	retn
 39632                                  	
 39633                                  ;============================================================================
 39634                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39635                                  ;============================================================================
 39636                                  ; 14/07/2018 - Retro DOS v3.0
 39637                                  ; 22/05/2019 - Retro DOS v4.0
 39638                                  
 39639                                  ; SHARE_CHECK
 39640                                  ;----------------------------------------------------------------------------
 39641                                  ; Inputs:
 39642                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39643                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39644                                  ;       [WFP_START] has full path of name
 39645                                  ;       [USER_ID] Set
 39646                                  ;       [PROC_ID] Set
 39647                                  ; Function:
 39648                                  ;       Check for sharing violations on local file/device access
 39649                                  ; Outputs:
 39650                                  ;    Carry clear
 39651                                  ;       Sharing approved
 39652                                  ;    Carry set
 39653                                  ;       A sharing violation detected
 39654                                  ;           AX is error code
 39655                                  ; USES    ALL but DS
 39656                                  ;----------------------------------------------------------------------------
 39657                                  
 39658                                  	; 22/05/2019 - Retro DOS v4.0
 39659                                  SHARE_CHECK:
 39660                                  	; 26/07/2019
 39661 000073B2 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39662                                  shchk_retn:
 39663 000073B6 C3                      	retn
 39664                                  
 39665                                  ; SHARE_VIOLATION
 39666                                  ;----------------------------------------------------------------------------
 39667                                  ; Inputs:
 39668                                  ;       [THISDPB] Set
 39669                                  ;       AX has error code
 39670                                  ; Function:
 39671                                  ;       Handle Sharing errors
 39672                                  ; Outputs:
 39673                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39674                                  ;       Carry clear if user wants a retry
 39675                                  ;
 39676                                  ; DS, ES, DI preserved, others destroyed
 39677                                  ;----------------------------------------------------------------------------
 39678                                  
 39679                                  SHARE_VIOLATION:
 39680 000073B7 1E                      	PUSH    DS
 39681 000073B8 06                      	PUSH	ES
 39682 000073B9 57                      	PUSH    DI
 39683 000073BA C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39684                                  	;mov	byte [ALLOWED],18h
 39685 000073BF C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39686 000073C4 C42E[8A05]              	LES     BP,[THISDPB]
 39687 000073C8 BF0100                  	MOV     DI,1			; Fake some registers
 39688 000073CB 89F9                    	MOV     CX,DI
 39689                                  	;mov	dx,[es:bp+17]
 39690 000073CD 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39691 000073D1 E896DF                  	call	HARDERR
 39692 000073D4 5F                      	POP     DI
 39693 000073D5 07                      	POP	ES
 39694 000073D6 1F                      	POP     DS
 39695 000073D7 3C01                    	CMP     AL,1
 39696 000073D9 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39697 000073DB F9                      	STC
 39698 000073DC C3                      	retn
 39699                                  
 39700                                  ;----------------------------------------------------------------------------
 39701                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39702                                  ;       NOT perform a close, it merely asserts that the sharing information
 39703                                  ;       for the SFT/UID/PID may be safely released.
 39704                                  ;
 39705                                  ;   Inputs:     ES:DI points to an SFT
 39706                                  ;   Outputs:    None
 39707                                  ;   Registers modified: all except DS,ES,DI
 39708                                  ;----------------------------------------------------------------------------
 39709                                  
 39710                                  ShareEnd:
 39711                                  	; 26/07/2019
 39712 000073DD FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39713 000073E1 C3                      	retn
 39714                                  
 39715                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39716                                  ;----------------------------------------------------------------------------
 39717                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39718                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39719                                  ;
 39720                                  ;   Inputs:     ThisSFT points to the SFT
 39721                                  ;               WFP_Start points to the WFP
 39722                                  ;   Outputs:    Carry clear => successful entry
 39723                                  ;               Carry set => failed system call
 39724                                  ;   Registers modified: all
 39725                                  ;----------------------------------------------------------------------------
 39726                                  
 39727                                  ShareEnter:
 39728 000073E2 51                      	push	cx
 39729                                  retry:
 39730 000073E3 8B0E[1A00]              	mov     cx,[RetryCount]
 39731                                  attempt:
 39732 000073E7 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39733 000073EB 31C0                    	XOR     AX,AX
 39734                                   	;mov	[es:di+51],axfff
 39735 000073ED 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39736 000073F1 51                      	push	cx
 39737 000073F2 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39738 000073F5 59                      	pop	cx
 39739 000073F6 730A                    	jnc	short done		; success, let the user see this
 39740 000073F8 E8529E                  	call	Idle                    ; wait a while
 39741 000073FB E2EA                    	loop    attempt                 ; go back for another attempt
 39742 000073FD E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39743 00007400 73E1                    	jnc	short retry		; user said to retry, go do it
 39744                                  done:
 39745 00007402 59                      	pop	cx
 39746 00007403 C3                      	retn
 39747                                  
 39748                                  ;============================================================================
 39749                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39750                                  ;============================================================================
 39751                                  ; 29/04/2019 - Retro DOS 4.0
 39752                                  
 39753                                  ;** EXEPATCH.ASM 
 39754                                  ;----------------------------------------------------------------------------
 39755                                  ;	Contains the foll:
 39756                                  ;
 39757                                  ;		- code to find and overlay buggy unpack code
 39758                                  ;		- new code to be overlayed on buggy unpack code 
 39759                                  ;		- old code sequence to identify buggy unpack code
 39760                                  ;
 39761                                  ;	Revision history:
 39762                                  ;
 39763                                  ;		Created: 5/14/90
 39764                                  ;----------------------------------------------------------------------------
 39765                                  
 39766                                  ;----------------------------------------------------------------------------
 39767                                  ;
 39768                                  ; M020 : Fix for rational bug - for details see routine header
 39769                                  ; M028 : 4b04 implementation
 39770                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39771                                  ; M032 : set turnoff bit only if DOS in HMA.
 39772                                  ; M033 : if IP < 2 then not exepacked.
 39773                                  ; M046 : support for a 4th version of exepacked files.
 39774                                  ; M068 : support for copy protected apps.
 39775                                  ; M071 : use A20OFF_COUNT of 10.
 39776                                  ;
 39777                                  ;----------------------------------------------------------------------------
 39778                                  
 39779                                  PATCH1_COM_OFFSET	EQU	06CH
 39780                                  PATCH1_OFFSET		EQU	028H
 39781                                  PATCH1_CHKSUM		EQU	0EF4EH
 39782                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39783                                  
 39784                                  PATCH2_COM_OFFSET	EQU	076H
 39785                                  PATCH2_OFFSET		EQU	032H
 39786                                  
 39787                                  	; The strings that start at offset 076h have two possible 
 39788                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39789                                  
 39790                                  PATCH2_CHKSUM		EQU	78B2H
 39791                                  CHKSUM2_LEN		EQU	119H/2
 39792                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39793                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39794                                  
 39795                                  PATCH3_COM_OFFSET	EQU	074H
 39796                                  PATCH3_OFFSET		EQU	032H
 39797                                  PATCH3_CHKSUM		EQU	4EDEH
 39798                                  CHKSUM3_LEN		EQU	117H/2
 39799                                  
 39800                                  ;**	Data structure passed for ExecReady call
 39801                                  ;
 39802                                  ;struc ERStruc
 39803                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39804                                  ; .ER_Flags:	resw	1
 39805                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39806                                  ; .ER_PSP:	resw	1	; PSP of the program
 39807                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39808                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39809                                  ; .size:
 39810                                  ;endstruc
 39811                                  
 39812                                  ;DOSCODE SEGMENT
 39813                                  
 39814                                  	; 22/05/2019 - Retro DOS v4.0
 39815                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39816                                  
 39817                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39818                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39819                                  
 39820                                  ; M028 - BEGIN
 39821                                  
 39822                                  ;--------------------------------------------------------------------------
 39823                                  ;
 39824                                  ;	Procedure Name		: ExecReady
 39825                                  ;
 39826                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39827                                  ;
 39828                                  ;--------------------------------------------------------------------------
 39829                                  
 39830                                  ExecReady:
 39831 00007404 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39832                                  	;;test	word [si+2],1
 39833                                  	; 17/12/2022
 39834 00007406 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39835                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39836 0000740A 7413                    	jz	short er_setver		; only setver for .COM files
 39837                                  
 39838                                  	;mov	ax,[si+8]
 39839 0000740C 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39840 0000740F 83C010                  	add	ax,10h
 39841 00007412 8EC0                    	mov	es,ax
 39842                                  
 39843                                  	;mov	cx,[si+10]
 39844 00007414 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39845                                  	;mov	cx,[si+12]
 39846 00007417 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39847                                  
 39848                                  	;call	[ss:FixExePatch]
 39849 0000741A 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 39850                                  	
 39851                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39852                                  	;call	[ss:Rational386PatchPtr]
 39853                                  
 39854                                  er_setver:
 39855                                  	;;test	word [si+2],2		; Q: is this an overlay
 39856                                  	; 17/12/2022
 39857 0000741F F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39858                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39859 00007423 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39860                                  					; N: set up lie version first
 39861 00007425 1E                      	push	ds
 39862 00007426 56                      	push	si
 39863                                  	;lds	si,[si+4]
 39864 00007427 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39865 0000742A E876ED                  	call	Scan_Execname1
 39866 0000742D E887ED                  	call	Scan_Special_Entries
 39867 00007430 5E                      	pop	si
 39868 00007431 1F                      	pop	ds
 39869                                  	;mov	es,[si+8]
 39870 00007432 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39871 00007435 36A1[BC0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39872 00007439 26A34000                	mov	[es:PDB.Version],ax
 39873                                  
 39874                                  er_chkdoshi:
 39875 0000743D 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39876 00007443 741F                    	je	short er_done		; M032: N: done
 39877                                  
 39878                                  					; M068 - Start
 39879                                  	;mov	ax,[si+8]
 39880 00007445 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39881                                  
 39882                                  	;or	byte [ss:DOS_FLAG],4
 39883 00007448 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39884                                  					; ah = 25 & ah= 49. See dossym.inc 
 39885                                  					; under TAG M003 & M009 for 
 39886                                  					; explanation
 39887                                  	;;test	word [si+2],1
 39888                                  	; 17/12/2022
 39889 0000744E F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39890                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39891 00007452 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39892                                  					;    a20off_psp and ret
 39893 00007454 1E                         	push	ds
 39894 00007455 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39895 00007457 E88E02                  	call	IsCopyProt		; check if copy protected
 39896 0000745A 1F                      	pop	ds
 39897                                  
 39898                                  er_setA20:
 39899                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39900                                  	; is non-zero at this point it indicates that the A20 is to be 
 39901                                  	; turned off for that many int 21 calls made by the app. In 
 39902                                  	; addition the A20 has to be turned off when we exit from this 
 39903                                  	; call. Hence the inc.
 39904                                  
 39905 0000745B 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39906 00007460 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39907                                  					; turned OFF.
 39908                                  er_done:				; M068 - End
 39909 00007464 31C0                    	xor	ax,ax
 39910 00007466 C3                      	retn
 39911                                  
 39912                                  ; M028 - END
 39913                                  
 39914                                  
 39915                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39916                                  %if 0
 39917                                  
 39918                                  ;----------------------------------------------------------------------------
 39919                                  ;
 39920                                  ; procedure : Rational386Patch
 39921                                  ;
 39922                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39923                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39924                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39925                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39926                                  ;
 39927                                  ; This routine applies patches to the Rational DOS Extender to work around
 39928                                  ; most of the register trashing bugs.
 39929                                  ;
 39930                                  ; Note that there are additional register trashing bugs not fixed by these
 39931                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39932                                  ; may be modified on interrupts.
 39933                                  ;
 39934                                  ; There are two different Rational DOS Extender patchs in this module.
 39935                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39936                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39937                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39938                                  ; or not.
 39939                                  ;
 39940                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39941                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39942                                  ; running in the HMA.
 39943                                  ;
 39944                                  ; This patch detection and replacement is based on an example supplied by
 39945                                  ; Ben Williams at Rational.
 39946                                  ;
 39947                                  ;----------------------------------------------------------------------------
 39948                                  
 39949                                  ; 22/05/2019 - Retro DOS v4.0
 39950                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39951                                  
 39952                                  ;----------------------------------------------------------------------------
 39953                                  ;
 39954                                  ; INPUT : ES = segment where program got loaded
 39955                                  ;
 39956                                  ;----------------------------------------------------------------------------
 39957                                  
 39958                                  rpFind1:
 39959                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39960                                  
 39961                                  rpFind1Len equ	$ - rpFind1
 39962                                  
 39963                                  ;	cli
 39964                                  ;	in	al, 21h
 39965                                  ;	pusha
 39966                                  ;	xor	ax, ax
 39967                                  ;	out	43h, al
 39968                                  ;	mov	dx, ...
 39969                                  
 39970                                  rpFind1a:
 39971                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39972                                  
 39973                                  rpFind1aLen equ	$ - rpFind1a
 39974                                  
 39975                                  ;	mov	al, 0Eh
 39976                                  ;	out	37h, al
 39977                                  ;	xor	ax, ax
 39978                                  ;	out	0F2h, al
 39979                                  
 39980                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39981                                  
 39982                                  rpFind2:
 39983                                  	db	0Fh, 20h, 0C0h
 39984                                  
 39985                                  rpFind2Len equ	$ - rpFind2
 39986                                  
 39987                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39988                                  
 39989                                  rpFind3:
 39990                                  	db	0Fh, 22h, 0C0h, 0EAh
 39991                                  
 39992                                  rpFind3Len equ	$ - rpFind3
 39993                                  
 39994                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39995                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39996                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39997                                  
 39998                                  ; note, there is no rpRepl1 string
 39999                                  
 40000                                  rpRepl2:
 40001                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 40002                                  
 40003                                  rpRepl2Len equ	$ - rpRepl2
 40004                                  
 40005                                  ;	push	eax
 40006                                  ;	push	cx
 40007                                  ;	mov	eax, cr0
 40008                                  
 40009                                  rpRepl3:
 40010                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 40011                                  
 40012                                  rpRepl3Len equ	$ - rpRepl3
 40013                                  
 40014                                  ;	mov	ss, bx
 40015                                  ;	pop	cx
 40016                                  ;	pop	eax
 40017                                  
 40018                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 40019                                  
 40020                                  rpFind4:
 40021                                  	db	93h, 58h, 8Bh, 0CCh
 40022                                  
 40023                                  rpFind4Len equ	$ - rpFind4
 40024                                  
 40025                                  ;	xchg	bx, ax
 40026                                  ;	pop	ax
 40027                                  ;	mov	cx, sp
 40028                                  
 40029                                  rpFind5:
 40030                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 40031                                  
 40032                                  rpFind5Len equ	$ - rpFind5
 40033                                  
 40034                                  ;	mov	ax, DE0Ch
 40035                                  ;	int	67h
 40036                                  ;	mov	sp, cx
 40037                                  ;	jmp	bx
 40038                                  
 40039                                  rpRepl4:
 40040                                  	db	93h, 58h, 8Bh, 0CCh
 40041                                  	db	02Eh, 066h, 0A3h
 40042                                  
 40043                                  rpRepl4o1Len equ $ - rpRepl4
 40044                                  
 40045                                  	db	00h, 00h
 40046                                  	db	02Eh, 066h, 89h, 36h
 40047                                  
 40048                                  rpRepl4o2Len equ $ - rpRepl4
 40049                                  
 40050                                  	db	00h, 00h
 40051                                  
 40052                                  rpRepl4Len equ	$ - rpRepl4
 40053                                  
 40054                                  ;	xchg	bx, ax
 40055                                  ;	pop	ax
 40056                                  ;	mov	cx, sp
 40057                                  ;	mov	dword ptr cs:[xxxx], eax
 40058                                  ;	mov	dword ptr cs:[xxxx], esi
 40059                                  
 40060                                  rpRepl5:
 40061                                  	db	8Bh, 0E1h
 40062                                  	db	2Eh, 66h, 0A1h
 40063                                  
 40064                                  rpRepl5o1Len equ $ - rpRepl5
 40065                                  
 40066                                  	db	00h, 00h
 40067                                  	db	2Eh, 66h, 8Bh, 36h
 40068                                  
 40069                                  rpRepl5o2Len equ $ - rpRepl5
 40070                                  
 40071                                  	db	00h, 00h
 40072                                  	db	0FFh, 0E3h
 40073                                  
 40074                                  rpRepl5Len equ	$ - rpRepl5
 40075                                  
 40076                                  ;	mov	sp, cx
 40077                                  ;	mov	eax, dword ptr cs:[xxxx]
 40078                                  ;	mov	esi, dword ptr cs:[xxxx]
 40079                                  ;	jmp	bx
 40080                                  
 40081                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 40082                                  
 40083                                  rpFind6:
 40084                                  	db	0FAh, 52h, 51h
 40085                                  
 40086                                  rpFind6Len equ	$ - rpFind6
 40087                                  
 40088                                  ;	cli
 40089                                  ;	push	dx
 40090                                  ;	push	cx
 40091                                  
 40092                                  rpFind7a:
 40093                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 40094                                  
 40095                                  rpFind7aLen equ	$ - rpFind7a
 40096                                  
 40097                                  ;	mov	ax, 0DE0Ch
 40098                                  ;	call	fword ptr es:[xxxx]
 40099                                  
 40100                                  rpFind7b:
 40101                                  	db	59h, 5Ah, 5Bh
 40102                                  
 40103                                  rpFind7bLen equ	$ - rpFind7b
 40104                                  
 40105                                  ;	pop	cx
 40106                                  ;	pop	dx
 40107                                  ;	pop	bx
 40108                                  
 40109                                  rpRepl6 :
 40110                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 40111                                  
 40112                                  rpRepl6Len equ	$ - rpRepl6
 40113                                  
 40114                                  ;	cli
 40115                                  ;	push	eax
 40116                                  ;	push	ebx
 40117                                  ;	push	ecx
 40118                                  ;	push	edx
 40119                                  
 40120                                  rpRepl7:
 40121                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 40122                                  
 40123                                  rpRepl7Len equ	$ - rpRepl7
 40124                                  
 40125                                  ;	pop	edx
 40126                                  ;	pop	ecx
 40127                                  ;	pop	ebx
 40128                                  ;	pop	eax
 40129                                  ;	pop	bx
 40130                                  
 40131                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 40132                                  
 40133                                  rpFind8:
 40134                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 40135                                  
 40136                                  rpFind8Len equ	$ - rpFind8
 40137                                  
 40138                                  ;	pusha
 40139                                  ;	push	es
 40140                                  ;	push	ds
 40141                                  ;	mov	ax, dgroup	;jump back to here from replace8
 40142                                  ;	mov	ds, ax
 40143                                  
 40144                                  rpFind9 :
 40145                                  	db	1Fh, 07h, 61h
 40146                                  
 40147                                  rpFind9Len equ	$ - rpFind9
 40148                                  
 40149                                  ;	pop	ds
 40150                                  ;	pop	es
 40151                                  ;	popa
 40152                                  
 40153                                  rpRepl8:
 40154                                   	db	66h, 60h, 06h, 1Eh
 40155                                  
 40156                                  rpRepl8Len equ	$ - rpRepl8
 40157                                  
 40158                                  ;	pushad
 40159                                  ;	push	es
 40160                                  ;	push	ds
 40161                                  
 40162                                  rpRepl9:
 40163                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 40164                                  
 40165                                  rpRepl9Len equ	$ - rpRepl9
 40166                                  
 40167                                  ;	pop	ds
 40168                                  ;	pop	es
 40169                                  ;	popad
 40170                                  ;	retn			;no need to jmp back to main-line
 40171                                  
 40172                                  ;----------------------------------------------------------------------------
 40173                                  
 40174                                  struc SearchPair
 40175                                   .sp_off1: resw 1	; offset of 1st search string
 40176                                   .sp_len1: resw 1	; length of 1st search string
 40177                                   .sp_off2: resw 1	; 2nd string
 40178                                   .sp_len2: resw 1	; 2nd string
 40179                                   .sp_diff: resw 1	; max difference between offsets
 40180                                   .size:
 40181                                  endstruc
 40182                                  
 40183                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 40184                                  
 40185                                  rpBug1Strs:
 40186                                  	dw	rpFind2
 40187                                  	dw	rpFind2Len ; 3
 40188                                  	dw	rpFind3
 40189                                  	dw	rpFind3Len ; 4
 40190                                  	dw	20h
 40191                                  
 40192                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 40193                                  
 40194                                  rpBug2Strs:
 40195                                  	dw	rpFind4
 40196                                  	dw	rpFind4Len ; 4
 40197                                  	dw	rpFind5
 40198                                  	dw	rpFind5Len ; 9
 40199                                  	dw	80h
 40200                                  
 40201                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 40202                                  
 40203                                  rpBug3Strs:
 40204                                  	dw	rpFind6
 40205                                  	dw	rpFind6Len ; 3
 40206                                  	dw	rpFind7a
 40207                                  	dw	rpFind7aLen ; 7
 40208                                  	dw	80h
 40209                                  
 40210                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 40211                                  
 40212                                  rpBug4Strs:
 40213                                  	dw	rpFind8
 40214                                  	dw	4
 40215                                  	dw	rpFind9
 40216                                  	dw	rpFind9Len ; 3
 40217                                  	dw	80h
 40218                                  
 40219                                  ;----------------------------------------------------------------------------
 40220                                  
 40221                                  struc StackVars
 40222                                   .sv_wVersion:	resw 1		; Rational extender version #
 40223                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40224                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40225                                   .size:
 40226                                  endstruc
 40227                                  
 40228                                  ;----------------------------------------------------------------------------
 40229                                  
 40230                                  ; 22/05/2019 - Retro DOS v4.0
 40231                                  
 40232                                  Rational386Patch:
 40233                                  	; Do a few quick checks to see if this looks like a Rational
 40234                                  	; Extended application. Hopefully this will quickly weed out
 40235                                  	; most non Rational apps.
 40236                                  
 40237                                  	cmp	word [es:0],395		; version number goes here - versions
 40238                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40239                                  
 40240                                  	cmp	word [es:0Ch],20h	; always has this value here
 40241                                  	jne	short rp3QuickOut
 40242                                  
 40243                                  	push	ax
 40244                                  
 40245                                  	mov	ax,18h 			; extender has 18h at
 40246                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40247                                  	jne	short rp3QO_ax
 40248                                  	cmp	[es:28],ax
 40249                                  	jne	short rp3QO_ax
 40250                                  	cmp	[es:36],ax
 40251                                  	je	short rp3Maybe
 40252                                  rp3QO_ax:
 40253                                  	pop	ax
 40254                                  rp3QuickOut:
 40255                                  	retn
 40256                                  
 40257                                  ; It might be the rational extender, do more extensive checking
 40258                                  
 40259                                  rp3Maybe:
 40260                                  	cld
 40261                                  	push	bx			; note ax pushed above
 40262                                  	push	cx
 40263                                  	push	dx
 40264                                  	push	si
 40265                                  	push	di
 40266                                  	push	es
 40267                                  	push	ds			; we use all of them
 40268                                  	push	bp
 40269                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40270                                  	mov	bp,sp
 40271                                  
 40272                                  	push	cs
 40273                                  	pop	ds
 40274                                  
 40275                                  	mov	ax,[es:0]		; save version #
 40276                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40277                                  	mov	[bp],ax	
 40278                                  					; check that binary version # matches
 40279                                  	call	VerifyVersion		;   ascii string
 40280                                  	jne	short rp3Exit_j
 40281                                  
 40282                                  ; Looks like this is it, find where to put the patch code.  The
 40283                                  ; patch will be located on top of Rational code specific to 80286
 40284                                  ; processors, so these patchs MUST NOT be applied if running on
 40285                                  ; an 80286 system.
 40286                                  
 40287                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40288                                  
 40289                                  	mov	cx,4500h		; force search len to 4700h (searches
 40290                                  	;mov	[bp+2],cx
 40291                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40292                                  
 40293                                  	mov	es,[es:20h]		; es=code segment
 40294                                  
 40295                                  	mov	si,rpFind1		; string to find
 40296                                  	mov	dx,rpFind1Len ; 10	; length to match
 40297                                  	call	ScanCodeSeq		; look for code seq
 40298                                  	jz	short rpGotPatch
 40299                                  
 40300                                  ; According to Rational, some very old versions of the extender may not
 40301                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40302                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40303                                  
 40304                                  	mov	si,rpFind1a
 40305                                  	mov	dx,rpFind1aLen  ;8
 40306                                  	call	ScanCodeSeq
 40307                                  	jz	short rpGotPatch
 40308                                  
 40309                                  rp3Exit_j:
 40310                                  	jmp	rp3Exit
 40311                                  
 40312                                  ; Found the location to write patch code! DI = offset in code seg.
 40313                                  
 40314                                  rpGotPatch:
 40315                                  	;mov	[bp+4],di
 40316                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40317                                  
 40318                                  ;----------------------------------------------------------------------------
 40319                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40320                                  
 40321                                  	;cmp	word [bp+0],381
 40322                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40323                                  	cmp	word [bp],381
 40324                                  	jae	short rpBug2			;   < 3.81
 40325                                  
 40326                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40327                                  	call	FindBadCode
 40328                                  	jc	short rpBug2
 40329                                  
 40330                                  ; si = rpFind2 offset, di = rpFind3 offset
 40331                                  
 40332                                  	push	di
 40333                                  	mov	di,si				; rpFind2 offset
 40334                                  	mov	dx,rpFind2Len ; 3
 40335                                  
 40336                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40337                                  	jne	short rp_no_cx
 40338                                  
 40339                                  	dec	di				;   yes, gobble up push cx too
 40340                                  	inc	dx
 40341                                  rp_no_cx:
 40342                                  	mov	si,rpRepl2			; patch out find2 sequence
 40343                                  	mov	cx,rpRepl2Len  ; 6
 40344                                  	call	GenPatch
 40345                                  
 40346                                  	pop	di				; rpFind3 offset
 40347                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40348                                  	jne	short rp_no_cx2
 40349                                  
 40350                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40351                                  rp_no_cx2:
 40352                                  	;mov	ax,[bp+4]
 40353                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40354                                  	;mov	[es:di+4],ax
 40355                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40356                                  
 40357                                  	push	di				; save find3 offset
 40358                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40359                                  	mov	cx,rpRepl3Len ; 5
 40360                                  	call	CopyPatch
 40361                                  
 40362                                  	pop	bx				; find3 offset
 40363                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40364                                  	call	GenJump 			; jmp back from patch area
 40365                                  	;mov	[bp+4],di
 40366                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40367                                  						;   area pointer
 40368                                  
 40369                                  ;----------------------------------------------------------------------------
 40370                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40371                                  
 40372                                  rpBug2:
 40373                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40374                                  	call	FindBadCode
 40375                                  	jc	short rpBug3
 40376                                  
 40377                                  ; si = rpFind4 offset, di = rpFind5 offset
 40378                                  
 40379                                  	;push	word [bp+4]
 40380                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40381                                  						;   (where repl4 goes)
 40382                                  	push	di				; save find5 offset
 40383                                  
 40384                                  	mov	di,si
 40385                                  	mov	dx,rpFind4Len ; 4
 40386                                  	mov	si,rpRepl4
 40387                                  	mov	cx,rpRepl4Len ; 15
 40388                                  	call	GenPatch			; patch out find4 code
 40389                                  
 40390                                  	pop	di				; find5 offset
 40391                                  	add	di,5				; keep 5 bytes of find5 code
 40392                                  	;mov	bx,[bp+4]
 40393                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40394                                  	push	bx				; save repl5 location
 40395                                  	call	GenJump
 40396                                  
 40397                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40398                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40399                                  	call	CopyPatch			;   so no need to jmp back to
 40400                                  						;   main-line code
 40401                                  
 40402                                  ; patches have been made, now update the patch code to store/load dwords just
 40403                                  ; after the code in the patch area
 40404                                  
 40405                                  	pop	di				; repl5 location
 40406                                  	pop	si				; repl4 location
 40407                                  
 40408                                  	;mov	ax,[bp+4]
 40409                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40410                                  
 40411                                  	;mov	[es:si+7],ax
 40412                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40413                                  	;mov	[es:di+5],ax
 40414                                  	mov	[es:di+rpRepl5o1Len],ax
 40415                                  	add	ax,4
 40416                                  	;mov	[es:si+0Dh],ax
 40417                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40418                                  	;mov	[es:di+0Bh],ax
 40419                                  	mov	[es:di+rpRepl5o2Len],ax
 40420                                  
 40421                                  	;add	word [bp+4],8
 40422                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40423                                  						; patch area
 40424                                  
 40425                                  ;----------------------------------------------------------------------------
 40426                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40427                                  
 40428                                  rpBug3:
 40429                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40430                                  	call	FindBadCode
 40431                                  	jc	short rpBug4
 40432                                  
 40433                                  	;add	di,9
 40434                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40435                                  	push	si				;   code and locate find7b
 40436                                  	mov	si,rpFind7b			;   sequence
 40437                                  	mov	dx,rpFind7bLen ; 3
 40438                                  	call	ScanCodeSeq_di
 40439                                  	pop	si
 40440                                  	jnz	short rpBug4
 40441                                  
 40442                                  	push	di				; save find7b code offset
 40443                                  
 40444                                  	mov	di,si
 40445                                  	mov	dx,rpFind6Len ; 3
 40446                                  	mov	si,rpRepl6
 40447                                  	mov	cx,rpRepl6Len ; 9
 40448                                  	call	GenPatch			; patch out find6 code
 40449                                  
 40450                                  	pop	di
 40451                                  	mov	dx,rpFind7bLen ; 3
 40452                                  	mov	si,rpRepl7
 40453                                  	mov	cx,rpRepl7Len ; 9
 40454                                  	call	GenPatch			; patch out find7b code
 40455                                  
 40456                                  ;----------------------------------------------------------------------------
 40457                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40458                                  
 40459                                  rpBug4:
 40460                                  	;cmp	word [bp+0],360
 40461                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40462                                  	cmp	word [bp],360
 40463                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40464                                  
 40465                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40466                                  	call	FindBadCode
 40467                                  	jc	short rp3Exit
 40468                                  
 40469                                  	push	di				; save find9 code offset
 40470                                  
 40471                                  	mov	di,si
 40472                                  	mov	dx,3
 40473                                  	mov	si,rpRepl8
 40474                                  	mov	cx,rpRepl8Len ; 4
 40475                                  	call	GenPatch			; patch out find8 code
 40476                                  
 40477                                  	pop	di				; find9 offset
 40478                                  	;mov	bx,[bp+4]
 40479                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40480                                  	call	GenJump 			;   patch area
 40481                                  
 40482                                  	mov	si,rpRepl9			; copy replacement code to
 40483                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40484                                  	call	CopyPatch			;   so no jmp back to main-line
 40485                                  
 40486                                  rp3Exit:
 40487                                  	add	sp,StackVars.size
 40488                                  	pop	bp
 40489                                  	pop	ds
 40490                                  	pop	es
 40491                                  	pop	di
 40492                                  	pop	si
 40493                                  	pop	dx
 40494                                  	pop	cx
 40495                                  	pop	bx
 40496                                  	pop	ax
 40497                                  	retn
 40498                                  
 40499                                  ;----------------------------------------------------------------------------
 40500                                  ;
 40501                                  ; FindBadCode
 40502                                  ;
 40503                                  ; Searches Rational code segment looking for a pair of find strings (all
 40504                                  ; patches have at least two find strings).
 40505                                  ;
 40506                                  ; Entry:
 40507                                  ;	ES    = code segment to search
 40508                                  ;	DS:BX = search pair structure for this search
 40509                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40510                                  ;
 40511                                  ; Exit:
 40512                                  ;	CY flag clear if both strings found, and
 40513                                  ;	SI    = offset in ES of 1st string
 40514                                  ;	DI    = offset in ES of 2nd string
 40515                                  ;	CY set if either string not found, or strings too far apart
 40516                                  ;
 40517                                  ; Used:
 40518                                  ;	CX
 40519                                  ;
 40520                                  ;----------------------------------------------------------------------------
 40521                                  
 40522                                  ;struc SearchPair
 40523                                  ; .sp_off1: resw 1	; offset of 1st search string
 40524                                  ; .sp_len1: resw 1	; length of 1st search string
 40525                                  ; .sp_off2: resw 1	; 2nd string
 40526                                  ; .sp_len2: resw 1	; 2nd string
 40527                                  ; .sp_diff: resw 1	; max difference between offsets
 40528                                  ; .size:
 40529                                  ;endstruc
 40530                                  
 40531                                  FindBadCode:
 40532                                  	;mov	cx,[bp+2]
 40533                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40534                                  
 40535                                  	mov	si,[bx]	; mov si,[bx+0]
 40536                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40537                                  	
 40538                                  	;mov	dx,[bx+2]
 40539                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40540                                  	call	ScanCodeSeq
 40541                                  	jnz	short fbc_error		; done if 1st not found
 40542                                  
 40543                                  	push	di			; save 1st string offset
 40544                                  
 40545                                  	;mov	si,[bx+4]
 40546                                  	mov	si,[bx+SearchPair.sp_off2]
 40547                                  	;mov	dx,[bx+6]
 40548                                  	mov	dx,[bx+SearchPair.sp_len2]
 40549                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40550                                  
 40551                                  	pop	si			; restore 1st string offset
 40552                                  	jnz	short fbc_error
 40553                                  
 40554                                  	mov	ax,di			; sanity check that
 40555                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40556                                  	jc	short fbc_error
 40557                                  	;cmp	ax,[bx+8]
 40558                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40559                                  	ja	short fbc_error
 40560                                  
 40561                                  	clc
 40562                                  	retn
 40563                                  
 40564                                  fbc_error:
 40565                                  	stc
 40566                                  	retn
 40567                                  
 40568                                  ;----------------------------------------------------------------------------
 40569                                  ;
 40570                                  ; GenPatch
 40571                                  ;
 40572                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40573                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40574                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40575                                  ; code.
 40576                                  ;
 40577                                  ; Entry:
 40578                                  ;	ES:DI = start of buggy code to be patched
 40579                                  ;	DX    = length of buggy code to be patched
 40580                                  ;	DS:SI = replacement patch code
 40581                                  ;	CX    = length of replacement patch code
 40582                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40583                                  ;
 40584                                  ; Exit:
 40585                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40586                                  ;
 40587                                  ; Used:
 40588                                  ;	AX, BX, SI, Flags
 40589                                  ;
 40590                                  ;----------------------------------------------------------------------------
 40591                                  
 40592                                  GenPatch:
 40593                                  	push	di			;save offset of buggy code
 40594                                  
 40595                                  	;mov	bx,[bp+4]
 40596                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40597                                  					;jump from buggy code to patch area
 40598                                  	call	GenJump
 40599                                  
 40600                                  	call	CopyPatch		;copy replacement code to patch area
 40601                                  
 40602                                  	pop	bx			;offset of buggy code + buggy code
 40603                                  	add	bx,dx			;  length = return from patch offset
 40604                                  
 40605                                  	call	GenJump 		;jump from patch area back to main-
 40606                                  	;mov	[bp+4],di
 40607                                  	mov	[bp+StackVars.sv_pPatch],di
 40608                                  					;  line code, update patch pointer
 40609                                  	retn
 40610                                  
 40611                                  ;----------------------------------------------------------------------------
 40612                                  ;
 40613                                  ; CopyPatch
 40614                                  ;
 40615                                  ; Copies patch code to patch location.
 40616                                  ;
 40617                                  ; Entry:
 40618                                  ;	DS:SI = patch code to be copied
 40619                                  ;	ES    = segment of code to patch
 40620                                  ;	CX    = length of code to copy
 40621                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40622                                  ;
 40623                                  ; Exit:
 40624                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40625                                  ;
 40626                                  ; Used:
 40627                                  ;	SI, Flags
 40628                                  ;
 40629                                  ;----------------------------------------------------------------------------
 40630                                  
 40631                                  CopyPatch:
 40632                                  	push	cx
 40633                                  	;mov	di,[bp+4]
 40634                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40635                                  	cld
 40636                                  	rep movsb
 40637                                  	pop	cx
 40638                                  	;mov	[bp+4],di
 40639                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40640                                  	retn
 40641                                  
 40642                                  ;----------------------------------------------------------------------------
 40643                                  ;
 40644                                  ; GenJump
 40645                                  ;
 40646                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40647                                  ;
 40648                                  ; Entry:
 40649                                  ;	ES:DI = from location (where to put jmp instruction)
 40650                                  ;	BX    = to location (where to jump to)
 40651                                  ;
 40652                                  ; Exit:
 40653                                  ;	DI = byte after generated jump
 40654                                  ;
 40655                                  ; Used:
 40656                                  ;	AX
 40657                                  ;
 40658                                  ;----------------------------------------------------------------------------
 40659                                  
 40660                                  GenJump:
 40661                                  	mov	al,0E9h		; jmp rel16 opcode
 40662                                  	stosb
 40663                                  
 40664                                  	mov	ax,bx		; calc offset to 'to' location
 40665                                  	sub	ax,di
 40666                                  	sub	ax,2
 40667                                  
 40668                                  	stosw			; output offset
 40669                                  
 40670                                  	retn
 40671                                  
 40672                                  ;----------------------------------------------------------------------------
 40673                                  ;
 40674                                  ; ScanCodeSeq
 40675                                  ;
 40676                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40677                                  ;
 40678                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40679                                  ;
 40680                                  ;----------------------------------------------------------------------------
 40681                                  
 40682                                  ScanCodeSeq:
 40683                                  	mov	di,200h
 40684                                  ScanCodeSeq_di:
 40685                                  	push	cx
 40686                                  	sub	cx,dx
 40687                                  	inc	cx
 40688                                  scsagain:
 40689                                  	push	si
 40690                                  	push	di
 40691                                  	push	cx
 40692                                  	mov	cx,dx
 40693                                  	rep	cmpsb
 40694                                  	pop	cx
 40695                                  	pop	di
 40696                                  	pop	si
 40697                                  	je	short scsfound
 40698                                  	inc	di
 40699                                  	loop	scsagain
 40700                                  scsfound:
 40701                                  	pop	cx
 40702                                  vvexit:		; 18/12/2022
 40703                                  	retn
 40704                                  	
 40705                                  ;----------------------------------------------------------------------------
 40706                                  ;
 40707                                  ; VerifyVersion
 40708                                  ;
 40709                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40710                                  ; from ES:2A.
 40711                                  ;
 40712                                  ;       Entry: AX = binary version number 
 40713                                  ;       Exit : Z flag set if version numbers match
 40714                                  ;
 40715                                  ;----------------------------------------------------------------------------
 40716                                  
 40717                                  VerifyVersion:
 40718                                  	mov	si,[es:2Ah]		; offset of version number
 40719                                  					;  in ascii
 40720                                  	mov	bl,10
 40721                                  	add	si,3			; point to last digit
 40722                                  
 40723                                  	call	VVDigit
 40724                                  	jne	short vvexit
 40725                                  	call	VVDigit
 40726                                  	jne	short vvexit
 40727                                  	cmp	byte [es:si],'.'
 40728                                  	jne	short vvexit
 40729                                  	dec	si
 40730                                  	;call	VVDigit
 40731                                  	; 18/12/2022
 40732                                  	;jmp	short VVDigit
 40733                                  ;vvexit:
 40734                                  	;retn
 40735                                  VVDigit:
 40736                                  	div	bl
 40737                                  	add	ah,'0'
 40738                                  	dec	si
 40739                                  	cmp	[es:si+1],ah
 40740                                  	mov	ah,0			; do not xor or sub we need Z
 40741                                  	retn
 40742                                  
 40743                                  %endif
 40744                                  
 40745                                  ;-----------------------------------------------------------------------
 40746                                  
 40747                                  ; 23/05/2019 - Retro DOS v4.0
 40748                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40749                                  
 40750                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40751                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40752                                  
 40753                                  exepatch_start:	 ; label byte
 40754                                  
 40755                                  	; The following is the code that'll be layed over the buggy unpack
 40756                                  	; code.
 40757                                  str1:
 40758 00007467 06                      	db  06h	  		;push	es		 
 40759 00007468 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40760                                  
 40761                                  first_stop equ	$-str1
 40762                                  			
 40763 0000746A 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40764                                  
 40765                                  first:  ; label	byte
 40766                                  
 40767 0000746C 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40768 0000746E 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40769 00007470 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40770 00007473 57                      	db  57h	    		;push	di
 40771 00007474 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40772 00007477 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40773 00007479 F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40774 0000747B 47                      	db  47h	    		;inc	di			
 40775 0000747C 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40776 0000747E 5F                      	db  5Fh	    		;pop	di
 40777 0000747F 58                      	db  58h	    		;pop	ax
 40778                                  
 40779                                  second_stop equ	$-first
 40780                                  
 40781 00007480 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40782                                  
 40783                                  second: ; label	byte
 40784                                  
 40785 00007482 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40786                                  		    		;NextRec:				
 40787 00007484 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40788                                  		    		;norm_agn:				
 40789 00007487 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40790 00007489 F7D0                    	db  0F7h,0D0h		;not	ax		
 40791 0000748B D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40792 0000748D 7413                    	db  74h,13h		;jz	short SI_ok			
 40793 0000748F 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40794 00007491 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40795 00007494 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40796 00007496 7308                    	db  73h,08h		;jnc	short SItoDS			
 40797 00007498 F7DA                    	db  0F7h,0DAh		;neg	dx			
 40798 0000749A D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40799 0000749C 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40800 0000749E 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40801                                  				;SItoDS: 				
 40802 000074A0 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40803                                  				;SI_ok:					
 40804 000074A2 87F7                    	db  87h,0F7h		;xchg	si,di			
 40805 000074A4 1E                      	db  1Eh			;push	ds			
 40806 000074A5 06                      	db  06h			;push	es			
 40807 000074A6 1F                      	db  1Fh			;pop	ds			
 40808 000074A7 07                      	db  07h			;pop	es			
 40809 000074A8 FECD                    	db  0FEh,0CDh		;dec	ch			
 40810 000074AA 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40811 000074AC AC                      	db  0ACh		;lodsb			
 40812 000074AD 92                      	db  92h			;xchg	dx,ax
 40813 000074AE 4E                      	db  4Eh			;dec	si
 40814 000074AF AD                      	db  0ADh		;lodsw			
 40815 000074B0 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40816 000074B2 46                      	db  46h			;inc	si		
 40817 000074B3 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40818 000074B5 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40819 000074B7 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40820 000074B9 7505                    	db  75h,05h		;jne	short TryEnum
 40821 000074BB AC                      	db  0ACh		;lodsb				
 40822 000074BC F3AA                    	db  0F3h,0AAh		;rep stosb			
 40823                                  
 40824                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40825 000074BE EB06                    	db  0EBh,06h		;jmp	short TryNext
 40826                                  
 40827                                  				;TryEnum:
 40828 000074C0 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40829 000074C2 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40830 000074C4 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40831                                  				;TryNext:
 40832                                  
 40833 000074C6 92                      	db  92h			;xchg	dx,ax
 40834                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40835                                  
 40836 000074C7 A801                    	db  0A8h,01h		;test	al,1			
 40837 000074C9 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40838 000074CB 9090                    	db  90h,90h		;nop,nop
 40839                                  	
 40840                                  last_stop equ $-second
 40841                                  size_str1 equ $-str1
 40842                                  
 40843                                  	; The following is the code that we need to look for in the exe
 40844                                  	; file.
 40845                                  
 40846                                  scan_patch1: ; label byte
 40847                                  
 40848 000074CD 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40849 000074CF 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40850 000074D1 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40851 000074D3 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40852 000074D5 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40853 000074D7 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40854 000074DA B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40855 000074DD B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40856 000074DF F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40857 000074E1 47                      	db  47h			;inc	di			
 40858 000074E2 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40859 000074E4 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40860 000074E6 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40861 000074E8 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40862 000074EA BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40863                                  				;NextRec:
 40864 000074ED B104                    	db  0B1h,04h		;mov	cl,4
 40865 000074EF 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40866 000074F1 F7D0                    	db  0F7h,0D0h		;not	ax		
 40867 000074F3 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40868 000074F5 7409                    	db  74h,09h		;jz	short SI_ok
 40869 000074F7 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40870 000074F9 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40871 000074FB 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40872 000074FD 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40873                                  	       			;SI_ok:
 40874 00007500 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40875 00007502 F7D0                    	db  0F7h,0D0h		;not	ax
 40876 00007504 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40877 00007506 7409                    	db  74h,09h		;jz	short DI_ok
 40878 00007508 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40879 0000750A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40880 0000750C 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40881 0000750E 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40882                                  				;DI_ok:
 40883                                  
 40884                                  size_scan_patch1 equ $-scan_patch1
 40885                                  
 40886                                  scan_patch2: ; label byte
 40887                                  			
 40888 00007511 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40889 00007513 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40890 00007515 48                      	db  48h			;dec	ax
 40891 00007516 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40892 00007518 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40893 0000751A BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40894 0000751D B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40895 00007520 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40896 00007522 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40897 00007524 47                      	db  47h			;inc	di			
 40898 00007525 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40899 00007527 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40900 00007529 48                      	db  48h			;dec	ax
 40901 0000752A 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40902 0000752C BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40903                                  				;NextRec:
 40904 0000752F B104                    	db  0B1h,04h		;mov	cl,4
 40905 00007531 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40906 00007533 F7D0                    	db  0F7h,0D0h		;not	ax		
 40907 00007535 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40908 00007537 740A                    	db  74h,0Ah		;jz	short SI_ok
 40909 00007539 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40910 0000753B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40911 0000753D 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40912 0000753F 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40913                                  				;or	si,0FFF0H
 40914                                  				;SI_ok:
 40915 00007543 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40916 00007545 F7D0                    	db  0F7h,0D0h		;not	ax
 40917 00007547 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40918 00007549 740A                    	db  74h,0Ah		;jz	short DI_ok
 40919 0000754B 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40920 0000754D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40921 0000754F 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40922 00007551 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40923                                  				;or	di,0FFF0H
 40924                                  				;DI_ok:
 40925                                  
 40926                                  size_scan_patch2 equ $-scan_patch2
 40927                                  
 40928                                  scan_patch3: ; label byte
 40929                                  
 40930 00007555 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40931 00007557 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40932 00007559 48                      	db  48h			;dec	ax
 40933 0000755A 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40934 0000755C 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40935 0000755E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40936 00007561 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40937 00007564 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40938 00007566 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40939 00007568 47                      	db  47h			;inc	di			
 40940 00007569 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40941 0000756B 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40942 0000756D 48                      	db  48h			;dec	ax
 40943 0000756E 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40944 00007570 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40945                                  				;NextRec:
 40946 00007573 B104                    	db  0B1h,04h		;mov	cl,4
 40947 00007575 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40948 00007577 F7D0                    	db  0F7h,0D0h		;not	ax		
 40949 00007579 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40950 0000757B 7409                    	db  74h,09h		;jz	short SI_ok
 40951 0000757D 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40952 0000757F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40953 00007581 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40954 00007583 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40955                                  				;SI_ok:
 40956 00007586 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40957 00007588 F7D0                    	db  0F7h,0D0h		;not	ax
 40958 0000758A D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40959 0000758C 7409                    	db  74h,09h		;jz	short DI_ok
 40960 0000758E 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40961 00007590 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40962 00007592 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40963 00007594 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40964                                  				;DI_ok:
 40965                                  
 40966                                  size_scan_patch3 equ $-scan_patch3
 40967                                  
 40968                                  scan_com: ; label byte
 40969                                  
 40970 00007597 AC                      	db  0ACh		;lodsb			
 40971 00007598 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40972 0000759A 4E                      	db  4Eh			;dec	si
 40973 0000759B AD                      	db  0ADh		;lodsw			
 40974 0000759C 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40975 0000759E 46                      	db  46h			;inc	si		
 40976 0000759F 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40977 000075A1 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40978 000075A3 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40979 000075A5 7506                    	db  75h,06h		;jne	short TryEnum
 40980 000075A7 AC                      	db  0ACh		;lodsb				
 40981 000075A8 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40982 000075AA EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40983                                  				;TryEnum:
 40984 000075AD 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40985 000075AF 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40986 000075B1 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40987                                  				;TryNext:
 40988 000075B3 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40989 000075B5 A801                    	db  0A8h,01h		;test	al,1			
 40990                                  ;	db  74h,0BAh		;jz	short NextRec			
 40991                                  
 40992                                  size_scan_com	equ	$-scan_com
 40993                                  
 40994                                  ;-----------------------------------------------------------------------
 40995                                  
 40996                                  ; 23/05/2019 - Retro DOS v4.0
 40997                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40998                                  
 40999                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41000                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 41001                                  
 41002                                  ExePatch:
 41003                                  	; 28/12/2022 - Retro DOS v4.1
 41004                                  	;call	ExePackPatch
 41005                                  	;;call	word [ss:RationalPatchPtr]
 41006                                  	;retn
 41007                                  	; 28/12/2022
 41008                                  	;jmp	short ExePackPatch
 41009                                  
 41010                                  ;-----------------------------------------------------------------------
 41011                                  ;
 41012                                  ; Procedure Name 	: ExePackPatch
 41013                                  ;
 41014                                  ; Inputs	 	: DS 			-> DOSDATA
 41015                                  ;			  ES:0 			-> read in image
 41016                                  ;			  ax:cx = start cs:ip of program
 41017                                  ; Output		:		
 41018                                  ;
 41019                                  ;	1. If ES <= 0fffh
 41020                                  ;	   2. if exepack signature ('RB') found
 41021                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 41022                                  ;	       	 4. if rest of the code & checksum compares
 41023                                  ;	  	    5. overlay buggy code with code in 
 41024                                  ;		       doscode:str1.
 41025                                  ;		 6. endif
 41026                                  ;	      7. endif
 41027                                  ;	   8. endif
 41028                                  ;	9. endif
 41029                                  ;
 41030                                  ;
 41031                                  ; Uses			: NONE
 41032                                  ;
 41033                                  ;-----------------------------------------------------------------------
 41034                                  		
 41035                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41036                                  	; 23/05/2019 - Retro DOS v4.0	
 41037                                  ExePackPatch:
 41038 000075B7 53                      	push	bx
 41039 000075B8 8CC3                    	mov	bx,es			; bx has load segment
 41040 000075BA 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 41041 000075BE 7602                    	jbe	short ep_cont		; N: 
 41042 000075C0 5B                      	pop	bx			; Y: no need to patch
 41043 000075C1 C3                      	retn
 41044                                  ep_cont:
 41045 000075C2 1E                      	push	ds
 41046 000075C3 06                      	push	es
 41047 000075C4 50                      	push	ax
 41048 000075C5 51                      	push	cx
 41049 000075C6 56                      	push	si
 41050 000075C7 57                      	push	di
 41051                                  	
 41052                                  		; M033 - start
 41053                                  		; exepacked programs have an IP of 12h (>=2)
 41054                                  
 41055 000075C8 83E902                  	sub	cx,2			; Q: is IP >=2 
 41056 000075CB 7303                    	jnb	short epp_1		; N: exit
 41057 000075CD E9C500                  	jmp	ep_notpacked
 41058                                  					; ax:cx now points to location of
 41059                                  					; 'RB' if this is an exepacked file.
 41060                                  		; M033 - end
 41061                                  epp_1:
 41062 000075D0 89CF                    	mov	di,cx
 41063 000075D2 8EC0                    	mov	es,ax
 41064 000075D4 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 41065                                  					; unpack_offset
 41066                                  
 41067 000075D9 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 41068                                  	;ljne	ep_notpacked
 41069 000075DE 7403                    	je	short epp_2
 41070 000075E0 E9B200                  	jmp	ep_notpacked
 41071                                  epp_2:
 41072 000075E3 0E                      	push	cs
 41073 000075E4 1F                      	pop	ds			; set ds to cs
 41074                                  
 41075                                  	;add	di,6Ch
 41076 000075E5 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 41077                                  					;          file where we hope to find
 41078                                  					;	   scan string. 
 41079                                  
 41080 000075E8 E8B200                  	call	chk_common_str		; check for match
 41081                                  
 41082 000075EB 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 41083                                  					; N: check at patch2_offset
 41084                                  					; Y: check for rest of patch string
 41085 000075ED BE[CD74]                	mov	si,scan_patch1
 41086                                  					; ds:si -> scan string 
 41087 000075F0 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 41088                                  
 41089                                  	;add	di,28h
 41090                                  	; 07/12/2022
 41091 000075F5 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 41092                                  					;          file where we hope to find
 41093                                  					;	   scan string. 
 41094                                  	;mov	cx,68
 41095 000075F8 B94400                  	mov	cx,size_scan_patch1
 41096                                  	;mov	bx,142
 41097 000075FB BB8E00                  	mov	bx,CHKSUM1_LEN
 41098                                  	;mov	ax,0EF4Eh
 41099 000075FE B84EEF                  	mov	ax,PATCH1_CHKSUM
 41100 00007601 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 41101 00007604 7208                    	jc	short ep_done1		; Q: did we pass the test
 41102                                  					; N: exit
 41103                                  					; Y: overlay code with new 
 41104 00007606 BE[6774]                	mov	si,str1
 41105                                  	;mov	cx,102
 41106 00007609 B96600                  	mov	cx,size_str1
 41107                                  	
 41108 0000760C F3A4                    	rep	movsb
 41109                                  ep_done1:
 41110 0000760E E98400                  	jmp	ep_done
 41111                                  
 41112                                  ep_chkpatch2:
 41113                                  	;mov	di,76h
 41114 00007611 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 41115                                  					; in another version of unpack
 41116 00007614 E88600                  	call	chk_common_str		; check for match
 41117                                  
 41118 00007617 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 41119                                  					; N: check for patch3_offset
 41120                                  					; Y: check for rest of patch string
 41121                                  
 41122 00007619 BE[1175]                	mov	si,scan_patch2
 41123                                  					; ds:si -> scan string 
 41124                                  	;mov	di,32h
 41125 0000761C BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 41126                                  					;          file where we hope to find
 41127                                  	;mov	cx,68			;	   scan string. 
 41128 0000761F B94400                  	mov	cx,size_scan_patch2
 41129                                  	;mov	bx,140
 41130 00007622 BB8C00                  	mov	bx,CHKSUM2_LEN
 41131                                  	;mov	ax,78B2h
 41132 00007625 B8B278                  	mov	ax,PATCH2_CHKSUM
 41133 00007628 E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 41134                                  
 41135                                  					; M046 - Start
 41136                                  					; Q: did we pass the test
 41137 0000762B 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 41138                                  					; N: try with a different chksum
 41139                                  
 41140                                  
 41141 0000762D BE[1175]                	mov	si,scan_patch2
 41142                                  					; ds:si -> scan string 
 41143                                  	;mov	cx,68
 41144 00007630 B94400                  	mov	cx,size_scan_patch2
 41145                                  	;mov	bx,129
 41146 00007633 BB8100                  	mov	bx,CHKSUM2A_LEN
 41147                                  	;mov	ax,1C47h
 41148 00007636 B8471C                  	mov	ax,PATCH2A_CHKSUM
 41149 00007639 E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 41150                                  					; Q: did we pass the test
 41151 0000763C 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 41152                                  					; Y: overlay code with new 
 41153                                  						
 41154                                  ep_patchcode2:			       	; M046 - End
 41155 0000763E BE[6774]                	mov	si,str1
 41156                                  	;mov	cx,3
 41157 00007641 B90300                  	mov	cx,first_stop
 41158 00007644 F3A4                    	rep	movsb
 41159 00007646 B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 41160 00007649 AB                      	stosw
 41161 0000764A 83C602                  	add	si,2
 41162                                  	;mov	cx,20
 41163 0000764D B91400                  	mov	cx,second_stop
 41164 00007650 F3A4                    	rep	movsb
 41165 00007652 AB                      	stosw				; put in dec ax and nop
 41166 00007653 83C602                  	add	si,2
 41167                                  	;mov	cx,75
 41168 00007656 B94B00                  	mov	cx,last_stop
 41169 00007659 F3A4                    	rep	movsb
 41170 0000765B EB38                    	jmp	short ep_done
 41171                                  
 41172                                  ep_chkpatch3:
 41173                                  	;mov	di,74h
 41174 0000765D BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 41175                                  					; in another version of unpack
 41176 00007660 E83A00                  	call	chk_common_str		; check for match
 41177                                  
 41178 00007663 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 41179                                  					; N: exit
 41180                                  					; Y: check for rest of patch string
 41181 00007665 BE[5575]                	mov	si,scan_patch3
 41182                                  					; ds:si -> scan string 
 41183                                  	;mov	di,32h
 41184 00007668 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 41185                                  					;          file where we hope to find
 41186                                  					;	   scan string. 
 41187                                  	;mov	cx,66
 41188 0000766B B94200                  	mov	cx,size_scan_patch3
 41189                                  	;mov	bx,139
 41190 0000766E BB8B00                  	mov	bx,CHKSUM3_LEN
 41191                                  	;mov	ax,4EDEh
 41192 00007671 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 41193 00007674 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 41194 00007677 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 41195                                  					; N: exit
 41196                                  					; Y: overlay code with new 
 41197 00007679 BE[6774]                	mov	si,str1
 41198                                  	;mv	cx,3
 41199 0000767C B90300                  	mov	cx,first_stop
 41200 0000767F F3A4                    	rep	movsb
 41201 00007681 B048                    	mov	al,48h			; al = opcode for dec ax
 41202 00007683 AA                      	stosb
 41203 00007684 83C602                  	add	si,2
 41204                                  	;mov	cx,20
 41205 00007687 B91400                  	mov	cx,second_stop
 41206 0000768A F3A4                    	rep	movsb
 41207 0000768C AA                      	stosb				; put in dec ax
 41208 0000768D 83C602                  	add	si,2
 41209                                  	;mov	cx,75
 41210 00007690 B94B00                  	mov	cx,last_stop
 41211 00007693 F3A4                    	rep	movsb
 41212                                  
 41213                                  ep_notpacked:
 41214                                  	;stc
 41215                                  ep_done:
 41216 00007695 5F                      	pop	di
 41217 00007696 5E                      	pop	si
 41218 00007697 59                      	pop	cx
 41219 00007698 58                      	pop	ax
 41220 00007699 07                      	pop	es
 41221 0000769A 1F                      	pop	ds
 41222 0000769B 5B                      	pop	bx
 41223 0000769C C3                      	retn
 41224                                  
 41225                                  ;-------------------------------------------------------------------------
 41226                                  ;
 41227                                  ; 	Procedure Name	: chk_common_str
 41228                                  ;
 41229                                  ;	Input		: DS = DOSCODE
 41230                                  ;			; ES:DI points to string in packed file
 41231                                  ;
 41232                                  ;	Output		; Z if match else NZ
 41233                                  ;
 41234                                  ;-------------------------------------------------------------------------
 41235                                  
 41236                                  	; 23/05/2019 - Retro DOS v4.0
 41237                                  chk_common_str:
 41238 0000769D BE[9775]                	mov	si,scan_com
 41239                                  					; ds:si -> scan string 
 41240                                  	;mov	cx,32
 41241 000076A0 B92000                  	mov	cx,size_scan_com
 41242                                  
 41243 000076A3 F3A6                    	repe	cmpsb	       
 41244                                  
 41245                                  					; M046 - start
 41246                                  	; a fourth possible version of these exepacked programs have a 
 41247                                  	; 056h instead of 06Bh. See scan_com above
 41248                                  	;
 41249                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41250                                  	;
 41251                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41252                                  	; we shall try to match the rest of the string
 41253                                  	;
 41254                                  
 41255 000076A5 7409                    	jz	short ccs_done
 41256 000076A7 26807DFF56              	cmp	byte [es:di-1],56h
 41257 000076AC 7502                    	jnz	short ccs_done
 41258                                  
 41259 000076AE F3A6                    	repe	cmpsb	    
 41260                                  ccs_done:				; M046 - end
 41261 000076B0 C3                      	retn
 41262                                  
 41263                                  ;-------------------------------------------------------------------------
 41264                                  ;
 41265                                  ;	Procedure Name	: chk_patchsum
 41266                                  ;
 41267                                  ;	Input		: DS:SI -> string we're looking for
 41268                                  ;			: ES:DI -> offset in packed file
 41269                                  ;			: CX 	= scan length
 41270                                  ;			: BX	= length of check sum
 41271                                  ;			: AX 	= value of check sum
 41272                                  ;
 41273                                  ;	Output		: if patch & check sum compare
 41274                                  ;				NC
 41275                                  ;			  else
 41276                                  ;				CY
 41277                                  ;
 41278                                  ;	Uses		: AX, BX, CX, SI
 41279                                  ;
 41280                                  ;-------------------------------------------------------------------------
 41281                                  
 41282                                  	; 23/05/2019 - Retro DOS v4.0
 41283                                  chk_patchsum:
 41284 000076B1 57                      	push	di
 41285                                  
 41286 000076B2 F3A6                    	repe	cmpsb			   
 41287                                  
 41288 000076B4 7518                    	jnz	short cp_fail		; Q: does the patch match
 41289                                  					; N: exit
 41290                                  					; Y:	
 41291                                  
 41292                                  		; we do a check sum starting from the location of the 
 41293                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41294                                  		; unpacking code.
 41295                                  
 41296 000076B6 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41297 000076BB 89D9                    	mov	cx,bx			; cx = length of check sum
 41298                                  
 41299 000076BD 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41300 000076BF 31C0                    	xor	ax,ax
 41301                                  ep_chksum:
 41302 000076C1 260305                  	add	ax,[es:di]
 41303 000076C4 83C702                  	add	di,2
 41304 000076C7 E2F8                    	loop	ep_chksum
 41305                                  
 41306 000076C9 5F                      	pop	di			; restore di
 41307                                  
 41308 000076CA 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41309                                  	;jne	short cp_fail		; N: exit
 41310                                  					; Y: 
 41311                                  	; 25/09/2023
 41312                                  	;clc	
 41313                                  	;retn
 41314 000076CC 74E2                    	je	short ccs_done ; cf=0
 41315                                  	
 41316                                  cp_fail:
 41317 000076CE F9                      	stc
 41318 000076CF C3                      	retn
 41319                                  
 41320                                  ; 28/12/2022 - Retro DOS v4.1
 41321                                  %if 0
 41322                                  ;--------------------------------------------------------------------------- 
 41323                                  
 41324                                  
 41325                                  ; M020 : BEGIN
 41326                                  ;
 41327                                  ;---------------------------------------------------------------------------
 41328                                  ;
 41329                                  ; procedure : RationalPatch
 41330                                  ;
 41331                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41332                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41333                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41334                                  ;
 41335                                  ; THE BUG is in the following code sequence:
 41336                                  ;
 41337                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41338                                  ;90		even				; word align
 41339                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41340                                  ;e8 xx xx	call	set_A20			; enable A20
 41341                                  ;
 41342                                  ; This patch routine replaces the mov & the loop with a far call into a
 41343                                  ; routine in DOS data segment which is in low memory (because A20 line
 41344                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41345                                  ; a mov & loop.
 41346                                  ;
 41347                                  ; Identification of Buggy Rational EXE
 41348                                  ; ====================================
 41349                                  ;
 41350                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41351                                  ;
 41352                                  ; OFFSET				Contains
 41353                                  ; ------				--------
 41354                                  ; 0000h			100 times Version number in binary
 41355                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41356                                  ;
 41357                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41358                                  ;
 41359                                  ; 002ah			offset where version number is stored in ASCII
 41360                                  ;				e.g. '3.48A'
 41361                                  ;
 41362                                  ; 0030h			offset of copyright string. Copyright strings either
 41363                                  ;			start with "DOS/16M Copyright...." or
 41364                                  ;			"Copyright.....". The string contains
 41365                                  ;			"Rational Systems, Inc."
 41366                                  ;
 41367                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41368                                  ;				from the program image
 41369                                  ; 0016h			word : size of buggy code segment
 41370                                  ;
 41371                                  ;	Buggy code is definite to start after offset 200h in its segment
 41372                                  ;
 41373                                  ;----------------------------------------------------------------------------
 41374                                  
 41375                                  ; 23/05/2019 - Retro DOS v4.0
 41376                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41377                                  
 41378                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41379                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41380                                  
 41381                                  RScanPattern1:
 41382                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41383                                  
 41384                                  RLen1 equ $ - RScanPattern1
 41385                                  
 41386                                  RScanPattern2:
 41387                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41388                                  
 41389                                  RLen2 equ $ - RScanPattern2
 41390                                  
 41391                                  RScanPattern3:
 41392                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41393                                  
 41394                                  RLen3 equ $ - RScanPattern2
 41395                                  
 41396                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41397                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41398                                  
 41399                                  ;----------------------------------------------------------------------------
 41400                                  ;
 41401                                  ; INPUT : ES = segment where program got loaded
 41402                                  ;
 41403                                  ;----------------------------------------------------------------------------
 41404                                  
 41405                                  RationalPatch:
 41406                                  	cld
 41407                                  	push	ax
 41408                                  	push	bx
 41409                                  	push	cx
 41410                                  	push	dx
 41411                                  	push	si
 41412                                  	push	di
 41413                                  	push	es
 41414                                  	push	ds			; we use all of them
 41415                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41416                                  	push	cs
 41417                                  	pop	ds
 41418                                  	
 41419                                  	mov	si,RScanPattern1
 41420                                  	;mov	cx,10
 41421                                  	mov	cx,RLen1
 41422                                  	rep	cmpsb			; do we have the pattern ?
 41423                                  	jne	short rpexit
 41424                                  	mov	ax,[es:0]
 41425                                  	cmp	ax,348			; is it a buggy version ?
 41426                                  	jb	short rpexit
 41427                                  	cmp	ax,383			; is it a buggy version
 41428                                  	ja	short rpexit
 41429                                  
 41430                                  	call	VerifyVersion
 41431                                  	jne	short rpexit
 41432                                  
 41433                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41434                                  	sub	cx,200h			; Length we search (we start
 41435                                  					;  at offset 200h)
 41436                                  	mov	es,[es:20h]		; es=buggy code segment
 41437                                  	mov	si,RScanPattern2
 41438                                  	;mov	dx,8	
 41439                                  	mov	dx,RLen2
 41440                                  	call	ScanCodeSeq		; look for code seq with nop
 41441                                  	jz	short rpfound
 41442                                  
 41443                                  	mov	si,RScanPattern3
 41444                                  	;mov	dx,15
 41445                                  	mov	dx,RLen3
 41446                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41447                                  	jnz	short rpexit
 41448                                  
 41449                                  rpfound:
 41450                                  	
 41451                                  ;	we set up a far call into DOS data
 41452                                  ;	dx has the length of the code seq we were searching for
 41453                                  
 41454                                  	mov	al,9Ah			; far call opcode
 41455                                  	stosb
 41456                                  	mov	ax,RatBugCode
 41457                                  	stosw
 41458                                  	mov	ax,ss
 41459                                  	stosw
 41460                                  	mov	cx,dx
 41461                                  	sub	cx,6			; filler (with NOPs)
 41462                                  	mov	al,90h
 41463                                  	rep	stosb
 41464                                  rpexit:
 41465                                  	pop	ds
 41466                                  	pop	es
 41467                                  	pop	di
 41468                                  	pop	si
 41469                                  	pop	dx
 41470                                  	pop	cx
 41471                                  	pop	bx
 41472                                  	pop	ax
 41473                                  	retn
 41474                                  
 41475                                  ; M020 END
 41476                                  
 41477                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41478                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41479                                  
 41480                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41481                                  
 41482                                  ;----------------------------------------------------------------------------
 41483                                  ;
 41484                                  ; ScanCodeSeq
 41485                                  ;
 41486                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41487                                  ;
 41488                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41489                                  ;
 41490                                  ;----------------------------------------------------------------------------
 41491                                  
 41492                                  ScanCodeSeq:
 41493                                  	; 17/12/2022
 41494                                  	mov	di,200h
 41495                                  ;ScanCodeSeq_di:
 41496                                  	push	cx
 41497                                  	sub	cx,dx
 41498                                  	inc	cx
 41499                                  	; 17/12/2022
 41500                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41501                                  	;mov	di,200h
 41502                                  scsagain:
 41503                                  	push	si
 41504                                  	push	di
 41505                                  	push	cx
 41506                                  	mov	cx,dx
 41507                                  	rep	cmpsb
 41508                                  	pop	cx
 41509                                  	pop	di
 41510                                  	pop	si
 41511                                  	je	short scsfound
 41512                                  	inc	di
 41513                                  	loop	scsagain
 41514                                  scsfound:
 41515                                  	pop	cx
 41516                                  vvexit:		; 18/12/2022
 41517                                  	retn
 41518                                  
 41519                                  
 41520                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41521                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41522                                  
 41523                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41524                                  
 41525                                  ;----------------------------------------------------------------------------
 41526                                  ;
 41527                                  ; VerifyVersion
 41528                                  ;
 41529                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41530                                  ; from ES:2A.
 41531                                  ;
 41532                                  ;       Entry: AX = binary version number 
 41533                                  ;       Exit : Z flag set if version numbers match
 41534                                  ;
 41535                                  ;----------------------------------------------------------------------------
 41536                                  
 41537                                  VerifyVersion:
 41538                                  	mov	si,[es:2Ah]		; offset of version number
 41539                                  					;  in ascii
 41540                                  	mov	bl,10
 41541                                  	add	si,3			; point to last digit
 41542                                  
 41543                                  	call	VVDigit
 41544                                  	jne	short vvexit
 41545                                  	call	VVDigit
 41546                                  	jne	short vvexit
 41547                                  	cmp	byte [es:si],'.' ; 2Eh
 41548                                  	jne	short vvexit
 41549                                  	dec	si
 41550                                  	;call	VVDigit
 41551                                  	; 18/12/2022
 41552                                  	;jmp	short VVDigit
 41553                                  ;vvexit:
 41554                                  	;retn
 41555                                  VVDigit:
 41556                                  	div	bl
 41557                                  	add	ah,'0' ; 30h
 41558                                  	dec	si
 41559                                  	cmp	[es:si+1],ah
 41560                                  	mov	ah,0			; do not xor or sub we need Z
 41561                                  	retn
 41562                                  
 41563                                  ;--------------------------------------------------------------------------- 
 41564                                  %endif	; 28/12/2022
 41565                                  
 41566                                  ;---------------------------------------------------------------------------
 41567                                  ;
 41568                                  ;	M068
 41569                                  ;
 41570                                  ; 	Procedure Name	: IsCopyProt
 41571                                  ;
 41572                                  ;	Inputs		: DS:100 -> start of com file just read in
 41573                                  ;
 41574                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41575                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41576                                  ;			  copy protect scheme that relies on the A20 line
 41577                                  ;			  being turned off for it's scheme to work.
 41578                                  ;
 41579                                  ;			  Note: The int 21 function dispatcher will turn 
 41580                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41581                                  ;				and dec the A20OFF_COUNT before	iretting 
 41582                                  ;				to the user. 
 41583                                  ;
 41584                                  ;	Uses		: ES, DI, SI, CX
 41585                                  ;
 41586                                  ;---------------------------------------------------------------------------
 41587                                  
 41588                                  ; 23/05/2019 - Retro DOS v4.0
 41589                                  
 41590                                  CPStartOffset	EQU	0175h
 41591                                  CPID1Offset	EQU	011Bh
 41592                                  CPID2Offset	EQU	0173h
 41593                                  CPID3Offset	EQU	0146h
 41594                                  CPID4Offset	EQU	0124h
 41595                                  ID1		EQU	05343h
 41596                                  ID2		EQU	05044h
 41597                                  ID3		EQU	0F413h
 41598                                  ID4		EQU	08000h
 41599                                  
 41600                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41601                                  
 41602                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41603                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41604                                  
 41605                                  CPScanPattern:
 41606 000076D0 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41607 000076D4 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41608 000076D8 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41609 000076DE 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41610 000076E2 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41611 000076E5 BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41612                                  
 41613                                  CPSPlen	EQU $ - CPScanPattern
 41614                                  
 41615                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41616                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41617                                  
 41618                                  IsCopyProt:
 41619 000076E8 813E1B014353            	cmp	word [CPID1Offset],ID1
 41620 000076EE 752D                    	jne	short CP_done
 41621                                  
 41622 000076F0 813E73014450            	cmp	word [CPID2Offset],ID2
 41623 000076F6 7525                    	jne	short CP_done
 41624                                  
 41625 000076F8 813E460113F4            	cmp	word [CPID3Offset],ID3
 41626 000076FE 751D                    	jne	short CP_done
 41627                                  
 41628 00007700 813E24010080            	cmp	word [CPID4Offset],ID4
 41629 00007706 7515                    	jne	short CP_done
 41630                                  
 41631 00007708 0E                      	push	cs
 41632 00007709 07                      	pop	es
 41633 0000770A BF[D076]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41634                                  
 41635 0000770D BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41636                                  					; of pattern
 41637                                  
 41638 00007710 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41639 00007713 F3A6                    	repe	cmpsb
 41640 00007715 7506                    	jnz	short CP_done
 41641                                  
 41642 00007717 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41643                                  CP_done:
 41644 0000771D C3                      	retn
 41645                                  	
 41646                                  ;DOSCODE ENDS
 41647                                  
 41648                                  	;END
 41649                                  
 41650                                  ;----------------------------------------------------------------------------
 41651                                  
 41652                                  ;align 2 ; 05/09/2018 (Error!)
 41653                                  
 41654                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41655                                  ;align 16 ; 08/09/2018 (OK.)
 41656                                  align 2
 41657                                  
 41658                                  ; 06/08/2018 - Retro DOS v3.0
 41659                                  ;============================================================================
 41660                                  ; MSINIT.ASM
 41661                                  ;============================================================================
 41662                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41663                                  ;
 41664                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41665                                  ;
 41666                                  	; 15/07/2018 - Retro DOS v3.0
 41667                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41668                                  
 41669                                  ; temp iret instruction
 41670                                  
 41671                                  
 41672                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41673                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41674                                  
 41675                                  initiret: ; MSDOS 6.0
 41676                                  SYSBUF:
 41677                                  ;IRETT: ; 06/05/2019
 41678 0000771E CF                      	iret
 41679                                  
 41680                                  ; 22/04/2019 - Retro DOS v4.0
 41681                                  
 41682                                  ; pointer to the BIOS data segment that will be available just to the
 41683                                  ; initialization code
 41684                                  
 41685 0000771F 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41686                                  
 41687                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41688                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41689                                  
 41690                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41691                                  
 41692                                  ParaRound:
 41693 00007721 83C00F                  	add	ax, 15
 41694 00007724 D1D8                    	rcr	ax, 1
 41695 00007726 D1E8                    	shr	ax, 1
 41696 00007728 D1E8                    	shr	ax, 1
 41697 0000772A D1E8                    	shr	ax, 1
 41698 0000772C C3                      	retn
 41699                                  
 41700                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41701                                  
 41702                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41703                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41704                                  	
 41705                                  	; 30/05/2019
 41706                                  	; 22/04/2019 - Retro DOS v4.0
 41707                                  	; 07/07/2018 - Retro DOS v3.0
 41708                                  	; Retro DOS v2.0 - 03/03/2018
 41709                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41710                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41711                                  DOSINIT:
 41712                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41713                                  	;
 41714                                  	; Far call from SYSINIT
 41715                                  	; DX = Memory size in paragraphs
 41716                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41717                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41718                                  	;
 41719                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41720                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41721                                  
 41722 0000772D FA                              CLI
 41723 0000772E FC                              CLD
 41724                                  
 41725                                  	; 03/11/2022
 41726                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41727                                  	
 41728                                  	; 17/12/2022
 41729                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41730                                  	;push	dx ; =*=		; save parameters from BIOS
 41731                                  	
 41732 0000772F 56                      	push	si
 41733 00007730 1E                      	push	ds
 41734 00007731 57                      	push	di			;save di (ptr to BiosComBlock)
 41735                                  
 41736 00007732 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41737                                  
 41738                                  ; First, move the DOS data segment to its final location in low memory
 41739                                  
 41740                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41741                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41742 00007734 B8[AE7B]                	mov	ax,MEMSTRT		; get offset of end of init code
 41743                                  
 41744                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41745                                  	;and	ax,~15	; 0FFF0h	; boundary
 41746                                  
 41747                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41748                                  					; code segment
 41749                                  
 41750                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41751 00007737 83C00F                  	add	ax,15			; round to nearest paragraph
 41752 0000773A 83E0F0                  	and	ax,~15			; boundary
 41753                                  
 41754 0000773D 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41755                                  					; code segment
 41756                                  	; 05/12/2022
 41757                                  	; 30/04/2019 - Retro DOS v4.0
 41758                                  	;xor	si,si
 41759                                  	
 41760 0000773F 8CC8                    	mov	ax,cs
 41761 00007741 8ED8                    	mov	ds,ax			; ds = current code segment
 41762                                  					; DS:SI now points to dosdata
 41763                                  
 41764                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41765                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41766                                  					;  BData segment. Cannot use
 41767                                  					;  getdseg macro here!!!
 41768                                  	; 17/12/2022
 41769 00007743 8E06[1F77]              	mov	es,[InitBioDataSeg]
 41770                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41771                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41772                                  
 41773                                  	;mov	es,[es:3]
 41774 00007747 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41775                                  
 41776 0000774C 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41777                                  
 41778                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41779                                  	;mov	cx,4976  ; 25/05/2019
 41780                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41781                                  	;mov	cx,4962
 41782                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41783 0000774E B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41784 00007751 F3A4                    	rep	movsb			; move data to final location
 41785                                  	
 41786 00007753 5F                      	pop	di			; restore ptr to BiosComBlock
 41787 00007754 1F                      	pop	ds			; restore parms from BIOS
 41788 00007755 5E                      	pop	si
 41789                                  	; 17/12/2022
 41790                                  	;pop	dx ; 30/05/2019	
 41791                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41792                                  	;pop	dx ; =*=		
 41793                                  
 41794 00007756 06                      	push	es
 41795 00007757 1E                      	push	ds
 41796 00007758 07                      	pop	es			; es:si -> device chain
 41797 00007759 1F                      	pop	ds			; ds points to dosdata
 41798                                  
 41799                                  ;SR;
 41800                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41801                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41802                                  ;lie table handling for device drivers. This can be expanded later on to
 41803                                  ;establish a communication block from the BIOS to the DOS.
 41804                                  
 41805                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41806                                  	;mov	[1042h],bx
 41807 0000775A 893E[3F10]              	mov	[BiosDataPtr],di
 41808 0000775E 891E[4110]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41809                                  
 41810 00007762 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41811                                  
 41812                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41813                                  
 41814 00007767 2E8C1E[1051]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41815 0000776C 2E8C1E[1451]            	mov	[cs:LowInt24Addr+2],ds
 41816 00007771 2E8C1E[1851]            	mov	[cs:LowInt28Addr+2],ds
 41817                                  
 41818                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41819                                  	;mov	[584h],sp
 41820                                  	;mov	[586h],ss
 41821 00007776 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41822 0000777A 8926[8405]              	mov	[USER_SP],sp
 41823 0000777E 8C16[8605]              	mov	[USER_SS],ss
 41824                                  
 41825 00007782 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41826 00007784 8ED0                    	mov	ss,ax
 41827                                  
 41828                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41829                                  	;mov	sp,offset dosdata:dskstack
 41830 00007786 BC[2009]                	mov	sp,DSKSTACK
 41831                                  
 41832                                  ;M023
 41833                                  ; Init patch ptrs to default values
 41834                                  
 41835                                  	;mov	word [1212h],RetExePatch
 41836                                  	;mov	word [1214h],RetExePatch
 41837                                  	;mov	word [61h],RetExePatch
 41838 00007789 C706[F811][8962]        	mov	word [FixExePatch],RetExePatch	; M023
 41839                                  	; 28/12/2022 - Retro DOS v4.1
 41840                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 41841 0000778F C706[6100][8962]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41842                                  
 41843                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41844                                  %if 0	
 41845                                  
 41846                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41847                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41848                                  ; running in the HMA.
 41849                                  
 41850                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41851                                  	cmp	al,2		;   386 or later?
 41852                                  	mov	ax,Rational386Patch
 41853                                  	jae	short di_set_patch
 41854                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41855                                  di_set_patch:
 41856                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41857                                  
 41858                                  %endif
 41859                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41860                                  
 41861 00007795 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41862                                  
 41863                                  	; ax now holds segment of DOS code
 41864 00007797 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41865                                  
 41866 0000779A 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41867 0000779E 8936[4800]              	mov	word [NULDEV],si
 41868                                  ;SR;
 41869                                  ; There are some locations in the Win386 instance data structures
 41870                                  ; which need to be set up with the DOS data segment. First, initialize
 41871                                  ; the segment part of the instance table pointer in the SIS.
 41872                                  
 41873                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41874 000077A2 8C1E[F10F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41875                                  
 41876                                  ; Now initialize the segment part of the pointer to the data in each
 41877                                  ; instance table entry.
 41878                                  
 41879 000077A6 56                      	push	si		; preserve pointer to device chain
 41880                                  	; 18/12/2022
 41881                                  	; cx = 0
 41882 000077A7 B107                    	mov	cl,7
 41883                                  	;mov	cx,7		; There are 7 entries in the instance table
 41884                                  				; M019
 41885                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41886 000077A9 BE[F50F]                	mov	si,Instance_Table+2 ; point si to segment field
 41887                                  Instance_init_loop:
 41888 000077AC 8C1C                    	mov	[si],ds		; set offset in instance entry
 41889                                  	;add	si,6
 41890 000077AE 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41891 000077B1 E2F9                    	loop	Instance_init_loop
 41892                                  
 41893                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41894                                  
 41895                                  	; 18/12/2022
 41896 000077B3 B105                    	mov	cl,5
 41897                                  	;mov	cx,5		; There are five entries in the instance table
 41898                                  
 41899                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41900                                  	;mov	si,11EDh	; point si to segment field
 41901 000077B5 BE[D311]                	mov	si,OldInstanceJunk+6
 41902                                  OldInstance_init_loop:
 41903 000077B8 8C1C                    	mov	[si],ds		; set offset in instance entry
 41904 000077BA 83C606                  	add	si,6		; move on to next entry
 41905 000077BD E2F9                    	loop	OldInstance_init_loop
 41906 000077BF 5E                      	pop	si		; restore pointer to device chain
 41907                                  
 41908                                  ; End of WIN386 2.xx compatibility bullshit
 41909                                  
 41910                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41911                                  %if 0	
 41912                                     	; 30/04/2019
 41913                                  	;push	es
 41914                                  	;pop	ds
 41915                                  			; ds:si points to console device
 41916                                  
 41917                                  	; 24/04/2019 - Retro DOS v4.0
 41918                                  
 41919                                  	; 15/07/2018
 41920                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41921                                  	; (Set INT 2Ah handler address to an 'IRET')
 41922                                  
 41923                                  	; need crit vector inited to use deviocall
 41924                                  	;push	ds			; preserve segment of device chain
 41925                                  	push	es ; 30/04/2019
 41926                                  
 41927                                  %endif
 41928                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41929 000077C0 06                      	push	es
 41930                                  	; 17/12/2022
 41931                                  	;pop	ds
 41932                                  	;push	ds
 41933                                  
 41934 000077C1 31C0                    	xor	ax,ax
 41935 000077C3 8ED8                    	mov	ds,ax			; point DS to int vector table
 41936 000077C5 B8[1E77]                	mov	ax,initiret
 41937                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41938 000077C8 A3A800                  	mov	[addr_int_ibm],ax
 41939 000077CB 8CC8                    	mov	ax,cs
 41940                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41941 000077CD A3AA00                  	mov	[addr_int_ibm+2],ax
 41942 000077D0 1F                      	pop	ds			; restore segment of device chain
 41943                                  
 41944 000077D1 E81C02                  	call	CHARINIT  		; initialize console driver
 41945 000077D4 56                      	push	si			; save pointer to header
 41946                                  
 41947 000077D5 16                      	push	ss			; move pointer to dos data...
 41948 000077D6 07                      	pop	es			; ...into ES
 41949                                  
 41950                                  	;initialize sft for file 0 (CON)
 41951                                  
 41952                                          ; 07/07/2018 - Retro DOS v3.0
 41953                                  	; 24/04/2019 - Retro DOS v4.0
 41954                                  	;mov	di,SFTABL+6 
 41955 000077D7 BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41956 000077DA B80300                          MOV     AX,3
 41957 000077DD AB                              STOSW           	; Refcount
 41958 000077DE FEC8                            DEC     AL
 41959 000077E0 AB                              STOSW           	; Access rd/wr, compatibility
 41960 000077E1 30C0                            XOR     AL,AL
 41961 000077E3 AA                              STOSB           	; attribute
 41962                                  	;mov	al,0C3h
 41963 000077E4 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41964 000077E6 AB                      	STOSW			; flags
 41965 000077E7 89F0                            mov	ax,si
 41966 000077E9 AB                              stosw			; device pointer in devptr	
 41967 000077EA 8CD8                            mov	ax,ds
 41968 000077EC AB                      	stosw
 41969 000077ED 31C0                    	xor	ax,ax	; 0
 41970 000077EF AB                      	stosw			; firclus
 41971 000077F0 AB                      	stosw			; time
 41972 000077F1 AB                      	stosw			; date
 41973 000077F2 48                      	dec	ax	; -1
 41974 000077F3 AB                      	stosw			; size
 41975 000077F4 AB                      	stosw
 41976 000077F5 40                      	inc	ax	; 0
 41977 000077F6 AB                      	stosw			; position
 41978 000077F7 AB                      	stosw
 41979                                  	;add	di,7
 41980 000077F8 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41981                                  				; point at name
 41982                                  	;add	si,10
 41983 000077FB 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41984                                  				; point to name
 41985 000077FE B90400                  	mov	cx,4
 41986 00007801 F3A5                    	rep	movsw		; name
 41987 00007803 B103                    	mov	cl,3
 41988 00007805 B020                    	mov	al," "
 41989 00007807 F3AA                    	rep	stosb		; extension
 41990                                  
 41991 00007809 5E                      	pop	si		; get back pointer to header
 41992                                  
 41993                                  				; mark device as CON I/O
 41994                                  	; 15/07/2018
 41995                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41996 0000780A 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41997                                  	; 12/03/2018
 41998                                  	;mov	[ss:32h],si
 41999 0000780E 368936[3200]            	MOV     [SS:BCON],SI
 42000                                  	;mov	[ss:34h],ds
 42001 00007813 368C1E[3400]                    MOV     [SS:BCON+2],DS
 42002                                  
 42003                                  	; initialize each device until the clock device is found
 42004                                  
 42005                                  CHAR_INIT_LOOP:
 42006 00007818 C534                            LDS     SI,[SI]			; AUX device
 42007 0000781A E8D301                  	call	CHARINIT 
 42008                                         	;15/07/2018
 42009                                  	;test	byte [SI+4],8
 42010 0000781D F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 42011 00007821 74F5                            JZ      SHORT CHAR_INIT_LOOP
 42012                                  	; 12/03/2018
 42013                                  	;mov	[ss:2Eh],si
 42014 00007823 368936[2E00]                    MOV     [SS:BCLOCK],SI
 42015                                  	;mov	[ss:30h],ds
 42016 00007828 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 42017                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 42018                                  
 42019                                  	;mov	bp,4970			; bp = pointer to free mem
 42020                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 42021                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 42022                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 42023 0000782D BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 42024                                  
 42025 00007830 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 42026 00007835 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 42027                                  PERDRV:
 42028                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 42029 0000783A C534                            LDS	SI,[SI]			; Next device
 42030 0000783C 83FEFF                          CMP	SI,-1	; 0FFFFh
 42031 0000783F 7479                    	JZ	SHORT CONTINIT
 42032                                  
 42033 00007841 E8AC01                          call	CHARINIT
 42034                                  
 42035                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 42036                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 42037                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 42038                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 42039                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 42040                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 42041                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 42042                                  
 42043                                          ; 15/07/2018
 42044                                  	;test	word [SI+4],8000h		; DEVTYP
 42045                                          ; 17/12/2022
 42046                                  	;test	byte [SI+5],80h
 42047 00007844 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 42048                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 42049 00007848 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 42050                                  
 42051 0000784A 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 42052 0000784F 30ED                    	XOR     CH,CH
 42053                                          ; 07/07/2018
 42054                                  	;MOV	[SI+10],CL		; Number of units in name field
 42055 00007851 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 42056 00007854 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 42057 00007859 30F6                    	XOR     DH,DH
 42058 0000785B 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 42059 00007860 1E                      	PUSH    DS
 42060 00007861 56                              PUSH    SI
 42061 00007862 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 42062                                  
 42063                                  PERUNIT:
 42064 00007867 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 42065 00007869 43                              INC     BX
 42066 0000786A 43                              INC     BX                      ; On to next BPB
 42067                                  	; 15/12/2022
 42068                                  	; 07/07/2018
 42069                                          ;mov	[ES:BP+DPB.DRIVE],DL
 42070 0000786B 26885600                	MOV     [ES:BP],DL
 42071                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42072                                  	;;mov	[ES:BP+0],DL
 42073                                  	;mov	[ES:BP+DPB.DRIVE],DL
 42074                                  
 42075                                  	;MOV	[ES:BP+1],DH
 42076 0000786F 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 42077 00007873 53                              PUSH    BX
 42078 00007874 51                              PUSH    CX
 42079 00007875 52                              PUSH    DX
 42080                                  
 42081                                          ;invoke	$SETDPB
 42082 00007876 E89F97                          CALL	_$SETDPB		; build DPB!
 42083                                  
 42084                                  	; 07/07/2018
 42085                                  	;MOV	AX,[ES:BP+2]
 42086 00007879 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 42087                                          ; 12/03/2018
 42088 0000787D 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 42089 00007882 7604                    	JBE     SHORT NOTMAX		; N:
 42090 00007884 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 42091                                  NOTMAX:					
 42092                                  	; set the next dpb field in the currently built bpb
 42093                                  	; and mark as never accessed
 42094                                          
 42095                                  	; 24/04/2019
 42096 00007888 89E8                    	mov	ax,bp			; get pointer to DPB
 42097                                  	;add	ax,33
 42098 0000788A 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 42099                                  					; set seg & offset of next DPB
 42100                                  	;mov	[es:bp+25],ax
 42101 0000788D 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 42102                                  	;mov	[es:bp+27],es
 42103 00007891 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 42104                                  					; mark as never accessed
 42105                                  	;mov	byte [es:bp+24],0FFh
 42106 00007895 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 42107                                  
 42108 0000789A 5A                      	POP     DX
 42109 0000789B 59                              POP     CX
 42110 0000789C 5B                              POP     BX
 42111 0000789D 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 42112 0000789F 5E                              POP     SI
 42113 000078A0 1F                              POP     DS
 42114                                  					; ds:si -> device header
 42115                                  					; store it in the corresponding dpb
 42116                                  	; 07/07/2018
 42117                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 42118 000078A1 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 42119                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 42120 000078A5 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 42121                                  
 42122 000078A9 1E                              PUSH    DS			; save pointer to device header
 42123 000078AA 56                              PUSH    SI
 42124 000078AB FEC6                            INC     DH			; inc unit #
 42125 000078AD FEC2                            INC     DL			; inc drive #
 42126 000078AF 8ED8                            MOV     DS,AX			; restore segment of BPB array
 42127                                          ;add	bp,33 ; 24/04/2019
 42128 000078B1 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 42129 000078B4 E2B1                    	LOOP    PERUNIT			; process all units in each driver
 42130                                          
 42131 000078B6 5E                      	POP     SI			; restore pointer to device header
 42132 000078B7 1F                              POP     DS
 42133 000078B8 EB80                    	JMP	PERDRV			; process all drivers in chain
 42134                                  
 42135                                  CONTINIT:
 42136                                  	; 24/04/2019
 42137                                  	;sub	bp,33			; set link in last DPB to -1
 42138 000078BA 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 42139                                  					; set last link offset & segment
 42140                                  	;mov	word [bp+25],0FFFFh
 42141 000078BD C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 42142                                  	;mov	word [bp+27],0FFFFh
 42143 000078C2 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 42144                                  	;add	bp,33
 42145 000078C7 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 42146                                  					; the DPB chain is done.  
 42147 000078CA 16                      	push	ss
 42148 000078CB 1F                      	pop	ds
 42149                                  
 42150 000078CC 89E8                    	mov	ax,bp
 42151 000078CE E850FE                  	call	ParaRound		; round up to segment
 42152                                  
 42153 000078D1 8CDA                    	mov	dx,ds			; dx = dosdata segment
 42154 000078D3 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 42155                                  
 42156 000078D5 BB0F00                  	mov	bx,0Fh
 42157                                  	
 42158                                  	; 24/05/2019
 42159                                  	;mov	cx,[ENDMEM]
 42160                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42161                                  	; 17/12/2022
 42162                                  	;mov	cx,[ENDMEM] 
 42163                                  					; set seg inpacketto dosdata					
 42164 000078D8 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 42165                                  
 42166                                  ; Patch in the segments of the interrupt vectors with current code segment.
 42167                                  ; Also patch in the segment of the pointers in the dosdata area.
 42168                                  ;
 42169                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 42170                                  ; calls were done. The procedure patch_misc_segments is called multiple
 42171                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 42172                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 42173                                  
 42174 000078DC 52                      	push	dx			; preserve first free segment
 42175                                  
 42176 000078DD A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 42177 000078E0 8EC0                    	mov	es,ax			; es = segment of DOS
 42178 000078E2 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 42179                                  
 42180 000078E8 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 42181 000078EB E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 42182                                  					; other tables with seg in ES.
 42183                                  	; 17/12/2022
 42184                                  	; cx = 0
 42185 000078EE 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 42186                                  
 42187 000078F2 5A                      	pop	dx			; restore first free segment
 42188                                  
 42189                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 42190                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 42191                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 42192                                  ; low_mem_stub by seg_reinit.
 42193                                  
 42194                                  	;xor	ax,ax ; 0
 42195                                  	;mov	ds,ax
 42196                                  	;mov	es,ax
 42197                                  	; 17/12/2022
 42198                                  	; cx = 0
 42199                                  	;xor	cx,cx ; 0
 42200 000078F3 8ED9                    	mov	ds,cx
 42201 000078F5 8EC1                    	mov	es,cx
 42202                                  
 42203                                  	; set the segment of int 24 vector that was 
 42204                                  	; left out by patch_vec_segments above.
 42205                                  
 42206                                  	; 17/12/2022
 42207                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42208                                  ;%if 0
 42209                                  	; 24/05/2019
 42210                                  	;;mov	di,90h
 42211                                  	;;mov	di,4*int_fatal_abort
 42212                                  	;mov	di,addr_int_fatal_abort
 42213 000078F7 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 42214                                  
 42215 000078FA 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 42216                                  	;mov	[di+2],ax  ; int 24h segment
 42217 000078FE 8905                    	mov	[di],ax ; 24/05/2019
 42218                                  
 42219                                  	;;mov	di,82h
 42220                                  	;mov	di,INTBASE+2
 42221                                  
 42222                                  ;%endif
 42223                                  	; 17/12/2022
 42224                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42225                                  	;;mov	di,90h
 42226                                  	;;mov	di,4*int_fatal_abort
 42227                                  	;mov	di,addr_int_fatal_abort
 42228                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42229                                  	;mov	[di+2],ax  ; int 24h segment
 42230                                  	;;mov	di,82h
 42231                                  	;mov	di,INTBASE+2
 42232                                  
 42233                                  	; set default divide trap offset
 42234                                  
 42235                                  	;mov	word ptr ds:[0],offset doscode:divov
 42236 00007900 C7060000[EB52]          	mov	word [0],DIVOV	
 42237                                  
 42238                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42239                                  
 42240                                  	;mov	di,80h
 42241 00007906 BF8000                  	mov	di,INTBASE
 42242                                  	;mov	ax,offset doscode:irett
 42243 00007909 B8[E602]                	mov	ax,IRETT
 42244                                  
 42245                                  	; 17/12/2022
 42246                                  	; cx = 0
 42247 0000790C B109                    	mov	cl,9
 42248                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42249                                  					;   sets offsets for ints 20h-28h
 42250                                  iset1:
 42251 0000790E AB                      	stosw
 42252                                  	;add	di,2
 42253                                  	; 20/06/2023
 42254 0000790F 47                      	inc	di
 42255 00007910 47                      	inc	di
 42256 00007911 E2FB                    	loop	iset1
 42257                                  
 42258 00007913 83C704                  	add	di,4			; skip vector 29h
 42259                                  
 42260                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42261                                  ;					;   sets offsets for ints 2ah-2fh
 42262                                  ;iset2:
 42263                                  ;	stosw
 42264                                  ;	add	di,2
 42265                                  ;	loop	iset2
 42266                                  
 42267                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42268                                  ; patch_vec_segments above. So skip it.
 42269                                  
 42270                                  ;	add	di,8			; skip vector 30h & 31h 
 42271                                  
 42272                                  	;;;
 42273                                  	; 06/05/2019 - Retro DOS v4.0
 42274                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42275                                  	; 17/12/2022
 42276 00007916 B105                    	mov	cl,5 ; 28/06/2019
 42277                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42278                                  	;mov	cx,6
 42279                                  iset2:
 42280 00007918 AB                      	stosw
 42281                                  	;add	di,2
 42282                                  	; 20/09/2023
 42283 00007919 47                      	inc	di
 42284 0000791A 47                      	inc	di	
 42285 0000791B E2FB                    	loop	iset2
 42286                                  
 42287                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42288                                  	; 17/12/2022
 42289 0000791D 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42290                                  	;add	di,8
 42291                                  	;;;
 42292                                  
 42293                                  	; 17/12/2022
 42294 00007920 B10E                    	mov	cl,14
 42295                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42296                                  					;   sets offsets for ints 32h-3fh
 42297                                  iset3:
 42298 00007922 AB                      	stosw
 42299                                  	;add	di,2
 42300                                  	; 20/09/2023
 42301 00007923 47                      	inc	di
 42302 00007924 47                      	inc	di
 42303 00007925 E2FB                    	loop	iset3
 42304                                  
 42305                                  ;if installed
 42306                                  	; set the offset of int2f handler
 42307                                  	;mov	word [0BCh],INT2F
 42308 00007927 C706BC00[1507]          	mov	word [02Fh*4],INT2F
 42309                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42310 0000792D 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42311                                  	;mov	[0BEh],ax
 42312 00007931 A3BE00                  	mov	[(02Fh*4)+2],ax
 42313                                  ;endif
 42314                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42315                                  	; long jump will be patched in by seg_reinit
 42316                                  
 42317                                  	;mov	byte [C0h],0EAh
 42318 00007934 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42319                                  	;mov	byte [C1h],CALL_ENTRY
 42320 00007939 C706C100[E702]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42321                                  
 42322 0000793F C7068000[E002]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42323 00007945 C7068400[0C03]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42324 0000794B C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42325 00007951 89168A00                	mov	word [addr_int_terminate+2],dx	
 42326 00007955 C7069400[3F05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42327 0000795B C7069800[C605]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42328 00007961 C7069C00[2C62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42329                                  
 42330 00007967 16                      	push	ss
 42331 00007968 1F                      	pop	ds
 42332                                  	
 42333                                  	; 24/05/2019
 42334                                  	;push	ss
 42335                                  	;pop	es
 42336                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42337                                  	; 17/12/2022
 42338                                  	;push	ss
 42339                                  	;pop	es
 42340                                  
 42341 00007969 52                      	push	dx			; remember address of arena
 42342                                  
 42343 0000796A 42                      	inc	dx			; leave room for arena header
 42344                                  	;mov	[330h],dx
 42345 0000796B 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42346                                  
 42347 0000796F 31FF                    	xor	di,di			; point es:di at end of memory
 42348 00007971 8EC2                    	mov	es,dx			; ...where psp will be
 42349 00007973 31C0                    	xor	ax,ax
 42350                                  	;mov	cx,80h			; psp is 128 words
 42351                                  	; 17/12/2022
 42352 00007975 B180                    	mov	cl,128 ; 28/06/2019
 42353                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42354                                  	;mov	cx,128
 42355                                  
 42356 00007977 F3AB                    	rep	stosw			; zero out psp area
 42357 00007979 A1[4603]                        mov     ax,[ENDMEM]
 42358                                  	
 42359                                  	; 17/12/2022
 42360                                  	; cx = 0
 42361 0000797C E8E697                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42362                                  
 42363                                  	; ds, es now point to PSP
 42364                                  
 42365 0000797F 16                      	push	ss
 42366 00007980 1F                      	pop	ds
 42367                                  
 42368                                  	;mov	di,24
 42369 00007981 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42370 00007984 31C0                    	xor	ax,ax
 42371 00007986 AB                      	stosw
 42372 00007987 AA                      	stosb				; 0,1 and 2 are con device
 42373 00007988 B0FF                    	mov	al,0FFh
 42374                                  	;mov	cx,FILPERPROC-3 ; 17
 42375                                  	; 17/12/2022
 42376                                  	; cx = 4
 42377 0000798A B111                    	mov	cl,FILPERPROC-3 ; 17
 42378 0000798C F3AA                    	rep	stosb			; rest are unused
 42379                                  
 42380 0000798E 16                      	push	ss
 42381 0000798F 07                      	pop	es
 42382                                  					; must be set to print messages
 42383 00007990 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42384                                  
 42385                                  ; after this point the char device functions for con will work for
 42386                                  ; printing messages
 42387                                  
 42388                                  	; 24/04/2019 - Retro DOS v4.0
 42389                                  
 42390                                  ; 12/05/2019
 42391                                  ;
 42392                                  ;write_version_msg:
 42393                                  ;
 42394                                  ;	;if	(not ibm)
 42395                                  ;	;mov	si,offset doscode:header
 42396                                  ;	mov	si,HEADER
 42397                                  ;outmes:
 42398                                  ;	;lods	cs:byte ptr [si]
 42399                                  ;	cs
 42400                                  ;	lodsb
 42401                                  ;	cmp	al,"$"
 42402                                  ;	je	short outdone
 42403                                  ;	call	OUTT
 42404                                  ;	jmp	short outmes
 42405                                  ;outdone:
 42406                                  ;	push	ss			; out stomps on segments
 42407                                  ;	pop	ds
 42408                                  ;	push	ss
 42409                                  ;	pop	es
 42410                                  ;	;endif
 42411                                  
 42412                                  	; at this point es is dosdata
 42413                                  
 42414                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42415                                  	; in sysinittable (ms_data.asm)
 42416                                  
 42417                                  	;mov	si,0D28h
 42418 00007994 BE[280D]                	mov	si,SysInitTable
 42419                                  
 42420                                  	; 17/12/2022
 42421                                  	; ds = es = ss
 42422                                  
 42423                                  	; 17/12/2022
 42424                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42425                                  ;%if 0
 42426                                  	;;mov	[es:si+6],es
 42427                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42428                                  	;;mov	[es:si+2],es
 42429                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42430                                  	
 42431 00007997 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42432 0000799A 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42433                                  
 42434                                  	; buffhead -> dosdata:hashinitvar 
 42435                                  
 42436                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42437 0000799D 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42438                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42439                                  	;mov	si,6Dh
 42440 000079A1 BE[6D00]                	mov	si,HASHINITVAR
 42441                                  	;mov	[es:BUFFHEAD],si
 42442 000079A4 8936[3800]              	mov	[BUFFHEAD],si
 42443                                  
 42444 000079A8 5A                              pop     dx                      ; restore address of arena
 42445                                  
 42446                                  	;mov	[032Ch+2],dx
 42447 000079A9 8916[2E03]                      mov     [DMAADD+2],dx
 42448                                  
 42449                                  	;mov	[es:arena_head],dx
 42450 000079AD 8916[2400]              	mov	[arena_head],dx
 42451                                  
 42452                                  ;%endif
 42453                                  
 42454                                  ; 17/12/2022
 42455                                  %if 0
 42456                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42457                                  	;;;
 42458                                  	;mov	[es:si+6],es
 42459                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42460                                  	;mov	[es:si+2],es
 42461                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42462                                  
 42463                                  	; buffhead -> dosdata:hashinitvar 
 42464                                  
 42465                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42466                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42467                                  	;mov	si,6Dh
 42468                                  	mov	si,HASHINITVAR
 42469                                  	mov	[es:BUFFHEAD],si
 42470                                  
 42471                                          pop     dx                      ; restore address of arena
 42472                                  
 42473                                  	;mov	[032Ch+2],dx
 42474                                          mov     [DMAADD+2],dx
 42475                                  
 42476                                  	mov	[es:arena_head],dx
 42477                                  	;;;
 42478                                  %endif
 42479                                  
 42480 000079B1 8EDA                            mov     ds,dx
 42481                                  
 42482                                  	;mov	byte [0],'Z'
 42483 000079B3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42484                                          ;mov	word [1],0
 42485 000079B8 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42486                                  
 42487 000079BE 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42488 000079C2 29D0                    	sub	ax,dx
 42489 000079C4 48                              dec     ax
 42490 000079C5 A30300                          mov     [ARENA.SIZE],ax
 42491                                  
 42492                                  	; point to sft 0
 42493                                  
 42494                                  	;mov	di,offset dosdata:sftabl + sftable
 42495                                  	;mov	di,SFTABL+6
 42496 000079C8 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42497 000079CB B80300                          mov     ax,3
 42498 000079CE AB                              stosw           		; adjust refcount
 42499                                  
 42500                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42501                                  
 42502                                          ;mov	di,offset dosdata:sysinittable
 42503                                  	;mov	di,0D28h
 42504 000079CF BF[280D]                	mov	di,SysInitTable	
 42505                                  
 42506 000079D2 42                      	inc	dx			; advance dx from arena to psp
 42507 000079D3 8EDA                    	mov	ds,dx			; point ds to psp
 42508                                  
 42509                                  					; pass the address os seg_reinit 
 42510                                  					; in dx
 42511 000079D5 BA[437A]                	mov	dx,seg_reinit
 42512 000079D8 B9[6774]                	mov	cx,exepatch_start
 42513 000079DB 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42514                                  
 42515 000079DF B8[1E77]                	mov	ax,SYSBUF
 42516 000079E2 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42517                                  	
 42518 000079E5 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42519 000079EA 368E16[8605]                    mov     ss,[ss:USER_SS]
 42520                                  
 42521 000079EF CB                              retf
 42522                                  
 42523                                  ;
 42524                                  ; END OF DOSINIT
 42525                                  ;
 42526                                  ;--------------------------------------------------------------------------
 42527                                  
 42528                                  CHARINIT:
 42529                                  	; 24/04/2019 - Retro DOS v4.0
 42530                                  	; 07/07/2018 - Retro DOS v3.0
 42531                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42532 000079F0 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42533                                  	;mov	byte [ss:035Bh],0
 42534 000079F6 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42535                                  	;mov	byte [ss:035Ch],0
 42536 000079FC 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42537                                  	;mov	word [ss:035BD],0
 42538 00007A02 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42539 00007A09 06                              PUSH	ES
 42540 00007A0A 53                              PUSH	BX
 42541 00007A0B 50                              PUSH	AX
 42542 00007A0C BB[5A03]                        MOV	BX,DEVCALL
 42543                                          ;PUSH	CS
 42544 00007A0F 16                      	PUSH	SS ; 30/04/2019
 42545 00007A10 07                              POP	ES
 42546 00007A11 E8C3CC                          CALL	DEVIOCALL2	
 42547 00007A14 58                      	POP	AX
 42548 00007A15 5B                              POP	BX
 42549 00007A16 07                              POP	ES
 42550 00007A17 C3                              RETN
 42551                                  
 42552                                  ; 25/04/2019 - Retro DOS v4.0
 42553                                  
 42554                                  ;-----------------------------------------------------------------------------
 42555                                  ;
 42556                                  ;	check_XMM: routine to check presence of XMM driver
 42557                                  ;
 42558                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42559                                  ;
 42560                                  ;	USED:	none
 42561                                  ;
 42562                                  ;-----------------------------------------------------------------------------
 42563                                  
 42564                                  check_XMM: ; proc near
 42565                                  ;
 42566                                  ; determine whether or not an XMM driver is installed
 42567                                  ;
 42568 00007A18 50                      	push	ax
 42569                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42570 00007A19 B80043                  	mov	ax,4300h
 42571 00007A1C CD2F                    	int	2Fh
 42572                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42573                                  		; Return: AL = 80h XMS driver installed
 42574                                  		; AL <> 80h no driver
 42575 00007A1E 3C80                    	cmp	al,80h			; Q: installed
 42576 00007A20 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42577                                  ;
 42578                                  ; get the XMM control functions entry point, save it, we
 42579                                  ; need to call it later.
 42580                                  ;
 42581 00007A22 53                      	push	bx
 42582 00007A23 52                      	push	dx
 42583 00007A24 1E                      	push	ds
 42584 00007A25 06                      	push	es
 42585                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42586 00007A26 B81043                  	mov	ax,4310h
 42587 00007A29 CD2F                    	int	2Fh
 42588                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42589                                  		; Return: ES:BX -> driver entry point
 42590                                  
 42591 00007A2B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42592                                  
 42593 00007A30 891E[4911]              	mov	[XMMcontrol],bx
 42594 00007A34 8C06[4B11]              	mov	[XMMcontrol+2],es
 42595                                  cXMMexit:
 42596 00007A38 F8                      	clc
 42597 00007A39 07                      	pop	es
 42598 00007A3A 1F                      	pop	ds
 42599 00007A3B 5A                      	pop	dx
 42600 00007A3C 5B                      	pop	bx
 42601 00007A3D 58                      	pop	ax
 42602 00007A3E C3                      	retn				; done
 42603                                  ;
 42604                                  ; set carry if XMM driver not present
 42605                                  ;
 42606                                  cXMM_no_driver:
 42607 00007A3F F9                      	stc
 42608 00007A40 58                      	pop	ax
 42609 00007A41 C3                      	retn
 42610                                  
 42611                                  ;-----------------------------------------------------------------------------
 42612                                  ;
 42613                                  ; Procedure Name : seg_reinit
 42614                                  ;
 42615                                  ; Inputs	 : ES has final dos code location
 42616                                  ;		   AX = 0 / 1
 42617                                  ;
 42618                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42619                                  ;		   if AX =0
 42620                                  ;		      if first entry
 42621                                  ;			 patch segment & offset of vectors with stub
 42622                                  ;			 and stub with segment in ES
 42623                                  ;		      else
 42624                                  ;			 patch stub with segment in ES
 42625                                  ;
 42626                                  ;		   else if AX = 1
 42627                                  ;			patch segment of vectors with segment in ES	
 42628                                  ;
 42629                                  ; NOTE		 : This routine can be called at most twice!
 42630                                  ;
 42631                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42632                                  ;-----------------------------------------------------------------------------
 42633                                  
 42634 00007A42 00                      num_entry: db	0		; keeps track of the # of times this routine
 42635                                  				; has been called. (0 or 1)
 42636                                  
 42637                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42638                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42639                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42640                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42641                                  
 42642                                  seg_reinit:	; proc	far
 42643 00007A43 1E                      	push	ds
 42644                                  
 42645 00007A44 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42646                                  
 42647 00007A49 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 42648                                  					; other tables with seg in ES.
 42649                                  	; 17/12/2022
 42650                                  	; cx = 0
 42651 00007A4C 39C8                    	cmp	ax,cx ; 0
 42652                                  	;cmp	ax,0
 42653 00007A4E 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42654                                  
 42655                                  	; 17/12/2022
 42656 00007A50 2E380E[427A]            	cmp	[cs:num_entry],cl ; 0
 42657                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42658 00007A55 7508                    	jne	short second_entry	; N: just patch the stub with 
 42659                                  					;    segment in ES
 42660                                  					; Y: patch the vectors with stub 
 42661 00007A57 8CD8                    	mov	ax,ds
 42662 00007A59 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 42663 00007A5C E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 42664                                  					; with those in the stub.
 42665                                  	; 17/12/2022
 42666                                  	; cx = 0
 42667                                  second_entry:
 42668 00007A5F 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42669                                  
 42670                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42671                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42672 00007A61 BF[4810]                	mov	di,DOSINTTABLE
 42673                                  	; 17/12/2022
 42674                                  	; cx = 0
 42675                                  	;mov	cx,9
 42676 00007A64 B109                    	mov	cl,9
 42677 00007A66 1E                      	push	ds			
 42678 00007A67 07                      	pop	es			; es:di -> DOSINTTABLE
 42679                                  
 42680                                  dosinttabloop:
 42681                                  	;add	di,2
 42682                                  	; 19/09/2023
 42683 00007A68 47                      	inc	di
 42684 00007A69 47                      	inc	di
 42685 00007A6A AB                      	stosw
 42686 00007A6B E2FB                    	loop	dosinttabloop	
 42687                                  
 42688                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42689                                  ; use the HMA, so we don't want to check CS
 42690                                  
 42691                                  ;ifndef ROMDOS
 42692 00007A6D 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42693 00007A70 7220                    	jb	short sr_done		; N: done
 42694                                  ;endif
 42695 00007A72 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 42696 00007A75 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42697                                  					; A20 toggling in the stub.
 42698                                  	; 17/12/2022
 42699                                  	; cx = 0
 42700 00007A77 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 42701                                  ; M021-
 42702                                  	;mov	byte [1211h],1
 42703 00007A7A C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42704                                  				
 42705                                  					; set pointer to the routine that 
 42706                                  					; patches buggy exepacked code.
 42707                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42708 00007A7F C706[F811][B775]        	mov	word [FixExePatch],ExePatch
 42709                                  					; M068: set pointer to the routine 
 42710                                  					; M068: that detects copy protected
 42711                                  					; M068: apps
 42712                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42713 00007A85 C706[6100][E876]        	mov	word [ChkCopyProt],IsCopyProt
 42714                                  
 42715                                  ; 28/12/2022 - Retro DOS v4.1
 42716                                  %if 0
 42717                                  ;----------------------------------------------------------------------------
 42718                                  
 42719                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42720                                  
 42721                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42722                                  ;
 42723                                  ;; M020 - begin
 42724                                  ;
 42725                                  ;	call	WhatCPUType
 42726                                  ;	cmp	al,1
 42727                                  ;	jne	short sr_done 		; we need Rational Patch only
 42728                                  ;					;  on 286 systems
 42729                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42730                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42731                                  ;
 42732                                  ;; M020 - end
 42733                                  ;
 42734                                  ;	jmp	short sr_done
 42735                                  ;
 42736                                  ;patch_vec_seg:				; patch vectors with segment in es
 42737                                  ;	mov	ax,es
 42738                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42739                                  ;					; NOTE we don't have to patch the 
 42740                                  ;					; offsets as they have been already
 42741                                  ;					; set to the doscode offsets at
 42742                                  ;					; DOSINIT.
 42743                                  ;sr_done:
 42744                                  ;	mov	byte [cs:num_entry],1
 42745                                  ;	pop	ds
 42746                                  ;	retf	; ! far return !
 42747                                  
 42748                                  ;----------------------------------------------------------------------------
 42749                                  ;
 42750                                  ; Procedure Name : WhatCPUType
 42751                                  ;
 42752                                  ; Inputs	 : none
 42753                                  ;
 42754                                  ; Outputs	 : AL = 0 if CPU <  286
 42755                                  ;		      = 1 if CPU == 286
 42756                                  ;		      = 2 if CPU >= 386
 42757                                  ;
 42758                                  ; Regs. Mod.	 : AX
 42759                                  ;
 42760                                  ;----------------------------------------------------------------------------
 42761                                  
 42762                                  WhatCPUType:
 42763                                  	; 25/04/2019 - Retro DOS v4.0
 42764                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42765                                  
 42766                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42767                                  
 42768                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42769                                  ; 	it is called from both CODE and SYSINITSEG.
 42770                                  ;
 42771                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42772                                  ;  Returns: AX = 0 if 8086 or 8088
 42773                                  ;              = 1 if 80286
 42774                                  ;              = 2 if 80386
 42775                                  
 42776                                  	; 04/11/2022
 42777                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42778                                  
 42779                                  Get_CPU_Type:	;macro
 42780                                  	pushf
 42781                                  	push	bx			; preserve bx
 42782                                  	xor	bx,bx			; init bx to zero
 42783                                  
 42784                                  	xor	ax,ax			; 0000 into AX
 42785                                  	push	ax			; put it on the stack...
 42786                                  	popf				; ...then shove it into the flags
 42787                                  	pushf				; get it back out of the flags...
 42788                                  	pop	ax			; ...and into ax
 42789                                  	and	ax,0F000h		; mask off high four bits
 42790                                  	cmp	ax,0F000h		; was it all 1's?
 42791                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 42792                                  
 42793                                  	mov	ax,0F000h		; now try to set the high four bits..
 42794                                  	push	ax
 42795                                  	popf
 42796                                  	pushf
 42797                                  	pop	ax			; ...and see what happens
 42798                                  	and	ax,0F000h		; any high bits set ?
 42799                                  	jz	short cpu_286		; nay; it's an 80286
 42800                                  
 42801                                  cpu_386:				; bx starts as zero
 42802                                  	inc	bx			; inc twice if 386
 42803                                  cpu_286:				; just inc once if 286
 42804                                  	inc	bx
 42805                                  cpu_8086:				; don't inc at all if 086
 42806                                  	mov	ax,bx			; put CPU type value in ax
 42807                                  	pop	bx			; restore original bx
 42808                                  	popf
 42809                                  	
 42810                                  	;endm
 42811                                  
 42812                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42813                                  	;retn
 42814                                  
 42815                                  	; 04/11/2022
 42816                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42817                                  	cmp	al,1
 42818                                  	jne	short sr_done 		; we need Rational Patch only
 42819                                  					;  on 286 systems
 42820                                  	mov	word [RationalPatchPtr],RationalPatch
 42821                                  
 42822                                  ;----------------------------------------------------------------------------
 42823                                  %endif	; 28/12/2022
 42824                                  
 42825 00007A8B EB05                    	jmp	short sr_done
 42826                                  
 42827                                  patch_vec_seg:				; patch vectors with segment in es
 42828 00007A8D 8CC0                    	mov	ax,es
 42829 00007A8F E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42830                                  					; NOTE we don't have to patch the 
 42831                                  					; offsets as they have been already
 42832                                  					; set to the doscode offsets at
 42833                                  					; DOSINIT.
 42834                                  sr_done:
 42835 00007A92 2EC606[427A]01          	mov	byte [cs:num_entry],1
 42836 00007A98 1F                      	pop	ds
 42837 00007A99 CB                      	retf	; ! far return !
 42838                                  
 42839                                  ;----------------------------------------------------------------------------
 42840                                  ;
 42841                                  ; Procedure Name : patch_vec_segments
 42842                                  ;
 42843                                  ; Inputs	 : ax -> has segment address to patch in
 42844                                  ;		   ds -> DOSDATA
 42845                                  ;
 42846                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42847                                  ;			
 42848                                  ;			0,20-28,3a-3f
 42849                                  ;
 42850                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42851                                  ;
 42852                                  ;----------------------------------------------------------------------------
 42853                                  
 42854                                  patch_vec_segments:
 42855                                  
 42856 00007A9A 06                      	push	es
 42857                                  
 42858 00007A9B 31C9                    	xor	cx,cx ; 0
 42859 00007A9D 8EC1                    	mov	es,cx
 42860                                  
 42861                                  	;mov	di,82h
 42862 00007A9F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42863                                  
 42864 00007AA2 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42865                                  
 42866                                  					; set vectors 20 & 21
 42867                                  	; 04/11/2022
 42868                                  	;mov	cx,2
 42869                                  	; 17/12/2022
 42870                                  	;mov	cl,2
 42871                                  ps_set1:
 42872 00007AA6 AB                      	stosw	
 42873                                  	;add	di,2
 42874                                  	; 17/12/2022
 42875 00007AA7 47                      	inc	di
 42876 00007AA8 47                      	inc	di
 42877                                  	;loop	ps_set1
 42878                                  
 42879                                  	; 17/12/2022
 42880 00007AA9 AB                      	stosw	; int 21h segment
 42881                                  	;inc	di
 42882                                  	;inc	di
 42883                                  
 42884                                  	;add	di,4			; skip int 22h vector
 42885 00007AAA 83C706                  	add	di,6 ; *
 42886                                  
 42887 00007AAD AB                      	stosw				; set int 23h
 42888 00007AAE 83C706                  	add	di,6			; skip int 24h
 42889                                  
 42890                                  					; set vectors 25-28 and 2a-3f 
 42891                                  	; 04/11/2022
 42892                                  	;mov	cx,4			; set 4 segments
 42893                                  	; 17/12/2022
 42894 00007AB1 B104                    	mov	cl,4
 42895                                  ps_set2:
 42896 00007AB3 AB                      	stosw				
 42897                                  	;add	di,2
 42898                                  	; 17/12/2022
 42899 00007AB4 47                      	inc	di
 42900 00007AB5 47                      	inc	di
 42901 00007AB6 E2FB                    	loop	ps_set2
 42902                                  
 42903 00007AB8 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42904                                  					;   already be set.
 42905                                  	; 04/11/2022
 42906                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42907                                  	; 17/12/2022
 42908 00007ABB B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42909                                  ps_set3:
 42910 00007ABD AB                      	stosw
 42911                                  	;add	di,2
 42912                                  	; 17/12/2022
 42913 00007ABE 47                      	inc	di
 42914 00007ABF 47                      	inc	di
 42915 00007AC0 E2FB                    	loop	ps_set3
 42916                                  
 42917                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42918                                  ; below. So skip it.
 42919                                  
 42920 00007AC2 83C708                  	add	di,8			; skip vector 30h & 31h 
 42921                                  	
 42922                                  	; 04/11/2022
 42923                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42924                                  	; 17/12/2022
 42925 00007AC5 B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42926                                  ps_set4:
 42927 00007AC7 AB                      	stosw
 42928                                  	;add	di,2
 42929                                  	; 17/12/2022
 42930 00007AC8 47                      	inc	di
 42931 00007AC9 47                      	inc	di
 42932 00007ACA E2FB                    	loop	ps_set4
 42933                                  
 42934                                  ; set offset of int2f
 42935                                  
 42936                                  ;if installed
 42937                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42938                                  ;endif
 42939                                  	;mov	[es:0C3h],ax
 42940 00007ACC 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42941                                  	; 17/12/2022
 42942                                  	; cx = 0
 42943 00007AD0 07                      	pop	es
 42944 00007AD1 C3                      	retn
 42945                                  
 42946                                  ;---------------------------------------------------------------------------
 42947                                  ;
 42948                                  ; Procedure Name : patch_misc_segments
 42949                                  ;
 42950                                  ; Inputs	 : es = segment to patch in
 42951                                  ;		   ds = dosdata
 42952                                  ;
 42953                                  ; outputs	 : patches in the sharer and other tables in the dos
 42954                                  ;		   with right dos code segment in es
 42955                                  ;
 42956                                  ; Regs Mod	 : DI,SI,CX
 42957                                  ;
 42958                                  ;---------------------------------------------------------------------------
 42959                                  
 42960                                  patch_misc_segments:
 42961                                  
 42962 00007AD2 53                      	push	bx
 42963 00007AD3 06                      	push	es
 42964 00007AD4 50                      	push	ax
 42965                                  
 42966 00007AD5 8CC0                    	mov	ax,es			; ax - > DOS segment
 42967                                  	
 42968 00007AD7 1E                      	push	ds
 42969 00007AD8 07                      	pop	es			; es -> DOSDATA
 42970                                  	
 42971                                  ; initialize the jump table for the sharer...
 42972                                  
 42973                                  	;mov	di,offset dosdata:jshare
 42974                                  	;mov	di,90h
 42975 00007AD9 BF[9000]                	mov	di,JShare
 42976                                  	;mov	bx,[0AAAh]
 42977 00007ADC 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42978                                  					; table was patched during the first
 42979                                  					; call to this routine
 42980 00007AE0 B90F00                  	mov	cx,15
 42981                                  jumptabloop:
 42982                                  	;add	di,2			; skip offset
 42983                                  	; 17/12/2022
 42984 00007AE3 47                      	inc	di
 42985 00007AE4 47                      	inc	di
 42986 00007AE5 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42987 00007AE8 7405                    	je	short share_patch	; Y: patch in sharer table
 42988                                  					; N: 
 42989 00007AEA 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42990 00007AED 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42991                                  share_patch:
 42992 00007AEF AB                      	stosw				; drop in segment
 42993                                  no_share_patch:
 42994 00007AF0 E2F1                    	loop	jumptabloop
 42995                                  					; BUGBUG patching the country info 
 42996                                  					; with dosdata can be done inline
 42997                                  					; in dosinit.
 42998                                  					; for dos 3.3 country info
 42999                                  					; table address
 43000                                  
 43001                                  	;mov	si,offset dosdata:country_cdpg
 43002                                  	;mov	si,122Ah   
 43003 00007AF2 BE[0512]                	mov	si,COUNTRY_CDPG
 43004                                  					; initialize double word
 43005                                  					; pointers with dosdata in ds
 43006                                  	;mov	[si+4Fh],ds
 43007                                  	;mov	[si+54h],ds
 43008                                  	;mov	[si+59h],ds
 43009                                  	;mov	[si+5Eh],ds
 43010                                  	;mov	[si+80h],ds
 43011                                  	;mov	[si+63h],ds
 43012 00007AF5 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 43013 00007AF8 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 43014 00007AFB 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 43015 00007AFE 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 43016 00007B01 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 43017 00007B05 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 43018                                  
 43019                                  					; fastopen routines are in doscode
 43020                                  					; so patch with doscode seg in ax
 43021                                  
 43022                                  	;mov	si,offset dosdata:fastopentable
 43023                                  	;mov	si,0D30h
 43024 00007B08 BE[300D]                	mov	si,FastOpenTable
 43025                                  
 43026                                  	; 17/12/2022
 43027                                  	; bx = [TEMP_DOSLOC]
 43028 00007B0B 83FBFF                  	cmp	bx,-1
 43029                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 43030 00007B0E 7405                    	je	short fast_patch	; Y: patch segment
 43031                                  	;mov	cx,[TEMP_DOSLOC]
 43032                                  					; Q: has fastopen patched in it's
 43033                                  					;    segment
 43034                                  	; 17/12/2022
 43035 00007B10 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 43036                                  	;;cmp	cx,[si+4]
 43037                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 43038 00007B13 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 43039                                  
 43040                                  fast_patch:
 43041                                  	;mov	[si+4],ax
 43042 00007B15 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 43043                                  no_fast_patch:
 43044                                  	; 17/12/2022
 43045                                  	; cx = 0
 43046 00007B18 58                      	pop	ax
 43047 00007B19 07                      	pop	es
 43048 00007B1A 5B                      	pop	bx
 43049                                  
 43050 00007B1B C3                      	retn
 43051                                  
 43052                                  ;--------------------------------------------------------------------------
 43053                                  ;
 43054                                  ; Procedure Name : patch_offset
 43055                                  ; 
 43056                                  ; Inputs	 : NONE
 43057                                  ;
 43058                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 43059                                  ;		   0,20-28,3a-3f, and 30,31
 43060                                  ;
 43061                                  ;
 43062                                  ; Regs. Mod	 : AX,DI,CX
 43063                                  ;--------------------------------------------------------------------------
 43064                                  
 43065                                  patch_offset:
 43066 00007B1C 06                      	push	es		; preserve es
 43067                                  
 43068 00007B1D 31C0                    	xor	ax,ax
 43069 00007B1F 8EC0                    	mov	es,ax
 43070                                  				; set default divide trap address
 43071                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 43072                                  	;mov	word [es:0],108Ah
 43073 00007B21 26C7060000[7010]        	mov	word [es:0],ldivov
 43074                                  
 43075                                  	;mov	di,80h
 43076 00007B28 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 43077                                  	;mov	ax,offset dosdata:lirett
 43078                                  	;mov	ax,10DAh
 43079 00007B2B B8[C010]                	mov	ax,lirett
 43080                                  				; set vectors 20 & 21 to point to iret.
 43081                                  	; 17/12/2022
 43082                                  	; cx = 0
 43083                                  
 43084                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 43085                                  po_iset1:
 43086 00007B2E AB                      	stosw	; int 20h offset
 43087                                  	;add	di,2 ; *
 43088                                  	;loop	po_iset1
 43089                                  	; 17/12/2022
 43090 00007B2F 47                      	inc	di
 43091 00007B30 47                      	inc	di
 43092 00007B31 AB                      	stosw	; int 21h offset
 43093                                  
 43094                                  	;add	di,4		; skip vector 22h
 43095                                  	; 17/12/2022
 43096 00007B32 83C706                  	add	di,6 ; *	
 43097                                  
 43098 00007B35 AB                      	stosw			; set offset of 23h
 43099                                  	;add	di,6		; skip 24h
 43100                                  	; 19/09/2023
 43101 00007B36 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 43102                                  
 43103                                  				; set vectors 25-28 and 2a-3f to iret.
 43104                                  	; 04/11/2022
 43105                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 43106                                  	; 19/09/2023
 43107                                  	; 17/12/2022
 43108                                  	;mov	cl,4		;   sets offsets for ints 25h-28h
 43109                                  po_iset2:
 43110 00007B39 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 43111                                  	;add	di,2
 43112                                  	; 19/09/2023
 43113                                  	; 17/12/2022
 43114                                  	;inc	di
 43115                                  	;inc	di
 43116                                  	; 19/09/2023
 43117                                  	;loop	po_iset2
 43118                                  
 43119                                  	;add	di,4		; skip vector 29h
 43120                                  	; 19/09/2023
 43121 00007B3A 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 43122                                  
 43123                                  	; 04/11/2022
 43124                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 43125                                  	; 17/12/2022
 43126                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 43127 00007B3D B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 43128                                  po_iset3:
 43129 00007B3F AB                      	stosw
 43130                                  	;add	di,2
 43131                                  	; 17/12/2022
 43132 00007B40 47                      	inc	di
 43133 00007B41 47                      	inc	di
 43134 00007B42 E2FB                    	loop	po_iset3
 43135                                  
 43136                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 43137                                  ; below. So skip it.
 43138                                  
 43139                                  	;add	di,8		; skip vector 30h & 31h 
 43140                                  	; 17/12/2022
 43141 00007B44 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 43142                                  
 43143                                  	; 04/11/2022
 43144                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 43145                                  				;   sets offsets for ints 32h-3fh
 43146                                  	; 17/12/2022
 43147 00007B47 B10E                    	mov	cl,14 ; 26/06/2019
 43148                                  po_iset4:
 43149 00007B49 AB                      	stosw
 43150                                  	;add	di,2
 43151                                  	; 17/12/2022
 43152 00007B4A 47                      	inc	di
 43153 00007B4B 47                      	inc	di
 43154 00007B4C E2FB                    	loop	po_iset4
 43155                                  
 43156                                  ;if installed
 43157                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 43158                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 43159 00007B4E 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 43160                                  ;endif
 43161                                  
 43162                                  ; set up entry point call at vectors 30-31h
 43163                                  	;mov	byte [es:0C0h],0EAh
 43164 00007B55 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 43165                                  	;mov	word [es:0C1h],10D0h
 43166                                  
 43167 00007B5B 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 43168                                  
 43169                                  							; 19/09/2023
 43170                                  	;mov	word [es:80h],1094h
 43171 00007B62 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit		; int 20h
 43172                                  	;mov	word [es:84h],109Eh
 43173 00007B69 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand	; int 21h
 43174                                  	;mov	word [es:94h],10A8h
 43175 00007B70 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 43176                                  	;mov	word [es:98h],10B2h
 43177 00007B77 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 43178                                  	;mov	word [es:9Ch],10BCh
 43179 00007B7E 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 43180                                  
 43181                                  	; 17/12/2022
 43182                                  	; CX = 0
 43183 00007B85 07                      	pop	es		; restore es
 43184 00007B86 C3                      	retn
 43185                                  
 43186                                  ;--------------------------------------------------------------------------
 43187                                  ;
 43188                                  ; 	Procedure Name	:	patch_in_nops
 43189                                  ;
 43190                                  ; 	Entry		: 	ES -> DOSDATA
 43191                                  ;
 43192                                  ;	Regs Mod	: 	cx, di
 43193                                  ;
 43194                                  ;	Description:
 43195                                  ;		This routine patches in 2 nops at the offsets specified in 
 43196                                  ;	patch_table. This basically enables the low mem stub to start 
 43197                                  ;	making XMS calls.
 43198                                  ;
 43199                                  ;--------------------------------------------------------------------------
 43200                                  
 43201                                  	; 04/11/2022
 43202                                  	; (MSDOS 5.0 MSDOS.SYS)
 43203                                  	; DOSCODE:0BC50h
 43204                                  
 43205                                  patch_table:	; label	byte
 43206                                  	;dw	offset dosdata:i0patch
 43207                                  	;dw	offset dosdata:i20patch
 43208                                  	;dw	offset dosdata:i21patch
 43209                                  	;dw	offset dosdata:i25patch
 43210                                  	;dw	offset dosdata:i26patch
 43211                                  	;dw	offset dosdata:i27patch
 43212                                  	;dw	offset dosdata:i2fpatch
 43213                                  	;dw	offset dosdata:cpmpatch
 43214 00007B87 [7010]                  	dw	i0patch
 43215 00007B89 [7A10]                  	dw	i20patch
 43216 00007B8B [8410]                  	dw	i21patch
 43217 00007B8D [8E10]                  	dw	i25patch
 43218 00007B8F [9810]                  	dw	i26patch
 43219 00007B91 [A210]                  	dw	i27patch
 43220 00007B93 [AC10]                  	dw	i2fpatch
 43221 00007B95 [B610]                  	dw	cpmpatch
 43222                                  
 43223                                  patch_table_size equ ($-patch_table)/2
 43224                                  
 43225                                  patch_in_nops:
 43226 00007B97 50                      	push	ax
 43227 00007B98 56                      	push	si
 43228 00007B99 BE[877B]                	mov	si,patch_table
 43229 00007B9C B89090                  	mov	ax,9090h ; nop, nop
 43230                                  	; 17/12/2022
 43231                                  	; cx = 0
 43232                                  	;mov	cx,8
 43233                                  	;mov	cx,patch_table_size ; 8
 43234 00007B9F B108                    	mov	cl,patch_table_size ; 8
 43235                                  pin_loop:
 43236 00007BA1 2E8B3C                  	mov	di,[cs:si]
 43237 00007BA4 AB                      	stosw
 43238                                  	;add	si,2
 43239                                  	; 17/12/2022
 43240 00007BA5 46                      	inc	si
 43241 00007BA6 46                      	inc	si
 43242 00007BA7 E2F8                    	loop	pin_loop
 43243 00007BA9 5E                      	pop	si
 43244 00007BAA 58                      	pop	ax
 43245 00007BAB C3                      	retn
 43246                                  
 43247                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43248                                  ; ---------------------------------------------------------------------------
 43249                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43250                                  ; ---------------------------------------------------------------------------
 43251                                  
 43252                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43253                                  DOSCODE_END:
 43254                                  	;times	9 db 0	; db 9 dup(0)
 43255                                  	; 18/12/2022
 43256 00007BAC 0000                    	dw	0  ;	times 2 db 0
 43257                                  
 43258                                  ;align 16
 43259                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43260                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43261                                  
 43262                                  ; ---------------------------------------------------------------------------
 43263                                  
 43264                                  
 43265                                  ;memstrt label word
 43266                                  ; ---------------------------------------------------------------------------
 43267                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43268                                  ; ---------------------------------------------------------------------------
 43269                                  
 43270                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43271                                  
 43272                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43273                                  ; the dos initialization segment
 43274                                  
 43275                                  ;ifndef ROMDOS
 43276                                  
 43277                                  ;doscode ends
 43278                                  
 43279                                  ;else
 43280                                  
 43281                                  ;;dosinitseg ends
 43282                                  
 43283                                  ;endif ; ROMDOS
 43284                                  
 43285                                  ;============================================================================
 43286                                  
 43287                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43288                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43289                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43290                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43291                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43292                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43293                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43294                                  
 43295                                  ;; burasý doscode sonu
 43296                                  
 43297                                  ;============================================================================
 43298                                  ; DOSDATA
 43299                                  ;============================================================================
 43300                                  ; 29/04/2019 - Retro DOS 4.0
 43301                                  
 43302                                  ;[BITS 16]
 43303                                  
 43304                                  ;[ORG 0]
 43305                                  
 43306                                  ; 25/04/2019 - Retro DOS v4.0
 43307                                  
 43308                                  ;============================================================================
 43309                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43310                                  ;============================================================================
 43311                                  
 43312                                  ;align 16
 43313                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43314                                  	; (4970 bytes for MSDOS 6.21)
 43315                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43316                                  
 43317                                  ;============================================================================
 43318                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43319                                  ;============================================================================
 43320                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43321                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43322                                  ; 16/07/2018 - Retro DOS 3.0	
 43323                                  
 43324                                  ;Break <Initialized data and data used at DOS initialization>
 43325                                  ;----------------------------------------------------------------------------
 43326                                  
 43327                                  ; We need to identify the parts of the data area that are relevant to tasks
 43328                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43329                                  ; data will be gathered with the system code. The process data under 2.x will
 43330                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43331                                  ;
 43332                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43333                                  ; describing that data item.
 43334                                  
 43335                                  ;DOSDATA SEGMENT
 43336                                  
 43337                                  ; 04/11/2022
 43338                                  ;[ORG 0]
 43339                                  
 43340                                  ; ----------------------------------------------------------------------------
 43341                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43342                                  ; ----------------------------------------------------------------------------
 43343                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43344                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43345                                  ; ----------------------------------------------------------------------------
 43346                                  
 43347                                  ; 04/11/2022
 43348                                  
 43349                                  ;DOSDATA:0000h
 43350                                  
 43351 00007BAE 90<rep 2h>              align 16
 43352                                  
 43353                                  ; ----------------------------------------------------------------------------
 43354                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43355                                  ; ----------------------------------------------------------------------------
 43356                                  
 43357                                  segment .data  vstart=0 ; 06/12/2022
 43358                                  								
 43359                                  ; ============================================================================
 43360                                  
 43361                                  ; 06/12/2022
 43362                                  ;DOSDATASTART equ $
 43363                                  DOSDATASTART:
 43364                                  
 43365                                  
 43366                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43367                                  
 43368                                  	;; 03/11/2022
 43369                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43370                                  
 43371                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43372                                  	;db	4 dup (?)	
 43373 00000000 00<rep 4h>              	times	4 db 0
 43374                                  
 43375                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43376                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43377                                  	;dw	0
 43378                                  
 43379                                  	;EVEN
 43380                                  
 43381                                  ;align 2
 43382                                  
 43383                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43384                                  ; area compatability. This location must be incremented EACH TIME the data
 43385                                  ; area here gets mucked with.
 43386                                  ;
 43387                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43388                                  
 43389                                  MSCT001S:	; LABEL BYTE
 43390                                  	
 43391                                  DataVersion:	
 43392 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43393                                  
 43394                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43395                                  ;hkn; been removed to DOSCODE above
 43396                                  
 43397                                  ;M044
 43398                                  ; First part of save area for saving last para of Window memory
 43399                                  
 43400                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43401 00000006 00<rep 8h>              	times	8 db 0
 43402                                  
 43403                                  	; MSDOS 6.21 DOSDATA:000Eh
 43404                                  MYNUM:			; Offset 000Eh
 43405 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43406                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43407 00000010 0000                    	dw	0
 43408                                  OpenLRU:
 43409 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43410                                  OEM_HANDLER: 		
 43411 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43412                                  
 43413                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43414                                  ;;			way that we leave DOS???? - jgl
 43415                                  
 43416                                  LeaveAddr:
 43417 00000018 [1104]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43418                                  RetryCount:		
 43419 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43420                                  RetryLoop:
 43421 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43422                                  LastBuffer:
 43423 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43424                                  CONTPOS:
 43425 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43426                                  arena_head:
 43427 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43428                                  
 43429                                  ;; 16/07/2018
 43430                                  ;;***************************************************************************
 43431                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43432                                  ;;***************************************************************************
 43433                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43434                                  ;;
 43435                                  ;;	AH = 52h
 43436                                  ;;
 43437                                  ;;	on return:
 43438                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43439                                  ;;		Known "invars" fields follow (varies with DOS version):
 43440                                  ;;
 43441                                  ;;	Offset Size		 Description
 43442                                  ;;
 43443                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43444                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43445                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43446                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43447                                  ;;		      0 indicates no unread input (DOS 3.x)
 43448                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43449                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43450                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43451                                  ;;	  08   dword  pointer to $CLOCK device driver
 43452                                  ;;	  0C   dword  pointer to CON device driver
 43453                                  ;;	  10   byte   number of logical drives in system
 43454                                  ;;	  11   word   maximum bytes/block of any block device
 43455                                  ;;	  13   dword  pointer to DOS cache buffer header
 43456                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43457                                  ;;		      point to the next device in device chain
 43458                                  ;;
 43459                                  ;;***************************************************************************
 43460                                  
 43461                                  ; The following block of data is used by SYSINIT. 
 43462                                  ; Do not change the order or size of this block
 43463                                  
 43464                                  ;SYSINITVAR:
 43465                                  ;----------------------------------------------------------------------------
 43466                                  SYSINITVARS:
 43467                                  DPBHEAD:
 43468 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43469                                  SFT_ADDR:
 43470 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43471                                  BCLOCK:
 43472 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43473                                  BCON:
 43474 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43475                                  MAXSEC:
 43476 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43477                                  BUFFHEAD:
 43478 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43479                                  CDSADDR:
 43480 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43481                                  SFTFCB:
 43482 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43483                                  KEEPCOUNT:
 43484 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43485                                  NUMIO:
 43486 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43487                                  CDSCOUNT:
 43488 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43489                                  
 43490                                  ; A fake header for the NUL device
 43491                                  NULDEV:
 43492 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43493                                  	;dw	8004h
 43494 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43495 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43496 00000050 [CB0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43497 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43498                                  SPLICES:
 43499 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43500                                  
 43501                                  Special_Entries:
 43502 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43503                                  UU_IFS_DOS_CALL:
 43504 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43505                                  ; 
 43506                                  ; UU_IFS_HEADER:
 43507                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43508                                  
 43509                                  ChkCopyProt:
 43510 00000061 0000                    	dw	0	; M068
 43511                                  A20OFF_PSP:
 43512 00000063 0000                    	dw	0	; M068
 43513                                  BUFFERS_PARM1:
 43514 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43515                                  BUFFERS_PARM2:
 43516 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43517                                  BOOTDRIVE:
 43518 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43519                                  DDMOVE:
 43520 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43521                                  EXT_MEM_SIZE:
 43522 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43523                                  
 43524                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43525                                  ;
 43526                                  ; Replaced by next two declarations
 43527                                  ;
 43528                                  ;UU_BUF_HASH_PTR:
 43529                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43530                                  ;UU_BUF_HASH_COUNT:
 43531                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43532                                  
 43533                                  BufferQueue:
 43534 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43535                                  DirtyBufferCount:
 43536 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43537                                  			; BUGBUG ---- change to byte
 43538                                  SC_CACHE_PTR:
 43539 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43540                                  SC_CACHE_COUNT:
 43541 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43542                                  BuffInHMA:
 43543 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43544                                  LoMemBuff:
 43545 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43546                                  			;  in Low mem when buffs are in HMA
 43547                                  ;
 43548                                  ; All variables which have UU_ as prefix can be reused for other
 43549                                  ; purposes and can be renamed. All these variables were used for
 43550                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43551                                  ; manager ---- MOHANS
 43552                                  ;
 43553                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43554                                  UU_BUF_EMS_FIRST_PAGE:	
 43555 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43556                                  
 43557                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43558                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43559                                  ;	dw	0			
 43560                                  
 43561                                  CL0FATENTRY:
 43562 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43563                                  			; is used in pack/unpack rts.
 43564                                  			; in fat.asm if cluster 0 is specified.
 43565                                  			; SR;
 43566                                  IoStatFail:
 43567 00000083 00                      	db	0	; IoStatFail has been added to 
 43568                                  			; record a fail on an I24 
 43569                                  			; issued from IOFUNC on a status call. 
 43570                                  
 43571                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43572                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43573                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43574                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43575                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43576                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43577                                  ;
 43578                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43579                                  						; state of the 	buffers page.
 43580                                  						; This one byte is retained to 
 43581                                  						; keep the size of this data 
 43582                                  						; block the same.;
 43583                                  ALLOCMSAVE:
 43584 00000084 00                      	db	0	; M063: temp var. used to 
 43585                                  			; M063: save alloc method in
 43586                                  			; M063: msproc.asm
 43587                                  A20OFF_COUNT:
 43588 00000085 00                      	db	0	; M068: indiactes the # of 
 43589                                  			; M068: int 21 calls for 
 43590                                  			; M068: which A20 is off
 43591                                  DOS_FLAG:
 43592 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43593                                  			; definitions
 43594                                  UNPACK_OFFSET:
 43595 00000087 0000                    	dw	0	; saves pointer to the start
 43596                                  			; of unpack code in exepatch.
 43597                                  			; asm.
 43598                                  UMBFLAG:
 43599 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43600                                  			; M003: link state of the UMBs
 43601                                  			; M003: whether linked or not 
 43602                                  			; M003: to the DOS arena chain
 43603                                  SAVE_AX:
 43604 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43605                                  			; M000: in msproc.asm
 43606                                  UMB_HEAD:
 43607 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43608                                  			; M000: the first umb arena by 
 43609                                  			; M000: BIOS sysinit.
 43610                                  START_ARENA:
 43611 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43612                                  			; M000: from which DOS will 
 43613                                  			; M000: start its scan for alloc.
 43614                                  
 43615                                  ; End of SYSINITVar block
 43616                                  ;----------------------------------------------------------------------------
 43617                                  
 43618                                  ; 25/04/2019 - Retro DOS v4.0
 43619                                  
 43620                                  ; 16/07/2018
 43621                                  ; MSDOS 3.3 (& MDOS 6.0)
 43622                                  
 43623                                  ;
 43624                                  ; Sharer jump table
 43625                                  ;
 43626                                  
 43627                                  ;PUBLIC	JShare
 43628                                  	;EVEN
 43629                                  
 43630                                  ;JShare	LABEL	DWORD
 43631                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43632                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43633                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43634                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43635                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43636                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43637                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43638                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43639                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43640                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43641                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43642                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43643                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43644                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43645                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43646                                  
 43647                                  align 2
 43648                                  
 43649                                  JShare:
 43650 00000090 [0F07]0000              		DW	BadCall,0
 43651 00000094 [1307]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43652 00000098 [1307]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43653 0000009C [0F07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43654 000000A0 [0F07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43655 000000A4 [0F07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43656 000000A8 [0F07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43657 000000AC [0F07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43658 000000B0 [1307]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43659 000000B4 [0F07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43660 000000B8 [0F07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43661 000000BC [0F07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43662 000000C0 [1307]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43663 000000C4 [0F07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43664 000000C8 [0F07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43665                                  
 43666                                  
 43667                                  ;============================================================================
 43668                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43669                                  ;============================================================================
 43670                                  ; 25/04/2019 - Retro DOS 4.0 
 43671                                  ; 16/07/2018 - Retro DOS 3.0	
 43672                                  
 43673                                  ;Break <Initialized data and data used at DOS initialization>
 43674                                  ;----------------------------------------------------------------------------
 43675                                  
 43676                                  ; We need to identify the parts of the data area that are relevant to tasks
 43677                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43678                                  ; data will be gathered with the system code.  The process data under 2.x will
 43679                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43680                                  ;
 43681                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43682                                  ; describing that data item.
 43683                                  
 43684                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43685                                  
 43686                                  ;
 43687                                  ; Table of routines for assignable devices
 43688                                  ;
 43689                                  ; MSDOS allows assignment if the following standard devices:
 43690                                  ;   stdin  (usually CON input)
 43691                                  ;   stdout (usually CON output)
 43692                                  ;   auxin  (usually AUX input)
 43693                                  ;   auxout (usually AUX output)
 43694                                  ;   stdlpt (usually PRN output)
 43695                                  ;
 43696                                  ; SPECIAL NOTE:
 43697                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43698                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43699                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43700                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43701                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43702                                  ;   as EOF).
 43703                                  
 43704                                  ; Default SFTs for boot up
 43705                                  
 43706                                  		;PUBLIC	SFTABL
 43707                                  
 43708                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43709 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43710 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43711 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43712                                  		;times 295 db 0 ; MSDOS 6.0
 43713 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43714                                  
 43715                                  ; the next two variables relate to the position of the logical stdout/stdin
 43716                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43717                                  ; console.
 43718                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43719 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43720 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43721                                  					;	   of buffered input call
 43722 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43723 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43724                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43725 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43726 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43727 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43728                                  switch_character:
 43729 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43730 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43731 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43732 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43733 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43734                                  
 43735                                  ; The following table is a list of addresses that the sharer patches to be
 43736                                  ; PUSH AX to enable the critical sections
 43737                                  
 43738                                  		; DOSDATA:0315h (MSDOS 6.21)
 43739                                  
 43740                                  ;PUBLIC	CritPatch
 43741                                  
 43742                                  CritPatch:	; LABEL WORD
 43743                                  
 43744                                  ;IRP sect,<critDisk,critDevice>
 43745                                  
 43746                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43747                                  ;
 43748                                  ;SR; Change code patch address to a variable in data segment
 43749                                  ;
 43750                                  ;       dw OFFSET DOSDATA: redir_patch
 43751                                  ;       dw OFFSET DOSDATA: redir_patch
 43752                                  ;
 43753                                  ;;hkn	Short_Addr  E&sect
 43754                                  ;;hkn	Short_Addr  L&sect
 43755                                  ;
 43756                                  ;ELSE
 43757                                  ;	DW	0
 43758                                  ;	DW	0
 43759                                  ;ENDIF
 43760                                  ;ENDM
 43761                                  ;	DW	0
 43762                                  
 43763                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43764                                   
 43765 00000315 [0C0D]                  	dw 	redir_patch
 43766 00000317 [0C0D]                  	dw 	redir_patch			
 43767 00000319 [0C0D]                  	dw	redir_patch
 43768 0000031B [0C0D]                  	dw 	redir_patch
 43769                                  
 43770 0000031D 0000                    	dw	0
 43771                                  
 43772                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43773                                  ; Also, IBM server 1.0 requires this also.
 43774                                  
 43775                                  	;EVEN			; Force swap area to start on word boundry
 43776 0000031F 90                      align 2
 43777                                  	;PUBLIC	SWAP_START
 43778                                  SWAP_START:	; LABEL BYTE
 43779 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43780 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43781 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43782 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43783 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43784                                  
 43785                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43786 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43787 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43788                                  ; end warning
 43789                                   
 43790 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43791                                  
 43792 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43793 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43794 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43795 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43796 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43797 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43798                                  ;				; F.C. 2/17/86
 43799 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43800 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43801                                  ;align 2
 43802                                  SWAP_ALWAYS:	; 05/08/2018
 43803 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43804                                  				;   extended error type stuff.
 43805                                  				;   NOTE: does not have Correct value on
 43806                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43807                                  				;   GetExtendedError system calls)
 43808 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43809 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43810 00000340 0000                    FirstArena:	dw 0		; first free block found
 43811 00000342 0000                    BestArena:	dw 0		; best free block found
 43812 00000344 0000                    LastArena:	dw 0		; last free block found
 43813 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43814 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43815 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43816 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43817 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43818 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43819 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43820                                  
 43821                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43822                                  	;EVEN
 43823 0000034F 90                      align 2
 43824                                  		; DOSDATA:0350h (MSDOS 6.21)
 43825 00000350 00                      DAY:		db 0		; Day of month
 43826 00000351 00                      MONTH:		db 0		; Month of year
 43827 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43828 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43829 00000356 00                      WEEKDAY:	db 0		; Day of week
 43830                                  ; end warning
 43831                                  
 43832 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43833 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43834 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43835                                  
 43836                                  ; Combination of all device call parameters
 43837                                  	;PUBLIC	DEVCALL 	;
 43838                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43839                                  DEVCALL: ; 08/08/2018
 43840 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43841 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43842 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43843 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43844 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43845                                  
 43846                                  	;PUBLIC	CALLUNIT
 43847                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43848                                  CALLFLSH: ; LABEL   WORD	;
 43849 00000367 00                      CALLMED:	db 0		; media byte
 43850                                  CALLBR:	  ; LABEL   DWORD	;
 43851                                  	;PUBLIC	CALLXAD 	;
 43852                                  CALLXAD:  ; LABEL   DWORD	;
 43853 00000368 00                      CALLRBYT:	db 0		;
 43854                                  	;PUBLIC	CALLVIDM	;
 43855                                  CALLVIDM: ; LABEL   DWORD	;
 43856 00000369 00<rep 3h>              	times 3 db 0	;
 43857                                  	;PUBLIC CallBPB		;
 43858                                  CALLBPB:  ; LABEL   DWORD	;
 43859                                  CALLSCNT:			;
 43860 0000036C 0000                    		dw 0		;
 43861                                  	;PUBLIC	CALLSSEC	;
 43862                                  CALLSSEC: ; LABEL   WORD	;
 43863 0000036E 0000                    		dw 0		;
 43864 00000370 00000000                CALLVIDRW:	dd 0		;
 43865                                  ;MSDOS 6.0
 43866 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43867 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43868                                  
 43869                                  ; Same as above for I/O calls	;
 43870                                  				;
 43871                                  	;PUBLIC	IOCall		;
 43872                                  ;IOCALL	SRHEAD	<>		;
 43873                                  IOCALL:	; 07/08/2018
 43874 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43875 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43876 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43877 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43878 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43879                                  IOFLSH:	  ; LABEL   WORD	;
 43880                                          ;PUBLIC  IORCHR		;
 43881                                  IORCHR:	  ; LABEL   BYTE	;
 43882 00000389 00                      IOMED:		db 0		;
 43883 0000038A 00000000                IOXAD:		dd 0		;
 43884 0000038E 0000                    IOSCNT:		dw 0		;	
 43885 00000390 0000                    IOSSEC:		dw 0		;
 43886                                  
 43887                                  ; Call struct for DSKSTATCHK	;
 43888 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43889 00000393 00                      		db 0
 43890 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43891 00000395 0000                    DSKSTST:	dw 0		;
 43892 00000397 00<rep 8h>              	times 8	db 0		;
 43893 0000039F 00                      DSKCHRET:	db 0		;
 43894                                  
 43895                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43896                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43897                                  ;hkn   short_addr  DEVIOBUF	;
 43898                                  	
 43899 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43900 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43901 000003A4 0100                    DSKSTCNT:	dw 1		;
 43902 000003A6 0000                    		dw 0		;
 43903                                  
 43904 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43905                                  
 43906                                  ;MSDOS 6.0
 43907                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43908 000003A9 00000000                		dd 0		;MS. position
 43909 000003AD 00000000                		dd 0		;MS. length
 43910                                  
 43911                                  ;hkn; the foll. was moved from dosmes.asm.
 43912                                  
 43913                                  	;EVEN
 43914 000003B1 90                      align 2				; needed to maintain offsets
 43915                                  
 43916                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43917                                  USERNUM:
 43918 000003B2 0000                     		dw 0		; 24 bit user number
 43919 000003B4 00                      		db 0
 43920                                  ;IF IBM
 43921                                  ;IF IBMCOPYRIGHT
 43922                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43923                                  ;ELSE
 43924                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43925                                  ;ENDIF
 43926                                  ;ELSE
 43927 000003B5 FF                      OEMNUM:		DB 0FFh
 43928                                  ;ENDIF
 43929                                  
 43930                                  ;============================================================================
 43931                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43932                                  ;============================================================================
 43933                                  ; 25/04/2019 - Retro DOS 4.0
 43934                                  
 43935                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43936                                  ; ----------------------------------------------------------
 43937                                  ; This data section which was named as uninitialized data
 43938                                  ; (as overlayed by initialization code) but follows 
 43939                                  ; initialized data section from DOSDATA:03B6h address
 43940                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43941                                  ; and there is not overlaying..)
 43942                                  ; **********************************************************
 43943                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43944                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43945                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43946                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43947                                  ; TIMEBUF is at offset 03B6h.
 43948                                  ; **********************************************************	
 43949                                  
 43950                                  ;Break <Uninitialized data overlayed by initialization code>
 43951                                  ;----------------------------------------------------------------------------
 43952                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43953                                  ; Init code overlaps with data area below
 43954                                  
 43955                                  ; 	ORG     0
 43956                                  
 43957                                  MSDAT001S:	; label byte
 43958                                  
 43959                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43960                                  TIMEBUF: ;	times 6 db 0
 43961 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43962 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43963                                  
 43964                                  ; The following areas are used as temp buffer in EXEC system call
 43965                                  
 43966                                  ; DOSDATA:03BEh
 43967                                  OPENBUF: ;times 64  dw	0
 43968 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43969                                  RENBUF:	
 43970 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43971                                  
 43972                                  ; Buffer for search calls
 43973                                  SEARCHBUF:	
 43974 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43975                                  DUMMYCDS:  ;times 88 db 0
 43976 000004F3 00<rep 58h>             	times	curdirLen db 0
 43977                                  
 43978                                  ; End of contiguous buffer
 43979                                   
 43980                                  ; Temporary directory entry for use by many routines. Device directory
 43981                                  ; entries (bogus) are built here.
 43982                                  
 43983                                  ; DOSDATA:054Bh
 43984                                  
 43985                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43986                                  
 43987                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43988                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43989                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43990                                  
 43991                                  NAME1:	
 43992 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43993                                  NAME2:
 43994 00000557 00<rep Dh>              	times	13 db	0 		;
 43995                                  DESTSTART:
 43996 00000564 0000                    	dw	0			;
 43997                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43998                                  	;times	5  db	0
 43999 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 44000                                  
 44001                                  ; End Temporary directory entry.
 44002                                  
 44003 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 44004                                  EXTFCB:	
 44005 0000056C 00                      	db	0		; TRUE => extended FCB in use
 44006                                  SATTRIB:
 44007 0000056D 00                      	db	0		; Storage for search attributes
 44008                                  OPEN_ACCESS:
 44009 0000056E 00                      	db	0		; access of open system call
 44010                                  FOUNDDEL:
 44011 0000056F 00                      	db	0		; true => file was deleted
 44012                                  FOUND_DEV:
 44013 00000570 00                      	db	0		; true => search found a device
 44014                                  FSPLICE:
 44015 00000571 00                      	db	0		; true => do a splice in transpath
 44016                                  FSHARING:
 44017 00000572 00                      	db	0		; TRUE => no redirection
 44018                                  SECCLUSPOS:
 44019 00000573 00                      	db	0		; Position of first sector within cluster
 44020 00000574 00                      TRANS:	db	0		;
 44021 00000575 00                      READOP:	db	0		;
 44022                                  THISDRV:
 44023 00000576 00                      	db	0		;
 44024                                  CLUSFAC:
 44025 00000577 00                      	db	0		;
 44026                                  CLUSSPLIT:
 44027 00000578 00                      	db	0		;
 44028                                  INSMODE:
 44029 00000579 00                      	db	0		; true => insert mode in buffered read
 44030 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 44031 0000057B 00                      VOLID:	db	0		;
 44032                                  EXIT_TYPE:
 44033 0000057C 00                      	db	0		; type of exit...
 44034                                   
 44035                                  	;EVEN
 44036                                  
 44037 0000057D 90                      align 2
 44038                                  
 44039                                  ; DOSDATA:057Eh
 44040                                  
 44041                                  ; WARNING - the following two items are accessed as a word
 44042                                  
 44043                                  CREATING:
 44044 0000057E 00                      	db	0		; true => creating a file
 44045 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 44046                                  				; = DIRFREE iff BUGBUG
 44047                                  EXITHOLD:
 44048 00000580 00000000                	dd	0		; Temp location for proc terminate
 44049                                  USER_SP:
 44050 00000584 0000                    	dw	0		; User SP for system call
 44051                                  USER_SS:
 44052 00000586 0000                    	dw	0		; User SS for system call
 44053                                  CONTSTK:
 44054 00000588 0000                    	dw	0		;
 44055                                  THISDPB:
 44056 0000058A 00000000                	dd	0		;
 44057                                  CLUSSAVE:
 44058 0000058E 0000                    	dw	0		;
 44059                                  CLUSSEC:
 44060 00000590 00000000                	dd	0		;>32mb			AC0000
 44061                                  PREREAD:
 44062 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 44063 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 44064                                  FATBYTE:
 44065 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 44066                                  ; DOSDATA:059Ah
 44067 0000059A 00000000                DEVPT:	dd	0		;
 44068                                  THISSFT:
 44069 0000059E 00000000                	dd	0		; Address of user SFT
 44070                                  THISCDS:
 44071 000005A2 00000000                	dd	0		; Address of current CDS
 44072                                  THISFCB:
 44073 000005A6 00000000                	dd	0		; Address of user FCB
 44074 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 44075 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 44076 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 44077                                  WFP_START:
 44078 000005B2 0000                    	dw	0		;
 44079                                  REN_WFP:
 44080 000005B4 0000                    	dw	0		;
 44081                                  CURR_DIR_END:
 44082 000005B6 0000                    	dw	0		;
 44083                                  NEXTADD:
 44084 000005B8 0000                    	dw	0		;
 44085                                  LASTPOS:
 44086 000005BA 0000                    	dw	0		;
 44087                                  CLUSNUM:
 44088 000005BC 0000                    	dw	0		;
 44089 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 44090                                  DIRSTART:
 44091 000005C2 0000                    	dw	0		;
 44092 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 44093 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 44094                                                                  ; sectors
 44095                                  BYTSECPOS:
 44096 000005CC 0000                    	dw	0		; Position of first byte within sector
 44097                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 44098 000005CE 0000<rep 2h>                    times	2 dw 0
 44099                                  BYTCNT1:
 44100 000005D2 0000                    	dw	0		; No. of bytes in first sector
 44101                                  BYTCNT2:
 44102 000005D4 0000                    	dw	0		; No. of bytes in last sector
 44103 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 44104                                  ; DOSDATA:05D8h
 44105                                  ENTFREE:
 44106 000005D8 0000                    	dw	0		;
 44107                                  ENTLAST:
 44108 000005DA 0000                    	dw	0		;
 44109                                  NXTCLUSNUM:
 44110 000005DC 0000                    	dw	0		;
 44111                                  GROWCNT:
 44112 000005DE 00000000                	dd	0		;
 44113 000005E2 00000000                CURBUF:	dd	0		;
 44114 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 44115 000005EA 0000                    SAVEBX:	dw	0		;
 44116 000005EC 0000                    SAVEDS:	dw	0		;
 44117                                  RESTORE_TMP:
 44118 000005EE 0000                    	dw	0		; return address for restore world
 44119 000005F0 0000                    NSS:	dw	0
 44120 000005F2 0000                    NSP:	dw	0
 44121                                  ; DOSDATA:05F4h
 44122                                  EXTOPEN_FLAG:
 44123 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 44124                                  EXTOPEN_ON:
 44125 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 44126                                  EXTOPEN_IO_MODE:
 44127 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 44128                                  SAVE_DI:
 44129 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 44130                                  SAVE_ES:
 44131 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 44132                                  SAVE_DX:
 44133 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 44134                                  SAVE_CX:
 44135 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 44136                                  SAVE_BX:
 44137 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 44138                                  SAVE_SI:
 44139 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 44140                                  SAVE_DS:
 44141 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 44142                                  
 44143                                  ; DOSDATA:0607h
 44144                                  
 44145                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 44146                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 44147                                  ; the high 16, the low 16 are still in the register.
 44148                                  
 44149                                  HIGH_SECTOR:	
 44150 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 44151                                  ;OffsetMagicPatch:
 44152                                  ;	dw	MagicPatch ;scottq 8/6/92
 44153                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44154 00000609 0000                    	dw	0
 44155                                  				;see dos\mpatch.asm
 44156                                  DISK_FULL:
 44157 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 44158                                  TEMP_VAR:
 44159 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 44160                                  TEMP_VAR2:
 44161 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 44162 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 44163                                  DOS34_FLAG:
 44164 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 44165                                  NO_FILTER_PATH:
 44166 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 44167                                  NO_FILTER_DPATH:
 44168 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 44169                                  ; M008
 44170                                  AbsRdWr_SS:
 44171 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 44172                                  AbsRdWr_SP:
 44173 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 44174                                  
 44175                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 44176                                  ; M008
 44177                                   
 44178                                   
 44179                                  ; make those pushes fast!!!
 44180                                  
 44181                                  ;EVEN
 44182                                  
 44183 0000061F 90                      align 2
 44184                                  
 44185                                  StackSize   equ 180h  ; 384	; gross but effective
 44186                                  
 44187                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 44188                                  ;				; made up their minds about
 44189                                   
 44190                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 44191                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 44192                                  
 44193                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 44194                                   
 44195 00000620 00<rep 180h>                    times	StackSize db	0	;
 44196                                  AUXSTACK:			; LABEL   BYTE
 44197                                   
 44198 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 44199                                  DSKSTACK:			; LABEL   BYTE
 44200                                   
 44201 00000920 00<rep 180h>                    times	StackSize db	0	;
 44202                                  IOSTACK:			; LABEL   BYTE
 44203                                  
 44204                                  ; DOSDATA:0AA0h 
 44205                                   
 44206                                  ; patch space for Boca folks.
 44207                                  ; Say What????!!! This does NOT go into the swappable area!
 44208                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 44209                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 44210                                   
 44211                                  IBMPATCH: ; label byte
 44212                                  PRINTER_FLAG:
 44213 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 44214                                  VOLCHNG_FLAG:
 44215 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 44216                                  VIRTUAL_OPEN:
 44217 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 44218                                   
 44219                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 44220                                  
 44221                                  FSeek_drive:
 44222 00000AA3 00                      	db	0		;AN000; fastseek drive #
 44223                                  FSeek_firclus:
 44224 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 44225                                  FSeek_logclus:
 44226 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 44227                                  FSeek_logsave:
 44228 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 44229                                  
 44230                                  ; DOSDATA:0AAAh
 44231                                  
 44232                                  TEMP_DOSLOC:
 44233 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 44234                                  				;at SYSINIT time.
 44235                                  SWAP_END:  ; LABEL   BYTE
 44236                                   
 44237                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 44238                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44239                                  ; to include this byte.
 44240                                   
 44241 00000AAC 00                      	db	0
 44242                                  
 44243                                  ; DOSDATA:0AADh
 44244                                   
 44245                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44246                                  
 44247                                  ;DOSDATA    ENDS
 44248                                  
 44249                                  ;============================================================================
 44250                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44251                                  ;============================================================================
 44252                                  ; 27/04/2019 - Retro DOS 4.0
 44253                                  ; 16/07/2018 - Retro DOS 3.0
 44254                                  
 44255                                  ;DOSDATA Segment
 44256                                  
 44257                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44258                                  
 44259                                  ;
 44260                                  ; upper case table
 44261                                  ; ---------------------------------------------------------------------------
 44262                                  UCASE_TAB:	; label   byte
 44263 00000AAD 8000                    	dw	128
 44264 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44265 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44266 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44267 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44268 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44269 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44270 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44271 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44272 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44273 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44274 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44275 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44276 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44277 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44278 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44279 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44280                                  ;
 44281                                  ; file upper case table
 44282                                  ; ---------------------------------------------------------------------------
 44283                                  FILE_UCASE_TAB:	; label  byte
 44284 00000B2F 8000                    	dw	128
 44285 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44286 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44287 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44288 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44289 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44290 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44291 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44292 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44293 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44294 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44295 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44296 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44297 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44298 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44299 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44300 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44301                                  ;
 44302                                  ; file char list
 44303                                  ; ---------------------------------------------------------------------------
 44304                                  FILE_CHAR_TAB:	; label  byte
 44305 00000BB1 1600                    	dw	22				; length
 44306 00000BB3 0100FF                  	db	1,0,255 			; include all
 44307 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44308 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44308 00000BC2 7C3C3E2B3D3B2C     
 44309                                  	;db	24 dup (?)			; reserved
 44310 00000BC9 00<rep 18h>             	times	24 db 0
 44311                                  
 44312                                  ;
 44313                                  ; collate table
 44314                                  ; ---------------------------------------------------------------------------
 44315                                  COLLATE_TAB:	; label   byte
 44316 00000BE1 0001                    	dw	256
 44317 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44318 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44319 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44320 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44321 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44322 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44323 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44324 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44325 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44326 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44327 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44328 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44329 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44330 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44331 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44332 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44333 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44334 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44335 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44336 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44337 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44338 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44339 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44340 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44341 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44342 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44343 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44344 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44345 00000CC3 E053                    	db	224,"S"
 44346 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44347 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44348 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44349 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44350                                  
 44351                                  ; ------------------------------------------------<MSKK01>----------------------
 44352                                  
 44353                                  ; DOSDATA:0CE3h
 44354                                  
 44355                                  ; 29/04/2019
 44356                                  
 44357                                  ; dbcs is not supported in DOS 3.3
 44358                                  ;		   DBCS_TAB	    CC_DBCS <>
 44359                                  ;
 44360                                  ; DBCS for DOS 4.00			   2/12/KK
 44361                                  
 44362                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44363                                  ; ------------------------------------------------<MSKK01>----------------------
 44364                                  ;ifdef	DBCS
 44365                                  ; ifdef	  JAPAN
 44366                                  ;		dw	6		; <MSKK01>
 44367                                  ;		db	081h,09fh	; <MSKK01>
 44368                                  ;		db	0e0h,0fch	; <MSKK01>
 44369                                  ;		db	0,0		; <MSKK01>
 44370                                  ;
 44371                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44372                                  ; endif
 44373                                  ; ifdef	  TAIWAN
 44374                                  ;		dw	4		; <TAIWAN>
 44375                                  ;		db	081h,0FEh	; <TAIWAN>
 44376                                  ;		db	0,0		; <TAIWAN>
 44377                                  ;
 44378                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44379                                  ; endif
 44380                                  ; ifdef   KOREA                         ; Keyl
 44381                                  ;               dw      4               ; <KOREA>
 44382                                  ;               db      0A1h,0FEh       ; <KOREA>
 44383                                  ;               db      0,0             ; <KOREA>
 44384                                  ;
 44385                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44386                                  ;  endif
 44387                                  ;else
 44388 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44389                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44390 00000CE5 00<rep 10h>             		times	16 db 0
 44391                                  
 44392                                  ;		dw	6		;  2/12/KK
 44393                                  ;		db	081h,09Fh	;  2/12/KK
 44394                                  ;		db	0E0h,0FCh	;  2/12/KK
 44395                                  ;		db	0,0		;  2/12/KK
 44396                                  ;
 44397                                  ;endif
 44398                                  ; ------------------------------------------------<MSKK01>----------------------
 44399                                  
 44400                                  ; DOSDATA:0CF5h
 44401                                  
 44402                                  ; ---------------------------------------------------------------------------
 44403                                  ;
 44404                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44405                                  ;     ENTRY: AL = Character to map
 44406                                  ;     EXIT:  AL = The converted character
 44407                                  ; Alters no registers except AL and flags.
 44408                                  ; The routine should do nothing to chars below 80H.
 44409                                  ; ---------------------------------------------------------------------------
 44410                                  ; Example:
 44411                                  
 44412                                  MAP_CASE:
 44413                                  ;Procedure MAP_CASE,FAR
 44414                                  
 44415 00000CF5 3C80                    	CMP	AL,80h
 44416 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44417 00000CF9 CB                      	RETF
 44418                                  Map1:
 44419 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44420 00000CFC 1E                      	PUSH	DS
 44421 00000CFD 53                      	PUSH	BX
 44422 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44423                                  FINISH:
 44424 00000D01 0E                      	PUSH	CS		;Move to DS
 44425 00000D02 1F                      	POP	DS
 44426 00000D03 D7                      	XLAT			;Get upper case character
 44427 00000D04 5B                      	POP	BX
 44428 00000D05 1F                      	POP	DS
 44429                                  L_RET:	
 44430 00000D06 CB                      	RETF
 44431                                  
 44432                                  ;EndProc MAP_CASE
 44433                                  
 44434                                  ; ---------------------------------------------------------------------------
 44435                                  
 44436                                  ; The variables for ECS version are moved here for the same data alignments
 44437                                  ; as IBM-DOS and MS-DOS.
 44438                                  
 44439                                  InterChar:
 44440 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44441                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44442                                  DUMMY:	; LABEL   WORD
 44443                                  InterCon:  
 44444 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44445                                  SaveCurFlg:
 44446 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44447                                  
 44448                                  ; ---------------------------------------------------------------------------
 44449                                  
 44450 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44451                                  redir_patch:
 44452 00000D0C 00                      	  db	0
 44453                                  
 44454                                  ; DOSDATA:0D0Dh
 44455                                  
 44456                                  Mark1:	; label byte
 44457                                  
 44458                                  ;IF2
 44459                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44460                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44461                                  ;	ENDIF
 44462                                  ;ENDIF
 44463                                  
 44464 00000D0D 00<rep 5h>              	  times 5 db 0
 44465                                  
 44466                                  ;############################################################################
 44467                                  ;
 44468                                  ; ** HACK FOR DOS 4.0 REDIR **
 44469                                  ; 
 44470                                  ; The redir requires the following:
 44471                                  ;
 44472                                  ;	MSVERS	offset D12H
 44473                                  ;	YRTAB	offset D14H
 44474                                  ; 	MONTAB	offset D1CH
 44475                                  ;
 44476                                  ; WARNING! WARNING!
 44477                                  ; 
 44478                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44479                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44480                                  ;
 44481                                  ; CURRENTLY MARK1 = 0D0DH
 44482                                  ;
 44483                                  ;############################################################################
 44484                                  
 44485                                  	;ORG	0D12h
 44486                                  
 44487                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44488                                  
 44489                                  	;db	6
 44490                                  	;db	20
 44491                                  
 44492                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44493                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44494 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44495 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44496                                  
 44497                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44498                                  ;
 44499                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44500                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44501                                  
 44502                                  ; Days in year
 44503                                  
 44504                                  YRTAB:   
 44505 00000D14 C8A6                    	DB	200,166			; Leap year
 44506 00000D16 C8A5                    	DB	200,165
 44507 00000D18 C8A5                    	DB	200,165
 44508 00000D1A C8A5                    	DB	200,165
 44509                                  
 44510                                  ; Days of each month
 44511                                  
 44512                                  MONTAB:        
 44513 00000D1C 1F                      	DB      31                      ; January
 44514                                  february:
 44515 00000D1D 1C                      	DB	28 			; February--reset each 
 44516                                  					; time year changes
 44517 00000D1E 1F                              DB      31                      ; March
 44518 00000D1F 1E                              DB      30                      ; April
 44519 00000D20 1F                              DB      31                      ; May
 44520 00000D21 1E                              DB      30                      ; June
 44521 00000D22 1F                              DB      31                      ; July
 44522 00000D23 1F                              DB      31                      ; August
 44523 00000D24 1E                              DB      30                      ; September
 44524 00000D25 1F                              DB      31                      ; October
 44525 00000D26 1E                              DB      30                      ; November
 44526 00000D27 1F                              DB      31                      ; December
 44527                                  
 44528                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44529                                  
 44530                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44531                                  
 44532                                  SysInitTable:
 44533                                  	;dw	SYSINITVAR
 44534 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44535 00000D2A 0000                            dw      0		; segment
 44536 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44537 00000D2E 0000                            dw      0		; segment of pointer
 44538                                  
 44539                                  ; DOS 3.3 F.C. 6/12/86
 44540                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44541                                  
 44542                                  FastTable:				; a better name
 44543                                  FastOpenTable:
 44544 00000D30 0200                    	dw      2                       ; number of entries
 44545 00000D32 [ED12]                  	dw      FastRet			; pointer to ret instr.
 44546 00000D34 0000                    	dw      0                       ; and will be modified by
 44547 00000D36 [ED12]                  	dw      FastRet			; FASTxxx when loaded in
 44548 00000D38 0000                    	dw      0                       
 44549                                  
 44550                                  ; DOS 3.3 F.C. 6/12/86
 44551                                  
 44552                                  FastFlg:				; flags
 44553                                  FastOpenFlg:
 44554 00000D3A 00                      	db	0			; don't change the foll: order  
 44555                                  
 44556                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44557                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44558                                  ; or filled by FastOPen when calling FastOpen Lookup
 44559                                  
 44560                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44561                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44562                                  	;times	11 db 0
 44563 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44564                                  
 44565                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44566                                  ; when calling FastOpen Lookup
 44567                                  
 44568                                  Dir_Info_Buff:	; label  byte
 44569                                  	;db   	SIZE dir_entry dup (0)
 44570                                  	;times	32 db 0
 44571 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44572                                  
 44573                                  Next_Element_Start:
 44574 00000D66 0000                    	dw	0			; save next element start offset
 44575                                  Del_ExtCluster:
 44576 00000D68 0000                    	dw	0			; for dos_delete                       
 44577                                  
 44578                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44579                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44580                                  ; not to destroy the INT 21 stack saved for the user.
 44581                                  
 44582                                  USER_SP_2F:	; LABEL  WORD
 44583 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44584                                  
 44585                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44586                                  DOS_TEMP:	; label  word		; temporary word
 44587                                  FAKE_STACK_2F:  
 44588                                  	; dw  14 dup (0)		; 12 register temporary storage
 44589 00000D6C 0000<rep Eh>            	times 14 dw 0
 44590                                  
 44591                                  Hash_Temp: 	;label  word		; temporary word             
 44592                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44593 00000D88 0000<rep 4h>            	times 4 dw 0
 44594                                              	
 44595                                  SCAN_FLAG:	
 44596 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44597                                  DATE_FLAG:
 44598 00000D91 0000                    	dw     0                	; flag to update the date
 44599                                  
 44600                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44601 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44602                                  
 44603                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44604 00000D95 00000000                	dd     0               		; for extended error                   
 44605 00000D99 00000000                	dd     0			; for parser                           
 44606 00000D9D 00000000                	dd     0			; for critical errror                  
 44607 00000DA1 00000000                	dd     0			; for IFS                              
 44608 00000DA5 00000000                	dd     0			; for code reduction                   
 44609                                  
 44610                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44611 00000DA9 FFFFFFFF                	dd     -1                                                        
 44612                                  SC_SECTOR_SIZE:
 44613 00000DAD 0000                    	dw	0			; sector size for SC                 
 44614                                  SC_DRIVE:
 44615 00000DAF 00                      	db	0			; drive # for secondary cache        
 44616                                  CurSC_DRIVE:
 44617 00000DB0 FF                      	db	-1			; current SC drive                   
 44618                                  CurSC_SECTOR:
 44619 00000DB1 00000000                	dd	0			; current SC starting sector         
 44620                                  SC_STATUS:
 44621 00000DB5 0000                    	dw	0			; SC status word                     
 44622                                  SC_FLAG:
 44623 00000DB7 00                      	db	0			; SC flag                            
 44624                                  AbsDskErr:
 44625 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44626                                                                                            
 44627                                  NO_NAME_ID:	; label byte                                                           
 44628 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44628 00000DC3 2020               
 44629                                  
 44630                                  ;hkn; moved from TABLE segment in kstrin.asm
 44631                                  
 44632                                  KISTR001S:	; label	byte		; 2/17/KK
 44633 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44634                                  KISTR001E:	; label	byte		; 2/17/KK
 44635                                  
 44636                                  ; the nul device driver used to be part of the code. However, since the 
 44637                                  ; header is in the data, and the entry points are only given as an offset,
 44638                                  ; the strategy and interrupt entry points must also be in the data now.
 44639                                  
 44640                                  ; DOSDATA:0DC6h
 44641                                  
 44642                                  SNULDEV:
 44643                                  ;procedure snuldev,far
 44644                                  	;or	word [es:bx+3],100h
 44645                                  	; 17/12/2022
 44646                                  	;or	byte [es:bx+4],01h
 44647 00000DC6 26804F0401              	or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44648                                  	;or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44649                                  INULDEV:
 44650 00000DCB CB                      	retf				; must not be a return!
 44651                                  ;endproc snuldev
 44652                                  
 44653                                  ;M044
 44654                                  ; Second part of save area for saving last para of Windows memory
 44655                                  
 44656                                  WinoldPatch2:
 44657                                  	;db	8 dup (?)	; M044
 44658 00000DCC 00<rep 8h>              	times	8 db 0	
 44659                                  UmbSave2:
 44660                                  	;db	5 dup (?)	; M062
 44661 00000DD4 00<rep 5h>              	times	5 db 0
 44662                                  UmbSaveFlag:
 44663 00000DD9 00                      	db	0		; M062
 44664                                  
 44665                                  ; DOSDATA:0DDBh
 44666                                  
 44667                                  Mark2:	; label byte
 44668                                  
 44669                                  ;IF2
 44670                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44671                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44672                                  ;	ENDIF
 44673                                  ;ENDIF
 44674                                  
 44675                                  ;############################################################################
 44676                                  ;
 44677                                  ; ** HACK FOR DOS 4.0 REDIR **
 44678                                  ; 
 44679                                  ; The redir requires the following:
 44680                                  ;
 44681                                  ;	ERR_TABLE_21	offset DDBH
 44682                                  ;	ERR_TABLE_24	offset E5BH
 44683                                  ; 	ErrMap24	offset EABH
 44684                                  ;
 44685                                  ; WARNING! WARNING!
 44686                                  ;
 44687                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44688                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44689                                  ;
 44690                                  ; CURRENTLY MARK2 = 0DD0H
 44691                                  ;
 44692                                  ;############################################################################
 44693                                  
 44694                                  	;ORG	0DDBh
 44695                                  
 44696                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44697                                  
 44698                                  ; ---------------------------------------------------------------------------
 44699                                  ;
 44700                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44701                                  ; errors. Each entry is 4 bytes long:
 44702                                  ;
 44703                                  ;       Err#,Class,Action,Locus
 44704                                  ;
 44705                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44706                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44707                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44708                                  ;
 44709                                  ; ---------------------------------------------------------------------------
 44710                                  
 44711                                  ;ErrTab  Macro   err,class,action,locus
 44712                                  ;ifidn <locus>,<0FFh>
 44713                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44714                                  ;ELSE
 44715                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44716                                  ;ENDIF
 44717                                  ;ENDM
 44718                                  
 44719                                  ERR_TABLE_21: ; LABEL   BYTE
 44720 00000DDA 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44721 00000DDE 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44722 00000DE2 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44723 00000DE6 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44724 00000DEA 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44725 00000DEE 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44726 00000DF2 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44727 00000DF6 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44728 00000DFA 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44729 00000DFE 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44730 00000E02 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44731 00000E06 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44732 00000E0A 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44733 00000E0E 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44734 00000E12 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44735 00000E16 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44736 00000E1A 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44737 00000E1E 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44738 00000E22 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44739 00000E26 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44740 00000E2A 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44741 00000E2E 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44742 00000E32 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44743 00000E36 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44744 00000E3A 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44745 00000E3E 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44746 00000E42 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44747 00000E46 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44748                                      ; MSDOS 6.0
 44749 00000E4A 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44750 00000E4E 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44751 00000E52 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44752 00000E56 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44753                                  
 44754                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44755                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44756                                  ;		db 2,8,3,2
 44757                                  ;		db 3,8,3,2
 44758                                  ;		db 4,1,4,1
 44759                                  ;		db 5,3,3,0FFh
 44760                                  ;		db 6,7,4,1
 44761                                  ;		db 7,7,5,5
 44762                                  ;		db 8,1,4,5
 44763                                  ;		db 9,7,4,5
 44764                                  ;		db 0Ah,7,4,5
 44765                                  ;		db 0Bh,9,3,1
 44766                                  ;		db 0Ch,7,4,1
 44767                                  ;		db 0Dh,9,4,1
 44768                                  ;		db 0Fh,8,3,2
 44769                                  ;		db 10h,3,3,2
 44770                                  ;		db 11h,0Dh,3,2
 44771                                  ;		db 12h,8,3,2
 44772                                  ;		db 50h,0Ch,3,2
 44773                                  ;		db 20h,0Ah,2,2
 44774                                  ;		db 21h,0Ah,2,2
 44775                                  ;		db 54h,1,4,0FFh
 44776                                  ;		db 56h,3,3,1
 44777                                  ;		db 52h,1,4,2
 44778                                  ;		db 32h,9,3,3
 44779                                  ;		db 55h,0Ch,3,3
 44780                                  ;		db 57h,9,3,1
 44781                                  ;		db 53h,0Dh,4,1
 44782                                  ;		db 24h,1,4,5
 44783                                  ; MSDOS 6.0 (MSDOS 6.21)
 44784                                  ;		db 26h,1,4,1
 44785                                  ;		db 27h,1,4,1
 44786                                  ;		db 5Ah,0Dh,4,2
 44787                                  ; MSDOS 6.0 & MSDOS 3.3
 44788                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44789                                  
 44790                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44791                                  
 44792                                  ; ---------------------------------------------------------------------------
 44793                                  ;
 44794                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44795                                  ; errors. Each entry is 4 bytes long:
 44796                                  ;
 44797                                  ;       Err#,Class,Action,Locus
 44798                                  ;
 44799                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44800                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44801                                  ; THE END.
 44802                                  ;
 44803                                  ; ---------------------------------------------------------------------------
 44804                                  
 44805                                  ERR_TABLE_24: ; LABEL   BYTE
 44806 00000E5A 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44807 00000E5E 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44808 00000E62 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44809 00000E66 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44810 00000E6A 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44811 00000E6E 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44812 00000E72 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44813 00000E76 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44814 00000E7A 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44815 00000E7E 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44816 00000E82 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44817 00000E86 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44818 00000E8A 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44819 00000E8E 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44820 00000E92 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44821 00000E96 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44822 00000E9A 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44823 00000E9E 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44824 00000EA2 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44825 00000EA6 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44826                                  
 44827                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44828                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44829                                  ;		db 14h,4,5,1
 44830                                  ;		db 15h,5,7,0FFh
 44831                                  ;		db 16h,4,5,1
 44832                                  ;		db 17h,0Bh,4,2
 44833                                  ;		db 18h,4,5,1
 44834                                  ;		db 19h,5,1,2
 44835                                  ;		db 1Ah,0Bh,7,2
 44836                                  ;		db 1Bh,0Bh,4,2
 44837                                  ;		db 1Ch,2,7,4
 44838                                  ;		db 1Dh,5,4,0FFh
 44839                                  ;		db 1Eh,5,4,0FFh
 44840                                  ;		db 1Fh,0Dh,4,0FFh
 44841                                  ;		db 20h,0Ah,2,2
 44842                                  ;		db 21h,0Ah,2,2
 44843                                  ;		db 22h,0Bh,7,2
 44844                                  ;		db 32h,9,3,3
 44845                                  ;		db 23h,7,4,1
 44846                                  ;		db 24h,1,4,5
 44847                                  ;		db 0FFh,0Dh,5,0FFh
 44848                                  
 44849                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44850                                  
 44851                                  ; ---------------------------------------------------------------------------
 44852                                  ;
 44853                                  ; We need to map old int 24 errors and device driver errors into the new set
 44854                                  ; of errors. The following table is indexed by the new errors
 44855                                  ;
 44856                                  ; ---------------------------------------------------------------------------
 44857                                  
 44858                                  ;Public  ErrMap24
 44859                                  ErrMap24: ; Label   BYTE
 44860 00000EAA 13                          DB  error_write_protect	; 0
 44861 00000EAB 14                          DB  error_bad_unit		; 1
 44862 00000EAC 15                          DB  error_not_ready		; 2
 44863 00000EAD 16                          DB  error_bad_command	; 3
 44864 00000EAE 17                          DB  error_CRC		; 4
 44865 00000EAF 18                          DB  error_bad_length	; 5
 44866 00000EB0 19                          DB  error_seek		; 6
 44867 00000EB1 1A                          DB  error_not_DOS_disk	; 7
 44868 00000EB2 1B                          DB  error_sector_not_found	; 8
 44869 00000EB3 1C                          DB  error_out_of_paper	; 9
 44870 00000EB4 1D                          DB  error_write_fault	; A
 44871 00000EB5 1E                          DB  error_read_fault	; B
 44872 00000EB6 1F                          DB  error_gen_failure	; C
 44873 00000EB7 1F                          DB  error_gen_failure	; D  RESERVED
 44874 00000EB8 1F                          DB  error_gen_failure	; E  RESERVED
 44875 00000EB9 22                          DB  error_wrong_disk	; F
 44876                                  
 44877                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44878                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44879                                  	
 44880                                  ErrMap24End: ; LABEL   BYTE
 44881                                  
 44882                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44883                                  
 44884                                  ; ---------------------------------------------------------------------------
 44885                                  
 44886                                  ; 27/04/2019 - Retro DOS v4.0
 44887                                  
 44888                                  FIRST_BUFF_ADDR:
 44889 00000EBA 0000                    	dw	0			; first buffer address               
 44890                                  SPECIAL_VERSION:
 44891 00000EBC 0000                    	dw	0			;AN006; used by INT 2F 47H
 44892                                  FAKE_COUNT:
 44893 00000EBE 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44894                                  OLD_FIRSTCLUS:
 44895 00000FBD 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44896                                  
 44897                                  ; ---------------------------------------------------------------------------
 44898                                  
 44899                                  ;smr; moved from TABLE segment in exec.asm
 44900                                  
 44901 00000FBF 0000                    exec_init_SP: dw 0
 44902 00000FC1 0000                    exec_init_SS: dw 0
 44903 00000FC3 0000                    exec_init_IP: dw 0
 44904 00000FC5 0000                    exec_init_CS: dw 0
 44905                                  
 44906                                  exec_signature:
 44907 00000FC7 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44908                                  exec_len_mod_512:
 44909 00000FC9 0000                    	dw	0	; low 9 bits of length
 44910                                  exec_pages:
 44911 00000FCB 0000                    	dw	0	; number of 512b pages in file
 44912                                  exec_rle_count:
 44913 00000FCD 0000                    	dw	0	; count of reloc entries
 44914                                  exec_par_dir:
 44915 00000FCF 0000                    	dw	0	; number of paragraphs before image
 44916                                  exec_min_BSS:
 44917 00000FD1 0000                    	dw	0	; minimum number of para of BSS
 44918                                  exec_max_BSS:
 44919 00000FD3 0000                    	dw	0	; max number of para of BSS
 44920                                  exec_SS:
 44921 00000FD5 0000                    	dw	0	; stack of image
 44922                                  exec_SP:
 44923 00000FD7 0000                    	dw	0	; SP of image
 44924                                  exec_chksum:
 44925 00000FD9 0000                    	dw	0	; checksum  of file (ignored)
 44926                                  exec_IP:
 44927 00000FDB 0000                    	dw	0	; IP of entry
 44928                                  exec_CS:
 44929 00000FDD 0000                    	dw	0	; CS of entry
 44930                                  exec_rle_table:
 44931 00000FDF 0000                    	dw	0	; byte offset of reloc table
 44932                                  
 44933                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44934                                  
 44935                                  ;smr; eom
 44936                                  
 44937                                  ; ---------------------------------------------------------------------------
 44938                                  
 44939                                  ;SR;
 44940                                  ; WIN386 instance table for DOS
 44941                                  
 44942                                  Win386_Info:
 44943 00000FE1 0300                    	db	3, 0
 44944 00000FE3 000000000000000000-     	dd	0, 0, 0
 44944 00000FEC 000000             
 44945 00000FEF [F30F]0000              	dw	Instance_Table, 0
 44946                                  
 44947                                  Instance_Table:
 44948 00000FF3 [2200]00000200          	dw	CONTPOS, 0, 2
 44949 00000FF9 [3200]00000400          	dw	BCON, 0, 4
 44950 00000FFF [F901]00000601          	dw	CARPOS, 0, 106h
 44951 00001005 [0003]00000100          	dw	CHARCO, 0, 1
 44952 0000100B [BF0F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44953 00001011 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44954 00001017 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44955 0000101D 00000000                	dw	0, 0
 44956                                  
 44957                                  ; M001; SR;
 44958                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44959                                  ; M001; some DOS variables. Note that the only really important variable in 
 44960                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44961                                  ; M001; which does not need to be done in DOS 5.0. 
 44962                                  
 44963                                  ; 29/12/2022
 44964                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 44965                                  
 44966                                  Win386_DOSVars:
 44967 00001021 05                      	db	5	;Major version 5 ; M001
 44968 00001022 00                      	db	0	;Minor version 0 ; M001
 44969 00001023 [EC05]                  	dw	SAVEDS	; M001
 44970 00001025 [EA05]                  	dw	SAVEBX	; M001
 44971 00001027 [2103]                  	dw	INDOS	; M001
 44972 00001029 [3E03]                  	dw	USER_ID	; M001
 44973 0000102B [1503]                  	dw	CritPatch ; M001
 44974 0000102D [8C00]                  	dw	UMB_HEAD ; M012
 44975                                  
 44976                                  ;SR;
 44977                                  ; Flag to indicate whether WIN386 is running or not
 44978                                  
 44979 0000102F 00                      IsWin386: db	0
 44980                                  
 44981                                  ;M018
 44982                                  ; This variable contains the path to the VxD device needed for Win386
 44983                                  
 44984 00001030 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44984 00001039 2E33383600         
 44985                                  
 44986                                  ;End WIN386 support
 44987                                  
 44988                                  ; ---------------------------------------------------------------------------
 44989                                  
 44990                                  ;SR;
 44991                                  ; These variables have been added for the special lie support for device
 44992                                  ;drivers.
 44993                                  ;
 44994                                  
 44995                                  DriverLoad:	
 44996 0000103E 01                      	db	1	;initialized to do special handling
 44997                                  BiosDataPtr:
 44998 0000103F 00000000                	dd	0
 44999                                  
 45000                                  ; 29/12/2022 - Retro DOS v4.1
 45001                                  %if 0
 45002                                  
 45003                                  ; 27/04/2019 - Retro DOS v4.0
 45004                                  ; 04/11/2022
 45005                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 45006                                  
 45007                                  ;------------------------------------------------------------------------
 45008                                  ; Patch for Sidekick
 45009                                  ;
 45010                                  ; A documented method for finding the offset of the Errormode flag in the 
 45011                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 45012                                  ; for the following sequence of instructions.
 45013                                  ;
 45014                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 45015                                  ;
 45016                                  ; The Offset of Errormode flag is 0320h
 45017                                  ;
 45018                                  ;------------------------------------------------------------------------
 45019                                  
 45020                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 45021                                  	db	075h, 0Ch			 ; jnz  NearLabel
 45022                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 45023                                  	db	0CDh, 028h			 ; int  28h
 45024                                  
 45025                                  ;--------------------------------------------------------------------------
 45026                                  ; Patch for PortOfEntry - M036
 45027                                  ;
 45028                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 45029                                  ; the offset of Errormode flag. The following patch is to support them in 
 45030                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 45031                                  ;
 45032                                  ;---------------------------------------------------------------------------
 45033                                  
 45034                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 45035                                  	db	075h, 037h			 ; jnz	NearLabel
 45036                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 45037                                  
 45038                                  %endif ; 29/12/2022
 45039                                  
 45040                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 45041                                  
 45042                                  ;--------------------------------------------------------------------------
 45043                                  
 45044                                  ;*** New FCB Implementation
 45045                                  ; This variable is used as a cache in the new FCB implementation to remember
 45046                                  ;the address of a local SFT that can be recycled for a regenerate operation
 45047                                  
 45048 00001043 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 45049                                  
 45050                                  ;DOSDATA ENDS
 45051                                  
 45052                                  ;============================================================================
 45053                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 45054                                  ;============================================================================
 45055                                  ; 27/04/2019 - Retro DOS 4.0
 45056                                  
 45057                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 45058                                  
 45059                                  ;---------------------------------------------------------------------------
 45060                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 45061                                  ;----------------------------------------------------------------------------
 45062                                  	
 45063                                  	;db	90h
 45064                                  
 45065                                  	;EVEN
 45066 00001047 90                      align 2
 45067                                  
 45068                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 45069                                  
 45070                                  DOSINTTABLE:	; LABEL	DWORD
 45071                                  
 45072                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 45073                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 45074                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 45075                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 45076                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 45077                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 45078                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 45079                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 45080                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 45081                                  	
 45082 00001048 [EB52]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 45083 0000104C [E002]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 45084 00001050 [0C03]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 45085 00001054 [3F05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 45086 00001058 [C605]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 45087 0000105C [2C62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 45088 00001060 [1507]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 45089 00001064 [E702]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 45090 00001068 [E602]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 45091                                  
 45092 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 45093 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 45094                                  
 45095                                  ;-------------------------------------------------------------------------
 45096                                  ;
 45097                                  ; LOW MEM STUB:
 45098                                  ;
 45099                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 45100                                  ; handled by DOS. This stub is installed if the user specifies that the 
 45101                                  ; DOS load in HIMEM. Each entry point does this.
 45102                                  ;
 45103                                  ; 	1. if jmp to 8 has been patched out
 45104                                  ;	   2. if A20 OFF
 45105                                  ;	      3. Enable A20
 45106                                  ;	   4. else 
 45107                                  ;	      5. just go to dos entry
 45108                                  ;	   6. endif
 45109                                  ;	7. else
 45110                                  ;	   8. just go to dos entry
 45111                                  ;	9. endif
 45112                                  ;
 45113                                  ;--------------------------------------------------------------------------
 45114                                  
 45115                                  ; 27/04/2019 - Retro DOS v4.0
 45116                                  
 45117                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 45118                                  
 45119                                  ;--------------------------------------------------------------------------
 45120                                  ;
 45121                                  ; DIVIDE BY 0 handler
 45122                                  ;
 45123                                  ;--------------------------------------------------------------------------
 45124                                  
 45125                                  ldivov:
 45126                                  	; The following jump, skipping the XMS calls will be patched to 
 45127                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45128                                  	; needed because the stub is installed even before the XMS driver
 45129                                  	; is loaded if the user specifies dos=high in the config.sys
 45130                                  i0patch:
 45131 00001070 EB03                    	jmp	short divov_cont	
 45132                                  
 45133 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45134                                  divov_cont:
 45135 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 45136                                  
 45137                                  ;------------------------------------------------------------------------
 45138                                  ;
 45139                                  ; INT 20 Handler
 45140                                  ;
 45141                                  ; Here we do not have to set up the stack to return here as the abort call
 45142                                  ; will return to the address after the int 21 ah=4b call. This would be the
 45143                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 45144                                  ; will be restored then.
 45145                                  ;
 45146                                  ;-------------------------------------------------------------------------
 45147                                  
 45148                                  lquit:
 45149                                  	; The following jump, skipping the XMS calls will be patched to 
 45150                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45151                                  	; needed because the stub is installed even before the XMS driver
 45152                                  	; is loaded if the user specifies dos=high in the config.sys
 45153                                  i20patch:
 45154 0000107A EB03                    	jmp	short quit_cont	
 45155                                  
 45156 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45157                                  quit_cont:
 45158 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 45159                                  
 45160                                  ;--------------------------------------------------------------------------
 45161                                  ;
 45162                                  ; INT 21 Handler
 45163                                  ;
 45164                                  ;--------------------------------------------------------------------------
 45165                                  
 45166                                  lcommand:
 45167                                  	; The following jump, skipping the XMS calls will be patched to 
 45168                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45169                                  	; needed because the stub is installed even before the XMS driver
 45170                                  	; is loaded if the user specifies dos=high in the config.sys
 45171                                  i21patch:
 45172 00001084 EB03                    	jmp	short command_cont	
 45173                                  
 45174 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45175                                  command_cont:
 45176 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 45177                                  
 45178                                  ;------------------------------------------------------------------------
 45179                                  ;
 45180                                  ; INT 25 
 45181                                  ;
 45182                                  ;----------------------------------------------------------------------------
 45183                                  
 45184                                  labsdrd:
 45185                                  	; The following jump, skipping the XMS calls will be patched to 
 45186                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45187                                  	; needed because the stub is installed even before the XMS driver
 45188                                  	; is loaded if the user specifies dos=high in the config.sys
 45189                                  i25patch:
 45190 0000108E EB03                    	jmp	short absdrd_cont	
 45191                                  
 45192 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45193                                  absdrd_cont:
 45194 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 45195                                  
 45196                                  ;-------------------------------------------------------------------------
 45197                                  ;
 45198                                  ; INT 26
 45199                                  ;
 45200                                  ;-----------------------------------------------------------------------
 45201                                  
 45202                                  labsdwrt:
 45203                                  	; The following jump, skipping the XMS calls will be patched to 
 45204                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45205                                  	; needed because the stub is installed even before the XMS driver
 45206                                  	; is loaded if the user specifies dos=high in the config.sys
 45207                                  i26patch:
 45208 00001098 EB03                    	jmp	short absdwrt_cont	
 45209                                  
 45210 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45211                                  absdwrt_cont:
 45212 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 45213                                  
 45214                                  ;------------------------------------------------------------------------
 45215                                  ;
 45216                                  ; INT 27
 45217                                  ;
 45218                                  ;-----------------------------------------------------------------------
 45219                                  
 45220                                  lstay_resident:
 45221                                  	; The following jump, skipping the XMS calls will be patched to 
 45222                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45223                                  	; needed because the stub is installed even before the XMS driver
 45224                                  	; is loaded if the user specifies dos=high in the config.sys
 45225                                  i27patch:
 45226 000010A2 EB03                    	jmp	short sr_cont	
 45227                                  
 45228 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45229                                  sr_cont:
 45230 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 45231                                  
 45232                                  ;-----------------------------------------------------------------------------
 45233                                  ;
 45234                                  ; INT 2f
 45235                                  ;
 45236                                  ;-------------------------------------------------------------------------
 45237                                  
 45238                                  lint2f:
 45239                                  	; The following jump, skipping the XMS calls will be patched to 
 45240                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45241                                  	; needed because the stub is installed even before the XMS driver
 45242                                  	; is loaded if the user specifies dos=high in the config.sys
 45243                                  i2fpatch:
 45244 000010AC EB03                    	jmp	short int2f_cont	
 45245                                  
 45246 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45247                                  int2f_cont:
 45248 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45249                                  
 45250                                  ;-----------------------------------------------------------------------------
 45251                                  ;
 45252                                  ; CPM entry
 45253                                  ;
 45254                                  ;------------------------------------------------------------------------
 45255                                  
 45256                                  lcall_entry:
 45257                                  	; The following jump, skipping the XMS calls will be patched to 
 45258                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45259                                  	; needed because the stub is installed even before the XMS driver
 45260                                  	; is loaded if the user specifies dos=high in the config.sys
 45261                                  cpmpatch:
 45262 000010B6 EB03                    	jmp	short callentry_cont	
 45263                                  
 45264 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45265                                  callentry_cont:
 45266 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45267                                  
 45268                                  ;--------------------------------------------------------------------------
 45269                                  
 45270                                  lirett:
 45271 000010C0 CF                      	iret
 45272                                  
 45273                                  ;---------------------------------------------------------------------------
 45274                                  ;
 45275                                  ; LowIntXX:
 45276                                  ;
 45277                                  ; Interrupts from DOS that pass control to a user program must be done from
 45278                                  ; low memory, as the user program may change the state of the A20 line or
 45279                                  ; they may require that the A20 line be OFF. The following piece of code is
 45280                                  ; far call'd from the following places in DOS:
 45281                                  ;
 45282                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45283                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45284                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45285                                  ;
 45286                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45287                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45288                                  ; before doing the ints and then do a far junp back into DOS.
 45289                                  ;
 45290                                  ;---------------------------------------------------------------------------
 45291                                  
 45292 000010C1 00000000                DosRetAddr23:	dd	0
 45293 000010C5 00000000                DosRetAddr24:	dd	0
 45294 000010C9 00000000                DosRetAddr28:	dd	0
 45295                                  
 45296                                  	; Execute int 23h from low memory
 45297                                  LowInt23:
 45298                                  					; save the return address that is on
 45299                                  					; the stack
 45300 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45301 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45302                                  
 45303 000010D7 CD23                    	int	23h			; ctrl C
 45304                                  					; turn on A20 it has been turned OFF
 45305                                  					; by int 28/23/24 handler.
 45306                                  
 45307 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45308                                  
 45309 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45310                                  
 45311                                  
 45312                                  	; Execute int 24h from low memory
 45313                                  LowInt24:
 45314                                  					; save the return address that is on
 45315                                  					; the stack
 45316 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45317 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45318                                  
 45319 000010EB CD24                    	int	24h			; crit error
 45320                                  					; turn on A20 it has been turned OFF
 45321                                  					; by int 28/23/24 handler.
 45322                                  
 45323 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45324                                  
 45325 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45326                                  
 45327                                  
 45328                                   
 45329                                  	; Execute int 28h from low memory
 45330                                  LowInt28:
 45331 000010F5 CD28                    	int	28h			; idle int
 45332                                  					; turn on A20 it has been turned OFF
 45333                                  					; by int 28/23/24 handler.
 45334                                  
 45335 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45336                                  
 45337 000010FA CB                      	retf
 45338                                  
 45339                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45340                                  
 45341                                  ;-------------------------------------------------------------------------
 45342                                  ;
 45343                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45344                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45345                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45346                                  ; This is so because exepac'd programs rely on address wrap.
 45347                                  ;
 45348                                  ;------------------------------------------------------------------------- 
 45349                                  
 45350                                  disa20_xfer:
 45351 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45352                                  
 45353                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45354                                  
 45355                                  	; DS:SI points to entry point
 45356                                  	; AX:DI points to initial stack
 45357                                  	; DX has PDB pointer
 45358                                  	; BX has initial AX value
 45359                                  
 45360 000010FE FA                      	cli
 45361 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45362                                  
 45363 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45364 00001107 89FC                    	mov	SP,DI			; and SP
 45365 00001109 FB                      	sti
 45366                                  
 45367 0000110A 1E                      	push	DS			; fake long call to entry
 45368 0000110B 56                      	push	SI
 45369 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45370 0000110E 8EDA                    	mov	DS,DX
 45371 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45372 00001112 CB                      	retf
 45373                                  
 45374                                  ;-------------------------------------------------------------------------
 45375                                  ;
 45376                                  ; M003:
 45377                                  ;
 45378                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45379                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45380                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45381                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45382                                  ; more info.	
 45383                                  ;
 45384                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45385                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45386                                  ; stack to avoid additional stack overhead for the user.
 45387                                  ;
 45388                                  ; -------------------------------------------------------------------------
 45389                                  
 45390                                  disa20_iret:
 45391 00001113 E82700                  	call	XMMDisableA20
 45392 00001116 FE0E[2103]              	dec	byte [INDOS]
 45393 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45394 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45395 00001122 89E5                    	mov	BP,SP
 45396                                  	;mov	[BP+user_env.user_AX],AL
 45397 00001124 884600                  	mov	[bp],al
 45398 00001127 A1[F205]                	mov	AX,[NSP]
 45399 0000112A A3[8405]                	mov	[USER_SP],AX
 45400 0000112D A1[F005]                	mov	AX,[NSS]
 45401 00001130 A3[8605]                	mov	[USER_SS],AX
 45402                                  
 45403 00001133 58                      	pop	AX			; restore user regs
 45404 00001134 5B                      	pop	BX
 45405 00001135 59                      	pop	CX
 45406 00001136 5A                      	pop	DX
 45407 00001137 5E                      	pop	SI
 45408 00001138 5F                      	pop	DI
 45409 00001139 5D                      	pop	BP
 45410 0000113A 1F                      	pop	DS
 45411 0000113B 07                      	pop	ES
 45412 0000113C CF                      	iret
 45413                                  
 45414                                  ;**************************************************************************
 45415                                  ;***	XMMDisableA20 - switch 20th address line			      
 45416                                  ;									      
 45417                                  ;	This routine is used to disable the 20th address line in 	      
 45418                                  ;	the system using XMM calls.					      
 45419                                  ;									      
 45420                                  ;	ENTRY	none		;ds = _DATA				      
 45421                                  ;	EXIT	A20 line disabled					      
 45422                                  ;	USES	NOTHING					      
 45423                                  ;									      
 45424                                  ;**************************************************************************
 45425                                  
 45426                                  XMMDisableA20:
 45427 0000113D 53                      	push	bx
 45428 0000113E 50                      	push	ax
 45429                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45430 0000113F B406                    	mov	ah,6
 45431 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45432 00001146 58                      	pop	ax
 45433 00001147 5B                      	pop	bx
 45434 00001148 C3                      	retn
 45435                                  
 45436                                  ; The entry point in the BIOS XMS driver is defined here.
 45437                                  
 45438                                  XMMcontrol:
 45439 00001149 00000000                	dd	0
 45440                                  
 45441                                  ;--------------------------------------------------------------------------
 45442                                  ;
 45443                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45444                                  ;									      
 45445                                  ;	This routine is used to query the A20 state in		 	      
 45446                                  ;	the system using XMM calls.					      
 45447                                  ;									      
 45448                                  ;	ENTRY: none		
 45449                                  ;
 45450                                  ;	EXIT : A20 will be ON
 45451                                  ;		
 45452                                  ; 	USES : NONE								      
 45453                                  ;									      
 45454                                  ;--------------------------------------------------------------------------
 45455                                  
 45456                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45457 0000114D 8000                    	dw	00080h
 45458 0000114F 0000                    	dw	00000h
 45459                                  
 45460                                  HighMemory:	; label dword
 45461 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45462 00001153 FFFF                    	dw	0FFFFh
 45463                                  
 45464                                  EnsureA20ON:
 45465 00001155 9C                      	pushf
 45466 00001156 1E                      	push    ds
 45467 00001157 06                      	push	es
 45468 00001158 51                      	push	cx
 45469 00001159 56                      	push	si
 45470 0000115A 57                      	push	di
 45471                                  
 45472 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45473 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45474 00001165 B90400                  	mov	cx,4
 45475 00001168 FC                      	cld
 45476 00001169 F3A7                    	repe    cmpsw
 45477                                  
 45478 0000116B 7407                    	jz	short EA20_OFF
 45479                                  EA20_RET:
 45480 0000116D 5F                      	pop	di
 45481 0000116E 5E                      	pop	si
 45482 0000116F 59                      	pop	cx
 45483 00001170 07                      	pop	es
 45484 00001171 1F                      	pop	ds
 45485 00001172 9D                      	popf
 45486 00001173 C3                      	retn
 45487                                  
 45488                                  EA20_OFF:
 45489                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45490                                  	; NOTE: ints are disabled at this point.
 45491                                  
 45492 00001174 53                      	push	bx
 45493 00001175 50                      	push	ax
 45494                                  
 45495 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45496 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45497 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45498 00001181 8CC8                    	mov	ax,cs
 45499 00001183 8ED0                    	mov	ss,ax
 45500 00001185 BC[A007]                	mov	sp,AUXSTACK
 45501                                  					; ss:sp -> DOSDATA:AuxStack
 45502                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45503 00001188 B405                    	mov	ah,5
 45504 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45505 0000118F 09C0                    	or	ax,ax
 45506 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45507                                  
 45508 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45509 00001197 8ED0                    	mov	ss,ax
 45510 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45511                                  
 45512 0000119E 58                      	pop	ax
 45513 0000119F 5B                      	pop	bx
 45514                                  
 45515 000011A0 EBCB                    	jmp	short EA20_RET
 45516                                  
 45517                                  XMMerror:				; M006 - Start
 45518 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45519 000011A4 CD10                    	int	10h
 45520 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45521 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45522 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45523 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45524 000011AE CD10                    	int	10h
 45525                                  XMMcont:
 45526 000011B0 B405                    	mov	ah,05h			; set display page
 45527 000011B2 30C0                    	xor	al,al			; page 0
 45528 000011B4 CD10                    	int	10h
 45529                                  	
 45530 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45531 000011B9 0E                      	push	cs
 45532 000011BA 1F                      	pop	ds
 45533 000011BB FC                      	cld				; clear direction flag
 45534                                  XMMprnt:
 45535 000011BC AC                      	lodsb
 45536 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45537 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45538 000011C1 B40E                    	mov	ah,0Eh
 45539 000011C3 BB0700                  	mov	bx,7
 45540 000011C6 CD10                    	int	10h
 45541 000011C8 EBF2                    	jmp	short XMMprnt
 45542                                  
 45543                                  XMMStall:
 45544 000011CA FB                      	sti				; allow the user to warm boot
 45545 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45546                                  
 45547                                  ;---------------------------------------------------------------------------
 45548                                  
 45549                                  ; 27/04/2019 - Retro DOS v4.0
 45550                                  
 45551                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45552                                  ALTAH	equ 0Ch
 45553                                  
 45554                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45555                                  ;table was different for this. Segments will be patched in at init time.
 45556                                  
 45557                                  OldInstanceJunk:
 45558 000011CD 7000                    	dw	70h	;segment of BIOS
 45559 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45560 000011D1 0600                    	dw	6	;5 instance items
 45561                                  
 45562                                  	;dw	0,offset dosdata:contpos, 2
 45563                                  	;dw	0,offset dosdata:bcon, 4
 45564                                  	;dw	0,offset dosdata:carpos,106h
 45565                                  	;dw	0,offset dosdata:charco, 1
 45566                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45567                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45568                                  
 45569 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45570 000011D9 0000[3200]0400          	dw	0,BCON,4
 45571 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45572 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45573 000011EB 0000[BF0F]2200          	dw	0,exec_init_SP,34
 45574 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45575                                  
 45576                                  ;---------------------------------------------------------------------------
 45577                                  
 45578                                  ; M021-
 45579                                  ;
 45580                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45581                                  ; 	takes control of the HMA. When running, this word is a reliable
 45582                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45583                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45584                                  
 45585                                  DosHasHMA:
 45586 000011F7 00                      	db	0
 45587                                  FixExePatch:
 45588 000011F8 0000                    	dw	0		; M012
 45589                                  ; 28/12/2022 - Retro DOS v4.1
 45590                                  ;RationalPatchPtr:
 45591                                  ;	dw	0		; M012
 45592                                  
 45593                                  ; End M021
 45594                                  
 45595                                  ;---------------------------------------------------------------------------
 45596                                  
 45597                                  ; 28/12/2022 - Retro DOS v4.1
 45598                                  %if 0
 45599                                  ; M020 Begin
 45600                                  
 45601                                  RatBugCode:	; proc	far
 45602                                  	push	cx
 45603                                  	mov	cx,[10h]
 45604                                  rbc_loop:
 45605                                  	;loop	$
 45606                                  	loop	rbc_loop
 45607                                  	pop	cx
 45608                                  	retf
 45609                                  		
 45610                                  ; M020 End
 45611                                  %endif
 45612                                  
 45613                                  ;---------------------------------------------------------------------------
 45614                                  	
 45615                                  UmbSave1:
 45616                                  	;db	11 dup (?)	; M023
 45617 000011FA 00<rep Bh>              	times	11 db 0	
 45618                                  
 45619                                  ; DOSDATA:122Ah
 45620                                  
 45621                                  Mark3:	; label byte
 45622                                  
 45623                                  ;IF2
 45624                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45625                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45626                                  ;	ENDIF
 45627                                  ;ENDIF
 45628                                  
 45629                                  ;############################################################################
 45630                                  ;
 45631                                  ; ** HACK FOR DOS 4.0 REDIR **
 45632                                  ;
 45633                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45634                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45635                                  ; COUNTRY_CDPG if it can. 
 45636                                  ;
 45637                                  ; MARK3 SHOULD NOT BE > 122AH 
 45638                                  ;
 45639                                  ; As of 9/6/90, this area is FULL!
 45640                                  ;
 45641                                  ;############################################################################
 45642                                   
 45643                                  	;ORG	0122Ah
 45644                                  
 45645                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45646                                  
 45647                                  ; The following table is used for DOS 3.3
 45648                                  ;DOS country and code page information is defined here for DOS 3.3.
 45649                                  ;The initial value for ccDosCountry is 1 (USA).
 45650                                  ;The initial value for ccDosCodepage is 850.
 45651                                  
 45652                                  ; country and code page information
 45653                                  ; ---------------------------------------------------------------------------
 45654                                  COUNTRY_CDPG:	; label  byte
 45655 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45656 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45656 00001216 53595300           
 45657                                  	;db   51 dup (?)
 45658 0000121A 00<rep 33h>             	times 51 db 0
 45659                                  ; ------------------------------------------------<MSKK01>-------------------
 45660                                  ;ifdef	DBCS
 45661                                  ;  ifdef JAPAN
 45662                                  ;	dw   932			; system code page id (JAPAN)
 45663                                  ;  endif
 45664                                  ;  ifdef TAIWAN
 45665                                  ;	dw   938			; system code page id (TAIWAN)
 45666                                  ;  endif
 45667                                  ;  ifdef KOREA
 45668                                  ;	dw   934			; system code page id (KOREA IBM)
 45669                                  ;  endif
 45670                                  ;else
 45671 0000124D B501                    	dw   437			; system code page id
 45672                                  ;endif
 45673                                  ; ------------------------------------------------<MSKK01>-------------------
 45674 0000124F 0600                    	dw   6				; number of entries
 45675 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45676 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45677 00001254 0000                    	dw   0				; segment of poiter
 45678 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45679 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45680 00001259 0000                    	dw   0				; segment of poiter
 45681 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45682 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45683 0000125E 0000                    	dw   0				; segment of poiter
 45684 00001260 06                      	db   SetCollate	; 6		; collate type
 45685 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45686 00001263 0000                    	dw   0				; segment of poiter
 45687 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45688 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45689 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45690 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45691 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45692                                  ; ------------------------------------------------<MSKK01>-------------------
 45693                                  ;ifdef	DBCS
 45694                                  ;	...... 
 45695                                  ;else
 45696 0000126D 0100                    	dw   1				; USA country id
 45697 0000126F B501                    	dw   437			; USA system code page id
 45698 00001271 0000                    	dw   0 				; date format
 45699 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45700 00001278 2C00                    	db   ',',0			; thousand separator
 45701 0000127A 2E00                    	db   '.',0			; decimal separator
 45702 0000127C 2D00                    	db   '-',0			; date separator
 45703 0000127E 3A00                    	db   ':',0			; time separator
 45704 00001280 00                      	db   0				; currency format flag
 45705 00001281 02                      	db   2				; # of digits in currency
 45706 00001282 00                      	db   0 				; time format
 45707 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45708 00001285 0000                    	dw   0				; segment of entry point
 45709 00001287 2C00                    	db   ',',0			; data list separator
 45710 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45710 00001292 00                 
 45711                                  ;endif
 45712                                  ; ------------------------------------------------<MSKK01>-------------------
 45713                                  
 45714                                  ; 27/04/2019 - Retro DOS v4.0
 45715                                  
 45716                                  ;include msdos.cl2			; XMMERRMSG
 45717                                  
 45718                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45719                                  
 45720                                  XMMERRMSG:
 45721 00001293 0D0A                    	db	0Dh,0Ah
 45722 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45722 0000129E 617265204572726F72-
 45722 000012A7 0D0A24             
 45723                                  
 45724                                  ; DOSDATA ends
 45725                                  
 45726                                  ; 05/11/2022
 45727                                  ;----------------------------------------------------------------------------
 45728                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45729                                  ;----------------------------------------------------------------------------
 45730                                  
 45731                                  ; 28/12/2022 - Retro DOS v4.1
 45732                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 45733                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 45734                                  ;----------------------------------------------------------------------------
 45735                                  %if 0
 45736                                  ;----------------------------------------------------------------------------
 45737                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45738                                  
 45739                                  ;============================================================================
 45740                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45741                                  ;============================================================================
 45742                                  ; 27/04/2019 - Retro DOS 4.0
 45743                                  
 45744                                  ;DOSDATA Segment
 45745                                  
 45746                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45747                                  
 45748                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45749                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45750                                  
 45751                                  ; first and second DOS patches
 45752                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45753                                  ;
 45754                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45755                                  ;	DVRDLP:
 45756                                  ;	DVWRTLP:
 45757                                  ;
 45758                                  ;
 45759                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45760                                  ;	lds	si,si+7 				  ; sf_devptr
 45761                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45762                                  
 45763                                  DOSP1_ID:	db	036h,0C5h,036h
 45764                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45765                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45766                                  
 45767                                  		db	90h, 90h
 45768                                  
 45769                                  DOSP12_ID:	db	036h,0C5h,036h
 45770                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45771                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45772                                  
 45773                                  ; DOSDATA:12E3h
 45774                                  
 45775                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45776                                  ;
 45777                                  ; Code in disk.asm, 1 location
 45778                                  ;	GETBUF:
 45779                                  ;
 45780                                  ; 051h	push	cx	<- begin special int28 mode
 45781                                  ;	push	es
 45782                                  ;	push	di
 45783                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45784                                  ;	call	????	; $STD_CON_STRING_INPUT
 45785                                  ;	pop	di
 45786                                  ;	pop	es
 45787                                  ; 059h	pop	cx	<- end special int28 mode
 45788                                  
 45789                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 45790                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45791                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45792                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45793                                  DOSP4_ID:	db	059h			; pop cx
 45794                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45795                                  	
 45796                                  ; DOSDATA:12EFh
 45797                                  
 45798                                  ; Fifth DOS patch - System call 40h (Write) to console
 45799                                  ;
 45800                                  ; Code in disk.asm, 1 location
 45801                                  ;
 45802                                  ;		push	cx
 45803                                  ;      WRCONLP: lodsb
 45804                                  ;		cmp	al,1Ah
 45805                                  ;		jz	????
 45806                                  ;		call	????	<- "simulate" int28 event
 45807                                  ;		loop	WRCONLP
 45808                                  ;      CONEOF:	pop	ax
 45809                                  
 45810                                  DOSP5_ID:	db	051h			; push cx
 45811                                  		db	0ACh,03Ch,01Ah,074h,005h
 45812                                  		db	0E8h			; call
 45813                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45814                                  
 45815                                  ; DOSDATA:12F6h
 45816                                  
 45817                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45818                                  ;
 45819                                  ; Code in disp.asm, 1 location
 45820                                  ;
 45821                                  ;
 45822                                  ;	mov [SaveDS],ds
 45823                                  ;	mov [SaveBX],bx
 45824                                  ;	mov bx,cs
 45825                                  ;	mov ds,bx
 45826                                  ;	inc [indos]
 45827                                  ;	xor ax,ax
 45828                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45829                                  
 45830                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45831                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45832                                  		db	02Eh,089h,01Eh
 45833                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45834                                  		db	08Ch,0CBh		; mov bx,cs
 45835                                  		db	08Eh,0DBh		; mov ds,bx
 45836                                  		db	0FEh,006h
 45837                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45838                                  		db	033h,0C0h		; xor ax,ax
 45839                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45840                                  
 45841                                  ; DOSDATA:130Ah
 45842                                  
 45843                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45844                                  ;
 45845                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45846                                  ;
 45847                                  ;
 45848                                  ;
 45849                                  ;	push	ax
 45850                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45851                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45852                                  ;	pop	ax
 45853                                  ;	jz	????
 45854                                  
 45855                                  DOSP8_ID:	db	050h			; push ax
 45856                                  		db	036h,0A1h
 45857                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45858                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45859                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45860                                  		db	02Fh,058h		; pop  ax
 45861                                  
 45862                                  ; DOSDATA:1314h
 45863                                  
 45864                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45865                                  ;
 45866                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45867                                  ;   a yeild when a character is not ready to be read.
 45868                                  ;
 45869                                  ; Code in disk.asm, 3 locations
 45870                                  ;
 45871                                  ;   DVRDRAW:
 45872                                  ;	    PUSH    ES
 45873                                  ;	    POP     DS
 45874                                  ;   ReadRawRetry:				<- Patch 10
 45875                                  ;	    MOV     BX,DI
 45876                                  ;	    XOR     AX,AX			<- Reenter #2
 45877                                  ;	    MOV     DX,AX
 45878                                  ;	    call    SETREAD
 45879                                  ;	    PUSH    DS				<- Reenter #1
 45880                                  ;	    LDS     SI,[THISSFT]
 45881                                  ;	    call    DEVIOCALL
 45882                                  ;	    MOV     DX,DI
 45883                                  ;	    MOV     AH,86H
 45884                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45885                                  ;	    TEST    DI,STERR
 45886                                  ;	    JZ	    CRDROK
 45887                                  ;	    call    CHARHARD
 45888                                  ;	    MOV     DI,DX
 45889                                  ;	    OR	    AL,AL
 45890                                  ;	    JZ	    CRDROK
 45891                                  ;	    CMP     AL,3
 45892                                  ;	    JZ	    CRDFERR
 45893                                  ;	    POP     DS
 45894                                  ;	    JMP     ReadRawRetry
 45895                                  ;
 45896                                  ;   CRDFERR:
 45897                                  ;	    POP     DI				<- Patch 11
 45898                                  ;   DEVIOFERR:
 45899                                  ;	    LES     DI,[THISSFT]
 45900                                  ;	    jmp     SET_ACC_ERR_DS
 45901                                  ;
 45902                                  ;   CRDROK:
 45903                                  ;	    POP     DI				<- Patch 12
 45904                                  ;	    MOV     DI,DX
 45905                                  ;	    ADD     DI,[CALLSCNT]
 45906                                  ;	    JMP     SHORT ENDRDDEVJ3
 45907                                  
 45908                                  DOSP10_ID:		db	006H,01FH
 45909                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45910                                  DOSP10_LOC:		db	08BH,0DFH
 45911                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45912                                  			db	033H,0C0H,08BH,0D0H,0E8H
 45913                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45914                                  			db	0DFH,00EH
 45915                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45916                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45917                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45918                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45919                                  			db	009H,003H
 45920                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45921                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45922                                  			db	01FH,0EBH,0CFH
 45923                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45924                                  			db	05FH
 45925                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45926                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45927                                  
 45928                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45929                                  			db	05FH,08BH,0FAH
 45930                                  ; DOSDATA:1353h
 45931                                  
 45932                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45933                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45934                                  ;
 45935                                  ;	    Sets focus to current VM so user can see fatal message.
 45936                                  ;
 45937                                  ;
 45938                                  ;	l0: lodsb		<- Setfocus here
 45939                                  ;	    cmp al, '$'
 45940                                  ;	    je l1
 45941                                  ;	    mov bl, 7
 45942                                  ;	    mov ah, 0Eh
 45943                                  ;	    int 10h
 45944                                  ;	    jmp l0
 45945                                  ;	l1: jmp $
 45946                                  
 45947                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 45948                                  		db	03Ch,024h		;     cmp al, '$'
 45949                                  		db	074h,008h		;     je l1
 45950                                  		db	0B3h,007h		;     mov bl, 7
 45951                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 45952                                  		db	0CDh,010h		;     int 10h
 45953                                  		db	0EBh,0F3h		;     jmp l0
 45954                                  		db	0EBh,0FEh		; l1: jmp $
 45955                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45956                                  
 45957                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45958                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45959                                  
 45960                                  ; 06/12/2022
 45961                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45962                                  
 45963                                  ; DOSDATA ends
 45964                                  
 45965                                  ;============================================================================
 45966                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45967                                  ;============================================================================
 45968                                  ; 27/04/2019 - Retro DOS 4.0
 45969                                  
 45970                                  ;mpatch.asm -- holds data patch location for callouts 
 45971                                  ; -- allocate cluster in rom.asm
 45972                                  ;
 45973                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45974                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45975                                  ; cluster allocation, however it can be expanded to be used by other
 45976                                  ; patches. This is important since we have an easy-access pointer to
 45977                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45978                                  ; only patch out a far call/retf, so any space after that could be
 45979                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45980                                  ; to call out here.
 45981                                  ;
 45982                                  ; Currently, we allocate only the minimum space required for the 6
 45983                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45984                                  ; to reserve space here if your new data will be position dependent
 45985                                  ; and would prohibit growing of this table.
 45986                                  ;       
 45987                                  ;history	-	created 8-7-92 by scottq
 45988                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45989                                  ;
 45990                                  ;Exported Functions
 45991                                  ;==================
 45992                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45993                                  
 45994                                  ; DosData Segment
 45995                                  
 45996                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45997                                  
 45998                                  ; ---------------------------------------------------------------------------
 45999                                  
 46000                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 46001                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 46002                                  ; greater). Added to this file because it needed to be somewhere and is
 46003                                  ; 'patch' related.
 46004                                  
 46005                                  Rational386PatchPtr:
 46006                                  	dw	0	; points to patch routine or RET instr.
 46007                                  ; ---------------------------------------------------------------------------
 46008                                  
 46009                                  MagicPatch:
 46010                                  ;MagicPatch proc far
 46011                                          retf            ;default is to just return to allocate
 46012                                          nop             ;however, this code will be patched
 46013                                          nop             ;by magicdrv.sys to
 46014                                          nop             ; call far ?:?     
 46015                                          nop             ; retf or perhaps just jmp far
 46016                                          nop             ;retf/nop take one byte, so we need six instructions
 46017                                                          ;for 6 byte patch
 46018                                  ;MagicPatch endp
 46019                                  
 46020                                  ; ---------------------------------------------------------------------------
 46021                                  
 46022                                  ;DosData Ends
 46023                                  
 46024                                  ; DOSDATA:136Ah
 46025                                  
 46026                                  ;----------------------------------------------------------------------------
 46027                                  
 46028                                  ;DOSDATALAST SEGMENT
 46029                                  
 46030                                  ; 29/04/2019 - Retro DOS v4.0
 46031                                  
 46032                                  ;----------------------------------------------------------------------------
 46033                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 46034                                  
 46035                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 46036                                  
 46037                                  ;align 16
 46038                                  
 46039                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 46040                                  
 46041                                  ;----------------------------------------------------------------------------
 46042                                  
 46043                                  %endif	; 05/11/2022
 46044                                  
 46045                                  ; 05/12/2022
 46046                                  ;MSDAT001E:	; label byte
 46047                                  
 46048                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 46049                                  DOSDATAEND equ $
 46050                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 46051                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 46052                                  
 46053                                  ;DOSDATALAST ENDS
 46054                                  
 46055                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 46056                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 46057                                  ;============================================================================
 46058                                  ;	END
 46059                                  ;============================================================================
 46060                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 46061                                  ; -----------------------------
 46062                                  ; MAY 2019, ISTANBUL - TURKIYE.
