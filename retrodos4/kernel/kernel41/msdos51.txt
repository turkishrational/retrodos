     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 29/12/2022 - Retro DOS v4.1 (Prev: 22/12/2022, Retro DOS v4.0)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.11 (2.15)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if consle input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5  are  the  block  device  number  for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9C077                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;22/12/2022
  3257                                  ;04/11/2022	
  3258                                  ;29/04/2019 - Retro DOS v4.0
  3259                                  ;============================================================================
  3260                                  ; 	Retro DOS v4.0
  3261                                  ;============================================================================
  3262 000000BE 00                      	db 	0
  3263                                  RETRODOSMSG:
  3264 000000BF 0D0A                    	db	13,10
  3265                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3266                                  	;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3267 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2022]" ; 28/12/2022
  3267 000000CA 2076342E3120627920-
  3267 000000D3 4572646F67616E2054-
  3267 000000DC 616E205B323032325D 
  3268 000000E5 0D0A2400                	db	13,10,"$", 0 
  3269                                  
  3270                                  ;============================================================================
  3271                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3272                                  ;============================================================================
  3273                                  ; 11/07/2018 - Retro DOS v3.0
  3274                                  
  3275                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3276 000000E9 90                      align 2
  3277                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3278                                  
  3279                                  ; Standard Functions
  3280                                  ;DISPATCH  LABEL WORD
  3281                                  DISPATCH:
  3282                                  	; 16/07/2018 - Retro DOS v3.0
  3283                                  	; (MSDOS 3.3)
  3284                                  
  3285                                  ; 29/04/2019
  3286                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3287                                  
  3288                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3289                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3290                                  
  3291 000000EA [ED62]                          short_addr  _$ABORT			    ;  0      0
  3292 000000EC [AB16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3293 000000EE [B416]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3294 000000F0 [6617]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3295 000000F2 [8117]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3296 000000F4 [8717]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3297 000000F6 [F215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3298 000000F8 [1E16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3299 000000FA [C213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3300 000000FC [1C14]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3301 000000FE [2814]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3302 00000100 [9B17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3303 00000102 [A517]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3304 00000104 [E40F]                          short_addr  _$DISK_RESET		    ; 13      D
  3305 00000106 [B90E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3306 00000108 [811E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3307 0000010A [4B18]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3308 0000010C [931F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3309 0000010E [2520]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3310 00000110 [EA17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3311 00000112 [7F1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3312 00000114 [841F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3313 00000116 [651F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3314 00000118 [BB18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3315                                  	; 16/07/2018
  3316                                          ;short_addr _CPMFUNC			    ; 24     18	
  3317 0000011A [6506]                          short_addr  NO_OP			    ; 24     18
  3318 0000011C [B40E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3319 0000011E [A90E]                          short_addr  _$SET_DMA			    ; 26     1A
  3320                                  
  3321                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3322                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3323                                  ;                                                                          ;
  3324 00000120 [700F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3325 00000122 [720F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3326                                  ;                                                                          ;
  3327                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3328                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3329                                  
  3330                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3331                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3332                                  
  3333                                  ; 08/07/2018 - Retro DOS v3.0
  3334                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3335                                  
  3336 00000124 [6506]                  	short_addr  NO_OP			    ; 29     1D
  3337 00000126 [6506]                  	short_addr  NO_OP			    ; 30     1E
  3338                                  
  3339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3341                                  ;                                                                          ;
  3342 00000128 [B40F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3343                                  ;                                                                          ;
  3344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3346                                          ;short_addr _CPMFUNC			    ; 32     20
  3347                                  
  3348                                  ; 08/07/2018 - Retro DOS v3.0
  3349                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3350                                  
  3351 0000012A [6506]                  	short_addr  NO_OP			    ; 32     20
  3352                                  
  3353 0000012C [891F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3354 0000012E [8E1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3355 00000130 [FC17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3356 00000132 [D217]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3357                                  
  3358                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3359                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3360                                  
  3361                                  ; Extended Functions
  3362 00000134 [DB0E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3363                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3364                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3365                                  ;                                                                          ;
  3366 00000136 [F010]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3367                                  ;                                                                          ;
  3368                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3369                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3370 00000138 [7A1F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3371 0000013A [751F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3372 0000013C [650F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3373 0000013E [7B0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3374 00000140 [980A]                          short_addr  _$SET_DATE                      ; 43     2B
  3375 00000142 [B70A]                          short_addr  _$GET_TIME                      ; 44     2C
  3376 00000144 [C80A]                          short_addr  _$SET_TIME                      ; 45     2D
  3377 00000146 [870C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3378                                  
  3379                                  ; Extended functionality group
  3380 00000148 [950E]                          short_addr  _$GET_DMA                       ; 47     2F
  3381 0000014A [5D0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3382 0000014C [9162]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3383                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3384                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3385                                  ;                                                                          ;
  3386 0000014E [B60F]                          short_addr  _$GET_DPB			    ; 50     32
  3387                                  ;                                                                          ;
  3388                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3389                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3390 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3391 00000152 [9C0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3392 00000154 [CB0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3393 00000156 [6C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3394 00000158 [090F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3395 0000015A [8E0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3396                                  ; XENIX CALLS
  3397                                  ;   Directory Group
  3398 0000015C [7F22]                          short_addr  _$MKDIR			    ; 57     39
  3399 0000015E [CB21]                          short_addr  _$RMDIR			    ; 58     3A
  3400 00000160 [0622]                          short_addr  _$CHDIR			    ; 59     3B
  3401                                  ;   File Group
  3402 00000162 [B570]                          short_addr  _$CREAT			    ; 60     3C
  3403 00000164 [DE6F]                          short_addr  _$OPEN			    ; 61     3D
  3404 00000166 [0A68]                          short_addr  _$CLOSE		 	    ; 62     3E
  3405 00000168 [1B69]                          short_addr  _$READ			    ; 63     3F
  3406 0000016A [8169]                          short_addr  _$WRITE			    ; 64     40
  3407 0000016C [0571]                          short_addr  _$UNLINK			    ; 65     41
  3408 0000016E [8669]                          short_addr  _$LSEEK			    ; 66     42
  3409 00000170 [C270]                          short_addr  _$CHMOD			    ; 67     43
  3410 00000172 [E022]                          short_addr  _$IOCTL			    ; 68     44
  3411 00000174 [3B6A]                          short_addr  _$DUP			    ; 69     45
  3412 00000176 [596A]                          short_addr  _$DUP2			    ; 70     46
  3413 00000178 [5C21]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3414                                  ;   Memory Group
  3415 0000017A [8463]                          short_addr  _$ALLOC			    ; 72     48
  3416 0000017C [FE64]                          short_addr  _$DEALLOC                       ; 73     49
  3417 0000017E [DA64]                          short_addr  _$SETBLOCK                      ; 74     4A
  3418                                  ;   Process Group
  3419 00000180 [655C]                          short_addr  _$EXEC			    ; 75     4B
  3420 00000182 [C962]                          short_addr  _$EXIT			    ; 76     4C
  3421 00000184 [5B5C]                          short_addr  _$WAIT			    ; 77     4D
  3422 00000186 [9820]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3423                                  ;   Special Group
  3424 00000188 [EE20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3425                                  ; SPECIAL SYSTEM GROUP
  3426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3427                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3428                                  ;                                                                          ;
  3429 0000018A [BD02]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3430 0000018C [C902]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3431 0000018E [A80F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3432 00000190 [1910]                          short_addr  _$SETDPB			    ; 83     53
  3433                                  ;                                                                          ;
  3434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3436 00000192 [820C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3437                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3438                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3439                                  ;                                                                          ;
  3440 00000194 [DF10]                          short_addr  _$DUP_PDB                       ; 85     55
  3441                                  ;                                                                          ;
  3442                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3443                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3444 00000196 [2B71]                          short_addr  _$RENAME			    ; 86     56
  3445 00000198 [ED69]                          short_addr  _$FILE_TIMES                    ; 87     57
  3446 0000019A [3465]                          short_addr  _$ALLOCOPER                     ; 88     58
  3447                                  
  3448                                  ; 08/07/2018 - Retro DOS v3.0
  3449                                  ; -------------------------------------------------------------------------;
  3450                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3451                                  
  3452                                  ; Network extention system calls
  3453 0000019C [1D0F]                          short_addr  _$GetExtendedError              ; 89     59
  3454 0000019E [B671]                          short_addr  _$CreateTempFile                ; 90     5A
  3455 000001A0 [9E71]                          short_addr  _$CreateNewFile                 ; 91     5B
  3456 000001A2 [9773]                          short_addr  _$LockOper                      ; 92     5C
  3457 000001A4 [1A66]                          short_addr  _$ServerCall                    ; 93     5D
  3458 000001A6 [236B]                          short_addr  _$UserOper                      ; 94     5E
  3459 000001A8 [886A]                          short_addr  _$AssignOper                    ; 95     5F
  3460 000001AA [786F]                          short_addr  _$NameTrans                     ; 96     60
  3461 000001AC [6506]                  	short_addr  NO_OP			    ; 97     61
  3462 000001AE [C902]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3463                                  ; the next call is reserved for hangool sys call
  3464                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3465 000001B0 [4A0F]                  	short_addr  _$ECS_Call			    ; 99     63
  3466                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3467                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3468                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3469                                  ;                                                                          ;
  3470 000001B2 [D502]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3471                                  ;                                                                          ;
  3472                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3473                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3474 000001B4 [190D]                          short_addr  _$GetExtCntry                   ; 101    65
  3475 000001B6 [180E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3476 000001B8 [5768]                          short_addr  _$ExtHandle                     ; 103    67
  3477 000001BA [3D68]                          short_addr  _$COMMIT                        ; 104    68
  3478                                  
  3479                                  ; 08/07/2018
  3480                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3481                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3482                                  
  3483                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3484 000001BC [E211]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3485 000001BE [3D68]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3486 000001C0 [6506]                  	short_addr  NO_OP                           ; 107    6B   
  3487                                  						    ; IFS_IOCTL no longer 
  3488                                  						    ; supported
  3489 000001C2 [4C72]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3490                                  
  3491                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3492                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3493                                  ;                                                                          ;
  3494                                  ;ifdef ROMEXEC
  3495                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3496                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3497                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3498                                  ;endif
  3499                                  ;                                                                          ;
  3500                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3501                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3502                                  
  3503                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3504                                  
  3505                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3506                                  
  3507                                  ; 08/07/2018 - Retro DOS v3.0
  3508                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3509                                  
  3510                                  ;	If 	Installed
  3511                                  
  3512                                  align 2
  3513                                  
  3514                                  ;PUBLIC FOO
  3515                                  
  3516                                  FOO:	; LABEL WORD
  3517 000001C4 [2207]                          short_addr  Leave2F
  3518                                  
  3519 000001C6 [C801]                  DTab:	DW  DOSTable
  3520                                  
  3521                                  	;PUBLIC FOO,DTAB
  3522                                  
  3523                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3524                                  
  3525                                  ; 29/04/2019
  3526                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3527                                  
  3528                                  
  3529                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3530                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3531                                         
  3532                                  DOSTable:  ; LABEL  WORD
  3533 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3534 000001C9 [5109]                          short_addr  DOSInstall          ;   0 install check
  3535 000001CB [A02F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3536 000001CD [FE0E]                          short_addr  RECSET              ;   2   RECSET
  3537 000001CF [4B09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3538 000001D1 [7B51]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3539 000001D3 [B616]                          short_addr  OUTT                ;   5   OUT
  3540 000001D5 [5254]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3541 000001D7 [F559]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3542 000001D9 [9E30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3543 000001DB [A75B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3544 000001DD [4B74]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3545 000001DF [E62C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3546 000001E1 [D02C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3547 000001E3 [0F0B]                          short_addr  DATE16              ;   13  DATE16
  3548 000001E5 [4E12]                          short_addr  Idle		;   14      empty slot
  3549 000001E7 [EE59]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3550 000001E9 [4E12]                          short_addr  Idle		;   16      empty slot
  3551 000001EB [1B12]                          short_addr  StrCpy              ;   17  StrCpy
  3552 000001ED [3312]                          short_addr  StrLen              ;   18  StrLen
  3553 000001EF [2651]                          short_addr  UCase		;   19  UCase
  3554 000001F1 [325A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3555 000001F3 [7E5B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3556 000001F5 [8567]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3557 000001F7 [E86B]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3558 000001F9 [8F04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3559 000001FB [936B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3560 000001FD [9D6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3561 000001FF [B90B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3562 00000201 [530C]                          short_addr  DSUM                ;   28  DSUM
  3563 00000203 [AD0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3564 00000205 [F911]                          short_addr  StrCmp              ;   30  StrCmp
  3565 00000207 [D66A]                          short_addr  InitCDS             ;   31  initcds
  3566 00000209 [5267]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3567 0000020B [786F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3568 0000020D [8C06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3569 0000020F [8842]                          short_addr  DEVNAME             ;   35  DEVNAME
  3570 00000211 [4E12]                          short_addr  Idle                ;   36  Idle
  3571 00000213 [4112]                          short_addr  DStrLen             ;   37  DStrLen
  3572 00000215 [F212]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3573 00000217 [0A68]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3574 00000219 [F812]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3575 0000021B [1B69]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3576 0000021D [B212]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3577 0000021F [3513]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3578 00000221 [2413]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3579 00000223 [5213]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3580                                          
  3581                                  	; 29/04/2019 - Retro DOS v4.0
  3582 00000225 [5713]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3583                                  
  3584 00000227 [6506]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3585                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3586                                  
  3587                                  DOSTableEnd:  ; LABEL BYTE
  3588                                  
  3589                                  	;ENDIF
  3590                                  
  3591                                  ; ----------------------------------------------------------------------------
  3592                                  ; BREAK   <Copyright notice and version>
  3593                                  ; ----------------------------------------------------------------------------
  3594                                  
  3595                                  ;CODSTRT EQU	$
  3596                                  
  3597                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3598                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3599                                  
  3600                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3601                                  ;       module. The reason is so that the data alignments are the same in
  3602                                  ;       IBM-DOS and MS-DOS up through header.
  3603                                  
  3604                                  	;PUBLIC	HEADER
  3605                                  
  3606                                  HEADER:	; LABEL	BYTE
  3607                                          ;IF	DEBUG
  3608                                          ;DB	13,10,"Debugging DOS version "
  3609                                          ;DB	MAJOR_VERSION + "0"
  3610                                          ;DB	"."
  3611                                          ;DB	(MINOR_VERSION / 10) + "0"
  3612                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3613                                          ;ENDIF
  3614                                  
  3615                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3616                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3617                                  %if 0
  3618                                          ;IF	NOT IBM
  3619                                          DB	13,10,"MS-DOS version "
  3620                                          DB	MAJOR_VERSION + "0"
  3621                                          DB	"."
  3622                                          DB	(MINOR_VERSION / 10) + "0"
  3623                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3624                                          DB	(MINOR_VERSION % 10) + "0"
  3625                                  
  3626                                          ;IF	HIGHMEM
  3627                                          ;DB	"H"
  3628                                          ;ENDIF
  3629                                  
  3630                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3631                                  	; 30/04/2019 - Retro DOS v4.0
  3632                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3633                                  
  3634                                  	;ENDIF
  3635                                  
  3636                                  %endif
  3637                                  
  3638                                  ;IF DEBUG
  3639                                  ;	DB	13,10,"$"
  3640                                  ;ENDIF
  3641                                  
  3642                                  ;include copyrigh.inc
  3643                                  
  3644                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3645                                  
  3646                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3647                                  	;DB	"Licensed Material - Property of Microsoft "
  3648                                  	;DB	"All rights reserved "
  3649                                  
  3650                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3651                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3652                                  
  3653                                  ; 28/12/2022 - Retro DOS v4.1
  3654                                  %if 0
  3655                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3656                                  ms_copyright:
  3657                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3658                                  	db	'Licensed Material - Property of Microsoft '
  3659                                  	db	'All rights reserved '
  3660                                  
  3661                                  %endif
  3662                                  	; 28/12/2022 - Retro DOS v4.1
  3663                                  ms_copyright:
  3664 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3664 00000232 56657273696F6E2035-
  3664 0000023B 2E30               
  3665 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3665 00000246 687420313938312D31-
  3665 0000024F 393931204D6963726F-
  3665 00000258 736F667420436F7270-
  3665 00000261 2E0D0A2400         
  3666                                  
  3667                                  ;============================================================================
  3668                                  ; MSCODE.ASM
  3669                                  ;============================================================================
  3670                                  
  3671                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3672                                  ; 03/03/2018
  3673                                  
  3674                                  ;
  3675                                  ; MSCODE.ASM -- MSDOS code
  3676                                  ;
  3677                                  
  3678                                  ;INCLUDE DOSSEG.ASM
  3679                                  ;INCLUDE STDSW.ASM
  3680                                  
  3681                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3682                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3683                                  
  3684                                  ;.xcref
  3685                                  ;INCLUDE DOSSYM.ASM
  3686                                  ;INCLUDE DEVSYM.ASM
  3687                                  ;.cref
  3688                                  ;.list
  3689                                  
  3690                                  ;IFNDEF  KANJI
  3691                                  ;KANJI   EQU     0       ; FALSE
  3692                                  ;ENDIF
  3693                                  
  3694                                  ;IFNDEF  IBM
  3695                                  ;IBM     EQU     0
  3696                                  ;ENDIF
  3697                                  
  3698                                  ;IFNDEF  HIGHMEM
  3699                                  ;HIGHMEM  EQU     0
  3700                                  ;ENDIF
  3701                                  
  3702                                          ;i_need  USER_SP,WORD
  3703                                          ;i_need  USER_SS,WORD
  3704                                          ;i_need  SAVEDS,WORD
  3705                                          ;i_need  SAVEBX,WORD
  3706                                          ;i_need  INDOS,BYTE
  3707                                          ;i_need  NSP,WORD
  3708                                          ;i_need  NSS,WORD
  3709                                          ;i_need  CURRENTPDB,WORD
  3710                                          ;i_need  AUXSTACK,BYTE
  3711                                          ;i_need  CONSWAP,BYTE
  3712                                          ;i_need  IDLEINT,BYTE
  3713                                          ;i_need  NOSETDIR,BYTE
  3714                                          ;i_need  ERRORMODE,BYTE
  3715                                          ;i_need  IOSTACK,BYTE
  3716                                          ;i_need  WPERR,BYTE
  3717                                          ;i_need  DSKSTACK,BYTE
  3718                                          ;i_need  CNTCFLAG,BYTE
  3719                                          ;i_need  LEAVEADDR,WORD
  3720                                          ;i_need  NULLDEVPT,DWORD
  3721                                  
  3722                                          ;IF NOT IBM
  3723                                          ;i_need  OEM_HANDLER,DWORD
  3724                                          ;ENDIF
  3725                                  
  3726                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3727                                  
  3728                                  ;============================================================================
  3729                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3730                                  ;============================================================================
  3731                                  ; 11/07/2018 - Retro DOS v3.0
  3732                                  ; 01/05/2019 - Retro DOS v4.0
  3733                                  
  3734                                  ; DosCode SEGMENT
  3735                                  
  3736                                  ; ==========================================================================
  3737                                  ;
  3738                                  ; $Set_CTRL_C_Trapping
  3739                                  ;
  3740                                  ; Function:
  3741                                  ;	Enable disable ^C checking in dispatcher
  3742                                  ;
  3743                                  ; Inputs:
  3744                                  ;		AL = 0 read ^C status
  3745                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3746                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3747                                  ;		AL = 5 get DOS boot drive
  3748                                  ;		AL = 6 Get version number
  3749                                  ;			RETURNS:
  3750                                  ;				BH = Minor version number
  3751                                  ;				BL = Major version number
  3752                                  ;				DL = DOS internal revision
  3753                                  ;				DH = DOS type flags
  3754                                  ;					Bit 3 	- DOS in ROM
  3755                                  ;					Bit 4 	- DOS in HMA
  3756                                  ;					Bit 0-2, 5-7 - Reserved
  3757                                  ; Outputs:
  3758                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3759                                  ;
  3760                                  ; History:
  3761                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3762                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3763                                  ; ==========================================================================
  3764                                  
  3765                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3766                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3767                                  
  3768                                  _$SET_CTRL_C_TRAPPING:
  3769                                  	; 01/05/2019 - Retro DOS v4.0
  3770                                  
  3771 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3772 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3773                                  
  3774 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3775 0000026C CF                      	iret
  3776                                  scct_1:
  3777 0000026D 1E                      	push	DS
  3778                                  
  3779                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3780 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3781                                  	
  3782 00000273 50                      	push	AX			; DL only register that can change
  3783 00000274 56                      	push	SI
  3784                                  
  3785 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3786 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3787 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3788 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3789                                  
  3790 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3791 00000280 EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3792                                  scct_2:
  3793 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3794 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3795                                  
  3796 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3797 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3798 0000028A EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3799                                  scct_3:
  3800 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3801 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3802                                  
  3803 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3804 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3805 00000294 EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3806                                  scct_4:
  3807 00000296 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3808 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3809 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3810 0000029F EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3811                                  scct_5:
  3812 000002A1 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3813 000002A4 7511                    	jne	short scct_9s		; If not equal then not get version
  3814                                  	
  3815                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3816                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3817 000002A6 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3818 000002A9 B200                    	mov	dl,0
  3819                                  	;mov	DL,DOSREVNM ; 0
  3820                                  
  3821 000002AB 30F6                    	xor	dh,dh			; assume vanilla DOS
  3822 000002AD 803E[F711]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3823                                  	;je	short @F
  3824 000002B2 7403                    	je	short scct_6
  3825 000002B4 80CE10                  	or	dh,10h
  3826                                  	;or	DH,DOSINHMA ; 10h
  3827                                  ;@@:
  3828                                  scct_6:
  3829                                  
  3830                                  ;ifdef ROMDOS
  3831                                  ;	or	DH, DOSINROM
  3832                                  ;endif ; ROMDOS
  3833                                  
  3834                                  scct_9s:
  3835 000002B7 5E                      	pop	SI
  3836 000002B8 58                      	pop	AX
  3837 000002B9 1F                      	pop	DS
  3838                                  scct_9f:
  3839 000002BA CF                      	iret
  3840                                  
  3841                                  SetCtrlShortEntry:			; This allows a conditional entry
  3842                                  					; from main dispatch code
  3843 000002BB EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3844                                  
  3845                                  ; ==========================================================================
  3846                                  ;									   
  3847                                  ; The following two routines are dispatched to directly with ints disabled
  3848                                  ; immediately after the int 21h entry.	no DIS state is set.
  3849                                  ;
  3850                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3851                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3852                                  ;
  3853                                  ; ==========================================================================
  3854                                  
  3855                                  _$SET_CURRENT_PDB:
  3856 000002BD 1E                      	push	DS
  3857                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3858 000002BE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3859 000002C3 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3860 000002C7 1F                      	pop	DS
  3861 000002C8 CF                      	iret
  3862                                  
  3863                                  ; ==========================================================================
  3864                                  ;
  3865                                  ; $get_current_PDB returns in BX the current process
  3866                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3867                                  ;
  3868                                  ; ==========================================================================
  3869                                  
  3870                                  _$GET_CURRENT_PDB:
  3871 000002C9 1E                      	push	DS
  3872                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3873 000002CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3874 000002CF 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3875 000002D3 1F                      	pop	DS
  3876 000002D4 CF                      	iret
  3877                                  
  3878                                  ; ==========================================================================
  3879                                  ;
  3880                                  ; Sets the Printer Flag to whatever is in AL.
  3881                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3882                                  ;
  3883                                  ; ==========================================================================
  3884                                  
  3885                                  _$SET_PRINTER_FLAG:
  3886 000002D5 1E                      	push	ds
  3887                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3888 000002D6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3889 000002DB A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3890 000002DE 1F                      	pop	ds
  3891 000002DF CF                      	iret
  3892                                  
  3893                                  ; 01/05/2019 - Retro DOS v4.0
  3894                                  ; 08/07/2018 - Retro DOS v3.0
  3895                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3896                                  
  3897                                  ; ----------------------------------------------------------------------------
  3898                                  ; BREAK   <System call entry points and dispatcher>
  3899                                  ; ----------------------------------------------------------------------------
  3900                                  
  3901                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3902                                  
  3903                                  ; ==========================================================================
  3904                                  ;
  3905                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3906                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3907                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3908                                  ;
  3909                                  ; ==========================================================================
  3910                                  
  3911                                  SYSTEM_CALL:    ; PROC NEAR
  3912                                  
  3913                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3914                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3915                                  
  3916                                  ;entry	QUIT				
  3917                                  QUIT:				; INT 20H entry point	
  3918                                  	;MOV	AH,0
  3919 000002E0 30E4                    	xor	ah,ah ; 08/07/2018
  3920 000002E2 EB36                    	JMP     SHORT SAVREGS
  3921                                  
  3922                                  ; ---------------------------------------------------------------------------
  3923                                  
  3924                                  	; The system call in AH is out of the range that we know how
  3925                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3926                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3927                                  	; error as this may break some programs compatability.
  3928                                  
  3929                                  BADCALL:
  3930                                          ;MOV	AL,0
  3931 000002E4 30C0                    	xor	al,al ; 08/07/2018
  3932                                  IRETT:	; 06/05/2019
  3933                                  _IRET:
  3934 000002E6 CF                              IRET
  3935                                  
  3936                                  ; ---------------------------------------------------------------------------
  3937                                  
  3938                                  ; 01/05/2019 - Retro DOS v4.0
  3939                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3940                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3941                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3942                                  
  3943                                  	; An alternative method of entering the system is to perform a
  3944                                  	; CALL 5 in the program segment prefix with the contents of CL
  3945                                  	; indicating what system call the user would like. A subset of
  3946                                  	; the possible system calls is allowed here only the
  3947                                  	; CPM-compatible calls may get dispatched.
  3948                                  
  3949                                  		; System call entry point and dispatcher
  3950                                  CALL_ENTRY:
  3951 000002E7 1E                      	push	DS
  3952                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3953 000002E8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3954 000002ED 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3955                                  
  3956 000002F1 58                              POP     AX                      ; IP from the long call at 5
  3957 000002F2 58                              POP     AX                      ; Segment from the long call at 5
  3958 000002F3 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3959                                  
  3960                                  		; Re-order the stack to simulate an interrupt 21.
  3961                                  
  3962 000002F7 9C                      	PUSHF				; Start re-ordering the stack
  3963 000002F8 FA                      	CLI
  3964 000002F9 50                              PUSH    AX                      ; Save segment
  3965 000002FA FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3966                                  	; 04/11/2022
  3967                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3968                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3969 000002FE FF36[EC05]              	push	word [SAVEDS]
  3970 00000302 1F                      	pop	ds
  3971                                  	;
  3972                                  	;cmp	cl,36
  3973 00000303 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3974 00000306 77DC                            JA      SHORT BADCALL
  3975 00000308 88CC                            MOV     AH,CL
  3976                                  	; 08/07/2018
  3977 0000030A EB0E                    	jmp	short SAVREGS
  3978                                  
  3979                                  ; ---------------------------------------------------------------------------
  3980                                  
  3981                                  ; 01/05/2019 - Retro DOS v4.0
  3982                                  
  3983                                  	; This is the normal INT 21 entry point. We first perform a
  3984                                  	; quick test to see if we need to perform expensive DOS-entry
  3985                                  	; functions. Certain system calls are done without interrupts
  3986                                  	; being enabled.
  3987                                  
  3988                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  3989                                  
  3990                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  3991                                  ; 04/11/2022
  3992                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  3993                                  
  3994                                  COMMAND:
  3995                                  	; 22/12/2022
  3996 0000030C FA                      	cli
  3997                                  
  3998                                  	; 01/05/2019 - Retro DOS v4.0
  3999                                  	; 08/07/2018 - Retro DOS v3.0
  4000                                  
  4001                                  ; 22/12/2022
  4002                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4003                                  	;IF	NOT IBM
  4004 0000030D 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4005 00000310 7203                    	JB	SHORT NOTOEM
  4006 00000312 E98401                  	JMP	_$SET_OEM_HANDLER
  4007                                  
  4008                                  NOTOEM:
  4009                                  	;ENDIF
  4010                                  
  4011                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4012                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4013                                  
  4014                                  	; 22/12/2022
  4015                                  	;cli	; 08/07/2018
  4016                                  
  4017                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4018                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4019                                  	; 04/11/2022
  4020 00000315 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4021                                  	;JBE	SHORT SAVREGS
  4022 00000318 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4023                                  
  4024                                  	; 31/05/2019
  4025                                  
  4026                                  	; The following set of calls are issued by the server at
  4027                                  	; *arbitrary* times and, therefore, must be executed on
  4028                                  	; the user's entry stack and executed with interrupts off.
  4029                                  
  4030                                  SAVREGS:
  4031                                  	; 01/05/2019 - Retro DOS v4.0
  4032                                  	; 10/08/2018
  4033                                  	; 08/07/2018 - Retro DOS v3.0
  4034 0000031A 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4035                                  	;;je	_$SET_CTRL_C_TRAPPING
  4036                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4037 0000031D 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4038                                  	; 04/11/2022
  4039 0000031F 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4040 00000321 80FC64                  	cmp	ah,64h			; Check Max case number
  4041 00000324 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4042 00000326 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4043 00000328 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4044 0000032B 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4045 0000032D 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4046 00000330 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4047 00000332 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4048 00000335 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4049                                  
  4050                                  SaveAllRegs:
  4051                                  	; 01/05/2019 - Retro DOS v4.0
  4052                                  
  4053 00000337 06                              push	ES
  4054 00000338 1E                      	push	DS
  4055 00000339 55                      	push	BP
  4056 0000033A 57                      	push	DI
  4057 0000033B 56                      	push	SI
  4058 0000033C 52                      	push	DX
  4059 0000033D 51                      	push	CX
  4060 0000033E 53                      	push	BX
  4061 0000033F 50                      	push	AX
  4062                                  
  4063 00000340 8CD8                    	mov	AX,DS
  4064                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4065 00000342 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4066 00000347 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4067 0000034A 891E[EA05]              	mov	[SAVEBX],BX
  4068                                  
  4069                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4070                                  	
  4071                                  	; 08/07/2018 - Retro DOS v3.0        
  4072                                  	;xor     ax,ax
  4073                                  	;mov     [USER_ID],ax
  4074                                  	;mov     ax,[CurrentPDB]
  4075                                  	;mov     [PROC_ID],ax
  4076                                  
  4077                                  	; 01/05/2019
  4078                                  
  4079                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4080                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4081                                  	; this!!!
  4082                                  
  4083 0000034E A1[8405]                	MOV     AX,[USER_SP]
  4084 00000351 A3[F205]                        MOV     [NSP],AX
  4085 00000354 A1[8605]                        MOV     AX,[USER_SS]
  4086 00000357 A3[F005]                        MOV     [NSS],AX
  4087                                  
  4088 0000035A 31C0                    	xor	AX,AX ; 0
  4089 0000035C A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4090                                  
  4091 0000035F F606[2F10]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4092 00000364 7503                    	jnz	short set_indos_flag	; if win386 present
  4093 00000366 A3[3E03]                	mov	[USER_ID],AX
  4094                                  set_indos_flag:
  4095 00000369 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4096                                  
  4097 0000036D 8926[8405]                      MOV     [USER_SP],SP
  4098 00000371 8C16[8605]                      MOV     [USER_SS],SS
  4099                                  
  4100 00000375 A1[3003]                	mov	AX,[CurrentPDB]
  4101 00000378 A3[3C03]                	mov	[PROC_ID],AX
  4102 0000037B 8ED8                    	mov	DS,AX
  4103 0000037D 58                      	pop	AX
  4104 0000037E 50                      	push	AX
  4105                                  
  4106                                  	; save user stack in his area for later returns (possibly from EXEC)
  4107                                  
  4108 0000037F 89262E00                        MOV     [PDB.USER_STACK],SP
  4109 00000383 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4110                                  
  4111                                  	; 18/07/2018
  4112                                  	;mov	byte [CS:FSHARING], 0
  4113                                  
  4114                                  	;MOV     BX,CS			; no holes here.
  4115                                  	;MOV     SS,BX
  4116                                  
  4117                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4118 00000387 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4119                                  					;entry	REDISP
  4120                                  REDISP:
  4121 0000038C BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4122 0000038F FB                              STI                             ; stack is in our space now...
  4123                                  
  4124 00000390 8CD3                    	mov	bx,ss
  4125 00000392 8EDB                    	mov	ds,bx
  4126                                  
  4127 00000394 93                      	xchg	ax,bx
  4128                                  
  4129 00000395 31C0                    	xor	ax,ax ; 0
  4130                                  
  4131                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4132                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4133                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4134                                  
  4135                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4136                                  
  4137                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4138                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4139                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4140                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4141                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4142                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4143                                  	;inc	ax
  4144                                  	;;inc	AL			; AL = 1
  4145                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4146                                  
  4147                                  	; 15/12/2022
  4148 00000397 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4149                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4150 0000039A 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4151 000003A0 A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4152                                  	;mov	byte [IDLEINT],1
  4153 000003A3 A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4154 000003A6 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4155 000003A9 40                      	inc	ax
  4156                                  	;inc	al			; AL = 1
  4157 000003AA A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4158                                  
  4159 000003AD 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4160                                  
  4161 000003AE 88E3                    	MOV     BL,AH			
  4162 000003B0 D1E3                            SHL     BX,1			; 2 bytes per call in table
  4163                                         
  4164 000003B2 FC                      	CLD
  4165                                  		; Since the DOS maintains mucho state information across system
  4166                                  		; calls, we must be very careful about which stack we use.
  4167                                  		; First, all abort operations must be on the disk stack. This
  4168                                  		; is due to the fact that we may be hitting the disk (close
  4169                                  		; operations, flushing) and may need to report an INT 24.
  4170                                          
  4171 000003B3 08E4                    	OR      AH,AH
  4172 000003B5 7416                            JZ      SHORT DSKROUT		; ABORT
  4173                                  
  4174                                          ;CMP	AH,12
  4175                                          ;JBE	SHORT IOROUT		; Character I/O
  4176                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4177                                          ;JZ	SHORT IOROUT
  4178                                          ;CMP	AH,SET_CURRENT_PDB
  4179                                          ;JNZ	SHORT DSKROUT
  4180                                  
  4181                                  		; Second, PRINT and PSPRINT and the server issue
  4182                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4183                                  		; This call MUST, therefore, use the AUXSTACK.
  4184                                  
  4185                                  	; 10/08/2018
  4186 000003B7 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4187 000003BA 743D                    	je      short DISPCALL
  4188                                  	
  4189                                  	; 01/05/2019
  4190                                  	
  4191                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4192                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4193                                  
  4194 000003BC 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4195 000003BF 770C                    	ja      short DSKROUT
  4196                                  
  4197                                  IOROUT:
  4198                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4199                                  	; (ss: prefix was not needed here! ds=ss)
  4200                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4201                                  	; 15/12/2022
  4202 000003C1 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4203 000003C6 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4204 000003C8 BC[A00A]                        MOV     SP,IOSTACK
  4205 000003CB EB2C                            JMP     SHORT DISPCALL
  4206                                  
  4207                                  		; We are on a system call that is classified as "the rest".
  4208                                  		; We place ourselves onto the DSKSTACK and away we go.
  4209                                  		; We know at this point:
  4210                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4211                                  		;    ErrorMode and WpErr
  4212                                  		; *  That there can be no critical sections in effect.
  4213                                  		;    We signal the server to remove all the resources.
  4214                                  
  4215                                  DSKROUT:
  4216                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4217                                  	; 08/07/2018 - Retro DOS v3.0
  4218 000003CD A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4219 000003D0 C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4220                                  	
  4221 000003D5 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4222 000003DA C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4223                                  	                   		; make sure flags are reset
  4224                                  
  4225                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4226                                  	; (ss: prefix was not needed here! ds=ss)
  4227                                  
  4228                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4229                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4230                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4231                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4232                                                                          ; make sure flags are reset
  4233 000003DF 50                      	push    ax
  4234 000003E0 B482                    	mov     ah,82h			; Release all resource information
  4235 000003E2 CD2A                    	int     2Ah 		; Microsoft Networks 
  4236                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4237 000003E4 58                      	pop     ax
  4238                                  
  4239                                  		; Since we are going to be running on the DSKStack and since
  4240                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4241                                  		; generation of INT 28's.
  4242                                  
  4243                                  	; 15/12/2022
  4244                                  	;mov     byte [ss:IDLEINT],0
  4245                                  	;
  4246                                          ;mov	sp,DSKSTACK
  4247                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4248                                          ;jz	short DISPCALL
  4249                                  
  4250 000003E5 C606[5803]00            	mov     byte [IDLEINT],0
  4251                                  
  4252 000003EA BC[2009]                	MOV     SP,DSKSTACK
  4253 000003ED F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4254 000003F2 7405                    	JZ      SHORT DISPCALL
  4255                                  
  4256 000003F4 50                              PUSH    AX
  4257                                          ;invoke	DSKSTATCHK
  4258 000003F5 E89C4D                          CALL	DSKSTATCHK
  4259 000003F8 58                      	POP     AX
  4260                                  DISPCALL:
  4261                                  	; 01/05/2019 - Retro DOS v4.0
  4262 000003F9 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4263                                  
  4264                                  	; 15/12/2022
  4265 000003FE 871E[EA05]              	xchg	bx,[SAVEBX]
  4266 00000402 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4267                                  
  4268                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4269                                  	; (ss: prefix was not needed here! ds=ss)        
  4270                                  	;xchg	bx,[ss:SAVEBX]
  4271                                  	;mov	ds,[ss:SAVEDS]
  4272                                  
  4273 00000406 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4274                                  
  4275                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4276                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4277                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4278                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4279                                  	; because this bit is used to indicate to the next int 21 call that
  4280                                  	; the previous int 21 was an exec.
  4281                                  	;
  4282                                  	; So do not add any code between the call above and the label 
  4283                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4284                                  
  4285                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4286 0000040B 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4287                                  
  4288                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4289                                  ; DOSCODE:41F7h
  4290                                  
  4291                                  ;entry LEAVE
  4292                                  ;;;_LEAVE:				; Exit from a system call
  4293                                  LeaveDOS: ; 18/07/2018 
  4294                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4295 00000411 FA                      	CLI
  4296                                  
  4297                                  	; 01/05/2019
  4298                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4299 00000412 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4300 00000417 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4301 0000041C 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4302                                  
  4303                                  LeaveA20On:
  4304 0000041E FE0E[2103]                      DEC     BYTE [INDOS]
  4305                                          ; 04/11/2022
  4306 00000422 8E16[8605]              	mov	ss,[USER_SS]
  4307 00000426 8B26[8405]              	MOV     SP,[USER_SP]
  4308                                  	;MOV	SS,[USER_SS]
  4309 0000042A 89E5                    	MOV     BP,SP
  4310                                  	;MOV	[BP.user_AX],AL	
  4311                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4312                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4313                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4314                                  	; 15/12/2022
  4315 0000042C 884600                  	MOV	[BP],AL
  4316 0000042F A1[F205]                	MOV     AX,[NSP]
  4317 00000432 A3[8405]                        MOV     [USER_SP],AX
  4318 00000435 A1[F005]                        MOV     AX,[NSS]
  4319 00000438 A3[8605]                        MOV     [USER_SS],AX
  4320                                  
  4321 0000043B 58                      	pop	AX
  4322 0000043C 5B                      	pop	BX
  4323 0000043D 59                      	pop	CX
  4324 0000043E 5A                      	pop	DX
  4325 0000043F 5E                      	pop	SI
  4326 00000440 5F                      	pop	DI
  4327 00000441 5D                      	pop	BP
  4328 00000442 1F                      	pop	DS
  4329 00000443 07                      	pop	ES
  4330                                  
  4331 00000444 CF                              IRET
  4332                                  
  4333                                  disa20:	   				; M068 - Start
  4334 00000445 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4335 00000449 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4336 0000044D 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4337                                  					;    a20 off
  4338                                  					; Y: turn a20 off and dec a20off_count
  4339 0000044F FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4340                                   					; Start - M004
  4341 00000453 1E                      	push	ds			; segment of stub
  4342 00000454 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4343 00000457 53                      	push	bx
  4344 00000458 CB                      	retf	  			; go to stub
  4345                                  					; End - M004
  4346                                  ;SYSTEM_CALL ENDP
  4347                                  
  4348                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4349                                  ; 04/11/2022
  4350                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4351                                  
  4352                                  ; ==========================================================================
  4353                                  ;
  4354                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4355                                  ; the stack prior to giving the user control
  4356                                  ;
  4357                                  ; ==========================================================================
  4358                                  
  4359                                  ; 01/05/2019 - Retro DOS v4.0
  4360                                  
  4361                                          ;procedure restore_world,NEAR
  4362                                  restore_world:
  4363                                  	;getdseg <es>		; es -> dosdata
  4364 00000459 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4365                                  
  4366 0000045E 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4367                                  
  4368 00000463 58                              POP     AX
  4369 00000464 5B                              POP     BX
  4370 00000465 59                              POP     CX
  4371 00000466 5A                              POP     DX
  4372 00000467 5E                              POP     SI
  4373 00000468 5F                              POP     DI
  4374 00000469 5D                              POP     BP
  4375 0000046A 1F                              POP     DS
  4376                                  
  4377 0000046B 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4378                                  
  4379                                  ;restore_world	ENDP
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4382                                  
  4383                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4384                                  ; 04/11/2022
  4385                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4386                                  
  4387                                  ; ==========================================================================
  4388                                  ;
  4389                                  ; Save_World saves complete registers on the stack
  4390                                  ;
  4391                                  ; ==========================================================================
  4392                                  
  4393                                          ;procedure save_world,NEAR
  4394                                  save_world:
  4395                                  	;getdseg <es>		; es -> dosdata
  4396 00000470 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4397                                  
  4398 00000475 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4399                                  
  4400                                  	; 12/05/2019
  4401                                          
  4402 0000047A 1E                      	PUSH    DS
  4403 0000047B 55                              PUSH    BP
  4404 0000047C 57                              PUSH    DI
  4405 0000047D 56                              PUSH    SI
  4406 0000047E 52                              PUSH    DX
  4407 0000047F 51                              PUSH    CX
  4408 00000480 53                              PUSH    BX
  4409 00000481 50                              PUSH    AX
  4410                                  
  4411 00000482 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4412                                  
  4413 00000487 55                      	push	BP		
  4414 00000488 89E5                    	mov	BP,SP
  4415 0000048A 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4416 0000048D 5D                      	pop	BP
  4417                                  	
  4418 0000048E C3                      	retn
  4419                                  
  4420                                  ;save_world	ENDP
  4421                                  
  4422                                  ; 01/05/2019
  4423                                  
  4424                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4425                                  ; 04/11/2022
  4426                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4427                                  
  4428                                  ; ==========================================================================
  4429                                  ;
  4430                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4431                                  ;
  4432                                  ; ==========================================================================
  4433                                  
  4434                                          ;procedure get_user_stack,NEAR
  4435                                  Get_User_Stack:
  4436                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4437 0000048F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4438 00000494 C536[8405]                      lds	si,[USER_SP]
  4439 00000498 C3                      	retn
  4440                                  
  4441                                  ;get_user_stack  ENDP
  4442                                  
  4443                                  ; 22/12/2022
  4444                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4445                                  ;%if 0
  4446                                  
  4447                                  ; ---------------------------------------------------------------------------
  4448                                  ;
  4449                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4450                                  ; Inputs:
  4451                                  ;	User registers, User Stack, INTS disabled
  4452                                  ;	If CALL F8, DS:DX is new handler address
  4453                                  ; Function:
  4454                                  ;	Process OEM INT 21 extensions
  4455                                  ; Outputs:
  4456                                  ;	Jumps to OEM_HANDLER if appropriate
  4457                                  ;
  4458                                  ; ---------------------------------------------------------------------------
  4459                                  
  4460                                  ;IF	NOT IBM
  4461                                  
  4462                                  _$SET_OEM_HANDLER:
  4463                                  	; 01/05/2019 - Retro DOS v4.0
  4464                                  	
  4465                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4466                                  	;(jb	short NOTOOEM)
  4467                                  
  4468 00000499 06                      	push	es ; *
  4469                                  	;getdseg <es>			; es -> dosdata
  4470 0000049A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4471                                  
  4472 0000049F 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4473                                  						; (message) request	
  4474                                  	; AH = 0F8h = SET OEM HANDLER
  4475                                  
  4476 000004A1 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4477 000004A6 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4478                                  
  4479 000004AB 07                      	pop	es ; *
  4480                                  
  4481 000004AC CF                      	IRET                            ; Quick return, Have altered no registers
  4482                                  
  4483                                  check_trueversion_request:
  4484                                  	; 18/07/2019 - Retro DOS v3.0
  4485                                  
  4486                                  	; Retro DOS v2.0 - 20/04/2018
  4487 000004AD 83F8FF                  	CMP	AX,0FFFFh
  4488                                  	; 18/07/2018
  4489 000004B0 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4490                                  
  4491                                  	; 01/05/2019
  4492 000004B2 07                      	pop	es ; *
  4493                                  
  4494 000004B3 B40E                    	mov	ah,0Eh
  4495                                  
  4496                                  	; Retro DOS v4.0 feature only!
  4497 000004B5 81FBA101                	cmp	bx,417  ; Signature to bypass
  4498                                  			; Retro DOS true version message	
  4499 000004B9 7414                    	je	short true_version_iret
  4500                                  
  4501 000004BB 56                      	push	si
  4502 000004BC 53                      	push	bx
  4503                                  
  4504 000004BD BE[BF00]                	mov	si,RETRODOSMSG
  4505                                  wrdosmsg:
  4506                                  	;movb	ah,0Eh
  4507 000004C0 BB0700                  	mov	bx,7
  4508                                  wrdosmsg_nxt:
  4509 000004C3 2EAC                    	cs	lodsb
  4510 000004C5 3C24                    	cmp	al,'$'
  4511 000004C7 7404                    	je	short wrdosmsg_ok		
  4512 000004C9 CD10                    	int	10h
  4513 000004CB EBF6                    	jmp	short wrdosmsg_nxt
  4514                                  
  4515                                  wrdosmsg_ok:
  4516 000004CD 5B                      	pop	bx
  4517 000004CE 5E                      	pop	si
  4518                                  
  4519                                  true_version_iret:
  4520                                  	; ah = 0Eh
  4521                                  	;mov	al,40h ; Retro DOS v4.0
  4522                                  	; 
  4523 000004CF B041                    	mov	al,41h ; Retro DOS v4.1 
  4524 000004D1 CF                      	iret
  4525                                  
  4526                                  	; If above F8 try to jump to handler
  4527                                  
  4528                                  DO_OEM_FUNC:
  4529                                  	; 01/05/2019
  4530 000004D2 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4531 000004D8 7504                    	JNE     short OEM_JMP
  4532 000004DA 07                      	pop	es ; *
  4533 000004DB E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4534                                  OEM_JMP:
  4535 000004DE 06                      	push	es
  4536 000004DF 1F                      	pop	ds ; DOSDATA segment !
  4537 000004E0 07                      	pop	es ; *
  4538                                  
  4539                                  	; 22/12/2022
  4540 000004E1 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4541                                  
  4542 000004E2 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4543                                  
  4544                                  ;       ENDIF
  4545                                  
  4546                                  ; ---------------------------------------------------------------------------
  4547                                  
  4548                                  ;%endif
  4549                                  
  4550                                  ;============================================================================
  4551                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4552                                  ;============================================================================
  4553                                  ; 17/07/2018 - Retro DOS v3.0
  4554                                  
  4555                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4556                                  ;	NAME	IBMCODE
  4557                                  
  4558                                  ;BREAK <NullDev -- Driver for null device>
  4559                                  
  4560                                  ; ROMDOS note:
  4561                                  ;	NUL device driver used to be here, but it was removed and placed in
  4562                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4563                                  ;	header, which is also in DOSDATA.
  4564                                  
  4565                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4566                                  
  4567                                  ;----------------------------------------------------------------------------
  4568                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4569                                  ;----------------------------------------------------------------------------
  4570                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4571                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4572                                  
  4573                                  ;Public MSC001S,MSC001E
  4574                                  ;MSC001S label byte
  4575                                  	;IF	IBM
  4576                                  ; Codes returned by BIOS
  4577                                  ERRIN:
  4578 000004E6 02                      	DB	2			; NO RESPONSE
  4579 000004E7 06                      	DB	6			; SEEK FAILURE
  4580 000004E8 0C                      	DB	12			; GENERAL ERROR
  4581 000004E9 04                      	DB	4			; BAD CRC
  4582 000004EA 08                      	DB	8			; SECTOR NOT FOUND
  4583 000004EB 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4584                                  ERROUT:
  4585                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4586 000004EC 80                      	DB	80H			; NO RESPONSE
  4587 000004ED 40                      	DB	40H			; Seek failure
  4588 000004EE 02                      	DB	2			; Address Mark not found
  4589 000004EF 10                      	DB	10H			; BAD CRC
  4590 000004F0 04                      	DB	4			; SECTOR NOT FOUND
  4591 000004F1 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4592                                  
  4593                                  NUMERR	EQU	$-ERROUT
  4594                                  	;ENDIF
  4595                                  ;MSC001E label byte
  4596                                  ;----------------------------------------------------------------------------
  4597                                  
  4598                                  ;============================================================================
  4599                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4600                                  ;============================================================================
  4601                                  ; 18/07/2018 - Retro DOS v3.0
  4602                                  ; 15/05/2019 - Retro DOS v4.0
  4603                                  
  4604                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4605                                  
  4606                                  ;   AbsSetup - setup for abs disk functions
  4607                                  ;----------------------------------------------------------------------------
  4608                                  
  4609                                  AbsSetup:
  4610 000004F2 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4611 000004F7 FB                      	STI
  4612 000004F8 FC                      	CLD
  4613 000004F9 1E                      	PUSH	DS
  4614 000004FA 16                      	push	ss
  4615 000004FB 1F                      	pop	ds
  4616 000004FC E80C01                  	CALL	GETBP
  4617 000004FF 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4618                                  	;mov	word [es:bp+1Fh]
  4619 00000501 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4620                                  errdriv:
  4621 00000507 1F                      	POP	DS
  4622 00000508 7301                    	jnc	short AbsSetup2
  4623                                  AbsSetup_retn:
  4624 0000050A C3                      	retn
  4625                                  
  4626                                  AbsSetup2:
  4627                                  	; 15/05/2019 - Retro DOS v4.0
  4628                                  	; MSDOS 6.0
  4629                                  					; SS override
  4630 0000050B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4631 00000512 E83F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4632 00000515 72F3                    	jc	short AbsSetup_retn
  4633 00000517 E81A57                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4634                                  
  4635                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4636 0000051A 1E                      	PUSH	DS
  4637 0000051B 56                      	PUSH	SI
  4638 0000051C 50                      	PUSH	AX
  4639                                  
  4640 0000051D 16                      	push	ss
  4641 0000051E 1F                      	pop	ds
  4642                                  	
  4643 0000051F BE[BE03]                	MOV	SI,OPENBUF
  4644 00000522 8804                    	MOV	[SI],AL
  4645 00000524 800441                  	ADD	BYTE [SI],"A"
  4646 00000527 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4647 0000052C B80003                  	MOV	AX,0300H
  4648 0000052F F8                      	CLC
  4649 00000530 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4650                                  		
  4651                                  		; 04/11/2022
  4652                                  		; (INT 2Ah - AX = 0300h)
  4653                                  		; Microsoft Networks - CHECK DIRECT I/O
  4654                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4655                                  		;    only drive specifier--must include the colon)
  4656                                  		; Return: CF clear if absolute disk access allowed
  4657                                  
  4658 00000532 58                      	POP	AX
  4659 00000533 5E                      	POP	SI
  4660 00000534 1F                      	POP	DS
  4661 00000535 73D3                    	jnc	short AbsSetup_retn
  4662                                  
  4663                                  	;mov	word [ss:EXTERR],32h
  4664 00000537 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4665 0000053E C3                      	retn
  4666                                  
  4667                                  ;---------------------------------------------------------------------------
  4668                                  ;
  4669                                  ; Procedure Name : ABSDRD
  4670                                  ;
  4671                                  ; Interrupt 25 handler. Performs absolute disk read.
  4672                                  ; Inputs:	AL - 0-based drive number
  4673                                  ;		DS:BX point to destination buffer
  4674                                  ;		CX number of logical sectors to read
  4675                                  ;		DX starting logical sector number (0-based)
  4676                                  ; Outputs:	Original flags still on stack
  4677                                  ;		Carry set
  4678                                  ;		    AH error from BIOS
  4679                                  ;		    AL same as low byte of DI from INT 24
  4680                                  ;
  4681                                  ;---------------------------------------------------------------------------
  4682                                          ;procedure   ABSDRD,FAR
  4683                                  ABSDRD:
  4684                                  	; 15/05/2019 - Retro DOS v4.0
  4685                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4686                                  	; 04/11/2022
  4687                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4688                                  	
  4689                                  	; MSDOS 6.0
  4690 0000053F FA                      	CLI
  4691                                  	
  4692                                  ;	set up ds to point to DOSDATA
  4693                                  
  4694 00000540 50                      	push	ax			; preserve AX value
  4695 00000541 8CD8                    	mov	ax,ds			; store DS value in AX
  4696                                  	;getdseg <ds>
  4697 00000543 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4698 00000548 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4699 0000054B 58                      	pop	ax			; restore AX value
  4700                                  
  4701                                  	; M072:
  4702                                  	; We shall save es on the user stack here. We need to use ES in
  4703                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4704                                  	; time in order to restore the user stack.
  4705                                  
  4706 0000054C 06                      	push	es  ; ****		; M072
  4707                                  
  4708 0000054D 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4709 00000551 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4710                                  
  4711                                  ; 	set up ss to point to DOSDATA
  4712                                  ;
  4713                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4714                                  ; version of the getdseg macro with the SS register! An interrupt will
  4715                                  ; sneak through.
  4716                                  
  4717                                  ;ifndef ROMDOS
  4718                                  	;getdseg <ss>			; cli in entry of routine
  4719 00000555 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4720                                  ;else
  4721                                  ;	mov	ds, cs:[BioDataSeg]
  4722                                  ;	assume	ds:bdata
  4723                                  ;
  4724                                  ;	mov	ss, ds:[DosDataSg]
  4725                                  ;	assume	ss:DOSDATA
  4726                                  ;
  4727                                  ;endif ; ROMDOS
  4728                                  
  4729 0000055A BC[2009]                	MOV	SP,DSKSTACK
  4730                                  
  4731 0000055D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4732                                  
  4733 00000561 06                      	push	es ; *** (MSDOS 6.21)
  4734 00000562 E80BFF                  	call	save_world		; save all regs
  4735                                  
  4736 00000565 06                      	PUSH	ES ; **
  4737 00000566 E889FF                  	CALL	AbsSetup
  4738 00000569 723D                    	JC	short ILEAVE
  4739                                  
  4740                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4741                                  	;  the secondary cache. The secondary cache does not check for media
  4742                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4743                                  	;  read, and get data from the previous disk. To get around this,
  4744                                  	;  we just won't use the secondary cache for absolute disk reads.
  4745                                  	;                                                      -mw 8/5/88
  4746                                  
  4747                                  	;EnterCrit critDisk
  4748 0000056B E8EA0D                  	call	ECritDisk
  4749 0000056E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4750                                  	;LeaveCrit critDisk
  4751 00000574 E8FC0D                  	call	LCritDisk
  4752                                  
  4753                                          ;invoke	DSKREAD
  4754 00000577 E87932                  	CALL	DSKREAD
  4755 0000057A 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4756                                  
  4757 0000057C 89F9                            mov     cx,di
  4758 0000057E 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4759 00000583 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4760                                  
  4761                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4762                                  ;            sectors, also termed an "Extent".)
  4763                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4764                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4765                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4766                                  ;
  4767                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4768                                  ;	buffers must be "read" into the transfer memory block, so that the
  4769                                  ;       transfer memory reflects the most recent data.
  4770                                  
  4771                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4772 00000588 E8BE34                          call	DskRdBufScan
  4773 0000058B EB1B                    	jmp     short ILEAVE
  4774                                  
  4775                                  TLEAVE:
  4776 0000058D 7419                    	JZ	short ILEAVE
  4777                                  
  4778                                  ERR_LEAVE:				; M039
  4779                                  	; 15/07/2018 - Retro DOS v3.0
  4780                                          ;IF	IBM
  4781                                  ; Translate the error code to ancient 1.1 codes
  4782 0000058F 06                              PUSH    ES ; *
  4783 00000590 0E                              PUSH    CS
  4784 00000591 07                              POP     ES
  4785 00000592 30E4                            XOR     AH,AH			; Nul error code
  4786                                  	;mov	cx,6
  4787 00000594 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4788 00000597 BF[E604]                        MOV     DI,ERRIN		; Point to error conditions
  4789 0000059A F2AE                            REPNE   SCASB
  4790 0000059C 7504                            JNZ     SHORT LEAVECODE		; Not found
  4791                                  	;mov	ah,[ES:DI+5]
  4792 0000059E 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4793                                  LEAVECODE:
  4794 000005A2 07                              POP     ES ; *
  4795                                  	; 15/05/2019 - Retro DOS v4.0
  4796 000005A3 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4797                                          ;ENDIF
  4798                                  
  4799 000005A7 F9                              STC
  4800                                  ILEAVE:
  4801                                  	; 15/05/2019
  4802 000005A8 07                              POP     ES ; **
  4803 000005A9 E8ADFE                  	call	restore_world
  4804 000005AC 07                              pop	es ; *** (MSDOS 6.21)
  4805 000005AD FA                      	CLI
  4806 000005AE 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4807 000005B2 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4808 000005B7 16                              push	ss			; M072 - Start
  4809 000005B8 07                      	pop	es			; es - dosdata
  4810 000005B9 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4811 000005BE 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4812 000005C3 07                      	pop	es  ; ****		; Note es was saved on user
  4813                                  					; stack at entry 
  4814                                  					; M072 - End
  4815 000005C4 FB                              STI
  4816 000005C5 CB                      	RETF   ; ! FAR return !
  4817                                  
  4818                                  ;ABSDRD	ENDP
  4819                                  
  4820                                  ;---------------------------------------------------------------------------
  4821                                  ;
  4822                                  ; Procedure Name : ABSDWRT
  4823                                  ;
  4824                                  ; Interrupt 26 handler. Performs absolute disk write.
  4825                                  ; Inputs:	AL - 0-based drive number
  4826                                  ;		DS:BX point to source buffer
  4827                                  ;		CX number of logical sectors to write
  4828                                  ;		DX starting logical sector number (0-based)
  4829                                  ; Outputs:	Original flags still on stack
  4830                                  ;		Carry set
  4831                                  ;		    AH error from BIOS
  4832                                  ;		    AL same as low byte of DI from INT 24
  4833                                  ;
  4834                                  ;---------------------------------------------------------------------------
  4835                                          ;procedure   ABSDWRT,FAR
  4836                                  ABSDWRT:
  4837                                  	; 15/05/2019 - Retro DOS v4.0
  4838                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4839                                  	; 04/11/2022
  4840                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4841                                  
  4842 000005C6 FA                      	CLI
  4843                                  
  4844                                  ;	set up ds to point to DOSDATA
  4845                                  
  4846 000005C7 50                      	push	ax
  4847 000005C8 8CD8                    	mov	ax,ds
  4848                                  	;getdseg <ds>
  4849 000005CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4850 000005CF A3[0A0D]                	mov	[TEMPSEG],ax
  4851 000005D2 58                      	pop	ax
  4852                                  
  4853                                  	; M072:
  4854                                  	; We shall save es on the user stack here. We need to use ES in
  4855                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4856                                  	; time in order to restore the user stack.
  4857                                  
  4858 000005D3 06                      	push	es ; ****		; M072
  4859                                  
  4860 000005D4 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4861 000005D8 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4862                                  
  4863                                  	; set up ss to point to DOSDATA
  4864                                  	;
  4865                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4866                                  	; ROMDOS version of the getdseg macro with the SS register!
  4867                                  	; An interrupt will sneak through.
  4868                                  
  4869                                  ;ifndef ROMDOS
  4870                                  	;getdseg <ss>			; cli in entry of routine
  4871 000005DC 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4872                                  ;else
  4873                                  ;	mov	ds, cs:[BioDataSeg]
  4874                                  ;	assume	ds:bdata
  4875                                  ;
  4876                                  ;	mov	ss, ds:[DosDataSg]
  4877                                  ;	assume	ss:DOSDATA
  4878                                  ;
  4879                                  ;endif ; ROMDOS
  4880                                  
  4881 000005E1 BC[2009]                	MOV	SP,DSKSTACK
  4882                                  		; we are now switched to DOS's disk stack
  4883                                  
  4884 000005E4 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4885                                  
  4886 000005E8 06                      	push	es ; *** (MSDOS 6.21)
  4887                                  
  4888 000005E9 E884FE                  	call	save_world	      	; save all regs
  4889                                  
  4890 000005EC 06                      	PUSH	ES ; **
  4891 000005ED E802FF                  	CALL	AbsSetup
  4892 000005F0 72B6                    	JC	short ILEAVE
  4893                                  
  4894                                  	;EnterCrit critDisk
  4895 000005F2 E8630D                  	call	ECritDisk
  4896 000005F5 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4897 000005FB E89C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4898                                  	;LeaveCrit critDisk
  4899 000005FE E8720D                  	call	LCritDisk
  4900                                  
  4901                                  ;M039
  4902                                  ;       DS:BX = transfer address (source data address).
  4903                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4904                                  ;	     sectors, also termed an "Extent".)
  4905                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4906                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4907                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4908                                  ;
  4909                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4910                                  ;       written. Note that all the above registers are preserved for
  4911                                  ;       DSKWRITE.
  4912                                  
  4913 00000601 1E                              push    ds
  4914                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4915 00000602 E85F37                  	call	DskWrtBufPurge
  4916 00000605 1F                              pop     ds
  4917                                  ;M039
  4918                                  	;invoke	DSKWRITE
  4919 00000606 E81332                  	call	DSKWRITE
  4920 00000609 EB82                    	JMP	short TLEAVE
  4921                                  
  4922                                  ;ABSDWRT ENDP
  4923                                  
  4924                                  ;----------------------------------------------------------------------------
  4925                                  ;
  4926                                  ; Procedure Name : GETBP
  4927                                  ;
  4928                                  ; Inputs:
  4929                                  ;	AL = Logical unit number (A = 0)
  4930                                  ; Function:
  4931                                  ;	Find Drive Parameter Block
  4932                                  ; Outputs:
  4933                                  ;	ES:BP points to DPB
  4934                                  ;	[THISDPB] = ES:BP
  4935                                  ;	Carry set if unit number bad or unit is a NET device.
  4936                                  ;		Later case sets extended error error_I24_not_supported
  4937                                  ; No other registers alteredjjj
  4938                                  ;
  4939                                  ;----------------------------------------------------------------------------
  4940                                  
  4941                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4942                                  GETBP:
  4943                                  	; 15/05/2019 - Retro DOS v4.0
  4944                                  	; 11/07/2018 - Retro DOS v3.0
  4945 0000060B 50                      	PUSH	AX
  4946 0000060C 0401                    	ADD	AL, 1		; No increment; need carry flag
  4947 0000060E 7216                    	JC	SHORT SKIPGET
  4948 00000610 E88065                  	CALL	GETTHISDRV
  4949                                  	; MSDOS 6.0
  4950 00000613 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4951 00000615 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4952 00000617 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4953 0000061A 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4954 0000061C F9                      	STC				;DCR.			;AN000;
  4955 0000061D A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4956 00000620 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4957                                  SKIPGET:
  4958 00000626 58                      	POP	AX
  4959 00000627 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4960                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4961                                  	;jnc	short getbp_t
  4962                                  	;retn
  4963                                  getbp_t:
  4964 00000629 C42E[A205]              	LES	BP,[THISCDS]
  4965                                  	; 15/12/2022
  4966 0000062D 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4967                                  	; 07/12/2022
  4968                                  	;TEST	WORD [ES:BP+43H],8000H
  4969                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4970 00000632 7408                    	JZ	SHORT GETBP_CDS
  4971 00000634 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4972 0000063A F9                      	STC
  4973                                  GETBP_RETN:
  4974 0000063B C3                      	RETN
  4975                                  
  4976                                  GETBP_CDS:
  4977                                  	;LES	BP,[ES:BP+45H]
  4978 0000063C 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4979                                  GOTDPB:
  4980                                  	; Load THISDPB from ES:BP
  4981 00000640 892E[8A05]              	MOV	[THISDPB],BP
  4982 00000644 8C06[8C05]              	MOV	[THISDPB+2],ES
  4983 00000648 C3                      	RETN
  4984                                  
  4985                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  4986                                  
  4987                                  ;----------------------------------------------------------------------------
  4988                                  ;
  4989                                  ; Procedure Name : SYS_RETURN
  4990                                  ;
  4991                                  ; These are the general system call exit mechanisms. All internal system
  4992                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  4993                                  ; is to set the user's flags and set his AX register for return.
  4994                                  ;
  4995                                  ;----------------------------------------------------------------------------
  4996                                  
  4997                                          ;procedure   SYS_RETURN,NEAR
  4998                                  SYS_RETURN:        
  4999                                          ;entry	SYS_RET_OK
  5000                                  SYS_RET_OK:   
  5001 00000649 E843FE                  	call    Get_User_Stack
  5002                                  		; turn off user's carry flag
  5003                                  SYS_RET_OK_clc: ; 25/06/2019 
  5004                                          ;;and	word [SI+16h],0FFFEh 
  5005                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5006                                          ; 25/06/2019
  5007 0000064C 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5008 00000650 EB10                    	JMP     SHORT DO_RET
  5009                                  
  5010                                          ;entry   SYS_RET_ERR
  5011                                  SYS_RET_ERR:        
  5012 00000652 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5013 00000654 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5014 00000657 E81A00                  	CALL	ErrorMap
  5015                                  
  5016                                  	;entry	From_GetSet
  5017                                  From_GetSet:
  5018 0000065A E832FE                          call    Get_User_Stack
  5019                                  		 ; signal carry to user
  5020                                  	;;or	word [SI+16h],1
  5021                                  	;OR	word [SI+user_env.user_F],f_Carry
  5022                                  	; 25/06/2019
  5023 0000065D 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5024 00000661 F9                      	STC			; also, signal internal error
  5025                                  DO_RET:
  5026                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5027 00000662 8904                    	MOV	[SI],AX
  5028 00000664 C3                      	RETN
  5029                                  
  5030                                  	;entry	FCB_RET_OK
  5031                                  FCB_RET_OK:
  5032                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5033                                  NO_OP:
  5034 00000665 30C0                    	XOR	AL,AL
  5035 00000667 C3                      	retn
  5036                                  
  5037                                  	;entry	FCB_RET_ERR
  5038                                  FCB_RET_ERR:
  5039 00000668 30E4                    	XOR	AH,AH
  5040 0000066A 36A3[2403]              	mov	[ss:EXTERR],AX
  5041 0000066E E80300                  	CALL	ErrorMap
  5042 00000671 B0FF                    	MOV	AL,-1
  5043 00000673 C3                      	retn
  5044                                  
  5045                                  	;entry	ErrorMap
  5046                                  ErrorMap:
  5047 00000674 56                      	PUSH	SI
  5048                                  				; ERR_TABLE_21 is now in DOSDATA
  5049 00000675 BE[DA0D]                	MOV	SI,ERR_TABLE_21
  5050                                  				; SS override for FAILERR and EXTERR
  5051 00000678 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5052 0000067E 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5053                                  		 ; Ooops, this is the REAL reason
  5054                                  	;mov	word [SS:EXTERR],53h
  5055 00000680 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5056                                  EXTENDED_NORMAL:
  5057 00000687 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5058 0000068A 5E                      	POP	SI
  5059 0000068B C3                      	retn
  5060                                  
  5061                                  	;EndProc SYS_RETURN
  5062                                  
  5063                                  ;---------------------------------------------------------------------------
  5064                                  ;
  5065                                  ; Procedure Name : CAL_LK
  5066                                  ;
  5067                                  ; Inputs:
  5068                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5069                                  ;		(DS NEED not be DOSDATA)
  5070                                  ;	[EXTERR] is set with error
  5071                                  ; Function:
  5072                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5073                                  ; Outputs:
  5074                                  ;	[EXTERR_CLASS] set
  5075                                  ;	[EXTERR_ACTION] set
  5076                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5077                                  ; Destroys SI, FLAGS
  5078                                  ;
  5079                                  ;---------------------------------------------------------------------------
  5080                                  
  5081                                  	;procedure CAL_LK,NEAR
  5082                                  CAL_LK:
  5083 0000068C 1E                      	PUSH	DS
  5084 0000068D 50                      	PUSH	AX
  5085 0000068E 53                      	PUSH	BX
  5086                                  
  5087                                  ;M048	Context DS		; DS:SI -> Table
  5088                                  ;
  5089                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5090                                  ; is DOSDATA
  5091                                  
  5092                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5093                                  	; 15/05/2019 - Retro DOS v4.0
  5094 0000068F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5095                                  
  5096                                  	; 18/07/2018
  5097                                  	;push	ss
  5098                                  	;pop	ds
  5099                                  
  5100 00000694 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5101                                  TABLK1:
  5102 00000698 AC                      	LODSB
  5103                                  
  5104 00000699 3CFF                    	CMP	AL,0FFH
  5105 0000069B 7409                    	JZ	short GOT_VALS	; End of table
  5106 0000069D 38D8                    	CMP	AL,BL
  5107 0000069F 7405                    	JZ	short GOT_VALS	; Got entry
  5108 000006A1 83C603                  	ADD	SI,3		; Next table entry
  5109                                  	; 15/08/2018
  5110 000006A4 EBF2                    	JMP	short TABLK1
  5111                                  
  5112                                  GOT_VALS:
  5113 000006A6 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5114                                  
  5115 000006A7 80FCFF                  	CMP	AH,0FFH
  5116 000006AA 7404                    	JZ	short NO_SET_ACT
  5117 000006AC 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5118                                  NO_SET_ACT:
  5119 000006B0 3CFF                    	CMP	AL,0FFH
  5120 000006B2 7403                    	JZ	short NO_SET_CLS
  5121 000006B4 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5122                                  NO_SET_CLS:
  5123 000006B7 AC                      	LODSB			; Get LOCUS
  5124                                  
  5125 000006B8 3CFF                    	CMP	AL,0FFH
  5126 000006BA 7403                    	JZ	short NO_SET_LOC
  5127 000006BC A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5128                                  NO_SET_LOC:
  5129 000006BF 5B                      	POP	BX
  5130 000006C0 58                      	POP	AX
  5131 000006C1 1F                      	POP	DS
  5132 000006C2 C3                      	retn
  5133                                  
  5134                                  	;EndProc CAL_LK
  5135                                  
  5136                                  ;---------------------------------------------------------------------------
  5137                                  ;
  5138                                  ; Procedure Name : ETAB_LK
  5139                                  ;
  5140                                  ; Inputs:
  5141                                  ;	AX is error code
  5142                                  ;	[USER_IN_AX] has AH value of system call involved
  5143                                  ; Function:
  5144                                  ;	Make sure error code is appropriate to this call.
  5145                                  ; Outputs:
  5146                                  ;	AX MAY be mapped error code
  5147                                  ;	[EXTERR] = Input AX
  5148                                  ; Destroys ONLY AX and FLAGS
  5149                                  ;
  5150                                  ;---------------------------------------------------------------------------
  5151                                  
  5152                                  	;procedure ETAB_LK,NEAR
  5153                                  
  5154                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5155 000006C3 1E                      	PUSH	DS
  5156 000006C4 56                      	PUSH	SI
  5157 000006C5 51                      	PUSH	CX
  5158 000006C6 53                      	PUSH	BX
  5159                                  
  5160                                  	;Context DS			; SS is DOSDATA
  5161                                  
  5162 000006C7 16                      	push	ss
  5163 000006C8 1F                      	pop	ds
  5164                                  
  5165 000006C9 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5166                                  
  5167                                  					; I21_MAP_E_TAB is now in DOSCODE
  5168 000006CC BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5169 000006CF 88C7                    	MOV	BH,AL			; Real code to BH
  5170 000006D1 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5171                                  TABLK2:
  5172                                  	; 15/05/2019 - Retro DOS v4.0
  5173 000006D5 2E                      	cs
  5174 000006D6 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5175                                  	
  5176                                  	; 18/07/2018 - Retro DOS v3.0
  5177                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5178                                  
  5179 000006D7 3CFF                    	CMP	AL,0FFH 		; End of table?
  5180 000006D9 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5181 000006DB 38D8                    	CMP	AL,BL			; Found call?
  5182 000006DD 740C                    	JZ	short GOT_CALL		; Yes
  5183 000006DF 86E0                    	XCHG	AH,AL			; Count to AL
  5184 000006E1 30E4                    	XOR	AH,AH			; Make word for add
  5185 000006E3 01C6                    	ADD	SI,AX			; Next table entry
  5186 000006E5 EBEE                    	JMP	short TABLK2
  5187                                  
  5188                                  NOT_IN_TABLE:
  5189 000006E7 88F8                    	MOV	AL,BH			; Restore original code
  5190 000006E9 EB0C                    	JMP	SHORT NO_MAP
  5191                                  
  5192                                  GOT_CALL:
  5193 000006EB 88E1                    	MOV	CL,AH
  5194 000006ED 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5195                                  CHECK_CODE:
  5196                                  	; 15/05/2019 - Retro DOS v4.0
  5197 000006EF 2E                      	cs
  5198 000006F0 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5199                                  
  5200                                  	; 18/07/2018
  5201                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5202                                  
  5203 000006F1 38F8                    	CMP	AL,BH			; Code OK?
  5204 000006F3 7402                    	JZ	short NO_MAP		; Yes
  5205 000006F5 E2F8                    	LOOP	CHECK_CODE
  5206                                  NO_MAP:
  5207 000006F7 30E4                    	XOR	AH,AH			; AX is now valid code
  5208 000006F9 5B                      	POP	BX
  5209 000006FA 59                      	POP	CX
  5210 000006FB 5E                      	POP	SI
  5211 000006FC 1F                      	POP	DS
  5212 000006FD C3                      	retn
  5213                                  
  5214                                  	;EndProc ETAB_LK
  5215                                  
  5216                                  ; 18/07/2018 - Retro DOS v3.0
  5217                                  ;---------------------------------------------------------------------------
  5218                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5219                                  
  5220                                  ;IF installed ; (*)
  5221                                  
  5222                                  ;---------------------------------------------------------------------------
  5223                                  ;
  5224                                  ; Procedure Name : SetBad
  5225                                  ;
  5226                                  ; SetBad sets up info for bad functions
  5227                                  ;
  5228                                  ;---------------------------------------------------------------------------
  5229                                  
  5230                                  SetBad:
  5231                                  	;mov	ax,1
  5232 000006FE B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5233                                  
  5234                                  	; MSDOS 3.3
  5235                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5236                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5237                                  
  5238                                  ;	set up ds to point to DOSDATA
  5239                                  
  5240                                  	; 15/05/2019 - Retro DOS v4.0
  5241                                  	; MSDOS 6.0
  5242 00000701 1E                      	push	ds
  5243                                  
  5244                                  	;getdseg <ds>
  5245 00000702 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5246                                  
  5247 00000707 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5248                                  
  5249 0000070C 1F                      	pop	ds	  	;hkn; restore ds
  5250                                  
  5251 0000070D F9                      	STC
  5252 0000070E C3                      	retn
  5253                                  
  5254                                  ;--------------------------------------------------------------------------
  5255                                  ;
  5256                                  ; Procedure Name : BadCall
  5257                                  ;
  5258                                  ; BadCall is the initial routine for bad function calls
  5259                                  ;
  5260                                  ;--------------------------------------------------------------------------
  5261                                  
  5262                                  BadCall:
  5263 0000070F E8ECFF                  	call	SetBad
  5264 00000712 CB                      	retf
  5265                                  
  5266                                  ;--------------------------------------------------------------------------
  5267                                  ;
  5268                                  ; OKCall always sets carry to off.
  5269                                  ;
  5270                                  ;-----------------------------------------------------------------------
  5271                                  
  5272                                  OKCall:
  5273 00000713 F8                      	CLC
  5274 00000714 CB                      	retf
  5275                                  
  5276                                  ;---------------------------------------------------------------------------
  5277                                  ;
  5278                                  ; Procedure Name : INT2F
  5279                                  ;
  5280                                  ; INT 2F handler works as follows:
  5281                                  ;   PUSH    AX
  5282                                  ;   MOV     AX,multiplex:function
  5283                                  ;   INT     2F
  5284                                  ;   POP     ...
  5285                                  ; The handler itself needs to make the AX available for the various routines.
  5286                                  ;
  5287                                  ;----------------------------------------------------------------------------
  5288                                  
  5289                                  ; 15/05/2019 - Retro DOS v4.0
  5290                                  
  5291                                  ;KERNEL_SEGMENT equ 70h
  5292                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5293                                  DOSBIODATASEG equ 70h
  5294                                  
  5295                                  ; retrodos4.s - offset in BIOSDATA
  5296                                  bios_i2f equ 5
  5297                                  
  5298                                  ;PUBLIC	Int2F
  5299                                  ;INT2F	PROC	FAR
  5300                                  
  5301                                  ; 15/05/2019
  5302                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5303                                  
  5304                                  ; 04/11/2022
  5305                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5306                                  
  5307                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5308                                  	; 18/07/2018 - Retro DOS v3.0
  5309                                  INT2F:
  5310                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5311                                  INT2FNT:
  5312                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5313 00000715 FB                      	STI
  5314                                  	;cmp	ah,11h
  5315 00000716 80FC11                  	CMP	AH,MultNET
  5316 00000719 750A                    	JNZ	short INT2FSHR
  5317                                  TestInstall:
  5318 0000071B 08C0                    	OR	AL,AL
  5319 0000071D 7403                    	JZ	short Leave2F
  5320                                  BadFunc:
  5321 0000071F E8DCFF                  	CALL	SetBad
  5322                                  
  5323                                  	;entry	Leave2F
  5324                                  Leave2F:
  5325 00000722 CA0200                  	RETF	2			; long return + clear flags off stack
  5326                                  
  5327                                  INT2FSHR:
  5328                                  	;cmp	ah,10h
  5329 00000725 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5330 00000728 74F1                    	JZ	short TestInstall	; yes, check for installation
  5331                                  INT2FNLS:
  5332                                  	;cmp	ah,14h
  5333 0000072A 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5334 0000072D 74EC                    	JZ	short TestInstall	; yes check for installation
  5335                                  INT2FDOS:
  5336                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5337                                  
  5338                                  	; 18/07/2018
  5339                                  	; MSDOS 3.3
  5340                                  	;;cmp	ah,12h	
  5341                                  	;CMP	AH,MultDOS
  5342                                  	;jz	short DispatchDOS
  5343                                  	;iret
  5344                                  
  5345                                  	; 15/05/2019
  5346                                  	; MSDOS 6.0
  5347                                  	;cmp	ah,12h	; 07/12/2022
  5348 0000072F 80FC12                  	CMP	AH,MultDOS
  5349 00000732 7503                    	JNZ	short check_win		;check if win386 broadcast
  5350 00000734 E9FC01                  	jmp	DispatchDOS
  5351                                  
  5352                                  	; .... win386 .... 
  5353                                  
  5354                                  check_win:
  5355                                  	;cmp	ah,16h
  5356 00000737 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5357 0000073A 7408                    	je	short Win386_Msg
  5358                                  
  5359                                  	; M044
  5360                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5361                                  	; of Windows. If so, do special action of going and saving last para
  5362                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5363                                  	; bug
  5364                                  
  5365 0000073C 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5366                                  	;jne	short next_i2f		; no, chain on
  5367                                  	; 15/12/2022
  5368                                  	;jmp	winold_swap		; yes, do desired action
  5369 0000073F 7442                    	je	short winold_swap
  5370 00000741 E90701                  	jmp	next_i2f
  5371                                  
  5372                                  	; 15/12/2022
  5373                                  ;next_i2f:
  5374                                  ;	;;;jmp	bios_i2f
  5375                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5376                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5377                                  ;	; 04/11/2022
  5378                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5379                                  
  5380                                  ;	IRET				; This assume that we are at the head
  5381                                  					; of the list
  5382                                  ;INT2F	ENDP
  5383                                  
  5384                                  ; 15/05/2019 - Retro DOS v4.0
  5385                                  
  5386                                  ; We have received a message from Win386. There are three possible
  5387                                  ; messages we could get from Win386:
  5388                                  ;
  5389                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5390                                  ;		  to the Win386 startup info structure.
  5391                                  ; Exit		- for this, we clear the IsWin386 flag.
  5392                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5393                                  ;		  has already been handled. this is indicated by setting
  5394                                  ;		  CX to a non-zero value.
  5395                                  
  5396                                  Win386_Msg:
  5397 00000744 1E                      	push	ds
  5398                                  
  5399                                  	;getdseg <DS>			; ds is DOSDATA
  5400 00000745 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5401                                  
  5402                                  	; For WIN386 2.xx instance data
  5403                                  
  5404 0000074A 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5405 0000074C 7503                    	jne	short Win386_Msg_exit
  5406 0000074E E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5407                                  Win386_Msg_exit:
  5408 00000751 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5409 00000753 7503                    	jne	short Win386_Msg_devcall
  5410 00000755 E92E01                  	jmp	Win386_Leaving
  5411                                  Win386_Msg_devcall:
  5412 00000758 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5413 0000075A 7503                    	jne	short Win386_Msg_init
  5414 0000075C E96501                  	jmp	Win386_Query
  5415                                  Win386_Msg_init:
  5416 0000075F 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5417 00000761 7403                    	je	short Win386_Starting
  5418 00000763 E9E400                  	jmp	win_nexti2f		; no, return
  5419                                  Win386_Starting:
  5420                                  	; 17/12/2022
  5421 00000766 F6C201                  	test	dl,1
  5422                                  	;test	dx,1			; is this really win386?
  5423 00000769 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5424 0000076B E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5425                                  Win386_vchk:
  5426                                  	; M018 -- start of block changes
  5427                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5428                                  	; than 030Ah, we skip the VxD presence check
  5429                                  
  5430                                  ;M067 -- Begin changes
  5431                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5432                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5433                                  ;So, we null out the VxD ptr before the check.
  5434                                  
  5435                                  	;mov	word [Win386_Info+6],0
  5436 0000076E C706[E70F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5437                                  	;mov	word [Win386_Info+8],0
  5438 00000774 C706[E90F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5439                                  
  5440                                  ;M067 -- End changes
  5441                                  
  5442                                  ;ifdef JAPAN
  5443                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5444                                  ;else
  5445 0000077A 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5446                                  ;endif
  5447                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5448 0000077E 724E                    	jb	short Win386_vxd
  5449 00000780 E9DF00                  	jmp	noVxD31
  5450                                  
  5451                                  	; 15/12/2022
  5452                                  winold_swap:
  5453 00000783 1E                      	push	ds
  5454 00000784 06                      	push	es
  5455 00000785 56                      	push	si
  5456 00000786 57                      	push	di
  5457 00000787 51                      	push	cx
  5458                                  
  5459                                  	;getdseg <ds>			;ds = DOSDATA
  5460 00000788 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5461                                  
  5462 0000078D 3C01                    	cmp	al,1			;swap Windows out call
  5463 0000078F 751B                    	jne	short swapin		;no, check if Swap in call
  5464 00000791 E89201                  	call	getwinlast
  5465 00000794 1E                      	push	ds
  5466 00000795 07                      	pop	es
  5467 00000796 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5468 00000798 31F6                    	xor	si,si
  5469 0000079A BF[0600]                	mov	di,WinoldPatch1
  5470 0000079D B90800                  	mov	cx,8
  5471 000007A0 FC                      	cld
  5472 000007A1 51                      	push	cx
  5473 000007A2 F3A4                    	rep	movsb			;save first 8 bytes
  5474 000007A4 59                      	pop	cx
  5475 000007A5 BF[CC0D]                	mov	di,WinoldPatch2
  5476 000007A8 F3A4                    	rep	movsb			;save next 8 bytes
  5477 000007AA EB1B                    	jmp	short winold_done
  5478                                  swapin:
  5479 000007AC 3C02                    	cmp	al,2			;swap Windows in call?
  5480 000007AE 7517                    	jne	short winold_done	;no, something else, pass it on
  5481 000007B0 E87301                  	call	getwinlast
  5482 000007B3 8EC6                    	mov	es,si
  5483 000007B5 31FF                    	xor	di,di
  5484 000007B7 BE[0600]                	mov	si,WinoldPatch1
  5485 000007BA B90800                  	mov	cx,8
  5486 000007BD FC                      	cld
  5487 000007BE 51                      	push	cx
  5488 000007BF F3A4                    	rep	movsb			;restore first 8 bytes
  5489 000007C1 59                      	pop	cx
  5490 000007C2 BE[CC0D]                	mov	si,WinoldPatch2
  5491 000007C5 F3A4                    	rep	movsb			;restore next 8 bytes
  5492                                  winold_done:
  5493 000007C7 59                      	pop	cx
  5494 000007C8 5F                      	pop	di
  5495 000007C9 5E                      	pop	si
  5496 000007CA 07                      	pop	es
  5497 000007CB 1F                      	pop	ds
  5498 000007CC EB7D                    	jmp	short next_i2f		;chain on
  5499                                  	; 15/12/2022
  5500                                  	;jmp	next_i2f	
  5501                                  
  5502                                  Win386_vxd:
  5503 000007CE 50                      	push	ax
  5504 000007CF 53                      	push	bx
  5505 000007D0 51                      	push	cx
  5506 000007D1 52                      	push	dx
  5507 000007D2 56                      	push	si
  5508 000007D3 57                      	push	di			; save regs !!dont change order!!
  5509                                  
  5510 000007D4 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5511 000007D8 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5512 000007DB 7421                    	je	short Vxd31		; N: continue
  5513                                  					; Y: save arena associated with 
  5514                                  					;    umb_head
  5515                                  
  5516 000007DD C606[D90D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5517                                  					; umb_arena
  5518 000007E2 1E                      	push	ds
  5519 000007E3 06                      	push	es
  5520                                  
  5521 000007E4 8CD8                    	mov	ax,ds
  5522 000007E6 8EC0                    	mov	es,ax			; es - > dosdata
  5523                                  
  5524 000007E8 8EDB                    	mov	ds,bx
  5525 000007EA 31F6                    	xor	si,si			; ds:si -> umb_head
  5526                                  
  5527 000007EC FC                      	cld
  5528                                  
  5529 000007ED BF[FA11]                	mov	di,UmbSave1
  5530 000007F0 B90B00                  	mov	cx,11
  5531 000007F3 F3A4                    	rep	movsb
  5532                                  
  5533 000007F5 BF[D40D]                	mov	di,UmbSave2
  5534                                  	;mov	cx,5
  5535                                  	; 18/12/2022
  5536 000007F8 B105                    	mov	cl,5
  5537 000007FA F3A4                    	rep	movsb	
  5538                                  
  5539 000007FC 07                      	pop	es
  5540 000007FD 1F                      	pop	ds			; M062 - End
  5541                                  
  5542                                  Vxd31:
  5543                                  	;test	byte [DOS_FLAG],2
  5544 000007FE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5545 00000803 7408                    	jz	short Dont_Supress		; M066
  5546 00000805 5F                      	pop	di				; M066
  5547 00000806 5E                      	pop	si				; M066
  5548 00000807 5A                      	pop	dx				; M066
  5549 00000808 59                      	pop	cx				; M066
  5550 00000809 5B                      	pop	bx				; M066
  5551 0000080A 58                      	pop	ax				; M066
  5552 0000080B EB55                    	jmp	short noVxD31			; M066
  5553                                  
  5554                                  	; We check here if the VxD is available in the root of the boot drive. 
  5555                                  	; We do an extended open to suppress any error messages
  5556                                  	
  5557                                  Dont_Supress:
  5558 0000080D A0[6900]                	mov	al,[BOOTDRIVE]
  5559 00000810 0440                    	add	al,'A' - 1		; get drive letter
  5560 00000812 A2[3010]                	mov	[VxDpath],al		; path is root of bootdrive
  5561                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5562                                  	;mov	al,0			; no extended attributes
  5563                                  	; 18/12/2022
  5564 00000815 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5565 00000818 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5566                                  					; no inherit, suppress crit err
  5567 0000081B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5568 0000081E BA0100                  	mov	dx,1			; fail if file does not exist
  5569 00000821 BE[3010]                	mov	si,VxDpath	
  5570                                  					; path of VxD file
  5571 00000824 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5572                                  
  5573 00000827 CD21                    	int	21h			; do extended open
  5574                                  
  5575 00000829 5F                      	pop	di
  5576 0000082A 5E                      	pop	si
  5577 0000082B 5A                      	pop	dx
  5578 0000082C 59                      	pop	cx
  5579                                  
  5580 0000082D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5581                                  
  5582                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5583                                  	; to indicate error to Windows after displaying message to user that 
  5584                                  	; VxD needs to be present to run Windows in enhanced mode.
  5585                                  
  5586 0000082F 52                      	push	dx
  5587 00000830 1E                      	push	ds
  5588 00000831 56                      	push	si
  5589 00000832 BE[CF09]                	mov	si,NoVxDErrMsg
  5590 00000835 0E                      	push	cs
  5591 00000836 1F                      	pop	ds
  5592 00000837 B96300                  	mov	cx,VxDMesLen ; 99	;
  5593 0000083A B402                    	mov	ah,2			; write char to console
  5594 0000083C FC                      	cld
  5595                                  vxdlp:
  5596 0000083D AC                      	lodsb
  5597 0000083E 86D0                    	xchg	dl,al			; get char in dl
  5598 00000840 CD21                    	int	21h
  5599 00000842 E2F9                    	loop	vxdlp
  5600                                  
  5601 00000844 5E                      	pop	si
  5602 00000845 1F                      	pop	ds
  5603 00000846 5A                      	pop	dx
  5604 00000847 5B                      	pop	bx
  5605 00000848 58                      	pop	ax			;all registers restored
  5606 00000849 41                      	inc	cx			;cx != 0 to indicate error
  5607                                  	; 15/12/22022
  5608                                  	;jmp	win_nexti2f		;chain on
  5609                                  	;jmp	short win_nexti2f
  5610                                  
  5611                                  	; 15/12/2022
  5612                                  win_nexti2f:
  5613 0000084A 1F                      	pop	ds
  5614                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5615                                  	; 15/12/2022
  5616                                  next_i2f:
  5617                                  	;;;jmp	bios_i2f
  5618                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5619                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5620                                  	; 04/11/2022
  5621 0000084B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5622                                  
  5623                                  VxDthere:
  5624 00000850 89C3                    	mov	bx,ax
  5625 00000852 B43E                    	mov	ah,CLOSE ; 3Eh
  5626 00000854 CD21                    	int	21h			;close the file
  5627                                  
  5628                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5629                                  
  5630                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5631                                  	;mov	bx,Win386_Info
  5632                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5633                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5634                                  	; 15/12/2022
  5635 00000856 C706[E70F][3010]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5636 0000085C 8C1E[E90F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5637                                  
  5638 00000860 5B                      	pop	bx
  5639 00000861 58                      	pop	ax
  5640                                  noVxD31:
  5641                                  	; M018; End of block changes
  5642                                  
  5643 00000862 800E[2F10]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5644 00000867 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5645                                  
  5646                                  	; M002;
  5647                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5648                                  
  5649 0000086C 52                      	push	dx			; M002
  5650 0000086D 89DA                    	mov	dx,bx			; M002
  5651                                  					; point ES:BX to Win386_Info ; M002
  5652 0000086F BB[E10F]                	mov	bx,Win386_Info 
  5653 00000872 895702                  	mov	[bx+2],dx		; M002
  5654 00000875 8C4704                  	mov	[bx+4],es		; M002
  5655 00000878 5A                      	pop	dx			; M002
  5656 00000879 1E                      	push	ds			; M002
  5657 0000087A 07                      	pop	es			; M002
  5658                                  	;jmp	win_nexti2f		; M002
  5659                                  	; 15/12/2022
  5660 0000087B EBCD                    	jmp	short win_nexti2f
  5661                                  
  5662                                  	; 15/12/2022
  5663                                  	; Code to return Win386 2.xx instance table
  5664                                  OldWin386Init:
  5665 0000087D 58                      	pop	ax			; discard ds pushed on stack
  5666 0000087E BE[CD11]                	mov	si,OldInstanceJunk 
  5667                                  					; ds:si = instance table
  5668 00000881 B84852                  	mov	ax,5248h ; 'RH'		; indicate instance data present
  5669                                  	;jmp	next_i2f
  5670                                  	; 15/12/2022
  5671 00000884 EBC5                    	jmp	short next_i2f
  5672                                  
  5673                                  Win386_Leaving:
  5674                                  	; 15/12/2022
  5675 00000886 F6C201                  	test 	dl,1
  5676                                  	;test	dx,1			; is this really win386?
  5677                                  	;jz	short Win386_Leaving_c
  5678                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5679                                  	; 15/12/2022
  5680 00000889 75BF                    	jnz	short win_nexti2f	
  5681                                  
  5682                                  Win386_Leaving_c:
  5683                                  					; M062 - Start
  5684 0000088B 803E[D90D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5685                                  					;    up.
  5686 00000890 7526                    	jne	short noumb		; N: not saved 
  5687 00000892 C606[D90D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5688                                  					;    previously saved umb_head
  5689 00000897 50                      	push	ax
  5690 00000898 06                      	push	es
  5691 00000899 51                      	push	cx
  5692 0000089A 56                      	push	si
  5693 0000089B 57                      	push	di
  5694                                  
  5695 0000089C A1[8C00]                	mov	ax,[UMB_HEAD]	
  5696 0000089F 8EC0                    	mov	es,ax
  5697 000008A1 31FF                    	xor	di,di			; es:di -> umb_head
  5698                                  
  5699 000008A3 FC                      	cld
  5700                                  
  5701 000008A4 BE[FA11]                	mov	si,UmbSave1
  5702 000008A7 B90B00                  	mov	cx,11
  5703 000008AA F3A4                    	rep	movsb
  5704 000008AC BE[D40D]                	mov	si,UmbSave2
  5705                                  	;mov	cx,5
  5706                                  	; 18/12/2022
  5707 000008AF B105                    	mov	cl,5
  5708 000008B1 F3A4                    	rep	movsb
  5709                                  
  5710 000008B3 5F                      	pop	di
  5711 000008B4 5E                      	pop	si
  5712 000008B5 59                      	pop	cx
  5713 000008B6 07                      	pop	es
  5714 000008B7 58                      	pop	ax
  5715                                  noumb:					; M062 - End
  5716 000008B8 8026[2F10]00            	and	byte [IsWin386],0	; Win386 is gone
  5717 000008BD 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5718 000008C2 EB86                    	jmp	short win_nexti2f
  5719                                  
  5720                                  ;	; 15/12/2022
  5721                                  ;	; Code to return Win386 2.xx instance table
  5722                                  ;OldWin386Init:
  5723                                  ;	pop	ax			; discard ds pushed on stack
  5724                                  ;	mov	si,OldInstanceJunk 
  5725                                  ;					; ds:si = instance table
  5726                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5727                                  ;	;jmp	next_i2f
  5728                                  ;	; 15/12/2022
  5729                                  ;	jmp	short _next_i2f
  5730                                  
  5731                                  Win386_Query:
  5732 000008C4 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5733 000008C7 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5734 000008C9 09C9                    	or	cx,cx			; is it an instance query?
  5735 000008CB 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5736 000008CD 41                      	inc	cx			; indicate that data is instanced
  5737                                  ;
  5738                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5739                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5740                                  ; M001;  
  5741                                  ; M001; OFFSETS STRUC
  5742                                  ; M001; 	Major_version	db	?
  5743                                  ; M001; 	Minor_version	db	?
  5744                                  ; M001; 	SaveDS		dw	?
  5745                                  ; M001; 	SaveBX		dw	?
  5746                                  ; M001; 	Indos		dw	?
  5747                                  ; M001; 	User_id		dw	?
  5748                                  ; M001; 	CritPatch	dw	?
  5749                                  ; M001; OFFSETS	ENDS
  5750                                  ; M001; 
  5751                                  ; M001; User_Id is the only variable really important for proper functioning  
  5752                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5753                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5754                                  ; M001; pass this table because Win386 depends on this table to get the 
  5755                                  ; M001; User_Id offset.
  5756                                  ; M001; 
  5757 000008CE BB[2110]                	mov	bx,Win386_DOSVars	; M001 
  5758 000008D1 1E                      	push	ds			; M001
  5759 000008D2 07                      	pop	es			; es:bx points at offset table ; M001
  5760 000008D3 EB41                    	jmp	short PopIret		; M001
  5761                                  
  5762                                  ; 15/12/2022
  5763                                  ;	; Code to return Win386 2.xx instance table
  5764                                  ;OldWin386Init:
  5765                                  ;	pop	ax			; discard ds pushed on stack
  5766                                  ;	mov	si,OldInstanceJunk 
  5767                                  ;					; ds:si = instance table
  5768                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5769                                  ;	;jmp	next_i2f
  5770                                  ;	; 15/12/2022
  5771                                  ;	jmp	short _next_i2f
  5772                                  
  5773                                  dosmgr_func:
  5774 000008D5 49                      	dec	cx
  5775 000008D6 7436                    	jz	short win386_patch	; call to patch DOS
  5776 000008D8 49                      	dec	cx
  5777 000008D9 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5778 000008DB 49                      	dec	cx
  5779 000008DC 743A                    	jz	short win386_size	; get size of DOS data structures
  5780 000008DE 49                      	dec	cx
  5781 000008DF 7441                    	jz	short win386_inst	; instance more data
  5782 000008E1 49                      	dec	cx
  5783 000008E2 7532                    	jnz	short PopIret		; no functions above this
  5784                                  
  5785                                  	; Get DOS device driver size -- es:di points at device driver header
  5786                                  	; In DOS 4.x, the para before the device header contains an arena 
  5787                                  	; header for the driver.
  5788                                  
  5789 000008E4 8CC0                    	mov	ax,es			; ax = device header segment
  5790                                  
  5791                                  	; We check to see if we have a memory arena for this device driver. 
  5792                                  	; The way to do this would be to look at the previous para to see if
  5793                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5794                                  	; in the arena is the same as the device header segment. These two 
  5795                                  	; checks together should take care of all cases
  5796                                  
  5797 000008E6 48                      	dec	ax			; get arena header
  5798 000008E7 06                      	push	es
  5799 000008E8 8EC0                    	mov	es,ax			; arena header for device driver
  5800                                  
  5801 000008EA 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5802 000008EE 7517                    	jnz	short cantsize		; no, cant size this driver
  5803 000008F0 40                      	inc	ax			; get back device header segment
  5804 000008F1 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5805 000008F5 7510                    	jnz	short cantsize		; no, not a proper arena
  5806                                  
  5807 000008F7 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5808 000008FB 07                      	pop	es
  5809                                  
  5810                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5811                                  	; Speed is not critical and so we choose the shortest method 
  5812                                  	; -- use "mul"
  5813                                  
  5814 000008FC BB1000                  	mov	bx,16
  5815 000008FF F7E3                    	mul	bx
  5816 00000901 89C1                    	mov	cx,ax
  5817 00000903 89D3                    	mov	bx,dx
  5818 00000905 EB09                    	jmp	short win386_done	; return with device driver size
  5819                                  cantsize:
  5820 00000907 07                      	pop	es
  5821 00000908 31C0                    	xor	ax,ax
  5822 0000090A 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5823 0000090C EB08                    	jmp	short PopIret		; return
  5824                                  
  5825                                  win386_patch:
  5826                                  	; dx contains bits marking the patches to be applied. We return 
  5827                                  	; the field with all bits set to indicate that all patches have been
  5828                                  	; done
  5829                                  
  5830 0000090E 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5831                                   	;jmp	short win386_done	; done, return
  5832                                  	; 15/12/2022
  5833                                  	; 15/12/2022
  5834                                  win386_done:
  5835 00000910 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5836 00000913 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5837                                  PopIret:
  5838 00000916 1F                      	pop	ds
  5839 00000917 CF                      	iret	
  5840                                  
  5841                                  win386_size:
  5842                                  	;Return the size of DOS data structures -- currently only CDS size
  5843                                  
  5844                                  	; 17/12/2022
  5845 00000918 F6C201                  	test	dl,1
  5846                                  	;test	dx,1			; check for CDS size bit
  5847 0000091B 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5848                                  
  5849 0000091D B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5850 00000920 EBEE                    	jmp	short win386_done	; return with the size
  5851                                  
  5852                                  win386_inst:
  5853                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device 
  5854                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5855                                  	; this by returning a status of not previously instanced. The basic 
  5856                                  	; structure of these things have not changed and so the current 
  5857                                  	; DOSMGR code should be able to work it out
  5858                                  
  5859 00000922 31D2                    	xor	dx,dx			; make sure dx has a not done value
  5860 00000924 EBF0                    	jmp	short PopIret		; skip done indication
  5861                                  
  5862                                  	; 15/12/2022
  5863                                  ;win386_done:
  5864                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5865                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5866                                  ;PopIret:
  5867                                  ;	pop	ds
  5868                                  ;	iret				; return back up the chain
  5869                                  
  5870                                  	; 15/12/2022
  5871                                  ;win_nexti2f:
  5872                                  	;pop	ds
  5873                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5874                                  
  5875                                  ;End WIN386 support
  5876                                  
  5877                                  ; 15/05/2019
  5878                                  
  5879                                  ;M044; Start of changes
  5880                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5881                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5882                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5883                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5884                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5885                                  ; in leading to a crash. Winoldap issues callouts when it swaps WIndows out
  5886                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5887                                  ; last para of the Windows memory block and then restore this para on the
  5888                                  ; Windows swapin callout. 
  5889                                  
  5890                                  getwinlast:
  5891                                  	; 07/12/2022
  5892 00000926 8B36[3003]              	mov	si,[CurrentPDB]
  5893 0000092A 4E                      	dec	si
  5894 0000092B 8EC6                    	mov	es,si
  5895 0000092D 2603360300              	add	si,[es:3]
  5896 00000932 C3                      	retn
  5897                                  
  5898                                  ; 15/12/2022
  5899                                  %if 0
  5900                                  winold_swap:
  5901                                  	push	ds
  5902                                  	push	es
  5903                                  	push	si
  5904                                  	push	di
  5905                                  	push	cx
  5906                                  
  5907                                  	;getdseg <ds>			;ds = DOSDATA
  5908                                  	mov	ds,[cs:DosDSeg]
  5909                                  
  5910                                  	cmp	al,1			;swap Windows out call
  5911                                  	jne	short swapin		;no, check if Swap in call
  5912                                  	call	getwinlast
  5913                                  	push	ds
  5914                                  	pop	es
  5915                                  	mov	ds,si			;ds = memory arena of Windows
  5916                                  	xor	si,si
  5917                                  	mov	di,WinoldPatch1
  5918                                  	mov	cx,8
  5919                                  	cld
  5920                                  	push	cx
  5921                                  	rep	movsb			;save first 8 bytes
  5922                                  	pop	cx
  5923                                  	mov	di,WinoldPatch2
  5924                                  	rep	movsb			;save next 8 bytes
  5925                                  	jmp	short winold_done
  5926                                  swapin:
  5927                                  	cmp	al,2			;swap Windows in call?
  5928                                  	jne	short winold_done	;no, something else, pass it on
  5929                                  	call	getwinlast
  5930                                  	mov	es,si
  5931                                  	xor	di,di
  5932                                  	mov	si,WinoldPatch1
  5933                                  	mov	cx,8
  5934                                  	cld
  5935                                  	push	cx
  5936                                  	rep	movsb			;restore first 8 bytes
  5937                                  	pop	cx
  5938                                  	mov	si,WinoldPatch2
  5939                                  	rep	movsb			;restore next 8 bytes
  5940                                  winold_done:
  5941                                  	pop	cx
  5942                                  	pop	di
  5943                                  	pop	si
  5944                                  	pop	es
  5945                                  	pop	ds
  5946                                  	jmp	next_i2f		;chain on
  5947                                  
  5948                                  %endif
  5949                                  
  5950                                  ;M044; End of changes
  5951                                  
  5952                                  ; 15/05/2019
  5953                                  
  5954                                  DispatchDOS:
  5955 00000933 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5956 00000938 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5957 0000093D 50                      	PUSH	AX			; push index
  5958 0000093E 55                      	PUSH	BP
  5959 0000093F 89E5                    	MOV	BP,SP
  5960                                  		; stack looks like:
  5961                                  		;   0	BP
  5962                                  		;   2	DISPATCH
  5963                                  		;   4	TABLE
  5964                                  		;   6	RETURN
  5965                                  		;   8	LONG-RETURN
  5966                                  		;   C	FLAGS
  5967                                  		;   E	AX
  5968                                  	
  5969 00000941 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5970 00000944 5D                      	POP	BP
  5971 00000945 E82009                  	call	TableDispatch
  5972 00000948 E9D4FD                  	JMP	BadFunc 		; return indicates invalid function
  5973                                  
  5974                                  INT2F_etcetera:
  5975                                  	;entry	DosGetGroup
  5976                                  DosGetGroup:
  5977                                  	; MSDOS 3.3
  5978                                  	;push	cs
  5979                                  	;pop	ds
  5980                                  	;retn
  5981                                  
  5982                                  	; MSDOS 6.0
  5983                                  ;SR; Cannot use CS now
  5984                                  ;
  5985                                  ;	PUSH	CS
  5986                                  ;	POP	DS
  5987                                  
  5988                                  	; 04/11/2022
  5989                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  5990                                  
  5991                                  	;getdseg <ds>
  5992 0000094B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5993 00000950 C3                      	retn
  5994                                  
  5995                                  	;entry	DOSInstall
  5996                                  DOSInstall:
  5997 00000951 B0FF                    	MOV	AL,0FFh
  5998 00000953 C3                      	retn
  5999                                  
  6000                                  ;ENDIF ; (*)
  6001                                  
  6002                                  
  6003                                  ; 15/05/2019 - Retro DOS v4.0
  6004                                  
  6005                                  ;------------------------------------------------------------------------
  6006                                  ;
  6007                                  ; Procedure Name : RW32_CONVERT
  6008                                  ;
  6009                                  ;Input: same as ABSDRD and ABSDWRT
  6010                                  ;	 ES:BP -> DPB
  6011                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6012                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6013                                  ;	 carry clear, parms ok
  6014                                  ;
  6015                                  ;------------------------------------------------------------------------
  6016                                  
  6017                                  RW32_CONVERT:
  6018 00000954 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6019 00000957 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6020 00000959 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6021 0000095A 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6022 0000095B 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6023 0000095F 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6024 00000963 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6025 00000966 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6026                                  	;INC	DL			;>32mb			;AN000;
  6027                                  	; 17/12/2022
  6028 00000968 42                      	inc	dx
  6029 00000969 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6030 0000096B F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6031 0000096D 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6032                                  letold:
  6033 0000096F 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6034 00000970 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6035 00000971 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6036                                  
  6037 00000973 1E                      	push	ds
  6038                                  	;getdseg <ds>
  6039 00000974 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6040 00000979 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6041 0000097F 1F                      	pop	ds
  6042                                  
  6043 00000980 F9                      	STC				;>32mb			;AN000;
  6044 00000981 C3                      	retn				;>32mb			;AN000;
  6045                                  
  6046                                  new32format:
  6047                                  	;mov	dx,[bx+2]
  6048 00000982 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6049                                  
  6050 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6051                                  	;getdseg <ds>
  6052 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6053 0000098B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6054 0000098F 1F                      	pop	ds
  6055                                  
  6056 00000990 8B17                    	mov	dx,[bx]
  6057                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6058                                  	;mov	cx,[bx+4]
  6059 00000992 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6060                                  	;lds	bx,[bx+6]
  6061 00000995 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6062                                  old_style:				;>32mb			;AN000;
  6063 00000998 F8                      	CLC				;>32mb			;AN000;
  6064 00000999 C3                      	retn				;>32mb			;AN000;
  6065                                  
  6066                                  ;------------------------------------------------------------------------
  6067                                  ;
  6068                                  ; Procedure Name : Fastxxx_Purge
  6069                                  ;
  6070                                  ; Input: None
  6071                                  ; Functions: Purge Fastopen/ Cache Buffers
  6072                                  ; Output: None
  6073                                  ;
  6074                                  ;------------------------------------------------------------------------
  6075                                  
  6076                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6077                                  
  6078                                  Fastxxx_Purge:
  6079 0000099A 50                      	PUSH	AX			; save regs.	;AN000;
  6080 0000099B 56                      	PUSH	SI						;AN000;
  6081 0000099C 52                      	PUSH	DX						;AN000;
  6082                                  topen:
  6083 0000099D 1E                      	push	ds			; set up ds to DOSDATA
  6084                                  	;getdseg <ds>
  6085 0000099E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6086                                  
  6087 000009A3 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6088                                  					; fastopen installed ?	;AN000;
  6089 000009A8 1F                      	pop	ds
  6090 000009A9 740B                    	JZ	short nofast		; no			;AN000;
  6091 000009AB B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6092                                  dofast:
  6093 000009AD B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6094                                  	;;mov	dl,[es:bp+0]
  6095                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6096                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6097                                  	; 15/12/2022
  6098 000009AF 268A5600                	mov	dl,[es:bp]
  6099                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6100 000009B3 E8B51D                  	call	Fast_Dispatch
  6101                                  nofast:
  6102 000009B6 5A                      	POP	DX						;AN000;
  6103 000009B7 5E                      	POP	SI			; restore regs		;AN000;
  6104 000009B8 58                      	POP	AX			 			;AN000;
  6105 000009B9 C3                      	retn				; exit
  6106                                  
  6107                                  ;============================================================================
  6108                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6109                                  ;============================================================================
  6110                                  ; 29/04/2019 - Retro DOS v4.0
  6111                                  
  6112                                  ;include dossym.inc
  6113                                  ;include dosmac.inc
  6114                                  ;include doscntry.inc
  6115                                  
  6116                                  ; DOSCODE Segment
  6117                                  
  6118                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6119                                  ; ---------------------------------------------------------------------------
  6120                                  ;include divmes.inc
  6121                                  
  6122                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6123                                  ; -------------------------------------
  6124                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6125                                  
  6126                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6127                                  	;PUBLIC	DIVMES
  6128                                  
  6129 000009BA 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6129 000009C3 6F766572666C6F770D-
  6129 000009CC 0A                 
  6130                                  
  6131                                  	;PUBLIC	DivMesLen
  6132                                  DivMesLen:
  6133 000009CD 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6134                                  
  6135                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6136                                  ; -------------------------------------
  6137                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6138                                  
  6139                                  ; (MSDOS 6.0)
  6140                                  ; VxD not found error message
  6141                                  
  6142                                  NoVxDErrMsg:
  6143 000009CF 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6143 000009D8 686176652074686520-
  6143 000009E1 66696C652057494E41-
  6143 000009EA 32302E33383620696E-
  6143 000009F3 2074686520726F6F74-
  6143 000009FC 206F6620796F757220-
  6143 00000A05 626F6F742064726976-
  6143 00000A0E 65                 
  6144 00000A0F 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6144 00000A18 57696E646F77732069-
  6144 00000A21 6E20456E68616E6365-
  6144 00000A2A 64204D6F64650D0A   
  6145                                  
  6146                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6147                                  
  6148                                  ; 13/05/2019 - Retro DOS v4.0
  6149                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6150                                  
  6151                                  ;include yesno.asm  (MNSDOS 6.0)
  6152                                  ; -------------------------------------
  6153                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6154                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6155                                  
  6156                                  ; This is for country Yes and No
  6157                                  
  6158 00000A32 59                      NLS_YES:	db 'Y'
  6159 00000A33 4E                      NLS_NO:		db 'N'
  6160 00000A34 79                      NLS_yes2:	db 'y'
  6161 00000A35 6E                      NLS_no2:	db 'n'
  6162                                  
  6163                                  ; ---------------------------------------------------------------------------
  6164                                  
  6165                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6166                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6167                                  
  6168                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6169                                  
  6170                                  ; The following two tables implement the current buffered input editing
  6171                                  ; routines. The tables are pairwise associated in reverse order for ease
  6172                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6173                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6174                                  
  6175                                  	;PUBLIC	CANCHAR
  6176                                  CANCHAR:
  6177 00000A36 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6178                                  	
  6179                                  	;PUBLIC	ESCCHAR
  6180                                  ESCCHAR:
  6181 00000A37 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6182                                  	
  6183                                  	;IF	NOT Rainbow
  6184                                  
  6185                                  ESCTAB:	; LABEL BYTE
  6186                                  
  6187                                  	;IF	IBM
  6188 00000A38 40                      	DB	64		; Ctrl-Z - F6
  6189 00000A39 4D                      	DB	77		; Copy one char - -->
  6190 00000A3A 3B                      	DB	59		; Copy one char - F1
  6191 00000A3B 53                      	DB	83		; Skip one char - DEL
  6192 00000A3C 3C                      	DB	60		; Copy to char - F2
  6193 00000A3D 3E                      	DB	62		; Skip to char - F4
  6194 00000A3E 3D                      	DB	61		; Copy line - F3
  6195 00000A3F 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6196 00000A40 3F                      	DB	63		; Reedit line (new template) - F5
  6197 00000A41 4B                      	DB	75		; Backspace - <--
  6198 00000A42 52                      	DB	82		; Enter insert mode - INS (toggle)
  6199 00000A43 52                      	DB	82		; Exit insert mode - INS (toggle)
  6200 00000A44 41                      	DB	65		; Escape character - F7
  6201 00000A45 41                      	DB	65		; End of table
  6202                                  	;ENDIF
  6203                                  
  6204                                  ESCEND: ; LABEL BYTE
  6205                                  
  6206                                  ESCTABLEN EQU ESCEND-ESCTAB
  6207                                  
  6208                                  ESCFUNC: ; LABEL WORD
  6209                                  	
  6210 00000A46 [6314]                  	short_addr  GETCH	; Ignore the escape sequence
  6211 00000A48 [5315]                  	short_addr  TWOESC
  6212 00000A4A [DB15]                  	short_addr  EXITINS
  6213 00000A4C [DB15]                  	short_addr  ENTERINS
  6214 00000A4E [DD14]                  	short_addr  BACKSP
  6215 00000A50 [C715]                  	short_addr  REEDIT
  6216 00000A52 [CA14]                  	short_addr  KILNEW
  6217 00000A54 [5A15]                  	short_addr  COPYLIN
  6218 00000A56 [8D15]                  	short_addr  SKIPSTR
  6219 00000A58 [6015]                  	short_addr  COPYSTR
  6220 00000A5A [8315]                  	short_addr  SKIPONE
  6221 00000A5C [6515]                  	short_addr  COPYONE
  6222 00000A5E [6515]                  	short_addr  COPYONE
  6223 00000A60 [E315]                  	short_addr  CTRLZ
  6224                                  
  6225                                  	;ENDIF
  6226                                  
  6227                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6228                                  ; ---------------------------------------------------------------------------
  6229                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6230                                  
  6231                                  ; OEMFunction key is expected to process a single function
  6232                                  ;   key input from a device and dispatch to the proper
  6233                                  ;   routines leaving all registers UNTOUCHED.
  6234                                  ;
  6235                                  ; Inputs:   CS, SS are DOSGROUP
  6236                                  ; Outputs:  None. This function is expected to JMP to onw of
  6237                                  ;           the following labels:
  6238                                  ;
  6239                                  ;           GetCh       - ignore the sequence
  6240                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6241                                  ;           ExitIns     - toggle insert mode
  6242                                  ;           EnterIns    - toggle insert mode
  6243                                  ;           BackSp      - move backwards one space
  6244                                  ;           ReEdit      - reedit the line with a new template
  6245                                  ;           KilNew      - discard the current line and start from scratch
  6246                                  ;           CopyLin     - copy the rest of the template into the line
  6247                                  ;           SkipStr     - read the next character and skip to it in the template
  6248                                  ;           CopyStr     - read next char and copy from template to line until char
  6249                                  ;           SkipOne     - advance position in template one character
  6250                                  ;           CopyOne     - copy next character in template into line
  6251                                  ;           CtrlZ       - place a ^Z into the template
  6252                                  ; Registers that are allowed to be modified by this function are:
  6253                                  ;           AX, CX, BP
  6254                                  
  6255                                  ; 13/05/2019 - Retro DOS v4.0
  6256                                  ; -------------------------------------
  6257                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6258                                  
  6259                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6260                                  ; -------------------------------------
  6261                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6262                                  
  6263                                  OEMFunctionKey:
  6264 00000A62 E85D09                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6265 00000A65 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6266 00000A67 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6267 00000A68 BF[380A]                	MOV     DI,ESCTAB		; offset of second byte table
  6268 00000A6B 06                      	push	es
  6269 00000A6C 0E                      	push	cs
  6270 00000A6D 07                      	pop	es
  6271 00000A6E F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6272 00000A70 07                      	pop	es
  6273 00000A71 5F                      	POP     DI                      ; restore DI
  6274 00000A72 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6275 00000A74 89CD                    	MOV     BP,CX                   ; move to indexable register
  6276                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6277 00000A76 2EFFA6[460A]            	JMP	word [CS:BP+ESCFUNC]
  6278                                  
  6279                                  ;DOSCODE ENDS
  6280                                  	
  6281                                  ;============================================================================
  6282                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6283                                  ;============================================================================
  6284                                  ; Retro DOS v3.0 - 18/07/2018
  6285                                  
  6286                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6287                                  ;----------------------------------------------------------------------------
  6288                                  ; Retro DOS v2.0 - 13/03/2018
  6289                                  
  6290                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6291                                  
  6292                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6293                                  
  6294                                  ;**	$GET_DATE - Get Current Date
  6295                                  ;----------------------------------------
  6296                                  ;	ENTRY	none
  6297                                  ;	EXIT	(cx:dx) = current date
  6298                                  ;	USES	all
  6299                                  
  6300                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6301                                  
  6302                                  _$GET_DATE:	;System call 42
  6303                                  
  6304 00000A7B 16                              PUSH    SS
  6305 00000A7C 1F                              POP     DS
  6306 00000A7D E8B900                          CALL	READTIME        ;Check for rollover to next day
  6307 00000A80 A1[5203]                        MOV     AX,[YEAR]
  6308                                  
  6309                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6310                                  
  6311 00000A83 8B1E[5003]                      MOV     BX,[DAY]	; fetch both day and month
  6312 00000A87 E805FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6313                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6314 00000A8A 895C06                  	MOV	[SI+user_env.user_DX],BX
  6315 00000A8D 05BC07                          ADD     AX,1980         ;Put bias back
  6316                                          ;MOV    [SI+4],AX  	;CX=year
  6317 00000A90 894404                  	MOV	[SI+user_env.user_CX],AX
  6318 00000A93 36A0[5603]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6319                                  RET20:	; 05/11/2022
  6320                                  RET24:	; 18/12/2022
  6321 00000A97 C3                      	RETN
  6322                                  
  6323                                  ;**	$SET_DATE - Set Current Date
  6324                                  ;----------------------------------------
  6325                                  ;	ENTRY	(cx:dx) = current date
  6326                                  ;	EXIT	(al) = -1 iff bad date
  6327                                  ;		(al) = 0 if ok
  6328                                  ;	USES	all
  6329                                  
  6330                                  _$SET_DATE:			;System call 43
  6331                                  
  6332 00000A98 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6333 00000A9A 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6334                                  	;JC	SHORT RET24	;Error if not big enough
  6335                                          ; 05/11/2022
  6336 00000A9E 72F7                    	jc	short RET20
  6337 00000AA0 83F977                  	CMP     CX,119          ;Year must be less than 2100
  6338 00000AA3 77F2                            JA      SHORT RET24
  6339 00000AA5 08F6                            OR      DH,DH
  6340                                          ;JZ	SHORT RET24
  6341                                   	; 05/11/2022
  6342 00000AA7 74EE                    	jz	short RET20
  6343 00000AA9 08D2                            OR      DL,DL
  6344                                          ;JZ	SHORT RET24	;Error if either month or day is 0
  6345                                  	; 05/11/2022
  6346 00000AAB 74EA                    	jz	short RET20
  6347 00000AAD 80FE0C                          CMP     DH,12           ;Check against max. month
  6348 00000AB0 77E5                            JA      SHORT RET24
  6349 00000AB2 16                              PUSH    SS
  6350 00000AB3 1F                              POP     DS
  6351                                  	;CALL	DODATE
  6352                                  	; 18/12/2022
  6353 00000AB4 E91801                  	jmp	DODATE
  6354                                  ;RET24:  
  6355                                  	;RETN
  6356                                  
  6357                                  ;**	$GET_TIME - Get Current Time
  6358                                  ;----------------------------------------
  6359                                  ;	ENTRY	none
  6360                                  ;	EXIT	(cx:dx) = current time
  6361                                  ;	USES	all
  6362                                  
  6363                                  _$GET_TIME:			;System call 44
  6364                                  
  6365 00000AB7 16                              PUSH    SS
  6366 00000AB8 1F                              POP     DS
  6367 00000AB9 E87D00                  	CALL	READTIME
  6368 00000ABC E8D0F9                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6369                                         ;MOV     [SI+6],DX
  6370 00000ABF 895406                  	MOV	[SI+user_env.user_DX],DX
  6371                                         ;MOV     [SI+4],CX
  6372 00000AC2 894C04                  	MOV	[SI+user_env.user_CX],CX
  6373 00000AC5 30C0                            XOR     AL,AL
  6374                                  RET26:  
  6375 00000AC7 C3                      	RETN
  6376                                  
  6377                                  ;**	$SET_TIME - Set Current Time
  6378                                  ;----------------------------------------
  6379                                  ;	ENTRY	(cx:dx) = time
  6380                                  ;	EXIT	(al) = 0 if 0k
  6381                                  ;		(al) = -1 if invalid
  6382                                  ;	USES	ALL
  6383                                  
  6384                                  _$SET_TIME:			;System call 45
  6385                                  
  6386 00000AC8 B0FF                            MOV     AL,-1           ;Flag in case of error
  6387 00000ACA 80FD18                          CMP     CH,24           ;Check hours
  6388 00000ACD 73F8                            JAE     SHORT RET26
  6389 00000ACF 80F93C                          CMP     CL,60           ;Check minutes
  6390 00000AD2 73F3                            JAE     SHORT RET26
  6391 00000AD4 80FE3C                          CMP     DH,60           ;Check seconds
  6392 00000AD7 73EE                            JAE     SHORT RET26
  6393 00000AD9 80FA64                          CMP     DL,100          ;Check 1/100's
  6394 00000ADC 73E9                            JAE     SHORT RET26
  6395 00000ADE 51                              PUSH    CX
  6396 00000ADF 52                              PUSH    DX
  6397 00000AE0 16                              PUSH    SS
  6398 00000AE1 1F                              POP     DS
  6399 00000AE2 BB[B603]                        MOV     BX,TIMEBUF
  6400 00000AE5 B90600                          MOV     CX,6
  6401 00000AE8 31D2                            XOR     DX,DX
  6402 00000AEA 89D0                            MOV     AX,DX
  6403 00000AEC 53                              PUSH    BX
  6404 00000AED E8AD3C                  	CALL	SETREAD
  6405 00000AF0 1E                              PUSH    DS
  6406 00000AF1 C536[2E00]                      LDS     SI,[BCLOCK]
  6407 00000AF5 E82F3C                  	CALL	DEVIOCALL2      ;Get correct day count
  6408 00000AF8 1F                              POP     DS
  6409 00000AF9 5B                              POP     BX
  6410 00000AFA E8D33C                  	CALL	SETWRITE
  6411 00000AFD 8F06[BA03]                      POP     WORD [TIMEBUF+4]
  6412 00000B01 8F06[B803]                      POP     WORD [TIMEBUF+2]
  6413 00000B05 C536[2E00]                      LDS     SI,[BCLOCK]
  6414 00000B09 E81B3C                  	CALL	DEVIOCALL2      ;Set the time
  6415 00000B0C 30C0                            XOR     AL,AL
  6416 00000B0E C3                              RETN
  6417                                  
  6418                                  ; 11/07/2018 - Retro DOS v3.0
  6419                                  ; Retro DOS v2.0 - 14/03/2018
  6420                                  
  6421                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6422                                  
  6423                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6424                                  ;----------------------------------------------------------
  6425                                  ; Date16 returns the current date in AX, current time in DX
  6426                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6427                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6428                                  
  6429                                  DATE16:
  6430                                  	
  6431                                  ;M048	Context DS
  6432                                  ;
  6433                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6434                                  ; is DOSDATA
  6435                                  
  6436                                  	;push	ss
  6437                                  	;pop	ds
  6438                                  
  6439                                  	;getdseg <ds>		; M048
  6440                                  
  6441                                  	; 13/05/2019 - Retro DOS v4.0
  6442 00000B0F 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6443                                  
  6444 00000B14 51                              PUSH    CX
  6445 00000B15 06                              PUSH    ES
  6446 00000B16 E82000                          CALL    READTIME
  6447 00000B19 07                              POP     ES
  6448 00000B1A D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6449 00000B1C D0E1                            SHL     CL,1
  6450 00000B1E D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6451 00000B20 D1E1                            SHL     CX,1
  6452 00000B22 D1E1                            SHL     CX,1
  6453 00000B24 D0EE                            SHR     DH,1            ;Count every two seconds
  6454 00000B26 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6455 00000B28 89CA                            MOV     DX,CX
  6456                                  
  6457                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6458                                  
  6459 00000B2A A1[5103]                        MOV     AX,[MONTH]	;Fetch month and year
  6460 00000B2D B104                            MOV     CL,4
  6461 00000B2F D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6462 00000B31 D1E0                            SHL     AX,1
  6463 00000B33 59                              POP     CX
  6464 00000B34 0A06[5003]                      OR      AL,[DAY]
  6465                                  RET21:
  6466 00000B38 C3                              RETN
  6467                                  
  6468                                  ;----------------------------------------------------------
  6469                                  
  6470                                  READTIME:
  6471                                  
  6472                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6473                                  ;Uses AX, CX, DX.
  6474                                  
  6475 00000B39 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6476 00000B3F 56                              PUSH    SI
  6477 00000B40 53                              PUSH    BX
  6478                                  
  6479 00000B41 BB[B603]                        MOV     BX,TIMEBUF
  6480                                  
  6481 00000B44 B90600                          MOV     CX,6
  6482 00000B47 31D2                            XOR     DX,DX
  6483 00000B49 89D0                            MOV     AX,DX
  6484 00000B4B E84F3C                  	CALL	SETREAD
  6485 00000B4E 1E                              PUSH    DS
  6486 00000B4F C536[2E00]                      LDS     SI,[BCLOCK]
  6487 00000B53 E8D13B                  	CALL	DEVIOCALL2      ;Get correct date and time
  6488 00000B56 1F                              POP     DS
  6489 00000B57 5B                              POP     BX
  6490 00000B58 5E                              POP     SI
  6491 00000B59 A1[B603]                        MOV     AX,[TIMEBUF]
  6492 00000B5C 8B0E[B803]                      MOV     CX,[TIMEBUF+2]
  6493 00000B60 8B16[BA03]                      MOV     DX,[TIMEBUF+4]
  6494 00000B64 3B06[5403]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6495                                          ;JZ	SHORT RET22
  6496 00000B68 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6497                                  	;cmp	ax,43830
  6498 00000B6A 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6499 00000B6D 733D                            JAE     SHORT RET22	;Ignore if too large
  6500 00000B6F A3[5403]                        MOV     [DAYCNT],AX
  6501 00000B72 56                              PUSH    SI
  6502 00000B73 51                              PUSH    CX
  6503 00000B74 52                              PUSH    DX              ;Save time
  6504 00000B75 31D2                            XOR     DX,DX
  6505                                  	;mov	cx,1461
  6506 00000B77 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6507 00000B7A F7F1                            DIV     CX              ;Compute number of 4-year units
  6508 00000B7C D1E0                            SHL     AX,1
  6509 00000B7E D1E0                            SHL     AX,1
  6510 00000B80 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6511 00000B82 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6512                                  
  6513 00000B84 BE[140D]                        MOV     SI,YRTAB        ;Table of days in each year
  6514                                  
  6515 00000B87 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6516 00000B8A D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6517 00000B8C 7304                            JNC     SHORT SK	;Extra half-year?
  6518 00000B8E 81C2C800                        ADD     DX,200
  6519                                  SK:
  6520 00000B92 E82400                          CALL    SETYEAR
  6521 00000B95 B101                            MOV     CL,1            ;At least at first month in year
  6522                                  
  6523 00000B97 BE[1C0D]                        MOV     SI,MONTAB       ;Table of days in each month
  6524                                          
  6525 00000B9A E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6526 00000B9D 880E[5103]                      MOV     [MONTH],CL
  6527 00000BA1 42                              INC     DX              ;Remainder is day of month (start with one)
  6528 00000BA2 8816[5003]                      MOV     [DAY],DL
  6529 00000BA6 E89700                          CALL    WKDAY           ;Set day of week
  6530 00000BA9 5A                              POP     DX
  6531 00000BAA 59                              POP     CX
  6532 00000BAB 5E                              POP     SI
  6533                                  RET22:  
  6534 00000BAC C3                      	RETN
  6535                                  
  6536                                  ;----------------------------------------------------------
  6537                                  
  6538                                  DSLIDE:
  6539 00000BAD B400                            MOV     AH,0
  6540                                  DSLIDE1:
  6541 00000BAF AC                              LODSB			;Get count of days
  6542 00000BB0 39C2                            CMP     DX,AX           ;See if it will fit
  6543                                          ;JB	SHORT RET23	;If not, done
  6544 00000BB2 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6545 00000BB4 29C2                            SUB     DX,AX
  6546 00000BB6 41                              INC     CX              ;Count one more month/year
  6547 00000BB7 EBF6                            JMP     SHORT DSLIDE1
  6548                                  
  6549                                  ;----------------------------------------------------------
  6550                                  
  6551                                  SETYEAR:
  6552                                  
  6553                                  ;Set year with value in CX. Adjust length of February for this year.
  6554                                  
  6555                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6556                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6557                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6558                                  ;	preserve DS as CHKYR is also called as a routine.
  6559                                  
  6560                                  	; MSDOS 6.0 (18/07/2018) ; *
  6561                                  
  6562                                  	;GETDSEG DS
  6563                                  
  6564                                  	;PUSH	CS  ; *
  6565                                  	;POP	DS  ; *
  6566                                  
  6567                                  	; 13/05/2019 - Retro DOS v4.0
  6568 00000BB9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6569                                  
  6570                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6571                                  	; 05/11/2022 
  6572                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6573                                  
  6574 00000BBE 880E[5203]                      MOV     [YEAR],CL
  6575                                  CHKYR:
  6576 00000BC2 F6C103                          TEST    CL,3            ;Check for leap year
  6577 00000BC5 B01C                            MOV     AL,28
  6578 00000BC7 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6579 00000BC9 FEC0                            INC     AL              ;Add leap day
  6580                                  SAVFEB:
  6581 00000BCB A2[1D0D]                	mov	[february],al
  6582                                          ;MOV	[MONTAB+1],AL   ;Store for February
  6583                                  RET23:  
  6584 00000BCE C3                      	RETN
  6585                                  
  6586                                  ;----------------------------------------------------------
  6587                                  
  6588                                  DODATE:
  6589 00000BCF E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6590 00000BD2 88F0                            MOV     AL,DH
  6591                                  
  6592 00000BD4 BB[1B0D]                        MOV     BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6593                                  
  6594 00000BD7 D7                              XLAT                    ;Look up days in month
  6595 00000BD8 38D0                            CMP     AL,DL
  6596 00000BDA B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6597                                          ;JB	SHORT RET25	;Error if too many days
  6598 00000BDC 72F0                            jb	short RET23 ; 18/07/2018
  6599 00000BDE E8D8FF                  	CALL    SETYEAR
  6600                                  ;
  6601                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6602                                  ;
  6603 00000BE1 8916[5003]                      MOV     [DAY],DX	;Set both day and month
  6604 00000BE5 D1E9                            SHR     CX,1
  6605 00000BE7 D1E9                            SHR     CX,1
  6606                                  	;mov	ax,1461
  6607 00000BE9 B8B505                          MOV     AX,FOURYEARS
  6608 00000BEC 89D3                            MOV     BX,DX
  6609 00000BEE F7E1                            MUL     CX
  6610 00000BF0 8A0E[5203]                      MOV     CL,[YEAR]
  6611 00000BF4 80E103                          AND     CL,3
  6612                                  
  6613 00000BF7 BE[140D]                        MOV     SI,YRTAB
  6614                                  
  6615 00000BFA 89C2                            MOV     DX,AX
  6616 00000BFC D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6617 00000BFE E85200                          CALL    DSUM            ;Add up the days in each year
  6618 00000C01 88F9                            MOV     CL,BH           ;Month of year
  6619                                  
  6620 00000C03 BE[1C0D]                        MOV     SI,MONTAB
  6621                                  
  6622 00000C06 49                              DEC     CX              ;Account for months starting with one
  6623 00000C07 E84900                          CALL    DSUM            ;Add up days in each month
  6624 00000C0A 88D9                            MOV     CL,BL           ;Day of month
  6625 00000C0C 49                              DEC     CX              ;Account for days starting with one
  6626 00000C0D 01CA                            ADD     DX,CX           ;Add in to day total
  6627 00000C0F 92                              XCHG    AX,DX           ;Get day count in AX
  6628 00000C10 A3[5403]                        MOV     [DAYCNT],AX
  6629 00000C13 56                              PUSH    SI
  6630 00000C14 53                              PUSH    BX
  6631 00000C15 50                              PUSH    AX
  6632                                  
  6633 00000C16 BB[B603]                        MOV     BX,TIMEBUF
  6634                                  
  6635 00000C19 B90600                          MOV     CX,6
  6636 00000C1C 31D2                            XOR     DX,DX
  6637 00000C1E 89D0                            MOV     AX,DX
  6638 00000C20 53                              PUSH    BX
  6639 00000C21 E8793B                  	CALL	SETREAD
  6640                                  
  6641 00000C24 1E                              PUSH    DS
  6642 00000C25 C536[2E00]                      LDS     SI,[BCLOCK]
  6643 00000C29 E8FB3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6644 00000C2C 1F                              POP     DS
  6645 00000C2D 5B                              POP     BX
  6646 00000C2E E89F3B                  	CALL	SETWRITE
  6647 00000C31 8F06[B603]                      POP     WORD [TIMEBUF]
  6648 00000C35 1E                              PUSH    DS
  6649 00000C36 C536[2E00]                      LDS     SI,[BCLOCK]
  6650 00000C3A E8EA3A                  	CALL	DEVIOCALL2      ;Set the date
  6651 00000C3D 1F                              POP     DS
  6652 00000C3E 5B                              POP     BX
  6653 00000C3F 5E                              POP     SI
  6654                                  WKDAY:
  6655 00000C40 A1[5403]                        MOV     AX,[DAYCNT]
  6656 00000C43 31D2                            XOR     DX,DX
  6657 00000C45 B90700                          MOV     CX,7
  6658 00000C48 40                              INC     AX
  6659 00000C49 40                              INC     AX              ;First day was Tuesday
  6660 00000C4A F7F1                            DIV     CX              ;Compute day of week
  6661 00000C4C 8816[5603]                      MOV     [WEEKDAY],DL
  6662 00000C50 30C0                            XOR     AL,AL           ;Flag OK
  6663                                  RET25:
  6664 00000C52 C3                      	RETN
  6665                                  
  6666                                  ;----------------------------------------------------------
  6667                                  
  6668                                  ;**	DSUM - Compute the sum of a string of bytes
  6669                                  ;
  6670                                  ;	ENTRY	(cx) = byte count
  6671                                  ;		(ds:si) = byte address
  6672                                  ;		(dx) = sum register, initialized by caller
  6673                                  ;	EXIT	(dx) updated
  6674                                  ;	USES	ax, cx, dx, si, flags
  6675                                  
  6676                                  DSUM:
  6677 00000C53 B400                            MOV     AH,0
  6678 00000C55 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6679                                         ;JCXZ	RET25 ; 18/07/2018
  6680                                  DSUM1:
  6681 00000C57 AC                              LODSB
  6682 00000C58 01C2                            ADD     DX,AX
  6683 00000C5A E2FB                            LOOP    DSUM1
  6684                                  DSUM9:
  6685 00000C5C C3                              RETN
  6686                                  
  6687                                  ;============================================================================
  6688                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6689                                  ;============================================================================
  6690                                  ; 29/04/2019 - Retro DOS v4.0
  6691                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6692                                  
  6693                                  ; 12/03/2018 - Retro DOS v2.0 
  6694                                  
  6695                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6696                                  ;NAME	GETSET
  6697                                  
  6698                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6699                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6700                                  
  6701                                  ;USERNUM:
  6702                                  ;	DW	0			; 24 bit user number
  6703                                  ;       DB      0
  6704                                  ;;	IF      IBM
  6705                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6706                                  ;;	ELSE
  6707                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6708                                  ;;	ENDIF
  6709                                  
  6710                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6711                                  ;; 08/07/2018 - Retro DOS v3.0
  6712                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6713                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6714                                  
  6715                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6716                                  ;----------------------------------------------------------------------------
  6717                                  
  6718                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6719                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6720                                  
  6721                                  _$GET_VERSION:
  6722                                  
  6723                                  ; Inputs:
  6724                                  ;       None
  6725                                  ; Function:
  6726                                  ;       Return MS-DOS version number
  6727                                  ; Outputs:
  6728                                  ;       OEM number in BH
  6729                                  ;       User number in BL:CX (24 bits)
  6730                                  ;       Version number as AL.AH in binary
  6731                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6732                                  
  6733                                  ; MSDOS 6.0
  6734                                  ;
  6735                                  ;	Fake_Count is used to lie about the version numbers to support
  6736                                  ;	old binarys. See ms_table.asm for more info.
  6737                                  ;
  6738                                  ;		if input al = 00
  6739                                  ;		  (bh) = OEM number			
  6740                                  ;		else if input al = 01
  6741                                  ;		  (bh) = version flags
  6742                                  ;		 
  6743                                  ;		       	 bits 0-2 = DOS internal revision
  6744                                  ;		       	 bits 3-7 = DOS type flags
  6745                                  ;		              bit 3    = DOS is in ROM
  6746                                  ;		              bit 4    = DOS in in HMA
  6747                                  ;		              bits 5-7 = reserved
  6748                                  ;               M007 change - only bit 3 is now valid. Other bits
  6749                                  ;               are 0 when AL = 1
  6750                                  
  6751                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6752                                  	;--------------------------------------
  6753                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6754                                  
  6755 00000C5D 16                              PUSH    SS
  6756 00000C5E 1F                              POP     DS
  6757 00000C5F 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6758 00000C63 8B0E[B203]                      MOV     CX,[USERNUM]
  6759                                  
  6760                                  	; 13/05/2019 - Retro DOS v4.0
  6761                                  
  6762                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6763                                  	;DOS flags
  6764                                  
  6765 00000C67 3C01                    	cmp	AL,1
  6766 00000C69 7502                    	jne	short Norm_Vers
  6767                                  
  6768                                  ;ifdef ROMDOS
  6769                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6770                                  ;				(DOSINROM = 8)
  6771                                  ;else
  6772 00000C6B 30FF                            xor     bh,bh		; Otherwise return 0
  6773                                  ;endif				;M007 end
  6774                                  
  6775                                  Norm_Vers:
  6776                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6777                                  
  6778                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6779                                  	; 13/05/2019 - Retro DOS v4.0
  6780 00000C6D 1E                      	push	ds		; Get the version number from the
  6781 00000C6E 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6782                                  	;mov	ax,[40h]
  6783 00000C72 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6784                                  	; 07/12/2022
  6785 00000C75 1F                      	pop	ds
  6786 00000C76 E816F8                  	call	Get_User_Stack
  6787                                  				; Put values for return registers
  6788                                  				; in the proper place on the user's	 
  6789                                  				; stack addressed by DS:SI
  6790                                          ;MOV	[SI+user_env.user_AX],AX
  6791 00000C79 8904                            MOV	[SI],AX			 
  6792                                  	;MOV	[SI+2],BX		 
  6793 00000C7B 895C02                  	mov	[SI+user_env.user_BX],BX 
  6794                                          ;MOV	[SI+4],CX
  6795 00000C7E 894C04                  	mov	[SI+user_env.user_CX],CX
  6796                                  
  6797 00000C81 C3                      	RETN
  6798                                  
  6799                                  ; 18/07/2018 - Retro DOS v3.0
  6800                                  
  6801                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6802                                  ;----------------------------------------------------------------------------
  6803                                  
  6804                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6805                                  ;
  6806                                  ;	ENTRY	none
  6807                                  ;	EXIT	(al) = value of VERIFY flag
  6808                                  ;	USES	all
  6809                                  
  6810                                  
  6811                                  _$GET_VERIFY_ON_WRITE:
  6812                                  
  6813                                  ;hkn; SS override
  6814 00000C82 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6815 00000C86 C3                      	retn
  6816                                  
  6817                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6818                                  ;
  6819                                  ;	ENTRY	(al) = value of VERIFY flag
  6820                                  ;	EXIT	none
  6821                                  ;	USES	all
  6822                                  
  6823                                  _$SET_VERIFY_ON_WRITE:
  6824                                  
  6825 00000C87 2401                    	AND	AL,1
  6826                                  ;hkn; SS override
  6827 00000C89 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6828                                  RET27:	; 18/07/2018
  6829 00000C8D C3                      	retn
  6830                                  
  6831                                  ; 19/07/2018 - Retro DOS v3.0
  6832                                  
  6833                                  ;BREAK <$International - return country-dependent information>
  6834                                  ;----------------------------------------------------------------------------
  6835                                  ;
  6836                                  ; Procedure Name : $INTERNATIONAL
  6837                                  ;
  6838                                  ; Inputs:
  6839                                  ;	MOV	AH,International
  6840                                  ;	MOV	AL,country	(al = 0 => current country)
  6841                                  ;      [MOV	BX,country]
  6842                                  ;	LDS	DX,block
  6843                                  ;	INT	21
  6844                                  ; Function:
  6845                                  ;	give users an idea of what country the application is running
  6846                                  ; Outputs:
  6847                                  ;	IF DX != -1 on input (get country)
  6848                                  ;	  AL = 0 means return current country table.
  6849                                  ;	  0<AL<0FFH means return country table for country AL
  6850                                  ;	  AL = 0FF means return country table for country BX
  6851                                  ;	  No Carry:
  6852                                  ;	     Register BX will contain the 16-bit country code.
  6853                                  ;	     Register AL will contain the low 8 bits of the country code.
  6854                                  ;	     The block pointed to by DS:DX is filled in with the information
  6855                                  ;	     for the particular country.
  6856                                  ;		BYTE  Size of this table excluding this byte and the next
  6857                                  ;		BYTE  Country code represented by this table
  6858                                  ;			A sequence of n bytes, where n is the number specified
  6859                                  ;			by the first byte above and is not > internat_block_max,
  6860                                  ;			in the correct order for being returned by the
  6861                                  ;			INTERNATIONAL call as follows:
  6862                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6863                                  ;		5 BYTE	Currency symbol null terminated
  6864                                  ;		2 BYTE	thousands separator null terminated
  6865                                  ;		2 BYTE	Decimal point null terminated
  6866                                  ;		2 BYTE	Date separator null terminated
  6867                                  ;		2 BYTE	Time separator null terminated
  6868                                  ;		1 BYTE	Bit field.  Currency format.
  6869                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6870                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6871                                  ;		1 BYTE	No. of significant decimal digits in currency
  6872                                  ;		1 BYTE	Bit field.  Time format.
  6873                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6874                                  ;		DWORD	Call address of case conversion routine
  6875                                  ;		2 BYTE	Data list separator null terminated.
  6876                                  ;	  Carry:
  6877                                  ;	     Register AX has the error code.
  6878                                  ;	IF DX = -1 on input (set current country)
  6879                                  ;	  AL = 0 is an error
  6880                                  ;	  0<AL<0FFH means set current country to country AL
  6881                                  ;	  AL = 0FF means set current country to country BX
  6882                                  ;	  No Carry:
  6883                                  ;	    Current country SET
  6884                                  ;	    Register AL will contain the low 8 bits of the country code.
  6885                                  ;	  Carry:
  6886                                  ;	     Register AX has the error code.
  6887                                  ;-----------------------------------------------------------------------------
  6888                                  
  6889                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6890                                  
  6891                                  ; 13/05/2019 - Retro DOS v4.0
  6892                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6893                                  
  6894                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6895                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6896                                  
  6897                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6898                                  	 
  6899 00000C8E 3CFF                    	CMP	AL,0FFH
  6900 00000C90 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6901 00000C92 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6902 00000C94 30FF                    	XOR	BH,BH
  6903                                  BX_HAS_CODE:
  6904 00000C96 1E                      	PUSH	DS
  6905 00000C97 07                      	POP	ES
  6906 00000C98 52                      	PUSH	DX
  6907 00000C99 5F                      	POP	DI			; User buffer to ES:DI
  6908                                  
  6909                                  ;hkn; SS is DOSDATA
  6910                                  ;	context DS
  6911                                  
  6912 00000C9A 16                      	push	ss
  6913 00000C9B 1F                      	pop	ds
  6914                                  
  6915 00000C9C 83FFFF                  	CMP	DI,-1
  6916 00000C9F 7465                    	JZ	short international_set
  6917 00000CA1 09DB                    	OR	BX,BX
  6918 00000CA3 7505                    	JNZ	short international_find
  6919                                  
  6920                                  ;hkn; country_cdpg is in DOSDATA segment.
  6921 00000CA5 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6922                                  
  6923 00000CA8 EB41                    	JMP	SHORT international_copy
  6924                                  
  6925                                  international_find:
  6926 00000CAA BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6927 00000CAD E80B00                  	CALL	international_get
  6928 00000CB0 725C                    	JC	short errtn
  6929 00000CB2 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6930 00000CB5 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6931 00000CB7 89D3                    	MOV	BX,DX			 ; put country back
  6932 00000CB9 EB40                    	JMP	SHORT international_ok3
  6933                                  
  6934                                  international_get:
  6935 00000CBB BE[0512]                	MOV	SI,COUNTRY_CDPG
  6936                                  
  6937                                  ;hkn; country_cdpg is in DOSDATA segment.
  6938                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6939                                  
  6940                                  	; MSDOS 3.3
  6941                                  	;;cmp	bx,[SI+63h]
  6942                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6943                                  	;jz	short RET27
  6944                                  
  6945                                  	; 13/05/2019 - Retro DOS v4.0
  6946                                  
  6947                                  	; MSDOS 6.0
  6948                                  	;cmp	bx,[ss:si+68h]
  6949 00000CBE 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6950 00000CC2 74C9                    	jz	short RET27			; return if equal
  6951                                  
  6952 00000CC4 89DA                    	MOV	DX,BX
  6953 00000CC6 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6954                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6955 00000CC8 B80014                  	mov	ax,1400h
  6956 00000CCB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6957                                  			; Return: AL = 00h not installed, OK to install
  6958                                  			; 01h not installed, not OK
  6959                                  			; FFh installed
  6960 00000CCD 3CFF                    	CMP	AL,0FFH
  6961 00000CCF 7516                    	JNZ	short interr		; not in memory
  6962                                  	;cmp	bp,0
  6963 00000CD1 09ED                    	or	bp,bp			; GetCntry ?
  6964 00000CD3 7507                    	JNZ	short stcdpg
  6965                                  	
  6966                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6967 00000CD5 B80414                  	mov     ax,1404h
  6968 00000CD8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6969                                  			; BX = code page, DX = country code,
  6970                                  			; DS:SI -> internal code page structure
  6971                                  			; ES:DI -> user buffer
  6972                                  			; Return: AL = status
  6973                                  
  6974 00000CDA EB05                    	JMP	short chkok
  6975                                  	
  6976                                  	;nop
  6977                                  
  6978                                  stcdpg:
  6979                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6980 00000CDC B80314                  	mov     ax,1403h
  6981 00000CDF CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  6982                                  			; DS:SI -> internal code page structure
  6983                                  			; BX = code page, DX = country code
  6984                                  			; Return: AL = status
  6985                                  chkok:
  6986 00000CE1 08C0                    	or	al,al			; success ?
  6987                                  	;retz				; yes
  6988 00000CE3 74A8                    	jz	short RET27
  6989                                  
  6990                                  setcarry:
  6991 00000CE5 F9                      	STC				; set carry
  6992 00000CE6 C3                      	retn
  6993                                  interr:
  6994 00000CE7 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  6995 00000CE9 EBFA                    	JMP	short setcarry
  6996                                  
  6997                                  international_copy:
  6998                                  
  6999                                  ;hkn; country_cdpg is in DOSDATA segment.
  7000                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7001                                  
  7002                                  	; MSDOS 3.3
  7003                                  	;;mov	bx,[SI+63h]
  7004                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7005                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7006                                  
  7007                                  	; 13/05/2019 - Retro DOS v4.0
  7008                                  
  7009                                  	; MSDOS 6.0
  7010                                  	;mov	bx,[ss:si+68h]
  7011 00000CEB 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7012 00000CEF BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7013                                  
  7014                                  	;mov	cx,24
  7015 00000CF2 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7016                                  
  7017                                  	; MSDOS 6.0
  7018                                  
  7019                                  ;hkn;	must set up DS to SS so that international info can be copied
  7020                                  	
  7021 00000CF5 1E                      	push	ds
  7022                                  
  7023 00000CF6 16                      	push	ss			; cs -> ss
  7024 00000CF7 1F                      	pop	ds
  7025                                  
  7026 00000CF8 F3A4                    	REP	MOVSB			; copy country info
  7027                                  
  7028                                  	; MSDOS 6.0
  7029                                  
  7030 00000CFA 1F                      	pop	ds	;hkn;	restore ds
  7031                                  
  7032                                  international_ok3:
  7033 00000CFB E891F7                  	call	Get_User_Stack
  7034                                  ;ASSUME	DS:NOTHING
  7035                                  	;MOV	[SI+2],BX
  7036 00000CFE 895C02                  	MOV	[SI+user_env.user_BX],BX
  7037                                  international_ok:
  7038 00000D01 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7039                                  ;SYS_RET_OK_jmp:
  7040                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7041                                  nono:	; 15/12/2022
  7042                                  SYS_RET_OK_jmp:
  7043 00000D03 E943F9                  	jmp	SYS_RET_OK
  7044                                  
  7045                                  international_set:
  7046                                  
  7047                                  ;hkn; ASSUME	DS:DOSGROUP
  7048                                  ;ASSUME	DS:DOSDATA
  7049                                  
  7050 00000D06 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7051 00000D09 E8AFFF                  	CALL	international_get
  7052 00000D0C 73F3                    	JNC	short international_ok
  7053                                  errtn:
  7054 00000D0E 3CFF                    	CMP	AL,0FFH
  7055 00000D10 7403                    	JZ	short errtn2
  7056                                  errtn1:
  7057 00000D12 E93DF9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7058                                  errtn2:
  7059                                  	;error	error_invalid_function	; NLSFUNC not existent
  7060                                  
  7061                                  	;mov	al,1
  7062 00000D15 B001                    	mov	al,error_invalid_function 
  7063 00000D17 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7064                                  ;errtn3:
  7065                                  ;	jmp	SYS_RET_ERR
  7066                                  
  7067                                  ;EndProc $INTERNATIONAL
  7068                                  
  7069                                  ; 19/07/2018
  7070                                  
  7071                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7072                                  
  7073                                  ;----------------------------------------------------------------------------
  7074                                  ;
  7075                                  ; Procedure Name : $GetExtCntry
  7076                                  ;
  7077                                  ; Inputs:
  7078                                  ;	if AL >= 20H
  7079                                  ;	  AL= 20H    capitalize single char, DL= char
  7080                                  ;	      21H    capitalize string, CX= string length
  7081                                  ;	      22H    capitalize ASCIIZ string
  7082                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7083                                  ;	      80H bit 0 = use normal upper case table
  7084                                  ;		      1 = use file upper case table
  7085                                  ;	   DS:DX points to string
  7086                                  ;
  7087                                  ;	else
  7088                                  ;
  7089                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7090                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7091                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7092                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7093                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7094                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7095                                  ;	INT	21
  7096                                  ; Function:
  7097                                  ;	give users extended country dependent information
  7098                                  ;	or capitalize chars
  7099                                  ; Outputs:
  7100                                  ;	  No Carry:
  7101                                  ;	     extended country info is succesfully returned
  7102                                  ;	  Carry:
  7103                                  ;	     Register AX has the error code.
  7104                                  ;	     AX=0, NO	 for YES/NO CHECK
  7105                                  ;		1, YES
  7106                                  ;----------------------------------------------------------------------------
  7107                                  
  7108                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7109                                  
  7110                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7111                                  
  7112                                  	; MSDOS 6.0
  7113                                  _$GetExtCntry:
  7114 00000D19 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7115 00000D1B 7269                    	JB	short notcap
  7116                                  capcap: 				;
  7117 00000D1D A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7118 00000D1F 7505                    	JNZ	short fileupper		; file upper case
  7119                                  
  7120                                  ;hkn; UCASE_TAB in DOSDATA
  7121 00000D21 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7122 00000D24 EB03                    	JMP	SHORT capit
  7123                                  
  7124                                  fileupper:
  7125                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7126 00000D26 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7127                                  capit:					;
  7128 00000D29 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7129 00000D2B 750D                    	JNZ	short chkyes		; no
  7130 00000D2D 88D0                    	MOV	AL,DL			; set up AL
  7131 00000D2F E81944                  	call	GETLET3 		; upper case it
  7132 00000D32 E85AF7                  	call	Get_User_Stack		; get user stack
  7133                                  	;mov	[si+6],al
  7134 00000D35 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7135 00000D38 EBC9                    	JMP	SHORT nono		; done
  7136                                  chkyes: 				;
  7137 00000D3A 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7138 00000D3C 7522                    	JNZ	short capstring		; no
  7139                                  
  7140 00000D3E 31C0                    	XOR	AX,AX			; presume NO
  7141                                  		      
  7142                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7143                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7144                                  
  7145                                  	; 06/08/2018 - Retro DOS v3.0
  7146                                  	; 13/05/2019 - Retro DOS v4.0
  7147                                  	;cmp	dl,'Y'
  7148 00000D40 2E3A16[320A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7149 00000D45 7416                    	JZ	short yesyes		; yes
  7150                                  	;cmp	dl,'y'
  7151 00000D47 2E3A16[340A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7152 00000D4C 740F                    	JZ	short yesyes		; yes
  7153                                  	;cmp	dl,'N'
  7154 00000D4E 2E3A16[330A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7155 00000D53 74AE                    	JZ	short nono		; no
  7156                                  	;cmp	dl,'n'
  7157 00000D55 2E3A16[350A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7158 00000D5A 74A7                    	JZ	short nono		; no
  7159                                  ;dbcs_char:				;
  7160 00000D5C 40                      	INC	AX			; not YES or NO
  7161                                  yesyes: 				;
  7162 00000D5D 40                      	INC	AX			; return 1
  7163                                  	; 15/12/2022
  7164                                  ;nono:	
  7165 00000D5E EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7166                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7167                                  	;jmp	SYS_RET_OK		; done
  7168                                  
  7169                                  capstring:				;
  7170 00000D60 89D6                    	MOV	SI,DX			; si=dx
  7171 00000D62 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7172 00000D64 750F                    	JNZ	short capascii		; no
  7173 00000D66 09C9                    	OR	CX,CX			; check count 0
  7174 00000D68 7499                    	JZ	short nono		; yes finished
  7175                                  concap: 				;
  7176 00000D6A AC                      	LODSB				; get char
  7177 00000D6B E8DD43                  	call	GETLET3 		; upper case it
  7178 00000D6E 8844FF                  	MOV	byte [SI-1],AL		; store back
  7179                                  ;next99: 				;
  7180 00000D71 E2F7                    	LOOP	concap			; continue
  7181 00000D73 EB8E                    	JMP	short nono		; done
  7182                                  capascii:				;
  7183 00000D75 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7184 00000D77 7545                    	JNZ	short capinval		; no
  7185                                  concap2:				;
  7186 00000D79 AC                      	LODSB				; get char
  7187 00000D7A 08C0                    	or	al,al			; end of string ?
  7188 00000D7C 7485                    	JZ	short nono		; yes
  7189 00000D7E E8CA43                  	call	GETLET3 		; upper case it
  7190 00000D81 8844FF                  	MOV	[SI-1],AL		; store back
  7191 00000D84 EBF3                    	JMP	short concap2 		; continue
  7192                                  
  7193                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7194                                  
  7195                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7196                                  ; _$GetExtCntry:
  7197                                  
  7198                                  notcap:
  7199 00000D86 83F905                  	CMP	CX,5			; minimum size is 5
  7200 00000D89 7279                    	jb	short sizeerror
  7201                                  
  7202                                  GEC_CONT:
  7203                                  ;hkn; SS is DOSDATA
  7204                                  	;context DS
  7205                                  
  7206 00000D8B 16                      	push	ss
  7207                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7208 00000D8C 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7209                                  	
  7210                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7211 00000D8D BE[0512]                	MOV	SI,COUNTRY_CDPG
  7212                                  
  7213 00000D90 83FAFF                  	CMP	DX,-1			; active country ?
  7214 00000D93 7503                    	JNZ	short GETCDPG 		; no
  7215                                  
  7216                                  ;hkn; use DS override to accesss country_cdpg fields
  7217                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7218                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7219 00000D95 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7220                                  					; get active country id;smr;use DS
  7221                                  GETCDPG:
  7222 00000D98 83FBFF                  	CMP	BX,-1			; active code page?
  7223 00000D9B 7503                    	JNZ	short CHKAGAIN		; no, check again
  7224                                  
  7225                                  ;hkn; use DS override to accesss country_cdpg fields
  7226                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7227                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7228 00000D9D 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7229                                  					; get active code page id;smr;Use DS
  7230                                  CHKAGAIN:
  7231                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7232 00000DA0 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7233                                  					; same as active country id?;smr;use DS
  7234 00000DA3 7552                    	JNZ	short CHKNLS		; no
  7235                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7236 00000DA5 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7237                                  					; same as active code pg id?;smr;use DS
  7238 00000DA8 754D                    	JNZ	short CHKNLS		; no
  7239                                  CHKTYPE:
  7240                                  	;mov	bx,[si+48h]
  7241 00000DAA 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7242                                  					; bx = sys code page id;smr;use DS
  7243 00000DAD 51                      	PUSH	CX			; save cx
  7244                                  	;mov	cx,[si+4Ah]
  7245 00000DAE 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7246                                  	;mov	si,COUNTRY_CDPG+76
  7247 00000DB1 BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7248                                  NXTENTRY:
  7249 00000DB4 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7250 00000DB6 740B                    	JZ	short FOUNDIT
  7251 00000DB8 83C605                  	ADD	SI,5			; next entry
  7252 00000DBB E2F7                    	LOOP	NXTENTRY
  7253 00000DBD 59                      	POP	CX
  7254                                  capinval:
  7255                                  	;error	error_invalid_function	; info type not found
  7256                                  	;mov	al,1
  7257 00000DBE B001                    	mov	al,error_invalid_function
  7258                                  ;SYS_RET_ERR_jmp:
  7259                                  	;jmp	SYS_RET_ERR
  7260                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7261                                  SYS_RET_ERR_jmp:
  7262 00000DC0 E98FF8                  	jmp	SYS_RET_ERR	
  7263                                  
  7264                                  FOUNDIT:
  7265 00000DC3 A4                      	MOVSB				; move info id byte
  7266 00000DC4 59                      	POP	CX			; restore char count
  7267                                  	;cmp	al,1
  7268 00000DC5 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7269 00000DC7 7415                    	JZ	short setsize
  7270 00000DC9 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7271 00000DCC B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7272                                  OK_RETN:
  7273 00000DCF F3A4                    	REP	MOVSB			; copy info
  7274 00000DD1 89C1                    	MOV	CX,AX			; CX = actual length returned
  7275 00000DD3 89D8                    	MOV	AX,BX			; return sys code page in ax
  7276                                  GETDONE:
  7277 00000DD5 E8B7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7278                                  	;mov	[si+4],cx 
  7279 00000DD8 894C04                  	MOV	[SI+user_env.user_CX],CX
  7280                                  	;jmp	SYS_RET_OK
  7281                                  	; 15/12/2022
  7282                                  	; 25/06/2019
  7283 00000DDB E96EF8                  	jmp	SYS_RET_OK_clc
  7284                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7285                                  	; 15/12/2022
  7286                                  ;nono_jmp:
  7287                                  	;jmp	short nono
  7288                                  setsize:
  7289 00000DDE 83E903                  	SUB	CX,3			; size after length field
  7290 00000DE1 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7291 00000DE3 7302                    	JAE	short setsize2		; no
  7292 00000DE5 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7293                                  setsize2:
  7294 00000DE7 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7295 00000DEA 83C702                  	ADD	DI,2			; update index
  7296 00000DED 83C602                  	ADD	SI,2
  7297 00000DF0 89C8                    	MOV	AX,CX
  7298 00000DF2 83C003                  	ADD	AX,3			; AX has the actual length
  7299 00000DF5 EBD8                    	JMP	short OK_RETN 		; go move it
  7300                                  CHKNLS:
  7301 00000DF7 30E4                    	XOR	AH,AH
  7302 00000DF9 50                      	PUSH	AX			; save info type
  7303 00000DFA 5D                      	POP	BP			; bp = info type
  7304                                  	
  7305                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7306 00000DFB B80014                  	mov     ax,1400h
  7307 00000DFE CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7308                                  			; Return: AL = 00h not installed, OK to install
  7309                                  			; 01h not installed, not OK
  7310                                  			; FFh installed
  7311 00000E00 3CFF                    	CMP	AL,0FFH
  7312 00000E02 7404                    	JZ	short NLSNXT		; in memory
  7313                                  
  7314                                  sizeerror:
  7315                                  	;error	error_invalid_function
  7316                                  	;mov	al,1
  7317 00000E04 B001                    	mov	al,error_invalid_function
  7318                                  	;jmp	SYS_RET_ERR
  7319                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7320                                  sys_ret_err_jmp2:
  7321 00000E06 EBB8                    	jmp	short SYS_RET_ERR_jmp
  7322                                  
  7323                                  NLSNXT: 
  7324                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7325 00000E08 B80214                  	mov     ax,1402h
  7326 00000E0B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7327                                  			; BP = subfunction, BX = code page
  7328                                  			; DX = country code, DS:SI -> internal code page structure
  7329                                  			; ES:DI -> user buffer, CX = size of user buffer
  7330                                  			; Return: AL = status
  7331                                  			; 00h successful
  7332                                  			; else DOS error code
  7333                                  
  7334 00000E0D 3C00                    	CMP	AL,0			; success ?
  7335 00000E0F 7505                    	JNZ	short NLSERROR
  7336                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7337 00000E11 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7338                                  			; ax = sys code page id;smr;use ds;
  7339                                  			;BUGBUG;check whether DS is OK after the above calls
  7340 00000E14 EBBF                    	JMP	short GETDONE
  7341                                  seterr:
  7342                                  	; 15/12/2022
  7343                                  NLSERROR:
  7344                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7345                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7346                                  	;jmp	short sys_ret_err_jmp2
  7347                                  	; 15/12/2022
  7348 00000E16 EBA8                    	jmp	short SYS_RET_ERR_jmp
  7349                                  
  7350                                  ;EndProc $GetExtCntry
  7351                                  
  7352                                  ; 13/05/2019 - Retro DOS v4.0
  7353                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7354                                  
  7355                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7356                                  ;----------------------------------------------------------------------------
  7357                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7358                                  ;
  7359                                  ;   System call format:
  7360                                  ;
  7361                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7362                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7363                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7364                                  ;	INT	21
  7365                                  ;
  7366                                  ;	ENTRY	(al) = n
  7367                                  ;		(bx) = code page
  7368                                  ;	EXIT	'C' clear
  7369                                  ;		  global code page is set	(set global code page)
  7370                                  ;		  (BX) = active code page id	(get global code page)
  7371                                  ;		  (DX) = system code page id	(get global code page)
  7372                                  ;		'C' set
  7373                                  ;		  (AX) = error code
  7374                                  
  7375                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7376                                  
  7377                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7378                                  	; DOSCODE:4BC9h
  7379                                  
  7380                                  _$GetSetCdPg:
  7381                                  
  7382                                  ;hkn; SS is DOSDATA
  7383                                  	;context DS
  7384                                  
  7385 00000E18 16                      	push	ss
  7386 00000E19 1F                      	pop	ds
  7387                                  
  7388                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7389 00000E1A BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7390                                  
  7391 00000E1D 3C01                    	CMP	AL,1		       ; get global code page
  7392 00000E1F 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7393                                  	
  7394                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7395                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7396 00000E21 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7397                                  					; get active code page id;smr;use ds
  7398                                  	;mov	dx,[si+48h]
  7399 00000E24 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7400                                  				  	; get sys code page id;smr;use ds
  7401 00000E27 E865F6                  	call	Get_User_Stack
  7402                                  ;ASSUME DS:NOTHING
  7403                                  	;mov	[si+2],bx
  7404 00000E2A 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7405                                  	;mov	[si+6],dx
  7406 00000E2D 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7407                                  OK_RETURN:
  7408                                  	; 15/12/2022
  7409                                  	;transfer SYS_RET_OK
  7410 00000E30 E916F8                  	jmp	SYS_RET_OK
  7411                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7412                                  	;jmp	short nono_jmp
  7413                                  
  7414                                  ;hkn; ASSUME DS:DOSGROUP
  7415                                  ;ASSUME	DS:DOSDATA
  7416                                  
  7417                                  setglpg:
  7418 00000E33 3C02                    	CMP	AL,2
  7419 00000E35 7531                    	JNZ	short nomem
  7420                                  	
  7421                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7422                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7423 00000E37 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7424                                  	
  7425                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7426 00000E3A B80014                  	mov     ax,1400h
  7427 00000E3D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7428                                  			; Return: AL = 00h not installed, OK to install
  7429                                  			; 01h not installed, not OK
  7430                                  			; FFh installed
  7431 00000E3F 3CFF                    	CMP	AL,0FFH
  7432 00000E41 7525                    	JNZ	short nomem		; not in memory
  7433                                  
  7434                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7435 00000E43 B80114                  	mov     ax,1401h
  7436 00000E46 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7437                                  			; DS:SI -> internal code page structure
  7438                                  			; BX = new code page, DX = country code???
  7439                                  			; Return: AL = status
  7440                                  			; 00h successful
  7441                                  			; else DOS error code
  7442                                  	;cmp	al,0
  7443 00000E48 08C0                    	or	al,al			; success ?
  7444 00000E4A 74E4                    	JZ	short OK_RETURN		; yes
  7445                                  
  7446 00000E4C 3C41                    	CMP	AL,65			; set device code page failed
  7447 00000E4E 75C6                    	JNZ	short seterr
  7448 00000E50 B84100                  	MOV	AX,65
  7449 00000E53 A3[2403]                	MOV	[EXTERR],AX
  7450                                  	;mov	byte [EXTERR_ACTION],6
  7451                                  	;mov	byte [EXTERR_CLASS],5
  7452                                  	;mov	byte [EXTERR_LOCUS],4
  7453 00000E56 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7454 00000E5B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7455 00000E60 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7456                                  	;transfer From_GetSet
  7457 00000E65 E9F2F7                  	jmp	From_GetSet
  7458                                  
  7459                                  	; 15/12/2022
  7460                                  ;seterr:
  7461                                  	;;;transfer SYS_RET_ERR
  7462                                  	;;jmp	SYS_RET_ERR
  7463                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7464                                  	;jmp	short NLSERROR
  7465                                  
  7466                                  nomem:
  7467                                  	;error	error_invalid_function ; function not defined
  7468                                  	;mov	al,1
  7469 00000E68 B001                    	mov	al,error_invalid_function
  7470 00000E6A EBAA                    	jmp	short seterr
  7471                                  
  7472                                  ;EndProc $GetSetCdPg
  7473                                  
  7474                                  ; 13/05/2019 - Retro DOS v4.0
  7475                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7476                                  
  7477                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7478                                  ;----------------------------------------------------------------------------
  7479                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7480                                  ;
  7481                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7482                                  ;		drive.
  7483                                  ;
  7484                                  ;	This call returns the same info in the same registers (except for the
  7485                                  ;	FAT pointer) as the old FAT pointer calls
  7486                                  ;
  7487                                  ;	ENTRY	DL = Drive number
  7488                                  ;	EXIT	AX = Sectors per allocation unit
  7489                                  ;		   = -1 if bad drive specified
  7490                                  ;		On User Stack
  7491                                  ;		    BX = Number of free allocation units
  7492                                  ;		    DX = Total Number of allocation units on disk
  7493                                  ;		    CX = Sector size
  7494                                  
  7495                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7496                                  
  7497                                  _$GET_DRIVE_FREESPACE:
  7498                                  
  7499                                  ;hkn; SS is DOSDATA
  7500                                  	;context DS
  7501 00000E6C 16                      	push	ss
  7502 00000E6D 1F                      	pop	ds
  7503                                  
  7504 00000E6E 88D0                    	MOV	AL,DL
  7505                                  	;invoke	GetThisDrv		; Get drive
  7506 00000E70 E8205D                  	call	GETTHISDRV
  7507                                  SET_AX_RET:
  7508 00000E73 7218                    	JC	short BADFDRV
  7509                                  	;invoke	DISK_INFO
  7510 00000E75 E8D71E                  	call	DISK_INFO
  7511 00000E78 87D3                    	XCHG	DX,BX
  7512 00000E7A 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7513 00000E7C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7514                                  DoSt:
  7515 00000E7E E80EF6                  	call	Get_User_Stack
  7516                                  ;ASSUME	DS:NOTHING
  7517                                  	;mov	[si+6],dx
  7518                                  	;mov	[si+4],cx
  7519                                  	;mov	[si+2],bx
  7520 00000E81 895406                  	MOV	[SI+user_env.user_DX],DX
  7521 00000E84 894C04                  	MOV	[SI+user_env.user_CX],CX
  7522 00000E87 895C02                  	MOV	[SI+user_env.user_BX],BX
  7523                                  	;MOV	[SI+user_env.user_AX],AX
  7524 00000E8A 8904                    	mov     [si],ax
  7525                                  	;return
  7526 00000E8C C3                      	retn
  7527                                  
  7528                                  BADFDRV:
  7529                                  	; MSDOS 3.3
  7530                                  	;;mov	al,0Fh
  7531                                  	;mov	al,error_invalid_drive	; Assume error
  7532                                  
  7533                                  	; 13/05/2019 - Retro DOS v4.0
  7534                                  
  7535                                  	; MSDOS 6.0 & MSDOS 3.3
  7536                                  	;invoke	FCB_RET_ERR
  7537 00000E8D E8D8F7                  	call	FCB_RET_ERR
  7538                                  	
  7539 00000E90 B8FFFF                  	MOV	AX,-1
  7540 00000E93 EBE9                    	JMP	short DoSt
  7541                                  
  7542                                  ;EndProc $GET_DRIVE_FREESPACE
  7543                                  
  7544                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7545                                  ;----------------------------------------------------------------------------
  7546                                  ;**	$Get_DMA - Get Disk Transfer Address
  7547                                  ;
  7548                                  ;	ENTRY	none
  7549                                  ;	EXIT	ES:BX is current transfer address
  7550                                  ;	USES	all
  7551                                  
  7552                                  _$GET_DMA:
  7553 00000E95 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7554 00000E9A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7555 00000E9F E8EDF5                  	call	Get_User_Stack
  7556                                  	;mov	[si+2],bx
  7557                                  	;mov	[si+10h],cx
  7558 00000EA2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7559 00000EA5 894C10                  	MOV	[SI+user_env.user_ES],CX
  7560 00000EA8 C3                      	retn
  7561                                  
  7562                                  ;**	$Set_DMA - Set Disk Transfer Address
  7563                                  ;----------------------------------------------------------------------------
  7564                                  ;	ENTRY	DS:DX is current transfer address
  7565                                  ;	EXIT	none
  7566                                  ;	USES	all
  7567                                  
  7568                                  _$SET_DMA:
  7569 00000EA9 368916[2C03]            	MOV	[SS:DMAADD],DX
  7570 00000EAE 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7571 00000EB3 C3                      	retn
  7572                                  
  7573                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7574                                  ;------------------------------------------------------------------------------
  7575                                  
  7576                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7577                                  ;-----------------------------------------------------
  7578                                  ;	ENTRY	none
  7579                                  ;	EXIT	(AL) = drive number
  7580                                  ;	USES	all
  7581                                  
  7582                                  _$GET_DEFAULT_DRIVE:
  7583 00000EB4 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7584 00000EB8 C3                      	retn
  7585                                  
  7586                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7587                                  ;-----------------------------------------------------
  7588                                  ;	ENTRY	(DL) = Drive number for new default drive
  7589                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7590                                  
  7591                                  _$SET_DEFAULT_DRIVE:
  7592 00000EB9 88D0                    	MOV	AL,DL
  7593 00000EBB FEC0                    	INC	AL			; A=1, B=2...
  7594 00000EBD E8B75C                  	call	GetVisDrv		; see if visible drive
  7595 00000EC0 7204                    	JC	short SETRET		; errors do not set
  7596 00000EC2 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7597                                  
  7598                                  SETRET:
  7599 00000EC6 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7600 00000ECA C3                      	retn
  7601                                  
  7602                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7603                                  ;----------------------------------------------------------------------------
  7604                                  
  7605                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7606                                  ;---------------------------------------------------
  7607                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7608                                  ;	contents of an interrupt vector.
  7609                                  ;
  7610                                  ;	ENTRY	(AL) = interrupt number
  7611                                  ;	EXIT	(ES:BX) = current interrupt vector
  7612                                  
  7613                                  _$GET_INTERRUPT_VECTOR:
  7614 00000ECB E83000                  	CALL	RECSET
  7615 00000ECE 26C41F                  	LES	BX,[ES:BX]
  7616 00000ED1 E8BBF5                  	call	Get_User_Stack
  7617                                  	;mov	[si+2],bx
  7618                                  	;mov	[si+10h],es
  7619 00000ED4 895C02                  	MOV	[SI+user_env.user_BX],BX
  7620 00000ED7 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7621 00000EDA C3                      	retn
  7622                                  
  7623                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7624                                  ;---------------------------------------------------
  7625                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7626                                  ;	contents of an interrupt vector.
  7627                                  ;
  7628                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7629                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7630                                  ;	for explanation.
  7631                                  ;
  7632                                  ;	ENTRY	(AL) = interrupt number
  7633                                  ;		(ds:dx) = desired new vector value
  7634                                  ;	EXIT	none
  7635                                  ;	USES	all
  7636                                  
  7637                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7638                                  ; 13/05/2019 - Retro DOS v4.0
  7639                                  
  7640                                  _$SET_INTERRUPT_VECTOR:
  7641 00000EDB E82000                  	CALL	RECSET
  7642 00000EDE FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7643 00000EDF 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7644 00000EE2 268C5F02                	MOV	[ES:BX+2],DS
  7645 00000EE6 FB                      	STI
  7646                                  					; M004, M068 - Start
  7647                                  	; MSDOS 6.0
  7648 00000EE7 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7649                                  					; Q: was the previous call an int 21
  7650                                  					;    exec call
  7651                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7652                                  	;jnz	short siv_1		; Y: go set count
  7653                                  	;retn				; N: return
  7654                                  	; 15/12/2022
  7655 00000EED 740E                    	jz	short siv_2
  7656                                  siv_1:	
  7657 00000EEF 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7658 00000EF5 7506                    	jne	short siv_2		 ; N: done 
  7659 00000EF7 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7660                                  					 ; dispatcher to turn A20 Off before 
  7661                                  					 ; returning to user.
  7662                                  siv_2:
  7663                                  	; 07/12/2022
  7664 00000EFD C3                      	retn				; M004, M068 - End
  7665                                  	
  7666                                  RECSET:
  7667 00000EFE 31DB                    	XOR	BX,BX
  7668 00000F00 8EC3                    	MOV	ES,BX
  7669 00000F02 88C3                    	MOV	BL,AL
  7670 00000F04 D1E3                    	SHL	BX,1
  7671 00000F06 D1E3                    	SHL	BX,1
  7672 00000F08 C3                      	retn
  7673                                  
  7674                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7675                                  ;-------------------------------------------------------------------------------------
  7676                                  
  7677                                  ;**	$Char_Oper - Manipulate Switch Character
  7678                                  ;
  7679                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7680                                  ;
  7681                                  ;	ENTRY	AL = function:
  7682                                  ;		    0 - read switch char
  7683                                  ;		    1 - set switch char (char in DL)
  7684                                  ;		    2 - read device availability
  7685                                  ;			Always returns available
  7686                                  ;		    3 - set device availability
  7687                                  ;			No longer supported (NOP)
  7688                                  ;	EXIT	(al) = 0xff iff error
  7689                                  ;		(al) != 0xff if ok
  7690                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7691                                  ;	USES	AL, DL
  7692                                  ;
  7693                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7694                                  ;		The character / is always returned for subfunction 0,
  7695                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7696                                  
  7697                                  ; 13/05/2019 - Retro DOS v4.0
  7698                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7699                                  
  7700                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7701                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7702                                  
  7703                                  _$CHAR_OPER:
  7704                                  	; MSDOS 6.0
  7705 00000F09 08C0                    	or	al,al				; get switch?
  7706 00000F0B B22F                    	mov	dl,'/'				; assume yes
  7707 00000F0D 7407                    	jz	short chop_1			; jump if yes
  7708 00000F0F 3C02                    	cmp	al,2				; check device availability?
  7709 00000F11 B2FF                    	mov	dl,-1				; assume yes
  7710 00000F13 7401                    	jz	short chop_1			; jump if yes
  7711 00000F15 C3                      	retn					; otherwise just quit
  7712                                  
  7713                                  ; subfunctions requiring return of value to user come here. DL holds
  7714                                  ; value to return
  7715                                  
  7716                                  chop_1:
  7717 00000F16 E876F5                  	call	Get_User_Stack
  7718 00000F19 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7719 00000F1C C3                      	retn
  7720                                  
  7721                                  	; MSDOS 3.3
  7722                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7723                                  	;push	ss
  7724                                  	;pop	ds
  7725                                  	;cmp	al,1
  7726                                  	;jb	short chop_1
  7727                                  	;jz	short chop_2
  7728                                  	;cmp	al,3
  7729                                  	;jb	short chop_3
  7730                                  	;jz	short chop_5
  7731                                  	;mov	al,0FFh
  7732                                  	;retn
  7733                                  ;chop_1:
  7734                                  	;mov	dl,[chSwitch]
  7735                                  	;jmp	short chop_4
  7736                                  ;chop_2:
  7737                                  	;mov	[chSwitch],dl
  7738                                  	;retn
  7739                                  ;chop_3:
  7740                                  	;mov	dl, FFh
  7741                                  ;chop_4:
  7742                                  	;call	Get_User_Stack
  7743                                  	;mov	[si+6],dx
  7744                                  ;chop_5:
  7745                                  	;retn
  7746                                  
  7747                                  ;**	$GetExtendedError - Return Extended error code
  7748                                  ;----------------------------------------------------------------------------
  7749                                  ;	This function reads up the extended error info from the static
  7750                                  ;	variables where it was stored.
  7751                                  ;
  7752                                  ;	ENTRY	none
  7753                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7754                                  ;		BL = recommended action
  7755                                  ;		BH = class of error
  7756                                  ;		CH = locus of error
  7757                                  ;		ES:DI = may be pointer
  7758                                  ;	USES	ALL
  7759                                  
  7760                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7761                                  
  7762                                  _$GetExtendedError:
  7763 00000F1D 16                      	push	ss
  7764 00000F1E 1F                      	pop	ds
  7765 00000F1F A1[2403]                	MOV	AX,[EXTERR]
  7766 00000F22 C43E[2803]              	LES	DI,[EXTERRPT]
  7767 00000F26 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7768 00000F2A 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7769 00000F2E E85EF5                  	call	Get_User_Stack
  7770                                  	;mov	[si+0Ah],di
  7771 00000F31 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7772                                  	;mov	[si+10h],es
  7773 00000F34 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7774                                  	;mov	[si+2],bx
  7775 00000F37 895C02                  	MOV	[SI+user_env.user_BX],BX
  7776                                  	;mov	[si+4],cx
  7777 00000F3A 894C04                  	MOV	[SI+user_env.user_CX],CX
  7778                                  jmp_SYS_RET_OK:
  7779                                  	; 15/12/2022
  7780                                  	;jmp	SYS_RET_OK
  7781                                  	; 25/06/2019
  7782 00000F3D E90CF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7783                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7784                                  ;jmp_SYS_RET_OK:
  7785                                  	;jmp	SYS_RET_OK
  7786                                  
  7787                                  ; --------------------------------------------------------------------------
  7788                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7789                                  	; DOSCODE:4CF3h
  7790                                  ;patch_or_unknown:
  7791                                  ;get_code_page:
  7792 00000F40 56                      	push    si
  7793 00000F41 BE[0512]                	mov     si, COUNTRY_CDPG
  7794                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7795 00000F44 368B446A                	mov     ax, [ss:si+6Ah]
  7796 00000F48 5E                      	pop     si
  7797 00000F49 C3                      	retn
  7798                                  ; --------------------------------------------------------------------------	
  7799                                  
  7800                                  ; 29/04/2019 - Retro DOS v4.0
  7801                                  
  7802                                  ;BREAK	<ECS_call - Extended Code System support function>
  7803                                  ;---------------------------------------------------------------------------
  7804                                  ; Inputs:
  7805                                  ;	AL = 0	get lead byte table
  7806                                  ;		on return DS:SI has the table location
  7807                                  ;
  7808                                  ;	AL = 1	set / reset interim console flag
  7809                                  ;		DL = flag (00H or 01H)
  7810                                  ;		no return
  7811                                  ;
  7812                                  ;	AL = 2	get interim console flag
  7813                                  ;		on return DL = current flag value
  7814                                  ;
  7815                                  ;	AL = OTHER then error, and returns with:
  7816                                  ;		AX = error_invalid_function
  7817                                  ;
  7818                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7819                                  ;	 SS:SP WILL BE PRESERVED!
  7820                                  ;---------------------------------------------------------------------------
  7821                                  
  7822                                  _$ECS_Call:
  7823 00000F4A 08C0                    	or	al,al			; AL = 0 (get table)?
  7824                                  	;jnz	short _okok
  7825                                  	; 15/12/2022
  7826 00000F4C 7403                    	jz	short get_lbt
  7827                                  ;_okok:
  7828 00000F4E E9F8F6                  	jmp	SYS_RET_OK
  7829                                  get_lbt:
  7830 00000F51 E83BF5                  	call	Get_User_Stack		; *
  7831                                  
  7832                                  ;hkn; dbcs_table moved low to dosdata
  7833                                  	;mov	word [si+8],DBCS_TAB+2
  7834 00000F54 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7835                                  
  7836 00000F59 06                      	push	es
  7837                                  	;getdseg <es>			; es = DOSDATA
  7838 00000F5A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7839                                  	;mov	[si+14],es
  7840 00000F5F 8C440E                  	mov	[SI+user_env.user_DS],es
  7841 00000F62 07                      	pop	es
  7842                                  
  7843                                  	; 15/12/2022
  7844 00000F63 EBD8                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7845                                  ;_okok:
  7846                                  	; 15/12/2022	
  7847                                  	;;transfer SYS_RET_OK
  7848                                  	;jmp	short jmp_SYS_RET_OK
  7849                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7850                                  	;;jmp	SYS_RET_OK
  7851                                  	;jmp	short jmp_SYS_RET_OK
  7852                                  
  7853                                  ;============================================================================
  7854                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7855                                  ;============================================================================
  7856                                  ; 19/07/2018 - Retro DOS v3.0
  7857                                  ; 15/05/2019 - Retro DOS v4.0
  7858                                  
  7859                                  ; System calls for parsing command lines
  7860                                  ;
  7861                                  ;   $PARSE_FILE_DESCRIPTOR
  7862                                  ;
  7863                                  ;   Modification history:
  7864                                  ;
  7865                                  ;       Created: ARR 30 March 1983
  7866                                  ;               EE PathParse 10 Sept 1983
  7867                                  ;
  7868                                  
  7869                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7870                                  ;---------------------------------------------------------------------------
  7871                                  ; Inputs:
  7872                                  ;       DS:SI Points to a command line
  7873                                  ;       ES:DI Points to an empty FCB
  7874                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7875                                  ;                   = 0 Parse stops if separator encountered
  7876                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7877                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7878                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7879                                  ;                   = 0  "       "      "       - put blanks in FCB
  7880                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7881                                  ;                   = 0  "       "      "        - put blanks in FCB
  7882                                  ; Function:
  7883                                  ;       Parse command line into FCB
  7884                                  ; Returns:
  7885                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7886                                  ;       DS:SI points to first character after filename
  7887                                  ;---------------------------------------------------------------------------
  7888                                  
  7889                                  _$PARSE_FILE_DESCRIPTOR:
  7890 00000F65 E88040                  	call	MAKEFCB
  7891 00000F68 56                      	PUSH    SI
  7892 00000F69 E823F5                  	call	Get_User_Stack
  7893                                  	;pop	word [si+8]
  7894 00000F6C 8F4408                  	POP     word [SI+user_env.user_SI]
  7895 00000F6F C3                      	retn
  7896                                  
  7897                                  ;============================================================================
  7898                                  ; MISC.ASM, MSDOS 6.0, 1991
  7899                                  ;============================================================================
  7900                                  ; 19/07/2018 - Retro DOS v3.0
  7901                                  
  7902                                  ; 29/04/2019 - Retro DOS v4.0
  7903                                  
  7904                                  ;ENTRYPOINTSEG	EQU	0CH
  7905                                  ;MAXDIF		EQU	0FFFH
  7906                                  ;SAVEXIT 	EQU	10
  7907                                  ;WRAPOFFSET	EQU	0FEF0h
  7908                                  
  7909                                  ;
  7910                                  ;----------------------------------------------------------------------------
  7911                                  ;
  7912                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7913                                  ;
  7914                                  ;	Return Stuff sort of like old get fat call
  7915                                  ;
  7916                                  ;	ENTRY	none
  7917                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7918                                  ;			GOD help anyone who tries to do ANYTHING except
  7919                                  ;			READ this ONE byte.
  7920                                  ;		DX = Total Number of allocation units on disk
  7921                                  ;		CX = Sector size
  7922                                  ;		AL = Sectors per allocation unit
  7923                                  ;		   = -1 if bad drive specified
  7924                                  ;	USES	all
  7925                                  ;
  7926                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7927                                  ;
  7928                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7929                                  ;
  7930                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7931                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7932                                  ;			GOD help anyone who tries to do ANYTHING except
  7933                                  ;			READ this ONE byte.
  7934                                  ;		DX = Total Number of allocation units on disk
  7935                                  ;		CX = Sector size
  7936                                  ;		AL = Sectors per allocation unit
  7937                                  ;		   = -1 if bad drive specified
  7938                                  ;	USES	all
  7939                                  ;
  7940                                  ;----------------------------------------------------------------------------
  7941                                  ;
  7942                                  
  7943                                  _$SLEAZEFUNC:
  7944                                  	; 15/05/2019 - Retro DOS v4.0
  7945 00000F70 B200                    	MOV	DL,0
  7946                                  _$SLEAZEFUNCDL:
  7947 00000F72 16                      	push	ss
  7948 00000F73 1F                      	pop	ds
  7949                                  	
  7950 00000F74 88D0                    	MOV	AL,DL
  7951 00000F76 E81A5C                  	call	GETTHISDRV		; Get CDS structure
  7952                                  SET_AL_RET:
  7953                                  	; MSDOS 3.3
  7954                                  	;;mov	al, 0Fh
  7955                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7956                                  	
  7957                                  	; MSDOS 6.0 & MSDOS 3.3
  7958 00000F79 721E                    	JC	short BADSLDRIVE
  7959                                  
  7960 00000F7B E8D11D                  	call	DISK_INFO
  7961                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7962 00000F7E 7219                    	jc	short BADSLDRIVE
  7963 00000F80 8826[9805]              	MOV	[FATBYTE],AH
  7964                                  
  7965                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7966                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7967                                  ; CALL AGAIN
  7968                                  
  7969 00000F84 BF[9805]                	MOV	DI,FATBYTE
  7970 00000F87 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7971 00000F89 E803F5                  	call	Get_User_Stack
  7972                                  	;mov	[si+4],cx
  7973                                  	;mov	[si+6],bx
  7974                                  	;mov	[si+2],di
  7975 00000F8C 894C04                  	MOV	[SI+user_env.user_CX],CX
  7976 00000F8F 895C06                  	MOV	[SI+user_env.user_DX],BX
  7977 00000F92 897C02                  	MOV	[SI+user_env.user_BX],DI
  7978                                  	
  7979                                  	;mov	[si+0Eh],ss
  7980 00000F95 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7981                                  
  7982 00000F98 C3                      	retn
  7983                                  
  7984                                  BADSLDRIVE:
  7985 00000F99 E9CCF6                  	jmp	FCB_RET_ERR
  7986                                  
  7987                                  ;
  7988                                  ;----------------------------------------------------------------------------
  7989                                  ;
  7990                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  7991                                  ;
  7992                                  ;	Returns location of DOS status for interrupt routines
  7993                                  ;									   ;
  7994                                  ;	ENTRY	none
  7995                                  ;	EXIT	(es:bx) = flag location
  7996                                  ;	USES	all
  7997                                  ;
  7998                                  ;----------------------------------------------------------------------------
  7999                                  ;
  8000                                  
  8001                                  _$GET_INDOS_FLAG:
  8002 00000F9C E8F0F4                          CALL	Get_User_Stack
  8003                                          ;MOV	WORD [SI+2],INDOS
  8004 00000F9F C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8005                                          ;MOV	[SI+10H],SS
  8006 00000FA4 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8007 00000FA7 C3                      	RETN 
  8008                                  
  8009                                  ;
  8010                                  ;----------------------------------------------------------------------------
  8011                                  ;
  8012                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8013                                  ;
  8014                                  ;	Return a pointer to interesting DOS variables This call is version
  8015                                  ;	dependent and is subject to change without notice in future versions.
  8016                                  ;	Use at risk.
  8017                                  ;
  8018                                  ;	ENTRY	none
  8019                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8020                                  ;	uses	ALL
  8021                                  ;
  8022                                  ;----------------------------------------------------------------------------
  8023                                  ;
  8024                                  
  8025                                  _$GET_IN_VARS:
  8026 00000FA8 E8E4F4                          CALL	Get_User_Stack
  8027                                          ;MOV	WORD [SI+2],SYSINITVAR
  8028                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8029 00000FAB C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8030                                          ;MOV	[SI+10H],SS
  8031 00000FB0 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8032 00000FB3 C3                      	RETN
  8033                                  
  8034                                  ;
  8035                                  ;----------------------------------------------------------------------------
  8036                                  ;
  8037                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8038                                  ;
  8039                                  ;	Return pointer to drive parameter table for default drive
  8040                                  ;
  8041                                  ;	ENTRY	none
  8042                                  ;	EXIT	(ds:bx) = DPB address
  8043                                  ;	USES	all
  8044                                  ;
  8045                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8046                                  ;
  8047                                  ;	Return pointer to a specified drive parameter table
  8048                                  ;
  8049                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8050                                  ;	EXIT	(al) = 0 iff ok
  8051                                  ;		  (ds:bx) = DPB address
  8052                                  ;		(al) = -1 if bad drive
  8053                                  ;	USES	all
  8054                                  ;
  8055                                  ;----------------------------------------------------------------------------
  8056                                  ;
  8057                                  
  8058                                  ; 15/05/2019 - Retro DOS v4.0
  8059                                  
  8060                                  _$GET_DEFAULT_DPB:
  8061 00000FB4 B200                    	MOV	DL,0
  8062                                  _$GET_DPB:
  8063 00000FB6 16                      	push	ss
  8064 00000FB7 1F                      	pop	ds
  8065                                  
  8066 00000FB8 88D0                    	MOV	AL,DL
  8067 00000FBA E8D65B                  	call	GETTHISDRV		; Get CDS structure
  8068 00000FBD 7222                    	JC	short ISNODRV 		; no valid drive
  8069 00000FBF C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8070                                  	;;test	word [es:di+43h],8000h
  8071                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8072                                  	;test	byte [es:di+44h],80h
  8073 00000FC3 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8074 00000FC8 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8075 00000FCA E88B03                  	call	ECritDisk
  8076 00000FCD E80148                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8077 00000FD0 E8A003                  	call	LCritDisk
  8078 00000FD3 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8079                                  					;   have.
  8080 00000FD5 E8B7F4                  	call	Get_User_Stack
  8081                                  	;mov	[si+2],bp
  8082 00000FD8 896C02                  	MOV	[SI+user_env.user_BX],BP
  8083                                  	;mov	[si+0Eh],es
  8084 00000FDB 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8085 00000FDE 30C0                    	XOR	AL,AL
  8086 00000FE0 C3                      	retn
  8087                                  ISNODRV:
  8088 00000FE1 B0FF                    	MOV	AL,-1
  8089 00000FE3 C3                      	retn
  8090                                  
  8091                                  ;
  8092                                  ;----------------------------------------------------------------------------
  8093                                  ;
  8094                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8095                                  ;
  8096                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8097                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8098                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8099                                  ;
  8100                                  ;	ENTRY	none
  8101                                  ;	EXIT	none
  8102                                  ;	USES	all
  8103                                  ;
  8104                                  ;----------------------------------------------------------------------------
  8105                                  ;
  8106                                  
  8107                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8108                                  	; DOSCODE:4D94h
  8109                                  _$DISK_RESET:
  8110                                  	; 15/05/2019 - Retro DOS v4.0
  8111 00000FE4 B0FF                    	mov	al,0FFh	; -1
  8112 00000FE6 16                      	push	ss
  8113 00000FE7 1F                      	pop	ds
  8114                                  	; 06/11/2022
  8115                                  	;MOV	AL,-1
  8116 00000FE8 E86D03                  	call	ECritDisk
  8117                                  	; MSDOS 6.0
  8118                                  	;;or	word [DOS34_FLAG],4
  8119                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8120 00000FEB 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8121 00000FF0 E84C4B                  	call	FLUSHBUF
  8122                                  	; MSDOS 6.0
  8123                                  	;and	word [DOS34_FLAG],0FFFBh
  8124                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8125                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8126                                  	; 15/12/2022
  8127 00000FF3 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8128 00000FF8 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8129                                  ;
  8130                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8131                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8132                                  ; let's do it.
  8133                                  ;
  8134                                  ; Invalidate 'last-buffer' used
  8135                                  ;
  8136 00000FFE BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8137 00001001 891E[2000]              	MOV	[LastBuffer+2],BX
  8138 00001005 891E[1E00]              	MOV	[LastBuffer],BX
  8139                                  
  8140                                  	; MSDOS 3.3 
  8141                                  	; IBMDOS.COM, Offset 1C66h
  8142                                  	;;;;
  8143                                  	;lds	si,[BUFFHEAD]
  8144                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8145                                  				; .buf_flags, AH = 0, reset/clear
  8146                                  ;DRST_1:
  8147                                  	;;mov	[si+4],ax
  8148                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8149                                  	;lds	si,[SI]
  8150                                  	;cmp	si,bx ; -1
  8151                                  	;je	short DRST_2
  8152                                  	;;mov	[si+4],ax
  8153                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8154                                  	;lds	si,[SI]
  8155                                  	;cmp	si,bx
  8156                                  	;jne	short DRST_1
  8157                                  	;;;;
  8158                                  ;DRST_2:
  8159 00001009 E86703                  	call	LCritDisk
  8160 0000100C B8FFFF                  	MOV	AX,-1
  8161                                  	; 07/12/2022
  8162                                  	;mov	ax,0FFFFh
  8163                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8164 0000100F 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8165 00001010 B82011                  	mov     ax,1120h
  8166 00001013 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8167                                  			; DS = DOS CS
  8168                                  			; Return: CF clear (successful)
  8169 00001015 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8170                                  	
  8171 00001016 C3                      	retn
  8172                                  
  8173                                  	; 19/07/2018 - Retro DOS v3.0
  8174                                  
  8175                                  ;
  8176                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8177                                  ;
  8178                                  ;----------------------------------------------------------------------------
  8179                                  ;
  8180                                  ;**	$SetDPB - Create a DPB
  8181                                  ;
  8182                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8183                                  ;
  8184                                  ;	ENTRY	ES:BP Points to DPB
  8185                                  ;		DS:SI Points to BPB
  8186                                  ;	EXIT	DPB setup
  8187                                  ;	USES	ALL but BP, DS, ES
  8188                                  ;
  8189                                  ;----------------------------------------------------------------------------
  8190                                  ;
  8191                                  
  8192                                  ; 10/05/2019 - Retro DOS v4.0
  8193                                  
  8194                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8195                                  
  8196                                  ; MSDOS 6.0
  8197 00001017 0300                    word3:	dw	3			; M008 -- word value for divides
  8198                                  
  8199                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8200                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8201                                  
  8202                                  ;procedure   $SETDPB,NEAR
  8203                                  
  8204                                  _$SETDPB:
  8205 00001019 89EF                    	MOV	DI,BP
  8206 0000101B 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8207 0000101E AD                      	LODSW
  8208 0000101F AB                      	STOSW				; dpb_sector_size
  8209                                  	; MSDOS 6.0
  8210                                  	;cmp	byte [si+3],0
  8211 00001020 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8212 00001024 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8213                                  	;mov	byte [es:di+4],0
  8214 00001026 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8215 0000102B EB70                    	JMP	short setend			     ; NO		;AN000;
  8216                                  
  8217                                  yesfat: ; 10/08/2018
  8218 0000102D 89C2                    	MOV	DX,AX
  8219 0000102F AC                      	LODSB
  8220                                  	;DEC	AL
  8221                                  	; 17/12/2022
  8222 00001030 48                      	dec	ax
  8223 00001031 AA                      	STOSB				; dpb_cluster_mask
  8224                                  	;INC	AL
  8225 00001032 40                      	inc	ax
  8226 00001033 30E4                    	XOR	AH,AH
  8227                                  LOG2LOOP:
  8228 00001035 A801                    	test	AL,1
  8229 00001037 7506                    	JNZ	short SAVLOG
  8230 00001039 FEC4                    	INC	AH
  8231 0000103B D0E8                    	SHR	AL,1
  8232 0000103D EBF6                    	JMP	SHORT LOG2LOOP
  8233                                  SAVLOG:
  8234 0000103F 88E0                    	MOV	AL,AH
  8235 00001041 AA                      	STOSB				; dpb_cluster_shift
  8236 00001042 88C3                    	MOV	BL,AL
  8237 00001044 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8238 00001045 AC                      	LODSB
  8239 00001046 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8240                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8241                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8242 00001047 88C7                    	MOV	BH,AL
  8243 00001049 AD                      	LODSW
  8244 0000104A AB                      	STOSW				; dpb_root_entries Number of directory entries
  8245 0000104B B105                    	MOV	CL,5
  8246 0000104D D3EA                    	SHR	DX,CL			; Directory entries per sector
  8247 0000104F 48                      	DEC	AX
  8248 00001050 01D0                    	ADD	AX,DX			; Cause Round Up
  8249 00001052 89D1                    	MOV	CX,DX
  8250 00001054 31D2                    	XOR	DX,DX
  8251 00001056 F7F1                    	DIV	CX
  8252 00001058 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8253 0000105A 47                      	INC	DI
  8254 0000105B 47                      	INC	DI			; Skip dpb_first_sector
  8255 0000105C A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8256 0000105D AC                      	LODSB
  8257                                  	;mov	[es:bp+17h],al
  8258 0000105E 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8259 00001062 AD                      	LODSW				; Number of sectors in a FAT
  8260                                  	
  8261                                  	;;;
  8262                                  	;MSDOS 3.3
  8263                                  	;
  8264                                  	;STOSB		; DPB.FAT_SIZE
  8265                                  	;MUL	BH
  8266                                  	
  8267                                  	;MSDOS 6.0
  8268                                  	;
  8269 00001063 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8270 00001064 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8271 00001066 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8272 00001068 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8273                                  	;;;
  8274                                  	
  8275                                  	;add	ax,[es:bp+6]
  8276 0000106A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8277 0000106E AB                      	STOSW				; dpb_dir_sector
  8278 0000106F 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8279                                  	;mov	[es:bp+0Bh],ax
  8280 00001071 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8281                                  	
  8282                                  	; MSDOS 6.0
  8283 00001075 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8284                                  	;;cmp	word [es:bp+0Dh],0
  8285                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8286                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8287                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8288                                  	; 15/12/2022
  8289                                  	; 28/07/2019
  8290 00001077 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8291 0000107B 09DB                    	or	bx,bx
  8292 0000107D 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8293                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8294                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8295                                  	
  8296                                  
  8297 0000107F 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8298                                  	;mov	bx,[si+8]
  8299 00001081 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8300                                  	;mov	dx,[si+10]
  8301 00001084 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8302 00001087 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8303 00001089 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8304 0000108C 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8305 0000108E 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8306                                  rott:					;AN000;;F.C. >32mb
  8307 00001090 F8                      	CLC				;AN000;;F.C. >32mb
  8308 00001091 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8309 00001093 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8310 00001095 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8311                                  norot:					;AN000;
  8312                                  	; 15/12/2022
  8313                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8314 00001097 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8315                                  normal_dpb:
  8316                                  	;;sub	ax,[es:bp+0Dh]
  8317                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8318                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8319                                  	; 15/12/2022
  8320                                  	; bx = [es:bp+DSKSIZ]
  8321                                  	;sub	ax,bx ; 28/07/2019
  8322                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8323                                  	; 15/12/2022
  8324 00001099 29C3                    	sub	bx,ax
  8325                                  	;NEG	AX			; Sectors in data area
  8326                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8327                                  	; 15/12/2022
  8328                                  	; CL = cluster shift
  8329                                  	; BX = number of data sectors 
  8330                                  	;SHR	AX,CL			; Div by sectors/cluster
  8331 0000109B D3EB                    	shr	bx,cl 
  8332                                  setend:
  8333                                  ;	M008 - CAS
  8334                                  ;
  8335                                  	; 15/12/2022
  8336 0000109D 43                      	inc	bx
  8337                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8338                                  ;
  8339                                  ;	There has been a bug in our fatsize calculation for so long
  8340                                  ;	  that we can't correct it now without causing some user to
  8341                                  ;	  experience data loss. There are even cases where allowing
  8342                                  ;	  the number of clusters to exceed the fats is the optimal
  8343                                  ;	  case -- where adding 2 more fat sectors would make the
  8344                                  ;	  data field smaller so that there's nothing to use the extra
  8345                                  ;	  fat sectors for.
  8346                                  ;
  8347                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8348                                  ;	  still report that there was a cluster left when the disk was
  8349                                  ;	  actually full. Very graceful failure for a corrupt system
  8350                                  ;	  configuration. There may be worse cases that were never
  8351                                  ;	  properly traced back to this bug. The problem cases only
  8352                                  ;	  occurred when partition sizes were very near FAT sector
  8353                                  ;	  rounding boundaries, which were rare cases.
  8354                                  ;
  8355                                  ;	Also, it's possible that some third-party partition program might
  8356                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8357                                  ;	  scheme. In this hypothetical case, the number of allocation
  8358                                  ;	  clusters which don't actually have FAT entries to represent
  8359                                  ;	  them might be larger and might create a more catastrophic
  8360                                  ;	  failure. So we'll provide the safeguard of limiting the
  8361                                  ;	  max_cluster to the amount that will fit in the FATs.
  8362                                  ;
  8363                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8364                                  
  8365                                  ;	make sure the number of fat sectors is actually enough to
  8366                                  ;	  hold that many clusters. otherwise, back the number of
  8367                                  ;	  clusters down
  8368                                  
  8369                                  	; 15/12/2022
  8370                                  	; bx = number of clusters
  8371                                  
  8372                                  	; 19/07/2018 - Retro DOS v3.0
  8373                                  	; MSDOS 6.0
  8374                                  	; 15/12/2022
  8375                                  	;mov	bx,ax			; remember calculated # clusters
  8376                                  
  8377                                  	; 01/08/2018 (MSDOS 3.3)
  8378                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8379                                  	;xor	ah,ah 
  8380                                  
  8381                                  	; 10/05/2019 - Retro DOS v4.0
  8382                                  	;mov	ax,[ES:BP+0Fh]
  8383 0000109E 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8384                                  
  8385                                  	;mul	word [es:bp+2]	
  8386 000010A2 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8387 000010A6 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8388 000010AA 720D                    	jb	short setend_fat12
  8389 000010AC D1EA                    	shr	dx,1
  8390                                  
  8391                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8392                                  	; 15/12/2022
  8393                                  ;cs3 7/2/92
  8394 000010AE 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8395                                  					; than enough for the maximum FAT,
  8396                                  					; so go ahead and use the calculated
  8397                                  					; number of clusters.
  8398                                  ;cs3 7/2/92
  8399                                  
  8400 000010B0 D1D8                    	rcr	ax,1			; find number of entries
  8401 000010B2 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8402                                  ;					;  into 12-bit fatland?
  8403 000010B5 7215                    	jb	short setend_faterr	; then go ahead and let the
  8404                                  ;					;  inconsistency pass through
  8405                                  ;					;  rather than lose data by
  8406                                  ;					;  correcting the fat type
  8407 000010B7 EB0E                    	jmp	short setend_fat16
  8408                                  
  8409                                  setend_fat12:
  8410 000010B9 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8411 000010BB 11D2                    	adc	dx,dx
  8412                                  
  8413                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8414                                  ;cs3 7/2/92
  8415                                  	; 15/12/2022
  8416 000010BD 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8417 000010C0 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8418                                  					; here. Check for it and use
  8419                                  					; the calculated size in this case.
  8420                                  ;cs3 7/2/92
  8421                                  
  8422 000010C2 2EF736[1710]            	div	word [cs:word3]
  8423                                  
  8424                                  setend_fat16:
  8425 000010C7 48                      	dec	ax			; limit at 1
  8426 000010C8 39D8                    	cmp	ax,bx			; is fat big enough?
  8427 000010CA 7602                    	jbe	short setend_fat	; use max value that'll fit
  8428                                  
  8429                                  setend_faterr:
  8430 000010CC 89D8                    	mov	ax,bx			; use calculated value
  8431                                  
  8432                                  setend_fat:
  8433                                  
  8434                                  ;	now ax = maximum legal cluster
  8435                                  
  8436                                  ;	end M008
  8437                                  
  8438                                  	;mov	[es:bp+0Dh], ax
  8439 000010CE 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8440                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8441                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8442 000010D2 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8443                                  					; Init so first ALLOC starts at
  8444                                  					; begining of FAT
  8445                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8446                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8447 000010D8 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8448                                  
  8449 000010DE C3                      	retn
  8450                                  
  8451                                  ;EndProc $SETDPB
  8452                                  
  8453                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8454                                  
  8455                                  ;
  8456                                  ;----------------------------------------------------------------------------
  8457                                  ;
  8458                                  ;**	$Dup_PDB
  8459                                  ;
  8460                                  ; Inputs:   DX is new segment address of process
  8461                                  ;	    SI is end of new allocation block
  8462                                  ;
  8463                                  ;----------------------------------------------------------------------------
  8464                                  ;
  8465                                  
  8466                                  _$DUP_PDB:
  8467                                  
  8468                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8469                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8470                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8471                                  
  8472                                  	; MSDOS 3.3
  8473                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8474                                  	;MOV	DS,[CS:CurrentPDB]
  8475                                  
  8476                                  	; 15/05/2019 - Retro DOS v4.0
  8477                                  	; MSDOS 6.0
  8478 000010DF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8479 000010E4 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8480 000010E9 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8481                                  
  8482 000010ED 56                      	PUSH	SI
  8483 000010EE EB0A                    	JMP	SHORT CreateCopy
  8484                                  
  8485                                  ;
  8486                                  ;----------------------------------------------------------------------------
  8487                                  ;
  8488                                  ; Inputs:
  8489                                  ;	DX = Segment number of new base
  8490                                  ; Function:
  8491                                  ;	Set up program base and copy term and ^C from int area
  8492                                  ; Returns:
  8493                                  ;	None
  8494                                  ; Called at DOS init
  8495                                  ;
  8496                                  ;----------------------------------------------------------------------------
  8497                                  ;
  8498                                  
  8499                                  ; 15/05/2019 - Retro DOS v4.0
  8500                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8501                                  
  8502                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8503                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8504                                  
  8505                                  _$CREATE_PROCESS_DATA_BLOCK:
  8506                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8507 000010F0 E89CF3                  	CALL	Get_User_Stack
  8508                                  	;mov	ds,[si+14h]
  8509 000010F3 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8510                                  	;push	word [2]
  8511 000010F6 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8512                                  CreateCopy:
  8513 000010FA 8EC2                    	MOV	ES,DX
  8514                                  
  8515 000010FC 31F6                    	XOR	SI,SI			; copy entire PDB
  8516 000010FE 89F7                    	MOV	DI,SI
  8517 00001100 B98000                  	MOV	CX,128
  8518 00001103 F3A5                    	REP	MOVSW
  8519                                  
  8520                                  ; DOS 3.3 7/9/86
  8521                                  	;mov	cx,20
  8522                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8523                                  	; 15/12/2022
  8524 00001105 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8525                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8526                                  	;mov	cx,FILPERPROC
  8527                                  
  8528                                  	;mov	di,18h
  8529 00001107 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8530                                  	;;PUSH	DS ; * 15/05/2019
  8531                                  	;;lds	si,[34h]
  8532                                  	;LDS	SI,[PDB.JFN_Pointer]
  8533                                  	;REP	MOVSB
  8534                                  	;;POP	DS ; * 15/05/2019
  8535                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8536                                  	; 05/12/2022
  8537                                  	; (push ds then pop ds is not needed here!)
  8538                                  	;push	ds
  8539                                  	;lds	si,[34h]
  8540 0000110A C5363400                	lds	si,[PDB.JFN_Pointer]
  8541 0000110E F3A4                    	rep	movsb
  8542                                  	;pop	ds
  8543                                  
  8544                                  ; DOS 3.3 7/9/86
  8545                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8546                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8547                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8548                                  
  8549 00001110 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8550                                  
  8551                                  	;;test	byte [cs:CreatePDB],0FFh
  8552                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8553                                  	; 17/12/2022
  8554 00001115 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8555                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8556 00001119 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8557                                  
  8558                                  ; Here we set up for a new process...
  8559                                  
  8560                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8561                                  	;POP	DS
  8562                                  
  8563                                  	; MSDOS 6.0
  8564                                  	;;getdseg <ds>			; ds -> dosdata
  8565                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8566                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8567                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8568                                  	; 15/12/2022
  8569                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8570                                  
  8571 0000111B 31DB                    	XOR	BX,BX			; dup all jfns
  8572                                  	;mov	cx,20
  8573                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8574                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8575                                  	; 15/12/2022
  8576 0000111D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8577                                  
  8578                                  Create_dup_jfn:
  8579 0000111F 06                      	PUSH	ES ;**			; save new PDB
  8580 00001120 E84C56                  	call	SFFromHandle		; get sf pointer
  8581 00001123 B0FF                    	MOV	AL,-1			; unassigned JFN
  8582 00001125 7224                    	JC	short CreateStash	; file was not really open
  8583                                  	;;test	word [es:di+5],1000h
  8584                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8585                                  	; 15/05/2019
  8586                                  	;test	byte [es:di+6],10h
  8587 00001127 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8588 0000112C 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8589                                  
  8590                                  ; We do not inherit network file handles.
  8591                                  
  8592                                  	;mov	ah,[es:di+2]
  8593 0000112E 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8594                                  	;and	ah,0F0h
  8595 00001132 80E4F0                  	AND	AH,SHARING_MASK
  8596                                  	;cmp	ah,70h
  8597 00001135 80FC70                  	CMP	AH,SHARING_NET_FCB
  8598 00001138 7411                    	jz	short CreateStash
  8599                                  
  8600                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8601                                  ; duplication operation.
  8602                                  
  8603 0000113A 893E[9E05]              	MOV	[THISSFT],DI
  8604 0000113E 8C06[A005]              	MOV	[THISSFT+2],ES
  8605 00001142 E85F19                  	call	DOS_DUP 		; signal duplication
  8606                                  
  8607                                  ; get the old sfn for copy
  8608                                  
  8609 00001145 E80A56                  	call	pJFNFromHandle		; ES:DI is jfn
  8610 00001148 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8611                                  
  8612                                  ; Take AL (old sfn or -1) and stash it into the new position
  8613                                  
  8614                                  CreateStash:
  8615 0000114B 07                      	POP	ES ;**
  8616                                  	;mov	[es:bx+18h],al
  8617 0000114C 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8618 00001150 43                      	INC	BX			; next jfn...
  8619 00001151 E2CC                    	LOOP	Create_dup_jfn
  8620                                  
  8621 00001153 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8622                                  	; 06/11/2022
  8623                                  	;mov	[es:16h],bx
  8624 00001157 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8625 0000115C 8C06[3003]              	MOV	[CurrentPDB],ES
  8626                                  	;MOV	DS,BX ; 28/07/2019
  8627                                  	; 07/12/2022
  8628                                  	;mov	ds,[cs:DosDSeg]
  8629                                  	; 15/12/2022
  8630                                  	; ds = [cs:DosDSeg]
  8631 00001160 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8632                                  	;mov	ds,bx
  8633                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8634                                  	; 15/12/2022
  8635                                  	;mov	ds,bx
  8636                                  
  8637                                  ; end of new process create
  8638                                  
  8639                                  Create_PDB_cont:
  8640                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8641                                  
  8642                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8643                                  
  8644                                  	;; 28/07/2019
  8645                                  	;;push	ds
  8646                                  	;;mov	ds,[cs:DosDSeg]
  8647                                  	;mov	byte [CreatePDB],0
  8648                                  	;;pop	ds
  8649                                  
  8650                                  ; 05/12/2022
  8651                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8652                                  ;	; (push-pop ds is nonsense here! 
  8653                                  ;	;  but i am using same code with original MSDOS.SYS
  8654                                  ;	;  for address compatibility.)
  8655                                  ;	push	ds
  8656                                  ;	; ds = [cs:DosDSeg] !
  8657                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8658                                  ;	mov	byte [CreatePDB],0
  8659                                  ;	pop	ds
  8660                                  
  8661 00001165 58                      	POP	AX ;*
  8662                                  
  8663                                  	;entry	SETMEM
  8664                                  
  8665                                  	; 17/12/2022
  8666                                  	; cx = 0
  8667                                  
  8668                                  ;---------------------------------------------------------------------------
  8669                                  ; Inputs:
  8670                                  ;	AX = Size of memory in paragraphs
  8671                                  ;	DX = Segment
  8672                                  ; Function:
  8673                                  ;	Completely prepares a program base at the
  8674                                  ;	specified segment.
  8675                                  ; Called at DOS init
  8676                                  ; Outputs:
  8677                                  ;	DS = DX
  8678                                  ;	ES = DX
  8679                                  ;	[0] has INT int_abort
  8680                                  ;	[2] = First unavailable segment
  8681                                  ;	[5] to [9] form a long call to the entry point
  8682                                  ;	[10] to [13] have exit address (from int_terminate)
  8683                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8684                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8685                                  ; DX,BP unchanged. All other registers destroyed.
  8686                                  ;---------------------------------------------------------------------------
  8687                                  
  8688                                  SETMEM:
  8689                                  	;XOR	CX,CX
  8690                                  	; 17/12/2022
  8691                                  	; cx = 0
  8692 00001166 8ED9                    	MOV	DS,CX
  8693 00001168 8EC2                    	MOV	ES,DX
  8694                                  	;mov	si,88h
  8695 0000116A BE8800                  	MOV	SI,addr_int_terminate
  8696                                  	;mov	di,10 ; 0Ah
  8697 0000116D BF0A00                  	MOV	DI,SAVEXIT
  8698                                  	;MOV	CX,6
  8699                                  	; 15/12/2022
  8700 00001170 B106                    	mov	cl,6
  8701 00001172 F3A5                    	REP	MOVSW
  8702 00001174 26A30200                	MOV	[ES:2],AX
  8703 00001178 29D0                    	SUB	AX,DX
  8704 0000117A 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8705 0000117D 7603                    	JBE	short HAVDIF
  8706 0000117F B8FF0F                  	MOV	AX,MAXDIF
  8707                                  HAVDIF:
  8708 00001182 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8709 00001185 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8710 00001188 29C3                    	SUB	BX,AX
  8711 0000118A B104                    	MOV	CL,4
  8712 0000118C D3E0                    	SHL	AX,CL
  8713 0000118E 8EDA                    	MOV	DS,DX
  8714                                  
  8715                                  	; (MSDOS 6.0 note)
  8716                                  	;
  8717                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8718                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8719                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8720                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8721                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8722                                  	; making this equvalence valid for this particular case. If however
  8723                                  	; there is less than 64K remaining the address in BX:AX will not 
  8724                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8725                                  	; into the PSP.
  8726                                  	;
  8727                                  	; Therefore for the case where there is less than 64K remaining in 
  8728                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8729                                  	; requirements will not work. Call 5, however will continue to work
  8730                                  	; for all cases.
  8731                                  	;
  8732                                  
  8733                                  	;mov	[6],ax
  8734                                  	;mov	[8],bx
  8735                                  
  8736 00001190 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8737 00001193 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8738                                  
  8739                                  	; 06/05/2019 - Retro DOS v4.0
  8740 00001197 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8741                                  					;    memory left
  8742 0000119A 740C                    	je	short addr_ok		; Y: the above calculated address is
  8743                                  					;    OK
  8744                                  					; N: 
  8745                                  
  8746 0000119C C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8747 000011A2 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8748                                  addr_ok:
  8749                                  	;mov	word [0],20CDh
  8750 000011A8 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8751                                  	;mov	byte [5],9Ah
  8752 000011AE C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8753                                  	;mov	word [50h],21CDh
  8754 000011B3 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8755                                  	;mov	byte [52h],0CBh
  8756 000011B9 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8757                                  	;mov	word [34h],18h
  8758 000011BE C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8759                                  	;mov	word [36h],ds
  8760 000011C4 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8761                                  	;mov	word [32h],20
  8762 000011C8 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8763                                  ;
  8764                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8765                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8766                                  ; particular SFT.  We perform this by requiring that the server link together
  8767                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8768                                  ; initialize this pointer.
  8769                                  ;
  8770                                   	;mov	word [38h],-1
  8771 000011CE C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8772                                  	;mov	word [3Ah],-1
  8773 000011D4 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8774                                  
  8775                                  	; 06/05/2019
  8776                                  	; Set the real version number in the PSP - 5.00
  8777                                  
  8778                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8779                                  	; 07/12/2022
  8780 000011DA 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8781                                  
  8782 000011E1 C3                      	retn
  8783                                  
  8784                                  ; 29/04/2019 - Retro DOS v4.0
  8785                                  
  8786                                  ;BREAK <$GSetMediaID -- get set media ID>
  8787                                  
  8788                                  ;---------------------------------------------------------------------------
  8789                                  ; Inputs:
  8790                                  ;	BL= drive number as defined in IOCTL
  8791                                  ;	AL= 0 get media ID
  8792                                  ;	    1 set media ID
  8793                                  ;	DS:DX= buffer containing information
  8794                                  ;		DW  0  info level (set on input)
  8795                                  ;		DD  ?  serial #
  8796                                  ;		DB  11 dup(?)  volume id
  8797                                  ;		DB   8 dup(?)  file system type
  8798                                  ; Function:
  8799                                  ;	Get or set media ID
  8800                                  ; Returns:
  8801                                  ;	carry clear, DS:DX is filled
  8802                                  ;	carry set, error
  8803                                  ;---------------------------------------------------------------------------
  8804                                  
  8805                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8806                                  _$GSetMediaID:
  8807                                  	; RAWIO - GET_MEDIA_ID
  8808 000011E2 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8809 000011E5 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8810 000011E7 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8811                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8812                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8813                                  	; 15/12/2022
  8814 000011E9 FEC8                    	dec	al
  8815 000011EB 7507                    	jnz	short errorfunc ; al > 1
  8816                                  	; RAWIO - SET_MEDIA_ID
  8817                                  	;mov	cx,0846h	      ;AN001;MS.;
  8818                                  	; 15/12/2022
  8819 000011ED B146                    	mov	cl,46h	; cx = 0846h 
  8820                                  doioctl:			      ;AN000;
  8821 000011EF B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8822                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8823                                  	;call	_$IOCTL
  8824                                  	;retn			      ;AN000;MS.;
  8825                                  	; 15/12/2022
  8826 000011F1 E9EC10                  	jmp	_$IOCTL
  8827                                  errorfunc:			      ;AN000;
  8828                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8829                                  	;mov	al,1
  8830 000011F4 B001                    	mov	al,error_invalid_function
  8831 000011F6 E959F4                  	jmp	SYS_RET_ERR
  8832                                  
  8833                                  ; 16/05/2019 - Retro DOS v4.0
  8834                                  
  8835                                  ;============================================================================
  8836                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8837                                  ;============================================================================
  8838                                  ; 20/07/2018 - Retro DOS v3.0
  8839                                  ; 29/04/2019 - Retro DOS v4.0
  8840                                  
  8841                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8842                                  ;----------------------------------------------------------------------------
  8843                                  ;
  8844                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8845                                  ;	     Strings of different lengths don't match.
  8846                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8847                                  ;   Outputs: Z if strings same, NZ if different
  8848                                  ;   Registers modified: NONE
  8849                                  ;----------------------------------------------------------------------------
  8850                                  
  8851                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8852                                  StrCmp:
  8853 000011F9 56                      	push	si
  8854 000011FA 57                      	push	di
  8855 000011FB 50                      	push	ax
  8856                                  
  8857                                  Cmplp:
  8858 000011FC AC                      	LODSB
  8859 000011FD E8263F                  	call	UCase			; convert to upper case
  8860 00001200 E8783F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8861 00001203 88C4                    	MOV	AH,AL
  8862 00001205 268A05                  	MOV	AL,[ES:DI]
  8863 00001208 47                      	INC	DI
  8864 00001209 E81A3F                  	call	UCase			; convert to upper case
  8865 0000120C E86C3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8866 0000120F 38C4                    	CMP	AH,AL
  8867 00001211 7504                    	JNZ	short PopRet		; Strings dif
  8868                                  
  8869 00001213 08C0                    	OR	AL,AL
  8870 00001215 75E5                    	JNZ	short Cmplp		; More string
  8871                                  PopRet:
  8872 00001217 58                      	pop	ax
  8873 00001218 5F                      	pop	di
  8874 00001219 5E                      	pop	si
  8875 0000121A C3                      	retn
  8876                                  
  8877                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8878                                  ;----------------------------------------------------------------------------
  8879                                  ;
  8880                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8881                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8882                                  ;	characters.
  8883                                  ;
  8884                                  ;   Inputs:	DS:SI - pointer to source string
  8885                                  ;		ES:DI - pointer to destination string
  8886                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8887                                  ;		DS:SI point byte after nul byte at end of source string
  8888                                  ;   Registers modified: SI,DI
  8889                                  ;----------------------------------------------------------------------------
  8890                                  
  8891                                  StrCpy:
  8892 0000121B 50                      	push	ax
  8893                                  CPYLoop:
  8894 0000121C AC                      	LODSB
  8895 0000121D E8063F                  	call	UCase			; convert to upper case
  8896 00001220 E8583F                  	call	PATHCHRCMP		; convert / to \ ;
  8897 00001223 AA                      	STOSB
  8898                                  
  8899 00001224 08C0                    	OR	AL,AL
  8900 00001226 75F4                    	JNZ	short CPYLoop
  8901 00001228 58                      	pop	ax
  8902 00001229 C3                      	retn
  8903                                  
  8904                                  ;----------------------------------------------------------------------------
  8905                                  ; Procedure Name : FStrCpy
  8906                                  ;----------------------------------------------------------------------------
  8907                                  
  8908                                  FStrCpy:
  8909 0000122A 50                      	push	ax
  8910                                  FCPYLoop:
  8911 0000122B AC                      	LODSB
  8912 0000122C AA                      	STOSB
  8913 0000122D 08C0                    	OR	AL,AL
  8914 0000122F 75FA                    	JNZ	short FCPYLoop
  8915 00001231 58                      	pop	ax
  8916 00001232 C3                      	retn
  8917                                  
  8918                                  ; 20/07/2018 - Retro DOS v3.0
  8919                                  ;----------------------------------------------------------------------------
  8920                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8921                                  ;----------------------------------------------------------------------------
  8922                                  ;
  8923                                  ;UCase:	
  8924                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8925                                  ;	retn
  8926                                  
  8927                                  ;Break <StrLen - compute length of string ES:DI>
  8928                                  ;----------------------------------------------------------------------------
  8929                                  ;**	StrLen - Compute Length of String
  8930                                  ;
  8931                                  ;	StrLen computes the length of a string, including the trailing 00
  8932                                  ;
  8933                                  ;	ENTRY	(es:di) = address of string
  8934                                  ;	EXIT	(cx) = size of string
  8935                                  ;	USES	cx, flags
  8936                                  ;----------------------------------------------------------------------------
  8937                                  
  8938                                  StrLen:
  8939 00001233 57                      	push	di
  8940 00001234 50                      	push	ax
  8941                                  	;MOV	CX,-1
  8942 00001235 B9FFFF                  	mov	cx,65535
  8943 00001238 30C0                    	XOR	AL,AL
  8944 0000123A F2AE                    	REPNE	SCASB
  8945 0000123C F7D1                    	NOT	CX
  8946 0000123E 58                      	pop	ax
  8947 0000123F 5F                      	pop	di
  8948 00001240 C3                      	retn
  8949                                  
  8950                                  ;----------------------------------------------------------------------------
  8951                                  ;**	DStrLen - Compute Length of String
  8952                                  ;
  8953                                  ;	ENTRY	(ds:si) = address of string
  8954                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8955                                  ;	USES	cx, flags
  8956                                  ;----------------------------------------------------------------------------
  8957                                  
  8958                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8959 00001241 E80300                  	CALL	XCHGP
  8960 00001244 E8ECFF                  	CALL	StrLen
  8961                                  	;CALL	XCHGP
  8962                                  	;retn
  8963                                  	; 18/12/2022
  8964                                  	;jmp	short XCHGP
  8965                                  
  8966                                  ;----------------------------------------------------------------------------
  8967                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8968                                  ;
  8969                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8970                                  ;
  8971                                  ;	ENTRY	none
  8972                                  ;	EXIT	pairs exchanged
  8973                                  ;	USES	SI, DI, DS, ES
  8974                                  ;----------------------------------------------------------------------------
  8975                                  
  8976                                  XCHGP:
  8977 00001247 1E                      	push	ds
  8978 00001248 06                      	push	es
  8979 00001249 1F                      	pop	ds
  8980 0000124A 07                      	pop	es
  8981 0000124B 87F7                    	XCHG	SI,DI
  8982                                  xchgp_retn:
  8983 0000124D C3                      	retn
  8984                                  
  8985                                  ;Break	<Idle - wait for a specified amount of time>
  8986                                  ;----------------------------------------------------------------------------
  8987                                  ;
  8988                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  8989                                  ;   	   we spin until RetryLoop is exhausted.
  8990                                  ;
  8991                                  ;   Inputs:	RetryLoop is the number of times we spin
  8992                                  ;   Outputs:	Wait
  8993                                  ;   Registers modified: none
  8994                                  ;----------------------------------------------------------------------------
  8995                                  
  8996                                  Idle:
  8997                                  	;test	byte [SS:FSHARING],0FFh
  8998 0000124E 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  8999                                  	;retnz
  9000 00001254 75F7                    	jnz	short xchgp_retn
  9001                                  	;SAVE	<CX>
  9002 00001256 51                      	push	cx
  9003 00001257 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9004 0000125C E308                    	JCXZ	Idle3
  9005                                  Idle1:	
  9006 0000125E 51                      	PUSH	CX
  9007 0000125F 31C9                    	XOR	CX,CX
  9008                                  Idle2:	
  9009 00001261 E2FE                    	LOOP	Idle2
  9010 00001263 59                      	POP	CX
  9011 00001264 E2F8                    	LOOP	Idle1
  9012                                  Idle3:	
  9013                                  	;RESTORE <CX>
  9014 00001266 59                      	pop	cx
  9015 00001267 C3                      	retn
  9016                                  
  9017                                  ;Break	<TableDispatch - dispatch to a table>
  9018                                  ;----------------------------------------------------------------------------
  9019                                  ;
  9020                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9021                                  ;   routine. Preserve all input registers to the routine.
  9022                                  ;
  9023                                  ;   Inputs:	Push	return address
  9024                                  ;		Push	Table address
  9025                                  ;		Push	index (byte)
  9026                                  ;   Outputs:	appropriate routine gets jumped to.
  9027                                  ;		return indicates invalid index
  9028                                  ;   Registers modified: none.
  9029                                  ;----------------------------------------------------------------------------
  9030                                  
  9031                                  struc TFrame	 ; TableFrame
  9032 00000000 ????                    .OldBP:	 resw 1  ; 0
  9033 00000002 ????                    .OldRet: resw 1  ; 2
  9034 00000004 ??                      .Index:	 resb 1  ; 4
  9035 00000005 ??                      .Pad:	 resb 1  ; 5  
  9036 00000006 ????                    .Tab:	 resw 1  ; 6
  9037 00000008 ????                    .NewRet: resw 1  ; 8
  9038                                  endstruc
  9039                                  
  9040                                  TableDispatch:
  9041 00001268 55                      	PUSH	BP
  9042 00001269 89E5                    	MOV	BP,SP
  9043 0000126B 53                      	PUSH	BX			; save BX
  9044                                  	;mov	bx,[bp+6]
  9045 0000126C 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9046 0000126F 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9047                                  	;cmp	[bp+4],bl
  9048 00001272 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9049 00001275 7317                    	JAE	short TableError	; yes
  9050                                  	;mov	bl,[bp+4]
  9051 00001277 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9052 0000127A 30FF                    	XOR	BH,BH			; convert to word
  9053 0000127C D1E3                    	SHL	BX,1			; convert to word pointer
  9054 0000127E 43                      	INC	BX			; point past first length byte
  9055                                  	; 17/08/2018
  9056                                  	;add	bx,[bp+6]
  9057 0000127F 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9058 00001282 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9059                                  	;mov	[bp+6],bx
  9060 00001285 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9061 00001288 5B                      	POP	BX			; restore BX
  9062 00001289 5D                      	POP	BP			; restore BP
  9063 0000128A 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9064 0000128D C3                      	retn				; do operation
  9065                                  TableError:
  9066 0000128E 5B                      	POP	BX			; restore BX
  9067 0000128F 5D                      	POP	BP			; restore BP
  9068 00001290 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9069                                  
  9070                                  
  9071                                  ;Break	<TestNet - determine if a CDS is for the network>
  9072                                  ;----------------------------------------------------------------------------
  9073                                  ;
  9074                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9075                                  ;	network CDS. This will handle NULL cds also.
  9076                                  ;
  9077                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9078                                  ;   Outputs:	ES:DI = ThisCDS
  9079                                  ;		carry Set => network
  9080                                  ;		carry Clear => local
  9081                                  ;   Registers modified: none.
  9082                                  ;----------------------------------------------------------------------------
  9083                                  
  9084                                  TestNet:
  9085                                  	;LES	DI,[CS:THISCDS]
  9086                                  
  9087                                  	; 16/05/2019 - Retro DOS v4.0
  9088 00001293 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9089 00001298 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9090 0000129D 83FFFF                  	CMP	DI,-1
  9091 000012A0 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9092                                  	;;test	word [es:di+43h],8000h
  9093                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9094                                  	;test	byte [es:di+44h],80h
  9095 000012A2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9096 000012A7 7501                    	JNZ	short CMCRet		; jump has carry clear
  9097 000012A9 C3                      	retn				; carry is clear
  9098                                  CMCRet: 
  9099 000012AA F5                      	CMC
  9100 000012AB C3                      	retn
  9101                                  
  9102                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9103                                  ;----------------------------------------------------------------------------
  9104                                  ;
  9105                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9106                                  ;	network file.
  9107                                  ;
  9108                                  ;   Inputs:	ES:DI point to SFT
  9109                                  ;   Outputs:	Zero set if not network sft
  9110                                  ;		zero reset otherwise
  9111                                  ;		Carry CLEAR!!!
  9112                                  ;   Registers modified: none.
  9113                                  ;----------------------------------------------------------------------------
  9114                                  
  9115                                  IsSFTNet:
  9116                                  	;;test	word [es:di+5],8000h
  9117                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9118                                  	; 16/05/2019 
  9119                                  	;test	byte [es:di+6],80h
  9120 000012AC 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9121 000012B1 C3                      	retn
  9122                                  
  9123                                  ;Break	<FastInit - Initialize FastTable entries >
  9124                                  ;----------------------------------------------------------------------------
  9125                                  ;   DOS 4.00   2/9/87
  9126                                  ;   FastInit  - initialize the FASTXXX routine entry
  9127                                  ;		  in the FastTable
  9128                                  ;
  9129                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9130                                  ;		DS:SI = address of FASTXXX routine entry
  9131                                  ;		   SI = -1 for query only
  9132                                  ;   Outputs:	Carry flag clear, if success
  9133                                  ;		Carry flag set,   if failure
  9134                                  ;
  9135                                  ;
  9136                                  ;----------------------------------------------------------------------------
  9137                                  
  9138                                  ;Procedure FastInit,NEAR
  9139                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9140                                  
  9141                                  ;	; MSDOS 3.3
  9142                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9143                                  ;FastInit:
  9144                                  ;	mov	di,FastTable ; FastOpenTable
  9145                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9146                                  ;	mov	bx,cs			; get DOS segment
  9147                                  ;	cmp	ax,bx			; first time installed ?	
  9148                                  ;	je	short ok_install	; yes
  9149                                  ;	stc				; set carry
  9150                                  ;	retn				; (cf=1 means) already installed !
  9151                                  ;
  9152                                  ;ok_install:
  9153                                  ;	mov	bx,FastTable ; FastOpenTable
  9154                                  ;	mov	cx,ds
  9155                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9156                                  ;	mov	[cs:bx+4],cx
  9157                                  ;	mov	[cs:bx+2],si
  9158                                  ;	retn
  9159                                  
  9160                                  ; 16/05/2019 - Retro DOS v4.0
  9161                                  
  9162                                  FastInit:
  9163                                  	; MSDOS 6.0
  9164                                  	;hkn; set up es to dosdataseg.
  9165 000012B2 06                      	push	es
  9166                                  	;getdseg <es>			; es -> dosdata
  9167 000012B3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9168                                  
  9169                                  	;hkn; FastTable is in DOSDATA
  9170 000012B8 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9171 000012BB 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9172 000012BC 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9173 000012BE D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9174 000012C0 D1E3                    	SHL	BX,1			;AN000;FO.
  9175 000012C2 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9176 000012C4 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9177                                  fcheck: 				;AN000;
  9178 000012C8 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9179 000012CA 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9180 000012CC 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9181 000012CE 09C0                    	OR	AX,AX			;AN000;FO.;
  9182 000012D0 7403                    	JZ	short ok_install	;AN000;FO.;
  9183 000012D2 F9                      	STC				;AN000;FO.;; already installed !
  9184 000012D3 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9185                                  ok_install:				;AN000;
  9186 000012D5 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9187 000012D8 7412                    	JZ	short FSret		;AN000;FO.; yes
  9188 000012DA 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9189 000012DC 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9190 000012E0 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9191                                  
  9192                                  ;hkn; FastFlg moved to DOSDATA
  9193 000012E3 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9194 000012E6 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9195                                  	;or	byte [es:di],80h
  9196 000012E8 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9197                                  FSret:					;AN000;
  9198 000012EC 07                      	pop	es
  9199 000012ED C3                      	retn				;AN000;FO.
  9200                                  
  9201                                  ;EndProc FastInit
  9202                                  
  9203                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9204                                  ;----------------------------------------------------------------------------
  9205                                  ;   DOS 3.3   6/10/86
  9206                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9207                                  ;
  9208                                  ;   Inputs:	None
  9209                                  ;   Outputs:	AX = -1 and carry flag set
  9210                                  ;
  9211                                  ;   Registers modified: none.
  9212                                  ;----------------------------------------------------------------------------
  9213                                  
  9214                                  FastRet:
  9215                                  	;mov	ax,-1
  9216                                  	;stc
  9217                                  	;retf
  9218 000012EE F9                      	STC
  9219 000012EF 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9220 000012F1 CB                      	RETF
  9221                                  
  9222                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9223                                  ;----------------------------------------------------------------------------
  9224                                  ;   DOS 3.3   6/10/86
  9225                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9226                                  ;
  9227                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9228                                  ;   Outputs:	same output as $OPEN
  9229                                  ;
  9230                                  ;----------------------------------------------------------------------------
  9231                                  
  9232                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9233                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9234                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9235                                  
  9236                                  NLS_OPEN:
  9237                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9238                                  ;	MOV	BYTE [CPSWFLAG],0
  9239                                  ;	PUSH	BX		 ; save current state
  9240                                  
  9241 000012F2 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9242 000012F4 E8E75C                  	call	_$OPEN
  9243                                  
  9244                                  ;	POP	BX		 ; restore current state
  9245                                  ;	MOV	[CPSWFLAG],BL
  9246 000012F7 C3                      	RETN
  9247                                  
  9248                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9249                                  ;----------------------------------------------------------------------------
  9250                                  ;   DOS 3.3   6/10/86
  9251                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9252                                  ;
  9253                                  ;   Inputs:	BP = open mode
  9254                                  ;   Outputs:	same output as $LSEEK
  9255                                  ;
  9256                                  ;----------------------------------------------------------------------------
  9257                                  
  9258                                  ; 16/05/2019 - Retro DOS v4.0
  9259                                  
  9260                                  NLS_LSEEK:
  9261 000012F8 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9262 000012FD 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9263 00001302 E81000                  	CALL	Fake_User_Stack
  9264 00001305 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9265 00001307 E87C56                  	call	_$LSEEK
  9266 0000130A 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9267 0000130F 368F06[8405]            	POP	word [SS:USER_SP]
  9268 00001314 C3                      	RETN
  9269                                  
  9270                                  ;Break	<Fake_User_Stack - save user stack>
  9271                                  ;----------------------------------------------------------------------------
  9272                                  ;   DOS 3.3   6/10/86
  9273                                  ;   Fake_User_Stack - save user stack pointer
  9274                                  ;
  9275                                  ;----------------------------------------------------------------------------
  9276                                  
  9277                                  Fake_User_Stack:
  9278 00001315 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9279 00001319 36A3[8405]              	MOV	[SS:USER_SP],AX
  9280 0000131D 8CD0                    	MOV	AX,SS
  9281 0000131F 36A3[8605]              	MOV	[SS:USER_SS],AX
  9282 00001323 C3                      	RETN
  9283                                  
  9284                                  ;Break	<GetDevList - get device header list pointer>
  9285                                  ;----------------------------------------------------------------------------
  9286                                  ;   DOS 3.3   7/25/86
  9287                                  ;   GetDevList - get device header list pointer
  9288                                  ;
  9289                                  ;   Output: AX:BX points to the device header list
  9290                                  ;----------------------------------------------------------------------------
  9291                                  
  9292                                  GetDevList:
  9293                                  	; 16/05/2019 - Retro DOS v4.0
  9294 00001324 BE[280D]                	MOV	SI,SysInitTable
  9295 00001327 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9296 0000132C C534                    	LDS	SI,[SI]
  9297                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9298 0000132E 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9299                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9300 00001331 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9301 00001334 C3                      	RETN
  9302                                  
  9303                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9304                                  ;----------------------------------------------------------------------------
  9305                                  ;   DOS 3.3   7/25/86
  9306                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9307                                  ;
  9308                                  ;   Inputs:	BP = function code 0CH
  9309                                  ;   Outputs:	same output as generic $IOCTL
  9310                                  ;
  9311                                  ;----------------------------------------------------------------------------
  9312                                  
  9313                                  NLS_IOCTL:
  9314                                  	; 16/05/2019 - Retro DOS v4.0
  9315 00001335 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9316 0000133A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9317 0000133F E8D3FF                  	CALL	Fake_User_Stack
  9318 00001342 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9319 00001344 E8990F                  	call	_$IOCTL
  9320 00001347 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9321 0000134C 368F06[8405]            	POP	word [SS:USER_SP]
  9322 00001351 C3                      	RETN
  9323                                  
  9324                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9325                                  ;----------------------------------------------------------------------------
  9326                                  ;   DOS 3.3   7/25/86
  9327                                  ;   NLS_GETEXT	-
  9328                                  ;
  9329                                  ;   Inputs:	none
  9330                                  ;   Outputs:	AX = extended error
  9331                                  ;
  9332                                  ;----------------------------------------------------------------------------
  9333                                  
  9334                                  NLS_GETEXT:
  9335                                  	; 16/05/2019 - Retro DOS v4.0
  9336 00001352 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9337 00001356 C3                      	RETN
  9338                                  
  9339                                  ; 29/04/2019 - Retro DOS v4.0
  9340                                  
  9341                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9342                                  
  9343                                  ;----------------------------------------------------------------------------
  9344                                  ;   DOS 4.00
  9345                                  ;
  9346                                  ;   Inputs:	DL=0 get extended error message addr
  9347                                  ;		  =1 set extended error message addr
  9348                                  ;		  =2 get parser error message addr
  9349                                  ;		  =3 set parser error message addr
  9350                                  ;		  =4 get critical error message addr
  9351                                  ;		  =5 set critical error message addr
  9352                                  ;		  =6 get file system error message addr
  9353                                  ;		  =7 set file system error message addr
  9354                                  ;		  =8 get address for code reduction
  9355                                  ;		  =9 set address for code reduction
  9356                                  ;   Function:	get/set message address
  9357                                  ;   Outputs:	ES:DI points to addr when get
  9358                                  ;----------------------------------------------------------------------------
  9359                                  
  9360                                  ;Procedure MSG_RETRIEVAL,NEAR
  9361                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9362                                  
  9363                                  MSG_RETRIEVAL:
  9364                                  
  9365                                  ;;	NOTE:  This function lives in command.com resident code now.
  9366                                  ;;	If the int 2F ever gets this far, we'll return registers
  9367                                  ;;	unchanged, which produces the same result as before, if
  9368                                  ;;	command.com wasn't present (and therefore no messages available).
  9369                                  ;;
  9370                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9371                                  ;;	No_Op zeroes AL.
  9372                                  ;;
  9373                                  ;;;hkn; set up ds to point to DOSDATA
  9374                                  ;;	push	ds
  9375                                  ;;	getdseg	<ds>			; ds -> dosdata
  9376                                  ;;
  9377                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9378                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9379                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9380                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9381                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9382                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9383                                  ;;	DEC	AL		    ;AN000;;MS.
  9384                                  ;;toget:				    ;AN000;
  9385                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9386                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9387                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9388                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9389                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9390                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9391                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9392                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9393                                  ;;getget: 				     ;AN000;
  9394                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9395                                  ;;MSGret: 				     ;AN000;
  9396                                  ;;	POP	SI			     ;AN000;;MS.
  9397                                  ;;	POP	AX			     ;AN000;;MS.
  9398                                  ;;
  9399                                  ;;	pop	ds
  9400                                  
  9401                                  ;	return				     ;AN000;;MS. exit
  9402 00001357 C3                      	retn	; 29/04/2019
  9403                                  
  9404                                  ;============================================================================
  9405                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9406                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9407                                  ;============================================================================
  9408                                  ; 20/07/2018 - Retro DOS v3.0
  9409                                  
  9410                                  ;	; MSDOS 3.3
  9411                                  ;	; 08/08/2018 - Retro DOS v3.0
  9412                                  ;ECritMEM:
  9413                                  ;ECritSFT:
  9414                                  ;	;
  9415                                  ;ECritDisk:
  9416                                  ;	retn
  9417                                  ;	;push	ax
  9418                                  ;	
  9419                                  ;	mov	ax,8001h
  9420                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9421                                  ;			; AL = critical section number (00h-0Fh)
  9422                                  ;	pop	ax
  9423                                  ;	retn
  9424                                  ;
  9425                                  ;	; MSDOS 3.3
  9426                                  ;	; 08/08/2018 - Retro DOS v3.0
  9427                                  ;LCritMEM:
  9428                                  ;LCritSFT:
  9429                                  ;	;
  9430                                  ;LCritDisk:
  9431                                  ;	retn
  9432                                  ;	;push	ax
  9433                                  ;	
  9434                                  ;	mov	ax,8101h
  9435                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9436                                  ;			; AL = critical section number (00h-0Fh)
  9437                                  ;	pop	ax
  9438                                  ;	retn
  9439                                  ;
  9440                                  ;ECritDevice:
  9441                                  ;	retn
  9442                                  ;	;push	ax
  9443                                  ;	
  9444                                  ;	mov	ax,8002h
  9445                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9446                                  ;			; AL = critical section number (00h-0Fh)
  9447                                  ;	pop	ax
  9448                                  ;	retn
  9449                                  ;
  9450                                  ;LCritDevice:
  9451                                  ;	retn
  9452                                  ;	;push	ax
  9453                                  ;	
  9454                                  ;	mov	ax,8102h
  9455                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9456                                  ;			; AL = critical section number (00h-0Fh)
  9457                                  ;	pop	ax
  9458                                  ;	retn
  9459                                  
  9460                                  ;============================================================================
  9461                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9462                                  ;============================================================================
  9463                                  ; 12/05/2019 - Retro DOS v4.0
  9464                                  
  9465                                  ; Critical Section Routines
  9466                                  
  9467                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9468                                  
  9469                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9470                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9471                                  
  9472                                  ; ---------------------------------------------------------------------------
  9473                                  ; Each handler must leave everything untouched; including flags!
  9474                                  ;
  9475                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9476                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9477                                  ; ---------------------------------------------------------------------------
  9478                                  
  9479                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9480                                  ; ---------------------------------------------------------------------------
  9481                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9482                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9483                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9484                                  ; ---------------------------------------------------------------------------
  9485                                  
  9486                                  ;%macro POPFF 0
  9487                                  ;	jmp	$+3
  9488                                  ;	iret
  9489                                  ;	push	cs
  9490                                  ;	call	$-2
  9491                                  ;%endmacro
  9492                                  
  9493                                  ; ---------------------------
  9494                                  
  9495                                  ;Procedure  ECritDisk,NEAR
  9496                                  	;public  ECritMEM
  9497                                  	;public  ECritSFT
  9498                                  ECritMEM:
  9499                                  ECritSFT:
  9500                                  ;
  9501                                  ECritDisk:
  9502                                  
  9503                                  ;SR; Check if critical section is to be entered
  9504                                  
  9505 00001358 9C                      	pushf
  9506 00001359 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9507 0000135F 740D                    	jz	short ECritDisk_2
  9508                                  
  9509                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9510                                  ;	;popff  ; * (macro)
  9511                                  ;	jmp	short ECritDisk_1 ; *
  9512                                  ;
  9513                                  ;ECritDisk_iret: ; *
  9514                                  ;	iret ; *
  9515                                  
  9516                                  	; 16/12/2022
  9517                                  	; 13/11/2022
  9518                                  	;jmp	short ECritDisk_1
  9519                                  	; 06/11/2022
  9520                                  ;ECritDisk_iret:
  9521                                  ;	iret	
  9522                                  
  9523                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9524                                  ECritDisk_1:
  9525 00001361 0E                      	push	cs ; *
  9526 00001362 E80800                  	call	ECritDisk_iret ; *		
  9527                                  	
  9528                                  ECritDisk_0:
  9529 00001365 50                      	PUSH    AX
  9530                                  	;MOV	AX,8000h+critDisk
  9531                                  	;INT	int_IBM
  9532 00001366 B80180                  	mov	ax,8001h
  9533 00001369 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9534                                  			; AL = critical section number (00h-0Fh)
  9535 0000136B 58                      	POP     AX
  9536 0000136C C3                      	retn
  9537                                  
  9538                                  	; 16/12/2022
  9539                                  	; 13/11/2022
  9540                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9541                                  LCritDisk_iret: 
  9542 0000136D CF                      	iret
  9543                                  
  9544                                  ECritDisk_2:
  9545                                  	;;popff ; *
  9546                                  	;;retn
  9547                                  ;	jmp	short ECritDisk_3 ; *
  9548                                  ;ECritDisk_iret2: ; *
  9549                                  ;	iret
  9550                                  	
  9551                                  	; 16/12/2022
  9552                                  	; 13/11/2022
  9553                                  	;jmp	short ECritDisk_3
  9554                                  ;ECritDisk_iret2:
  9555                                  	;iret
  9556                                  
  9557                                  ECritDisk_3:
  9558 0000136E 0E                      	push    cs ; *
  9559                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9560                                  	;call	ECritDisk_iret2 ; *
  9561                                  	;retn
  9562                                  	; 16/12/2022
  9563 0000136F E8FBFF                  	call	ECritDisk_iret
  9564 00001372 C3                      	retn
  9565                                  
  9566                                  ;EndProc ECritDisk
  9567                                  
  9568                                  ; ---------------------------
  9569                                  
  9570                                  ;Procedure   LCritDisk,NEAR
  9571                                  	;public  LCritMEM
  9572                                  	;public  LCritSFT
  9573                                  LCritMEM:
  9574                                  LCritSFT:
  9575                                  ;
  9576                                  LCritDisk:
  9577                                  
  9578                                  ;SR; Check if critical section is to be entered
  9579                                  
  9580 00001373 9C                      	pushf
  9581 00001374 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9582 0000137A 740C                    	jz	short LCritDisk_2
  9583                                  	;popff  ; * (macro)
  9584                                  ;	jmp	short LCritDisk_1 ; *
  9585                                  ;
  9586                                  ;LCritDisk_iret: ; *
  9587                                  ;	iret ; *
  9588                                  
  9589                                  	; 16/12/2022
  9590                                  	; 13/11/2022
  9591                                  	;jmp	short LCritDisk_1
  9592                                  ;LCritDisk_iret:
  9593                                  	;iret
  9594                                  
  9595                                  LCritDisk_1:
  9596 0000137C 0E                      	push	cs ; *
  9597 0000137D E8EDFF                  	call	LCritDisk_iret ; *		
  9598                                  	
  9599                                  LCritDisk_0:
  9600 00001380 50                      	PUSH	AX
  9601                                  	;MOV	AX,8100h+critDisk
  9602                                  	;INT	int_IBM
  9603 00001381 B80181                  	mov	ax,8101h
  9604 00001384 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9605                                  			; AL = critical section number (00h-0Fh)
  9606 00001386 58                      	POP	AX
  9607 00001387 C3                      	retn
  9608                                  
  9609                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9610                                  ;	iret
  9611                                  
  9612                                  LCritDisk_2:
  9613                                  	;;popff ; *
  9614                                  	;;retn
  9615                                  ;	jmp	short LCritDisk_3 ; *
  9616                                  ;LCritDisk_iret2: ; *
  9617                                  ;	iret
  9618                                  
  9619                                  	; 16/12/2022
  9620                                  	; 13/11/2022
  9621                                  	;jmp	short LCritDisk_3
  9622                                  ;LCritDisk_iret2:
  9623                                  	;iret
  9624                                  
  9625                                  LCritDisk_3:
  9626 00001388 0E                      	push    cs ; *
  9627                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9628                                  	;call	LCritDisk_iret2 ; *
  9629                                  	;retn
  9630                                  	; 16/12/2022
  9631 00001389 E8E1FF                  	call	LCritDisk_iret
  9632 0000138C C3                      	retn
  9633                                  
  9634                                  ;EndProc LCritDisk
  9635                                  
  9636                                  ; ---------------------------
  9637                                  
  9638                                  ;Procedure   ECritDevice,NEAR
  9639                                  
  9640                                  ECritDevice:
  9641                                  
  9642                                  ;SR; Check if critical section is to be entered
  9643                                  
  9644 0000138D 9C                      	pushf
  9645 0000138E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9646 00001394 740D                    	jz	short ECritDevice_2
  9647                                  	;popff  ; * (macro)
  9648                                  ;	jmp	short ECritDevice_1 ; *
  9649                                  ;
  9650                                  ;ECritDevice_iret: ; *
  9651                                  ;	iret ; *
  9652                                  
  9653                                  	; 16/12/2022	
  9654                                  	; 13/11/2022
  9655                                  	;jmp	short ECritDevice_1
  9656                                  ;ECritDevice_iret:
  9657                                  	;iret
  9658                                  
  9659                                  ECritDevice_1:
  9660 00001396 0E                      	push	cs ; *
  9661 00001397 E80800                  	call	ECritDevice_iret ; *		
  9662                                  	
  9663                                  ECritDevice_0:
  9664 0000139A 50                      	PUSH	AX
  9665                                  	;MOV	AX,8000h+critDevice
  9666                                  	;INT	int_IBM
  9667 0000139B B80280                  	mov	ax,8002h
  9668 0000139E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9669                                  			; AL = critical section number (00h-0Fh)
  9670 000013A0 58                      	POP     AX
  9671 000013A1 C3                      	retn
  9672                                  
  9673                                  	; 16/12/2022
  9674                                  	; 06/12/2022
  9675                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9676                                  LCritDevice_iret: 
  9677 000013A2 CF                      	iret
  9678                                  
  9679                                  ECritDevice_2:
  9680                                  	;;popff ; *
  9681                                  	;;retn
  9682                                  ;	jmp	short ECritDevice_3 ; *
  9683                                  ;ECritDevice_iret2: ; *
  9684                                  ;	iret
  9685                                  
  9686                                  	; 16/12/2022
  9687                                  	; 13/11/2022
  9688                                  	;jmp	short ECritDevice_3
  9689                                  ;ECritDevice_iret2:
  9690                                  	;iret
  9691                                  
  9692                                  ECritDevice_3:
  9693 000013A3 0E                      	push    cs ; *
  9694                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9695                                  	;call	ECritDevice_iret2 ; *
  9696                                  	;retn
  9697                                  	; 16/12/2022
  9698 000013A4 E8FBFF                  	call	ECritDevice_iret
  9699 000013A7 C3                      	retn
  9700                                  
  9701                                  ;EndProc ECritDevice
  9702                                  
  9703                                  ; ---------------------------
  9704                                  
  9705                                  ;Procedure   LCritDevice,NEAR
  9706                                  
  9707                                  LCritDevice:
  9708                                  
  9709                                  ;SR; Check if critical section is to be entered
  9710                                  
  9711 000013A8 9C                      	pushf
  9712 000013A9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9713 000013AF 740C                    	jz	short LCritDevice_2
  9714                                  	;popff  ; * (macro)
  9715                                  ;	jmp	short LCritDevice_1 ; *
  9716                                  ;
  9717                                  ;LCritDevice_iret: ; *
  9718                                  ;	iret ; *
  9719                                  
  9720                                  	; 16/12/2022
  9721                                  	; 13/11/2022
  9722                                  	;jmp	short LCritDevice_1
  9723                                  ;LCritDevice_iret:
  9724                                  	;iret
  9725                                  
  9726                                  LCritDevice_1:
  9727 000013B1 0E                      	push	cs ; *
  9728 000013B2 E8EDFF                  	call	LCritDevice_iret ; *		
  9729                                  	
  9730                                  LCritDevice_0:
  9731 000013B5 50                      	PUSH	AX
  9732                                  	;MOV	AX,8100h+critDevice
  9733                                  	;INT	int_IBM
  9734 000013B6 B80281                  	mov	ax,8102h
  9735 000013B9 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9736                                  			; AL = critical section number (00h-0Fh)
  9737 000013BB 58                      	POP     AX
  9738 000013BC C3                      	retn
  9739                                  
  9740                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9741                                  ;	iret
  9742                                  
  9743                                  LCritDevice_2:
  9744                                  	;;popff ; *
  9745                                  	;;retn
  9746                                  ;	jmp	short LCritDevice_3 ; *
  9747                                  ;LCritDevice_iret2: ; *
  9748                                  ;	iret
  9749                                  
  9750                                  	; 16/12/2022
  9751                                  	; 13/11/2022
  9752                                  	;jmp	short LCritDevice_3
  9753                                  ;LCritDevice_iret2:
  9754                                  	;iret
  9755                                  
  9756                                  LCritDevice_3:
  9757 000013BD 0E                      	push    cs ; *
  9758                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9759                                  	;call	LCritDevice_iret2 ; *
  9760                                  	;retn
  9761                                  	; 16/12/2022
  9762 000013BE E8E1FF                  	call	LCritDevice_iret
  9763 000013C1 C3                      	retn
  9764                                  
  9765                                  ;EndProc LCritDevice
  9766                                  
  9767                                  ;============================================================================
  9768                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9769                                  ;============================================================================
  9770                                  ; 20/07/2018 - Retro DOS v3.0
  9771                                  
  9772                                  ;============================================================================
  9773                                  ; STDIO.ASM - (MSDOS 2.0)
  9774                                  ;============================================================================
  9775                                  
  9776                                  ;
  9777                                  ; Standard device IO for MSDOS (first 12 function calls)
  9778                                  ;
  9779                                  
  9780                                  ;.xlist
  9781                                  ;.xcref
  9782                                  ;INCLUDE STDSW.ASM
  9783                                  ;INCLUDE DOSSEG.ASM
  9784                                  ;.cref
  9785                                  ;.list
  9786                                  
  9787                                  ;TITLE   STDIO - device IO for MSDOS
  9788                                  ;NAME    STDIO
  9789                                  
  9790                                  ;INCLUDE IO.ASM
  9791                                  
  9792                                  ; ---------------------------------------------------------------------------
  9793                                  ;
  9794                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9795                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9796                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9797                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9798                                  ;			    to restore MSDOS 2.0 device IO source code 
  9799                                  ;
  9800                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9801                                  	
  9802                                  ;============================================================================
  9803                                  ; STDIO.ASM - (MSDOS 2.0)
  9804                                  ;============================================================================
  9805                                  
  9806                                  ;
  9807                                  ; Standard device IO for MSDOS (first 12 function calls)
  9808                                  ;
  9809                                  
  9810                                  ;.xlist
  9811                                  ;.xcref
  9812                                  ;INCLUDE STDSW.ASM
  9813                                  ;INCLUDE DOSSEG.ASM
  9814                                  ;.cref
  9815                                  ;.list
  9816                                  
  9817                                  ;TITLE   STDIO - device IO for MSDOS
  9818                                  ;NAME    STDIO
  9819                                  
  9820                                  ;INCLUDE IO.ASM
  9821                                  
  9822                                  ; ---------------------------------------------------------------------------
  9823                                  ;
  9824                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9825                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9826                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9827                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9828                                  ;			    to restore MSDOS 2.0 device IO source code 
  9829                                  ;
  9830                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9831                                  ;
  9832                                  ;============================================================================
  9833                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9834                                  ;============================================================================
  9835                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9836                                  
  9837                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9838                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9839                                  
  9840                                  ;============================================================================
  9841                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9842                                  ;============================================================================
  9843                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9844                                  
  9845                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9846                                  
  9847                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9848                                  ;
  9849                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9850                                  ;	NAME	IBMCPMIO
  9851                                  
  9852                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9853                                  ;
  9854                                  ;	$Std_Con_Input_No_Echo
  9855                                  ;	$Std_Con_String_Output
  9856                                  ;	$Std_Con_String_Input
  9857                                  ;	$RawConIO
  9858                                  ;	$RawConInput
  9859                                  ;	RAWOUT
  9860                                  ;	RAWOUT2
  9861                                  ;
  9862                                  
  9863                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9864                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9865                                  ; references to be SS or CS relative which is desired.
  9866                                  
  9867                                  ; ---------------------------------------------------------------------------
  9868                                  
  9869                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9870                                  ;	NAME	CPMIO2
  9871                                  
  9872                                  ;
  9873                                  ;	Microsoft Confidential
  9874                                  ;	Copyright (C) Microsoft Corporation 1991
  9875                                  ;	All Rights Reserved.
  9876                                  ;
  9877                                  
  9878                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9879                                  ;
  9880                                  ;	$Std_Con_Input
  9881                                  ;	$Std_Con_Output
  9882                                  ;	OUTT
  9883                                  ;	TAB
  9884                                  ;	BUFOUT
  9885                                  ;	$Std_Aux_Input
  9886                                  ;	$Std_Aux_Output
  9887                                  ;	$Std_Printer_Output
  9888                                  ;	$Std_Con_Input_Status
  9889                                  ;	$Std_Con_Input_Flush
  9890                                  ;
  9891                                  ;	Revision History:
  9892                                  ;
  9893                                  ;	  AN000	 version 4.00 - Jan. 1988
  9894                                  
  9895                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9896                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9897                                  ; references to be SS or CS relative which is desired.
  9898                                  
  9899                                  ;DOSCODE SEGMENT
  9900                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9901                                  
  9902                                  
  9903                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9904                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9905                                  ;hkn;	not valid. 
  9906                                  
  9907                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9908                                  ; 08/11/2022
  9909                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9910                                  
  9911                                  ;
  9912                                  ;----------------------------------------------------------------------------
  9913                                  ;
  9914                                  ; Procedure : $Std_Con_Input_No_Echo
  9915                                  ;
  9916                                  ;----------------------------------------------------------------------------
  9917                                  ;
  9918                                  
  9919                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9920                                  
  9921                                  ; Inputs:
  9922                                  ;	None
  9923                                  ; Function:
  9924                                  ;	Input character from console, no echo
  9925                                  ; Returns:
  9926                                  ;	AL = character
  9927                                  
  9928 000013C2 1E                      	push	ds
  9929 000013C3 56                      	push	si
  9930                                  INTEST:
  9931 000013C4 E87F3E                  	call	STATCHK
  9932 000013C7 753B                    	jnz	short GET ; 08/09/2018
  9933                                  ;*************************************************************************
  9934                                  ;hkn; SS override
  9935 000013C9 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9936 000013CF 7505                    	jnz	short no_sys_wait
  9937 000013D1 B405                    	mov	ah,5			; get input status with system wait
  9938 000013D3 E87A31                  	call	IOFUNC
  9939                                  no_sys_wait:
  9940                                  ;**************************************************************************
  9941 000013D6 B484                    	MOV	AH,84h
  9942 000013D8 CD2A                    	INT	int_IBM	 ; int 2Ah
  9943                                  
  9944                                  ;;; 7/15/86  update the date in the idle loop
  9945                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9946                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9947                                  
  9948                                  ;hkn; SS override
  9949 000013DA 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9950 000013E0 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9951                                  
  9952 000013E2 50                      	PUSH	AX
  9953 000013E3 53                      	PUSH	BX			; following is tricky,
  9954 000013E4 51                      	PUSH	CX			; it may be called by critical handler
  9955 000013E5 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9956                                  					; other's READ or WRITE
  9957 000013E6 1E                      	PUSH	DS			; save DS = SFT's segment
  9958                                  
  9959                                  ;hkn; READTIME must use ds = DOSDATA
  9960                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9961                                  
  9962 000013E7 16                      	PUSH	SS ; 04/05/2019
  9963 000013E8 1F                      	POP	DS
  9964                                  
  9965 000013E9 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9966 000013EC E89B02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9967                                  	;invoke	READTIME		; readtime
  9968 000013EF E847F7                  	call	READTIME
  9969 000013F2 B80100                  	MOV	AX,1
  9970 000013F5 E89202                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9971                                  
  9972                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9973                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9974                                  ;	push	bx
  9975                                  ;	mov	bx,DATE_FLAG
  9976                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9977                                  ;	cmp	word [cs:bx],5872h
  9978                                  ;	jz	short FETCHI_TAG_chk_ok
  9979                                  ;	call	DOSINIT
  9980                                  ;FETCHI_TAG_chk_ok:
  9981                                  ;	pop	bx
  9982                                  
  9983 000013F8 1F                      	POP	DS			; restore DS
  9984 000013F9 5A                      	POP	DX
  9985 000013FA 59                      	POP	CX
  9986 000013FB 5B                      	POP	BX
  9987 000013FC 58                      	POP	AX
  9988                                  NoUpdate:
  9989                                  
  9990                                  ;hkn; SS override
  9991 000013FD 36FF06[910D]            	INC	word [SS:DATE_FLAG]
  9992                                  
  9993                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  9994 00001402 EBC0                    	JMP	short INTEST
  9995                                  GET:
  9996 00001404 30E4                    	XOR	AH,AH
  9997 00001406 E84731                  	call	IOFUNC
  9998 00001409 5E                      	POP	SI
  9999 0000140A 1F                      	POP	DS
 10000                                  ;;; 7/15/86
 10001                                  
 10002                                  ;hkn; SS override
 10003                                  	; MSDOS 6.0
 10004 0000140B 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10005                                  	;
 10006 00001411 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10007 00001413 7506                    	JNZ	short noscan
 10008                                  
 10009                                  ;hkn; SS override
 10010 00001415 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10011                                  noscan:
 10012 0000141B C3                      	retn
 10013                                  ;
 10014                                  ;----------------------------------------------------------------------------
 10015                                  ;
 10016                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10017                                  ;
 10018                                  ;
 10019                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10020                                  ;	EXIT	none
 10021                                  ;	USES	ALL
 10022                                  ;
 10023                                  ;----------------------------------------------------------------------------
 10024                                  ;
 10025                                  
 10026                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10027                                  
 10028 0000141C 89D6                    	mov	si,dx
 10029                                  STRING_OUT1:	
 10030 0000141E AC                      	lodsb
 10031 0000141F 3C24                    	cmp	al,'$'
 10032 00001421 74F8                    	je	short noscan
 10033                                  NEXT_STR1:
 10034 00001423 E89002                  	call	OUTT
 10035 00001426 EBF6                    	jmp	short STRING_OUT1
 10036                                  
 10037                                  ;----------------------------------------------------------------------------
 10038                                  ;
 10039                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10040                                  ;
 10041                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10042                                  ;
 10043                                  ;	ENTRY	(ds:dx) = input buffer
 10044                                  ;	EXIT	none
 10045                                  ;	USES	ALL
 10046                                  ;
 10047                                  ;----------------------------------------------------------------------------
 10048                                  
 10049                                  _$STD_CON_STRING_INPUT:		;System call 10
 10050                                  
 10051 00001428 8CD0                    	mov	ax,ss
 10052 0000142A 8EC0                    	mov	es,ax
 10053 0000142C 89D6                    	mov	si,dx
 10054 0000142E 30ED                    	xor	ch,ch
 10055 00001430 AD                      	lodsw
 10056                                  
 10057                                  ;	(AL) = the buffer length
 10058                                  ;	(AH) = the template length
 10059                                  
 10060 00001431 08C0                            or	al,al
 10061 00001433 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10062 00001435 88E3                    	mov	bl,ah		;Init template counter
 10063 00001437 88EF                            mov	bh,ch		;Init template counter
 10064                                  
 10065                                  ;	(BL) = the number of bytes in the template
 10066                                  
 10067 00001439 38D8                            cmp	al,bl
 10068 0000143B 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10069 0000143D 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10070 00001440 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10071                                  
 10072                                  ; The number of chars in the template is >= the number of chars in buffer or
 10073                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10074                                  ; of affairs.  Pretend that the template was empty:
 10075                                  ;
 10076                                  
 10077                                  NOEDIT:	
 10078 00001442 88EB                    	mov	bl,ch		;Reset buffer
 10079                                  EDITON: 
 10080 00001444 88C2                    	mov	dl,al
 10081 00001446 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10082                                  
 10083                                  ;	Top level. We begin to read a line in.
 10084                                  
 10085                                  NEWLIN: 
 10086 00001447 36A0[F901]              	mov	al,[SS:CARPOS]
 10087 0000144B 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10088                                  
 10089 0000144F 56                      	push	si
 10090 00001450 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10091 00001453 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10092 00001458 88EF                    	mov	bh,ch		;No chars from template yet
 10093 0000145A 88EE                    	mov	dh,ch		;No chars to new line yet
 10094 0000145C E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10095 0000145F 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10096 00001461 7503                    	jnz	short GOTCH
 10097                                  
 10098                                  ;	This is the main loop of reading in a character and processing it.
 10099                                  ;
 10100                                  ;	(BH) = the index of the next byte in the template
 10101                                  ;	(BL) = the length of the template
 10102                                  ;	(DH) = the number of bytes in the buffer
 10103                                  ;	(DL) = the length of the buffer
 10104                                  
 10105                                  GETCH:
 10106 00001463 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10107                                  GOTCH:
 10108                                  ;
 10109                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10110                                  ; input queue.
 10111                                  ;
 10112 00001466 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10113 00001468 74F9                    	jz	short GETCH
 10114                                  
 10115                                  ;	If the leading char is the function-key lead byte
 10116                                  
 10117                                  	;cmp	al,[SS:ESCCHAR]
 10118                                  
 10119                                  	; 04/05/2019 - Retro DOS v4.0
 10120                                  
 10121                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10122                                  
 10123 0000146A 2E3A06[370A]            	CMP	AL,[cs:ESCCHAR]
 10124 0000146F 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10125                                  
 10126                                  ;	Rubout and ^H are both destructive backspaces.
 10127                                  
 10128 00001471 3C7F                            cmp	al,c_DEL ; 7FH
 10129 00001473 742E                            jz	short BACKSPJ
 10130 00001475 3C08                            cmp	al,c_BS  ; 8
 10131 00001477 742A                            jz	short BACKSPJ
 10132                                  
 10133                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10134                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10135                                  	;	   	after CMP and a CMP again!
 10136                                  	;		
 10137                                  	;		-It would be better if they use a 'JMP short' to 
 10138                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10139                                  	;		between them. Then, they would be able use a patch
 10140                                  	;		between 5271h and 5279h when if it will be required.
 10141                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10142                                  	;	
 10143                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10144                                  
 10145                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10146                                  	;
 10147                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10148                                  
 10149                                  ;DOSCODE:526D	cmp     al, 8
 10150                                  ;DOSCODE:526F	jz      short BACKSPJ
 10151                                  ;DOSCODE:5271	cmp     al, 17h
 10152                                  ;DOSCODE:5273	nop
 10153                                  ;DOSCODE:5274	nop
 10154                                  ;DOSCODE:5275	cmp     al, 15h
 10155                                  ;DOSCODE:5277	nop
 10156                                  ;DOSCODE:5278	nop
 10157                                  ;DOSCODE:5279	cmp     al, 0Dh
 10158                                  ;DOSCODE:527B	jz      short ENDLIN
 10159                                  ;DOSCODE:527D	cmp     al, 0Ah
 10160                                  ;DOSCODE:527F	jz      short PHYCRLF
 10161                                  	
 10162                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10163                                  	; DOSCODE:525Dh
 10164                                  
 10165                                  ; 16/12/2022
 10166                                  %if 0
 10167                                  	; MSDOS 6.0
 10168                                  ;	^W deletes backward once and then backs up until a letter is before the
 10169                                  ;	cursor
 10170                                  
 10171                                  	CMP     AL,"W"-"@" ; 17h
 10172                                  
 10173                                  ;	The removal of the comment characters before the jump statement will
 10174                                  ;	cause ^W to backup a word.
 10175                                  
 10176                                  ;***	JZ	short WordDel
 10177                                  	NOP
 10178                                  	NOP
 10179                                  
 10180                                  	CMP     AL,"U"-"@" ; 15h
 10181                                  
 10182                                  ;	The removal of the comment characters before the jump statement will
 10183                                  ;	cause ^U to clear a line.
 10184                                  
 10185                                  ;***	JZ	short LineDel
 10186                                  	NOP
 10187                                  	NOP
 10188                                  
 10189                                  %endif
 10190                                  
 10191                                  ;	CR terminates the line.
 10192                                  
 10193 00001479 3C0D                            cmp	al,c_CR ; 0Dh
 10194 0000147B 7432                            jz	short ENDLIN
 10195                                  
 10196                                  ;	LF goes to a new line and keeps on reading.
 10197                                  
 10198 0000147D 3C0A                            cmp	al,c_LF ; 0Ah
 10199 0000147F 7444                    	jz	short PHYCRLF
 10200                                  
 10201                                  ;	^X (or ESC) deletes the line and starts over
 10202                                  
 10203                                  	; MSDOS 3.3
 10204                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10205                                  	;jz	short KILNEW
 10206                                  
 10207                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10208                                  
 10209                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10210                                  
 10211 00001481 2E3A06[360A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10212 00001486 7442                    	jz	short KILNEW
 10213                                  	
 10214                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10215                                  	;jz	short KILNEW
 10216                                  
 10217                                  ; Otherwise, we save the input character.
 10218                                  
 10219                                  SAVCH:	
 10220 00001488 38D6                    	cmp	dh,dl
 10221 0000148A 7319                    	jnb	short BUFFUL		; buffer is full.
 10222 0000148C AA                              stosb
 10223 0000148D FEC6                    	inc	dh                      ; increment count in buffer.
 10224 0000148F E8B802                  	call	BUFOUT			; Print control chars nicely
 10225                                  
 10226 00001492 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10227 00001498 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10228 0000149A 38DF                            cmp	bh,bl
 10229 0000149C 73C5                            jnb	short GETCH		; no more characters in template
 10230 0000149E 46                              inc	si                      ; Skip to next char in template
 10231 0000149F FEC7                            inc	bh                      ; remember position in template
 10232 000014A1 EBC0                            jmp	short GETCH
 10233                                  
 10234                                  BACKSPJ: 
 10235 000014A3 EB38                    	jmp	short BACKSP
 10236                                  
 10237                                  BUFFUL: 
 10238 000014A5 B007                    	mov	al, 7			; Bell to signal full buffer
 10239 000014A7 E80C02                  	call	OUTT
 10240 000014AA EBB7                    	jmp	short GETCH
 10241                                  
 10242                                  ESCAPE: 
 10243                                  	;transfer OEMFunctionKey
 10244 000014AC E9B3F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10245                                  
 10246                                  ENDLIN:
 10247 000014AF AA                              stosb				; Put the CR in the buffer
 10248 000014B0 E80302                  	call	OUTT                    ; Echo it
 10249 000014B3 5F                              pop	di                      ; Get start of user buffer
 10250 000014B4 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10251 000014B7 FEC6                            inc	dh			; DH is length including CR
 10252                                  
 10253                                  COPYNEW:
 10254                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10255                                  	;mov	bp, es
 10256                                  	;mov	bx, ds
 10257                                  	;mov	es, bx
 10258                                  	;mov	ds, bp
 10259                                  	;mov	si, INBUF
 10260                                  	;mov	cl, dh
 10261                                  	;rep	movsb
 10262                                  	;retn
 10263                                  
 10264                                  	; CPMIO.ASM (MSDOS 6.0)
 10265                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10266                                  	;SAVE	<DS,ES>
 10267 000014B9 1E                      	PUSH	DS
 10268 000014BA 06                      	PUSH	ES
 10269                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10270 000014BB 1F                      	POP	DS
 10271 000014BC 07                      	POP	ES
 10272                                  
 10273                                  ;;hkn; INBUF is in DOSDATA
 10274 000014BD BE[FB01]                        MOV     SI,INBUF
 10275 000014C0 88F1                            MOV     CL,DH                   ; set up count
 10276 000014C2 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10277                                  OLDBAK_RETN:
 10278 000014C4 C3                              RETN
 10279                                  
 10280                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10281                                  
 10282                                  PHYCRLF:
 10283 000014C5 E82001                  	CALL	CRLF
 10284 000014C8 EB99                            JMP	short GETCH
 10285                                  
 10286                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10287                                  
 10288                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10289                                  
 10290                                  	; Note: Following routines were not used in IBMDOS.COM
 10291                                  	;	-CRTL+W, CRTL+U is not activated-
 10292                                  	;	but they were in the kernel code!?)
 10293                                  
 10294                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10295                                  	; DOSCODE:52B6h
 10296                                  
 10297                                  ;;;;;;;;
 10298                                  
 10299                                  ; 16/12/2022
 10300                                  %if 0
 10301                                  ;
 10302                                  ; Delete the previous line
 10303                                  ;
 10304                                  LineDel:
 10305                                  	OR      DH,DH
 10306                                  	JZ	short GETCH	 ; 06/12/2022
 10307                                  	Call    BackSpace
 10308                                  	JMP	short LineDel
 10309                                  
 10310                                  %endif
 10311                                  
 10312                                  ;
 10313                                  ; delete the previous word.
 10314                                  ;
 10315                                  WordDel:
 10316                                  WordLoop:
 10317                                  ;	Call    BackSpace               ; backspace the one spot
 10318                                  ;	OR      DH,DH
 10319                                  ;	JZ	short GetChj
 10320                                  ;	MOV     AL,[ES:DI-1]
 10321                                  ;	cmp     al,'0'
 10322                                  ;	jb	short GetChj
 10323                                  ;	cmp     al,'9'
 10324                                  ;	jbe	short WordLoop
 10325                                  ;	OR      AL,20h
 10326                                  ;	CMP     AL,'a'
 10327                                  ;	JB	short GetChj
 10328                                  ;	CMP     AL,'z'
 10329                                  ;	JBE	short WordLoop
 10330                                  ;GetChj: 
 10331                                  ;	JMP	GETCH
 10332                                  
 10333                                  ; 16/12/2022
 10334                                  %if 0
 10335                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10336                                  	; (Worddel is not called or jumped from anywhere!)
 10337                                  WordDel:
 10338                                  WordLoop:
 10339                                  	Call    BackSpace               ; backspace the one spot
 10340                                  	OR      DH,DH
 10341                                  	JZ	short GetChj
 10342                                  	MOV     AL,[ES:DI-1]
 10343                                  	cmp     al,'0'
 10344                                  	jb	short GetChj
 10345                                  	cmp     al,'9'
 10346                                  	jbe	short WordLoop
 10347                                  	OR      AL,20h
 10348                                  	CMP     AL,'a'
 10349                                  	JB	short GetChj
 10350                                  	CMP     AL,'z'
 10351                                  	JBE	short WordLoop
 10352                                  GetChj: 
 10353                                  	JMP	GETCH
 10354                                  
 10355                                  %endif
 10356                                  
 10357                                  ;;;;;;;;
 10358                                  
 10359                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10360                                  
 10361                                  ; The user wants to throw away what he's typed in and wants to start over.
 10362                                  ; We print the backslash and then go to the next line and tab to the correct
 10363                                  ; spot to begin the buffered input.
 10364                                  
 10365                                  KILNEW:
 10366 000014CA B05C                            mov	al,'\'
 10367 000014CC E8E701                          call	OUTT            ;Print the CANCEL indicator
 10368 000014CF 5E                              pop	si		;Remember start of edit buffer
 10369                                  PUTNEW:
 10370 000014D0 E81501                  	call	CRLF            ;Go to next line on screen
 10371 000014D3 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10372 000014D7 E85002                  	call	TAB             ;Tab over
 10373 000014DA E96AFF                          JMP     NEWLIN		;Start over again
 10374                                  
 10375                                  ;	Destructively back up one character position
 10376                                  
 10377                                  BACKSP:
 10378                                  	; 09/09/2018
 10379 000014DD E80200                  	Call    BackSpace
 10380 000014E0 EB81                    	JMP     GETCH
 10381                                  
 10382                                  BackSpace:
 10383 000014E2 08F6                    	or	dh,dh
 10384 000014E4 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10385 000014E6 E85800                  	call	BACKUP          ;Do the backup
 10386 000014E9 268A05                  	mov	al,[es:di]	;Get the deleted char
 10387 000014EC 3C20                            cmp	al,20h	; ' '
 10388 000014EE 730F                    	jnb	short OLDBAK	;Was a normal char
 10389 000014F0 3C09                            cmp	al,c_HT ; 9
 10390 000014F2 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10391                                  ;; 9/27/86 fix for ctrl-U backspace
 10392 000014F4 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10393 000014F6 7407                    	JZ	short OLDBAK
 10394 000014F8 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10395 000014FA 7403                    	JZ	short OLDBAK
 10396                                  ;; 9/27/86 fix for ctrl-U backspace
 10397 000014FC E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10398                                  OLDBAK:
 10399 000014FF 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10400 00001505 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10401 00001507 08FF                    	or	bh,bh
 10402 00001509 74B9                            jz	short OLDBAK_RETN 
 10403                                  				;Not advanced in template, stay where we are
 10404 0000150B FECF                    	dec	bh		;Go back in template
 10405 0000150D 4E                              dec	si
 10406 0000150E C3                      	retn
 10407                                  BAKTAB:
 10408 0000150F 57                              push	di
 10409 00001510 4F                              dec	di		;Back up one char
 10410 00001511 FD                              std			;Go backward
 10411 00001512 88F1                            mov	cl,dh		;Number of chars currently in line
 10412 00001514 B020                            mov	al,20h	; ' '
 10413 00001516 53                              push	bx
 10414 00001517 B307                            mov	bl,7		;Max
 10415 00001519 E30E                            jcxz	FIGTAB		;At start, do nothing
 10416                                  FNDPOS:
 10417 0000151B AE                              scasb			;Look back
 10418 0000151C 7609                    	jbe	short CHKCNT
 10419 0000151E 26807D0109              	cmp	byte [es:di+1],9
 10420 00001523 7409                    	jz	short HAVTAB	;Found a tab
 10421 00001525 FECB                    	dec	bl		;Back one char if non tab control char
 10422                                  CHKCNT:
 10423 00001527 E2F2                            loop	FNDPOS
 10424                                  FIGTAB:		
 10425 00001529 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10426                                  HAVTAB:
 10427 0000152E 28F3                    	sub	bl,dh
 10428 00001530 00D9                    	add	cl,bl
 10429 00001532 80E107                  	and	cl,7		;CX has correct number to erase
 10430 00001535 FC                      	cld			;Back to normal
 10431 00001536 5B                      	pop	bx
 10432 00001537 5F                      	pop	di
 10433 00001538 74C5                    	jz	short OLDBAK	;Nothing to erase
 10434                                  TABBAK:
 10435 0000153A E80700                  	call	BACKMES
 10436 0000153D E2FB                    	loop	TABBAK		;Erase correct number of chars
 10437 0000153F EBBE                    	jmp	short OLDBAK
 10438                                  
 10439                                  BACKUP:
 10440 00001541 FECE                            dec	dh		;Back up in line
 10441 00001543 4F                              dec	di
 10442                                  BACKMES:
 10443 00001544 B008                            mov	al,c_BS ; 8	;Backspace
 10444 00001546 E86D01                          call	OUTT
 10445 00001549 B020                            mov	al,20h ; ' '	;Erase
 10446 0000154B E86801                          call	OUTT
 10447 0000154E B008                            mov	al,c_BS ; 8	;Backspace
 10448 00001550 E96301                  	jmp	OUTT		;Done
 10449                                  
 10450                                  ;User really wants an ESC character in his line
 10451                                  TWOESC:	
 10452 00001553 2EA0[370A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10453 00001557 E92EFF                  	jmp	SAVCH
 10454                                  
 10455                                  ;Copy the rest of the template
 10456                                  COPYLIN:
 10457 0000155A 88D9                            mov	cl,bl		;Total size of template
 10458 0000155C 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10459 0000155E EB07                            jmp	short COPYEACH
 10460                                  
 10461                                  COPYSTR:
 10462 00001560 E83400                  	call	FINDOLD         ;Find the char
 10463 00001563 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10464                                  
 10465                                  ;Copy one char from template to line
 10466                                  COPYONE:
 10467 00001565 B101                            mov	cl,1
 10468                                  ;Copy CX chars from template to line
 10469                                  COPYEACH:
 10470 00001567 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10471 0000156D 38D6                    	cmp	dh,dl
 10472 0000156F 740F                            jz	short GETCH2		;At end of line, can't do anything
 10473 00001571 38DF                            cmp	bh,bl
 10474 00001573 740B                            jz	short GETCH2		;At end of template, can't do anything
 10475 00001575 AC                              lodsb
 10476 00001576 AA                              stosb
 10477 00001577 E8D001                  	call	BUFOUT
 10478 0000157A FEC7                            inc	bh			;Ahead in template
 10479 0000157C FEC6                            inc	dh			;Ahead in line
 10480 0000157E E2E7                            loop	COPYEACH
 10481                                  GETCH2:
 10482 00001580 E9E0FE                          jmp	GETCH
 10483                                  
 10484                                  ;Skip one char in template
 10485                                  SKIPONE:
 10486 00001583 38DF                    	cmp	bh,bl
 10487 00001585 74F9                    	jz	short GETCH2		;At end of template
 10488 00001587 FEC7                    	inc	bh			;Ahead in templat
 10489 00001589 46                      	inc	si
 10490 0000158A E9D6FE                  	jmp	GETCH
 10491                                  
 10492                                  SKIPSTR:
 10493 0000158D E80700                  	call	FINDOLD                 ;Find out how far to go
 10494 00001590 01CE                            add	si,cx			;Go there
 10495 00001592 00CF                            add	bh,cl
 10496 00001594 E9CCFE                          jmp	GETCH
 10497                                  
 10498                                  ;Get the next user char, and look ahead in template for a match
 10499                                  ;CX indicates how many chars to skip to get there on output
 10500                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10501                                  ;       address is popped off and a jump to GETCH is taken.
 10502                                  ;       Make sure nothing extra on stack when this routine
 10503                                  ;       is called!!! (no PUSHes before calling it).
 10504                                  
 10505                                  FINDOLD:
 10506 00001597 E828FE                          call	_$STD_CON_INPUT_NO_ECHO
 10507                                  
 10508                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10509                                  
 10510                                  	;CMP     AL,[SS:ESCCHAR]	
 10511                                  	;JNZ     SHORT FINDSETUP
 10512                                  
 10513                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10514                                  
 10515                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10516                                  
 10517 0000159A 2E3A06[370A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10518 0000159F 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10519                                  
 10520 000015A1 E81EFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10521 000015A4 EB1D                            JMP     SHORT NOTFND		; go try again
 10522                                  FINDSETUP:
 10523 000015A6 88D9                    	mov	cl,bl
 10524 000015A8 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10525 000015AA 7417                    	jz	short NOTFND	;At end of template
 10526 000015AC 49                              dec	cx		;Cannot point past end, limit search
 10527 000015AD 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10528 000015AF 06                      	push	es
 10529 000015B0 1E                      	push	ds
 10530 000015B1 07                      	pop	es
 10531 000015B2 57                      	push	di
 10532 000015B3 89F7                    	mov	di,si		;Template to ES:DI
 10533 000015B5 47                      	inc	di
 10534 000015B6 F2AE                    	repne	scasb		;Look
 10535 000015B8 5F                      	pop	di
 10536 000015B9 07                      	pop	es
 10537 000015BA 7507                    	jnz	short NOTFND	;Didn't find the char
 10538 000015BC F6D1                            not	cl		;Turn how far to go into how far we went
 10539 000015BE 00D9                            add	cl,bl		;Add size of template
 10540 000015C0 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10541                                  FINDOLD_RETN:
 10542 000015C2 C3                      	retn
 10543                                  
 10544                                  NOTFND:
 10545 000015C3 5D                              pop	bp              ;Chuck return address
 10546 000015C4 E99CFE                          jmp	GETCH
 10547                                  
 10548                                  REEDIT:
 10549 000015C7 B040                    	mov	al,'@'		;Output re-edit character
 10550 000015C9 E8EA00                  	call	OUTT
 10551 000015CC 5F                      	pop	di
 10552 000015CD 57                      	push	di
 10553 000015CE 06                      	push	es
 10554 000015CF 1E                      	push	ds
 10555 000015D0 E8E6FE                  	call	COPYNEW		;Copy current line into template
 10556 000015D3 1F                      	pop	ds
 10557 000015D4 07                      	pop	es
 10558 000015D5 5E                      	pop	si
 10559 000015D6 88F3                    	mov	bl,dh		;Size of line is new size template
 10560 000015D8 E9F5FE                  	jmp	PUTNEW		;Start over again
 10561                                  
 10562                                  EXITINS:
 10563                                  ENTERINS:
 10564 000015DB 36F616[7905]            	not	byte [SS:INSMODE]
 10565 000015E0 E980FE                  	jmp	GETCH
 10566                                  
 10567                                  ;Put a real live ^Z in the buffer (embedded)
 10568                                  CTRLZ:
 10569 000015E3 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10570 000015E5 E9A0FE                          jmp	SAVCH
 10571                                  
 10572                                  ;Output a CRLF
 10573                                  CRLF:
 10574 000015E8 B00D                    	mov	al,c_CR ; 0Dh 
 10575 000015EA E8C900                  	call	OUTT
 10576 000015ED B00A                    	mov	al,c_LF ; 0Ah
 10577 000015EF E9C400                  	jmp	OUTT
 10578                                  
 10579                                  ;
 10580                                  ;----------------------------------------------------------------------------
 10581                                  ;
 10582                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10583                                  ;
 10584                                  ;	Input or output raw character from console, no echo
 10585                                  ;
 10586                                  ;	ENTRY	DL = -1 if input
 10587                                  ;		   =  output character if output
 10588                                  ;	EXIT	(AL) = input character if input
 10589                                  ;	USES	all
 10590                                  ;
 10591                                  ;----------------------------------------------------------------------------
 10592                                  ; 20/07/2018 - Retro DOS v3.0
 10593                                  
 10594                                  ; 04/05/2019 - Retro DOS v4.0
 10595                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10596                                  
 10597                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10598                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10599                                  
 10600                                  _$RAW_CON_IO:			; System call 6
 10601                                  
 10602 000015F2 88D0                            MOV     AL,DL
 10603 000015F4 3CFF                            CMP     AL,-1
 10604 000015F6 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10605                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10606                                  	;jz	short rci1
 10607                                  	;jmp	short RAWOUT
 10608                                  	; 16/12/202
 10609                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10610                                  	;nop
 10611                                  rci1:	        
 10612                                  			; Get pointer to register save area
 10613 000015F8 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10614 000015FD 31DB                    	XOR     BX,BX
 10615                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10616 000015FF E8DD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10617                                          ;JC	SHORT RET17
 10618 00001602 72BE                            jc	short FINDOLD_RETN
 10619 00001604 B401                    	MOV     AH,1
 10620 00001606 E8472F                          CALL	IOFUNC
 10621 00001609 750B                            JNZ     SHORT RESFLG
 10622 0000160B E80A3C                          CALL	SPOOLINT
 10623                                          ;OR	BYTE [ES:DI+16H],40H
 10624 0000160E 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10625 00001613 30C0                            XOR     AL,AL
 10626                                  RET17:
 10627 00001615 C3                              RETN
 10628                                  
 10629                                  RESFLG:
 10630                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10631 00001616 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10632                                  				; Reset user's zero flag
 10633                                  ;RILP:
 10634                                  rci0:
 10635 0000161B E8FA3B                       	CALL	SPOOLINT
 10636                                  ;
 10637                                  ;----------------------------------------------------------------------------
 10638                                  ;
 10639                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10640                                  ;
 10641                                  ;	Input raw character from console, no echo
 10642                                  ;
 10643                                  ;	ENTRY	none
 10644                                  ;	EXIT	(al) = character
 10645                                  ;	USES	all
 10646                                  ;
 10647                                  ;----------------------------------------------------------------------------
 10648                                  ;
 10649                                  
 10650                                  ;rci0:	invoke	SPOOLINT
 10651                                  
 10652                                  	;entry	$RAW_CON_INPUT
 10653                                  
 10654                                  	; 04/05/2019 - Retro DOS v4.0
 10655                                  
 10656                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10657                                  
 10658                                  _$RAW_CON_INPUT:		; System call 7
 10659 0000161E 53                      	push	bx
 10660 0000161F 31DB                            XOR     BX,BX
 10661                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10662 00001621 E8BB20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10663 00001624 5B                              pop	bx
 10664 00001625 72EE                    	JC	SHORT RET17
 10665 00001627 B401                            MOV     AH,1
 10666 00001629 E8242F                          CALL	IOFUNC
 10667                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10668                                  	;XOR	AH,AH
 10669                                          ;CALL	IOFUNC
 10670                                          ;RETN
 10671 0000162C 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10672 0000162E B484                    	MOV	AH,84h
 10673 00001630 CD2A                    	INT	int_IBM  ; int 2Ah
 10674 00001632 EBE7                    	JMP	short rci0
 10675                                  rci5:	
 10676 00001634 30E4                            XOR     AH,AH
 10677                                          ;CALL	IOFUNC
 10678                                          ;RETN
 10679                                  	; 18/12/2022
 10680 00001636 E9172F                  	jmp	IOFUNC
 10681                                  
 10682                                  ;       Output the character in AL to stdout
 10683                                  ;
 10684                                  	;entry   RAWOUT
 10685                                  RAWOUT:
 10686 00001639 53                              PUSH    BX
 10687 0000163A BB0100                          MOV     BX,1
 10688                                  
 10689                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10690 0000163D E89F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10691 00001640 721B                            JC      SHORT RAWRET1
 10692                                  
 10693                                  	;
 10694                                  	; MSDOS 2.11
 10695                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10696                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10697                                          ;PUSH	DS
 10698                                          ;PUSH	SI
 10699                                          ;LDS	SI,[SI+19H]		; output to special?
 10700                                  	;TEST	BYTE [SI+4],ISSPEC
 10701                                  	;POP	SI
 10702                                  	;
 10703                                          
 10704                                  	; MSDOS 3.3 & MSDOS 6.0
 10705                                  	;mov	bx,[si+5]
 10706 00001642 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10707                                   ;
 10708                                   ; If we are a network handle OR if we are not a local device then go do the
 10709                                   ; output the hard way.
 10710                                   ;	
 10711                                  	;and	bx,8080h
 10712 00001645 81E38080                	AND	BX,sf_isnet+devid_device
 10713                                  	;cmp	bx,80h
 10714 00001649 81FB8000                	CMP	BX,devid_device
 10715 0000164D 7510                    	jnz     short RAWNORM
 10716 0000164F 1E                      	push    ds
 10717                                  	;lds	bx,[si+7]
 10718 00001650 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10719                                  	;test	byte [bx+4],10h
 10720 00001653 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10721                                  	;
 10722                                  
 10723 00001657 1F                              POP     DS
 10724 00001658 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10725                                  
 10726 0000165A CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10727                                  
 10728                                          ;JMP	SHORT RAWRET
 10729                                  ;RAWNORM:
 10730                                  ;	CALL    RAWOUT3
 10731                                  RAWRET: 
 10732 0000165C F8                      	CLC
 10733                                  RAWRET1:
 10734 0000165D 5B                              POP     BX
 10735                                  RAWRET2:
 10736 0000165E C3                      	RETN
 10737                                  RAWNORM:
 10738 0000165F E80700                  	CALL    RAWOUT3
 10739 00001662 EBF8                    	jmp	short RAWRET
 10740                                  
 10741                                  ;       Output the character in AL to handle in BX
 10742                                  ;
 10743                                  ;	entry   RAWOUT2
 10744                                  
 10745                                  RAWOUT2:
 10746                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10747                                  	;JC	SHORT RET18
 10748 00001664 E87820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10749 00001667 72F5                    	JC	SHORT RAWRET2
 10750                                  RAWOUT3:
 10751 00001669 50                              PUSH    AX
 10752 0000166A EB0C                            JMP     SHORT RAWOSTRT
 10753                                  ROLP:
 10754 0000166C E8A93B                          CALL	SPOOLINT
 10755                                  
 10756                                  	; 01/05/2019 - Retro DOS v4.0
 10757                                  
 10758                                  	; MSDOS 6.0
 10759                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10760                                  	; 17/12/2022
 10761 0000166F 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10762                                  	;or	word [ss:DOS34_FLAG],200h
 10763                                  				;AN002; set control break
 10764                                  	;invoke DSKSTATCHK
 10765 00001675 E81C3B                  	call	DSKSTATCHK	;AN002; check control break
 10766                                  RAWOSTRT:
 10767 00001678 B403                            MOV     AH,3
 10768 0000167A E8D32E                          CALL    IOFUNC
 10769 0000167D 74ED                            JZ      SHORT ROLP
 10770                                  
 10771                                  	; MSDOS 6.0
 10772                                  ;SR;
 10773                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10774                                  ;the user failed. We do not send a char if this happens. We however return 
 10775                                  ;to the caller with carry clear because this DOS call does not return any
 10776                                  ;status. 
 10777                                  ;
 10778 0000167F 40                      	inc	ax		;fail on I24 if ax = -1
 10779 00001680 58                      	POP	AX
 10780 00001681 7405                    	jz	short nosend	;yes, do not send char
 10781 00001683 B402                    	MOV	AH,2
 10782 00001685 E8C82E                  	call	IOFUNC
 10783                                  nosend:
 10784 00001688 F8                      	CLC			; Clear carry indicating successful
 10785 00001689 C3                      	retn
 10786                                  
 10787                                  	; MSDOS 3.3 & MSDOS 2.11
 10788                                  	;POP	AX
 10789                                  	;MOV	AH,2
 10790                                          ;CALL	IOFUNC
 10791                                  	;CLC			; Clear carry indicating successful
 10792                                  ;RET18:    
 10793                                  	;RETN
 10794                                  
 10795                                  ;;10/08/2018
 10796                                  ; 20/07/2018 - Retro DOS v3.0
 10797                                  ; ---------------------------------------------------------------------------
 10798                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10799                                  ; ---------------------------------------------------------------------------
 10800                                  
 10801                                  ; This routine is called at DOS init
 10802                                  
 10803                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10804                                  ;;OUTMES:
 10805                                  ;;	;LODS	CS:BYTE PTR [SI]
 10806                                  ;;	CS	LODSB
 10807                                  ;;	CMP     AL,"$" ; 24h
 10808                                  ;;	JZ	SHORT RET18
 10809                                  ;;	CALL	OUTT
 10810                                  ;;	JMP     SHORT OUTMES
 10811                                  
 10812                                  ; ---------------------------------------------------------------------------
 10813                                  
 10814                                  ; 20/07/2018 - Retro DOS v3.0
 10815                                  
 10816                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10817                                  
 10818                                  ;
 10819                                  ;----------------------------------------------------------------------------
 10820                                  ;
 10821                                  ; Inputs:
 10822                                  ;	AX=0 save the DEVCALL request packet
 10823                                  ;	  =1 restore the DEVCALL request packet
 10824                                  ; Function:
 10825                                  ;	save or restore the DEVCALL packet
 10826                                  ; Returns:
 10827                                  ;	none
 10828                                  ;
 10829                                  ;----------------------------------------------------------------------------
 10830                                  ;
 10831                                  
 10832                                  ; 04/05/2019 - Retro DOS v4.0
 10833                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10834                                  
 10835                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10836                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10837                                  
 10838                                  ; 12/05/2019
 10839                                  
 10840                                  Save_Restore_Packet:
 10841 0000168A 1E                      	PUSH	DS
 10842 0000168B 06                      	PUSH	ES
 10843 0000168C 56                      	PUSH	SI
 10844 0000168D 57                      	PUSH	DI
 10845                                  
 10846                                  	; 16/12/2022
 10847                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10848                                  	; 09/09/2018
 10849 0000168E BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10850 00001691 BE[5A03]                	mov	si,DEVCALL
 10851                                  	;
 10852 00001694 83F800                  	CMP	AX,0		; save packet
 10853 00001697 7402                    	JZ	short save_packet ; 16/12/2022
 10854                                  	;je	short set_seg
 10855                                  
 10856                                  	; MSDOS 6.0
 10857                                  restore_packet:
 10858                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10859                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10860                                  	; MSDOS 3.3
 10861                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10862                                  	;mov	di,DEVCALL  ; 09/09/2018
 10863                                  	;
 10864                                  	;JMP	short set_seg
 10865                                  
 10866                                  	; 16/12/2022	
 10867                                  	; 09/09/2018
 10868 00001699 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10869                                  
 10870                                  ; 16/12/2022
 10871                                  %if 0
 10872                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10873                                  	cmp	ax,0		; save packet
 10874                                  	jz	short save_packet
 10875                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10876                                  	mov	di,DEVCALL 
 10877                                  	jmp	short set_seg
 10878                                  
 10879                                  	; MSDOS 6.0
 10880                                  save_packet:
 10881                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10882                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10883                                  	; 09/09/2018
 10884                                  	; MSDOS 3.3
 10885                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10886                                  	;mov	si,DEVCALL ; 09/09/2018
 10887                                  
 10888                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10889                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10890                                  	mov	si,DEVCALL
 10891                                  %endif
 10892                                  
 10893                                  ; 16/12/2022
 10894                                  save_packet:
 10895                                  ;set_seg:
 10896                                  	; MSDOS 3.3
 10897                                  	;mov	ax,cs
 10898                                  
 10899                                  	; MSDOS 6.0
 10900 0000169B 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10901                                  
 10902 0000169D 8ED8                    	MOV	DS,AX
 10903 0000169F 8EC0                    	MOV	ES,AX
 10904 000016A1 B90B00                  	MOV	CX,11		; 11 words to move
 10905 000016A4 F3A5                    	REP	MOVSW
 10906                                  
 10907 000016A6 5F                      	POP	DI
 10908 000016A7 5E                      	POP	SI
 10909 000016A8 07                      	POP	ES
 10910 000016A9 1F                      	POP	DS
 10911 000016AA C3                      	retn
 10912                                  
 10913                                  ;============================================================================
 10914                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10915                                  ;============================================================================
 10916                                  ; 20/07/2018 - Retro DOS v3.0
 10917                                  ; 01/05/2019 - Retro DOS v4.0
 10918                                  
 10919                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10920                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10921                                  ;hkn;	not valid. 
 10922                                  
 10923                                  ;
 10924                                  ;----------------------------------------------------------------------------
 10925                                  ;
 10926                                  ;**	$STD_CON_INPUT - System Call 1
 10927                                  ;
 10928                                  ;	Input character from console, echo
 10929                                  ;
 10930                                  ;	ENTRY	none
 10931                                  ;	EXIT	(al) = character
 10932                                  ;	USES	ALL
 10933                                  ;
 10934                                  ;----------------------------------------------------------------------------
 10935                                  ;
 10936                                  
 10937                                  _$STD_CON_INPUT:	;System call 1
 10938                                  	
 10939 000016AB E814FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10940 000016AE 50                      	PUSH	AX
 10941 000016AF E80400                  	CALL	OUTT
 10942 000016B2 58                      	POP	AX
 10943                                  CON_INPUT_RETN:	
 10944 000016B3 C3                      	RETN
 10945                                  
 10946                                  ;
 10947                                  ;----------------------------------------------------------------------------
 10948                                  ;
 10949                                  ;**	$STD_CON_OUTPUT - System Call 2
 10950                                  ;
 10951                                  ;	Output character to console
 10952                                  ;
 10953                                  ;	ENTRY	(dl) = character
 10954                                  ;	EXIT	none
 10955                                  ;	USES	all
 10956                                  ;
 10957                                  ;----------------------------------------------------------------------------
 10958                                  ;
 10959                                  
 10960                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10961                                  
 10962                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10963                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10964                                  
 10965                                  _$STD_CON_OUTPUT:	;System call 2
 10966                                  
 10967 000016B4 88D0                    	MOV	AL,DL
 10968                                  OUTT:
 10969 000016B6 3C20                    	CMP	AL,20H ; " "
 10970 000016B8 725C                    	JB	SHORT CTRLOUT
 10971 000016BA 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10972 000016BC 7405                    	JZ	SHORT OUTCH
 10973                                  OUTCHA:	
 10974                                  	;INC	BYTE PTR [CARPOS]
 10975 000016BE 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10976                                  OUTCH:
 10977 000016C3 1E                      	PUSH	DS
 10978 000016C4 56                      	PUSH	SI
 10979                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10980                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10981 000016C5 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 10982                                  	;AND	BYTE [SS:CHARCO],00111111B
 10983                                  	; 01/05/2019 - Retro DOS v4.0
 10984 000016CA 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 10985 000016D0 7505                    	JNZ	SHORT OUTSKIP
 10986                                  
 10987 000016D2 50                      	PUSH	AX
 10988 000016D3 E8703B                  	CALL	STATCHK
 10989 000016D6 58                      	POP	AX
 10990                                  OUTSKIP:
 10991 000016D7 E85FFF                  	CALL	RAWOUT				;output the character
 10992                                  
 10993 000016DA 5E                      	POP	SI
 10994 000016DB 1F                      	POP	DS
 10995                                  
 10996                                  	;TEST	BYTE PTR [PFLAG],-1
 10997                                  	;retz
 10998 000016DC 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 10999 000016E2 74CF                    	JZ	SHORT CON_INPUT_RETN
 11000                                  
 11001 000016E4 53                      	PUSH	BX
 11002 000016E5 1E                      	PUSH	DS
 11003 000016E6 56                      	PUSH	SI
 11004 000016E7 BB0100                  	MOV	BX,1
 11005                                  	; 20/07/2018 - Retro DOS v3.0
 11006                                  	; MSDOS 3.3
 11007                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11008 000016EA E8F21F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11009                                  					;hkn; to sft entry
 11010 000016ED 7224                    	JC	SHORT TRIPOPJ
 11011                                  
 11012                                  	; 01/05/2019 - Retro DOS v4.0
 11013                                  
 11014                                  	;mov	bx,[si+5]
 11015 000016EF 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11016                                  	;test	bx,8000h
 11017                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11018 000016F2 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11019 000016F5 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11020                                  	;;test	bx,80h
 11021                                  	;TEST	BX,devid_device 		; output to file?
 11022 000016F7 F6C380                  	test	bl,devid_device ; 80h
 11023 000016FA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11024                                  	; 14/03/2018
 11025                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11026                                  	;jc	short TRIPOPJ
 11027                                  	; MSDOS 2.11
 11028                                  	;test	byte [SI+18H], 80h
 11029                                  	;jz	short TRIPOPJ
 11030 000016FC BB0400                  	MOV	BX,4
 11031 000016FF E8DD1F                  	CALL	GET_IO_SFT
 11032 00001702 720F                    	JC	SHORT TRIPOPJ
 11033                                  	;;test	word [si+5], 800h
 11034                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11035                                  	;test	byte [si+6],8 ; 08/11/2022
 11036 00001704 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11037                                  						; StdPrn redirected?
 11038                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11039                                  	;jz	LISSTRT2 ; 10/08/2018 
 11040                                  	; 16/12/2022
 11041 00001708 7503                    	jnz	short outch1
 11042 0000170A E98700                  	jmp	LISSTRT2
 11043                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11044                                  	;jz	short LISSTRT2J
 11045                                  outch1:
 11046                                  	;MOV	BYTE [PFLAG],0			
 11047 0000170D 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11048                                  	; MSDOS 2.11
 11049                                  	;mov	bx,4
 11050                                  	;jmp	short LISSTRT2
 11051                                  	
 11052                                  TRIPOPJ:
 11053                                  	; 20/07/2018
 11054 00001713 E98100                  	JMP	TRIPOP
 11055                                  
 11056                                  	; 16/12/2022
 11057                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11058                                  ;LISSTRT2J:
 11059                                  ;	JMP	LISSTRT2
 11060                                  
 11061                                  CTRLOUT:
 11062 00001716 3C0D                    	CMP	AL,c_CR ; 0Dh
 11063 00001718 7420                    	JZ	SHORT ZERPOS
 11064 0000171A 3C08                    	CMP	AL,c_BS ; 8
 11065 0000171C 7424                    	JZ	SHORT BACKPOS
 11066 0000171E 3C09                    	CMP	AL,c_HT ; 9
 11067 00001720 75A1                    	JNZ	SHORT OUTCH
 11068                                  	;MOV	AL,[CARPOS]
 11069 00001722 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11070 00001726 0CF8                    	OR	AL,0F8H
 11071 00001728 F6D8                    	NEG	AL
 11072                                  TAB:
 11073 0000172A 51                      	PUSH	CX
 11074 0000172B 88C1                    	MOV	CL,AL
 11075 0000172D B500                    	MOV	CH,0
 11076 0000172F E307                    	JCXZ	POPTAB
 11077                                  TABLP:
 11078 00001731 B020                    	MOV	AL," "
 11079 00001733 E880FF                  	CALL	OUTT
 11080 00001736 E2F9                    	LOOP	TABLP
 11081                                  POPTAB:
 11082 00001738 59                      	POP	CX
 11083                                  
 11084 00001739 C3                      	RETN
 11085                                  
 11086                                  ZERPOS:
 11087                                  	;MOV	BYTE PTR [CARPOS],0
 11088 0000173A 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11089                                  	; 10/08/2018
 11090 00001740 EB81                    	JMP	short OUTCH ; 04/05/2019
 11091                                  	
 11092                                  	; 18/12/2022
 11093                                  ;OUTJ:	
 11094                                  	;JMP	OUTT
 11095                                  
 11096                                  BACKPOS:
 11097                                  	;DEC	BYTE PTR [CARPOS]
 11098 00001742 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11099 00001747 E979FF                  	JMP	OUTCH
 11100                                  
 11101                                  BUFOUT:
 11102 0000174A 3C20                    	CMP	AL," "
 11103 0000174C 7315                    	JAE	SHORT OUTJ		;Normal char
 11104 0000174E 3C09                    	CMP	AL,9
 11105 00001750 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11106                                  	;DOS 3.3  7/14/86
 11107 00001752 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11108 00001754 740D                    	JZ	short CTRLU
 11109 00001756 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11110 00001758 7409                    	JZ	short CTRLU
 11111                                  NOT_CTRLU:
 11112                                  	;DOS 3.3  7/14/86
 11113 0000175A 50                      	PUSH	AX
 11114 0000175B B05E                    	MOV	AL,"^"
 11115 0000175D E856FF                  	CALL	OUTT		;Print '^' before control chars
 11116 00001760 58                      	POP	AX
 11117 00001761 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11118                                  CTRLU:
 11119                                  	;CALL	OUTT
 11120                                  	; 18/12/2022
 11121                                  OUTJ:
 11122 00001763 E950FF                  	jmp	OUTT
 11123                                  ;BUFOUT_RETN:
 11124                                  	;RETN
 11125                                  
 11126                                  ;
 11127                                  ;----------------------------------------------------------------------------
 11128                                  ;
 11129                                  ;**	$STD_AUX_INPUT - System Call 3
 11130                                  ;
 11131                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11132                                  ;
 11133                                  ;	ENTRY	none
 11134                                  ;	EXIT	(al) = character
 11135                                  ;	USES	all
 11136                                  ;
 11137                                  ;----------------------------------------------------------------------------
 11138                                  ;
 11139                                  
 11140                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11141                                  
 11142                                  _$STD_AUX_INPUT:	;System call 3
 11143                                  
 11144 00001766 E8DD3A                  	CALL	STATCHK
 11145 00001769 BB0300                  	MOV	BX,3
 11146 0000176C E8701F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11147                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11148                                  	;retc
 11149                                  	; 16/12/2022
 11150                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11151                                  	;JC	SHORT BUFOUT_RETN
 11152                                  	;JMP	SHORT TAISTRT
 11153                                  	; 07/12/2022
 11154 0000176F 7304                    	jnc	SHORT TAISTRT
 11155 00001771 C3                      	retn	
 11156                                  
 11157                                  AUXILP:
 11158 00001772 E8A33A                  	CALL	SPOOLINT
 11159                                  TAISTRT:
 11160 00001775 B401                    	MOV	AH,1
 11161 00001777 E8D62D                  	CALL	IOFUNC
 11162 0000177A 74F6                    	JZ	SHORT AUXILP
 11163 0000177C 30E4                    	XOR	AH,AH
 11164                                  	; 16/12/2022
 11165                                  	;CALL	IOFUNC
 11166                                  	;RETN
 11167                                  	; 07/12/2022
 11168 0000177E E9CF2D                  	jmp	IOFUNC
 11169                                  
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11174                                  ;
 11175                                  ;	ENTRY	(dl) = character
 11176                                  ;	EXIT	none
 11177                                  ;	USES	all
 11178                                  ;
 11179                                  ;----------------------------------------------------------------------------
 11180                                  ;
 11181                                  
 11182                                  _$STD_AUX_OUTPUT:	;System call 4
 11183                                  
 11184 00001781 53                      	PUSH	BX
 11185 00001782 BB0300                  	MOV	BX,3
 11186 00001785 EB04                    	JMP	SHORT SENDOUT
 11187                                  
 11188                                  ;
 11189                                  ;----------------------------------------------------------------------------
 11190                                  ;
 11191                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11192                                  ;
 11193                                  ;	ENTRY	(dl) = character
 11194                                  ;	EXIT	none
 11195                                  ;	USES	all
 11196                                  ;
 11197                                  ;----------------------------------------------------------------------------
 11198                                  ;
 11199                                  
 11200                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11201                                  
 11202 00001787 53                      	PUSH	BX
 11203 00001788 BB0400                  	MOV	BX,4
 11204                                  
 11205                                  SENDOUT:
 11206 0000178B 88D0                    	MOV	AL,DL
 11207 0000178D 50                      	PUSH	AX
 11208 0000178E E8B53A                  	CALL	STATCHK
 11209 00001791 58                      	POP	AX
 11210 00001792 1E                      	PUSH	DS
 11211 00001793 56                      	PUSH	SI
 11212                                  LISSTRT2:
 11213 00001794 E8CDFE                  	CALL	RAWOUT2
 11214                                  TRIPOP:
 11215 00001797 5E                      	POP	SI
 11216 00001798 1F                      	POP	DS
 11217 00001799 5B                      	POP	BX
 11218                                  SCIS_RETN:	; 20/07/2018
 11219 0000179A C3                      	RETN
 11220                                  ;
 11221                                  ;----------------------------------------------------------------------------
 11222                                  ;
 11223                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11224                                  ;
 11225                                  ;	Check console input status
 11226                                  ;
 11227                                  ;	ENTRY	none
 11228                                  ;	EXIT	AL = -1 character available, = 0 no character
 11229                                  ;	USES	all
 11230                                  ;
 11231                                  ;----------------------------------------------------------------------------
 11232                                  ;
 11233                                  
 11234                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11235                                  
 11236 0000179B E8A83A                  	CALL	STATCHK
 11237 0000179E B000                    	MOV	AL,0		; no xor!!
 11238                                  	;retz
 11239 000017A0 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11240 000017A2 0CFF                    	OR	AL,-1
 11241                                  ;SCIS_RETN:
 11242 000017A4 C3                      	RETN
 11243                                  
 11244                                  ;
 11245                                  ;----------------------------------------------------------------------------
 11246                                  ;
 11247                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11248                                  ;
 11249                                  ;	Flush console input buffer and perform call in AL
 11250                                  ;
 11251                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11252                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11253                                  ;		return arguments for the fcn supplied in (AL)
 11254                                  ;	USES	all
 11255                                  ;
 11256                                  ;----------------------------------------------------------------------------
 11257                                  ;
 11258                                  
 11259                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11260                                  
 11261 000017A5 50                      	PUSH	AX
 11262 000017A6 52                      	PUSH	DX
 11263 000017A7 31DB                    	XOR	BX,BX
 11264 000017A9 E8331F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11265                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11266 000017AC 7205                    	JC	SHORT BADJFNCON
 11267 000017AE B404                    	MOV	AH,4
 11268 000017B0 E89D2D                  	CALL	IOFUNC
 11269                                  
 11270                                  BADJFNCON:
 11271 000017B3 5A                      	POP	DX
 11272 000017B4 58                      	POP	AX
 11273 000017B5 88C4                    	MOV	AH,AL
 11274 000017B7 3C01                    	CMP	AL,1
 11275 000017B9 7413                    	JZ	SHORT REDISPJ
 11276 000017BB 3C06                    	CMP	AL,6
 11277 000017BD 740F                    	JZ	SHORT REDISPJ
 11278 000017BF 3C07                    	CMP	AL,7
 11279 000017C1 740B                    	JZ	SHORT REDISPJ
 11280 000017C3 3C08                    	CMP	AL,8
 11281 000017C5 7407                    	JZ	SHORT REDISPJ
 11282 000017C7 3C0A                    	CMP	AL,10
 11283 000017C9 7403                    	JZ	SHORT REDISPJ
 11284 000017CB B000                    	MOV	AL,0
 11285 000017CD C3                      	RETN
 11286                                  
 11287                                  REDISPJ:
 11288 000017CE FA                      	CLI
 11289                                  	;transfer REDISP
 11290 000017CF E9BAEB                  	JMP	REDISP
 11291                                  
 11292                                  ;============================================================================
 11293                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11294                                  ;============================================================================
 11295                                  ; 20/07/2018 - Retro DOS v3.0
 11296                                  ; 17/05/2019 - Retro DOS v4.0
 11297                                  
 11298                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11299                                  ;
 11300                                  ;	$GET_FCB_POSITION
 11301                                  ;	$FCB_DELETE
 11302                                  ;	$GET_FCB_FILE_LENGTH
 11303                                  ;	$FCB_CLOSE
 11304                                  ;	$FCB_RENAME
 11305                                  ;	SaveFCBInfo
 11306                                  ;	ResetLRU
 11307                                  ;	SetOpenAge
 11308                                  ;	LRUFCB
 11309                                  ;	FCBRegen
 11310                                  ;	BlastSFT
 11311                                  ;	CheckFCB
 11312                                  ;	SFTFromFCB
 11313                                  ;	FCBHardErr
 11314                                  ;
 11315                                  ;	Revision history:
 11316                                  ;
 11317                                  ;		Created: ARR 4 April 1983"
 11318                                  ;			 MZ  6 June  1983 completion of functions
 11319                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11320                                  ;					  times.  Change so successive closes work by
 11321                                  ;					  always returning OK.	Also, detect I/O to
 11322                                  ;					  already closed FCB and return EOF.
 11323                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11324                                  ;					  out of sft into FCB for reconnection
 11325                                  ;
 11326                                  ;		A000	 version 4.00  Jan. 1988
 11327                                  
 11328                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11329                                  ;----------------------------------------------------------------------------
 11330                                  ;
 11331                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11332                                  ;	extent and next record field and set the random record field to point
 11333                                  ;	to that record
 11334                                  ;
 11335                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11336                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11337                                  ;   Registers modified: all
 11338                                  ;
 11339                                  ;----------------------------------------------------------------------------
 11340                                  ;
 11341                                  
 11342                                  _$GET_FCB_POSITION:
 11343 000017D2 E8F204                  	call	GetExtended		; point to FCB
 11344 000017D5 E8C204                  	call	GetExtent		; DX:AX is current record
 11345                                  	;mov	[si+21h],ax
 11346 000017D8 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11347                                  	;mov	[si+23h],dl
 11348 000017DB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11349                                  	;cmp	word [si+0Eh],64
 11350 000017DE 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11351 000017E2 7303                    	JAE	short GetFCBBye
 11352                                  	;mov	[si+24h],dh
 11353 000017E4 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11354                                  GoodPath:	; 16/12/2022
 11355                                  GetFCBBye:
 11356 000017E7 E97BEE                  	jmp	FCB_RET_OK
 11357                                  
 11358                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11359                                  ;----------------------------------------------------------------------------
 11360                                  ;
 11361                                  ;**	$FCB_Delete - Delete from FCB Template
 11362                                  ;
 11363                                  ;	given an FCB, remove all directory entries in the current
 11364                                  ;	directory that have names that match the FCB's ?  marks.
 11365                                  ;
 11366                                  ;	ENTRY	(DS:DX) = address of FCB
 11367                                  ;	EXIT	entries matching the FCB are deleted
 11368                                  ;		(al) = ff iff no entries were deleted
 11369                                  ;	USES	all
 11370                                  ;
 11371                                  ;----------------------------------------------------------------------------
 11372                                  ;
 11373                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11374                                  
 11375                                  _$FCB_DELETE:		; System call 19
 11376                                  					; OpenBuf is in DOSDATA
 11377 000017EA BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11378                                  
 11379 000017ED E81C54                  	call	TransFCB		; convert FCB to path
 11380 000017F0 7207                    	JC	short BadPath 		; signal no deletions
 11381                                  
 11382 000017F2 16                      	push	SS
 11383 000017F3 1F                      	pop	DS			; SS is DOSDATA
 11384                                  
 11385 000017F4 E89D0D                  	call	DOS_DELETE		; wham
 11386                                  	;JC	short BadPath
 11387                                  	; 16/12/2022
 11388 000017F7 73EE                    	jnc 	short GoodPath
 11389                                  ;GoodPath:
 11390                                  ;	;jmp	FCB_RET_OK		; do a good return
 11391                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11392                                  ;	jmp	short GetFCBBye
 11393                                  
 11394                                  BadPath:
 11395                                  	; Error code is in AX
 11396                                  
 11397 000017F9 E96CEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11398                                  
 11399                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11400                                  ;----------------------------------------------------------------------------
 11401                                  ;
 11402                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11403                                  ;	file in records (rounded up if partial).
 11404                                  ;
 11405                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11406                                  ;   Outputs:	Random record field updated to reflect the number of records
 11407                                  ;   Registers modified: all
 11408                                  ;
 11409                                  ;----------------------------------------------------------------------------
 11410                                  ;
 11411                                  
 11412                                  _$GET_FCB_FILE_LENGTH:
 11413                                  
 11414 000017FC E8C804                  	call	GetExtended		; get real FCB pointer
 11415                                  					; DX points to Input FCB
 11416                                  
 11417                                  					; OpenBuf is in DOSDATA
 11418 000017FF BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11419                                  
 11420 00001802 1E                      	push	ds			; save pointer to true FCB
 11421 00001803 56                      	push	si
 11422 00001804 E80554                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11423 00001807 5E                      	pop	si
 11424 00001808 1F                      	pop	ds
 11425 00001809 72EE                    	JC	short BadPath
 11426 0000180B 1E                      	push	ds			; save pointer
 11427 0000180C 56                      	push	si
 11428 0000180D 16                      	push	ss		
 11429 0000180E 1F                      	pop	ds
 11430 0000180F E89211                  	call	GET_FILE_INFO		; grab the info
 11431 00001812 5E                      	pop	si			; get pointer back
 11432 00001813 1F                      	pop	ds
 11433 00001814 72E3                    	JC	short BadPath 		; invalid something
 11434 00001816 89DA                    	MOV	DX,BX			; get high order size
 11435 00001818 89F8                    	MOV	AX,DI			; get low order size
 11436                                  	;mov	bx,[si+0Eh]
 11437 0000181A 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11438 0000181D 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11439 0000181F 7503                    	JNZ	short GetSize 		; not empty
 11440 00001821 BB8000                  	MOV	BX,128
 11441                                  GetSize:
 11442 00001824 89C7                    	MOV	DI,AX			; save low order word
 11443 00001826 89D0                    	MOV	AX,DX			; move high order for divide
 11444 00001828 31D2                    	XOR	DX,DX			; clear out high
 11445 0000182A F7F3                    	DIV	BX			; wham
 11446 0000182C 50                      	PUSH	AX			; save dividend
 11447 0000182D 89F8                    	MOV	AX,DI			; get low order piece
 11448 0000182F F7F3                    	DIV	BX			; wham
 11449 00001831 89D1                    	MOV	CX,DX			; save remainder
 11450 00001833 5A                      	POP	DX			; get high order dividend
 11451 00001834 E306                    	JCXZ	LengthStore		; no roundup
 11452 00001836 83C001                  	ADD	AX,1
 11453 00001839 83D200                  	ADC	DX,0			; 32-bit increment
 11454                                  LengthStore:
 11455                                  	;mov	[si+21h],ax
 11456 0000183C 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11457                                  	;mov	[si+23h],dl
 11458 0000183F 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11459 00001842 08F6                    	OR	DH,DH
 11460 00001844 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11461                                  	;mov	[si+24h],dh
 11462 00001846 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11463                                  	; 16/12/2022
 11464                                  GoodRet:
 11465                                  	;jmp	FCB_RET_OK
 11466 00001849 EB9C                    	jmp	short GoodPath
 11467                                  
 11468                                  ;Break <$FCB_Close - close a file>
 11469                                  ;----------------------------------------------------------------------------
 11470                                  ;
 11471                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11472                                  ;	as the FCB may be used for further I/O
 11473                                  ;
 11474                                  ;   Inputs:	DS:DX point to FCB
 11475                                  ;   Outputs:	AL = FF if file was not found on disk
 11476                                  ;   Registers modified: all
 11477                                  ;
 11478                                  ;----------------------------------------------------------------------------
 11479                                  ;
 11480                                  
 11481                                  _$FCB_CLOSE:		; System call 16
 11482                                  
 11483 0000184B 30C0                    	XOR	AL,AL			; default search attributes
 11484 0000184D E87704                  	call	GetExtended		; DS:SI point to real FCB
 11485 00001850 7403                    	JZ	short NoAttr		; not extended
 11486 00001852 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11487                                  NoAttr:
 11488                                  					; SS override
 11489 00001855 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11490 00001859 E8D903                  	call	SFTFromFCB
 11491 0000185C 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11492                                  
 11493                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11494                                  	; there is no need to set the SFT's attribute.
 11495                                  
 11496                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11497                                  	;;; done
 11498                                  
 11499                                  	;mov	al,[es:di+4]
 11500 0000185E 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11501 00001862 30E4                    	XOR	AH,AH
 11502 00001864 50                      	PUSH	AX
 11503                                  
 11504                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11505                                  	;;; done
 11506                                  
 11507 00001865 E8D15B                  	call	CheckShare
 11508 00001868 7508                    	JNZ	short NoStash
 11509 0000186A 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11510                                  	;mov	[es:di+4],al
 11511 0000186E 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11512                                  NoStash:
 11513                                  	;mov	ax,[si+14h]
 11514 00001872 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11515                                  	;mov	[es:di+0Fh],ax
 11516 00001875 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11517                                  	;mov	ax,[si+16h]
 11518 00001879 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11519                                  	;mov	[es:di+0Dh],ax
 11520 0000187C 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11521                                  	;mov	ax,[si+10h]
 11522 00001880 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11523                                  	;mov	[es:di+11h],ax
 11524 00001883 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11525                                  	;mov	ax,[si+12h]
 11526 00001887 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11527                                  	;mov	[es:di+13h],ax
 11528 0000188A 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11529                                  	;or	word [es:di+5],4000h
 11530                                  	; 17/12/2022
 11531 0000188E 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11532                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11533 00001893 16                      	push	ss
 11534 00001894 1F                      	pop	ds
 11535 00001895 E80817                  	call	DOS_CLOSE	; wham
 11536 00001898 C43E[9E05]              	LES	DI,[THISSFT]
 11537                                  
 11538                                  	;;; 9/8/86 F.C. restore SFT attribute
 11539 0000189C 59                      	POP	CX
 11540                                  	;mov	[es:di+4],cl
 11541 0000189D 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11542                                  	;;; 9/8/86 F.C. restore SFT attribute
 11543                                  
 11544 000018A1 9C                      	PUSHF
 11545                                  	;test	word [es:di],0FFFFh
 11546                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11547                                  				; zero ref count gets blasted
 11548 000018A2 26833D00                	cmp	word [ES:DI],0
 11549 000018A6 7507                    	jnz     short CloseOK
 11550 000018A8 50                      	PUSH	AX
 11551 000018A9 B04D                    	MOV	AL,'M'
 11552 000018AB E8FC02                  	call	BlastSFT
 11553 000018AE 58                      	POP	AX
 11554                                  CloseOK:
 11555 000018AF 9D                      	POPF
 11556 000018B0 7397                    	JNC	short GoodRet
 11557                                  	;cmp	al,6
 11558 000018B2 3C06                    	CMP	AL,error_invalid_handle
 11559 000018B4 7493                    	JZ	short GoodRet
 11560                                  	;mov	al,2
 11561 000018B6 B002                    	MOV	AL,error_file_not_found
 11562                                  fren90:
 11563                                  	; 16/12/2022
 11564                                  fcb_close_err:
 11565 000018B8 E9ADED                  	jmp	FCB_RET_ERR
 11566                                  
 11567                                  ;
 11568                                  ;----------------------------------------------------------------------------
 11569                                  ;
 11570                                  ;**	$FCB_Rename - Rename a File
 11571                                  ;
 11572                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11573                                  ;	multiple files copying from the meta characters.
 11574                                  ;
 11575                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11576                                  ;		    name of the files to be renamed. Starting at offset 11h
 11577                                  ;		    in the FCB is the destination name.
 11578                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11579                                  ;		AL = FF -> some files may have been renamed but:
 11580                                  ;			rename to existing file or source file not found
 11581                                  ;	USES	ALL
 11582                                  ;
 11583                                  ;----------------------------------------------------------------------------
 11584                                  ;
 11585                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11586                                  
 11587                                  _$FCB_RENAME:		; System call 23
 11588                                  
 11589 000018BB E80904                  	call	GetExtended		; get pointer to real FCB
 11590 000018BE 52                      	push	dx
 11591 000018BF 8A04                    	MOV	AL,[SI] 		; get drive byte
 11592 000018C1 83C610                  	ADD	SI,10h			; point to destination
 11593                                  
 11594                                  					; RenBuf is in DOSDATA
 11595 000018C4 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11596 000018C7 FF34                    	push	word [SI]
 11597 000018C9 1E                      	push	ds
 11598 000018CA 57                      	push	di			; save source pointer for TransFCB
 11599 000018CB 8804                    	MOV	[SI],AL			; drop in real drive
 11600 000018CD 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11601 000018CF E83A53                  	call	TransFCB		; munch this pathname
 11602 000018D2 5E                      	pop	si
 11603 000018D3 1F                      	pop	ds	
 11604 000018D4 8F04                    	pop	WORD [SI]		; get path back
 11605 000018D6 5A                      	pop	dx			; Original FCB pointer
 11606 000018D7 72DF                    	JC	short fren90		; bad path -> error
 11607                                  
 11608                                  					; SS override for WFP_Start & Ren_WFP
 11609 000018D9 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11610 000018DE 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11611                                  
 11612                                  					; OpenBuf is in DOSDATA
 11613 000018E3 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11614 000018E6 E82353                  	call	TransFCB		; wham
 11615                                  					; NOTE that this call is pointing
 11616                                  					;  back to the ORIGINAL FCB so
 11617                                  					;  SATTRIB gets set correctly
 11618 000018E9 72CD                    	JC	short fren90		; error
 11619 000018EB E8840E                  	call	DOS_RENAME
 11620 000018EE 72C8                    	JC	short fren90
 11621                                  	; 16/12/2022
 11622 000018F0 E972ED                  	jmp	FCB_RET_OK
 11623                                  	
 11624                                  ;	Error -
 11625                                  ;
 11626                                  ;	(al) = error code
 11627                                  
 11628                                  	; 16/12/2022
 11629                                  ;fren90:	
 11630                                  ;	;jmp	FCB_RET_ERR
 11631                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11632                                  ;	jmp	short fcb_close_err
 11633                                  
 11634                                  ;Break <Misbehavior fixers>
 11635                                  ;
 11636                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11637                                  ;   user's space so he may move them at will. Second, they have a small
 11638                                  ;   reserved area that may be used for system information. Third, there was
 11639                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11640                                  ;   usage.
 11641                                  ;
 11642                                  ;   This results in the following misbehavior:
 11643                                  ;
 11644                                  ;	infinite opens of the same file:
 11645                                  ;
 11646                                  ;	While (TRUE) {			While (TRUE) {
 11647                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11648                                  ;	    Read (FCB); 		    Write (FCB);
 11649                                  ;	    }				    }
 11650                                  ;
 11651                                  ;	infinite opens of different files:
 11652                                  ;
 11653                                  ;	While (TRUE) {			While (TRUE) {
 11654                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11655                                  ;	    Read (FCB); 		    Write (FCB);
 11656                                  ;	    }				    }
 11657                                  ;
 11658                                  ;	multiple closes of the same file:
 11659                                  ;
 11660                                  ;	FCBOpen (FCB);
 11661                                  ;	while (TRUE)
 11662                                  ;	    FCBClose (FCB);
 11663                                  ;
 11664                                  ;	I/O after closing file:
 11665                                  ;
 11666                                  ;	FCBOpen (FCB);
 11667                                  ;	while (TRUE) {
 11668                                  ;	    FCBWrite (FCB);
 11669                                  ;	    FCBClose (FCB);
 11670                                  ;	    }
 11671                                  ;
 11672                                  ;   The following is am implementation of a methodology for emulating the
 11673                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11674                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11675                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11676                                  ;   the local machine.
 11677                                  ;
 11678                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11679                                  ;   structures depending on the file itself and the state of operations of the
 11680                                  ;   OS. The information contained in this reserved field is enough to
 11681                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11682                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11683                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11684                                  ;
 11685                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11686                                  ;
 11687                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11688                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11689                                  ;   regenerated.
 11690                                  ;
 11691                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11692                                  ;   longer available. We can make up for this by using the following
 11693                                  ;   information:
 11694                                  ;
 11695                                  ;	The Drive number (from the DPB).
 11696                                  ;	The physical sector of the directory that contains the entry.
 11697                                  ;	The relative position of the entry in the sector.
 11698                                  ;	The first cluster field.
 11699                                  ;	The last used SFT.
 11700                                  ;      OR In the case of a device FCB
 11701                                  ;	The low 6 bits of sf_flags (indicating device type)
 11702                                  ;	The pointer to the device header
 11703                                  ;
 11704                                  ;   We read in the particular directory sector and examine the indicated
 11705                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11706                                  ;
 11707                                  ;   Some key items need to be remembered:
 11708                                  ;
 11709                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11710                                  ;	information. We enforce good behavior on the FCBs.
 11711                                  ;
 11712                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11713                                  ;	open VCs. The VCs may be closed only at process termination.
 11714                                  ;
 11715                                  ;	If this is not an installed version of the DOS, file sharing will
 11716                                  ;	always be present.
 11717                                  ;
 11718                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11719                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11720                                  ;
 11721                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11722                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11723                                  ;	proper OI record.
 11724                                  ;
 11725                                  ;   The test bits are:
 11726                                  ;
 11727                                  ;	00 -> local file
 11728                                  ;	40 -> sharing local
 11729                                  ;	80 -> network
 11730                                  ;	C0 -> local device
 11731                                  
 11732                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11733                                  ;----------------------------------------------------------------------------
 11734                                  ;
 11735                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11736                                  ;	pieces of information into the FCB to allow for subsequent
 11737                                  ;	regeneration. Poke LRU also.
 11738                                  ;
 11739                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11740                                  ;		DS:SI point to the FCB (not an extended one)
 11741                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11742                                  ;		DS:SI preserved
 11743                                  ;		ES:DI point to sft
 11744                                  ;   Registers modified: All
 11745                                  ;
 11746                                  ;
 11747                                  ;----------------------------------------------------------------------------
 11748                                  ;
 11749                                  
 11750                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11751                                  
 11752                                  SaveFCBInfo:
 11753                                  
 11754 000018F3 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11755 000018F8 E8B1F9                  	call	IsSFTNet
 11756 000018FB 740B                    	JZ	short SaveLocal		; if not network then save local info
 11757                                  ;
 11758                                  ;----- In net support -----
 11759                                  ;
 11760                                  	; 17/05/2019 - Retro DOS v4.0
 11761                                  
 11762                                  	; MSDOS 3.3
 11763                                  	;;mov	ax,[es:di+1Dh]
 11764                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11765                                  	;;mov	[si+1Ah],ax
 11766                                  	;mov	[si+fcb_net_handle],ax
 11767                                  	;push	es
 11768                                  	;push	di
 11769                                  	;;les	di,[es:di+19h]
 11770                                  	;LES	DI,[ES:DI+sf_netid]
 11771                                  	;;mov	[si+1Ch],di
 11772                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11773                                  	;;mov 	[si+1Eh],es
 11774                                  	;MOV	[SI+fcb_netID+2],ES
 11775                                  	;pop	di
 11776                                  	;pop	es
 11777                                  
 11778                                  	; MSDOS 6.0
 11779                                  	;mov	ax,[es:di+0Bh]
 11780 000018FD 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11781                                  	;mov	[si+1Ch],ax
 11782 00001901 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11783                                  	
 11784                                  	;mov	bl,80h
 11785 00001904 B380                    	MOV	BL,FCBNETWORK
 11786                                  ;
 11787                                  ;----- END In net support -----
 11788                                  ;
 11789 00001906 EB65                    	jmp	SHORT SaveSFN
 11790                                  
 11791                                  SaveLocal:
 11792                                  	;IF	Installed
 11793 00001908 E82E5B                  	call	CheckShare
 11794                                  	;JZ	short SaveNoShare	; no sharer
 11795                                  	;JMP	short SaveShare		; sharer present
 11796                                  	; 16/12/2022
 11797                                  	; 28/07/2019
 11798 0000190B 755B                    	jnz	short SaveShare
 11799                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11800                                  	;JZ	short SaveNoShare	; no sharer
 11801                                  	;JMP	short SaveShare		; sharer present
 11802                                  
 11803                                  SaveNoShare:
 11804                                  	;;test 	word [es:di+5],80h
 11805                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11806 0000190D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11807 00001912 7542                    	JNZ	short SaveNoShareDev	; Device
 11808                                  
 11809                                  	; Save no sharing local file information
 11810                                  
 11811                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11812                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11813 00001914 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11814                                  	;mov	[si+1Dh],ax
 11815 00001918 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11816                                  
 11817                                  	; MSDOS 6.0
 11818                                  
 11819                                  	;SR; Store high byte of directory sector
 11820                                  	;mov	ax,[es:di+1Dh]
 11821 0000191B 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11822                                  	
 11823                                  	; SR;
 11824                                  	; We have to store the read-only and archive attributes of the file.
 11825                                  	; We extract it from the SFT and store it in the top two bits of the 
 11826                                  	; sector number ( sector number == 22 bits only )
 11827                                  
 11828                                  	;mov	bl,[es:di+4]
 11829 0000191F 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11830 00001923 88DF                    	mov	bh,bl
 11831 00001925 D0CB                    	ror	bl,1
 11832 00001927 D0E7                    	shl	bh,1
 11833 00001929 08FB                    	or	bl,bh
 11834 0000192B 80E3C0                  	and	bl,0C0h
 11835 0000192E 08D8                    	or	al,bl
 11836                                  	;mov	[si+18h],al ; 08/11/2022
 11837 00001930 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11838                                  
 11839                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11840                                  	;mov	al,[es:di+1Fh]
 11841 00001933 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11842                                  	;mov	[si+1Fh],al
 11843 00001937 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11844                                  	;mov	ax,[es:di+0Bh]
 11845 0000193A 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11846                                  	;mov	[si+1Bh],ax
 11847 0000193E 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11848 00001941 B300                    	MOV	BL,0
 11849                                  
 11850                                  	; Create the bits field from the dirty/device bits of the flags word 
 11851                                  	; and the mode byte
 11852                                  
 11853                                  SetFCBBits:
 11854                                  	;mov	ax,[es:di+5]
 11855 00001943 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11856 00001947 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11857                                  	;or	al,[es:di+2]
 11858 00001949 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11859                                  	;mov	[si+1Ah], al
 11860 0000194D 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11861                                  
 11862                                  	; MSDOS 6.0
 11863                                  	
 11864                                  	; SR;
 11865                                  	; Check if we came here for local file or device. If for local file, 
 11866                                  	; skip setting of SFT index
 11867                                  	
 11868 00001950 08DB                    	or	bl,bl
 11869 00001952 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11870                                  
 11871 00001954 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11872                                  
 11873                                  	; Save no sharing local device information
 11874                                  
 11875                                  SaveNoShareDev:
 11876                                  	;mov	ax,[es:di+7]
 11877 00001956 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11878                                  	;mov	[si+1Ah],ax
 11879 0000195A 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11880                                  	;mov	ax,[es:di+9]
 11881 0000195D 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11882 00001961 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11883                                  	;mov	bl,40h
 11884 00001964 B340                    	MOV	BL,FCBDEVICE
 11885                                  	; 28/12/2022
 11886 00001966 EBDB                    	JMP	short SetFCBBits	; go and save SFN
 11887                                  
 11888                                  SaveShare:
 11889                                  	;ENDIF
 11890                                  
 11891                                  ;----- In share support -----
 11892                                  
 11893                                  	;call	far [ss:ShSave]
 11894 00001968 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11895                                  
 11896                                  ;----- end in share support -----
 11897                                  
 11898                                  	; 17/05/2019
 11899                                  
 11900                                  SaveSFN:
 11901                                  	;lea	ax,[di-6]
 11902 0000196D 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11903                                  	
 11904                                  	; Adjust for offset to table.
 11905                                  	
 11906 00001970 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11907                                  
 11908 00001975 53                      	push	bx			;bx = FCB type (net/Share or local)
 11909                                  	;;mov	bl,53 ; MSDOS 3.3
 11910                                  	;mov	bl,59 ; MSDOS 6.0
 11911 00001976 B33B                    	MOV	BL,SF_ENTRY.size
 11912 00001978 F6F3                    	DIV	BL
 11913                                  	;mov	[si+18h],al
 11914 0000197A 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11915 0000197D 5B                      	pop	bx			;restore bx
 11916                                  
 11917                                  SaveNoSFN:
 11918                                  	;mov	ax,[es:di+5]
 11919 0000197E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11920 00001982 243F                    	AND	AL,3Fh			; get real drive
 11921 00001984 08D8                    	OR	AL,BL
 11922                                  	;mov	[si+19h],al
 11923 00001986 884419                  	MOV	[SI+fcb_l_drive],AL
 11924                                  
 11925 00001989 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11926 0000198D 40                      	INC	AX
 11927                                  	;mov	[es:di+15h],ax
 11928 0000198E 26894515                	MOV	[ES:DI+sf_LRU],AX
 11929 00001992 7506                    	JNZ	short SimpleStuff
 11930                                  	
 11931                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11932                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11933                                  	
 11934                                  	;mov	bx,15h
 11935 00001994 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11936 00001997 E80500                  	call	ResetLRU
 11937                                  
 11938                                  	; Set new LRU to AX
 11939                                  SimpleStuff:
 11940 0000199A 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11941 0000199E C3                      	retn
 11942                                  
 11943                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11944                                  ;----------------------------------------------------------------------------
 11945                                  ;
 11946                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11947                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11948                                  ;   at 0.
 11949                                  ;
 11950                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11951                                  ;		ES:DI point to SFT currently being updated
 11952                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11953                                  ;		AX has 8000h
 11954                                  ;   Registers modified: none
 11955                                  ;
 11956                                  ;----------------------------------------------------------------------------
 11957                                  ;
 11958                                  
 11959                                  	; 17/05/2019 - Retro DOS v4.0
 11960                                  ResetLRU:
 11961                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11962                                  	; DOSDATA
 11963                                  
 11964 0000199F B80080                  	MOV	AX,8000h
 11965 000019A2 06                      	push	es
 11966 000019A3 57                      	push	di
 11967                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11968 000019A4 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11969                                  	;mov	cx,[es:di+4]
 11970 000019A9 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11971                                  	;lea	di,[di+6]
 11972 000019AD 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11973                                  ovScan:
 11974 000019B0 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11975 000019B3 7703                    	JA	short ovLoop
 11976 000019B5 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11977                                  ovLoop:
 11978                                  	;;add	di,53	; MSDOS 3.3
 11979                                  	;add	di,59	; MSDOS 6.0	
 11980 000019B8 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11981 000019BB E2F3                    	LOOP	ovScan
 11982 000019BD 5F                      	pop	di
 11983 000019BE 07                      	pop	es
 11984 000019BF 268901                  	MOV	[ES:DI+BX],AX
 11985 000019C2 C3                      	retn
 11986                                  
 11987                                  ;IF  0  ; We dont need this routine any more.
 11988                                  ;
 11989                                  ;Break	<SetOpenAge - update the open age of a SFT>
 11990                                  ;----------------------------------------------------------------------------
 11991                                  ;
 11992                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 11993                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 11994                                  ;   count here and fill in the appropriate field.
 11995                                  ;
 11996                                  ;   Inputs:	ES:DI point to SFT
 11997                                  ;   Outputs:	ES:DI has the open age field filled in.
 11998                                  ;		If open age has wraparound, we will have subtracted 8000h
 11999                                  ;		    from all open ages.
 12000                                  ;   Registers modified: AX
 12001                                  ;
 12002                                  ;----------------------------------------------------------------------------
 12003                                  ;
 12004                                  ;SetOpenAge:
 12005                                  ;	; 20/07/2018 - Retro DOS v3.0
 12006                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12007                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12008                                  ;
 12009                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12010                                  ;
 12011                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12012                                  ;	INC	AX
 12013                                  ;	;mov	[es:di+17h],ax
 12014                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12015                                  ;	JNZ	short SetDone
 12016                                  ;	;mov	bx,17h
 12017                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12018                                  ;	call	ResetLRU
 12019                                  ;SetDone:
 12020                                  ;	MOV	[CS:OpenLRU],AX
 12021                                  ;	retn
 12022                                  ;
 12023                                  ;ENDIF	; SetOpenAge no longer needed
 12024                                  
 12025                                  ; 21/07/2018 - Retro DOS v3.0
 12026                                  ; LRUFCB for MSDOS 6.0 !
 12027                                  
 12028                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12029                                  ;----------------------------------------------------------------------------
 12030                                  ;
 12031                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12032                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12033                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12034                                  ;
 12035                                  ;   Inputs:	none
 12036                                  ;   Outputs:	ES:DI point to SFT
 12037                                  ;		ThisSFT points to SFT
 12038                                  ;		SFT is zeroed
 12039                                  ;		Carry set of closes failed
 12040                                  ;   Registers modified: none
 12041                                  ;
 12042                                  ;----------------------------------------------------------------------------
 12043                                  ;
 12044                                  ; MSDOS 6.0
 12045                                  ;IF 0	; rewritten this routine
 12046                                  ;
 12047                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12048                                  ;	call	save_world
 12049                                  ;	
 12050                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12051                                  ; to find the lease recently used one that is younger than the open age.  We
 12052                                  ; operate be scanning the list n times finding the least age that is greater
 12053                                  ; or equal to the previous minimum age.
 12054                                  ;
 12055                                  ;   BP is the count of times we need to go through this loop.
 12056                                  ;   AX is the current acceptable minimum age to consider
 12057                                  ;
 12058                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12059                                  ;	XOR	AX,AX			; low = 0;
 12060                                  ;
 12061                                  ; If we've scanned the table n times, then we are done.
 12062                                  ;
 12063                                  ;lru1:
 12064                                  ;	CMP	bp,0			; while (k--) {
 12065                                  ;	JZ	short lru75
 12066                                  ;	DEC	bp
 12067                                  ;
 12068                                  ; Set up for scan.
 12069                                  ;
 12070                                  ;   AX is the minimum age for consideration
 12071                                  ;   BX is the minimum age found during the scan
 12072                                  ;   SI is the position of the entry that corresponds to BX
 12073                                  ;
 12074                                  ;	MOV	BX,-1			;     min = 0xffff;
 12075                                  ;	MOV	si,BX			;     pos = 0xffff;
 12076                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12077                                  ;	;mov	cx,[es:di+4]
 12078                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12079                                  ;	;lea	di,[di+6]
 12080                                  ;	LEA	DI,[DI+SFT.SFTable]
 12081                                  ;
 12082                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12083                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12084                                  ; are done.  In both cases, we use the found entry.
 12085                                  ;
 12086                                  ;lru2:
 12087                                  ;	cmp	word [es:di],0
 12088                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12089                                  ;	jz	short lru25
 12090                                  ;	;cmp	word [es:di],-1
 12091                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12092                                  ;	cmp	word [es:di],sf_busy
 12093                                  ;	jnz	short lru3
 12094                                  ;
 12095                                  ; The entry is usable without further scan.  Go and use it.
 12096                                  ;
 12097                                  ;lru25:
 12098                                  ;	MOV	si,DI			;	      pos = i;
 12099                                  ;	JMP	short lru11		;	      goto got;
 12100                                  ;
 12101                                  ; See if the entry is for the network or for the sharer.
 12102                                  ;
 12103                                  ;  If for the sharer or network then
 12104                                  ;	if the age < current minimum AND >= allowed minimum then
 12105                                  ;	    this entry becomes current minimum
 12106                                  ;
 12107                                  ;lru3:
 12108                                  ;	;test	word [es:di+5],8000h
 12109                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12110                                  ;					;	  if (!net[i]
 12111                                  ;	JNZ	short lru35
 12112                                  ;if installed
 12113                                  ;	call	CheckShare		;		&& !sharing)
 12114                                  ;	JZ	short lru5		;	  else
 12115                                  ;ENDIF
 12116                                  ;
 12117                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12118                                  ; current minimum.
 12119                                  ;
 12120                                  ;lru35:
 12121                                  ;	;mov	dx,[es:di+17h]
 12122                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12123                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12124                                  ;	JB	short lru5
 12125                                  ;	CMP	DX,BX
 12126                                  ;	JAE	short lru5		;	      age[i] < min) {
 12127                                  ;
 12128                                  ; entry is new minimum.  Remember his age.
 12129                                  ;
 12130                                  ;	mov	bx,DX			;	      min = age[i];
 12131                                  ;	mov	si,di			;	      pos = i;
 12132                                  ;
 12133                                  ; End of loop.	gp back for more
 12134                                  ;
 12135                                  ;lru5:
 12136                                  ;	;add	di,53
 12137                                  ;	add	di,SF_ENTRY.size
 12138                                  ;	loop	lru2			;	      }
 12139                                  ;
 12140                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12141                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12142                                  ; complete.  Go find LRU.
 12143                                  ;
 12144                                  ;lru6:	
 12145                                  ;	cmp	si,-1			; position not -1?
 12146                                  ;	jz	short lru75		; no, done with everything
 12147                                  ;	lea	ax,[bx+1]		; set new threshold age
 12148                                  ;	jmp	short lru1		; go and loop for more
 12149                                  ;lru65:	
 12150                                  ;	stc
 12151                                  ;	jmp	short LRUDead		;	  return -1;
 12152                                  ;
 12153                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12154                                  ; network entry. We now make a second pass through to find the LRU entry
 12155                                  ; that is local-no-share or has age >= AX
 12156                                  ;
 12157                                  ;lru75:
 12158                                  ;	mov	bx,-1			; min = 0xffff;
 12159                                  ;	mov	si,bx			; pos = 0xffff;
 12160                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12161                                  ;	;mov	cx,[es:di+4]
 12162                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12163                                  ;	;lea	di,[di+6]
 12164                                  ;	LEA	DI,[DI+SFT.SFTable]
 12165                                  ;
 12166                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12167                                  ; then check for lru.
 12168                                  ;
 12169                                  ;lru8:
 12170                                  ;	;test	word [es:di+5],8000h
 12171                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12172                                  ;	jnz	short lru85		; is for network, go check age
 12173                                  ;	call	CheckShare		; sharer here?
 12174                                  ;	jz	short lru86		; no, go check lru
 12175                                  ;
 12176                                  ; Network or sharer.  Check age
 12177                                  ;
 12178                                  ;lru85:
 12179                                  ;	;cmp	[es:di+17h],ax
 12180                                  ;	cmp	[es:di+sf_OpenAge],ax
 12181                                  ;	jb	short lru9		; age is before threshold, skip it
 12182                                  ;
 12183                                  ; Check LRU
 12184                                  ;
 12185                                  ;lru86:
 12186                                  ;	;cmp	[es:di+15h],bx
 12187                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12188                                  ;	jae	short lru9		; no, skip this
 12189                                  ;	mov	si,di			; remember position
 12190                                  ;	;mov	bx,[es:di+15h]
 12191                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12192                                  ;
 12193                                  ; Done with this entry, go back for more.
 12194                                  ;
 12195                                  ;lru9:
 12196                                  ;	;add	di, 53
 12197                                  ;	add	di,SF_ENTRY.size
 12198                                  ;	loop	lru8
 12199                                  ;
 12200                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12201                                  ; out. The conditions here are:
 12202                                  ;
 12203                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12204                                  ;
 12205                                  ;lru10:
 12206                                  ;	cmp	si,-1			; if no one f
 12207                                  ;	jz	short lru65		;     return -1;
 12208                                  ;lru11:
 12209                                  ;	mov	di,si
 12210                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12211                                  ;	MOV	[CS:THISSFT+2],ES
 12212                                  ;
 12213                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12214                                  ; is 0.
 12215                                  ;
 12216                                  ;	;test	word [es:di+5],8000h
 12217                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12218                                  ;	JNZ	short LRUClose
 12219                                  ;IF INSTALLED
 12220                                  ;	call	CheckShare
 12221                                  ;	JZ	short LRUDone
 12222                                  ;ENDIF
 12223                                  ;
 12224                                  ; Repeat close until ref count is 0
 12225                                  ;
 12226                                  ;LRUClose:
 12227                                  ;	push	ss
 12228                                  ;	pop	ds
 12229                                  ;	LES	DI,[THISSFT]
 12230                                  ;	cmp     word [es:di],0
 12231                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12232                                  ;	JZ	short LRUDone 		; nope, all done
 12233                                  ;	call	DOS_CLOSE
 12234                                  ;	jnc	short LRUClose		; no error => clean up
 12235                                  ;	;cmp	al,6
 12236                                  ;	cmp	al,error_invalid_handle
 12237                                  ;	jz	short LRUClose
 12238                                  ;	stc
 12239                                  ;	JMP	short LRUDead
 12240                                  ;LRUDone:
 12241                                  ;	XOR	AL,AL
 12242                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12243                                  ;
 12244                                  ;LRUDead:
 12245                                  ;	call	restore_world
 12246                                  ;	LES     DI,[CS:THISSFT]
 12247                                  ;	jnc	short LRUFCB_retn
 12248                                  ;LRUFCB_err:
 12249                                  ;	; mov	al, 23h	
 12250                                  ;	MOV	AL,error_FCB_unavailable
 12251                                  ;LRUFCB_retn:	
 12252                                  ;	retn:
 12253                                  ;
 12254                                  ;ENDIF	; LRUFCB has been rewritten below.
 12255                                  
 12256                                  ; 17/05/2019 - Retro DOS v4.0
 12257                                  ; LRUFCB for MSDOS 6.0 !
 12258                                  ;----------------------------------------------------------------------------
 12259                                  ;
 12260                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12261                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12262                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12263                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12264                                  ; optimize regeneration operations by keeping track of the current local
 12265                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12266                                  ; local SFT in the SFT Block.
 12267                                  ;
 12268                                  ; Inputs: al = 0 => Regenerate SFT operation
 12269                                  ;	    = 1 => Allocate new SFT for Open/Create
 12270                                  ;
 12271                                  ; Outputs: Carry clear
 12272                                  ;	 	es:di = Address of allocated SFT
 12273                                  ;	  	ThisSFT = Address of allocated SFT
 12274                                  ;
 12275                                  ;	  carry set if closes of net/Share files failed 
 12276                                  ;		al = error_FCB_unavailable
 12277                                  ;
 12278                                  ; Registers affected: None
 12279                                  ;
 12280                                  ;----------------------------------------------------------------------------
 12281                                  
 12282                                  ;LruFCB	PROC	NEAR
 12283                                  LRUFCB:
 12284                                  	; 17/05/2019 - Retro DOS v4.0
 12285                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12286                                  
 12287                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12288                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12289                                  
 12290 000019C3 06                      	push	es	; * (MSDOS 6.21)
 12291                                  	
 12292 000019C4 E8A9EA                  	call	save_world
 12293                                  	
 12294                                  	;getdseg <ds>		;ds = DOSDATA
 12295 000019C7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12296                                  
 12297 000019CC 08C0                    	or	al,al		;Check if regenerate allocation
 12298 000019CE 751A                    	jnz	short lru1	;Try to find SFT to use
 12299                                  
 12300                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12301                                  	; local SFT, just return that SFT to reuse
 12302                                  
 12303 000019D0 8B3E[4310]              	mov	di,[LocalSFT]
 12304 000019D4 0B3E[4510]              	or	di,[LocalSFT+2]	;is address == 0?
 12305 000019D8 7410                    	jz	short lru1	;invalid local SFT, find one
 12306                                  
 12307                                  	; We have found a valid local SFT. Recycle this SFT
 12308                                  
 12309 000019DA C43E[4310]              	les	di,[LocalSFT]
 12310                                  
 12311                                  gotlocalSFT:
 12312 000019DE 893E[9E05]              	mov	[THISSFT],di
 12313 000019E2 8C06[A005]              	mov	[THISSFT+2],es
 12314 000019E6 F8                      	clc
 12315 000019E7 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12316                                  
 12317                                  lru1:
 12318 000019EA C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12319                                  	;mov	cx,[es:di+4]
 12320 000019EE 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12321                                  	;lea	di,[di+6]
 12322 000019F2 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12323                                  
 12324                                  	; We scan through all the SFTs scanning for a free one. It also 
 12325                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12326                                  	; bx = min. LRU for local SFTs
 12327                                  	; si = pos. of local SFT with min. LRU
 12328                                  	; dx = min. LRU for net/Share SFTs
 12329                                  	; bp = pos. of net/Share SFT with min. LRU
 12330                                  
 12331 000019F5 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12332 000019F8 89DE                    	mov	si,bx
 12333 000019FA 89DA                    	mov	dx,bx
 12334 000019FC 89DD                    	mov	bp,bx
 12335                                  
 12336                                  findSFT:
 12337                                  	;See if this SFT is a free one. If so, return it
 12338 000019FE 26830D00                	or	word [es:di],0
 12339                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12340 00001A02 744D                    	jz	short gotSFT	;yes, SFT is free
 12341                                  	;;cmp	word [es:di],-1
 12342                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12343 00001A04 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12344 00001A08 7447                    	jz	short gotSFT	;no, can use it
 12345                                  
 12346                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12347                                  	; used for a later regen.
 12348                                  
 12349                                  	; 16/12/2022
 12350                                  	; 08/11/2022
 12351                                  	;test	byte [es:di+6],80h
 12352 00001A0A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12353                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12354                                  	;;test	word [es:di+5],8000h
 12355                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12356 00001A0F 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12357                                  
 12358                                  ;IF installed
 12359 00001A11 E8255A                  	call	CheckShare	;Share present?
 12360                                  ;ENDIF
 12361 00001A14 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12362                                  
 12363                                  	;Local SFT, register its address
 12364                                  
 12365                                  	; !!HACK!!!
 12366                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12367                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12368                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12369                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12370                                  	; out the code that previously existed at label 'gotSFT'
 12371                                  
 12372                                  hackpoint:
 12373 00001A16 893E[4310]              	mov	[LocalSFT],di
 12374 00001A1A 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12375                                  
 12376 00001A1E 08C0                    	or	al,al		;Is operation = REGEN?
 12377 00001A20 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12378                                  
 12379                                  	;Get LRU for local files
 12380                                  	
 12381                                  	;cmp	[es:di+15h],bx
 12382 00001A22 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12383 00001A26 7306                    	jae	short lru4	;no, skip 
 12384                                  
 12385                                  	;mov	bx,[es:di+15h]
 12386 00001A28 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12387 00001A2C 89FE                    	mov	si,di		;store SFT position
 12388                                  lru4:
 12389                                  	;add	di,59
 12390 00001A2E 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12391 00001A31 E2CB                    	loop	findSFT
 12392                                  
 12393                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12394                                  	; available, we will reuse it instead of net/Share LRU
 12395                                  
 12396 00001A33 89F7                    	mov	di,si
 12397 00001A35 83FEFF                  	cmp	si,-1		;local SFT available?
 12398 00001A38 7517                    	jnz	short gotSFT	;yes, return it
 12399                                  
 12400                                  	;No local SFT, see if we got a net/Share SFT
 12401                                  
 12402 00001A3A 89EF                    	mov	di,bp
 12403 00001A3C 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12404 00001A3F 7530                    	jnz	short gotnetSFT	;yes, return it
 12405                                  noSFT:
 12406                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12407                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12408                                  	; count is not maintained properly.
 12409                                  
 12410 00001A41 EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12411                                  
 12412                                  	; Handle the LRU for net/Share SFTs
 12413                                  lru5:
 12414                                  	;cmp	[es:di+15h],dx
 12415 00001A43 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12416 00001A47 73E5                    	jae	short lru4	;no, skip 
 12417                                  
 12418                                  	;mov	dx,[es:di+15h]
 12419 00001A49 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12420                                  
 12421 00001A4D 89FD                    	mov	bp,di		;store SFT position
 12422 00001A4F EBDD                    	jmp	short lru4	;continue with next SFT
 12423                                  
 12424                                  gotSFT:
 12425 00001A51 08C0                    	or	al,al
 12426 00001A53 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12427                                  
 12428                                  	; HACK!!!
 12429                                  	; The code here differs from the code at 'hackpoint' only in the 
 12430                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12431                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12432                                  	; has been commented out below and replaced by the code just above.
 12433                                  
 12434                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12435                                  ;
 12436                                  ;	or	al,al		  ;Regen?
 12437                                  ;	jnz	short notlocaluse ;yes, register it and return
 12438                                  ;
 12439                                  ;Register this SFT as a local one
 12440                                  ;
 12441                                  ;	mov	[LocalSFT],di
 12442                                  ;	mov	[LocalSFT+2],es
 12443                                  ;	jmp	gotlocalSFT	;return to caller
 12444                                  ;
 12445                                  ;notlocaluse:
 12446                                  
 12447                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12448                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12449                                  	; does not really know whether it is a local file or not. We 
 12450                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12451                                  	; registered as a local SFT that can be recycled.
 12452                                  
 12453 00001A55 8CC0                    	mov	ax,es
 12454 00001A57 393E[4310]              	cmp	[LocalSFT],di		;Offset same?
 12455 00001A5B 7506                    	jne	short notinvalid
 12456 00001A5D 3906[4510]              	cmp	[LocalSFT+2],ax		;Segments same?
 12457 00001A61 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12458                                  notinvalid:
 12459 00001A63 E978FF                  	jmp	gotlocalSFT
 12460                                  
 12461                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12462                                  	; Invalidate this variable i.e LocalSFT = NULL
 12463                                  
 12464                                  zerolocalSFT:
 12465 00001A66 31C0                    	xor	ax,ax ; 0
 12466 00001A68 A3[4310]                	mov	[LocalSFT],ax
 12467 00001A6B A3[4510]                	mov	[LocalSFT+2],ax
 12468                                  
 12469 00001A6E E96DFF                  	jmp	gotlocalSFT
 12470                                  
 12471                                  gotnetSFT:
 12472                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12473                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12474                                  	; LocalSFT variable
 12475                                  
 12476 00001A71 08C0                    	or	al,al
 12477 00001A73 7508                    	jnz	short closenet
 12478                                  
 12479 00001A75 893E[4310]              	mov	[LocalSFT],di
 12480 00001A79 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12481                                  closenet:
 12482 00001A7D 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12483 00001A81 8C06[A005]              	mov	[THISSFT+2],es	
 12484                                  
 12485                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12486                                  	; count is 0.
 12487                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12488                                  	; recycled -- no need to check for this.
 12489                                  
 12490                                  LRUClose:
 12491 00001A85 26833D00                	cmp	word [es:di],0
 12492                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12493 00001A89 740C                    	jz	short LRUDone	; nope, all done
 12494                                  
 12495 00001A8B E81215                  	call	DOS_CLOSE
 12496 00001A8E 73F5                    	jnc	short LRUClose	; no error => clean up
 12497                                  
 12498                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12499                                  	; error closing. Seems like we could have a potential infinite loop  
 12500                                  	; here. This has to be verified.
 12501                                  
 12502 00001A90 3C06                    	cmp	al,error_invalid_handle ; 6
 12503 00001A92 74F1                    	je	short LRUClose
 12504                                  errorbadSFT:
 12505 00001A94 F9                      	stc
 12506 00001A95 EB05                    	JMP	short LRUDead
 12507                                  LRUDone:
 12508 00001A97 30C0                    	XOR	AL,AL
 12509 00001A99 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12510                                  
 12511                                  LRUDead:
 12512 00001A9C E8BAE9                  	call	restore_world		; use macro
 12513                                  	
 12514 00001A9F 07                      	pop	es ; * (MSDOS 6.21)
 12515                                  
 12516                                  	;getdseg <es>
 12517 00001AA0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12518 00001AA5 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12519                                  
 12520                                  	;;retnc
 12521                                  	;jc	short LruFCB_err
 12522                                  	;retn
 12523                                  
 12524                                  	; 16/12/2022
 12525                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12526 00001AAA 7302                    	jnc	short LruFCB_retn
 12527                                  	;jc	short LruFCB_err
 12528                                  	;retn
 12529                                  		
 12530                                  LruFCB_err:
 12531 00001AAC B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12532                                  LruFCB_retn:
 12533 00001AAE C3                      	retn
 12534                                  	
 12535                                  ;LruFCB	ENDP
 12536                                  
 12537                                  ; 17/05/2019 - Retro DOS v4.0
 12538                                  
 12539                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12540                                  
 12541                                  ; --------------------------------------------------------------------------
 12542                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12543                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12544                                  ; to copy the name to different destinations
 12545                                  ;
 12546                                  ; Inputs: ds:si = source string
 12547                                  ;	 es:di = destination string
 12548                                  ;	 cx = length of string
 12549                                  ;
 12550                                  ; Outputs: String copied to destination
 12551                                  ;
 12552                                  ; Registers affected: cx,di,si
 12553                                  ; --------------------------------------------------------------------------
 12554                                  
 12555                                  RegenCopyName:
 12556                                  CopyName:
 12557 00001AAF AC                      	lodsb			;load character
 12558 00001AB0 E87336                  	call	UCase		; convert char to upper case
 12559                                  StuffChar2:
 12560 00001AB3 AA                      	STOSB			;store converted character
 12561 00001AB4 E2F9                    	LOOP	CopyName	;
 12562                                  DoneName:
 12563 00001AB6 C3                      	retn
 12564                                  
 12565                                  ; --------------------------------------------------------------------------
 12566                                  
 12567                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12568                                  FCBRegen:
 12569                                  	; called from SFTFromFCB. SS already DOSDATA
 12570                                  
 12571                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12572                                  	; we do not fill, size we do no fill, position we do not fill,
 12573                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12574                                  
 12575                                  	;mov	al,[si+19h]
 12576 00001AB7 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12577                                  
 12578                                  	; We discriminate based on the first two bits in the reserved field.
 12579                                  	
 12580                                  	;test	al,80h
 12581 00001ABA A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12582 00001ABC 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12583                                  
 12584                                  	; The FCB is for a network or a sharing based system. At this point 
 12585                                  	; we have already closed the SFT for this guy and reconnection is 
 12586                                  	; impossible.
 12587                                  	;
 12588                                  	; Remember that he may have given us a FCB with bogus information in
 12589                                  	; it. Check to see if sharing is present or if the redir is present.
 12590                                  	; If either is around, presume that we have cycled out the FCB and 
 12591                                  	; give the hard error. Otherwise, just return with carry set.
 12592                                  
 12593 00001ABE E87859                  	call	CheckShare		; test for sharer
 12594 00001AC1 7509                    	JNZ	short RegenFail		; yep, fail this.
 12595                                  	
 12596                                  	;mov	ax,1100h
 12597 00001AC3 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12598 00001AC6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12599                                  			; Return: AL = 00h  not installed, OK to install
 12600                                  			; 01h  not installed, not OK to install
 12601                                  			; FFh  installed
 12602 00001AC8 08C0                    	OR	AL,AL			; is it there?
 12603 00001ACA 740C                    	JZ	short RegenDead		; no, just fail the operation
 12604                                  RegenFail:
 12605                                  	; 17/05/2019 - Retro DOS v4.0
 12606                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12607 00001ACC 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12608                                  
 12609                                  	;cmp	ah,10h
 12610 00001AD0 80FC10                  	cmp	AH,FCB_CLOSE
 12611 00001AD3 7403                    	jz	short RegenDead
 12612 00001AD5 E89301                  	call	FCBHardErr		; massive hard error.
 12613                                  RegenDead:
 12614 00001AD8 F9                      	STC				; carry set
 12615                                  FCBRegen_retn:
 12616 00001AD9 C3                      	retn
 12617                                  
 12618                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12619                                  	; so fail the operation.
 12620                                  
 12621                                  RegenNoSharing:
 12622 00001ADA E85C59                  	call	CheckShare		; Sharing around?
 12623 00001ADD 75ED                    	JNZ	short RegenFail
 12624                                  	
 12625                                  	; Find an SFT for this guy.
 12626                                  	
 12627                                  	; 17/05/2019 - Retro DOS v4.0
 12628                                  
 12629                                  	; MSDOS 3.3
 12630                                  	;call	LRUFCB
 12631                                  	;jc	short FCBRegen_retn
 12632                                  	
 12633                                  	; MSDOS 6.0
 12634 00001ADF 50                      	push	ax
 12635 00001AE0 B000                    	mov	al,0			;indicate it is a regen operation
 12636 00001AE2 E8DEFE                  	call	LRUFCB
 12637 00001AE5 58                      	pop	ax
 12638 00001AE6 72F1                    	jc	short FCBRegen_retn
 12639                                  
 12640                                  	;mov	word [es:di+2],8002h
 12641 00001AE8 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12642 00001AEE 243F                    	AND	AL,3Fh			; get drive number for flags
 12643 00001AF0 98                      	CBW
 12644                                  	;or	ax,4000h
 12645 00001AF1 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12646                                  
 12647                                  	; The bits field consists of the upper two bits (dirty and device) 
 12648                                  	; from the SFT and the low 4 bits from the open mode.
 12649                                  
 12650                                  	;mov	cl,[si+1Ah]
 12651 00001AF4 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12652 00001AF7 88CD                    	MOV	CH,CL
 12653 00001AF9 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12654 00001AFC 08E8                    	OR	AL,CH
 12655                                  	;and	cl,0Fh
 12656 00001AFE 80E10F                  	AND	CL,access_mask		; get the mode bits
 12657                                  	;mov	[es:di+2],cl
 12658 00001B01 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12659                                  	;mov	[es:di+5],ax
 12660 00001B05 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12661                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12662 00001B09 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12663                                  	;mov	[es:di+31h],ax
 12664 00001B0D 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12665 00001B11 1E                      	push	ds
 12666 00001B12 56                      	push	si
 12667 00001B13 06                      	push	es
 12668 00001B14 57                      	push	di
 12669 00001B15 16                      	push	ss
 12670 00001B16 07                      	pop	es
 12671 00001B17 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12672                                  
 12673 00001B1A B90800                  	MOV	CX,8
 12674 00001B1D 46                      	INC	SI			; Skip past drive byte to name in FCB
 12675                                  
 12676                                  	; MSDOS 3.3
 12677                                  ;RegenCopyName:
 12678                                  	;lodsb
 12679                                  	;call	UCase
 12680                                  	;stosb
 12681                                  	;loop	RegenCopyName
 12682                                  
 12683                                  	; MSDOS 6.0
 12684 00001B1E E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12685                                  
 12686 00001B21 16                      	push	ss	; SS is DOSDATA
 12687 00001B22 1F                      	pop	ds
 12688                                  
 12689                                  	;mov	byte [ATTRIB],16h
 12690 00001B23 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12691                                  					; Must set this to something interesting
 12692                                  					; to call DEVNAME.
 12693 00001B28 E85D27                  	call	DEVNAME 		; check for device
 12694 00001B2B 5E                      	pop	si
 12695 00001B2C 07                      	pop	es
 12696 00001B2D 5E                      	pop	si
 12697 00001B2E 1F                      	pop	ds
 12698 00001B2F 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12699                                  
 12700                                  	; Device found. We can ignore disk-specific info
 12701                                  
 12702                                  	;mov	[es:di+5],bh
 12703 00001B31 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12704                                  	;mov	byte [es:di+4],0
 12705 00001B35 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12706                                  					; SS override
 12707                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12708 00001B3A 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12709                                  	;mov	[es:di+7],si
 12710 00001B3F 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12711                                  	;mov	[es:di+9],ds
 12712 00001B43 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12713 00001B47 C3                      	retn				; carry is clear
 12714                                  
 12715                                  RegenDeadJ:
 12716 00001B48 EB8E                    	JMP	short RegenDead
 12717                                  
 12718                                  	; File found. Just copy in the remaining pieces.
 12719                                  
 12720                                  RegenFileNoSharing:
 12721                                  	;mov	ax,[es:di+5]
 12722 00001B4A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12723 00001B4E 83E03F                  	AND	AX,03Fh
 12724 00001B51 1E                      	push	ds
 12725 00001B52 56                      	push	si
 12726 00001B53 E86B4F                  	call	FIND_DPB
 12727                                  	;mov	[es:di+7],si
 12728 00001B56 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12729                                  	;mov	[es:di+9],ds
 12730 00001B5A 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12731 00001B5E 5E                      	pop	si
 12732 00001B5F 1F                      	pop	ds
 12733 00001B60 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12734                                  					; indicator was bogus
 12735                                  	;mov	ax,[si+1Dh]
 12736 00001B62 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12737                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12738                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12739 00001B65 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12740                                  
 12741                                  	; MSDOS 6.0
 12742                                  
 12743                                  	; SR;
 12744                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12745                                  	; number
 12746                                  
 12747                                  	;mov	al,[si+18h]
 12748 00001B69 8A4418                  	mov	al,[si+fcb_sfn]
 12749 00001B6C 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12750 00001B6E 88C4                    	mov	ah,al
 12751 00001B70 D0C4                    	rol	ah,1
 12752 00001B72 D0E8                    	shr	al,1
 12753 00001B74 08E0                    	or	al,ah
 12754 00001B76 243F                    	and	al,03Fh		;mask off unused bits
 12755                                  	;mov	[es:di+4],al
 12756 00001B78 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12757                                  
 12758                                  	; SR;
 12759                                  	; Update the higher word of the directory sector from the FCB
 12760                                  
 12761                                  	;;mov	al,[si+18h]
 12762 00001B7C 8A4418                  	mov	al,[si+fcb_sfn]
 12763 00001B7F 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12764 00001B81 28E4                    	sub	ah,ah
 12765                                  	;mov	[es:di+1Dh],ax
 12766 00001B83 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12767                                  
 12768                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12769                                  	;mov	ax,[si+1Bh]
 12770 00001B87 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12771                                  	;mov	[es:di+0Bh],ax
 12772 00001B8A 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12773                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12774                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12775 00001B8E 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12776                                  	;mov	al,[si+1Fh]
 12777 00001B92 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12778                                  	;mov  	[es:di+1Fh],al
 12779 00001B95 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12780                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12781 00001B99 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12782                                  					; Existing FCB entries would be
 12783                                  					; flushed unnecessarily because of
 12784                                  					; check in CheckFCB of the ref_count.
 12785                                  					; July 22/85 - BAS
 12786                                  	;lea	si,[si+1]
 12787 00001B9C 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12788                                  	;lea	di,[di+20h]
 12789 00001B9F 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12790                                  	;mov	cx,11
 12791 00001BA2 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12792                                  	
 12793                                  	; MSDOS 6.0
 12794 00001BA5 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12795                                  	
 12796                                  	; MSDOS 3.3
 12797                                  ;RegenCopyName2:
 12798                                  	;lodsb
 12799                                  	;call    UCase
 12800                                  	;stosb
 12801                                  	;loop    RegenCopyName2
 12802                                  
 12803 00001BA8 F8                      	clc
 12804 00001BA9 C3                      	retn
 12805                                  
 12806                                  ; 17/05/2019 - Retro DOS v4.0
 12807                                  
 12808                                  ;**	BlastSFT - FIll SFT with Garbage
 12809                                  ; --------------------------------------------------------------------------
 12810                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12811                                  ;	various garbage values to put into the SFT.  I don't know why,
 12812                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12813                                  ;	necessary to show that the SFT is free after filling it.
 12814                                  ;
 12815                                  ;	ENTRY	(es:di) = address of SFT
 12816                                  ;		(al) = fill character
 12817                                  ;	EXIT	(ax) = -1
 12818                                  ;		'C' clear
 12819                                  ;	USES	AX, CX, Flags
 12820                                  
 12821                                  BlastSFT:
 12822 00001BAA 57                      	push	di
 12823                                  	;mov	cx,53 ; MSDOS 3.3
 12824                                  	;mov	cx,59 ; MSDOS 6.0
 12825 00001BAB B93B00                  	mov	cx,SF_ENTRY.size
 12826 00001BAE F3AA                    	rep	stosb
 12827 00001BB0 5F                      	pop	di
 12828 00001BB1 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12829 00001BB3 268905                  	mov	[es:di],ax
 12830                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12831                                  	;mov	[es:di+15h],ax
 12832 00001BB6 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12833 00001BBA 48                      	dec	ax	; -1					    ;
 12834                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12835 00001BBB 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12836                                  BlastSFT_retn:
 12837 00001BBF C3                      	retn				; return with 'C' clear     ;
 12838                                  
 12839                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12840                                  ; --------------------------------------------------------------------------
 12841                                  ;
 12842                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12843                                  ;   regenerated.
 12844                                  ;
 12845                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12846                                  ;		AL is SFT index
 12847                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12848                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12849                                  ;   Registers modified: AX and BX
 12850                                  ;
 12851                                  ; --------------------------------------------------------------------------
 12852                                  
 12853                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12854                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12855                                  CheckFCB:
 12856                                  		
 12857                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12858                                  
 12859                                  	; MSDOS 3.3
 12860                                  
 12861                                  	; LES	DI,[CS:SFTFCB]
 12862                                  
 12863                                  	; MSDOS 6.0
 12864                                  	
 12865                                  	; SR;
 12866                                  	; We check if the given FCB is for a local file. If so, we return a 
 12867                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12868                                  
 12869                                  	;test	byte [si+19h],0C0h
 12870 00001BC0 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12871 00001BC4 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12872 00001BC6 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12873                                  
 12874                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12875                                  	;cmp	[es:di+4],al
 12876 00001BCB 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12877 00001BCF 7244                    	JC	short BadSFT
 12878                                  	;;mov	bl,53 ; MSDOS 3.3
 12879                                  	;mov	bl,59 ; MSDOS 6.0
 12880 00001BD1 B33B                    	MOV	BL,SF_ENTRY.size
 12881 00001BD3 F6E3                    	MUL	BL
 12882                                  	;lea	di,[di+6]
 12883 00001BD5 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12884 00001BD8 01C7                    	ADD	DI,AX
 12885                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12886 00001BDA 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12887                                  	;cmp	[es:di+31h],ax
 12888 00001BDE 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12889 00001BE2 7531                    	JNZ	short BadSFT		; must match process
 12890 00001BE4 26833D00                	cmp	word [es:di],0
 12891                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12892 00001BE8 742B                    	JZ	short BadSFT		; must also be in use
 12893                                  	;mov	al,[si+19h]
 12894 00001BEA 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12895                                  	;test	al,80h
 12896 00001BED A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12897 00001BEF 7430                    	JZ	short CheckNoShare	; No. try local or device
 12898                                  
 12899                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12900                                  	; FCBSHARE is a superset of FCBNETWORK.
 12901                                  
 12902 00001BF1 50                      	PUSH	AX
 12903                                  	;and	al,0C0h
 12904 00001BF2 24C0                    	AND	AL,FCBMASK
 12905                                  	;cmp	al,0C0h
 12906 00001BF4 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12907 00001BF6 58                      	POP	AX
 12908 00001BF7 751E                    	JNZ	short CheckNet		; yes
 12909                                  ;
 12910                                  ;----- In share support -----
 12911                                  ;
 12912                                  	;call	far [cs:JShare+(11*4)]
 12913 00001BF9 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12914 00001BFE 7215                    	JC	short BadSFT
 12915 00001C00 EB06                    	JMP	SHORT CheckD
 12916                                  ;
 12917                                  ;----- End in share support -----
 12918                                  ;
 12919                                  	; 09/11/2022
 12920                                  	; (There is not any procedure/sub
 12921                                  	;  which calls or jumps to CheckFirClus here)
 12922                                  	;;;
 12923                                  CheckFirClus:
 12924                                  	;cmp     bx,[es:di+0Bh]
 12925                                  	; 07/12/2022
 12926 00001C02 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12927 00001C06 750D                    	JNZ	short BadSFT
 12928                                  	;;;
 12929                                  CheckD: 
 12930 00001C08 243F                    	AND	AL,3Fh
 12931                                  	;mov	ah,[es:di+5]
 12932 00001C0A 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12933 00001C0E 80E43F                  	AND	AH,3Fh
 12934 00001C11 38C4                    	CMP	AH,AL
 12935                                  	; 16/12/2022
 12936 00001C13 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12937                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12938                                  	;jnz	short BadSFT
 12939                                  ;CheckD_retn:
 12940                                  	;retn
 12941                                  BadSFT: 
 12942 00001C15 F9                      	STC
 12943 00001C16 C3                      	retn
 12944                                  				
 12945                                  CheckNet:
 12946                                  	; 17/05/2019 - Retro DOS v4.0
 12947                                  	
 12948                                  ;----- In net support -----
 12949                                  
 12950                                  	; MSDOS 3.3
 12951                                  	;;mov	ax,[si+1Ah]
 12952                                  	;mov	ax,[si+fcb_net_handle]
 12953                                  	;;cmp	ax,[es:di+1Dh]
 12954                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12955                                  	;jnz	short BadSFT
 12956                                  	;;cmp	ax,[es:di+19h]
 12957                                  	;cmp	ax,[ES:DI+sf_netid]
 12958                                  	;jnz     short BadSFT
 12959                                  	;;mov	ax,[si+1Eh]
 12960                                  	;mov	ax,[si+fcb_l_attr]
 12961                                  	;;cmp	ax,[es:di+1Bh]
 12962                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12963                                  	;jnz     short BadSFT
 12964                                  
 12965                                  	; MSDOS 6.0
 12966                                  	;mov	ax,[si+1Ch]
 12967 00001C17 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12968                                  	; 09/11/2022
 12969                                  	;cmp	ax,[es:di+0Bh] 
 12970 00001C1A 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12971 00001C1E 75F5                    	JNZ	short BadSFT
 12972                                  
 12973                                  ;----- END In net support -----
 12974                                  
 12975                                  CheckNet_retn:
 12976 00001C20 C3                      	retn
 12977                                  
 12978                                  CheckNoShare:
 12979                                  
 12980                                  ; 16/12/2022
 12981                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 12982                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 12983                                  ;	;test	al,40h
 12984                                  ;	test	AL,FCBDEVICE		; Device?
 12985                                  ;	;jnz	short $+2 ; 09/11/2022
 12986                                  ;	JNZ	short CheckNoShareDev 	; Yes
 12987                                  
 12988                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 12989                                  	;;mov	bx,[si+1Dh]
 12990                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 12991                                  	;;cmp	bx,[es:di+1Dh]
 12992                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 12993                                  	;jnz	short BadSFT
 12994                                  	;;mov	bl,[si+1Fh]
 12995                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 12996                                  	;;cmp	bl,[es:di+1Fh]
 12997                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 12998                                  	;jnz	short BadSFT
 12999                                  	;;mov	bl,[si+1Ah]
 13000                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13001                                  	;;mov	bh,[es:di+5]
 13002                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13003                                  	;xor	bh,bl
 13004                                  	;and	bh,0C0h
 13005                                  	;jnz	short BadSFT
 13006                                  	;;xor	bl,[es:di+2]
 13007                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13008                                  	;and	bl,0Fh
 13009                                  	;jnz	short BadSFT
 13010                                  	;push	di
 13011                                  	;push	si
 13012                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13013                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13014                                  	;;lea	si,[si+1]
 13015                                  	;LEA	SI,[SI+SYS_FCB.name]
 13016                                  	;;mov	cx,11
 13017                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13018                                  	;repe	cmpsb
 13019                                  	;pop	si
 13020                                  	;pop	di
 13021                                  	;jnz	short BadSFT
 13022                                  	;;mov	bx,[si+1Bh]
 13023                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13024                                  	;jmp	short CheckFirClus
 13025                                  
 13026                                  	; MSDOS 6.0
 13027                                  
 13028                                  	; SR;
 13029                                  	; The code below to match a local FCB with its SFT can no longer be
 13030                                  	; used. We just return a no-match status. This check is done right
 13031                                  	; at the top.
 13032                                  
 13033                                  CheckNoShareDev:
 13034                                  	;mov	bx,[si+1Ah]
 13035 00001C21 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13036                                  	;cmp	bx,[es:di+7]
 13037 00001C24 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13038 00001C28 75EB                    	JNZ	short BadSFT
 13039                                  	;mov	bx,[si+1Ch]
 13040 00001C2A 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13041                                  	;cmp	bx,[es:di+9]
 13042 00001C2D 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13043 00001C31 75E2                    	JNZ	short BadSFT
 13044 00001C33 EBD3                    	JMP	short CheckD
 13045                                  
 13046                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13047                                  ;----------------------------------------------------------------------------
 13048                                  ;
 13049                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13050                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13051                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13052                                  ;	with PID
 13053                                  ;
 13054                                  ;   Inputs:	DS:SI point to FCB
 13055                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13056                                  ;		Carry clear -> OK ES:DI -> SFT
 13057                                  ;		Carry set -> error in ax
 13058                                  ;   Registers modified: ES,DI, AX
 13059                                  ;
 13060                                  ;----------------------------------------------------------------------------
 13061                                  
 13062                                  SFTFromFCB:
 13063                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13064                                  
 13065                                  	; 17/05/2019 - Retro DOS v4.0
 13066                                  
 13067 00001C35 50                      	push	ax
 13068 00001C36 53                      	push	bx
 13069                                  	;mov	al,[si+18h]
 13070 00001C37 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13071 00001C3A E883FF                  	call	CheckFCB
 13072 00001C3D 5B                      	pop	bx
 13073 00001C3E 58                      	pop	ax
 13074                                  	;MOV	[CS:THISSFT],DI		; SS override
 13075                                  	;MOV	[CS:THISSFT+2],ES
 13076 00001C3F 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13077 00001C44 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13078 00001C49 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13079                                  	
 13080                                  	; 09/11/2022 (MSDOS 5.0)
 13081                                  	; 31/05/2019
 13082 00001C4B 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13083 00001C4C E821E8                  	call	save_world
 13084 00001C4F E865FE                  	call	FCBRegen
 13085 00001C52 E804E8                  	call	restore_world		; use macro restore world
 13086 00001C55 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13087                                  
 13088                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13089 00001C56 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13090 00001C5A 72C4                    	jc	short CheckNet_retn
 13091                                  
 13092                                  Set_SFT: 
 13093                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13094 00001C5C 36C43E[9E05]            	les	di,[ss:THISSFT]
 13095                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13096 00001C61 36FF36[3C03]            	push	word [ss:PROC_ID]
 13097                                  	;pop	word [es:di+31h]
 13098 00001C66 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13099 00001C6A C3                      	retn				; carry is clear
 13100                                  
 13101                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13102                                  ;----------------------------------------------------------------------------
 13103                                  ;
 13104                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13105                                  ;	unavailable FCB.
 13106                                  ;
 13107                                  ;   Inputs:	none.
 13108                                  ;   Outputs:	none.
 13109                                  ;   Registers modified: all
 13110                                  ;
 13111                                  ;----------------------------------------------------------------------------
 13112                                  
 13113                                  FCBHardErr:
 13114                                  	; 17/05/2019 - Retro DOS v4.0
 13115 00001C6B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13116                                  	;
 13117                                  	;mov	ax,23h
 13118 00001C70 B82300                  	MOV	AX,error_FCB_unavailable
 13119                                  	;;mov	byte [cs:ALLOWED],8
 13120                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13121 00001C73 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13122                                  	
 13123                                  	;LES	BP,[CS:THISDPB]
 13124 00001C79 26C42E[8A05]            	les	bp,[es:THISDPB]
 13125                                  	
 13126 00001C7E BF0100                  	MOV	DI,1			; Fake some registers
 13127 00001C81 89F9                    	MOV	CX,DI
 13128                                  	;mov	dx,[es:bp+0Bh]
 13129 00001C83 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13130 00001C87 E85B37                  	call	HARDERR
 13131 00001C8A F9                      	STC
 13132 00001C8B C3                      	retn
 13133                                  
 13134                                  ;============================================================================
 13135                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13136                                  ;============================================================================
 13137                                  ; 21/07/2018 - Retro DOS v3.0
 13138                                  ; 17/05/2019 - Retro DOS v4.0
 13139                                  
 13140                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13141                                  ;
 13142                                  ;	GetRR
 13143                                  ;	GetExtent
 13144                                  ;	SetExtent
 13145                                  ;	GetExtended
 13146                                  ;	GetRecSize
 13147                                  ;	FCBIO
 13148                                  ;	$FCB_OPEN
 13149                                  ;	$FCB_CREATE
 13150                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13151                                  ;	$FCB_RANDOM_READ_BLOCK
 13152                                  ;	$FCB_SEQ_READ
 13153                                  ;	$FCB_SEQ_WRITE
 13154                                  ;	$FCB_RANDOM_READ
 13155                                  ;	$FCB_RANDOM_WRITE
 13156                                  ;
 13157                                  ;	Revision history:
 13158                                  ;
 13159                                  ;		Created: ARR 4 April 1983
 13160                                  ;			 MZ  6 June  1983 completion of functions
 13161                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13162                                  ;				  times.  Change so successive closes work by
 13163                                  ;				  always returning OK.	Also, detect I/O to
 13164                                  ;				  already closed FCB and return EOF.
 13165                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13166                                  ;				  out of sft into FCB for reconnection
 13167                                  ;
 13168                                  ;	    A000   version 4.00	Jan. 1988
 13169                                  
 13170                                  ; Defintions for FCBOp flags
 13171                                  
 13172                                  RANDOM	equ 2				; random operation
 13173                                  FCBREAD equ 4				; doing a read
 13174                                  BLOCK	equ 8				; doing a block I/O
 13175                                  
 13176                                  ;Break <GetRR - return the random record field in DX:AX>
 13177                                  ;---------------------------------------------------------------------------
 13178                                  ;
 13179                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13180                                  ;	from the FCB pointed to by DS:SI
 13181                                  ;
 13182                                  ;   Inputs:	DS:SI point to an FCB
 13183                                  ;		BX has record size
 13184                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13185                                  ;   Registers modified: none
 13186                                  ;---------------------------------------------------------------------------
 13187                                  
 13188                                  GetRR:
 13189                                  	;mov	ax,[si+21h]
 13190 00001C8C 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13191                                  	;mov	dx,[si+23h]
 13192 00001C8F 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13193 00001C92 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13194 00001C95 7202                    	JB	short GetRRBye
 13195 00001C97 30F6                    	XOR	DH,DH
 13196                                  GetRRBye:
 13197 00001C99 C3                      	retn
 13198                                  
 13199                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13200                                  ;---------------------------------------------------------------------------
 13201                                  ;
 13202                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13203                                  ;	NR fields in the FCB.
 13204                                  ;
 13205                                  ;   Inputs:	DS:SI - point to FCB
 13206                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13207                                  ;   Registers modified: none
 13208                                  ;---------------------------------------------------------------------------
 13209                                  
 13210                                  GetExtent:
 13211                                  	;mov	al,[si+20h]
 13212 00001C9A 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13213                                  	;mov	dx,[si+0Ch]
 13214 00001C9D 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13215 00001CA0 D0E0                    	SHL	AL,1
 13216 00001CA2 D1EA                    	SHR	DX,1
 13217 00001CA4 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13218 00001CA6 88D4                    	MOV	AH,DL
 13219 00001CA8 88F2                    	MOV	DL,DH
 13220 00001CAA 30F6                    	XOR	DH,DH
 13221 00001CAC C3                      	retn
 13222                                  
 13223                                  ;Break <SetExtent - update the extent/NR field>
 13224                                  ;---------------------------------------------------------------------------
 13225                                  ;
 13226                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13227                                  ;	fields
 13228                                  ;
 13229                                  ;   Inputs:	DS:SI point to FCB
 13230                                  ;		DX:AX is a record location in file
 13231                                  ;   Outputs:	Extent/NR fields are filled in
 13232                                  ;   Registers modified: CX
 13233                                  ;---------------------------------------------------------------------------
 13234                                  
 13235                                  SetExtent:
 13236 00001CAD 50                      	push	ax
 13237 00001CAE 52                      	push	dx
 13238 00001CAF 89C1                    	MOV	CX,AX
 13239 00001CB1 247F                    	AND	AL,7FH			; next rec field
 13240                                  	;mov	[si+20h],al
 13241 00001CB3 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13242 00001CB6 80E180                  	AND	CL,80H			; save upper bit
 13243 00001CB9 D1E1                    	SHL	CX,1
 13244 00001CBB D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13245 00001CBD 88E8                    	MOV	AL,CH
 13246 00001CBF 88D4                    	MOV	AH,DL
 13247                                  	;mov	[si+0Ch], ax
 13248 00001CC1 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13249 00001CC4 5A                      	pop	dx
 13250 00001CC5 58                      	pop	ax
 13251 00001CC6 C3                      	retn
 13252                                  
 13253                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13254                                  ;---------------------------------------------------------------------------
 13255                                  ;
 13256                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13257                                  ;
 13258                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13259                                  ;   Outputs:	DS:SI point to the FCB part
 13260                                  ;		zeroflag set if not extended fcb
 13261                                  ;   Registers modified: SI
 13262                                  ;---------------------------------------------------------------------------
 13263                                  
 13264                                  GetExtended:
 13265 00001CC7 89D6                    	MOV	SI,DX			; point to Something
 13266 00001CC9 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13267 00001CCC 7503                    	JNZ	short GetBye		; not there
 13268 00001CCE 83C607                  	ADD	SI,7			; point to FCB
 13269                                  GetBye:
 13270 00001CD1 39D6                    	CMP	SI,DX			; set condition codes
 13271                                  getextd_retn:
 13272 00001CD3 C3                      	retn
 13273                                  
 13274                                  ;Break <GetRecSize - return in BX the FCB record size>
 13275                                  ;---------------------------------------------------------------------------
 13276                                  ;
 13277                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13278                                  ;
 13279                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13280                                  ;   Outputs:	BX contains the record size
 13281                                  ;   Registers modified: None
 13282                                  ;---------------------------------------------------------------------------
 13283                                  
 13284                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13285                                  GetRecSize:
 13286                                  	;mov	bx,[si+0Eh]
 13287 00001CD4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13288 00001CD7 09DB                    	OR	BX,BX			; is it nul?
 13289 00001CD9 74F8                    	jz	short getextd_retn
 13290 00001CDB BB8000                  	MOV	BX,128			; use default size
 13291                                  	;mov	[si+0Eh],bx
 13292 00001CDE 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13293 00001CE1 C3                      	retn
 13294                                  
 13295                                  ;BREAK <FCBIO - do internal FCB I/O>
 13296                                  ;---------------------------------------------------------------------------
 13297                                  ;
 13298                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13299                                  ;
 13300                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13301                                  ;		DS:DX point to FCB
 13302                                  ;		CX may have count of number of records to xfer
 13303                                  ;   Outputs:	AL has error code
 13304                                  ;   Registers modified: all
 13305                                  ;---------------------------------------------------------------------------
 13306                                  
 13307                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13308                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13309                                  FCBIO:
 13310                                  
 13311                                  FEOF	EQU	1
 13312                                  FTRIM	EQU	2
 13313                                  
 13314                                  %define	FCBErr	byte [bp-1]  ; byte	
 13315                                  %define	cRec	word [bp-3]  ; word	
 13316                                  ;%define RecPos	word [bp-7]  ; dword
 13317                                  %define RecPosL	word [bp-7]  ; word
 13318                                  %define RecPosH	word [bp-5]  ; word
 13319                                  %define	RecSize	word [bp-9]  ; word
 13320                                  ;%define bPos	word [bp-13] ; dword
 13321                                  %define bPosL	word [bp-13] ; word
 13322                                  %define bPosH	word [bp-11] ; word
 13323                                  %define cByte	word [bp-15] ; word	
 13324                                  %define cResult word [bp-17] ; word	
 13325                                  %define	cRecRes	word [bp-19] ; word
 13326                                  %define	FCBOp	byte [bp-20] ; byte
 13327                                  
 13328                                  	;Enter
 13329                                  
 13330 00001CE2 55                      	push	bp
 13331 00001CE3 89E5                    	mov	bp,sp
 13332 00001CE5 83EC14                  	sub	sp,20
 13333                                  	;mov	[bp-20],al
 13334 00001CE8 8846EC                  	MOV	FCBOp,AL
 13335                                  	;mov	byte [bp-1],0
 13336 00001CEB C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13337 00001CEF E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13338                                  	;test	byte [bp-20],8
 13339 00001CF2 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13340 00001CF6 7503                    	JNZ	short GetPos
 13341 00001CF8 B90100                  	MOV	CX,1			;	cRec = 1;
 13342                                  GetPos:
 13343                                  	;mov	[bp-3],cx
 13344 00001CFB 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13345 00001CFE E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13346 00001D01 E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13347                                  	;mov	[bp-9],bx
 13348 00001D04 895EF7                  	MOV	RecSize,BX
 13349                                  	;test	byte [bp-20],2
 13350 00001D07 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13351 00001D0B 7403                    	JZ	short GetRec
 13352 00001D0D E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13353                                  GetRec:
 13354                                  	;mov	[bp-7],ax
 13355 00001D10 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13356                                  	;mov	[bp-5],dx
 13357 00001D13 8956FB                  	MOV	RecPosH,DX
 13358 00001D16 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13359                                  	;mov	ax,[bp-5]
 13360 00001D19 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13361 00001D1C F7E3                    	MUL	BX
 13362 00001D1E 89C7                    	MOV	DI,AX
 13363                                  	;mov	ax,[bp-7]
 13364 00001D20 8B46F9                  	MOV	AX,RecPosL
 13365 00001D23 F7E3                    	MUL	BX
 13366 00001D25 01FA                    	ADD	DX,DI
 13367                                  	;mov	[bp-13],ax
 13368 00001D27 8946F3                  	MOV	bPosL,AX
 13369                                  	;mov	[bp-11],dx
 13370 00001D2A 8956F5                  	MOV	bPosH,DX
 13371                                  	;mov	ax,[bp-3]
 13372 00001D2D 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13373 00001D30 F7E3                    	MUL	BX
 13374                                  	;mov	[bp-15],ax
 13375 00001D32 8946F1                  	MOV	cByte,AX
 13376                                  
 13377                                  ;hkn; 	SS override
 13378 00001D35 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13379 00001D3A 83D200                  	ADC	DX,0
 13380 00001D3D 7419                    	JZ	short DoOper
 13381                                  	;mov	byte [bp-1],2
 13382 00001D3F C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13383                                  
 13384                                  ;hkn; 	SS override
 13385 00001D43 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13386 00001D47 F7D8                    	NEG	AX
 13387 00001D49 7501                    	JNZ	short DoDiv
 13388 00001D4B 48                      	DEC	AX
 13389                                  DoDiv:
 13390 00001D4C 31D2                    	XOR	DX,DX
 13391 00001D4E F7F3                    	DIV	BX
 13392                                  	;mov	[bp-3],ax
 13393 00001D50 8946FD                  	MOV	cRec,AX
 13394 00001D53 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13395                                  	;mov	[bp-15],ax
 13396 00001D55 8946F1                  	MOV	cByte,AX		;	}
 13397                                  DoOper:
 13398 00001D58 31DB                    	XOR	BX,BX
 13399                                  	;mov	[bp-17],bx
 13400 00001D5A 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13401                                  	;cmp	[bp-15],bx
 13402 00001D5D 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13403 00001D60 7506                    	JNZ	short DoGetExt
 13404                                  	;test	byte [bp-1],2
 13405 00001D62 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13406                                  	;JZ	short DoGetExt
 13407                                  	;JMP	short SkipOp
 13408                                  	; 16/12/2022
 13409 00001D66 7576                    	jnz	short SkipOp
 13410                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13411                                  	;JZ	short DoGetExt
 13412                                  	;JMP	short SkipOp
 13413                                  DoGetExt:
 13414 00001D68 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13415 00001D6B 730F                    	JNC	short ContinueOp
 13416                                  FCBDeath:
 13417 00001D6D E8F8E8                  	call	FCB_RET_ERR		; signal error, map for extended
 13418                                  	;mov	word [bp-19],0
 13419 00001D70 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13420                                  	;mov	byte [bp-1],1
 13421 00001D75 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13422 00001D79 E9EF00                  	JMP	FCBSave 		; bam!
 13423                                  ContinueOp:
 13424                                  	;mov	ax,[si+10h]
 13425 00001D7C 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13426                                  	;mov	[es:di+11h],ax
 13427 00001D7F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13428                                  	;mov	ax,[si+12h]
 13429 00001D83 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13430                                  	;mov	[es:di+13h],ax
 13431 00001D86 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13432                                  	;mov	ax,[bp-13]
 13433 00001D8A 8B46F3                  	MOV	AX,bPosL
 13434                                  	;mov	dx,[bp-11]
 13435 00001D8D 8B56F5                  	MOV	DX,bPosH
 13436                                  	;mov	[es:di+15h],ax
 13437 00001D90 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13438                                  	;xchg	dx,[es:di+17h]
 13439 00001D94 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13440 00001D98 52                      	PUSH	DX			; save away Open age.
 13441                                  	;mov	cx,[bp-15]
 13442 00001D99 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13443                                  
 13444                                  ;hkn; DOS_Read is in DOSCODE
 13445 00001D9C BF[6333]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13446                                  	;test	byte [bp-20],4
 13447 00001D9F F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13448 00001DA3 7503                    	JNZ	short DoContext
 13449                                  
 13450                                  ;hkn; DOS_Write is in DOSCODE
 13451 00001DA5 BF[8C35]                	MOV	DI,DOS_WRITE
 13452                                  DoContext:
 13453 00001DA8 55                      	push	bp
 13454 00001DA9 1E                      	push	ds
 13455 00001DAA 56                      	push	si
 13456                                  
 13457                                  ;hkn; SS is DOSDATA
 13458 00001DAB 16                      	push	ss
 13459 00001DAC 1F                      	pop	ds
 13460                                  
 13461                                  ;; Fix for disk full
 13462 00001DAD FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13463                                  	
 13464 00001DAF 5E                      	pop	si
 13465 00001DB0 1F                      	pop	ds
 13466 00001DB1 5D                      	pop	bp
 13467 00001DB2 72B9                    	JC	short FCBDeath
 13468                                  	
 13469 00001DB4 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13470 00001DBA 740A                    	JZ	short NODSKFULL
 13471 00001DBC 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13472                                  	;mov	byte [bp-1],1 
 13473 00001DC2 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13474                                  NODSKFULL:
 13475                                  ;; Fix for disk full
 13476                                  	;mov	[bp-17],cx
 13477 00001DC6 894EEF                  	MOV	cResult,CX
 13478 00001DC9 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13479                                  	;pop	word [es:di+17h]	
 13480 00001DCC 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13481                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13482                                  	;mov	ax,[es:di+11h]
 13483 00001DD0 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13484                                  	;mov	[si+10h],ax
 13485 00001DD4 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13486                                  	;mov	ax,[es:di+13h]
 13487 00001DD7 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13488                                  	;mov	[si+12h],ax
 13489 00001DDB 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13490                                  					;	}
 13491                                  SkipOp:
 13492                                  	;mov	ax,[bp-17]
 13493 00001DDE 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13494 00001DE1 31D2                    	XOR	DX,DX
 13495                                  	;div	word [bp-9]
 13496 00001DE3 F776F7                  	DIV	RecSize
 13497                                  	;mov	[bp-19],ax
 13498 00001DE6 8946ED                  	MOV	cRecRes,AX
 13499                                  	;add	[bp-7],ax
 13500 00001DE9 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13501                                  	;adc	word [bp-5],0
 13502 00001DEC 8356FB00                	ADC	RecPosH,0
 13503                                  
 13504                                  ; If we have not gotten the expected number of records, we signal an EOF
 13505                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13506                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13507                                  ; do we.
 13508                                  
 13509                                  	;cmp	ax,[bp-3]
 13510 00001DF0 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13511 00001DF3 7411                    	JZ	short TryBlank
 13512                                  	;test	byte [bp-20],4
 13513 00001DF5 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13514 00001DF9 7507                    	JNZ	short SetEOF
 13515                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13516                                  	; MSDOS 3.3
 13517                                  	;;test	word [es:di+5],80h
 13518                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13519                                  	;JNZ	short TryBlank
 13520                                  	; MSDOS 5.0 & MSDOS 6.0
 13521                                  	;test	byte [es:di+5],80h
 13522 00001DFB 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13523 00001E00 7504                    	jnz	short TryBlank
 13524                                  
 13525                                  SetEOF:
 13526                                  	;mov	byte [bp-1],1
 13527 00001E02 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13528                                  TryBlank:				;
 13529 00001E06 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13530 00001E08 7426                    	JZ	short SetExt
 13531                                  	;add	word [bp-7],1
 13532 00001E0A 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13533                                  	;adc	word [bp-5],0
 13534 00001E0E 8356FB00                	ADC	RecPosH,0
 13535                                  	;test	byte [bp-20],4
 13536 00001E12 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13537 00001E16 7418                    	JZ	short SetExt
 13538                                  	;inc	word [bp-19]
 13539 00001E18 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13540                                  	;mov	byte [bp-1],3
 13541 00001E1B C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13542                                  	;mov	cx,[bp-9]
 13543 00001E1F 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13544 00001E22 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13545 00001E24 30C0                    	XOR	AL,AL
 13546                                  ;hkn; 	SS override
 13547 00001E26 36C43E[2C03]            	les     di,[ss:DMAADD]
 13548                                  	;add	di,[bp-17]
 13549 00001E2B 037EEF                  	ADD	DI,cResult
 13550 00001E2E F3AA                    	REP	STOSB			;   }	}
 13551                                  SetExt:
 13552                                  	;mov	dx,[bp-5]
 13553 00001E30 8B56FB                  	MOV	DX,RecPosH
 13554                                  	;mov	ax,[bp-7]
 13555 00001E33 8B46F9                  	MOV	AX,RecPosL
 13556                                  	;test	byte [bp-20],2
 13557 00001E36 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13558 00001E3A 7406                    	JZ	short DoSetExt
 13559                                  	;test	byte [bp-20],8
 13560 00001E3C F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13561 00001E40 7403                    	JZ	short TrySetRR
 13562                                  DoSetExt:
 13563 00001E42 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13564                                  TrySetRR:
 13565                                  	;test	byte [bp-20],8
 13566 00001E45 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13567 00001E49 740F                    	JZ	short TryReturn
 13568                                  	;mov	[si+21h],ax
 13569 00001E4B 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13570                                  	;mov	[si+23h],dl
 13571 00001E4E 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13572                                  	;cmp	word [si+0Eh],64
 13573 00001E51 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13574 00001E55 7303                    	JAE	short TryReturn
 13575                                  	;mov	[si+24h],dh
 13576 00001E57 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13577                                  TryReturn: 
 13578                                  	;test	byte [bp-20],4
 13579 00001E5A F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13580 00001E5E 750B                    	JNZ	short FCBSave
 13581 00001E60 1E                      	push	ds			;	FCB->FDate = date;
 13582 00001E61 E8ABEC                  	call	DATE16			;	FCB->FTime = time;
 13583 00001E64 1F                      	pop	ds
 13584                                  	;mov	[si+14h],ax
 13585 00001E65 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13586                                  	;mov	[si+16h],dx
 13587 00001E68 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13588                                  FCBSave: 
 13589                                  	;test	byte [bp-20],8
 13590 00001E6B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13591 00001E6F 7409                    	jz	short DoReturn
 13592                                  	;mov	cx,[bp-19]
 13593 00001E71 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13594 00001E74 E818E6                  	call    Get_User_Stack
 13595                                  	;mov	[si+4],cx
 13596 00001E77 894C04                  	MOV	[SI+user_env.user_CX],CX
 13597                                  DoReturn:
 13598                                  	;mov	al,[bp-1]
 13599 00001E7A 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13600                                  	;Leave	
 13601 00001E7D 89EC                    	mov     sp,bp
 13602 00001E7F 5D                      	pop     bp
 13603 00001E80 C3                      	retn
 13604                                  
 13605                                  ; 22/07/2018 - Retro DOS v3.0
 13606                                  
 13607                                  ;Break <$FCB_Open - open an old-style FCB>
 13608                                  ;---------------------------------------------------------------------------
 13609                                  ;
 13610                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13611                                  ;	for us and asked to have the rest filled in.
 13612                                  ;
 13613                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13614                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13615                                  ;		FCB has the following fields filled in:
 13616                                  ;		    Time/Date Extent/NR Size
 13617                                  ;---------------------------------------------------------------------------
 13618                                  
 13619                                  _$FCB_OPEN:			; System call 15
 13620                                  
 13621 00001E81 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13622                                  
 13623                                  ;hkn; DOS_Open is in DOSCODE
 13624 00001E84 B9[E42B]                	MOV	CX,DOS_OPEN
 13625                                  
 13626                                  ; The following is common code for Creation and openning of FCBs. AX is
 13627                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13628                                  ; the FCB
 13629                                  
 13630                                  DoAccess:
 13631 00001E87 1E                      	push	ds
 13632 00001E88 52                      	push	dx
 13633 00001E89 51                      	push	cx
 13634 00001E8A 50                      	push	ax			; save FCB pointer away
 13635                                  
 13636                                  ;hkn; 	OpenBuf is in DOSDATA
 13637 00001E8B BF[BE03]                	MOV	DI,OPENBUF
 13638 00001E8E E87B4D                  	call	TransFCB		; crunch the fcb
 13639 00001E91 58                      	pop	ax
 13640 00001E92 59                      	pop	cx
 13641 00001E93 5A                      	pop	dx
 13642 00001E94 1F                      	pop	ds			; get fcb
 13643 00001E95 7303                    	JNC	short FindFCB		; everything seems ok
 13644                                  FCBOpenErr:
 13645                                  	; AL has error code
 13646 00001E97 E9CEE7                  	jmp	FCB_RET_ERR
 13647                                  FindFCB:
 13648 00001E9A E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13649                                  
 13650                                  	; 17/05/2019 - Retro DOS v4.0
 13651                                  
 13652                                  	; MSDOS 3.3
 13653                                  	;call	LRUFCB
 13654                                  	;jc	short HardMessage
 13655                                  
 13656                                  	; MSDOS 6.0
 13657 00001E9D 50                      	push	ax
 13658 00001E9E B001                    	mov	al,1			;indicate Open/Create operation
 13659 00001EA0 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13660 00001EA3 58                      	pop	ax
 13661 00001EA4 722A                    	jc	short HardMessage
 13662                                  	
 13663                                  	;mov	word [es:di+2],8000h
 13664 00001EA6 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13665 00001EAC 1E                      	push	ds
 13666 00001EAD 56                      	push	si	
 13667 00001EAE 53                      	push	bx			; save fcb pointer
 13668 00001EAF 89CE                    	MOV	SI,CX
 13669                                  
 13670                                  ;hkn; SS is DOSDATA
 13671 00001EB1 16                      	push	ss
 13672 00001EB2 1F                      	pop	ds			    ; let DOS_Open see variables
 13673 00001EB3 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13674 00001EB5 5B                      	pop	bx
 13675 00001EB6 5E                      	pop	si
 13676 00001EB7 1F                      	pop	ds			; get fcb
 13677                                  
 13678                                  ;hkn; SS override
 13679 00001EB8 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13680 00001EBD 7318                    	JNC	short FCBOK		; operation succeeded
 13681                                  failopen:
 13682 00001EBF 50                      	PUSH	AX
 13683 00001EC0 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13684 00001EC2 E8E5FC                  	call	BlastSFT
 13685 00001EC5 58                      	POP	AX
 13686                                  	;cmp	ax,4
 13687 00001EC6 83F804                  	CMP	AX,error_too_many_open_files
 13688 00001EC9 7405                    	JZ	short HardMessage
 13689                                  	;cmp	ax,24h
 13690 00001ECB 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13691 00001ECE 7505                    	jnz	short DeadFCB
 13692                                  HardMessage:
 13693 00001ED0 50                      	PUSH	AX
 13694 00001ED1 E897FD                  	call	FCBHardErr
 13695 00001ED4 58                      	POP	AX
 13696                                  DeadFCB:
 13697                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13698                                  	;jmp	FCB_RET_ERR
 13699 00001ED5 EBC0                    	jmp	short FCBOpenErr
 13700                                  FCBOK:
 13701                                  	; MSDOS 6.0
 13702 00001ED7 E8D2F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13703 00001EDA 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13704 00001EDC E85A55                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13705 00001EDF 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13706                                  ;SR;
 13707                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13708                                  ; LocalSFT variable to reflect this.
 13709                                  
 13710 00001EE1 36893E[4310]            	mov	[ss:LocalSFT],di
 13711 00001EE6 368C06[4510]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13712                                  ;;SR;
 13713                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13714                                  ;;
 13715                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13716                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13717                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13718                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13719                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13720                                  
 13721                                  FCBOK2:
 13722                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13723 00001EEB 26FF05                  	inc	word [es:di]
 13724                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13725 00001EEE E802FA                  	call	SaveFCBInfo
 13726                                  	; MSDOS 3.3
 13727                                  	;call	SetOpenAge
 13728                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13729                                  	;test	word [es:di+5],80h
 13730                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13731 00001EF1 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13732 00001EF6 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13733 00001EF8 8A04                    	MOV	AL,[SI]			; get drive byte
 13734 00001EFA E8964C                  	call	GETTHISDRV		; convert
 13735                                  	;INC	AL
 13736                                  	; 17/12/2022
 13737 00001EFD 40                      	inc	ax
 13738 00001EFE 8804                    	MOV	[SI],AL			; stash in good drive letter
 13739                                  FCBNoDrive:
 13740                                  	;mov	word [si+0Eh],128
 13741 00001F00 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13742                                  
 13743                                  	;mov	ax,[es:di+0Dh]
 13744 00001F05 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13745                                  	;mov	[si+16h],ax
 13746 00001F09 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13747                                  	;mov	ax,[es:di+0Fh]
 13748 00001F0C 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13749                                  	;mov	[si+14h],ax
 13750 00001F10 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13751                                  	;mov	ax,[es:di+11h]
 13752 00001F13 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13753                                  	;mov	[si+10h],ax
 13754 00001F17 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13755                                  	;mov	ax,[es:di+13h]
 13756 00001F1A 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13757                                  	;mov	[si+12h],ax
 13758 00001F1E 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13759 00001F21 31C0                    	XOR	AX,AX			; convenient zero
 13760                                  	;mov	[si+0Ch],ax
 13761 00001F23 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13762                                  
 13763                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13764                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13765                                  
 13766                                  ;hkn; 	SS override
 13767 00001F26 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13768                                  	;mov	ah,[es:di+4]
 13769 00001F2B 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13770                                  OpenScan:
 13771                                  	;cmp	al,[si+18h]
 13772 00001F2F 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13773 00001F32 7407                    	JZ	short SkipCheck
 13774 00001F34 50                      	push	ax			; preserve count
 13775 00001F35 E888FC                  	call	CheckFCB		; do they match
 13776 00001F38 58                      	pop	ax			; get count back
 13777 00001F39 7309                    	JNC	short OpenFound		; found a match!
 13778                                  SkipCheck:
 13779 00001F3B FEC0                    	INC	AL			; advance to next FCB
 13780 00001F3D 38E0                    	CMP	AL,AH			; table full?
 13781 00001F3F 75EE                    	JNZ	short OpenScan		; no, go for more
 13782                                  OpenDone:
 13783 00001F41 30C0                    	xor	al,al			; return success
 13784 00001F43 C3                      	retn
 13785                                  
 13786                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13787                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13788                                  ; Consider:
 13789                                  ;
 13790                                  ;   open (foo)	delete (foo) open (bar)
 13791                                  ;
 13792                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13793                                  ; foo even though foo is no longer needed; this is due to the server closing
 13794                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13795                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13796                                  ; bar and subsequent I/O would be lost to the redirector.
 13797                                  ;
 13798                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13799                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13800                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13801                                  ; around. This will allow us to access the same file through multiple network
 13802                                  ; connections and NOT prematurely terminate when the ref count on one
 13803                                  ; connection goes to zero.
 13804                                  
 13805                                  OpenFound:
 13806                                  	;mov	[si+18h],al
 13807 00001F44 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13808 00001F47 26FF05                  	inc	word [es:di]
 13809                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13810                                  					; remember this new invocation
 13811 00001F4A 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13812                                  	;mov	[es:di+15h],ax
 13813 00001F4E 26894515                	MOV	[ES:DI+sf_LRU],AX
 13814                                  ;
 13815                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13816                                  ; blast it to prevent other reuse.
 13817                                  ;
 13818 00001F52 16                      	push	ss
 13819 00001F53 1F                      	pop	ds
 13820 00001F54 C43E[9E05]              	LES	DI,[THISSFT]
 13821 00001F58 26FF0D                  	dec	word [es:di]
 13822                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13823                                  					; free the newly allocated SFT
 13824 00001F5B E81355                  	call	ShareEnd
 13825 00001F5E B043                    	MOV	AL,'C'	 ; 43h
 13826 00001F60 E847FC                  	call	BlastSFT
 13827 00001F63 EBDC                    	JMP	short OpenDone
 13828                                  
 13829                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13830                                  ;----------------------------------------------------------------------------
 13831                                  ;
 13832                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13833                                  ;	FCB for us and asked to have the rest filled in.
 13834                                  ;
 13835                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13836                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13837                                  ;		FCB has the following fields filled in:
 13838                                  ;		    Time/Date Extent/NR Size
 13839                                  ;----------------------------------------------------------------------------
 13840                                  
 13841                                  _$FCB_CREATE:		; System call 22
 13842                                  
 13843                                  ;hkn; DOS_Create is in DOSCODE
 13844 00001F65 B9[BA2A]                	MOV	CX,DOS_CREATE		; routine to call
 13845 00001F68 31C0                    	XOR	AX,AX			; attributes to create
 13846 00001F6A E85AFD                  	call	GetExtended		; get extended FCB
 13847 00001F6D 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13848 00001F6F 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13849                                  DoAccessJ:
 13850 00001F72 E912FF                  	JMP	DoAccess		; do dirty work
 13851                                  
 13852                                  ; 22/07/2018 - Retro DOS v3.0
 13853                                  
 13854                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13855                                  ;----------------------------------------------------------------------------
 13856                                  ;
 13857                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13858                                  ;	and write a number of blocks from it.
 13859                                  ;
 13860                                  ;   Inputs:	DS:DX point to an FCB
 13861                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13862                                  ;		AL <> 0 Not enough room on disk for the output
 13863                                  ;
 13864                                  ;----------------------------------------------------------------------------
 13865                                  
 13866                                  _$FCB_RANDOM_WRITE_BLOCK:
 13867                                  	;mov	AL,0Ah	
 13868 00001F75 B00A                    	MOV	AL,RANDOM+BLOCK
 13869 00001F77 E968FD                  	JMP	FCBIO
 13870                                  
 13871                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13872                                  ;----------------------------------------------------------------------------
 13873                                  ;
 13874                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13875                                  ;	and read a number of blocks from it.
 13876                                  ;
 13877                                  ;   Inputs:	DS:DX point to an FCB
 13878                                  ;   Outputs:	AL = error codes defined above
 13879                                  ;
 13880                                  ;----------------------------------------------------------------------------
 13881                                  
 13882                                  _$FCB_RANDOM_READ_BLOCK:
 13883                                  	;mov	AL,0Eh	
 13884 00001F7A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13885 00001F7C E963FD                  	JMP	FCBIO
 13886                                  
 13887                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13888                                  ;----------------------------------------------------------------------------
 13889                                  ;
 13890                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13891                                  ;	memory
 13892                                  ;
 13893                                  ;   Inputs:	DS:DX point to an FCB
 13894                                  ;   Outputs:	AL = error codes defined above
 13895                                  ;
 13896                                  ;----------------------------------------------------------------------------
 13897                                  
 13898                                  _$FCB_SEQ_READ:
 13899                                  	;mov	AL,4	
 13900 00001F7F B004                    	MOV	AL,FCBREAD
 13901 00001F81 E95EFD                  	JMP	FCBIO
 13902                                  
 13903                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13904                                  ;----------------------------------------------------------------------------
 13905                                  ;
 13906                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13907                                  ;	file
 13908                                  ;
 13909                                  ;   Inputs:	DS:DX point to an FCB
 13910                                  ;   Outputs:	AL = error codes defined above
 13911                                  ;
 13912                                  ;----------------------------------------------------------------------------
 13913                                  
 13914                                  _$FCB_SEQ_WRITE:
 13915 00001F84 B000                    	MOV	AL,0
 13916 00001F86 E959FD                  	jmp	FCBIO
 13917                                  
 13918                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13919                                  ;----------------------------------------------------------------------------
 13920                                  ;
 13921                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13922                                  ;	record from it.
 13923                                  ;
 13924                                  ;   Inputs:	DS:DX point to an FCB
 13925                                  ;   Outputs:	AL = error codes defined above
 13926                                  ;
 13927                                  ;----------------------------------------------------------------------------
 13928                                  
 13929                                  _$FCB_RANDOM_READ:
 13930                                  	;mov	AL,6	
 13931 00001F89 B006                    	MOV	AL,RANDOM+FCBREAD
 13932 00001F8B E954FD                  	jmp	FCBIO			; single block
 13933                                  
 13934                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13935                                  ;----------------------------------------------------------------------------
 13936                                  ;
 13937                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13938                                  ;	a record to it.
 13939                                  ;
 13940                                  ;   Inputs:	DS:DX point to an FCB
 13941                                  ;   Outputs:	AL = error codes defined above
 13942                                  ;
 13943                                  ;----------------------------------------------------------------------------
 13944                                  
 13945                                  _$FCB_RANDOM_WRITE:
 13946                                  	;mov	AL,2	
 13947 00001F8E B002                    	MOV	AL,RANDOM
 13948 00001F90 E94FFD                  	jmp	FCBIO
 13949                                  
 13950                                  ;============================================================================
 13951                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13952                                  ;============================================================================
 13953                                  ; 22/07/2018 - Retro DOS v3.0
 13954                                  ; 17/05/2019 - Retro DOS v4.0
 13955                                  
 13956                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13957                                  
 13958                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13959                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13960                                  
 13961                                  ;**	Search.asm
 13962                                  ;----------------------------------------------------------------------------
 13963                                  ;	Directory search system calls.
 13964                                  ;	These will be passed direct text of the pathname from the user. 
 13965                                  ;	They will need to be passed through the macro expander prior to
 13966                                  ;	being sent through the low-level stuff. 
 13967                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13968                                  ;
 13969                                  ;	$Dir_Search_First	  written
 13970                                  ;	$Dir_Search_Next	  written
 13971                                  ;	$Find_First	  written
 13972                                  ;	$Find_Next		  written
 13973                                  ;	PackName		  written
 13974                                  ;
 13975                                  ;	Modification history:
 13976                                  ;
 13977                                  ;	  Created: ARR 4 April 1983
 13978                                  
 13979                                  ;----------------------------------------------------------------------------
 13980                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13981                                  ;
 13982                                  ; Inputs:
 13983                                  ;	DS:DX Points to unopenned FCB
 13984                                  ; Function:
 13985                                  ;	Directory is searched for first matching entry and the directory
 13986                                  ;	entry is loaded at the disk transfer address
 13987                                  ; Returns:
 13988                                  ;	AL = -1 if no entries matched, otherwise 0
 13989                                  ;----------------------------------------------------------------------------
 13990                                  
 13991                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 13992                                  
 13993                                  _$DIR_SEARCH_FIRST:
 13994 00001F93 368916[A605]            	MOV	[SS:THISFCB],DX
 13995 00001F98 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 13996 00001F9D 89D6                    	MOV	SI,DX
 13997 00001F9F 803CFF                  	CMP	BYTE [SI],0FFH
 13998 00001FA2 7503                    	JNZ	short NORMFCB4
 13999 00001FA4 83C607                  	ADD	SI,7			; Point to drive select byte
 14000                                  NORMFCB4:
 14001 00001FA7 FF34                    	push	word [SI]		; Save original drive byte for later
 14002                                  
 14003 00001FA9 16                      	push	ss
 14004 00001FAA 07                      	pop	es			; get es to address DOSGroup
 14005                                  
 14006 00001FAB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14007 00001FAE E85B4C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14008 00001FB1 7304                    	JNC	short SearchIt		; no error, go and look
 14009 00001FB3 5B                      	pop	bx			; Clean stack
 14010                                  
 14011                                  ; Error code is in AX
 14012                                  
 14013                                  	; 09/11/2022
 14014                                  dcf_errj:
 14015 00001FB4 E9B1E6                  	jmp	FCB_RET_ERR		; error
 14016                                  
 14017                                  SearchIt:
 14018 00001FB7 16                      	push	ss
 14019 00001FB8 1F                      	pop	ds			; get ready for search
 14020 00001FB9 FF36[2C03]              	push	word [DMAADD]
 14021 00001FBD FF36[2E03]              	push	word [DMAADD+2]
 14022 00001FC1 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14023 00001FC7 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14024                                  	; MSDOS 3.3
 14025                                  	;call	DOS_SEARCH_FIRST
 14026                                  	; MSDOS 6.0
 14027 00001FCB E88501                  	call	GET_FAST_SEARCH		; search
 14028 00001FCE 8F06[2E03]              	pop	word [DMAADD+2]
 14029 00001FD2 8F06[2C03]              	pop	word [DMAADD]
 14030 00001FD6 7303                    	JNC	short SearchSet		; no error, transfer info
 14031 00001FD8 5B                      	pop	bx			; Clean stack
 14032                                  
 14033                                  ; Error code is in AX
 14034                                  
 14035                                  	; 09/11/2022
 14036                                  	;jmp	FCB_RET_ERR
 14037 00001FD9 EBD9                    	jmp	short dcf_errj
 14038                                  
 14039                                  ; The search was successful (or the search-next). We store the information
 14040                                  ; into the user's FCB for continuation.
 14041                                  
 14042                                  SearchSet:
 14043 00001FDB BE[BE04]                	MOV	SI,SEARCHBUF
 14044 00001FDE C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14045 00001FE2 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14046 00001FE7 7403                    	JZ	short NORMFCB1
 14047 00001FE9 83C707                  	ADD	DI,7			; Point past the extension
 14048                                  NORMFCB1:
 14049 00001FEC 5B                      	pop	bx			; Get original drive byte
 14050 00001FED 08DB                    	OR	BL,BL
 14051 00001FEF 7506                    	JNZ	short SearchDrv
 14052 00001FF1 8A1E[3603]              	MOV	BL,[CURDRV]
 14053 00001FF5 FEC3                    	INC	BL
 14054                                  SearchDrv:
 14055 00001FF7 AC                      	LODSB				; Get correct search contin drive byte
 14056 00001FF8 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14057 00001FFA 47                      	INC	DI
 14058                                  	;STOSB				; Store the correct "user" drive byte
 14059                                  					;  at the start of the search info
 14060 00001FFB B90A00                  	MOV	CX,20/2
 14061 00001FFE F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14062 00002000 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14063                                  					;   byte to AL
 14064 00002002 AA                      	STOSB				; Search contin drive byte at end of
 14065                                  					;   contin info
 14066 00002003 C43E[2C03]              	LES	DI,[DMAADD]
 14067 00002007 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14068 0000200C 740D                    	JZ	short NORMFCB2
 14069 0000200E B0FF                    	MOV	AL,0FFh
 14070 00002010 AA                      	STOSB
 14071 00002011 FEC0                    	INC	AL
 14072                                  	;MOV	CX,5
 14073                                  	; 17/12/2022
 14074 00002013 B105                    	mov	cl,5
 14075 00002015 F3AA                    	REP	STOSB
 14076 00002017 A0[6D05]                	MOV	AL,[SATTRIB]
 14077 0000201A AA                      	STOSB
 14078                                  NORMFCB2:
 14079 0000201B 88D8                    	MOV	AL,BL			; User Drive byte
 14080 0000201D AA                      	STOSB
 14081                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14082                                  	; 17/12/2022
 14083 0000201E B110                    	mov	cl,16
 14084 00002020 F3A5                    	REP	MOVSW
 14085 00002022 E940E6                  	jmp	FCB_RET_OK
 14086                                  
 14087                                  ;----------------------------------------------------------------------------
 14088                                  ;
 14089                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14090                                  ;
 14091                                  ; Inputs:
 14092                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14093                                  ; Function:
 14094                                  ;	Directory is searched for the next matching entry and the directory
 14095                                  ;	entry is loaded at the disk transfer address
 14096                                  ; Returns:
 14097                                  ;	AL = -1 if no entries matched, otherwise 0
 14098                                  ;----------------------------------------------------------------------------
 14099                                  
 14100                                  _$DIR_SEARCH_NEXT:
 14101 00002025 368916[A605]            	MOV	[SS:THISFCB],DX
 14102 0000202A 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14103 0000202F 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14104 00002035 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14105                                  
 14106 0000203B 16                      	push	ss
 14107 0000203C 07                      	pop	es
 14108                                  
 14109 0000203D BF[BE04]                	MOV	DI,SEARCHBUF
 14110                                  
 14111 00002040 89D6                    	MOV	SI,DX
 14112 00002042 803CFF                  	CMP	BYTE [SI],0FFh
 14113 00002045 750D                    	JNZ	short NORMFCB6
 14114 00002047 83C606                  	ADD	SI,6
 14115 0000204A AC                      	LODSB
 14116                                  
 14117 0000204B 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14118 0000204F 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14119                                  NORMFCB6:
 14120 00002054 AC                      	LODSB				; Get original user drive byte
 14121 00002055 50                      	push	ax			; Put it on stack
 14122 00002056 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14123 00002059 AA                      	STOSB				; Put in correct place
 14124 0000205A B90A00                  	MOV	CX,20/2
 14125 0000205D F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14126                                  
 14127 0000205F 16                      	push	ss
 14128 00002060 1F                      	pop	ds
 14129                                  
 14130 00002061 FF36[2C03]              	push	word [DMAADD]
 14131 00002065 FF36[2E03]              	push	word [DMAADD+2]
 14132 00002069 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14133 0000206F 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14134 00002073 E8250E                  	call	DOS_SEARCH_NEXT 	; Find it
 14135 00002076 8F06[2E03]              	pop	word [DMAADD+2]
 14136 0000207A 8F06[2C03]              	pop	word [DMAADD]
 14137 0000207E 7203                    	JC	short SearchNoMore
 14138 00002080 E958FF                  	JMP	SearchSet		; Ok set return
 14139                                  
 14140                                  SearchNoMore:
 14141 00002083 C43E[A605]              	LES	DI,[THISFCB]
 14142 00002087 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14143 0000208C 7403                    	JZ	short NORMFCB8
 14144 0000208E 83C707                  	ADD	DI,7			; Point past the extension
 14145                                  NORMFCB8:
 14146 00002091 5B                      	pop	bx			; Get original drive byte
 14147 00002092 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14148                                  					;  at the right spot
 14149                                  ; error code is in AX
 14150                                  
 14151 00002095 E9D0E5                  	jmp	FCB_RET_ERR
 14152                                  
 14153                                  ; 17/05/2019 - Retro DOS v4.0
 14154                                  
 14155                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14156                                  
 14157                                  ;---------------------------------------------------------------------------
 14158                                  ;
 14159                                  ;   Procedure Name : $FIND_FIRST
 14160                                  ; 
 14161                                  ;   Assembler usage:
 14162                                  ;	    MOV AH, FindFirst
 14163                                  ;	    LDS DX, name
 14164                                  ;	    MOV CX, attr
 14165                                  ;	    INT 21h
 14166                                  ;	; DMA address has datablock
 14167                                  ;
 14168                                  ;   Error Returns:
 14169                                  ;	    AX = error_path_not_found
 14170                                  ;	       = error_no_more_files
 14171                                  ;---------------------------------------------------------------------------
 14172                                  
 14173                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14174                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14175                                  
 14176                                  _$FIND_FIRST:
 14177 00002098 89D6                    	MOV	SI,DX			; get name in appropriate place
 14178 0000209A 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14179                                  
 14180 0000209F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14181                                  
 14182 000020A2 E8CD4B                  	call	TransPathSet		; convert the path
 14183 000020A5 7305                    	JNC	short Find_it 		; no error, go and look
 14184                                  FindError:
 14185                                  	;mov	al,3
 14186 000020A7 B003                    	mov	al, error_path_not_found ; error and map into one.
 14187                                  	; 09/11/2022
 14188                                  FF_errj:
 14189 000020A9 E9A6E5                  	jmp	SYS_RET_ERR
 14190                                  Find_it:
 14191 000020AC 16                      	push	ss
 14192 000020AD 1F                      	pop	ds
 14193                                  
 14194 000020AE FF36[2C03]              	push	word [DMAADD]
 14195 000020B2 FF36[2E03]              	push	word [DMAADD+2]
 14196 000020B6 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14197 000020BC 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14198                                  	; MSDOS 3.3
 14199                                  	;call	DOS_SEARCH_FIRST
 14200                                  	; MSDOS 6.0
 14201 000020C0 E89000                  	call	GET_FAST_SEARCH 	; search
 14202 000020C3 8F06[2E03]              	pop	word [DMAADD+2]
 14203 000020C7 8F06[2C03]              	pop	word [DMAADD]
 14204                                  	
 14205                                  	; 16/12/2022
 14206                                  	;JNC	short FindSet 		; no error, transfer info
 14207 000020CB 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14208                                  	;
 14209                                  	;jmp	SYS_RET_ERR
 14210                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14211                                  ;FFF_errj:
 14212                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14213                                  
 14214                                  FindSet:
 14215 000020CD BE[BE04]                	MOV	SI,SEARCHBUF
 14216 000020D0 C43E[2C03]              	LES	DI,[DMAADD]
 14217 000020D4 B91500                  	MOV	CX,21
 14218 000020D7 F3A4                    	REP	MOVSB
 14219 000020D9 56                      	PUSH	SI			; Save pointer to start of entry
 14220                                  	;mov	al,[si+0Bh]
 14221 000020DA 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14222 000020DD AA                      	STOSB
 14223                                  	;add	si,16h ; 22
 14224 000020DE 83C616                  	ADD	SI,dir_entry.dir_time
 14225 000020E1 A5                      	MOVSW				; dir_time
 14226 000020E2 A5                      	MOVSW				; dir_date
 14227 000020E3 46                      	INC	SI
 14228 000020E4 46                      	INC	SI			; Skip dir_first
 14229 000020E5 A5                      	MOVSW				; dir_size (2 words)
 14230 000020E6 A5                      	MOVSW
 14231 000020E7 5E                      	POP	SI			; Point back to dir_name
 14232 000020E8 E83500                   	CALL	PackName
 14233 000020EB E95BE5                  	jmp	SYS_RET_OK		; bye with no errors
 14234                                  
 14235                                  ;---------------------------------------------------------------------------
 14236                                  ;
 14237                                  ;   Procedure Name : $FIND_NEXT
 14238                                  ;
 14239                                  ;   Assembler usage:
 14240                                  ;	; dma points at area returned by find_first
 14241                                  ;	    MOV AH, findnext
 14242                                  ;	    INT 21h
 14243                                  ;	; next entry is at dma
 14244                                  ;
 14245                                  ;   Error Returns:
 14246                                  ;	    AX = error_no_more_files
 14247                                  ;---------------------------------------------------------------------------
 14248                                  
 14249                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14250                                  _$FIND_NEXT:
 14251 000020EE 16                      	push	ss
 14252 000020EF 07                      	pop	es
 14253                                  
 14254 000020F0 BF[BE04]                	MOV	DI,SEARCHBUF
 14255                                  
 14256 000020F3 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14257                                  
 14258 000020F8 B91500                  	MOV	CX,21
 14259 000020FB F3A4                    	REP	MOVSB			; Put the search continuation info
 14260                                  					;  in the right place
 14261 000020FD 16                      	push	ss
 14262 000020FE 1F                      	pop	ds			; get ready for search
 14263                                  	
 14264 000020FF FF36[2C03]              	push	word [DMAADD]
 14265 00002103 FF36[2E03]              	push	word [DMAADD+2]
 14266 00002107 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14267 0000210D 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14268 00002111 E8870D                  	call	DOS_SEARCH_NEXT 	; Find it
 14269 00002114 8F06[2E03]              	pop	word [DMAADD+2]
 14270 00002118 8F06[2C03]              	pop	word [DMAADD]
 14271 0000211C 73AF                    	JNC	short FindSet 		; No error, set info
 14272                                  	;jmp	SYS_RET_ERR
 14273                                  	; 16/12/2022
 14274 0000211E EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14275                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14276                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14277                                  
 14278                                  ;---------------------------------------------------------------------------
 14279                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14280                                  ;
 14281                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14282                                  ;	the ASCIZ format.
 14283                                  ;
 14284                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14285                                  ;		(ES:DI) = destination area (13 bytes)
 14286                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14287                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14288                                  ;---------------------------------------------------------------------------
 14289                                  
 14290                                  PackName:
 14291                                  ;	Move over 8 characters to cover the name component, then trim it's
 14292                                  ;	trailing blanks.
 14293                                  
 14294 00002120 B90800                  	MOV	CX,8			; Pack the name
 14295 00002123 F3A4                    	REP	MOVSB			; Move all of it
 14296                                  main_kill_tail:
 14297 00002125 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14298 0000212A 7507                    	JNZ	short find_check_dot
 14299 0000212C 4F                      	DEC	DI			; Back up over trailing space
 14300 0000212D 41                      	INC	CX
 14301 0000212E 83F908                  	CMP	CX,8
 14302 00002131 72F2                    	JB	short main_kill_tail
 14303                                  find_check_dot:
 14304                                  	;CMP	WORD [SI],(" " << 8) | " "
 14305 00002133 813C2020                	cmp     word [si],2020h 
 14306 00002137 7506                    	JNZ	short got_ext 		; Some chars in extension
 14307 00002139 807C0220                	CMP	BYTE [SI+2]," "
 14308 0000213D 7410                    	JZ	short find_done		; No extension
 14309                                  got_ext:
 14310 0000213F B02E                    	MOV	AL,"."	; 2Eh
 14311 00002141 AA                      	STOSB
 14312                                  	;MOV	CX,3
 14313                                  	; 18/12/2022
 14314                                  	;mov	cl,3
 14315                                  	;REP	MOVSB
 14316 00002142 A4                      	movsb
 14317 00002143 A4                      	movsb
 14318 00002144 A4                      	movsb
 14319                                  ext_kill_tail:
 14320 00002145 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14321 0000214A 7503                    	JNZ	short find_done
 14322 0000214C 4F                      	DEC	DI			; Back up over trailing space
 14323 0000214D EBF6                    	JMP	short ext_kill_tail
 14324                                  find_done:
 14325 0000214F 31C0                    	XOR	AX,AX
 14326 00002151 AA                      	STOSB				; NUL terminate
 14327 00002152 C3                      	retn
 14328                                  
 14329                                  ;---------------------------------------------------------------------------
 14330                                  
 14331                                  	; 17/05/2019 - Retro DOS v4.0
 14332                                  GET_FAST_SEARCH:
 14333                                  	; 22/07/2018
 14334                                  	; MSDOS 6.0
 14335                                  	; 17/12/2022
 14336 00002153 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14337                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14338                                  					;FO.trigger fastopen ;AN000;
 14339                                  	;call	DOS_SEARCH_FIRST
 14340                                  	;retn
 14341                                  	; 17/12/2022
 14342 00002159 E9530C                  	jmp	DOS_SEARCH_FIRST
 14343                                  
 14344                                  ;============================================================================
 14345                                  ; PATH.ASM, MSDOS 6.0, 1991
 14346                                  ;============================================================================
 14347                                  ; 06/08/2018 - Retro DOS v3.0
 14348                                  ; 17/05/2019 - Retro DOS v4.0
 14349                                  
 14350                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14351                                  
 14352                                  ;**	Directory related system calls. These will be passed direct text of the
 14353                                  ;	pathname from the user. They will need to be passed through the macro
 14354                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14355                                  ;	defined in DISPATCH. The system calls are:
 14356                                  ;
 14357                                  ;	$CURRENT_DIR  Written
 14358                                  ;	$RMDIR	  Written
 14359                                  ;	$CHDIR	  Written
 14360                                  ;	$MKDIR	  Written
 14361                                  ;
 14362                                  ;
 14363                                  ;	Modification history:
 14364                                  ;
 14365                                  ;	    Created: ARR 4 April 1983
 14366                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14367                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14368                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14369                                  ;				    current directory.
 14370                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14371                                  
 14372                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14373                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14374                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14375                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14376                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14377                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14378                                  ;	I_Need	cMeta,BYTE
 14379                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14380                                  
 14381                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14382                                  ;----------------------------------------------------------------------------
 14383                                  ;
 14384                                  ;   Procedure Name : $CURRENT_DIR
 14385                                  ;
 14386                                  ;   Assembler usage:
 14387                                  ;		LDS	SI,area
 14388                                  ;		MOV	DL,drive
 14389                                  ;		INT	21h
 14390                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14391                                  ;	    ; current directory.
 14392                                  ;   Error returns:
 14393                                  ;	    AX = error_invalid_drive
 14394                                  ;
 14395                                  ;----------------------------------------------------------------------------
 14396                                  
 14397                                  _$CURRENT_DIR:
 14398                                  	;06/08/2018 - Retro DOS v3.0
 14399                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14400 0000215C E8F9F1                  	call	ECritDisk
 14401 0000215F 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14402 00002161 E8134A                  	call	GetVisDrv		; grab it
 14403 00002164 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14404                                  CurdirErr:
 14405 00002166 E80AF2                  	call	LCritDisk
 14406                                  
 14407                                  	; MSDOS 3.3
 14408                                  	;mov	al,0Fh
 14409                                  	
 14410                                  	; MSDOS 6.0
 14411 00002169 1E                      	push	ds
 14412 0000216A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14413 0000216F A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14414 00002172 1F                      	pop	ds
 14415                                  
 14416                                  curdir_errj:
 14417 00002173 E9DCE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14418                                  
 14419                                  CurrentValidate:
 14420 00002176 1E                      	push	ds			; save destination
 14421 00002177 56                      	push	si
 14422                                  	
 14423                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14424                                  	
 14425                                  	; MSDOS 6.0
 14426 00002178 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14427 0000217D C536[A205]              	lds     si,[THISCDS]
 14428                                  
 14429                                  ; 16/12/2022
 14430                                  %if 0
 14431                                  	; 09/11/2022 (following test instruction is nonsense!)
 14432                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14433                                  
 14434                                  	;test	word [si+43h],8000h
 14435                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14436                                  	;jnz	short $+2  ; 09/11/2022	
 14437                                  	jnz	short DoCheck
 14438                                  %endif
 14439                                  
 14440                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14441                                  ; media check.
 14442                                  ;	CMP	word [SI+curdir.ID],0
 14443                                  ;	JZ	short GetDst
 14444                                  DoCheck:
 14445                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14446                                  
 14447                                  	; MSDOS 6.0
 14448 00002181 1E                      	push	ds
 14449 00002182 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14450 00002187 C606[4C03]00            	mov	byte [NoSetDir],0
 14451 0000218C 1F                      	pop	ds
 14452                                  
 14453 0000218D BF[BE03]                	MOV	DI,OPENBUF
 14454 00002190 E88221                  	call	ValidateCDS		; output is ES:DI -> CDS
 14455                                  
 14456 00002193 06                      	push	es	 		; swap source and destination
 14457 00002194 57                      	push	di
 14458 00002195 5E                      	pop	si
 14459 00002196 1F                      	pop	ds
 14460                                  GetDst:
 14461 00002197 5F                      	pop	di
 14462 00002198 07                      	pop	es			; get real destination
 14463 00002199 72CB                    	JC	short CurdirErr
 14464                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14465                                  	;
 14466                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14467                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14468                                  	; 16/12/2022
 14469                                  	;add	si,0  ; add si,curdir.text
 14470                                  	;
 14471                                  	;add	si,[si+4Fh] ; 17/05/2019
 14472 0000219B 03744F                  	ADD	SI,[SI+curdir.end]
 14473 0000219E 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14474 000021A1 7501                    	JNZ	short CurrentCopy
 14475 000021A3 46                      	INC	SI
 14476                                  CurrentCopy:
 14477                                  ;	call	FStrCpy
 14478                                  ;; 10/29/86 E5 char
 14479 000021A4 50                      	PUSH	AX
 14480 000021A5 AC                      	LODSB				; get char
 14481 000021A6 08C0                    	OR	AL,AL
 14482 000021A8 7413                    	JZ	short FOK
 14483 000021AA 3C05                    	CMP	AL,05H
 14484 000021AC 740D                    	JZ	short FCHANGE
 14485 000021AE EB01                    	JMP	short FFF
 14486                                  FCPYNEXT:
 14487 000021B0 AC                      	LODSB				; get char
 14488                                  FFF:
 14489 000021B1 3C5C                    	CMP	AL,'\'			; beginning of directory
 14490 000021B3 7508                    	JNZ	short FOK		; no
 14491 000021B5 AA                      	STOSB				; put into user's buffer
 14492 000021B6 AC                      	LODSB				; 1st char of dir is 05?
 14493 000021B7 3C05                    	CMP	AL,05H
 14494 000021B9 7502                    	JNZ	short FOK		; no
 14495                                  FCHANGE:
 14496 000021BB B0E5                    	MOV	AL,0E5H			; make it E5
 14497                                  FOK:
 14498 000021BD AA                      	STOSB				; put into user's buffer
 14499 000021BE 08C0                    	OR	AL,AL			; final char
 14500 000021C0 75EE                    	JNZ	short FCPYNEXT		; no
 14501 000021C2 58                      	POP	AX
 14502                                  
 14503                                  ;; 10/29/86 E5 char
 14504 000021C3 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14505 000021C5 E8ABF1                  	call	LCritDisk
 14506 000021C8 E97EE4                  	jmp	SYS_RET_OK		; no more, bye!
 14507                                  
 14508                                  ; 17/05/2019 - Retro DOS v4.0
 14509                                  
 14510                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14511                                  
 14512                                  ;BREAK <$RmDir -- Remove a directory>
 14513                                  ;----------------------------------------------------------------------------
 14514                                  ;
 14515                                  ; Procedure Name : $RmDir
 14516                                  ;
 14517                                  ; Inputs:
 14518                                  ;	DS:DX Points to asciz name
 14519                                  ; Function:
 14520                                  ;	Delete directory if empty
 14521                                  ; Returns:
 14522                                  ;	STD XENIX Return
 14523                                  ;	AX = error_path_not_found If path bad
 14524                                  ;	AX = error_access_denied If
 14525                                  ;		Directory not empty
 14526                                  ;		Path not directory
 14527                                  ;		Root directory specified
 14528                                  ;		Directory malformed (. and .. not first two entries)
 14529                                  ;		User tries to delete a current directory
 14530                                  ;	AX = error_current_directory
 14531                                  ;
 14532                                  ;----------------------------------------------------------------------------
 14533                                  
 14534                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14535                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14536                                  
 14537                                  _$RMDIR:
 14538 000021CB 52                      	push	dx			; Save ptr to name
 14539 000021CC 1E                      	push	ds
 14540 000021CD 89D6                    	mov	si,dx			; Load ptr into si
 14541 000021CF BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14542 000021D2 57                      	push	di
 14543 000021D3 E8A44A                  	call	TransPathNoSet		; Translate the name
 14544 000021D6 5F                      	pop	di			; di = ptr to buf for trans name
 14545 000021D7 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14546 000021D9 1F                      	pop	ds
 14547 000021DA 5A                      	pop	dx			; Restore the name
 14548                                  	;mov	al,3
 14549 000021DB B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14550                                  	; 16/12/2022
 14551                                  rmdir_errj: ; 10/08/2018
 14552                                  chdir_errj:
 14553 000021DD EB94                    	jmp	short curdir_errj
 14554                                  	;jmp	SYS_RET_ERR
 14555                                  rmlset:
 14556 000021DF 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14557 000021E5 7512                    	Jnz	short rmerr		;	return (-1);
 14558 000021E7 16                      	push	ss
 14559 000021E8 07                      	pop	es
 14560 000021E9 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14561                                  rmloop: 
 14562 000021EB E8FA49                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14563 000021EE 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14564 000021F0 E806F0                  	call	StrCmp			; Are the 2 paths the same?
 14565 000021F3 7404                    	jz	short rmerr		; Yes, report error.
 14566 000021F5 FEC0                    	inc	al			; No, inc al to next drive number
 14567 000021F7 EBF2                    	jmp	short rmloop		; Go check next drive.
 14568                                  rmerr:
 14569 000021F9 1F                      	pop	ds
 14570 000021FA 5A                      	pop	dx			; Restore the name
 14571                                  	;mov	al,10h
 14572 000021FB B010                    	mov	al,error_current_directory ; error
 14573                                  	; 16/12/2022
 14574                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14575                                  ;chdir_errj:
 14576 000021FD EBDE                    	jmp	short rmdir_errj
 14577                                  rmcont:
 14578 000021FF 1F                      	pop	ds
 14579 00002200 5A                      	pop	dx			; Restore the name
 14580 00002201 BE[8532]                	MOV	SI,DOS_RMDIR
 14581 00002204 EB7C                    	JMP	DoDirCall
 14582                                  
 14583                                  ; 17/05/2019 - Retro DOS v4.0
 14584                                  
 14585                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14586                                  
 14587                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14588                                  ;----------------------------------------------------------------------------
 14589                                  ;
 14590                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14591                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14592                                  ; several cases to consider:
 14593                                  ;
 14594                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14595                                  ;	it into a WFP.	We verify the existance of this directory and then
 14596                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14597                                  ;	directory cluster.
 14598                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14599                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14600                                  ;	WFP back into the CDS.
 14601                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14602                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14603                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14604                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14605                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14606                                  ;	to process the path but to return the logical CDS and the logical
 14607                                  ;	path.  We then copy the logical path into the logical CDS.
 14608                                  ;
 14609                                  ; Inputs:
 14610                                  ;	DS:DX Points to asciz name
 14611                                  ; Returns:
 14612                                  ;	STD XENIX Return
 14613                                  ;	AX = chdir_path_not_found if error
 14614                                  ;
 14615                                  ;----------------------------------------------------------------------------
 14616                                  
 14617                                  _$CHDIR:
 14618 00002206 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14619 00002209 89D6                    	MOV	SI,DX			; get source
 14620 0000220B E8604A                  	call	TransPath		; go munge the path and get real CDS
 14621 0000220E 7304                    	JNC	short ChDirCrack	; no errors, try path
 14622                                  ChDirErrP:
 14623                                  	;mov	al,3
 14624 00002210 B003                    	MOV	AL,error_path_not_found
 14625                                  ChDirErr:
 14626                                  	;jmp	SYS_RET_ERR 	; oops!
 14627                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14628 00002212 EBC9                    	jmp	short chdir_errj
 14629                                  
 14630                                  ChDirCrack:
 14631 00002214 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14632 00002219 75F5                    	JNZ	short ChDirErrP
 14633                                  
 14634                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14635                                  ; found.
 14636                                  
 14637 0000221B C43E[A205]              	LES	DI,[THISCDS]
 14638 0000221F 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14639 00002222 74EC                    	JZ	short ChDirErrP		;	error ();
 14640                                  
 14641                                  ; Find out if the directory exists.
 14642                                  
 14643 00002224 E81B10                  	call	DOS_CHDIR
 14644                                  	;Jc	short ChDirErr
 14645                                  	; 16/12/2022
 14646 00002227 72B4                    	jc	short chdir_errj
 14647                                  ;
 14648                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14649                                  ; not network). If one was seen, all we need to do is copy in the text
 14650                                  ;
 14651 00002229 C43E[A205]              	LES	DI,[THISCDS]
 14652                                  	;test	word [es:di+43h],2000h
 14653                                  	; 17/12/2022
 14654 0000222D 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14655                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14656 00002232 7425                    	JZ	short GotCDS
 14657                                  
 14658                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14659                                  
 14660 00002234 06                      	push	es	
 14661 00002235 57                      	push	di
 14662 00002236 51                      	push	cx			; save CDS and cluster...
 14663 00002237 E855E2                  	call	Get_User_Stack		; get original text
 14664                                  	
 14665                                  	;mov	di,[si+6]
 14666 0000223A 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14667                                  	;mov	ds,[si+0Eh]
 14668 0000223D 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14669                                  	
 14670 00002240 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14671 00002243 87F7                    	XCHG	SI,DI
 14672 00002245 30C0                    	XOR	AL,AL			; do no splicing
 14673 00002247 57                      	push	di
 14674 00002248 E82F4A                  	call	TransPathNoSet		; Munge path
 14675 0000224B 5E                      	pop	si
 14676                                  
 14677                                  ; There should NEVER be an error here.
 14678                                  
 14679                                  ;IF FALSE
 14680                                  ;	JNC SKipErr
 14681                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14682                                  ;SkipErr:
 14683                                  ;ENDIF
 14684 0000224C C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14685                                  	;mov	word [es:di+49h],-1
 14686 00002250 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14687                                  					; no valid cluster here...
 14688 00002256 59                      	pop	cx
 14689 00002257 5F                      	pop	di
 14690 00002258 07                      	pop	es
 14691                                  
 14692                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14693                                  
 14694                                  GotCDS:
 14695                                  
 14696                                  ; wfp_start points to the text. See if it is long enough
 14697                                  
 14698                                  	; MSDOS 3.3
 14699                                  	;push	ss
 14700                                  	;pop	ds
 14701                                  	;mov	si,[WFP_START]
 14702                                  	;push	cx
 14703                                  	;call	DStrLen
 14704                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14705                                  	;pop	cx
 14706                                  	;ja	short ChDirErrP
 14707                                  
 14708                                  	; MSDOS 6.0
 14709 00002259 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14710 0000225C 77B2                    	JA	short ChDirErrP
 14711                                  	; MSDOS 3.3 & MSDOS 6.0
 14712                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14713                                  	; 17/12/2022
 14714 0000225E 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14715 00002263 7512                    	JNZ	short SkipRecency
 14716                                  	; MSDOS 6.0
 14717                                  	;test	word [es:di+43h],2000h
 14718                                  	; 17/12/2022
 14719 00002265 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14720                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14721                                  					;PTM. for Join and Subst ;AN000;
 14722 0000226A 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14723 0000226C B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14724                                  setdirclus:
 14725                                  	;mov	[es:di+49h],cx
 14726 0000226F 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14727 00002273 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14728                                  SkipRecency:
 14729 00002277 E8B0EF                  	call	FStrCpy
 14730 0000227A 30C0                    	XOR	AL,AL
 14731                                  mkdir_ok:
 14732 0000227C E9CAE3                  	jmp	SYS_RET_OK
 14733                                  
 14734                                  ; 17/05/2019 - Retro DOS v4.0
 14735                                  
 14736                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14737                                  
 14738                                  ;BREAK <$MkDir - Make a directory entry>
 14739                                  ;---------------------------------------------------------------------------
 14740                                  ;
 14741                                  ; Procedure Name : $MkDir
 14742                                  ; Inputs:
 14743                                  ;	DS:DX Points to asciz name
 14744                                  ; Function:
 14745                                  ;	Make a new directory
 14746                                  ; Returns:
 14747                                  ;	STD XENIX Return
 14748                                  ;	AX = mkdir_path_not_found if path bad
 14749                                  ;	AX = mkdir_access_denied  If
 14750                                  ;		Directory cannot be created
 14751                                  ;		Node already exists
 14752                                  ;		Device name given
 14753                                  ;		Disk or directory(root) full
 14754                                  ;---------------------------------------------------------------------------
 14755                                  
 14756                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14757                                  
 14758                                  _$MKDIR:
 14759 0000227F BE[4431]                	MOV	SI,DOS_MKDIR
 14760                                  DoDirCall:
 14761 00002282 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14762                                  
 14763 00002285 56                      	push	si
 14764 00002286 89D6                    	MOV	SI,DX			; get source
 14765 00002288 E8E349                  	call	TransPath		; go munge the path
 14766 0000228B 5E                      	pop	si
 14767 0000228C 7305                    	JNC	short MkDirCrack	; no errors, try path
 14768                                  MkErrP:
 14769 0000228E B003                    	MOV	AL,error_path_not_found	; oops!
 14770                                  MkErr:
 14771 00002290 E9BFE3                  	jmp	SYS_RET_ERR
 14772                                  MkDirCrack:
 14773 00002293 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14774 00002299 75F3                    	JNZ	short MkErrP
 14775                                  
 14776                                  	; MSDOS 3.3
 14777                                  	;push	ss
 14778                                  	;pop	ds
 14779                                  	;call	si
 14780                                  	;jb	short MkErr
 14781                                  	;;jmp	short mkdir_ok
 14782                                  	;jmp	SYS_RET_OK
 14783                                  
 14784                                  	; MSDOS 6.0
 14785 0000229B 56                      	PUSH	SI			;PTM.			;AN000;
 14786 0000229C E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14787 0000229F 5E                      	POP	SI			;PTM.			;AN000;
 14788 000022A0 7604                    	JBE	short pathok		;PTM.			;AN000;
 14789                                  	;mov	al,5
 14790 000022A2 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14791                                  	;jmp	SYS_RET_ERR		;PTM.
 14792 000022A4 EBEA                    	jmp	short MkErr
 14793                                  pathok:
 14794 000022A6 FFD6                    	CALL	SI			; go get file
 14795 000022A8 72E6                    	JC	short MkErr		; no errors
 14796                                  	; 16/12/2022
 14797                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14798 000022AA EBD0                    	jmp	short mkdir_ok
 14799                                  	;jmp	SYS_RET_OK
 14800                                  
 14801                                  ;----------------------------------------------------------------------------
 14802                                  ;
 14803                                  ; Procedure Name : Check_PathLen
 14804                                  ;
 14805                                  ; Inputs:
 14806                                  ;	nothing
 14807                                  ; Function:
 14808                                  ;	check if final path length greater than 67
 14809                                  ; Returns:
 14810                                  ;	Above flag set if > 67
 14811                                  ;
 14812                                  ;---------------------------------------------------------------------------
 14813                                  
 14814                                  Check_PathLen:
 14815                                  	; 09/09/2018
 14816                                  	;mov	SI,[WFP_START]
 14817 000022AC 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14818                                  Check_PathLen2:
 14819 000022B1 16                      	push	ss
 14820 000022B2 1F                      	pop	ds
 14821                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14822 000022B3 51                      	push	CX	
 14823 000022B4 E88AEF                  	CALL	DStrLen
 14824 000022B7 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14825 000022BA 59                      	POP	CX
 14826 000022BB C3                      	retn
 14827                                  
 14828                                  ;============================================================================
 14829                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14830                                  ;============================================================================
 14831                                  ; 07/08/2018 - Retro DOS v3.0
 14832                                  ; 17/05/2019 - Retro DOS v4.0
 14833                                  
 14834                                  ;**	IOCTL system call.
 14835                                  ;----------------------------------------------------------------------------
 14836                                  ;	$IOCTL
 14837                                  ;
 14838                                  ;	  Revision history:
 14839                                  ;
 14840                                  ;		Created: ARR 4 April 1983
 14841                                  ;
 14842                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14843                                  ;
 14844                                  ;		A000	version 4.00	Jan. 1988
 14845                                  ;
 14846                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14847                                  ;
 14848                                  
 14849                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14850                                  ;---------------------------------------------------------------------------
 14851                                  ;
 14852                                  ;   Assembler usage:
 14853                                  ;	    MOV     BX, Handle
 14854                                  ;	    MOV     DX, Data
 14855                                  ;
 14856                                  ;	(or LDS     DX,BUF
 14857                                  ;	    MOV     CX,COUNT)
 14858                                  ;
 14859                                  ;	    MOV     AH, Ioctl
 14860                                  ;	    MOV     AL, Request
 14861                                  ;	    INT     21h
 14862                                  ;
 14863                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14864                                  ;	    attribute word in DX, handle in BX:
 14865                                  ;	    DH = high word of device driver attributes
 14866                                  ;	    DL = low byte of sf_flags
 14867                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14868                                  ;	    in BX.
 14869                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14870                                  ;	    into DS:DX.  Return number read in AX.
 14871                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14872                                  ;	    DS:DX.  Return bytes written in AX.
 14873                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14874                                  ;	    into DS:DX.  Return number read in AX.
 14875                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14876                                  ;	    DS:DX.  Return bytes written in AX.
 14877                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14878                                  ;	    device, AL = 0FFh, otherwise 0.
 14879                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14880                                  ;	    device, AL = 0FFh, otherwise 0.
 14881                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14882                                  ;	    removable media, 0 otherwise.
 14883                                  ;	 9  Return the contents of the device attribute word in DX for the
 14884                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14885                                  ;	    network. 8000h is the bit for local use.
 14886                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14887                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14888                                  ;	    the count and CX is the delay.
 14889                                  ;
 14890                                  ;   Error returns:
 14891                                  ;	    AX = error_invalid_handle
 14892                                  ;	       = error_invalid_function
 14893                                  ;	       = error_invalid_data
 14894                                  ;
 14895                                  ;-------------------------------------------------------------------------------
 14896                                  ;
 14897                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14898                                  ;   than the above
 14899                                  ;
 14900                                  ;	There are several basic forms of IOCTL calls:
 14901                                  ;
 14902                                  ;
 14903                                  ;	** Get/Set device information:	**
 14904                                  ;
 14905                                  ;	ENTRY	(AL) = function code
 14906                                  ;		  0 - Get device information
 14907                                  ;		  1 - Set device information
 14908                                  ;		(BX) = file handle
 14909                                  ;		(DX) = info for "Set Device Information"
 14910                                  ;	EXIT	'C' set if error
 14911                                  ;		  (AX) = error code
 14912                                  ;		'C' clear if OK
 14913                                  ;		  (DX) = info for "Get Device Information"
 14914                                  ;	USES	ALL
 14915                                  ;
 14916                                  ;
 14917                                  ;	**  Read/Write Control Data From/To Handle  **
 14918                                  ;
 14919                                  ;	ENTRY	(AL) = function code
 14920                                  ;		  2 - Read device control info
 14921                                  ;		  3 - Write device control info
 14922                                  ;		(BX) = file handle
 14923                                  ;		(CX) = transfer count
 14924                                  ;		(DS:DX) = address for data
 14925                                  ;	EXIT	'C' set if error
 14926                                  ;		  (AX) = error code
 14927                                  ;		'C' clear if OK
 14928                                  ;		  (AX) = count of bytes transfered
 14929                                  ;	USES	ALL
 14930                                  ;
 14931                                  ;
 14932                                  ;	**  Read/Write Control Data From/To Block Device  **
 14933                                  ;
 14934                                  ;	ENTRY	(AL) = function code
 14935                                  ;		  4 - Read device control info
 14936                                  ;		  5 - Write device control info
 14937                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14938                                  ;		(CX) = transfer count
 14939                                  ;		(DS:DX) = address for data
 14940                                  ;	EXIT	'C' set if error
 14941                                  ;		  (AX) = error code
 14942                                  ;		'C' clear if OK
 14943                                  ;		  (AX) = count of bytes transfered
 14944                                  ;	USES	ALL
 14945                                  ;
 14946                                  ;
 14947                                  ;	**  Get Input/Output Status  **
 14948                                  ;
 14949                                  ;	ENTRY	(AL) = function code
 14950                                  ;		  6 - Get Input status
 14951                                  ;		  7 - Get Output Status
 14952                                  ;		(BX) = file handle
 14953                                  ;	EXIT	'C' set if error
 14954                                  ;		  (AX) = error code
 14955                                  ;		'C' clear if OK
 14956                                  ;		  (AL) = 00 if not ready
 14957                                  ;		  (AL) = FF if ready
 14958                                  ;	USES	ALL
 14959                                  ;
 14960                                  ;
 14961                                  ;	**  Get Drive Information  **
 14962                                  ;
 14963                                  ;	ENTRY	(AL) = function code
 14964                                  ;		  8 - Check for removable media
 14965                                  ;		  9 - Get device attributes
 14966                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14967                                  ;	EXIT	'C' set if error
 14968                                  ;		  (AX) = error code
 14969                                  ;		'C' clear if OK
 14970                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14971                                  ;		  (DX) = device attribute word (func. 9)
 14972                                  ;	USES	ALL
 14973                                  ;
 14974                                  ;
 14975                                  ;	**  Get Redirected bit	**
 14976                                  ;
 14977                                  ;	ENTRY	(AL) = function code
 14978                                  ;		  0Ah - Network stuff
 14979                                  ;		(BX) = file handle
 14980                                  ;	EXIT	'C' set if error
 14981                                  ;		  (AX) = error code
 14982                                  ;		'C' clear if OK
 14983                                  ;		  (DX) = SFT flags word, 8000h set if network file
 14984                                  ;	USES	ALL
 14985                                  ;
 14986                                  ;
 14987                                  ;	**  Change sharer retry parameters  **
 14988                                  ;
 14989                                  ;	ENTRY	(AL) = function code
 14990                                  ;		  0Bh - Set retry parameters
 14991                                  ;		(CX) = retry loop count
 14992                                  ;		(DX) = number of retries
 14993                                  ;	EXIT	'C' set if error
 14994                                  ;		  (AX) = error code
 14995                                  ;		'C' clear if OK
 14996                                  ;	USES	ALL
 14997                                  ;
 14998                                  ;
 14999                                  ;   =================================================================
 15000                                  ;
 15001                                  ;	**  New Standard Control  **
 15002                                  ;
 15003                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15004                                  ;	FORMS ARE OBSOLETE.
 15005                                  ;
 15006                                  ;   =================================================================
 15007                                  ;
 15008                                  ;	ENTRY	(AL) = function code
 15009                                  ;		  0Ch - Control Function subcode
 15010                                  ;		(BX) = File Handle
 15011                                  ;		(CH) = Category Indicator
 15012                                  ;		(CL) = Function within category
 15013                                  ;		(DS:DX) = address for data, if any
 15014                                  ;		(SI) = Passed to device as argument, use depends upon function
 15015                                  ;		(DI) = Passed to device as argument, use depends upon function
 15016                                  ;	EXIT	'C' set if error
 15017                                  ;		  (AX) = error code
 15018                                  ;		'C' clear if OK
 15019                                  ;		  (SI) = Return value, meaning is function dependent
 15020                                  ;		  (DI) = Return value, meaning is function dependent
 15021                                  ;		  (DS:DX) = Return address, use is function dependent
 15022                                  ;	USES	ALL
 15023                                  ;
 15024                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15025                                  ;     (See inc\ioctl.inc for more info)
 15026                                  ;
 15027                                  ;	ENTRY	(AL) = function code
 15028                                  ;		  0Dh - Control Function subcode
 15029                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15030                                  ;		(CH) = Category Indicator
 15031                                  ;		(CL) = Function within category
 15032                                  ;		(DS:DX) = address for data, if any
 15033                                  ;		(SI) = Passed to device as argument, use depends upon function
 15034                                  ;		(DI) = Passed to device as argument, use depends upon function
 15035                                  ;
 15036                                  ;	EXIT	'C' set if error
 15037                                  ;		  (AX) = error code
 15038                                  ;		'C' clear if OK
 15039                                  ;		  (DS:DX) = Return address, use is function dependent
 15040                                  ;	USES	ALL
 15041                                  ;
 15042                                  ;---------------------------------------------------------------------------
 15043                                  	
 15044                                  	; 17/05/2019 - Retro DOS v4.0
 15045                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15046                                  
 15047                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15048                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15049                                  
 15050                                  IOCTLJMPTABLE:	;label	word
 15051                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15052 000022BC [FA22]                  	dw	ioctl_getset_data	; 0
 15053 000022BE [FA22]                  	dw	ioctl_getset_data   	; 1
 15054 000022C0 [4A23]                  	dw	ioctl_control_string	; 2
 15055 000022C2 [4A23]                  	dw	ioctl_control_string	; 3
 15056 000022C4 [9E24]                  	dw	ioctl_get_dev		; 4
 15057 000022C6 [9E24]                  	dw	ioctl_get_dev		; 5
 15058 000022C8 [6423]                  	dw	ioctl_status		; 6
 15059 000022CA [6423]                  	dw	ioctl_status		; 7
 15060 000022CC [0524]                  	dw	ioctl_rem_media		; 8
 15061 000022CE [4324]                  	dw	ioctl_drive_attr	; 9
 15062 000022D0 [9024]                  	dw	ioctl_handle_redir	; A
 15063 000022D2 [8023]                  	dw	Set_Retry_Parameters	; B
 15064 000022D4 [8E23]                  	dw	GENERICIOCTLHANDLE	; C
 15065 000022D6 [A523]                  	dw	GENERICIOCTL		; D
 15066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15067 000022D8 [4F25]                  	dw	ioctl_drive_owner	; E
 15068 000022DA [4F25]                  	dw	ioctl_drive_owner	; F
 15069                                  	; MSDOS 6.0
 15070 000022DC [8E23]                  	dw	query_handle_support	; 10h
 15071 000022DE [A523]                  	dw	query_device_support	; 11h
 15072                                  
 15073                                  	; 11/11/2022
 15074                                  _$IOCTL:
 15075 000022E0 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15076 000022E2 16                      	push	ss
 15077 000022E3 1F                      	pop	ds			;hkn; SS is DOSDATA
 15078                                  
 15079                                  	; MSDOS 3.3
 15080                                  	;cmp	al,0Fh 
 15081                                  	; MSDOS 6.0
 15082 000022E4 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15083 000022E6 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15084                                  
 15085                                  	; 28/05/2019
 15086 000022E8 50                      	push	AX			; Need to save AL for generic IOCTL
 15087 000022E9 89C7                    	mov	di,ax			; di NOT a PARM
 15088 000022EB 81E7FF00                	and	di,0FFh			; di = al
 15089 000022EF D1E7                    	shl	di,1			; di = index into jmp table
 15090 000022F1 58                      	pop	AX			; Restore AL for generic IOCTL
 15091                                  
 15092 000022F2 2EFFA5[BC22]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15093                                  
 15094                                  ioctl_bad_funj2:
 15095 000022F7 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15096                                  
 15097                                  ;--------------------------------------------------------------------------
 15098                                  ;
 15099                                  ; IOCTL: AL = 0,1
 15100                                  ;
 15101                                  ; ENTRY: DS = DOSDATA
 15102                                  ;
 15103                                  ;--------------------------------------------------------------------------
 15104                                  
 15105                                  ioctl_getset_data:
 15106                                  	; MSDOS 6.0
 15107 000022FA E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15108 000022FD 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15109                                  ioctl_bad_handle:
 15110                                  	;mov	al,6
 15111 000022FF B006                    	mov	al,error_invalid_handle
 15112                                  ioctl_error:
 15113 00002301 E94EE3                  	jmp	SYS_RET_ERR
 15114                                  
 15115                                  ioctl_check_permissions:
 15116 00002304 3C00                    	CMP	AL,0
 15117                                  	;mov	al,[es:di+5]
 15118 00002306 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15119 0000230A 741B                    	JZ	short ioctl_read	; read the byte
 15120                                  
 15121 0000230C 08F6                    	or	dh,dh
 15122 0000230E 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15123                                  	;mov	al,0Dh
 15124 00002310 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15125                                  	;jmp	SYS_RET_ERR
 15126 00002312 EBED                    	jmp	short ioctl_error
 15127                                  
 15128                                  ioctl_check_device:
 15129 00002314 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15130 00002316 74DF                    	jz	short ioctl_bad_funj2
 15131 00002318 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15132                                  					;   device bit!! He can muck with the
 15133                                  					;   others at will.
 15134 0000231B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15135 00002320 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15136                                  ioctl_ok:
 15137 00002324 E922E3                  	jmp	SYS_RET_OK
 15138                                  
 15139                                  ioctl_read:
 15140 00002327 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15141 0000232C 30E4                    	XOR	AH,AH
 15142 0000232E A880                    	test	AL,devid_device 	; Should I set high byte
 15143 00002330 740D                    	JZ	short ioctl_no_high	; no
 15144 00002332 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15145                                  	;les	di,[es:di+7]
 15146 00002337 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15147                                  	;mov	ah,[es:di+5]
 15148 0000233B 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15149                                  ioctl_no_high:
 15150 0000233F 89C2                    	MOV	DX,AX
 15151                                  ioctl_set_dx:	; 16/12/2022
 15152 00002341 E84BE1                  	call	Get_User_Stack
 15153                                  	;mov	[si+6],dx
 15154 00002344 895406                  	MOV	[SI+user_env.user_DX],DX
 15155                                  	;;jmp	SYS_RET_OK
 15156                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15157                                  ioctl_ok_j:
 15158                                  	; 16/12/2022
 15159 00002347 E902E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15160                                  	;jmp	short ioctl_ok
 15161                                  	; 26/07/2019
 15162                                  	;jmp	SYS_RET_OK_clc
 15163                                  
 15164                                  ;--------------------------------------------------------------------------
 15165                                  ;
 15166                                  ; IOCTL: AL = 2,3
 15167                                  ;
 15168                                  ; ENTRY: DS = DOSDATA
 15169                                  ;	 SI = user's DS
 15170                                  ;
 15171                                  ;--------------------------------------------------------------------------
 15172                                  
 15173                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15174                                  ioctl_control_string:
 15175 0000234A E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15176 0000234D 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15177                                  	; 07/12/2022
 15178                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15179                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15180                                  	; MSDOS 5.0 & MSDOS 6.0
 15181 0000234F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15182 00002354 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15183 00002356 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15184 0000235B 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15185 0000235F 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15186 00002361 E94201                  	JMP	ioctl_do_string
 15187                                  
 15188                                  ;--------------------------------------------------------------------------
 15189                                  ;
 15190                                  ; IOCTL: AL = 6,7
 15191                                  ;
 15192                                  ; ENTRY: DS = DOSDATA
 15193                                  ;
 15194                                  ;--------------------------------------------------------------------------
 15195                                  
 15196                                  ioctl_status:
 15197 00002364 B401                    	MOV	AH,1
 15198 00002366 2C06                    	SUB	AL,6			; 6=0,7=1
 15199 00002368 7402                    	JZ	short ioctl_get_status
 15200 0000236A B403                    	MOV	AH,3
 15201                                  ioctl_get_status:
 15202 0000236C 50                      	PUSH	AX
 15203 0000236D E86F13                  	call	GET_IO_SFT
 15204 00002370 58                      	POP	AX
 15205                                  	;JNC	short DO_IOFUNC
 15206                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15207                                  	; 16/12/2022
 15208 00002371 728C                    	jc	short ioctl_bad_handle
 15209                                  DO_IOFUNC:
 15210 00002373 E8DA21                  	call	IOFUNC
 15211 00002376 88C4                    	MOV	AH,AL
 15212 00002378 B0FF                    	MOV	AL,0FFH
 15213 0000237A 7502                    	JNZ	short ioctl_status_ret
 15214 0000237C FEC0                    	INC	AL
 15215                                  ioctl_status_ret:
 15216                                  	;jmp	SYS_RET_OK
 15217                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15218                                  	;jmp	short ioctl_ok_j
 15219                                  	; 16/12/2022
 15220 0000237E EBA4                    	jmp	short ioctl_ok
 15221                                  
 15222                                  ;--------------------------------------------------------------------------
 15223                                  ;
 15224                                  ; IOCTL: AL = B
 15225                                  ;
 15226                                  ; ENTRY: DS = DOSDATA
 15227                                  ;
 15228                                  ;--------------------------------------------------------------------------
 15229                                  
 15230                                  Set_Retry_Parameters:
 15231                                  	; 09/09/2018
 15232 00002380 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15233 00002384 09D2                    	OR	DX,DX			; zero retries not allowed
 15234 00002386 7475                    	JZ	short ioctl_bad_fun
 15235 00002388 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15236                                  doneok:
 15237                                  	;jmp	SYS_RET_OK		; Done
 15238                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15239                                  	;jmp	short ioctl_status_ret
 15240                                  	; 16/12/2022
 15241 0000238C EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15242                                  
 15243                                  ;--------------------------------------------------------------------------
 15244                                  ;
 15245                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15246                                  ;
 15247                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15248                                  ;	SI:DX -> Users Device Parameter Table
 15249                                  ;	IOCALL -> IOCTL_Req structure
 15250                                  ;
 15251                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15252                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15253                                  ;	call.
 15254                                  ;
 15255                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15256                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15257                                  ;         return address off the stack if the drive is invalid.
 15258                                  ;
 15259                                  ;--------------------------------------------------------------------------
 15260                                  
 15261                                  query_handle_support:	; Entry point for handles
 15262                                  GENERICIOCTLHANDLE:
 15263 0000238E E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15264 00002391 726F                    	jc	short ioctl_bad_handlej
 15265                                  
 15266                                  	;test	word [es:di+5],8000h
 15267                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15268                                  	;test	byte [es:di+6],80h
 15269 00002393 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15270 00002398 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15271                                  
 15272 0000239A C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15273                                  	;les	di,[es:di+7]
 15274 0000239F 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15275 000023A3 EB0F                    	jmp	short Do_GenIOCTL
 15276                                  
 15277                                  query_device_support:	; Entry point for devices:
 15278                                  GENERICIOCTL:
 15279 000023A5 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15280 000023AA 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15281 000023AD 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15282                                  
 15283 000023AF E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15284 000023B2 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15285                                  
 15286                                  Do_GenIOCTL:
 15287                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15288                                  					; Can device handle Generic IOCTL funcs
 15289                                  	; 09/09/2018
 15290                                  	;test	byte [es:di+4],40h
 15291 000023B4 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15292 000023B9 7442                    	jz	short ioctl_bad_fun
 15293                                  
 15294                                  	; 17/05/2019 - Retro DOS v4.0
 15295                                  
 15296                                  	; MSDOS 6.0
 15297                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15298 000023BB C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15299                                  	;cmp	al,10h
 15300 000023C0 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15301 000023C2 7C0C                    	jl	short SetIOCtlBlock
 15302                                  	
 15303                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15304                                  	;test	byte [es:di+4],80h 
 15305 000023C4 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15306 000023C9 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15307                                  	;
 15308                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15309 000023CB C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15310                                  
 15311                                  SetIOCtlBlock:
 15312 000023D0 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15313 000023D1 57                      	PUSH	DI			; in DS:SI
 15314                                  					; Setup Generic IOCTL Request Block
 15315                                  	;mov	byte [IOCALL_REQLEN],23
 15316 000023D2 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15317                                  	; 07/09/2018 (MSDOS 3.3)
 15318                                  	;;mov	byte [IOCALL_REQFUNC],19
 15319                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15320                                  	;
 15321 000023D7 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15322 000023DB 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15323 000023DF 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15324 000023E3 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15325 000023E7 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15326 000023EB 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15327 000023EF 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15328                                  
 15329                                  ;hkn; IOCALL is in DOSDATA
 15330 000023F3 BB[7C03]                	MOV	BX,IOCALL
 15331                                  
 15332 000023F6 16                      	PUSH	SS
 15333 000023F7 07                      	POP	ES
 15334                                  					; DS:SI -> Device header.
 15335 000023F8 5E                      	POP	SI
 15336 000023F9 1F                      	POP	DS
 15337                                  	; 10/08/2018
 15338 000023FA E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15339                                  
 15340                                  ioctl_bad_fun:
 15341 000023FD B001                    	mov	al, error_invalid_function  ; 1
 15342 000023FF E950E2                  	jmp	SYS_RET_ERR	
 15343                                  
 15344                                  ioctl_bad_handlej:
 15345 00002402 E9FAFE                  	jmp	ioctl_bad_handle
 15346                                  
 15347                                  ;---------------------------------------------------------------------------
 15348                                  ;
 15349                                  ; IOCTL: AL = 8
 15350                                  ;
 15351                                  ; ENTRY: DS = DOSDATA
 15352                                  ;
 15353                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15354                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15355                                  ;         return address off the stack if the drive is invalid.
 15356                                  ;
 15357                                  ;-------------------------------------------------------------------------
 15358                                  
 15359                                  ioctl_rem_media:
 15360                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15361 00002405 E82B01                  	CALL	Check_If_Net
 15362 00002408 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15363                                  					;   certainly don't know how to do this
 15364                                  					;   call.
 15365                                  	;test	word [es:di+4],800h
 15366                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15367                                  	;test	byte [es:di+5],8
 15368 0000240A 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15369 0000240F 74EC                    	JZ	short ioctl_bad_fun		; NO
 15370                                  
 15371                                  ;hkn; SS override for IOCALL
 15372 00002411 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15373 00002417 B00D                    	MOV	AL,REMHL  ; 13
 15374 00002419 88DC                    	MOV	AH,BL			; Unit number
 15375 0000241B 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15376 0000241F 31C0                    	XOR	AX,AX
 15377 00002421 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15378 00002425 06                      	PUSH	ES
 15379 00002426 1F                      	POP	DS
 15380 00002427 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15381 00002429 16                      	PUSH	SS
 15382 0000242A 07                      	POP	ES
 15383                                  
 15384                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15385 0000242B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15386 0000242E 1E                      	push	ds
 15387 0000242F 56                      	push	si
 15388 00002430 E8F422                  	call	DEVIOCALL2
 15389 00002433 5E                      	pop	si
 15390 00002434 1F                      	pop	ds
 15391                                  
 15392                                  ;hkn; SS override
 15393 00002435 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15394 00002439 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15395 0000243C B109                    	MOV	CL,9
 15396 0000243E D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15397                                  ioctl_da_ok_j:	; 11/11/2022
 15398 00002440 E906E2                  	jmp	SYS_RET_OK
 15399                                  
 15400                                  ;-------------------------------------------------------------------------
 15401                                  ;
 15402                                  ; IOCTL: AL = 9
 15403                                  ;
 15404                                  ; ENTRY: DS = DOSDATA
 15405                                  ;
 15406                                  ;-------------------------------------------------------------------------
 15407                                  
 15408                                  ioctl_drive_attr:
 15409                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15410 00002443 88D8                    	mov	al,bl
 15411 00002445 E84B47                  	call	GETTHISDRV
 15412 00002448 7241                    	jc	short ioctl_drv_err
 15413 0000244A E8B800                  	call	Get_Driver_BL
 15414                                  	; MSDOS 6.0
 15415 0000244D 723C                    	JC	short ioctl_drv_err	; drive not valid
 15416                                  
 15417                                  	;mov	dx,[es:di+4]
 15418 0000244F 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15419                                  					; get device attribute word
 15420 00002453 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15421                                  
 15422                                  ;hkn; SS override
 15423 00002455 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15424                                  	;test	word [es:di+43h],8000h
 15425                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15426                                  	;test	byte [es:di+44h],80h
 15427 0000245A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15428 0000245F 7403                    	JZ	short IOCTLShare
 15429                                  
 15430                                  	;or	dx,1000h ; (MSDOS 3.3)
 15431                                  
 15432                                  ;	Net devices don't return a device attribute word.
 15433                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15434                                  
 15435 00002461 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15436                                  IOCTLShare:
 15437 00002464 16                      	push	ss
 15438 00002465 1F                      	pop	ds
 15439 00002466 BE[BE03]                	MOV	SI,OPENBUF
 15440 00002469 80C341                  	ADD	BL,"A"	; 41h
 15441 0000246C 881C                    	MOV	[SI],BL
 15442 0000246E C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15443 00002473 B80003                  	MOV	AX,0300h
 15444 00002476 F8                      	CLC
 15445                                  	;INT	int_IBM
 15446 00002477 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15447                                  			; DS:SI -> ASCIZ disk device name 
 15448                                  			; (may be full path or only drive
 15449                                  			; specifier--must include the colon)
 15450                                  			; Return: CF clear if absolute disk access allowed
 15451 00002479 7303                    	JNC	short IOCTLLocal	; Not shared
 15452                                  	;OR	DX,0200H		; Shared, bit 9
 15453                                  	; 17/12/2022
 15454 0000247B 80CE02                  	or	dh,02h
 15455                                  IOCTLLocal:
 15456                                  	;test	word [es:di+43h],1000h
 15457                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15458                                  	;test	byte [es:di+44h],10h
 15459 0000247E 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15460                                  	;JZ	short ioctl_set_DX
 15461                                  	; 16/12/2022
 15462 00002483 7403                    	jz	short _ioctl_set_DX
 15463                                  	;OR	DX,8000h
 15464                                  	; 17/12/2022
 15465 00002485 80CE80                  	or	dh,80h
 15466                                  ;ioctl_set_DX:
 15467                                  _ioctl_set_DX:
 15468                                  	; 16/12/2022
 15469 00002488 E9B6FE                  	jmp	ioctl_set_dx
 15470                                  ; 16/12/2022
 15471                                  %if 0	
 15472                                  	call	Get_User_Stack
 15473                                  	MOV	[SI+user_env.user_DX],DX
 15474                                  	;;jmp	SYS_RET_OK
 15475                                  	;; 25/06/2019
 15476                                  	;jmp	SYS_RET_OK_clc
 15477                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15478                                  ioctl_gd_ok_j:
 15479                                  	jmp	short ioctl_da_ok_j
 15480                                  %endif
 15481                                  
 15482                                  ioctl_drv_err:
 15483 0000248B B00F                    	mov	al,error_invalid_drive ; 0Fh
 15484                                  ioctl_gd_err_j:	; 11/11/2022
 15485 0000248D E9C2E1                  	jmp	SYS_RET_ERR
 15486                                  
 15487                                  ;--------------------------------------------------------------------------
 15488                                  ;
 15489                                  ; IOCTL: AL = A
 15490                                  ;
 15491                                  ; ENTRY: DS = DOSDATA
 15492                                  ;
 15493                                  ;--------------------------------------------------------------------------
 15494                                  
 15495                                  ioctl_handle_redir:
 15496 00002490 E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15497 00002493 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15498 00002495 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15499                                  
 15500                                  ioctl_got_sft:
 15501                                  	;mov	dx,[es:di+5]
 15502 00002498 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15503                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15504                                  	; 16/12/2022
 15505 0000249C EBEA                    	jmp	short _ioctl_set_DX
 15506                                  
 15507                                  	; 16/12/2022
 15508                                  ;ioctl_bad_funj:
 15509                                  	;JMP	ioctl_bad_fun
 15510                                  
 15511                                  ;--------------------------------------------------------------------------
 15512                                  ;
 15513                                  ; IOCTL: AL= 4,5
 15514                                  ;
 15515                                  ; ENTRY: DS = DOSDATA
 15516                                  ;	 SI = user's DS
 15517                                  ;
 15518                                  ;
 15519                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15520                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15521                                  ;         return address off the stack if the drive is invalid.
 15522                                  ;
 15523                                  ;-------------------------------------------------------------------------
 15524                                  
 15525                                  ioctl_get_dev:
 15526 0000249E E89200                  	CALL	Check_If_Net
 15527                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15528                                  					; certainly don't know how to do this
 15529                                  					; call.
 15530                                  	; 16/12/2022
 15531 000024A1 7403                    	jz	short ioctl_do_string
 15532                                  ioctl_bad_funj:
 15533 000024A3 E957FF                  	JMP	ioctl_bad_fun
 15534                                  
 15535                                  ioctl_do_string:
 15536                                  	;test	word [es:di+4],4000h
 15537                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15538                                  	;test	byte [es:di+5],40h
 15539 000024A6 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15540 000024AB 74F6                    	JZ	short ioctl_bad_funj		; NO
 15541                                  					; assume IOCTL read
 15542 000024AD C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15543                                  
 15544 000024B2 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15545 000024B4 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15546                                  
 15547                                  					; it is an IOCTL write
 15548 000024B6 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15549                                  
 15550                                  ioctl_control_call:
 15551 000024BB B016                    	MOV	AL,DRDWRHL ; 22
 15552                                  ioctl_setup_pkt:
 15553 000024BD 88DC                    	MOV	AH,BL			; Unit number
 15554 000024BF A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15555 000024C2 31C0                    	XOR	AX,AX
 15556 000024C4 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15557 000024C7 A2[8903]                	MOV	[IOMED],AL
 15558 000024CA 890E[8E03]              	MOV	[IOSCNT],CX
 15559 000024CE 8916[8A03]              	MOV	[IOXAD],DX
 15560 000024D2 8936[8C03]              	MOV	[IOXAD+2],SI
 15561 000024D6 06                      	PUSH	ES
 15562 000024D7 1F                      	POP	DS
 15563 000024D8 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15564 000024DA 16                      	PUSH	SS
 15565 000024DB 07                      	POP	ES
 15566                                  
 15567 000024DC BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15568                                  ioctl_do_IO:
 15569 000024DF E84522                  	call	DEVIOCALL2
 15570                                  
 15571                                  ;hkn; SS override for IOCALL
 15572                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15573                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15574                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15575 000024E2 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15576 000024E8 7507                    	JNZ	short ioctl_string_err
 15577                                  
 15578                                  ;hkn; SS override
 15579 000024EA 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15580                                  	; 16/12/2022
 15581 000024EE E958E1                  	jmp	SYS_RET_OK
 15582                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15583                                  	;jmp	short ioctl_gd_ok_j
 15584                                  
 15585                                  ioctl_string_err:
 15586 000024F1 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15587                                  device_err:
 15588 000024F6 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15589 000024FA 89F8                    	MOV	AX,DI
 15590 000024FC E8E230                  	call	SET_I24_EXTENDED_ERROR
 15591                                  
 15592                                  ;hkn; use SS override
 15593                                  ;hkn;	mov	ax,[CS:EXTERR]
 15594 000024FF 36A1[2403]              	mov	ax,[SS:EXTERR]
 15595                                  	;jmp	SYS_RET_ERR
 15596                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15597 00002503 EB88                    	jmp	short ioctl_gd_err_j
 15598                                  
 15599                                  ; 17/05/2019 - Retro DOS v4.0
 15600                                  
 15601                                  ;--------------------------------------------------------------------------
 15602                                  ; Proc name : Get_Driver_BL
 15603                                  ;
 15604                                  ;	DS is DOSDATA
 15605                                  ;	BL is drive number (0=default)
 15606                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15607                                  ;	No regs modified
 15608                                  ;
 15609                                  ;---------------------------------------------------------------------------
 15610                                  
 15611                                  Get_Driver_BL:
 15612 00002505 50                      	PUSH	AX
 15613 00002506 88D8                    	MOV	AL,BL			; Drive
 15614 00002508 E88846                  	call	GETTHISDRV
 15615 0000250B 7224                    	jc	short ioctl_bad_drv
 15616 0000250D 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15617 0000250F C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15618 00002514 C43E[A205]              	LES	DI,[THISCDS]
 15619                                  	;test	word [es:di+43h],8000h
 15620                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15621                                  	;test	byte [es:di+44h],80h
 15622 00002518 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15623                                  	;les	di,[es:di+45h]
 15624 0000251D 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15625 00002521 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15626 00002523 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15627                                  	;mov	bl,[es:di+1]
 15628 00002528 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15629                                  	;les	di,[es:di+13h]
 15630 0000252C 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15631                                  got_dev_ptr:
 15632 00002530 F8                      	CLC
 15633                                  ioctl_bad_drv:
 15634 00002531 58                      	POP	AX
 15635 00002532 C3                      	retn
 15636                                  
 15637                                  ;-------------------------------------------------------------------------
 15638                                  ; Proc Name : Check_If_Net:
 15639                                  ;
 15640                                  ;
 15641                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15642                                  ; If no device is found, the return address is popped off the stack, and a
 15643                                  ; jump is made to ioctl_drv_err.
 15644                                  ;
 15645                                  ; On Entry:
 15646                                  ; Registers same as those for Get_Driver_BL
 15647                                  ;
 15648                                  ; On Exit:
 15649                                  ; ZERO flag	- set if not a net device
 15650                                  ;		- reset if net device
 15651                                  ; ES:DI -> the device
 15652                                  ;
 15653                                  ;
 15654                                  ; BUGBUG: This function assumes the following stack setup on entry
 15655                                  ;
 15656                                  ;	  SP+2 -> Error return address
 15657                                  ;	  SP   -> Normal return address
 15658                                  ;
 15659                                  ;-------------------------------------------------------------------------
 15660                                  
 15661                                  Check_If_Net:
 15662                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15663 00002533 E8CFFF                  	CALL	Get_Driver_BL
 15664 00002536 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15665 00002538 06                      	PUSH	ES
 15666 00002539 57                      	PUSH	DI
 15667 0000253A C43E[A205]              	LES	DI,[THISCDS]
 15668                                  	;test	word [es:di+43h],8000h
 15669                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15670                                  	;test	byte [es:di+44h],80h
 15671 0000253E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15672 00002543 5F                      	POP	DI
 15673 00002544 07                      	POP	ES
 15674 00002545 C3                      	retn
 15675                                  
 15676                                  ioctl_drv_err_pop:
 15677 00002546 58                      	pop	ax			; pop off return address
 15678 00002547 E941FF                  	jmp	ioctl_drv_err
 15679                                  
 15680                                  ioctl_bad_funj3:
 15681 0000254A E9B0FE                  	jmp	ioctl_bad_fun
 15682                                  
 15683                                  ioctl_string_errj:
 15684 0000254D EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15685                                  
 15686                                  ;--------------------------------------------------------------------------
 15687                                  ;
 15688                                  ; IOCTL: AL = E, F
 15689                                  ;
 15690                                  ; ENTRY: DS = DOSDATA
 15691                                  ;
 15692                                  ;
 15693                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15694                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15695                                  ;         return address off the stack if the drive is invalid.
 15696                                  ;
 15697                                  ;--------------------------------------------------------------------------
 15698                                  
 15699                                  ioctl_drive_owner:
 15700                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15701 0000254F E8E1FF                  	Call	Check_If_Net
 15702 00002552 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15703                                  					;   certainly don't know how to do this
 15704                                  					;   call.
 15705                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15706                                  	; 09/09/2018
 15707                                  	;test	byte [es:di+4],40h
 15708 00002554 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15709 00002559 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15710                                  	;mov	byte [IOCALL_REQFUNC],23
 15711 0000255B C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15712 00002560 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15713 00002562 7405                    	jz	short GetOwner
 15714                                  SetOwner:
 15715 00002564 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15716                                  GetOwner:
 15717 00002569 B00D                    	MOV	AL,OWNHL ; 13
 15718 0000256B 88DC                    	MOV	AH,BL			; Unit number
 15719 0000256D A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15720 00002570 31C0                    	XOR	AX,AX
 15721 00002572 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15722 00002575 06                      	PUSH	ES
 15723 00002576 1F                      	POP	DS
 15724 00002577 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15725 00002579 16                      	PUSH	SS
 15726 0000257A 07                      	POP	ES
 15727 0000257B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15728 0000257E 1E                      	push	ds
 15729 0000257F 56                      	push	si
 15730 00002580 E8A421                  	call	DEVIOCALL2
 15731 00002583 5E                      	pop	si
 15732 00002584 1F                      	pop	ds
 15733                                  ;hkn; SS override
 15734                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15735                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15736 00002585 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15737 0000258B 75C0                    	jnz	short ioctl_string_errj
 15738 0000258D 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15739                                  					; owner returned is 1-based.
 15740 00002591 E9B5E0                  	jmp	SYS_RET_OK
 15741                                  
 15742                                  ;============================================================================
 15743                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15744                                  ;============================================================================
 15745                                  ; 07/08/2018 - Retro DOS v3.0
 15746                                  ; 17/05/2019 - Retro DOS v4.0
 15747                                  
 15748                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15749                                  ;	NAME	DOS_DELETE
 15750                                  
 15751                                  ;
 15752                                  ;	Microsoft Confidential
 15753                                  ;	Copyright (C) Microsoft Corporation 1991
 15754                                  ;	All Rights Reserved.
 15755                                  ;
 15756                                  
 15757                                  ;**	DELETE.ASM - Low level routine for deleting files
 15758                                  ;----------------------------------------------------------------------------
 15759                                  ;		DOS_DELETE
 15760                                  ;		REN_DEL_Check
 15761                                  ;		FastOpen_Delete	       ; DOS 3.3
 15762                                  ;		FastOpen_Update	       ; DOS 3.3
 15763                                  
 15764                                  ;   Revision history:
 15765                                  ;
 15766                                  ;   A000  version 4.00	Jan. 1988
 15767                                  ;   A001  Fastopen Rename fix	April 1989
 15768                                  
 15769                                  ;Installed = TRUE
 15770                                  
 15771                                  ;	i_need	NoSetDir,BYTE
 15772                                  ;	i_need	Creating,BYTE
 15773                                  ;	i_need	DELALL,BYTE
 15774                                  ;	i_need	THISDPB,DWORD
 15775                                  ;	i_need	THISSFT,DWORD
 15776                                  ;	i_need	THISCDS,DWORD
 15777                                  ;	i_need	CURBUF,DWORD
 15778                                  ;	i_need	ATTRIB,BYTE
 15779                                  ;	i_need	SATTRIB,BYTE
 15780                                  ;	i_need	WFP_START,WORD
 15781                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15782                                  ;	i_need	NAME1,BYTE			 ;BN001
 15783                                  ;	i_need	FoundDel,BYTE
 15784                                  ;	i_need	AUXSTACK,BYTE
 15785                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15786                                  ;	i_need	JShare,DWORD
 15787                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15788                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15789                                  ;
 15790                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15791                                  ;
 15792                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15793                                  ;	i_need	DMAADD,DWORD
 15794                                  ;	i_need	RENAMEDMA,BYTE
 15795                                  
 15796                                  ;----------------------------------------------------------------------------
 15797                                  ;
 15798                                  ; Procedure Name : DOS_DELETE
 15799                                  ;
 15800                                  ; Inputs:
 15801                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15802                                  ;		terminated)
 15803                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15804                                  ;		( = -1 if current dir not involved, else
 15805                                  ;		 Points to first char after last "/" of current dir part)
 15806                                  ;	[THISCDS] Points to CDS being used
 15807                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15808                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15809                                  ; Function:
 15810                                  ;	Delete the specified file(s)
 15811                                  ; Outputs:
 15812                                  ;	CARRY CLEAR
 15813                                  ;		OK
 15814                                  ;	CARRY SET
 15815                                  ;	    AX is error code
 15816                                  ;		error_file_not_found
 15817                                  ;			Last element of path not found
 15818                                  ;		error_path_not_found
 15819                                  ;			Bad path (not in curr dir part if present)
 15820                                  ;		error_bad_curr_dir
 15821                                  ;			Bad path in current directory part of path
 15822                                  ;		error_access_denied
 15823                                  ;			Attempt to delete device or directory
 15824                                  ;		***error_sharing_violation***
 15825                                  ;			Deny both access required, generates an INT 24.
 15826                                  ;			This error is NOT returned. The INT 24H is generated,
 15827                                  ;			  and the file is ignored (not deleted). Delete will
 15828                                  ;			  simply continue on looking for more files.
 15829                                  ;			  Carry will NOT be set in this case.
 15830                                  ; DS preserved, others destroyed
 15831                                  ;
 15832                                  ;----------------------------------------------------------------------------
 15833                                  
 15834                                  FILEFOUND   equ 01h
 15835                                  FILEDELETED equ 10h
 15836                                  
 15837                                  
 15838                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15839                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15840                                  
 15841                                  DOS_DELETE:
 15842                                  
 15843                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15844                                  ;hkn; appropriately at this point.
 15845                                  
 15846 00002594 E8FCEC                  	call	TestNet
 15847 00002597 7306                    	JNC	short LOCAL_DELETE
 15848                                  
 15849                                  ;IF NOT Installed
 15850                                  ;	transfer NET_DELETE
 15851                                  ;ELSE
 15852                                  	;MOV	AX,(MultNET SHL 8) | 19
 15853                                  	;INT	2FH
 15854                                  	;return
 15855                                  
 15856 00002599 B81311                  	mov	ax,1113h
 15857 0000259C CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15858                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15859                                  			;		fully-qualified filename in DOS CS
 15860                                  			; SDA CDS pointer -> current directory structure for drive with file
 15861                                  			; Return: CF set on error
 15862 0000259E C3                      	retn
 15863                                  ;ENDIF
 15864                                  
 15865                                  LOCAL_DELETE:
 15866 0000259F C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15867 000025A4 E8B1ED                  	call	ECritDisk
 15868                                  	;mov	word [CREATING],0E500h
 15869 000025A7 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15870 000025AD 8B36[B205]              	MOV	SI,[WFP_START]
 15871                                  SKPNUL:
 15872 000025B1 AC                      	LODSB
 15873 000025B2 08C0                    	OR	AL,AL
 15874 000025B4 75FB                    	JNZ	short SKPNUL		; go to end
 15875 000025B6 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15876 000025B9 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15877 000025BD 7506                    	JNZ	short TEST_QUEST
 15878 000025BF 807C022A                	CMP	BYTE [SI+2],"*"
 15879 000025C3 741F                    	JZ	short CHECK_ATTS
 15880                                  TEST_QUEST:
 15881 000025C5 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15882 000025C8 87FE                    	XCHG	DI,SI
 15883                                  
 15884 000025CA 16                      	push	ss
 15885                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15886 000025CB 07                      	pop	es ; 17/05/2019
 15887                                  
 15888 000025CC B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15889 000025CF B90400                  	MOV	CX,4		; four sets of "??"
 15890 000025D2 F3AF                    	REPE	SCASW
 15891 000025D4 751C                    	JNZ	short NOT_ALL
 15892 000025D6 87FE                    	XCHG	DI,SI
 15893 000025D8 AD                      	LODSW
 15894 000025D9 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15895 000025DC 7514                    	JNZ	short NOT_ALL
 15896 000025DE AD                      	LODSW
 15897 000025DF 3D3F3F                  	CMP	AX,"??"
 15898 000025E2 750E                    	JNZ	short NOT_ALL
 15899                                  CHECK_ATTS:
 15900 000025E4 A0[6D05]                	MOV	AL,[SATTRIB]
 15901                                  	;and	al,1Fh
 15902 000025E7 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15903                                  					; Look only at hidden bits
 15904                                  	;cmp	al,1Fh
 15905 000025E9 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15906                                  					; All must be set
 15907 000025EB 7505                    	JNZ	short NOT_ALL
 15908                                  
 15909                                  ; NOTE WARNING DANGER-----
 15910                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15911                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15912                                  
 15913 000025ED C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15914                                  NOT_ALL:
 15915 000025F2 C606[4C03]01            	MOV	byte [NoSetDir],1
 15916 000025F7 E8D619                  	call	GetPathNoSet
 15917 000025FA 7312                    	JNC	short Del_found
 15918 000025FC 750B                    	JNZ	short _bad_path
 15919 000025FE 08C9                    	OR	CL,CL
 15920 00002600 7407                    	JZ	short _bad_path
 15921                                  No_file:
 15922 00002602 B80200                  	MOV	AX,error_file_not_found
 15923                                  ErrorReturn:
 15924 00002605 F9                      	STC
 15925                                  	;call	LCritDisk
 15926                                  	;retn
 15927                                  	; 18/12/2022
 15928 00002606 E96AED                  	jmp	LCritDisk
 15929                                  
 15930                                  _bad_path:
 15931 00002609 B80300                  	MOV	AX,error_path_not_found
 15932 0000260C EBF7                    	JMP	short ErrorReturn
 15933                                  
 15934                                  Del_found:
 15935 0000260E 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15936 00002610 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15937 00002615 7405                    	JZ	short NOT_DIR
 15938                                  Del_access_err:
 15939 00002617 B80500                  	MOV	AX,error_access_denied
 15940 0000261A EBE9                    	JMP	short ErrorReturn
 15941                                  
 15942                                  NOT_DIR:
 15943 0000261C 08E4                    	OR	AH,AH			; Check if device name
 15944 0000261E 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15945                                  
 15946                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15947                                  
 15948                                  DELFILE:
 15949 00002620 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15950                                  
 15951                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15952                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15953                                  
 15954 00002625 1E                      	PUSH	DS
 15955 00002626 8A26[7F05]              	MOV	AH,[DELALL]
 15956 0000262A C53E[E205]              	LDS	DI,[CURBUF]
 15957                                  	
 15958                                  ;hkn; SS override
 15959 0000262E 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15960 00002634 7509                    	JNZ	short DoDelete		; yes
 15961                                  
 15962 00002636 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15963 0000263A 7403                    	JZ	short DoDelete		; not read only
 15964                                  
 15965 0000263C 1F                      	POP	DS
 15966 0000263D EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15967                                  
 15968                                  DoDelete:
 15969 0000263F E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15970 00002642 7303                    	JNC	short DEL_SHARE_OK
 15971 00002644 1F                      	POP	DS
 15972 00002645 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15973                                  
 15974                                  DEL_SHARE_OK:
 15975                                  	; 17/05/2019 - Retro DOS v4.0
 15976                                  	; MSDOS 6.0
 15977                                  	;test	byte [di+5],40h
 15978 00002647 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15979                                  					;LB. if already dirty		  ;AN000;
 15980 0000264B 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15981 0000264D E8F735                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 15982                                  	;or	byte [di+5],40h
 15983 00002650 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15984                                  yesdirty:
 15985 00002654 8827                    	mov	[bx],ah 
 15986                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 15987 00002656 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 15988 00002658 1F                      	POP	DS
 15989 00002659 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 15990                                  
 15991 0000265E 83FB02                  	CMP	BX,2
 15992 00002661 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 15993                                  	;cmp	bx,[es:bp+0Dh]
 15994 00002663 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 15995 00002667 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 15996                                  
 15997 00002669 E82F29                  	call	RELEASE 		; Free file data
 15998 0000266C 7252                    	JC	short No_fileJ
 15999                                  
 16000                                  ; DOS 3.3  FastOpen
 16001                                  
 16002 0000266E E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16003                                  
 16004                                  ; DOS 3.3  FastOpen
 16005                                  
 16006                                  DELNXT:
 16007 00002671 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16008 00002675 E8C018                  	call	GETENTRY		; Registers need to be reset
 16009 00002678 7246                    	JC	short No_fileJ
 16010 0000267A E8F417                  	call	NEXTENT
 16011 0000267D 73A1                    	JNC	short DELFILE
 16012 0000267F C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16013                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16014                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16015                                  	;;mov	al,[es:bp+0]
 16016                                  	; 15/12/2022
 16017 00002683 268A4600                	MOV	AL,[ES:BP]
 16018 00002687 E8B534                  	call	FLUSHBUF
 16019 0000268A 7234                    	JC	short No_fileJ
 16020                                  ;
 16021                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16022                                  ;
 16023                                  ;   not found not deleted		file not found
 16024                                  ;   not found	  deleted		*** impossible ***
 16025                                  ;	found not deleted		access denied (read-only)
 16026                                  ;	found	  deleted		no error
 16027                                  ;
 16028 0000268C F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16029 00002691 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16030                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16031                                  ; and to force the DOS to issue a media check.
 16032 00002693 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16033 00002698 741C                    	jz	short No_Set_Flag
 16034 0000269A 50                      	PUSH	AX
 16035 0000269B 06                      	PUSH	ES
 16036 0000269C 57                      	PUSH	DI
 16037 0000269D C43E[A205]              	LES	DI,[THISCDS]
 16038 000026A1 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16039 000026A4 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16040 000026A7 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16041                                  	
 16042                                  	; MSDOS 6.0
 16043 000026AB 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16044 000026AD E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16045                                  	 
 16046 000026B0 E81E31                  	call	FATREAD_CDS		; force media check
 16047 000026B3 5F                      	POP	DI
 16048 000026B4 07                      	POP	ES
 16049 000026B5 58                      	POP	AX
 16050                                  No_Set_Flag:
 16051                                  	;call	LCritDisk		; carry is clear
 16052                                  	;retn
 16053                                  	; 18/12/2022
 16054 000026B6 E9BAEC                  	jmp	LCritDisk
 16055                                  DelError:
 16056 000026B9 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16057 000026BE 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16058                                  No_fileJ:
 16059 000026C0 E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16060                                  Del_access_errJ:
 16061 000026C3 E951FF                  	JMP	Del_access_err ; 10/08/2018
 16062                                  
 16063                                  ; 08/08/2018 - Retro DOS v3.0
 16064                                  
 16065                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16066                                  ;---------------------------------------------------------------------------
 16067                                  ; Procedure Name : REN_DEL_Check
 16068                                  ;
 16069                                  ; Inputs:
 16070                                  ;	[THISDPB] set
 16071                                  ;	[CURBUF+2]:BX points to entry
 16072                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16073                                  ;	[WFP_Start] points to name
 16074                                  ; Function:
 16075                                  ;	Check for Exclusive access on given file.
 16076                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16077                                  ; Outputs:
 16078                                  ;	ES:BP = [THISDPB]
 16079                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16080                                  ;		last element will be loaded from the directory entry.  This is
 16081                                  ;		so the name given to the sharer doesn't have any meta chars in
 16082                                  ;		it.
 16083                                  ;	Carry set if sharing violation, INT 24H generated
 16084                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16085                                  ;		This is because input AX is preserved.
 16086                                  ;		Caller must set the error if needed.
 16087                                  ;	Carry clear
 16088                                  ;		OK
 16089                                  ; AX,DS,BX,SI,DI preserved
 16090                                  ;---------------------------------------------------------------------------
 16091                                  
 16092                                  REN_DEL_Check:
 16093                                  
 16094 000026C6 1E                      	PUSH	DS
 16095 000026C7 57                      	PUSH	DI
 16096 000026C8 50                      	PUSH	AX
 16097 000026C9 53                      	PUSH	BX
 16098 000026CA 56                      	PUSH	SI		; Save CURBUF pointers
 16099                                  	
 16100 000026CB 16                      	push	ss
 16101 000026CC 07                      	pop	es
 16102                                  
 16103                                  ;hkn; context ES will assume ES to DOSDATA
 16104                                  ;hkn; ASSUME	ES:DOSGROUP
 16105                                  
 16106                                  ;hkn; SS override
 16107 000026CD 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16108 000026D2 89DE                    	MOV	SI,BX
 16109                                  
 16110                                  ;hkn; SS override
 16111 000026D4 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16112 000026D9 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16113 000026DB 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16114 000026DE E852EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16115 000026E1 49                      	DEC	CX		; Don't include nul in count
 16116 000026E2 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16117 000026E4 E86A47                  	call	SkipBack	; Back up one element
 16118 000026E7 47                      	INC	DI		; Point to start of last element
 16119                                  
 16120                                  	; 17/05/2019 - Retro DOS v4.0
 16121                                  ;hkn; SS override
 16122                                  	; MSDOS 6.0
 16123 000026E8 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16124                                  	;
 16125 000026ED E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16126 000026F0 5E                      	POP	SI		; Get back entry pointers
 16127 000026F1 5B                      	POP	BX
 16128 000026F2 53                      	PUSH	BX
 16129 000026F3 56                      	PUSH	SI		; Back on stack
 16130                                  	
 16131 000026F4 16                      	push	ss
 16132 000026F5 1F                      	pop	ds
 16133                                  
 16134                                  ;hkn; context DS will assume ES to DOSDATA
 16135                                  ;hkn; ASSUME	DS:DOSGROUP
 16136                                  
 16137                                  ; Close the file if possible by us.
 16138                                  ;
 16139                                  ;if installed
 16140 000026F6 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16141                                  ;else
 16142                                  ;	Call	ShCloseFile
 16143                                  ;endif
 16144 000026FA 8C1E[A005]              	MOV	[THISSFT+2],DS
 16145                                  
 16146                                  ;hkn; AUXSTACK is in DOSDATA
 16147 000026FE C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16148                                  				; Scratch space
 16149 00002704 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16150 00002706 E80E25                  	call	DOOPEN		; Fill in SFT for share check
 16151 00002709 C43E[9E05]              	LES	DI,[THISSFT]
 16152                                  	;mov	word [es:di+2],10h
 16153 0000270D 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16154                                  				; requires exclusive access
 16155                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16156 00002713 26C7050100              	mov	word [ES:DI],1
 16157 00002718 E85B4D                  	call	ShareEnter
 16158 0000271B 720D                    	jc	short CheckDone
 16159 0000271D C43E[9E05]              	LES	DI,[THISSFT]
 16160                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16161 00002721 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16162                                  	
 16163 00002726 E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16164 00002729 F8                      	CLC
 16165                                  CheckDone:
 16166 0000272A C42E[8A05]              	LES	BP,[THISDPB]
 16167 0000272E 5E                      	POP	SI
 16168 0000272F 5B                      	POP	BX
 16169 00002730 58                      	POP	AX
 16170 00002731 5F                      	POP	DI
 16171 00002732 1F                      	POP	DS
 16172 00002733 C3                      	retn
 16173                                  
 16174                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16175                                  ;---------------------------------------------------------------------------
 16176                                  ; Procedure Name : FastOpen_Delete
 16177                                  ; Inputs:
 16178                                  ;	None
 16179                                  ; Function:
 16180                                  ;	Call FastOpen to delete the dir info.
 16181                                  ; Outputs:
 16182                                  ;	None
 16183                                  ;---------------------------------------------------------------------------
 16184                                  
 16185                                  FastOpen_Delete:
 16186 00002734 9C                      	PUSHF			; save flag
 16187 00002735 56                      	PUSH	SI		; save registers
 16188 00002736 53                      	PUSH	BX
 16189 00002737 50                      	PUSH	AX
 16190                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16191                                  ;hkn; SS override
 16192                                  	; 17/05/2019 - Retro DOS v4.0
 16193                                  	; MSDOS 6.0
 16194 00002738 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16195                                  	
 16196 0000273D B003                    	MOV	AL,FONC_delete	; al = 3
 16197                                  fastinvoke:
 16198                                  ;hkn; FastTable is in DOSDATA
 16199 0000273F BB[320D]                	MOV	BX,FastTable+2
 16200 00002742 FF1F                    	CALL	far [BX]	; call fastopen
 16201 00002744 58                      	POP	AX		; restore registers
 16202 00002745 5B                      	POP	BX
 16203 00002746 5E                      	POP	SI
 16204 00002747 9D                      	POPF			; restore flag
 16205 00002748 C3                      	retn
 16206                                  
 16207                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16208                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16209                                  
 16210                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16211                                  ;---------------------------------------------------------------------------
 16212                                  ; PROCEDURE Name : FastOpen_Rename
 16213                                  ;
 16214                                  ; Inputs:
 16215                                  ;	 REN_WFP   = Path Name
 16216                                  ;	 NAME1	   = New Name
 16217                                  ; Function:
 16218                                  ;	Call FastOpen to rename the dir entry in the cache
 16219                                  ; Outputs:
 16220                                  ;	None
 16221                                  ;---------------------------------------------------------------------------
 16222                                  
 16223                                  FastOpen_Rename:
 16224                                  	; 17/05/2019 - Retro DOS v4.0
 16225                                  	; 08/08/2018 - Retro DOS v3.0
 16226                                  	; MSDOS 6.0
 16227 00002749 9C                      	PUSHF			;AN001 save flag
 16228 0000274A 56                      	PUSH	SI		;AN001 save registers
 16229 0000274B 57                      	PUSH	DI		;AN001
 16230 0000274C 53                      	PUSH	BX		;AN001
 16231 0000274D 50                      	PUSH	AX		;AN001
 16232                                  	;
 16233                                  ;hkn; SS override
 16234 0000274E 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16235                                  
 16236                                  ;hkn; NAME1 is in DOSDATA
 16237 00002753 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16238                                  	;mov	al,6
 16239 00002756 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16240                                  	
 16241                                  ;hkn; FastTable is in DOSDATA
 16242 00002758 BB[320D]                	MOV	BX,FastTable+2
 16243 0000275B FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16244                                  	
 16245 0000275D 58                      	POP	AX		; restore registers  ;AN001
 16246 0000275E 5B                      	POP	BX				     ;AN001
 16247 0000275F 5F                      	POP	DI				     ;AN001
 16248 00002760 5E                      	POP	SI				     ;AN001
 16249 00002761 9D                      	POPF			; restore flag	     ;AN001
 16250 00002762 C3                      	retn					     ;AN001
 16251                                  
 16252                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16253                                  ;---------------------------------------------------------------------------
 16254                                  ; Procedure Name : FastOpen_Update
 16255                                  ;
 16256                                  ; Inputs:
 16257                                  ;	DL     drive number (A=0,B=1,,,)
 16258                                  ;	CX     first cluster #
 16259                                  ;	AH     0 updates dir entry
 16260                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16261                                  ;	ES:DI  directory entry
 16262                                  ; Function:
 16263                                  ;	Call FastOpen to update the dir info.
 16264                                  ; Outputs:
 16265                                  ;	None
 16266                                  ;---------------------------------------------------------------------------
 16267                                  
 16268                                  FastOpen_Update:
 16269 00002763 9C                      	PUSHF			; save flag
 16270 00002764 56                      	PUSH	SI
 16271 00002765 53                      	PUSH	BX		; save regs
 16272 00002766 50                      	PUSH	AX
 16273 00002767 B004                    	MOV	AL,FONC_update	; al = 4
 16274 00002769 EBD4                    	JMP	short fastinvoke
 16275                                  
 16276                                  	; 17/05/2019
 16277                                  
 16278                                  	; MSDOS 6.0
 16279                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16280                                  ;---------------------------------------------------------------------------
 16281                                  Fast_Dispatch:
 16282                                  ;hkn; FastTable is in DOSDATA
 16283 0000276B BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16284                                  ;hkn; use SS override
 16285 0000276E 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16286 00002771 C3                      	retn
 16287                                  
 16288                                  ;============================================================================
 16289                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16290                                  ;============================================================================
 16291                                  ; 08/08/2018 - Retro DOS v3.0
 16292                                  ; 17/05/2019 - Retro DOS v4.0
 16293                                  
 16294                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16295                                  ;	NAME	DOS_RENAME
 16296                                  
 16297                                  ;**	Low level routine for renaming files
 16298                                  ;----------------------------------------------------------------------------
 16299                                  ;	DOS_RENAME
 16300                                  ;
 16301                                  ;	Modification history:
 16302                                  ;
 16303                                  ;	    Created: ARR 30 March 1983
 16304                                  
 16305                                  ;----------------------------------------------------------------------------
 16306                                  ;
 16307                                  ; Procedure Name : DOS_RENAME
 16308                                  ;
 16309                                  ; Inputs:
 16310                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16311                                  ;		chars, NUL terminated)
 16312                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16313                                  ;		( = -1 if current dir not involved, else
 16314                                  ;		 Points to first char after last "/" of current dir part)
 16315                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16316                                  ;		chars, NUL terminated)
 16317                                  ;	[THISCDS] Points to CDS being used
 16318                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16319                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16320                                  ; Function:
 16321                                  ;	Rename the specified file(s)
 16322                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16323                                  ; Outputs:
 16324                                  ;	CARRY CLEAR
 16325                                  ;	    OK
 16326                                  ;	CARRY SET
 16327                                  ;	    AX is error code
 16328                                  ;		error_file_not_found
 16329                                  ;			No match for source, or dest path invalid
 16330                                  ;		error_not_same_device
 16331                                  ;			Source and dest are on different devices
 16332                                  ;		error_access_denied
 16333                                  ;			Directory specified (not simple rename),
 16334                                  ;			Device name given, Destination exists.
 16335                                  ;			NOTE: In third case some renames may have
 16336                                  ;			 been done if metas.
 16337                                  ;		error_path_not_found
 16338                                  ;			Bad path (not in curr dir part if present)
 16339                                  ;			SOURCE ONLY
 16340                                  ;		error_bad_curr_dir
 16341                                  ;			Bad path in current directory part of path
 16342                                  ;			SOURCE ONLY
 16343                                  ;		error_sharing_violation
 16344                                  ;			Deny both access required, generates an INT 24.
 16345                                  ; DS preserved, others destroyed
 16346                                  ;
 16347                                  ;----------------------------------------------------------------------------
 16348                                  
 16349                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16350                                  
 16351                                  DOS_RENAME:
 16352                                  
 16353                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16354                                  ;hkn; at this point to DOSDATA.
 16355                                  
 16356 00002772 E81EEB                  	call	TestNet
 16357 00002775 7306                    	JNC	short LOCAL_RENAME
 16358                                  
 16359                                  ;IF NOT Installed
 16360                                  ;	transfer NET_RENAME
 16361                                  ;ELSE
 16362                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16363                                  	;INT	2FH
 16364                                  	;return
 16365                                  
 16366 00002777 B81111                  	mov     ax, 1111h
 16367 0000277A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16368                                  			; SS = DS = DOS CS, 
 16369                                  			; SDA first filename pointer = offset of fully-qualified old name
 16370                                  			; SDA CDS pointer -> current directory
 16371                                  			; Return: CF set on error
 16372 0000277C C3                      	retn
 16373                                  ;ENDIF
 16374                                  
 16375                                  LOCAL_RENAME:
 16376 0000277D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16377 00002782 8B36[B205]              	MOV	SI,[WFP_START]
 16378 00002786 8B3E[B405]              	MOV	DI,[REN_WFP]
 16379 0000278A 8A04                    	MOV	AL,[SI]
 16380 0000278C 8A25                    	MOV	AH,[DI]
 16381 0000278E 0D2020                  	OR	AX,2020H		; Lower case
 16382 00002791 38E0                    	CMP	AL,AH
 16383 00002793 7405                    	JZ	short SAMEDRV
 16384 00002795 B81100                  	MOV	AX,error_not_same_device ; 11h
 16385 00002798 F9                      	STC
 16386 00002799 C3                      	retn
 16387                                  
 16388                                  SAMEDRV:
 16389 0000279A FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16390 0000279E FF36[2C03]              	PUSH	WORD [DMAADD]
 16391 000027A2 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16392                                  
 16393                                  ;hkn; RENAMEDMA is in DOSDATA
 16394 000027A6 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16395 000027AC C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16396 000027B1 E8A4EB                  	call	ECritDisk
 16397 000027B4 E8F805                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16398                                  					;    points to entry
 16399 000027B7 7314                    	JNC	short Check_Dev
 16400 000027B9 83F812                  	CMP	AX,error_no_more_files ; 12h
 16401 000027BC 7503                    	JNZ	short GOTERR
 16402 000027BE B80200                  	MOV	AX,error_file_not_found ; 2
 16403                                  GOTERR:
 16404 000027C1 F9                      	STC
 16405                                  RENAME_POP:
 16406 000027C2 8F06[2C03]              	POP	WORD [DMAADD]
 16407 000027C6 8F06[2E03]              	POP	WORD [DMAADD+2]
 16408                                  	;call	LCritDisk
 16409                                  	;retn
 16410                                  	; 16/12/2022
 16411 000027CA E9A6EB                  	jmp	LCritDisk
 16412                                  
 16413                                  Check_Dev:
 16414                                  	; 17/05/2019 - Retro DOS v4.0
 16415                                  	;mov	ax,5
 16416 000027CD B80500                  	MOV	AX,error_access_denied	; Assume error
 16417                                  	
 16418                                  	; MSDOS 6.0
 16419 000027D0 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16420 000027D1 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16421                                  	;add	si,21
 16422 000027D5 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16423                                  	;test	byte [si+11],10h
 16424 000027D8 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16425 000027DC 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16426 000027DE 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16427 000027E2 E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16428                                  notdir:
 16429 000027E5 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16430 000027E6 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16431                                  
 16432                                  	; MSDOS 3.3 & MSDOS 6.0
 16433 000027E8 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16434 000027ED 75D2                    	JNZ	short GOTERR
 16435                                  
 16436                                  ; At this point a source has been found. There is search continuation info (a
 16437                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16438                                  ; directory entry found.
 16439                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16440                                  ; throughout the RENAME since it is known at this point that the source and
 16441                                  ; destination are both on the same device.
 16442                                  ; [SATTRIB] is also set.
 16443                                  
 16444 000027EF 89DE                    	MOV	SI,BX
 16445                                  	;add	si,26
 16446 000027F1 83C61A                  	ADD	SI,dir_entry.dir_first
 16447 000027F4 E8CFFE                  	call	REN_DEL_Check
 16448 000027F7 7305                    	JNC	short REN_OK1
 16449 000027F9 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16450 000027FC EBC4                    	JMP	short RENAME_POP
 16451                                  
 16452                                  ;------------------------------------------------------------------------------
 16453                                  ; Check if the source is a file or directory. If file, delete the entry
 16454                                  ; from the Fastopen cache. If directory, rename it later
 16455                                  ;------------------------------------------------------------------------------
 16456                                  
 16457                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16458                                  	; MSDOS 6.0
 16459 000027FE 56                      	PUSH	SI
 16460 000027FF C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16461                                  	;add	si,21
 16462 00002803 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16463                                  	;test	byte [si+11],10h
 16464 00002806 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16465 0000280A 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16466 0000280C 5E                      	POP	SI			;BN00X
 16467 0000280D EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16468                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16469 0000280F 5E                      	POP	SI
 16470                                  
 16471                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16472 00002810 E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16473                                  SWAP_SOURCE:
 16474                                  	; MSDOS 3.3
 16475                                  	;MOV	SI,[REN_WFP]
 16476                                  	;MOV	[WFP_START],SI
 16477                                  	; MSDOS 6.0
 16478 00002813 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16479 00002816 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16480 0000281A 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16481 0000281E A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16482                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16483 00002821 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16484                                  	;mov	word [CREATING],0E5FFh
 16485 00002827 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16486                                  					; A rename is like a CREATE_NEW as far
 16487                                  					; as the destination is concerned.
 16488 0000282D E8A017                  	call	GetPathNoSet
 16489                                  
 16490                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16491                                  ;   since no files match the destination name. If it fails for any other
 16492                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16493                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16494                                  ;   if the rename should fail because we haven't built an explicit name by
 16495                                  ;   substituting for the meta chars in it. In this case the destination file
 16496                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16497                                  ;   in the directory entry part.
 16498                                  	
 16499 00002830 7223                    	JC	short NODEST
 16500                                  	
 16501                                  	; MSDOS 6.0
 16502                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16503                                  	; !! MSDOS 3.3 !!
 16504                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16505                                  
 16506 00002832 08E4                    	OR	AH,AH			; Device?
 16507 00002834 792C                    	JNS	short SAVEDEST		; No, continue
 16508                                  BAD_ACC:
 16509 00002836 B80500                  	MOV	AX,error_access_denied
 16510 00002839 F9                      	STC
 16511                                  RENAME_CLEAN:
 16512 0000283A 9C                      	PUSHF				; Save carry state
 16513 0000283B 50                      	PUSH	AX			; and error code (if carry set)
 16514 0000283C A0[7605]                	MOV	AL,[THISDRV]
 16515 0000283F E8FD32                  	call	FLUSHBUF
 16516 00002842 58                      	POP	AX
 16517 00002843 803E[4A03]00            	CMP	byte [FAILERR],0
 16518 00002848 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16519 0000284A 9D                      	POPF
 16520 0000284B E974FF                  	JMP	RENAME_POP
 16521                                  
 16522                                  BAD_ERR:
 16523 0000284E 58                      	POP	AX			; Saved flags
 16524                                  	; 16/12/202
 16525                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16526                                  BAD_PATH: ; *
 16527 0000284F B80300                  	MOV	AX,error_path_not_found
 16528 00002852 E96CFF                  	JMP	GOTERR
 16529                                  
 16530                                  NODEST:
 16531 00002855 75F8                    	JNZ	short BAD_PATH
 16532 00002857 803E[4A03]00            	CMP	byte [FAILERR],0
 16533 0000285C 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16534                                  					; because user FAILed on I 24
 16535                                  	; 14/11/2022
 16536 0000285E 08C9                    	OR	CL,CL
 16537                                  	;JNZ	short SAVEDEST
 16538                                  	; 17/05/2019
 16539 00002860 74ED                    	jz	short BAD_PATH ; *
 16540                                  ;BAD_PATH: ; *
 16541                                  ;	MOV	AX,error_path_not_found
 16542                                  ;	;STC
 16543                                  ;	;JMP	RENAME_POP
 16544                                  ;	; 17/05/2019
 16545                                  ;	jmp	GOTERR 
 16546                                  
 16547                                  ; 16/12/2022
 16548                                  %if 0
 16549                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16550                                  	or	cl,cl
 16551                                  	jnz	short SAVEDEST
 16552                                  	;jz	short BAD_PATH ; *
 16553                                  BAD_PATH: ; *
 16554                                  	;mov	ax,3
 16555                                  	mov	ax,error_path_not_found
 16556                                  	stc
 16557                                  	jmp	RENAME_POP
 16558                                  %endif
 16559                                  
 16560                                  SAVEDEST:
 16561 00002862 16                      	push	ss
 16562 00002863 07                      	pop	es
 16563                                  
 16564                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16565 00002864 BF[5705]                	MOV	DI,NAME2
 16566 00002867 BE[4B05]                	MOV	SI,NAME1
 16567                                  
 16568 0000286A B90B00                  	MOV	CX,11
 16569 0000286D F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16570 0000286F A1[C205]                	MOV	AX,[DIRSTART]
 16571 00002872 A3[6405]                	MOV	[DESTSTART],AX
 16572                                  BUILDDEST:
 16573 00002875 16                      	push	ss
 16574 00002876 07                      	pop	es			; needed due to JMP BUILDDEST below
 16575                                  
 16576                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16577 00002877 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16578 0000287A BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16579 0000287D BE[5705]                	MOV	SI,NAME2		; Raw dest
 16580                                  
 16581 00002880 B90B00                  	MOV	CX,11
 16582                                  
 16583                                  	; 17/05/2019 - Retro DOS v4.0
 16584                                  	
 16585                                  	; MSDOS 6.0
 16586 00002883 E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16587                                  
 16588                                  	; MSDOS 3.3
 16589                                  
 16590                                  ; 08/08/2018 - Retro DOS v3.0
 16591                                  ; MSDOS 6.0 
 16592                                  ;---------------------------------------------------------------------------
 16593                                  ;Procedure: NEW_RENAME
 16594                                  ;
 16595                                  ;Input: DS:SI -> raw string with ?
 16596                                  ;	ES:DI -> destination string
 16597                                  ;	DS:BX -> source string
 16598                                  ;Function: replace ? chars of raw string with chars in source string and
 16599                                  ;	   put in destination string
 16600                                  ;Output: ES:DI-> new string
 16601                                  ;---------------------------------------------------------------------------
 16602                                  ;
 16603                                  ;NEW_RENAME:
 16604                                  ;NEWNAM:
 16605                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16606                                  ;	LODSB
 16607                                  ;	CMP	AL,"?"
 16608                                  ;	JNZ	short NOCHG
 16609                                  ;	MOV	AL,[BX] 		; Get replace char
 16610                                  ;NOCHG:
 16611                                  ;	STOSB
 16612                                  ;	INC	BX			; Next replace char
 16613                                  ;	LOOP	NEWNAM
 16614                                  ;	; MSDOS 6.0
 16615                                  ;	;retn
 16616                                  
 16617                                  	; MSDOS 3.3 & MSDOS 6.0
 16618                                  	;mov	byte [ATTRIB],16h
 16619 00002886 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16620 0000288B C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16621 00002890 E8F519                  	call	DEVNAME 		; Check if we built a device name
 16622 00002893 73A1                    	JNC	short BAD_ACC
 16623 00002895 8B1E[6405]              	MOV	BX,[DESTSTART]
 16624 00002899 C42E[8A05]              	LES	BP,[THISDPB]
 16625 0000289D E8CA16                  	call	SETDIRSRCH		; Reset search to start of dir
 16626 000028A0 7294                    	JC	short BAD_ACC 		; Screw up
 16627 000028A2 E87B15                  	call	FINDENTRY		; See if new name already exists
 16628 000028A5 738F                    	JNC	short BAD_ACC 		; Error if found
 16629 000028A7 803E[4A03]00            	CMP	byte [FAILERR],0
 16630 000028AC 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16631 000028AE A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16632 000028B1 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16633 000028B5 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16634                                  
 16635                                  	;mov	al,[RENAMEDMA+32]
 16636 000028B7 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16637 000028BA A810                    	TEST	AL,attr_directory ; 10h
 16638 000028BC 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16639                                  					; otherwise the . and .. entries get
 16640                                  					; wiped.
 16641 000028BE A2[6B05]                	MOV	[ATTRIB],AL
 16642 000028C1 8C1E[A005]              	MOV	[THISSFT+2],DS
 16643                                  
 16644                                  ;hkn; AUXSTACK is in DOSDATA
 16645                                  	;mov	si,[RENAMEDMA+145h]
 16646 000028C5 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16647 000028C8 8936[9E05]              	MOV	[THISSFT],SI
 16648                                  	;mov	word [SI+2],2
 16649 000028CC C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16650 000028D1 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16651 000028D3 E8A821                  	call	RENAME_MAKE		; This is in mknode
 16652 000028D6 7303                    	JNC	short GOT_DEST
 16653                                  BAD_ACCJ:
 16654 000028D8 E95BFF                  	JMP	BAD_ACC
 16655                                  
 16656                                  GOT_DEST:
 16657 000028DB 53                      	push	bx
 16658 000028DC C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16659 000028E0 E88E4B                  	call	ShareEnd		; we need to remove it.
 16660 000028E3 5B                      	pop	bx
 16661                                  
 16662                                  ; A zero length entry with the correct new name has now been made at
 16663                                  ;   [CURBUF+2]:BX.
 16664                                  
 16665 000028E4 C43E[E205]              	LES	DI,[CURBUF]
 16666                                  
 16667                                  	; MSDOS 6.0
 16668                                  	;test	byte [es:di+5],40h
 16669 000028E8 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16670                                  					;LB. if already dirty		  ;AN000;
 16671 000028ED 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16672 000028EF E85533                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16673                                  	;or	byte [es:di+5],40h
 16674 000028F2 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16675                                  yesdirty1:
 16676 000028F7 89DF                    	MOV	DI,BX
 16677                                  	;add	di,11
 16678 000028F9 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16679                                  
 16680                                  ;hkn; RENAMEDMA is in DOSDATA
 16681                                  	;mov	si,[RENAMEDMA+32]
 16682 000028FC BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16683                                  	;mov	cx,21
 16684 000028FF B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16685 00002902 F3A4                    	REP	MOVSB
 16686 00002904 E87B00                  	CALL	GET_SOURCE
 16687 00002907 7276                    	JC	short RENAME_OVER
 16688 00002909 89DF                    	MOV	DI,BX
 16689 0000290B 8E06[E405]              	MOV	ES,[CURBUF+2]
 16690 0000290F B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16691 00002911 AA                      	STOSB				; "free" the source
 16692 00002912 EB13                    	JMP	SHORT DIRTY_IT
 16693                                  
 16694                                  SIMPLE_RENAME:
 16695 00002914 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16696 00002917 7266                    	JC	short RENAME_OVER
 16697 00002919 89DF                    	MOV	DI,BX
 16698 0000291B 8E06[E405]              	MOV	ES,[CURBUF+2]
 16699                                  
 16700                                  ;hkn; NAME1 is in DOSDATA
 16701 0000291F BE[4B05]                	MOV	SI,NAME1		; New Name
 16702 00002922 B90B00                  	MOV	CX,11
 16703 00002925 F3A4                    	REP	MOVSB
 16704                                  DIRTY_IT:
 16705 00002927 8B3E[E205]              	MOV	DI,[CURBUF]
 16706                                  
 16707                                  	; MSDOS 6.0
 16708 0000292B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16709                                  					;LB. if already dirty		  ;AN000;
 16710 00002930 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16711 00002932 E81233                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16712                                  	
 16713 00002935 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16714                                  
 16715                                  ;------------------------------------------------------------------------------
 16716                                  ; Check if the source is a directory of file. If directory rename it to the
 16717                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16718                                  ; previously deleted.
 16719                                  ;------------------------------------------------------------------------------
 16720                                  
 16721                                  yesdirty2:
 16722                                  	; MSDOS 6.0
 16723 0000293A 56                      	PUSH	SI
 16724 0000293B C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16725 0000293F 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16726 00002942 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16727 00002946 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16728 00002948 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16729 0000294B 5E                      	POP	SI
 16730 0000294C EB01                    	JMP	SHORT NOT_DIRTY1
 16731                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16732 0000294E 5E                      	POP	SI
 16733                                  NOT_DIRTY1:				;;BN00X
 16734                                  NEXT_SOURCE:
 16735                                  ;hkn; RENAMEDMA is in DOSDATA
 16736 0000294F BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16737                                  
 16738                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16739                                  ; to enter it before going to RENAME_Next.
 16740                                  
 16741 00002952 E803EA                  	call	ECritDisk
 16742 00002955 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16743                                  				  ;  to FF when we made the prev new file).
 16744 0000295A E88A05                  	call	RENAME_NEXT
 16745                                  
 16746                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16747                                  ; we were before.
 16748                                  
 16749 0000295D 7220                    	JC	short RENAME_OVER
 16750                                  
 16751                                  	;lea	si,[bx+26]
 16752 0000295F 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16753 00002962 E861FD                  	call	REN_DEL_Check
 16754 00002965 7306                    	JNC	short REN_OK2
 16755 00002967 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16756                                  jmp_to_rename_clean: ; 28/12/2022
 16757 0000296A E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16758                                  
 16759                                  ;------------------------------------------------------------------------------
 16760                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16761                                  ; if directory, rename directory name in the Fastopen cache.
 16762                                  ;-----------------------------------------------------------------------------
 16763                                  
 16764                                  REN_OK2:
 16765                                  	; MSDOS 6.0
 16766                                  	;mov	al,[RERNAMEDMA+32]
 16767 0000296D A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16768                                  	;test	al,10h
 16769 00002970 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16770 00002972 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16771                                  	
 16772                                  	; MSDOS 3.3 & MSDOS 6.0
 16773 00002974 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16774                                  jmp_to_builddest: ; 28/12/2022
 16775 00002977 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16776                                  
 16777                                  	; MSDOS 6.0
 16778                                  Ren_Directory:
 16779 0000297A E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16780                                  	;JMP	BUILDDEST
 16781                                  	; 28/12/2022
 16782 0000297D EBF8                    	jmp	short jmp_to_builddest
 16783                                  
 16784                                  RENAME_OVER:
 16785 0000297F F8                      	CLC
 16786                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 16787                                  	; 28/12/2022
 16788 00002980 EBE8                    	jmp	short jmp_to_rename_clean
 16789                                  
 16790                                  ;----------------------------------------------------------------------------
 16791                                  ; Procedure: GET_SOURCE
 16792                                  ;
 16793                                  ; Inputs:
 16794                                  ;	RENAMEDMA has source info
 16795                                  ; Function:
 16796                                  ;	Re-find the source
 16797                                  ; Output:
 16798                                  ;	[CURBUF] set
 16799                                  ;	[CURBUF+2]:BX points to entry
 16800                                  ;	Carry set if error (currently user FAILed to I 24)
 16801                                  ; DS preserved, others destroyed
 16802                                  ;----------------------------------------------------------------------------
 16803                                  
 16804                                  GET_SOURCE:
 16805 00002982 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16806 00002986 C42E[8A05]              	LES	BP,[THISDPB]
 16807 0000298A E8DD15                  	call	SETDIRSRCH
 16808 0000298D 7214                    	JC	short gs_ret_label	; retc
 16809 0000298F E8D518                  	call	STARTSRCH
 16810 00002992 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16811                                  	;call	GETENT
 16812                                  	; 18/12/2022
 16813 00002995 E9A315                  	jmp	GETENT
 16814                                  ;gs_ret_label:
 16815                                  	;retn
 16816                                  
 16817                                  ; MSDOS 6.0 
 16818                                  ;---------------------------------------------------------------------------
 16819                                  ;Procedure: NEW_RENAME
 16820                                  ;
 16821                                  ;Input: DS:SI -> raw string with ?
 16822                                  ;	ES:DI -> destination string
 16823                                  ;	DS:BX -> source string
 16824                                  ;Function: replace ? chars of raw string with chars in source string and
 16825                                  ;	   put in destination string
 16826                                  ;Output: ES:DI-> new string
 16827                                  ;---------------------------------------------------------------------------
 16828                                  
 16829                                  NEW_RENAME:
 16830                                  	; 17/05/2019 - Retro DOS v4.0
 16831                                  NEWNAM:
 16832                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16833 00002998 AC                      	LODSB
 16834 00002999 3C3F                    	CMP	AL,"?" ; 3Fh
 16835 0000299B 7502                    	JNZ	short NOCHG
 16836 0000299D 8A07                    	MOV	AL,[BX] 		; Get replace char
 16837                                  NOCHG:
 16838 0000299F AA                      	STOSB
 16839 000029A0 43                      	INC	BX			; Next replace char
 16840 000029A1 E2F5                    	LOOP	NEWNAM
 16841                                  	; MSDOS 6.0
 16842                                  gs_ret_label:	; 18/12/2022
 16843 000029A3 C3                      	retn
 16844                                  
 16845                                  ;============================================================================
 16846                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16847                                  ;============================================================================
 16848                                  ; 08/08/2018 - Retro DOS v3.0
 16849                                  ; 17/05/2019 - Retro DOS v4.0
 16850                                  
 16851                                  ;**	Low level routines for returning file information and setting file
 16852                                  ;	attributes
 16853                                  ;
 16854                                  ;	GET_FILE_INFO
 16855                                  ;	SET_FILE_ATTRIBUTE
 16856                                  ;
 16857                                  ;	Modification history:
 16858                                  ;
 16859                                  ;	    Created: ARR 30 March 1983
 16860                                  ;
 16861                                  ;	M025: Return access_denied if attempting to set
 16862                                  ;	      attribute of root directory.
 16863                                  ;
 16864                                  
 16865                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16866                                  
 16867                                  ;---------------------------------------------------------------------------
 16868                                  ; Procedure Name : GET_FILE_INFO
 16869                                  ;
 16870                                  ; Inputs:
 16871                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16872                                  ;		terminated)
 16873                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16874                                  ;		( = -1 if current dir not involved, else
 16875                                  ;		 Points to first char after last "/" of current dir part)
 16876                                  ;	[THISCDS] Points to CDS being used
 16877                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16878                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16879                                  ; Function:
 16880                                  ;	Get Information about a file
 16881                                  ; Returns:
 16882                                  ;	CARRY CLEAR
 16883                                  ;	    AX = Attribute of file
 16884                                  ;	    CX = Time stamp of file
 16885                                  ;	    DX = Date stamp of file
 16886                                  ;	    BX:DI = Size of file (32 bit)
 16887                                  ;	CARRY SET
 16888                                  ;	    AX is error code
 16889                                  ;		error_file_not_found
 16890                                  ;			Last element of path not found
 16891                                  ;		error_path_not_found
 16892                                  ;			Bad path (not in curr dir part if present)
 16893                                  ;		error_bad_curr_dir
 16894                                  ;			Bad path in current directory part of path
 16895                                  ; DS preserved, others destroyed
 16896                                  ;---------------------------------------------------------------------------
 16897                                  
 16898                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16899                                  
 16900                                  GET_FILE_INFO:
 16901                                  
 16902                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16903                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16904                                  
 16905 000029A4 E8ECE8                  	call	TestNet
 16906 000029A7 7306                    	JNC	short LOCAL_INFO
 16907                                  
 16908                                  ;IF NOT Installed
 16909                                  ;	transfer NET_GET_FILE_INFO
 16910                                  ;ELSE
 16911                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16912                                  ;	INT	2FH
 16913                                  ;	return
 16914                                  
 16915 000029A9 B80F11                  	mov     ax, 110Fh
 16916 000029AC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16917                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16918                                  			; SDA CDS pointer -> current directory
 16919                                  			; Return: CF set on error, AX = file attributes
 16920 000029AE C3                      	retn
 16921                                  ;ENDIF
 16922                                  
 16923                                  LOCAL_INFO:
 16924 000029AF E8A6E9                  	call	ECritDisk
 16925 000029B2 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16926                                  	; MSDOS 3.3
 16927                                  	;call	GETPATH
 16928                                  	; MSDOS 6.0
 16929 000029B7 E8D800                  	call	GET_FAST_PATH
 16930                                  	; MSDOS 3.3 & MSDOS 6.0
 16931 000029BA 7312                    	JNC	short info_check_dev
 16932                                  NO_PATH:
 16933 000029BC 750B                    	JNZ	short bad_path1
 16934 000029BE 08C9                    	OR	CL,CL
 16935 000029C0 7407                    	JZ	short bad_path1
 16936                                  info_no_file:
 16937 000029C2 B80200                  	MOV	AX,error_file_not_found
 16938                                  BadRet:
 16939 000029C5 F9                      	STC
 16940                                  JustRet:
 16941                                  	;call	LCritDisk
 16942                                  	;retn
 16943                                  	; 18/12/2022
 16944 000029C6 E9AAE9                  	jmp	LCritDisk
 16945                                  
 16946                                  bad_path1:
 16947 000029C9 B80300                  	MOV	AX,error_path_not_found
 16948 000029CC EBF7                    	jmp	short BadRet
 16949                                  
 16950                                  info_check_dev:
 16951 000029CE 08E4                    	OR	AH,AH
 16952 000029D0 78F0                    	JS	short info_no_file	; device
 16953                                  
 16954                                  	; MSDOS 6.0
 16955                                  ;SR;
 16956                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16957                                  ;for a root dir
 16958                                  
 16959 000029D2 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16960 000029D7 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16961                                  
 16962 000029D9 30E4                    	xor	ah,ah
 16963 000029DB B010                    	mov	al,attr_directory ; 10h
 16964                                  	;clc
 16965                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16966                                  	; (DOSCODE:683Eh)
 16967                                  	; 16/12/2022
 16968                                  	;clc
 16969 000029DD EBE7                    	jmp	short JustRet
 16970                                  
 16971                                  not_root:
 16972                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16973 000029DF 1E                      	PUSH	DS
 16974 000029E0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16975 000029E4 89DE                    	MOV	SI,BX
 16976 000029E6 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16977 000029E8 89DF                    	MOV	DI,BX
 16978                                  	;mov	cx,[si+16h]
 16979 000029EA 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16980                                  	;mov	dx,[si+18h]
 16981 000029ED 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 16982 000029F0 30E4                    	XOR	AH,AH
 16983                                  	;mov	al,[si+0Bh]
 16984 000029F2 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 16985                                  	;test	al,10h
 16986 000029F5 A810                    	TEST	AL,attr_directory
 16987 000029F7 7506                    	JNZ	short NO_SIZE
 16988                                  	;mov	di,[si+1Ch]
 16989 000029F9 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 16990                                  	;mov	bx,[si+1Eh]
 16991 000029FC 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 16992                                  NO_SIZE:
 16993 000029FF 1F                      	POP	DS
 16994                                  	;CLC
 16995                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16996                                  	; (DOSCODE:6864h)
 16997                                  	; 16/12/2022
 16998                                  	;clc
 16999 00002A00 EBC4                    	jmp	short JustRet
 17000                                  
 17001                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17002                                  ;-------------------------------------------------------------------------------
 17003                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17004                                  ; Inputs:
 17005                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17006                                  ;		terminated)
 17007                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17008                                  ;		( = -1 if current dir not involved, else
 17009                                  ;		 Points to first char after last "/" of current dir part)
 17010                                  ;	[THISCDS] Points to CDS being used
 17011                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17012                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17013                                  ;	AX is new attributes to give to file
 17014                                  ; Function:
 17015                                  ;	Set File Attributes
 17016                                  ; Returns:
 17017                                  ;	CARRY CLEAR
 17018                                  ;	    No error
 17019                                  ;	CARRY SET
 17020                                  ;	    AX is error code
 17021                                  ;		error_file_not_found
 17022                                  ;			Last element of path not found
 17023                                  ;		error_path_not_found
 17024                                  ;			Bad path (not in curr dir part if present)
 17025                                  ;		error_bad_curr_dir
 17026                                  ;			Bad path in current directory part of path
 17027                                  ;		error_access_denied
 17028                                  ;			Attempt to set an attribute which cannot be set
 17029                                  ;			(attr_directory, attr_volume_ID)
 17030                                  ;		error_sharing_violation
 17031                                  ;			Sharing mode of file did not allow the change
 17032                                  ;			(this request requires exclusive write/read access)
 17033                                  ;			(INT 24H generated)
 17034                                  ; DS preserved, others destroyed
 17035                                  ;----------------------------------------------------------------------------
 17036                                  
 17037                                  SET_FILE_ATTRIBUTE:
 17038                                  
 17039                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17040                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17041                                  
 17042 00002A02 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17043 00002A05 7414                    	JZ	short set_look
 17044                                  _BAD_ACC:
 17045 00002A07 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17046 00002A0C C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17047 00002A11 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17048 00002A16 B80500                  	MOV	AX,error_access_denied ; 5
 17049 00002A19 F9                      	STC
 17050 00002A1A C3                      	retn
 17051                                  
 17052                                  set_look:
 17053 00002A1B E875E8                  	call	TestNet
 17054 00002A1E 7308                    	JNC	short LOCAL_SET
 17055                                  
 17056                                  ;IF NOT Installed
 17057                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17058                                  ;ELSE
 17059 00002A20 50                      	PUSH	AX
 17060                                  	
 17061                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17062                                  	;INT	2FH
 17063                                  
 17064 00002A21 B80E11                  	mov     ax, 110Eh
 17065 00002A24 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17066                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17067                                  			; SDA CDS pointer -> current directory
 17068                                  			; STACK: WORD new file attributes
 17069                                  			; Return: CF set on error
 17070                                  
 17071 00002A26 5B                      	POP	BX			; clean stack
 17072 00002A27 C3                      	retn
 17073                                  ;ENDIF
 17074                                  
 17075                                  LOCAL_SET:
 17076 00002A28 E82DE9                  	call	ECritDisk
 17077 00002A2B 50                      	PUSH	AX			; Save new attributes
 17078 00002A2C C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17079 00002A31 E89615                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17080 00002A34 7303                    	JNC	short set_check_device
 17081 00002A36 5B                      	POP	BX			; Clean stack (don't zap AX)
 17082 00002A37 EB83                    	JMP	short NO_PATH
 17083                                  
 17084                                  set_check_device:
 17085 00002A39 08E4                    	OR	AH,AH
 17086 00002A3B 7906                    	JNS	short set_check_share
 17087 00002A3D 58                      	POP	AX
 17088 00002A3E E832E9                  	call	LCritDisk
 17089 00002A41 EBC4                    	JMP	short _BAD_ACC 		; device
 17090                                  
 17091                                  set_check_share:
 17092 00002A43 58                      	POP	AX			; Get new attributes
 17093                                  
 17094                                  	; MSDOS 6.0
 17095 00002A44 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17096 00002A49 740A                    	je	short cannot_set_root	; M025: Y: return error
 17097                                  
 17098                                  	; MSDOS 3.3 & MSDOS 6.0
 17099 00002A4B E878FC                  	call	REN_DEL_Check
 17100 00002A4E 730B                    	JNC	short set_do
 17101 00002A50 B82000                  	MOV	AX,error_sharing_violation ; 32
 17102 00002A53 EB3A                    	jmp	short OK_BYE
 17103                                  
 17104                                  	; MSDOS 6.0
 17105                                  cannot_set_root:			; M025:
 17106 00002A55 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17107 00002A58 F9                      	stc				; M025: to set attr. of root
 17108 00002A59 EB34                    	jmp	short OK_BYE		; M025:
 17109                                  
 17110                                  set_do:
 17111                                  	; MSDOS 3.3 & MSDOS 6.0
 17112 00002A5B C43E[E205]              	LES	DI,[CURBUF]
 17113 00002A5F 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17114 00002A64 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17115                                  
 17116                                  	; MSDOS 6.0
 17117 00002A68 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17118                                  					;LB. if already dirty		  ;AN000;
 17119 00002A6D 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17120 00002A6F E8D531                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17121                                  	
 17122 00002A72 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17123                                  yesdirty3:
 17124 00002A77 A0[7605]                	MOV	AL,[THISDRV]
 17125                                  ;;;; 10/1/86 F.C update fastopen cache
 17126 00002A7A 52                      	PUSH	DX
 17127 00002A7B 57                      	PUSH	DI
 17128 00002A7C B400                    	MOV	AH,0		  ; dir entry update
 17129 00002A7E 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17130 00002A80 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17131 00002A82 E8DEFC                  	call	FastOpen_Update
 17132 00002A85 5F                      	POP	DI
 17133 00002A86 5A                      	POP	DX
 17134                                  ;;;; 9/11/86 F.C update fastopen cache
 17135 00002A87 E8B530                  	call	FLUSHBUF
 17136 00002A8A 7303                    	JNC	short OK_BYE
 17137 00002A8C B80200                  	MOV	AX,error_file_not_found
 17138                                  OK_BYE:
 17139                                  	;call	LCritDisk
 17140                                  	;retn
 17141                                  	; 16/12/2022
 17142 00002A8F E9E1E8                  	jmp	LCritDisk
 17143                                  
 17144                                  	; 17/05/2019 - Retro DOS v4.0
 17145                                  
 17146                                  	; MSDOS 6.0
 17147                                  GET_FAST_PATH:
 17148                                  ;hkn; use SS override for FastOpenFlg
 17149 00002A92 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17150                                  					;FO. trigger fastopen	;AN000;
 17151 00002A98 E82F15                  	call	GETPATH
 17152 00002A9B 9C                      	PUSHF			 	;FO.			;AN000;
 17153 00002A9C 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17154                                  					;FO. clear all fastopen flags ;AN000;
 17155 00002AA2 9D                      	POPF				;FO.			;AN000;
 17156 00002AA3 C3                      	retn
 17157                                  
 17158                                  ;============================================================================
 17159                                  ; DUP.ASM, MSDOS 6.0, 1991
 17160                                  ;============================================================================
 17161                                  ; 08/08/2018 - Retro DOS v3.0
 17162                                  ; 17/05/2019 - Retro DOS v4.0
 17163                                  
 17164                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17165                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17166                                  ;
 17167                                  ;	DOS_DUP
 17168                                  ;
 17169                                  ;	Modification history:
 17170                                  ;
 17171                                  ;	  Created: ARR 30 March 1983
 17172                                  
 17173                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17174                                  ;---------------------------------------------------------------------------
 17175                                  ; Procedure Name : DOS_DUP
 17176                                  ;
 17177                                  ; Inputs:
 17178                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17179                                  ;		(a non net SFT is OK, in this case the ref
 17180                                  ;		 count is simply incremented)
 17181                                  ; Function:
 17182                                  ;	Signal to the devices that a logical open is occurring
 17183                                  ; Returns:
 17184                                  ;	ES:DI point to SFT
 17185                                  ;    Carry clear
 17186                                  ;	SFT ref_count is incremented
 17187                                  ; Registers modified: None.
 17188                                  ; NOTE:
 17189                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17190                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17191                                  ;	that time.
 17192                                  ;---------------------------------------------------------------------------
 17193                                  
 17194                                  DOS_DUP:
 17195                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17196                                  
 17197                                  	; MSDOS 6.0
 17198 00002AA4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17199 00002AA9 26C43E[9E05]            	les	di,[es:THISSFT]
 17200                                  
 17201                                  	;Entry	Dos_Dup_Direct
 17202                                  DOS_Dup_Direct:
 17203 00002AAE E8FBE7                  	call	IsSFTNet
 17204 00002AB1 7503                    	JNZ	short DO_INC
 17205 00002AB3 E8ED1B                  	call	DEV_OPEN_SFT
 17206                                  DO_INC:
 17207                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17208 00002AB6 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17209                                  					;   we're in big trouble anyway)
 17210 00002AB9 C3                      	retn
 17211                                  
 17212                                  ;============================================================================
 17213                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17214                                  ;============================================================================
 17215                                  ; 08/08/2018 - Retro DOS v3.0
 17216                                  ; 18/05/2019 - Retro DOS v4.0
 17217                                  
 17218                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17219                                  ;NAME	DOS_CREATE
 17220                                  ;----------------------------------------------------------------------------
 17221                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17222                                  ;
 17223                                  ;	DOS_CREATE
 17224                                  ;	DOS_CREATE_NEW
 17225                                  ;	SET_MKND_ERR
 17226                                  ;	SET_Media_ID
 17227                                  ;	SET_EXT_Mode
 17228                                  ;
 17229                                  ;	Revision history:
 17230                                  ;
 17231                                  ;	    A000 version 4.00	  Jan. 1988
 17232                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17233                                  
 17234                                  ;Installed = TRUE
 17235                                  
 17236                                  ;	i_need	THISSFT,DWORD
 17237                                  ;	i_need	THISCDS,DWORD
 17238                                  ;	I_need	EXTERR,WORD
 17239                                  ;	I_Need	ExtErr_locus,BYTE
 17240                                  ;	I_need	JShare,DWORD
 17241                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17242                                  ;	I_need	SATTRIB,BYTE
 17243                                  ;	I_need	CALLVIDM,DWORD
 17244                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17245                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17246                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17247                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17248                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17249                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17250                                  
 17251                                  ;***	DOS_CREATE - Create a File
 17252                                  ;----------------------------------------------------------------------------
 17253                                  ;	DOS_Create is called to create the specified file, truncating
 17254                                  ;	the old one if it exists.
 17255                                  ;
 17256                                  ;	ENTRY	AX is Attribute to create
 17257                                  ;		(ds) = DOSDATA
 17258                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17259                                  ;			terminated)
 17260                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17261                                  ;			( = -1 if current dir not involved, else
 17262                                  ;			 Points to first char after last "/" of current dir part)
 17263                                  ;		[THISCDS] Points to CDS being used
 17264                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17265                                  ;		[THISSFT] Points to SFT to fill in if file created
 17266                                  ;			(sf_mode field set so that FCB may be detected)
 17267                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17268                                  ;
 17269                                  ;	EXIT	sf_ref_count is NOT altered
 17270                                  ;		CARRY CLEAR
 17271                                  ;		    THISSFT filled in.
 17272                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17273                                  ;		CARRY SET
 17274                                  ;		    AX is error code
 17275                                  ;			error_path_not_found
 17276                                  ;				Bad path (not in curr dir part if present)
 17277                                  ;			error_bad_curr_dir
 17278                                  ;				Bad path in current directory part of path
 17279                                  ;			error_access_denied
 17280                                  ;				Attempt to re-create read only file , or
 17281                                  ;				create a second volume id or create a dir
 17282                                  ;			error_sharing_violation
 17283                                  ;				The sharing mode was correct but not allowed
 17284                                  ;				generates an INT 24
 17285                                  ;	USES	all but DS
 17286                                  ;----------------------------------------------------------------------------
 17287                                  
 17288                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17289                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17290                                  
 17291                                  DOS_CREATE:
 17292                                  	; 18/05/2019 - Retro DOS v4.0
 17293                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17294                                  
 17295                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17296                                  ;hkn; this point.
 17297                                  
 17298 00002ABA 30E4                    	XOR	AH,AH		; Truncate is OK
 17299                                  
 17300                                  ;	Enter here from Dos_Create_New
 17301                                  ;
 17302                                  ;	(ah) = 0 iff truncate OK
 17303                                  
 17304                                  Create_inter:
 17305 00002ABC A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17306                                  				; Mask out any meaningless bits
 17307 00002ABE 7511                    	JNZ	short AttErr
 17308 00002AC0 A808                    	TEST	AL,attr_volume_id
 17309 00002AC2 7407                    	JZ	short NoReset
 17310                                  	
 17311                                  	; MSDOS 6.0
 17312                                  	; 16/12/2022
 17313 00002AC4 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17314                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17315                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17316                                  	
 17317 00002AC9 B008                    	MOV	AL,attr_volume_id ; 8
 17318                                  NoReset:
 17319 00002ACB 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17320 00002ACD A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17321 00002ACF 740A                    	JZ	short ATT_OK
 17322                                  AttErr:
 17323 00002AD1 B80500                  	MOV	AX,5		; Attribute problem
 17324 00002AD4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17325 00002AD9 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17326                                  				   ;	attr_device to be set.
 17327                                  ATT_OK:
 17328 00002ADB C43E[9E05]              	LES	DI,[THISSFT]
 17329 00002ADF 06                      	PUSH	ES
 17330 00002AE0 C436[A205]              	LES	SI,[THISCDS]
 17331 00002AE4 83FEFF                  	CMP	SI,-1
 17332 00002AE7 751D                    	JNE	short TEST_RE_NET
 17333                                  
 17334                                  ;	No CDS, it must be redirected.
 17335                                  
 17336 00002AE9 07                      	POP	ES
 17337                                  
 17338                                  	; MSDOS 6.0
 17339                                  ;Extended open hooks
 17340                                  	;test	byte [EXTOPEN_ON],1
 17341 00002AEA F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17342 00002AEF 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17343                                  IFS_extopen:				    ;AN000;EO.
 17344 00002AF1 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17345                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17346 00002AF2 B82E11                  	mov	ax,112Eh
 17347 00002AF5 CD2F                    	INT	2FH			    ;AN000;EO.
 17348 00002AF7 5B                      	POP	BX			    ;AN000;EO. trash bx
 17349 00002AF8 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17350 00002AFD C3                      	retn				    ;AN000;EO.
 17351                                  NOEXTOP:				    ;AN000;
 17352                                  ;Extended open hooks
 17353                                  
 17354                                  ;IF NOT Installed
 17355                                  ;	transfer NET_SEQ_CREATE
 17356                                  ;ELSE
 17357 00002AFE 50                      	PUSH	AX
 17358                                  
 17359                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17360                                  	;INT	2FH
 17361                                  
 17362 00002AFF B81811                  	mov     ax,1118h
 17363 00002B02 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17364                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17365                                  			; SDA first filename pointer -> fully-qualified name of file
 17366                                  			; STACK: WORD file creation mode???
 17367                                  
 17368 00002B04 5B                      	POP	BX			; BX is trashed anyway
 17369 00002B05 C3                      	retn
 17370                                  ;ENDIF
 17371                                  
 17372                                  ;	We have a CDS. See if it's network
 17373                                  
 17374                                  TEST_RE_NET:
 17375                                  	;;test	word [es:si+43h],8000h
 17376                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17377                                  	; 07/12/2022
 17378                                  	;test	byte [es:si+44h],80h
 17379                                  	; 17/12/2022
 17380 00002B06 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17381 00002B0B 07                      	POP	ES
 17382 00002B0C 7419                    	JZ	short LOCAL_CREATE
 17383                                  
 17384                                  	; MSDOS 6.0
 17385 00002B0E E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17386 00002B11 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17387                                  	;;or	word [es:di+2],2
 17388                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17389                                  	; 17/12/2022
 17390 00002B13 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17391                                  
 17392                                  ;Extended open hooks
 17393                                  dochk:
 17394 00002B18 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17395 00002B1D 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17396                                  ;Extended open hooks
 17397                                  
 17398                                  ;IF NOT Installed
 17399                                  ;	transfer NET_CREATE
 17400                                  ;ELSE
 17401 00002B1F 50                      	PUSH	AX
 17402                                  	
 17403                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17404                                  	;INT	2FH
 17405                                  	
 17406 00002B20 B81711                  	mov     ax,1117h
 17407 00002B23 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17408                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17409                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17410                                  			; SDA CDS pointer -> current directory
 17411                                  			; Return: CF set on error
 17412                                  
 17413 00002B25 5B                      	POP	BX			; BX is trashed anyway
 17414                                  ;nomore:
 17415 00002B26 C3                      	retn
 17416                                  ;ENDIF
 17417                                  
 17418                                  ;**	It's a local create. We have a local CDS for it.
 17419                                  
 17420                                  LOCAL_CREATE:
 17421                                  	; MSDOS 6.0
 17422 00002B27 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17423 00002B2A 7205                    	JC	short setdone	;AN000;EO.
 17424                                  	
 17425                                  	; MSDOS 3.3 & MSDOS 6.0
 17426                                  	; 17/12/2022
 17427                                  	;;or	word [es:di+2],2
 17428                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17429                                  	;or	byte [es:di+2],2
 17430 00002B2C 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17431                                  setdone:
 17432 00002B31 E824E8                  	call	ECritDisk
 17433 00002B34 E8211F                  	call	MakeNode
 17434 00002B37 7317                    	JNC	short Create_ok
 17435 00002B39 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17436 00002B3E E832E8                  	call	LCritDisk
 17437                                  
 17438                                  	;entry	SET_MKND_ERR
 17439                                  SET_MKND_ERR:
 17440                                  
 17441                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17442                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17443                                  
 17444                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17445 00002B41 BB[482B]                	MOV     BX,CRTERRTAB
 17446                                  	;XLAT  ; MSDOS 3.3
 17447                                  	; 18/05/2019 - Retro DOS v4.0
 17448 00002B44 2E                      	CS
 17449 00002B45 D7                      	XLAT
 17450                                  CreatBadRet:
 17451 00002B46 F9                      	STC
 17452 00002B47 C3                      	retn
 17453                                  
 17454                                  ; 13/05/2019 - Retro DOS v4.0
 17455                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17456                                  ; ---------------------------------------------------------------------------
 17457                                  
 17458                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17459                                  
 17460                                  ; 17/07/2018 - Retro DOS v3.0
 17461                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17462                                  
 17463                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17464                                  ;	db	0,5,52h,50h,3,5,20h
 17465                                  
 17466                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17467                                  ;	db	0,5,52h,50h,3,5,20h,2
 17468                                  
 17469                                  ; 08/08/2018
 17470                                  
 17471                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17472 00002B48 00                      	DB	0			; none
 17473 00002B49 05                      	DB	error_access_denied	; MakeNode error 1
 17474 00002B4A 52                      	DB	error_cannot_make	; MakeNode error 2
 17475 00002B4B 50                      	DB	error_file_exists	; MakeNode error 3
 17476 00002B4C 03                      	DB	error_path_not_found	; MakeNode error 4
 17477 00002B4D 05                      	DB	error_access_denied	; MakeNode error 5
 17478 00002B4E 20                      	DB	error_sharing_violation ; MakeNode error 6
 17479                                  	; MSDOS 6.0
 17480 00002B4F 02                      	DB	error_file_not_found	; MakeNode error 7
 17481                                  
 17482                                  ; ---------------------------------------------------------------------------
 17483                                  
 17484                                  ; We have just created a new file. This results in the truncation of old
 17485                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17486                                  ; file to the current size.
 17487                                  
 17488                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17489                                  ; drive number to force a Build BPB after Media Check.
 17490                                  
 17491                                  ;;; FASTOPEN 8/29/86
 17492                                  Create_ok:
 17493 00002B50 E8E1FB                  	call	FastOpen_Delete
 17494                                  ;;; FASTOPEN 8/29/86
 17495 00002B53 A0[6D05]                	mov	al,[SATTRIB]
 17496 00002B56 A808                    	test	al,attr_volume_id
 17497 00002B58 741C                    	jz	short NoVolLabel
 17498 00002B5A C43E[A205]              	LES	DI,[THISCDS]
 17499                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17500 00002B5E 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17501 00002B61 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17502 00002B64 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17503                                  	
 17504                                  	; 18/05/2019 - Retro DOS v4.0
 17505                                  
 17506                                  	; MSDOS 6.0
 17507 00002B68 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17508 00002B6A E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17509                                  	
 17510 00002B6D E8E8E7                  	call	ECritDisk
 17511 00002B70 E85E2C                  	call	FATREAD_CDS		; force a media check
 17512 00002B73 E8FDE7                  	call	LCritDisk
 17513                                  
 17514                                  NoVolLabel:
 17515 00002B76 B80200                  	MOV	ax,2
 17516 00002B79 C43E[9E05]              	LES	DI,[THISSFT]
 17517                                  ;if installed
 17518                                  	;call	JShare + 14 * 4
 17519 00002B7D FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17520                                  ;else
 17521                                  ;	Call	ShSU
 17522                                  ;endif
 17523 00002B81 E8EFE7                  	call	LCritDisk
 17524 00002B84 E94901                  	jmp	SET_SFT_MODE
 17525                                  
 17526                                  ;---------------------------------------------------------------------------
 17527                                  ; Procedure Name : Dos_Create_New
 17528                                  ;
 17529                                  ; Inputs:
 17530                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17531                                  ;		terminated)
 17532                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17533                                  ;		( = -1 if current dir not involved, else
 17534                                  ;		 Points to first char after last "/" of current dir part)
 17535                                  ;	[THISCDS] Points to CDS being used
 17536                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17537                                  ;	[THISSFT] Points to SFT to fill in if file created
 17538                                  ;		(sf_mode field set so that FCB may be detected)
 17539                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17540                                  ;	AX is Attribute to create
 17541                                  ; Function:
 17542                                  ;	Try to create the specified file truncating an old one that exists
 17543                                  ; Outputs:
 17544                                  ;	sf_ref_count is NOT altered
 17545                                  ;	CARRY CLEAR
 17546                                  ;	    THISSFT filled in.
 17547                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17548                                  ;	CARRY SET
 17549                                  ;	    AX is error code
 17550                                  ;		error_path_not_found
 17551                                  ;			Bad path (not in curr dir part if present)
 17552                                  ;		error_bad_curr_dir
 17553                                  ;			Bad path in current directory part of path
 17554                                  ;		error_access_denied
 17555                                  ;			Create a second volume id or create a dir
 17556                                  ;		error_file_exists
 17557                                  ;			Already a file by this name
 17558                                  ; DS preserved, others destroyed
 17559                                  ;---------------------------------------------------------------------------
 17560                                  
 17561                                  DOS_Create_New:
 17562 00002B87 B401                    	MOV	AH,1		; Truncate is NOT OK
 17563 00002B89 E930FF                  	JMP	Create_inter
 17564                                  
 17565                                  ; MSDOS 6.0
 17566                                  ;---------------------------------------------------------------------------
 17567                                  ; Procedure Name : Set_Media_ID
 17568                                  ;
 17569                                  ; Inputs:
 17570                                  ;	NAME1= Volume ID
 17571                                  ;	BH= 0, delete volume id
 17572                                  ;	    1, set new volume id
 17573                                  ;	DS= DOSGROUP
 17574                                  ; Function:
 17575                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17576                                  ; Outputs:
 17577                                  ;	CARRY CLEAR
 17578                                  ;	    volume id set
 17579                                  ;	CARRY SET
 17580                                  ;	    AX is error code
 17581                                  ;---------------------------------------------------------------------------
 17582                                  
 17583                                  	; 18/05/2019 - Retro DOS v4.0
 17584                                  Set_Media_ID:
 17585 00002B8C 50                      	PUSH	AX		;AN000;;>32mb
 17586 00002B8D 06                      	PUSH	ES		;AN000;;>32mb
 17587 00002B8E 57                      	PUSH	DI		;AN000;;>32mb
 17588                                  
 17589 00002B8F FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17590 00002B91 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17591 00002B93 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17592 00002B95 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17593                                  
 17594                                  ;hkn; PACKET_TEMP is in DOSDATA
 17595 00002B98 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17596                                  
 17597 00002B9B 53                      	PUSH	BX		;AN000;;>32mb
 17598 00002B9C 52                      	PUSH	DX		;AN000;;>32mb
 17599 00002B9D 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17600                                  
 17601                                  	;invoke	$IOCTL		;AN000;;>32mb
 17602 00002B9F E83EF7                  	call	_$IOCTL	
 17603                                  
 17604 00002BA2 5A                      	POP	DX		;AN000;;>32mb
 17605 00002BA3 5B                      	POP	BX		;AN000;;>32mb
 17606 00002BA4 7224                    	JC	short geterr	;AN000;;>32mb
 17607                                  
 17608 00002BA6 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17609 00002BA8 7405                    	JZ	short NoName	;AN000;>32mb yes
 17610                                  
 17611                                  ;hkn; NAME1 is in DOSDATA
 17612 00002BAA BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17613                                  
 17614 00002BAD EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17615                                  NoName: 			;AN000;
 17616                                  
 17617                                  ;hkn; NO_NAME_ID is in DOSDATA
 17618 00002BAF BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17619                                  
 17620                                  doset:				;AN000;
 17621 00002BB2 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17622                                  	;add	di,6
 17623 00002BB4 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17624                                  
 17625                                  ;hkn; ES & DS must point to SS
 17626                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17627 00002BB7 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17628                                  
 17629 00002BB8 1F                      	POP	DS		;AN000;;>32mb
 17630                                  
 17631                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17632 00002BB9 16                      	PUSH	SS		;AN000;;>32mb
 17633                                  
 17634 00002BBA 07                      	POP	ES		;AN000;;>32mb
 17635 00002BBB B90B00                  	MOV	CX,11		;AN000;;>32mb
 17636 00002BBE F3A4                    	REP	MOVSB		;AN000;;>32mb
 17637 00002BC0 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17638 00002BC3 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17639 00002BC5 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17640                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17641 00002BC7 E816F7                  	call	_$IOCTL	
 17642                                  geterr: 			;AN000;
 17643                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17644 00002BCA 16                      	PUSH	SS		;AN000;>32mb
 17645                                  
 17646 00002BCB 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17647                                  
 17648 00002BCC 5F                      	POP	DI		;AN000;;>32mb
 17649 00002BCD 07                      	POP	ES		;AN000;;>32mb
 17650 00002BCE 58                      	POP	AX		;AN000;;>32mb
 17651 00002BCF C3                      	retn			;AN000;>32mb
 17652                                  
 17653                                  ; MSDOS 6.0
 17654                                  ;---------------------------------------------------------------------------
 17655                                  ; Procedure Name : Set_EXT_mode
 17656                                  ;
 17657                                  ; Inputs:
 17658                                  ;	[EXTOPEN_ON]= flag for extended open
 17659                                  ;	SAVE_BX= mode specified in Extended Open
 17660                                  ; Function:
 17661                                  ;	Set mode in ThisSFT
 17662                                  ; Outputs:
 17663                                  ;	carry set,mode is set if from Extended Open
 17664                                  ;	carry clear, mode not set yet
 17665                                  ;---------------------------------------------------------------------------
 17666                                  
 17667                                  ; 13/05/2019 - Retro DOS v4.0
 17668                                  
 17669                                  Set_EXT_mode:
 17670                                  
 17671                                  ;hkn; SS override
 17672 00002BD0 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17673 00002BD6 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17674 00002BD8 50                      	PUSH	AX			    ;AN000;EO.
 17675                                  
 17676                                  ;hkn; SS override
 17677 00002BD9 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17678                                  	;or	[es:di+2],ax
 17679 00002BDD 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17680 00002BE1 58                      	POP	AX			    ;AN000;EO.
 17681 00002BE2 F9                      	STC				    ;AN000;EO.
 17682                                  NOTEX:					    ;AN000;
 17683 00002BE3 C3                      	retn				    ;AN000;EO.
 17684                                  
 17685                                  ;============================================================================
 17686                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17687                                  ;============================================================================
 17688                                  ; 08/08/2018 - Retro DOS v3.0
 17689                                  ; 18/05/2019 - Retro DOS v4.0
 17690                                  
 17691                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17692                                  ;	NAME	DOS_OPEN
 17693                                  
 17694                                  ;**	OPEN.ASM - File Open
 17695                                  ;----------------------------------------------------------------------------
 17696                                  ;	Low level routines for openning a file from a file spec.
 17697                                  ;	Also misc routines for sharing errors
 17698                                  ;
 17699                                  ;	DOS_Open
 17700                                  ;	Check_Access_AX
 17701                                  ;	SHARE_ERROR
 17702                                  ;	SET_SFT_MODE
 17703                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17704                                  ;
 17705                                  ;	Revision history:
 17706                                  ;
 17707                                  ;	    Created: ARR 30 March 1983
 17708                                  ;	    A000	version 4.00   Jan. 1988
 17709                                  ;
 17710                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17711                                  ; 	       remote extended opens and not save_cx.
 17712                                  ;
 17713                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17714                                  ;	       on the stack before calling off to the redir.
 17715                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17716                                  ;	       to handle open from exec. In this case set the appropriate bit
 17717                                  ;	       else do not.
 17718                                  ;----------------------------------------------------------------------------	
 17719                                  
 17720                                  ;Installed = TRUE
 17721                                  
 17722                                  ;	i_need	NoSetDir,BYTE
 17723                                  ;	i_need	THISSFT,DWORD
 17724                                  ;	i_need	THISCDS,DWORD
 17725                                  ;	i_need	CURBUF,DWORD
 17726                                  ;	i_need	CurrentPDB,WORD
 17727                                  ;	i_need	CURR_DIR_END,WORD
 17728                                  ;	I_need	RetryCount,WORD
 17729                                  ;	I_need	Open_Access,BYTE
 17730                                  ;	I_need	fSharing,BYTE
 17731                                  ;	i_need	JShare,DWORD
 17732                                  ;	I_need	FastOpenFlg,byte
 17733                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17734                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17735                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17736                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17737                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17738                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17739                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17740                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17741                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17742                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17743                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17744                                  ;
 17745                                  ;	I_need	DOS_FLAG,BYTE
 17746                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17747                                  
 17748                                  ;Break	<DOS_Open - internal file access>
 17749                                  ;---------------------------------------------------------------------------
 17750                                  ; Procedure Name : DOS_Open
 17751                                  ;
 17752                                  ; Inputs:
 17753                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17754                                  ;		terminated)
 17755                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17756                                  ;		( = -1 if current dir not involved, else
 17757                                  ;		 Points to first char after last "/" of current dir part)
 17758                                  ;	[THISCDS] Points to CDS being used
 17759                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17760                                  ;	[THISSFT] Points to SFT to fill in if file found
 17761                                  ;		(sf_mode field set so that FCB may be detected)
 17762                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17763                                  ;	AX is Access and Sharing mode
 17764                                  ;	  High NIBBLE of AL (Sharing Mode)
 17765                                  ;		sharing_compat	   file is opened in compatibility mode
 17766                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17767                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17768                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17769                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17770                                  ;	  Low NIBBLE of AL (Access Mode)
 17771                                  ;		open_for_read	file is opened for reading
 17772                                  ;		open_for_write	file is opened for writing
 17773                                  ;		open_for_both	file is opened for both reading and writing.
 17774                                  ;
 17775                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17776                                  ;		(not checked)
 17777                                  ; Function:
 17778                                  ;	Try to open the specified file
 17779                                  ; Outputs:
 17780                                  ;	sf_ref_count is NOT altered
 17781                                  ;	CARRY CLEAR
 17782                                  ;	    THISSFT filled in.
 17783                                  ;	CARRY SET
 17784                                  ;	    AX is error code
 17785                                  ;		error_file_not_found
 17786                                  ;			Last element of path not found
 17787                                  ;		error_path_not_found
 17788                                  ;			Bad path (not in curr dir part if present)
 17789                                  ;		error_bad_curr_dir
 17790                                  ;			Bad path in current directory part of path
 17791                                  ;		error_invalid_access
 17792                                  ;			Bad sharing mode or bad access mode or bad combination
 17793                                  ;		error_access_denied
 17794                                  ;			Attempt to open read only file for writting, or
 17795                                  ;			open a directory
 17796                                  ;		error_sharing_violation
 17797                                  ;			The sharing mode was correct but not allowed
 17798                                  ;			generates an INT 24 on compatibility mode SFTs
 17799                                  ; DS preserved, others destroyed
 17800                                  ;----------------------------------------------------------------------------
 17801                                  
 17802                                  ; 18/05/2019 - Retro DOS v4.0
 17803                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17804                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17805                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17806                                  
 17807                                  DOS_OPEN:
 17808                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17809                                  
 17810 00002BE4 C606[4C03]00            	MOV	byte [NoSetDir],0
 17811 00002BE9 E83601                  	CALL	Check_Access_AX
 17812 00002BEC 722B                    	JC	short do_ret_label	    ; retc
 17813                                  
 17814 00002BEE C43E[9E05]              	LES	DI,[THISSFT]
 17815 00002BF2 30E4                    	XOR	AH,AH
 17816                                  
 17817                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17818                                  
 17819 00002BF4 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17820 00002BF8 06                      	PUSH	ES
 17821 00002BF9 C436[A205]              	LES	SI,[THISCDS]
 17822                                  	; 18/08/2018
 17823 00002BFD 83FEFF                  	CMP	SI,-1
 17824 00002C00 7530                    	JNZ	short TEST_RE_NET1
 17825 00002C02 07                      	POP	ES
 17826                                  
 17827                                  	; MSDOS 6.0
 17828                                  ;Extended open hooks
 17829 00002C03 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17830 00002C08 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17831                                  _IFS_extopen:									;AN000;
 17832 00002C0A A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17833                                  					    ; with which call was made. This
 17834                                  					    ; has the open access bits. 
 17835                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17836                                  	
 17837 00002C0D 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17838                                  	;mov	ax,112Eh
 17839                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17840 00002C0E B82E11                  	mov	ax,(MultNET*256)+46 
 17841 00002C11 CD2F                    	INT	2FH			    ;FT.				;AN000;
 17842 00002C13 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17843 00002C14 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17844                                  
 17845                                  do_ret_label:
 17846 00002C19 C3                      	retn				    ;FT.				;AN000;
 17847                                  _NOEXTOP:
 17848                                  ;Extended open hooks
 17849                                  	;
 17850                                  ;IF NOT Installed
 17851                                  	;transfer NET_SEQ_OPEN
 17852                                  ;ELSE
 17853                                  	
 17854                                  do_net_int2f:
 17855 00002C1A F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17856 00002C1F 7409                    	jz	short not_exec_open	; N: just do net open
 17857                                  					; Y: check to see if redir is aware
 17858                                  					;    of this 
 17859                                  	
 17860                                  					; M042 - start
 17861                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17862 00002C21 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17863                                  					; Q: does this redir know how to 
 17864                                  					;    this
 17865 00002C26 7402                    	jz	short not_exec_open	; N: just do net open
 17866                                  					; Y: set bit 3 of access byte and 
 17867                                  					;    set sharing mode to DENY_WRITE
 17868                                  					; M042 - end
 17869                                  	
 17870                                  	; NOTE: This specific mode has not been set for the code assembled
 17871                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17872                                  	; always one.
 17873                                  					; M035 - set the bits on the stack
 17874                                  	;mov	al,23h
 17875 00002C28 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17876                                  	
 17877                                  not_exec_open:
 17878                                  	; MSDOS 3.3 & MSDOS 6.0
 17879 00002C2A 50                      	PUSH	AX
 17880                                  
 17881                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17882                                  	;INT	2FH
 17883                                  
 17884 00002C2B B81611                  	mov     ax,1116h
 17885 00002C2E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17886                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17887                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17888                                  			; STACK: WORD file open mode
 17889                                  			; Return: CF set on error
 17890                                  
 17891 00002C30 5B                      	POP	BX			; clean stack
 17892                                  ;do_ret_label: ; 09/08/2018
 17893 00002C31 C3                      	retn
 17894                                  ;ENDIF
 17895                                  
 17896                                  TEST_RE_NET1:
 17897                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17898                                  	; 17/12/2022
 17899 00002C32 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17900 00002C37 07                      	POP	ES
 17901                                  	; 18/05/2019
 17902 00002C38 7409                    	JZ	short LOCAL_OPEN
 17903                                  
 17904                                  ;Extended open hooks
 17905                                  	; MSDOS 6.0
 17906 00002C3A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17907 00002C3F 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17908                                  ;Extended open hooks
 17909                                  
 17910                                  ;IF NOT Installed
 17911                                  ;	transfer NET_OPEN
 17912                                  ;ELSE
 17913 00002C41 EBD7                    	jmp	short do_net_int2f
 17914                                  ;ENDIF
 17915                                  
 17916                                  LOCAL_OPEN:
 17917                                  	; MSDOS 3.3 & MSDOS 6.0
 17918 00002C43 E812E7                  	call	ECritDisk
 17919                                  
 17920                                  ; DOS 3.3 FastOPen 6/16/86
 17921                                  
 17922                                  	;or	byte [FastOpenFlg],5
 17923 00002C46 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17924                                  
 17925 00002C4B E87C13                  	call	GETPATH
 17926                                  
 17927                                  ; DOS 3.3 FastOPen 6/16/86
 17928                                  
 17929 00002C4E 731D                    	JNC	short Open_found
 17930 00002C50 7511                    	JNZ	short bad_path2
 17931 00002C52 08C9                    	OR	CL,CL
 17932 00002C54 740D                    	JZ	short bad_path2
 17933                                  OpenFNF:
 17934 00002C56 B80200                  	MOV	AX,error_file_not_found	; 2
 17935                                  OpenBadRet:
 17936                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17937                                  	; 12/08/2018
 17938                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17939                                  	; MSDOS 6.0
 17940 00002C59 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17941 00002C5F F9                      	STC
 17942                                  	;call	LCritDisk
 17943                                  	; 16/12/2022
 17944 00002C60 E910E7                  	jmp	LCritDisk
 17945                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17946                                  	;retn 	; 08/09/2018
 17947                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17948                                  	;jmp	Clear_FastOpen
 17949                                  
 17950                                  bad_path2:
 17951 00002C63 B80300                  	MOV	AX,error_path_not_found	; 3
 17952 00002C66 EBF1                    	JMP	short OpenBadRet
 17953                                  
 17954                                  Open_Bad_Access:
 17955 00002C68 B80500                  	MOV	AX,error_access_denied	; 5
 17956 00002C6B EBEC                    	JMP	short OpenBadRet
 17957                                  
 17958                                  Open_found:
 17959 00002C6D 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17960 00002C6F 08E4                    	OR	AH,AH
 17961 00002C71 783E                    	JS	short open_ok		; Devices don't have attributes
 17962 00002C73 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17963                                  	;mov	al,[es:bx+0Bh]
 17964 00002C77 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17965 00002C7B A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17966 00002C7D 75E9                    	JNZ	short Open_Bad_Access
 17967 00002C7F A801                    	TEST	AL,attr_read_only	; check write on read only
 17968 00002C81 742E                    	JZ	short open_ok
 17969                                  
 17970                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17971                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17972                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17973                                  ; processing until the actual write operation:
 17974                                  ;
 17975                                  ; If FCB, then we change the mode to be read_only.
 17976                                  ; If net_FCB, then we change the mode to be read_only.
 17977                                  ; If not open for read then error.
 17978                                  
 17979 00002C83 1E                      	push	ds
 17980 00002C84 56                      	push	si
 17981 00002C85 C536[9E05]              	LDS	SI,[THISSFT]
 17982                                  	;mov	cx,[si+2]
 17983 00002C89 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 17984                                  	; 17/12/2022
 17985                                  	;test	ch,80h
 17986 00002C8C F6C580                  	test	ch,sf_isFCB>>8
 17987                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 17988 00002C8F 750A                    	JNZ	short ResetAccess	; yes, reset the access
 17989 00002C91 88CA                    	MOV	DL,CL
 17990 00002C93 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 17991 00002C96 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 17992 00002C99 7508                    	JNZ	short NormalOpen	; no
 17993                                  ResetAccess:
 17994                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 17995                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 17996                                  	; 16/12/2022
 17997 00002C9B 80E1F0                  	and	cl,0F0h ; 18/05/2019
 17998                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 17999 00002C9E 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18000 00002CA1 EB0C                    	JMP	SHORT FillSFT
 18001                                  
 18002                                  ; The SFT is normal. See if the requested access is open_for_read
 18003                                  
 18004                                  NormalOpen:
 18005 00002CA3 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18006 00002CA6 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18007 00002CA9 7404                    	JZ	short FillSFT
 18008 00002CAB 5E                      	pop	si
 18009 00002CAC 1F                      	pop	ds
 18010 00002CAD EBB9                    	JMP	short Open_Bad_Access
 18011                                  ;
 18012                                  ; All done, restore registers and fill the SFT.
 18013                                  ;
 18014                                  FillSFT:
 18015 00002CAF 5E                      	pop	si
 18016 00002CB0 1F                      	pop	ds
 18017                                  open_ok:
 18018 00002CB1 E8631F                  	call	DOOPEN			; Fill in SFT
 18019                                  
 18020                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18021                                  	; 18/05/2019
 18022                                  	;and	byte [ss:FastOpenFlag],80h
 18023 00002CB4 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18024                                  	; 12/08/2018
 18025                                  	;and	byte [FastOpenFlg],Fast_yes	
 18026                                  
 18027                                  	; MSDOS 6.0
 18028 00002CBA E84600                  	CALL	DO_SHARE_CHECK
 18029 00002CBD 7303                    	JNC	short SHARE_OK
 18030                                  	;call	LCritDisk
 18031                                  	; 16/12/2022
 18032 00002CBF E9B1E6                  	jmp	LCritDisk
 18033                                  	;;JMP	short Clear_FastOpen
 18034                                  	;retn	; 18/05/2019
 18035                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18036                                  	;jmp	short Clear_FastOpen	
 18037                                  
 18038                                  	; MSDOS 3.3
 18039                                  ;DO_SHARE_CHECK:
 18040                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18041                                  ;OpenShareRetry:
 18042                                  ;	push	cx			; Save number left to do
 18043                                  ;	call	SHARE_CHECK		; Final Check
 18044                                  ;	pop	cx			; CX = # left
 18045                                  ;	JNC	short SHARE_OK		; No problem with access
 18046                                  ;	call	Idle
 18047                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18048                                  ;OpenShareFail:
 18049                                  ;	LES	DI,[THISSFT]
 18050                                  ;	call	SHARE_ERROR
 18051                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18052                                  	
 18053                                  	;12/08/2018
 18054                                  	;mov	byte [ss:FastOpenFlg],0
 18055                                  	;08/09/2018
 18056                                  	;mov	byte [FastOpenFlg],0
 18057                                  	;call	LCritDisk
 18058                                  	;JMP	short Clear_FastOpen
 18059                                  	;retn
 18060                                  
 18061                                  SHARE_OK:
 18062                                  	; MSDOS 3.3 & MSDOS 6.0
 18063 00002CC2 B80300                  	MOV	AX,3
 18064 00002CC5 C43E[9E05]              	LES	DI,[THISSFT]
 18065                                  ;if installed
 18066                                  	;call	JShare + 14 * 4
 18067 00002CC9 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18068                                  ;else
 18069                                  ;	Call	ShSU
 18070                                  ;endif
 18071 00002CCD E8A3E6                  	call	LCritDisk
 18072                                  	
 18073                                  	;FallThru Set_SFT_Mode
 18074                                  
 18075                                  ;----------------------------------------------------------------------------
 18076                                  ; Procedure Name : SET_SFT_MODE
 18077                                  ;
 18078                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18079                                  ;
 18080                                  ;   Inputs:
 18081                                  ;	ThisSFT points to SFT
 18082                                  ;
 18083                                  ;   Outputs:
 18084                                  ;	Carry clear
 18085                                  ;   Registers modified: AX.
 18086                                  ;---------------------------------------------------------------------------
 18087                                  
 18088                                  ;hkn; called from create. DS already set up to DOSDATA.
 18089                                  
 18090                                  SET_SFT_MODE:
 18091 00002CD0 C43E[9E05]              	LES	DI,[THISSFT]
 18092 00002CD4 E8CC19                  	call	DEV_OPEN_SFT
 18093                                  	;test	word [es:di+2],8000h
 18094                                  	; 17/12/2022
 18095                                  	;test	byte [es:di+3],80h
 18096 00002CD7 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18097                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18098 00002CDC 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18099 00002CDE A1[3003]                	MOV	AX,[CurrentPDB]
 18100                                  	;mov	[es:di+31h],ax
 18101 00002CE1 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18102                                  
 18103                                  Clear_FastOpen:
 18104 00002CE5 C3                      	retn			       ;;;;; DOS 3.3
 18105                                  
 18106                                  ;----------------------------------------------------------------------------
 18107                                  ; Procedure Name : SHARE_ERROR
 18108                                  ;
 18109                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18110                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18111                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18112                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18113                                  ;---------------------------------------------------------------------------
 18114                                  
 18115                                  SHARE_ERROR:
 18116                                  	; 17/12/2022
 18117                                  	;test	byte [es:di+3],80h
 18118 00002CE6 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18119                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18120 00002CEB 750C                    	JNZ	short _HARD_ERR
 18121 00002CED 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18122 00002CF1 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18123 00002CF4 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18124 00002CF7 7505                    	JNE	short _NO_HARD_ERR
 18125                                  _HARD_ERR:
 18126 00002CF9 E84F47                  	call	SHARE_VIOLATION
 18127                                  	;retnc				; User wants retry
 18128 00002CFC 73E7                    	jnc	short Clear_FastOpen
 18129                                  _NO_HARD_ERR:
 18130 00002CFE B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18131 00002D01 F9                      	STC
 18132 00002D02 C3                      	retn
 18133                                  
 18134                                  ; MSDOS 6.0
 18135                                  ;----------------------------------------------------------------------------
 18136                                  ; Procedure Name : DO_SHARE_CHECK
 18137                                  ;
 18138                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18139                                  ; Functions: check file sharing mode is valid
 18140                                  ; Output: carry set, error
 18141                                  ;	  carry clear, share ok
 18142                                  ;----------------------------------------------------------------------------
 18143                                  
 18144                                  	; 18/05/2019 - Retro DOS v4.0
 18145                                  DO_SHARE_CHECK:
 18146 00002D03 E852E6                  	call	ECritDisk		; enter critical section
 18147                                  OPN_RETRY:
 18148 00002D06 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18149                                  OpenShareRetry:
 18150 00002D0A 51                      	push	cx			; Save number left to do
 18151 00002D0B E83847                  	call	SHARE_CHECK		; Final Check
 18152 00002D0E 59                      	pop	cx			; CX = # left
 18153 00002D0F 730E                    	JNC	short Share_Ok2		; No problem with access
 18154 00002D11 E83AE5                  	call	Idle
 18155 00002D14 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18156                                  OpenShareFail:
 18157 00002D16 C43E[9E05]              	LES	DI,[THISSFT]
 18158 00002D1A E8C9FF                  	call	SHARE_ERROR
 18159 00002D1D 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18160                                  Share_Ok2:
 18161                                  	;call	LCritDisk		; leave critical section
 18162                                  	;retn
 18163                                  	; 18/12/2022
 18164 00002D1F E951E6                  	jmp	LCritDisk
 18165                                  
 18166                                  ;-----------------------------------------------------------------------------
 18167                                  ; Procedure Name : Check_Access
 18168                                  ;
 18169                                  ; Inputs:
 18170                                  ;	AX is mode
 18171                                  ;	  High NIBBLE of AL (Sharing Mode)
 18172                                  ;		sharing_compat	   file is opened in compatibility mode
 18173                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18174                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18175                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18176                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18177                                  ;	  Low NIBBLE of AL (Access Mode)
 18178                                  ;		open_for_read	file is opened for reading
 18179                                  ;		open_for_write	file is opened for writing
 18180                                  ;		open_for_both	file is opened for both reading and writing.
 18181                                  ; Function:
 18182                                  ;	Check this access mode for correctness
 18183                                  ; Outputs:
 18184                                  ;	[open_access] = AL input
 18185                                  ;	Carry Clear
 18186                                  ;		Mode is correct
 18187                                  ;		AX unchanged
 18188                                  ;	Carry Set
 18189                                  ;		Mode is bad
 18190                                  ;		AX = error_invalid_access
 18191                                  ; No other registers effected
 18192                                  ;----------------------------------------------------------------------------
 18193                                  
 18194                                  Check_Access_AX:
 18195 00002D22 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18196 00002D25 53                      	PUSH	BX
 18197                                  
 18198                                  ;	If sharing, then test for special sharing mode for FCBs
 18199                                  
 18200 00002D26 88C3                    	MOV	BL,AL
 18201 00002D28 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18202 00002D2B 803E[7205]FF            	CMP	byte [FSHARING],-1
 18203 00002D30 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18204 00002D32 80FB70                  	CMP	BL,SHARING_NET_FCB
 18205 00002D35 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18206                                  CheckShareMode:
 18207 00002D37 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18208 00002D3A 770D                    	JA	short Make_Bad_Access
 18209                                  CheckAccessMode:
 18210 00002D3C 88C3                    	MOV	BL,AL
 18211 00002D3E 80E30F                  	AND	BL,access_mask
 18212 00002D41 80FB02                  	CMP	BL,2
 18213 00002D44 7703                    	JA	short Make_Bad_Access
 18214 00002D46 5B                      	POP	BX
 18215 00002D47 F8                      	CLC
 18216 00002D48 C3                      	retn
 18217                                  
 18218                                  Make_Bad_Access:
 18219 00002D49 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18220 00002D4C 5B                      	POP	BX
 18221 00002D4D F9                      	STC
 18222 00002D4E C3                      	retn
 18223                                  
 18224                                  ;============================================================================
 18225                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18226                                  ;============================================================================
 18227                                  ; 08/08/2018 - Retro DOS v3.0
 18228                                  ; 18/05/2019 - Retro DOS v4.0
 18229                                  
 18230                                  ;**	Low level routine for returning disk drive information from a local
 18231                                  ;	  or NET device
 18232                                  ;
 18233                                  ;	DISK_INFO
 18234                                  ;
 18235                                  ;	  Modification history:
 18236                                  ;
 18237                                  ;		Created: ARR 30 March 1983
 18238                                  
 18239                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18240                                  ;---------------------------------------------------------------------------
 18241                                  ; Procedure Name : DISK_INFO
 18242                                  ;
 18243                                  ; Inputs:
 18244                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18245                                  ;		(It MAY NOT be NUL, error not detected)
 18246                                  ; Function:
 18247                                  ;	Get Interesting Drive Information
 18248                                  ; Returns:
 18249                                  ;	DX = Number of free allocation units
 18250                                  ;	BX = Total Number of allocation units on disk
 18251                                  ;	CX = Sector size
 18252                                  ;	AL = Sectors per allocation unit
 18253                                  ;	AH = FAT ID BYTE
 18254                                  ;	Carry set if error (currently user FAILed to I 24)
 18255                                  ; Segs except ES preserved, others destroyed
 18256                                  ;----------------------------------------------------------------------------
 18257                                  
 18258                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18259                                  ;hkn; DOSDATA. 
 18260                                  
 18261                                  DISK_INFO:
 18262                                  	; 08/08/2018 - Retro DOS v3.0
 18263                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18264                                  
 18265 00002D4F E841E5                  	call	TestNet
 18266 00002D52 7306                    	JNC	short LOCAL_DSK_INFO
 18267                                  
 18268                                  ;IF NOT Installed
 18269                                  ;	transfer NET_DISK_INFO
 18270                                  ;ELSE
 18271                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18272                                  	;INT	2FH
 18273                                  	;return
 18274                                  
 18275 00002D54 B80C11                  	mov     ax,110Ch
 18276 00002D57 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18277                                  			; ES:DI -> current directory
 18278                                  			; Return: AL = sectors per cluster, BX = total clusters
 18279                                  			; CX = bytes per sector, DX = number of available clusters
 18280 00002D59 C3                      	retn
 18281                                  ;ENDIF
 18282                                  
 18283                                  LOCAL_DSK_INFO:
 18284 00002D5A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18285 00002D5F E8F6E5                  	call	ECritDisk
 18286 00002D62 E86C2A                  	call	FATREAD_CDS		; perform media check.
 18287 00002D65 7241                    	JC	short CRIT_LEAVE
 18288 00002D67 BB0200                  	MOV	BX,2
 18289 00002D6A E8B228                  	call	UNPACK			; Get first FAT sector into CURBUF
 18290 00002D6D 7239                    	JC	short CRIT_LEAVE
 18291 00002D6F C536[E205]              	LDS	SI,[CURBUF]
 18292                                  	;mov	ah,[si+20]
 18293 00002D73 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18294                                  
 18295                                  ;hkn; SS is DOSDATA
 18296 00002D76 16                      	push	ss
 18297 00002D77 1F                      	pop	ds
 18298                                  	;mov	cx,[es:bp+0Dh]
 18299 00002D78 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18300                                  
 18301                                  ; Examine the current free count. If it indicates that we have an invalid
 18302                                  ; count, do the expensive calculation.
 18303                                  
 18304                                  	;mov	dx,[es:bp+1Fh]
 18305 00002D7C 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18306 00002D80 83FAFF                  	CMP	DX,-1			; is it valid?
 18307 00002D83 7404                    	JZ	short DoScan
 18308                                  
 18309                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18310                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18311                                  ; the count.
 18312                                  
 18313 00002D85 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18314 00002D87 7222                    	JB	short GotVal		; yes, trust it.
 18315                                  DoScan:
 18316 00002D89 31D2                    	XOR	DX,DX
 18317 00002D8B 49                      	DEC	CX
 18318                                  SCANFREE:
 18319 00002D8C E89028                  	call	UNPACK
 18320 00002D8F 7217                    	JC	short CRIT_LEAVE
 18321 00002D91 7501                    	JNZ	short NOTFREECLUS
 18322 00002D93 42                      	INC	DX			; A free one
 18323                                  NOTFREECLUS:
 18324 00002D94 43                      	INC	BX			; Next cluster
 18325 00002D95 E2F5                    	LOOP	SCANFREE
 18326 00002D97 4B                      	DEC	BX			; BX was next cluster. Convert to
 18327                                  ReturnVals:
 18328 00002D98 4B                      	DEC	BX			; count
 18329                                  	;mov	al,[es:bp+4]
 18330 00002D99 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18331 00002D9D FEC0                    	INC	AL			; Sectors/cluster
 18332                                  	;mov	cx,[es:bp+2]
 18333 00002D9F 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18334                                  	;mov	[es:bp+1Fh],dx
 18335 00002DA3 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18336 00002DA7 F8                      	CLC
 18337                                  CRIT_LEAVE:
 18338                                  	;call	LCritDisk
 18339                                  	;retn
 18340                                  	; 17/12/2022
 18341 00002DA8 E9C8E5                  	jmp	LCritDisk
 18342                                  
 18343                                  ; We have correctly computed everything previously. Load up registers for
 18344                                  ; return.
 18345                                  
 18346                                  GotVal: 
 18347 00002DAB 89CB                    	MOV	BX,CX			; get cluster count
 18348 00002DAD EBE9                    	JMP	short ReturnVals
 18349                                  
 18350                                  ;============================================================================
 18351                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18352                                  ;============================================================================
 18353                                  ; 22/07/2018 - Retro DOS v3.0
 18354                                  
 18355                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18356                                  ;	NAME	DOS_SEARCH
 18357                                  
 18358                                  ;**	Low level routines for doing local and NET directory searches
 18359                                  ;
 18360                                  ;	DOS_SEARCH_FIRST
 18361                                  ;	DOS_SEARCH_NEXT
 18362                                  ;	RENAME_NEXT
 18363                                  ;
 18364                                  ;	Revision history:
 18365                                  ;
 18366                                  ;	    Created: ARR 30 March 1983
 18367                                  ;	    A000	version 4.00  Jan. 1988
 18368                                  ;	    A001	PTM 3564 -- search for fastopen
 18369                                  
 18370                                  ;Installed = TRUE
 18371                                  
 18372                                  ;--------------------------------------------------------------------------
 18373                                  ;
 18374                                  ; Procedure Name : DOS_SEARCH_FIRST
 18375                                  ;
 18376                                  ; Inputs:
 18377                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18378                                  ;		terminated)
 18379                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18380                                  ;		( = -1 if current dir not involved, else
 18381                                  ;		 Points to first char after last "/" of current dir part)
 18382                                  ;	[THISCDS] Points to CDS being used
 18383                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18384                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18385                                  ;	[DMAADD] Points to 53 byte buffer
 18386                                  ; Function:
 18387                                  ;	Initiate a search for the given file spec
 18388                                  ; Outputs:
 18389                                  ;	CARRY CLEAR
 18390                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18391                                  ;
 18392                                  ;	LOCAL
 18393                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18394                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18395                                  ;	    11 byte search name with Meta chars in it
 18396                                  ;	    Search Attribute Byte, attribute of search
 18397                                  ;	    WORD LastEnt value
 18398                                  ;	    WORD DirStart
 18399                                  ;	    4 byte pad
 18400                                  ;	    32 bytes of the directory entry found
 18401                                  ;	NET
 18402                                  ;	    21 bytes First byte has high bit set
 18403                                  ;	    32 bytes of the directory entry found
 18404                                  ;
 18405                                  ;	CARRY SET
 18406                                  ;	    AX = error code
 18407                                  ;		error_no_more_files
 18408                                  ;			No match for this file
 18409                                  ;		error_path_not_found
 18410                                  ;			Bad path (not in curr dir part if present)
 18411                                  ;		error_bad_curr_dir
 18412                                  ;			Bad path in current directory part of path
 18413                                  ; DS preserved, others destroyed
 18414                                  ;---------------------------------------------------------------------------
 18415                                  
 18416                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18417                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18418                                  
 18419                                  DOS_SEARCH_FIRST:
 18420                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18421                                  
 18422 00002DAF C43E[A205]              	LES	DI,[THISCDS]
 18423 00002DB3 83FFFF                  	CMP	DI,-1
 18424 00002DB6 7506                    	JNZ	short TEST_RE_NET2
 18425                                  
 18426                                  ;IF NOT Installed
 18427                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18428                                  ;ELSE
 18429                                  	;mov	ax,1119h
 18430 00002DB8 B81911                  	MOV	AX,(MultNET<<8)|25
 18431 00002DBB CD2F                    	INT	2Fh
 18432 00002DBD C3                      	retn
 18433                                  ;ENDIF
 18434                                  
 18435                                  TEST_RE_NET2:
 18436                                  	;test	word [es:di+43h],8000h
 18437                                  	; 17/12/2022
 18438                                  	;test	byte [es:di+44h],80h
 18439                                  	; 28/12/2022
 18440 00002DBE 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18441                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18442 00002DC3 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18443                                  
 18444                                  ;IF NOT Installed
 18445                                  ;	transfer NET_SEARCH_FIRST
 18446                                  ;ELSE
 18447                                  	;mov	ax,111Bh
 18448 00002DC5 B81B11                  	MOV	AX,(MultNET<<8)|27
 18449 00002DC8 CD2F                    	INT	2FH
 18450 00002DCA C3                      	retn
 18451                                  ;ENDIF
 18452                                  	; 18/05/2019 - Retro DOS v4.0
 18453                                  LOCAL_SEARCH_FIRST:
 18454 00002DCB E88AE5                  	call	ECritDisk
 18455                                  	; MSDOS 6.0
 18456                                  	;;test	word [DOS34_FLAG],400h
 18457                                  	; 17/12/2022
 18458                                  	;test	byte [DOS34_FLAG+1],04h
 18459 00002DCE F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18460                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18461 00002DD3 7405                    	JZ	short NOFN			;AN000;
 18462                                  	;or	byte [FastOpenFlg],1
 18463 00002DD5 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18464                                  NOFN:						;AN000;
 18465 00002DDA C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18466                                  	; MSDOS 6.0
 18467 00002DDF E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18468 00002DE2 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18469                                  	;and	byte [FastOpenFlg],80h
 18470 00002DE4 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18471                                  norm_GETPATH:
 18472 00002DE9 E8DE11                  	call	GETPATH
 18473                                  	; BX = offset NAME1
 18474                                  ;_getdone:
 18475 00002DEC 7318                    	JNC	short find_check_dev
 18476 00002DEE 7511                    	JNZ	short bad_path3
 18477 00002DF0 08C9                    	OR	CL,CL
 18478 00002DF2 740D                    	JZ	short bad_path3
 18479                                  find_no_more:
 18480                                  	;mov	ax,12h
 18481 00002DF4 B81200                  	MOV	AX,error_no_more_files
 18482                                  BadBye:
 18483                                  	; MSDOS 6.0
 18484 00002DF7 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18485                                  
 18486 00002DFD F9                      	STC
 18487                                  	;call	LCritDisk
 18488                                  	;retn
 18489                                  	; 18/12/2022
 18490 00002DFE E972E5                  	jmp	LCritDisk
 18491                                  
 18492                                  bad_path3:
 18493                                  	;mov	ax,3
 18494 00002E01 B80300                  	MOV	AX,error_path_not_found
 18495 00002E04 EBF1                    	JMP	short BadBye
 18496                                  
 18497                                  find_check_dev:
 18498 00002E06 08E4                    	OR	AH,AH
 18499 00002E08 790A                    	JNS	short found_entry
 18500 00002E0A C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18501 00002E10 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18502                                  found_entry:
 18503                                  
 18504                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18505                                  ; a search-next may not have wfp_start set correctly
 18506                                  
 18507 00002E14 C43E[2C03]              	LES	DI,[DMAADD]
 18508 00002E18 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18509 00002E1C AC                      	LODSB
 18510 00002E1D 2C40                    	SUB	AL,'A'-1                ; logical drive
 18511 00002E1F AA                      	STOSB				; High bit not set (local)
 18512                                  found_it:
 18513 00002E20 C43E[2C03]              	LES	DI,[DMAADD]
 18514 00002E24 47                      	INC	DI
 18515                                  
 18516                                  	; MSDOS 6.0
 18517 00002E25 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18518                                  	;test	byte [FastOpenFlg],10h
 18519 00002E26 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18520 00002E2B 7408                    	JZ	short notfast			  ;FO.;AN001;
 18521 00002E2D 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18522 00002E2F 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18523 00002E33 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18524                                  
 18525                                  notfast:
 18526 00002E35 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18527                                  movmov:
 18528                                  ; Special E5 code
 18529 00002E38 A4                      	MOVSB
 18530 00002E39 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18531 00002E3E 7505                    	JNZ	short NOTKANJB
 18532 00002E40 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18533                                  NOTKANJB:
 18534 00002E45 B90A00                  	MOV	CX,10
 18535 00002E48 F3A4                    	REP	MOVSB
 18536                                  
 18537                                  	; 08/09/2018
 18538 00002E4A 1F                      	POP	DS			;FO.;AN001; restore ds
 18539                                  
 18540 00002E4B A0[6B05]                	MOV	AL,[ATTRIB]
 18541 00002E4E AA                      	STOSB
 18542 00002E4F 50                      	PUSH	AX			; Save AH device info
 18543 00002E50 A1[4803]                	MOV	AX,[LASTENT]
 18544 00002E53 AB                      	STOSW
 18545 00002E54 A1[C205]                	MOV	AX,[DIRSTART]
 18546 00002E57 AB                      	STOSW
 18547                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18548 00002E58 83C704                  	ADD	DI,4
 18549 00002E5B 58                      	POP	AX			; Recover AH device info
 18550 00002E5C 08E4                    	OR	AH,AH
 18551 00002E5E 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18552 00002E60 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18553 00002E65 7510                    	JNZ	short OKSTORE
 18554                                  
 18555                                  	; MSDOS 6.0
 18556 00002E67 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18557                                  					;AN000;;FO. from fastopen and is good
 18558 00002E6C 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18559                                  
 18560                                  	; The user has specified the root directory itself, rather than some
 18561                                  	; contents of it. We can't "find" that.
 18562                                  
 18563 00002E6E 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18564                                  					;   stuffing a -1 at Lastent
 18565 00002E74 E97DFF                  	JMP	find_no_more
 18566                                  
 18567                                  OKSTORE:
 18568 00002E77 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18569                                  DOSREL:
 18570                                  	; BX = offset NAME1 (from GETPATH)
 18571 00002E7B 89DE                    	MOV	SI,BX			; SI-> start of entry
 18572                                  
 18573                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18574                                  
 18575                                  	;mov	cx,32
 18576 00002E7D B92000                  	MOV	CX,dir_entry.size
 18577                                  ;;;;; 7/29/86
 18578 00002E80 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18579 00002E82 F3A4                    	REP	MOVSB
 18580 00002E84 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18581 00002E86 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18582 00002E8A 7504                    	JNZ	short NO05
 18583 00002E8C 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18584                                  NO05:
 18585                                  
 18586                                  ;;;;; 7/29/86
 18587                                  
 18588                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18589                                  	; 16/12/2022
 18590                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18591                                  	; MSDOS 6.0
 18592                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18593                                  	; 18/05/2019 - Retro DOS v4.0
 18594 00002E90 16                      	push	ss
 18595 00002E91 1F                      	pop	ds
 18596                                  	; 16/12/2022
 18597 00002E92 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18598                                  
 18599                                  ;hkn; SS is DOSDATA
 18600                                  	;push	ss
 18601                                  	;pop	ds
 18602 00002E97 F8                      	CLC
 18603                                  	;call	LCritDisk
 18604                                  	;retn
 18605                                  	; 16/12/2022
 18606 00002E98 E9D8E4                  	jmp	LCritDisk
 18607                                  
 18608                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18609                                  ;----------------------------------------------------------------------------
 18610                                  ;
 18611                                  ; Procedure Name : DOS_SEARCH_NEXT
 18612                                  ;
 18613                                  ; Inputs:
 18614                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18615                                  ;	    (only first 21 bytes must have valid information)
 18616                                  ; Function:
 18617                                  ;	Look for subsequent matches
 18618                                  ; Outputs:
 18619                                  ;	CARRY CLEAR
 18620                                  ;	    The 53 bytes at DMAADD are updated for next call
 18621                                  ;		(see DOS_SEARCH_FIRST)
 18622                                  ;	CARRY SET
 18623                                  ;	    AX = error code
 18624                                  ;		error_no_more_files
 18625                                  ;			No more files to find
 18626                                  ; DS preserved, others destroyed
 18627                                  ;---------------------------------------------------------------------------
 18628                                  
 18629                                  ;hkn; called from search.asm. DS already set up at this point.
 18630                                  
 18631                                  DOS_SEARCH_NEXT:
 18632 00002E9B C43E[2C03]              	LES	DI,[DMAADD]
 18633 00002E9F 268A05                  	MOV	AL,[ES:DI]
 18634 00002EA2 A880                    	TEST	AL,80H			; Test for NET
 18635 00002EA4 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18636                                  ;IF NOT Installed
 18637                                  ;	transfer NET_SEARCH_NEXT
 18638                                  ;ELSE
 18639                                  	;mov	ax,111Ch
 18640 00002EA6 B81C11                  	MOV	AX,(MultNET<<8)|28
 18641 00002EA9 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18642                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18643                                  		     ; Return: CF set on error, AX = DOS error code
 18644                                  		     ; CF clear if successful
 18645 00002EAB C3                      	retn
 18646                                  ;ENDIF
 18647                                  
 18648                                  LOCAL_SEARCH_NEXT:
 18649                                  	;AL is drive A=1
 18650                                  	;mov	byte [EXTERR_LOCUS],2
 18651 00002EAC C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18652 00002EB1 E8A4E4                  	call	ECritDisk
 18653                                  
 18654                                  ;hkn; DummyCDS is in DOSDATA
 18655 00002EB4 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18656                                  ;hkn; Segment address is DOSDATA - use ds
 18657                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18658 00002EBA 8C1E[A405]              	mov	[THISCDS+2],DS
 18659                                  
 18660 00002EBE 0440                    	ADD	AL,'A'-1
 18661 00002EC0 E8133C                  	call	InitCDS
 18662                                  
 18663                                  ;	call	GETTHISDRV		; Set CDS pointer
 18664                                  
 18665 00002EC3 7236                    	JC	short No_files		; Bogus drive letter
 18666 00002EC5 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18667                                  	;les	bp,[es:di+45h]
 18668 00002EC9 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18669 00002ECD E870D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18670                                  
 18671                                  	 ;16/12/2022
 18672 00002ED0 268A4600                	mov	al,[ES:BP]
 18673                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18674                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18675 00002ED4 A2[7605]                	mov	[THISDRV],AL
 18676                                  	;mov	word [CREATING],0E500h
 18677 00002ED7 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18678 00002EDD C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18679 00002EE2 C536[2C03]              	LDS	SI,[DMAADD]
 18680 00002EE6 AC                      	LODSB				; Drive Byte
 18681                                  
 18682                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18683                                  RENAME_NEXT:
 18684                                  	;context ES
 18685 00002EE7 16                      	push	ss
 18686 00002EE8 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18687                                  
 18688                                  ;hkn; NAME1 is in DOSDATA
 18689 00002EE9 BF[4B05]                	MOV	DI,NAME1
 18690                                  
 18691 00002EEC B90B00                  	MOV	CX,11
 18692 00002EEF F3A4                    	REP	MOVSB			; Search name
 18693 00002EF1 AC                      	LODSB				; Attribute
 18694                                  
 18695                                  ;hkn; SS override
 18696 00002EF2 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18697 00002EF6 AD                      	LODSW				; LastEnt
 18698 00002EF7 09C0                    	OR	AX,AX
 18699 00002EF9 7903                    	JNS	short cont_load
 18700                                  No_files:
 18701 00002EFB E9F6FE                  	JMP	find_no_more
 18702                                  
 18703                                  cont_load:
 18704 00002EFE 50                      	PUSH	AX			; Save LastEnt
 18705 00002EFF AD                      	LODSW				; DirStart
 18706 00002F00 89C3                    	MOV	BX,AX
 18707                                  
 18708                                  ;hkn; SS is DOSDATA
 18709                                  	;context DS
 18710 00002F02 16                      	push	ss
 18711 00002F03 1F                      	pop	ds
 18712 00002F04 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18713                                  	;invoke	SetDirSrch
 18714 00002F08 E85F10                  	call	SETDIRSRCH
 18715 00002F0B 7303                    	JNC	short SEARCH_GOON
 18716 00002F0D 58                      	POP	AX			; Clean stack
 18717 00002F0E EBEB                    	JMP	short No_files
 18718                                  
 18719                                  SEARCH_GOON:
 18720 00002F10 E85413                  	call	STARTSRCH
 18721 00002F13 58                      	POP	AX
 18722 00002F14 E82410                  	call	GETENT
 18723 00002F17 72E2                    	JC	short No_files
 18724 00002F19 E8550F                  	call	NEXTENT
 18725 00002F1C 72DD                    	JC	short No_files
 18726 00002F1E 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18727 00002F20 E9FDFE                  	JMP	found_it ; 10/08/2018
 18728                                  
 18729                                  ; MSDOS 6.0
 18730                                  ;---------------------------------------------------------------------------
 18731                                  ;
 18732                                  ; Procedure Name : CHECK_QUESTION
 18733                                  ;
 18734                                  ; Input: [WFP_START]= pointer to final path
 18735                                  ; Function: check '?' char
 18736                                  ; Output: carry clear, if no '?'
 18737                                  ;	 carry set, if '?' exists
 18738                                  ;---------------------------------------------------------------------------
 18739                                  
 18740                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18741                                  CHECK_QUESTION:
 18742                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18743                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18744 00002F23 16                      	push	ss
 18745 00002F24 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18746                                  	; 16/12/2022
 18747                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18748 00002F25 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18749                                  	;mov	si,[ss:WFP_START]
 18750                                  getnext:				;AN000;
 18751 00002F29 AC                      	LODSB				;AN000;;FO. get char
 18752 00002F2A 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18753 00002F2C 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18754 00002F2E 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18755 00002F30 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18756 00002F32 F9                      	STC				;AN000;;FO.
 18757                                  NO_Question:				;AN000;
 18758 00002F33 C3                      	retn				;AN000;;FO.
 18759                                  
 18760                                  ;============================================================================
 18761                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18762                                  ;============================================================================
 18763                                  ; 23/07/2018 - Retro DOS v3.0
 18764                                  ; 18/05/2019 - Retro DOS v4.0
 18765                                  
 18766                                  ;**
 18767                                  ;
 18768                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18769                                  ;  If process has NET resources a close all is sent out over the net.
 18770                                  ;
 18771                                  ;   DOS_ABORT
 18772                                  ;
 18773                                  ;   Modification history:
 18774                                  ;
 18775                                  ;       Created: ARR 30 March 1983
 18776                                  ;
 18777                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18778                                  ;				being terminated only if it is busy.
 18779                                  ;
 18780                                  
 18781                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18782                                  ;--------------------------------------------------------------------------
 18783                                  ;
 18784                                  ; Procedure Name : DOS_ABORT
 18785                                  ;
 18786                                  ; Inputs:
 18787                                  ;       [CurrentPDB] set to PID of process aborting
 18788                                  ; Function:
 18789                                  ;       Close all files and free all SFTs for this PID
 18790                                  ; Returns:
 18791                                  ;       None
 18792                                  ; All destroyed except stack
 18793                                  ;---------------------------------------------------------------------------
 18794                                  
 18795                                  DOS_ABORT:
 18796 00002F34 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18797 00002F39 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18798                                  reset_free_jfn:
 18799 00002F3E 89CB                    	MOV     BX,CX
 18800 00002F40 51                      	PUSH    CX
 18801 00002F41 4B                      	DEC     BX                      ; get jfn (start with last one)
 18802                                  
 18803 00002F42 E8C538                  	CALL	_$CLOSE
 18804 00002F45 59                      	POP     CX
 18805 00002F46 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18806                                  
 18807                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18808                                  ; are running in the no-sharing no-network environment, we are simulating the
 18809                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18810                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18811                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18812                                  ;
 18813                                  ; If sharing is loaded, then the following call to close process will
 18814                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18815                                  ;
 18816                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18817                                  ; known network resources. These resources are then responsible for cleaning
 18818                                  ; up after this process.
 18819                                  ;
 18820                                  ; Sleazy, eh?
 18821                                  
 18822                                  	;context DS			; SS is DOSDATA
 18823 00002F48 16                      	push	ss
 18824 00002F49 1F                      	pop	ds  ; 09/09/2018
 18825                                  
 18826                                  	;CallInstall Net_Abort, MultNET, 29
 18827 00002F4A B81D11                  	mov	ax, 111Dh
 18828 00002F4D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18829                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18830                                  			; DS???, SS = DOS CS
 18831                                  ;if installed
 18832 00002F4F FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18833                                  ;else
 18834                                  ;	call 	MFTCloseP
 18835                                  ;endif
 18836                                  
 18837                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18838                                  ; counts.
 18839                                  					; SS override
 18840 00002F53 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18841                                  	;mov	cx,[es:di+4]
 18842 00002F58 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18843 00002F5C E317                    	jcxz    FCBScanDone
 18844                                  	;lea	di,[di+6]
 18845 00002F5E 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18846 00002F61 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18847                                  FCBTest:
 18848                                  	;cmp	[es:di+31h],ax
 18849 00002F65 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18850 00002F69 7505                    	jnz	short FCBNext		; no, skip it
 18851 00002F6B 26C7050000              	mov	word [es:di],0
 18852                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18853                                  FCBNext:
 18854 00002F70 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18855 00002F73 E2F0                    	loop    FCBTest
 18856                                  FCBScanDone:
 18857                                  
 18858                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18859                                  
 18860 00002F75 31DB                    	XOR     BX,BX
 18861                                  Scan:
 18862 00002F77 53                      	push    bx
 18863 00002F78 E80A38                  	call	SFFromSFN
 18864 00002F7B 5B                      	pop     bx
 18865                                  	;jnc	short Scan1
 18866                                  	;retn
 18867                                  	; 18/12/2022
 18868 00002F7C 72B5                    	jc	short NO_Question ; retn
 18869                                  
 18870                                  ;M038
 18871                                  ; Do what the comment above says, check for busy state
 18872                                  
 18873                                  Scan1:
 18874                                  	;cmp	word [es:di],0
 18875                                  	;jz	short scan_next  ; MSDOS 3.3
 18876                                  	; MSDOS 6.0
 18877 00002F7E 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18878                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18879                                  				; Is Sft busy? ;M038
 18880 00002F82 7519                    	jnz	short scan_next
 18881                                  ;
 18882                                  ; we have a SFT that is busy. See if it is for the current process
 18883                                  ;
 18884 00002F84 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18885                                  	;cmp	[es:di+31h],ax
 18886 00002F88 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18887 00002F8C 750F                    	jnz	short scan_next
 18888 00002F8E 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18889                                  	;cmp	[es:di+2Fh],ax
 18890 00002F92 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18891 00002F96 7505                    	jnz	short scan_next
 18892                                  
 18893                                  ; This SFT is labelled as ours.
 18894                                  
 18895 00002F98 26C7050000              	mov	word [es:di],0
 18896                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18897                                  scan_next:
 18898 00002F9D 43                      	inc     bx
 18899 00002F9E EBD7                    	jmp     short Scan
 18900                                  
 18901                                  ;============================================================================
 18902                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18903                                  ;============================================================================
 18904                                  ; 23/07/2018 - Retro DOS v3.0
 18905                                  ; 18/05/2019 - Retro DOS v4.0
 18906                                  
 18907                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18908                                  ;
 18909                                  ;	DOS_CLOSE
 18910                                  ;	DOS_COMMIT
 18911                                  ;	FREE_SFT
 18912                                  ;	SetSFTTimes
 18913                                  ;
 18914                                  ;	Revision history:
 18915                                  ;
 18916                                  ;	   AN000  version 4.00	Jan. 1988
 18917                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18918                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18919                                  
 18920                                  ;Installed = TRUE
 18921                                  
 18922                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18923                                  ;---------------------------------------------------------------------------
 18924                                  ;
 18925                                  ; Procedure Name : DOS_CLOSE
 18926                                  ;
 18927                                  ; Inputs:
 18928                                  ;	[THISSFT] set to the SFT for the file being used
 18929                                  ; Function:
 18930                                  ;	Close the indicated file via the SFT
 18931                                  ; Returns:
 18932                                  ;	sf_ref_count decremented otherwise
 18933                                  ;	ES:DI point to SFT
 18934                                  ;	Carry set if error
 18935                                  ;	    AX has error code
 18936                                  ; DS preserved, others destroyed
 18937                                  ;---------------------------------------------------------------------------
 18938                                  
 18939                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18940                                  
 18941                                  ; 18/05/2019 - Retro DOS v4.0
 18942                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18943                                  
 18944                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18945                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18946                                  
 18947                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18948                                  
 18949                                  DOS_CLOSE:
 18950 00002FA0 C43E[9E05]              	LES	DI,[THISSFT]
 18951                                  	;mov	bx,[ES:DI+5]
 18952 00002FA4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18953                                  
 18954                                  ; Network closes are handled entirely by the net code.
 18955                                  
 18956                                  	;;test	bx,8000h
 18957                                  	;TEST	BX,sf_isnet
 18958                                  	; 17/12/2022
 18959                                  	;test	bh,80h
 18960 00002FA8 F6C780                  	test	bh,(sf_isnet>>8)
 18961 00002FAB 7406                    	JZ	short LocalClose
 18962                                  
 18963                                  	;CallInstall Net_Close,MultNET,6
 18964 00002FAD B80611                  	mov     ax,1106h
 18965 00002FB0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18966                                  			; ES:DI -> SFT
 18967                                  			; SFT DPB field -> DPB of drive containing file
 18968                                  			; Return: CF set on error, AX = DOS error code
 18969                                  			; CF clear if successful
 18970 00002FB2 C3                      	retn
 18971                                  
 18972                                  ; All closes release the sharing information.
 18973                                  ; No commit releases sharing information
 18974                                  ;
 18975                                  ; All closes decrement the ref count.
 18976                                  ; No commit decrements the ref count.
 18977                                  
 18978                                  LocalClose:
 18979 00002FB3 E8A2E3                  	call	ECritDisk
 18980 00002FB6 E86B01                  	CALL	SetSFTTimes
 18981 00002FB9 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 18982                                  
 18983                                  ;hkn; SS is DOSDATA
 18984                                  	;Context DS
 18985 00002FBC 16                      	push	ss
 18986 00002FBD 1F                      	pop	ds
 18987                                  
 18988 00002FBE 50                      	push	ax
 18989 00002FBF 53                      	push	bx
 18990 00002FC0 E8AE44                  	call	ShareEnd
 18991 00002FC3 5B                      	pop	bx
 18992 00002FC4 58                      	pop	ax
 18993                                  
 18994                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 18995                                  
 18996                                  CloseEntry:
 18997 00002FC5 50                      	PUSH	AX
 18998                                  
 18999                                  ; File clean or device does not get stamped nor disk looked at.
 19000                                  
 19001                                  	;test	bx,0C0h
 19002                                  	; 17/12/2022
 19003 00002FC6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19004                                  	;TEST	BX,devid_file_clean+devid_device
 19005 00002FC9 7403                    	JZ	short rdir
 19006                                  	; 14/11/2022
 19007 00002FCB E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19008                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19009                                  
 19010                                  ; Retrieve the directory entry for the file
 19011                                  
 19012                                  rdir:
 19013 00002FCE E8DA00                  	CALL	DirFromSFT
 19014                                  	;mov	al,5
 19015 00002FD1 B005                    	MOV	AL,error_access_denied
 19016 00002FD3 7303                    	JNC	short clook
 19017                                  	; 14/11/2022
 19018 00002FD5 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19019                                  	;jc	short CloseFinish ; 24/07/2019
 19020                                  clook:
 19021                                  
 19022                                  ; ES:DI points to entry
 19023                                  ; DS:SI points to SFT
 19024                                  ; ES:BX points to buffer header
 19025                                  
 19026 00002FD8 57                      	push	di
 19027 00002FD9 56                      	push	si
 19028                                  	;lea	si,[si+20h]
 19029 00002FDA 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19030                                  
 19031                                  ; ES:DI point to directory entry
 19032                                  ; DS:SI point to unpacked name
 19033                                  
 19034 00002FDD E867E2                  	call	XCHGP
 19035                                  
 19036                                  ; ES:DI point to unpacked name
 19037                                  ; DS:SI point to directory entry
 19038                                  
 19039 00002FE0 E8EC0E                  	call	MetaCompare
 19040 00002FE3 E861E2                  	call	XCHGP
 19041 00002FE6 5E                      	pop	si
 19042 00002FE7 5F                      	pop	di
 19043 00002FE8 740C                    	JZ	short CLOSE_GO		; Name OK
 19044                                  Bye:	
 19045 00002FEA 89F7                    	MOV	DI,SI
 19046 00002FEC 1E                      	PUSH	DS
 19047 00002FED 07                      	POP	ES			; ES:DI points to SFT
 19048 00002FEE 16                      	PUSH	SS
 19049 00002FEF 1F                      	POP	DS
 19050 00002FF0 F9                      	STC
 19051                                  	;mov	al,2
 19052 00002FF1 B002                    	MOV	AL,error_file_not_found
 19053 00002FF3 E99600                  	JMP	CloseFinish ; 24/07/2019
 19054                                  
 19055                                  	; 18/05/2019 - Retro DOS v4.0
 19056                                  CLOSE_GO:
 19057                                  	; MSDOS 6.0
 19058                                  	;test	word [si+2],8000h
 19059                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19060                                  	; 17/12/2022
 19061                                  	;test	byte [si+3],80h
 19062 00002FF6 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19063 00002FFA 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19064                                  	; MSDOS 3.3 & MSDOS 6.0
 19065                                  	;mov	ch,[es:di+0Bh]
 19066 00002FFC 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19067                                  	;mov	al,[si+4]
 19068 00003000 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19069                                  
 19070                                  ;hkn; SS override
 19071 00003003 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19072                                  	; MSDOS 3.3
 19073                                  	;;call	MatchAttributes
 19074                                  	;;JNZ	short Bye		; attributes do not match
 19075                                  	; 18/05/2019
 19076 00003007 EB07                    	JMP	SHORT setattr		;FT.
 19077                                  nofcb:
 19078                                  	; MSDOS 6.0
 19079                                  	;mov	al,[si+4]
 19080 00003009 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19081 0000300C 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19082                                  setattr:
 19083                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19084                                  	;or	byte [es:di+0Bh],20h
 19085 00003010 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19086                                  	; MSDOS 6.0
 19087                                  	;mov	ax,[es:di+1Ah]
 19088 00003015 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19089                                  					;F.O. save old first cluster
 19090                                  ;hkn; SS override
 19091 00003019 36A3[BD0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19092                                  
 19093                                  	;mov	ax,[si+0Bh]
 19094 0000301D 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19095                                  	;mov	[es:di+1Ah],ax
 19096 00003020 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19097                                  	;mov	ax,[si+11h]
 19098 00003024 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19099                                  	;mov	[es:di+1Ch],ax
 19100 00003027 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19101                                  	;mov	ax,[si+13h]
 19102 0000302B 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19103                                  	;mov	[es:di+1Eh],ax
 19104 0000302E 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19105                                  	;mov	ax,[si+0Fh]
 19106 00003032 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19107                                  	;mov	[es:di+18h],ax
 19108 00003035 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19109                                  	;mov	ax,[si+0Dh]
 19110 00003039 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19111                                  	;mov	[es:di+16h],ax
 19112 0000303C 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19113                                  
 19114                                  	; MSDOS 6.0
 19115                                  ;; File Tagging
 19116 00003040 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19117                                  				  ;LB. if already dirty		    ;AN000;
 19118 00003045 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19119                                  	; 02/06/2019
 19120 00003047 E8FD2B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19121                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19122                                  	;or	byte [es:bx+5],40h
 19123 0000304A 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19124                                  yesdirty4:
 19125 0000304F 1E                      	push	ds
 19126 00003050 56                      	push	si
 19127                                  	; MSDOS 6.0
 19128                                  	;mov	cx,[si+0Bh]
 19129                                  	; 07/12/2022
 19130 00003051 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19131                                  ;hkn; SS override
 19132 00003054 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19133                                  	; MSDOS 3.3 
 19134                                  	;push	ss
 19135                                  	;pop	ds
 19136                                  	;MOV	AL,[THISDRV]
 19137                                  ;;; 10/1/86  update fastopen cache
 19138                                  	; MSDOS 3.3 & MSDOS 6.0
 19139 00003058 52                      	PUSH	DX
 19140 00003059 B400                    	MOV	AH,0			; dir entry update
 19141 0000305B 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19142                                  	; MSDOS 6.0
 19143 0000305D 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19144 0000305F 750D                    	JNZ	short do_update2	;AN005; no, do update
 19145 00003061 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19146                                  	;mov	di,[si+1Bh]
 19147 00003063 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19148                                  	;mov	cx,[si+1Dh]
 19149 00003066 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19150                                  	;mov	dh,[si+1Fh]
 19151 00003069 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19152 0000306C EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19153                                  do_update2:				;AN011;F.O.
 19154                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19155                                  	; 
 19156 0000306E 363B0E[BD0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19157 00003073 7407                    	JZ	short do_update		;AN011;F.O. yes
 19158 00003075 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19159 00003077 368B0E[BD0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19160                                  do_update:				;AN005;
 19161                                  ;hkn; SS is DOSDATA
 19162                                  	;Context DS
 19163 0000307C 16                      	push	ss
 19164 0000307D 1F                      	pop	ds	
 19165                                  	; MSDOS 3.3 & MSDOS 6.0
 19166 0000307E E8E2F6                  	call	FastOpen_Update 	; invoke fastopen
 19167 00003081 5A                      	POP	DX
 19168                                  
 19169                                  ;;; 10/1/86  update fastopen cache
 19170 00003082 E8BA2A                  	call	FLUSHBUF		; flush all relevant buffers
 19171 00003085 5F                      	pop	di
 19172 00003086 07                      	pop	es
 19173                                  	;mov	al,5
 19174 00003087 B005                    	MOV	AL,error_access_denied
 19175 00003089 7201                    	JC	short CloseFinish
 19176                                  FREE_SFT_OK:
 19177 0000308B F8                      	CLC				; signal no error.
 19178                                  CloseFinish:
 19179                                  
 19180                                  ; Indicate to the device that the SFT is being closed.
 19181                                  
 19182                                  ;;;; 7/21/86
 19183 0000308C 9C                      	PUSHF				; save flag from DirFromSFT
 19184 0000308D E81B16                  	call	DEV_CLOSE_SFT
 19185 00003090 9D                      	POPF
 19186                                  ;;;; 7/21/86
 19187                                  ;
 19188                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19189                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19190                                  ; going to be moving from busy to free.
 19191                                  ;
 19192 00003091 59                      	POP	CX			; get old ref count
 19193 00003092 9C                      	PUSHF
 19194 00003093 49                      	DEC	CX			; if cx != 1
 19195 00003094 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19196 00003096 26890D                  	mov	[es:di],cx
 19197                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19198                                  NoFree:
 19199 00003099 E8D7E2                  	call	LCritDisk
 19200 0000309C 9D                      	POPF
 19201 0000309D C3                      	retn
 19202                                  
 19203                                  ;---------------------------------------------------------------------------
 19204                                  ;
 19205                                  ; Procedure Name : FREE_SFT
 19206                                  ;
 19207                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19208                                  ; Flags preserved. Return old ref count in AX
 19209                                  ;
 19210                                  ; Note that busy is indicated by the SFT ref count being -1.
 19211                                  ;
 19212                                  ;---------------------------------------------------------------------------
 19213                                  
 19214                                  FREE_SFT:
 19215 0000309E 9C                      	PUSHF		; Save carry state
 19216 0000309F 268B05                  	mov	ax,[es:di]
 19217                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19218 000030A2 48                      	DEC	AX
 19219 000030A3 7501                    	JNZ	short SetCount
 19220 000030A5 48                      	DEC	AX
 19221                                  SetCount:
 19222 000030A6 268705                  	xchg	ax,[es:di]
 19223                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19224 000030A9 9D                      	POPF
 19225 000030AA C3                      	retn
 19226                                  
 19227                                  	; 18/05/2019 - Retro DOS v4.0
 19228                                  
 19229                                  ;----------------------------------------------------------------------------
 19230                                  ;
 19231                                  ; Procedure Name : DirFromSFT
 19232                                  ;
 19233                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19234                                  ;
 19235                                  ;   Inputs:	ES:DI point to SFT
 19236                                  ;		DS = DOSDATA
 19237                                  ;   Outputs:
 19238                                  ;		EXTERR_LOCUS = errLOC_Disk
 19239                                  ;		CurBuf points to buffer
 19240                                  ;		Carry Clear -> operation OK
 19241                                  ;		    ES:DI point to entry
 19242                                  ;		    ES:BX point to buffer
 19243                                  ;		    DS:SI point to SFT
 19244                                  ;		Carry SET   -> operation failed
 19245                                  ;		    registers trashified
 19246                                  ;   Registers modified: ALL
 19247                                  ;----------------------------------------------------------------------------
 19248                                  
 19249                                  DirFromSFT:
 19250                                  	;mov	byte [EXTERR_LOCUS],2
 19251 000030AB C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19252 000030B0 06                      	push	es
 19253 000030B1 57                      	push	di
 19254                                  	; MSDOS 3.3
 19255                                  	;;mov	dx,[es:di+1Dh]
 19256                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19257                                  	; MSDOS 6.0
 19258                                  	;mov	dx,[es:[di+1Dh]
 19259 000030B2 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19260 000030B6 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19261                                  	;mov	dx,[es:di+1Bh]
 19262 000030BA 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19263                                  	; 19/05/2019
 19264 000030BE FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19265                                  	; MSDOS 3.3 & MSDOS 6.0
 19266 000030C2 52                      	PUSH	DX
 19267 000030C3 E8FB26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19268                                  					; [THISDPB] set
 19269 000030C6 5A                      	POP	DX
 19270 000030C7 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19271 000030CB 7225                    	JC	short PopDone
 19272 000030CD 30C0                    	XOR	AL,AL			; Pre read
 19273                                  	;mov	byte [ALLOWED],18h
 19274 000030CF C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19275 000030D4 E86A29                  	call	GETBUFFR
 19276 000030D7 7219                    	JC	short PopDone
 19277 000030D9 5E                      	pop	si
 19278 000030DA 1F                      	pop	ds			; Get back SFT pointer
 19279                                  
 19280                                  ;hkn; SS override
 19281 000030DB 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19282                                  	;or	byte [es:di+5],4
 19283 000030E0 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19284 000030E5 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19285                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19286                                  	;lea	di,[di+20] ; MSDOS 6.0
 19287 000030E7 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19288                                  	;mov	al,32
 19289 000030EA B020                    	MOV	AL,dir_entry.size
 19290                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19291 000030EC F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19292 000030EF 01C7                    	ADD	DI,AX			; Point at the entry
 19293 000030F1 C3                      	retn				; carry is clear
 19294                                  PopDone:
 19295 000030F2 5F                      	pop	di
 19296 000030F3 07                      	pop	es
 19297                                  PopDone_retn:
 19298 000030F4 C3                      	retn
 19299                                  
 19300                                  ;----------------------------------------------------------------------------
 19301                                  ;
 19302                                  ;**	DOS_Commit - UPdate Directory Entries
 19303                                  ;
 19304                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19305                                  ;		(DS) = DOSGROUP
 19306                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19307                                  ;	USES	all but DS
 19308                                  ;
 19309                                  ;----------------------------------------------------------------------------
 19310                                  
 19311                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19312                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19313                                  
 19314                                  DOS_COMMIT:
 19315                                  	;hkn; called from srvcall. DS already set up.
 19316 000030F5 C43E[9E05]              	LES	DI,[THISSFT]
 19317                                  	;mov	bx,[es:di+5]
 19318 000030F9 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19319                                  	;test	bx,0C0h
 19320                                  	; 17/12/2022
 19321 000030FD F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19322                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19323 00003100 75F2                    	jnz	short PopDone_retn
 19324                                  	;test	bx,8000h
 19325                                  	; 17/12/2022
 19326                                  	;test	bh,80h
 19327 00003102 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19328                                  	;TEST	BX,sf_isnet ; 8000h
 19329 00003105 7406                    	JZ	short LOCAL_COMMIT
 19330                                  
 19331                                  ;IF NOT Installed
 19332                                  ;	transfer NET_COMMIT
 19333                                  ;ELSE
 19334                                  	;mov	ax,1107h
 19335 00003107 B80711                  	MOV	AX,(MultNET<<8)|7
 19336 0000310A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19337                                  			; ES:DI -> SFT
 19338                                  			; SFT DPB field -> DPB of drive containing file
 19339                                  			; Return: CF set on error, AX = DOS error code
 19340                                  			; CF clear if successful
 19341                                  localcommit_retn: ; 18/12/2022	
 19342 0000310C C3                      	retn
 19343                                  ;ENDIF
 19344                                  
 19345                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19346                                  ; There are three ways we can do this. One is to enter a critical section to
 19347                                  ; protect a potential free. The second is to increment the ref count to mask
 19348                                  ; the close decrementing.
 19349                                  ;
 19350                                  ; The proper way is to let the caller's of close decide if a decrement should
 19351                                  ; be done. We do this by providing another entry into close after the
 19352                                  ; decrement and after the share information release.
 19353                                  
 19354                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19355                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19356                                  
 19357                                  LOCAL_COMMIT:
 19358 0000310D E848E2                  	call	ECritDisk
 19359                                  	; MSDOS 6.0
 19360 00003110 E845E2                  	call	ECritDisk	;PTM.
 19361 00003113 E80E00                  	call	SetSFTTimes
 19362 00003116 B8FFFF                  	MOV	AX,-1
 19363 00003119 E8A9FE                  	call	CloseEntry
 19364                                  	; MSDOS 6.0
 19365 0000311C 9C                      	PUSHF			;PTM.				;AN000;
 19366 0000311D E88315                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19367 00003120 9D                      	POPF			;PTM.				;AN000;
 19368                                  	;call	LCritDisk	;PTM.				;AN000;
 19369                                  	; 18/12/2022
 19370 00003121 E94FE2                  	jmp	LCritDisk
 19371                                  ;localcommit_retn:
 19372                                  ;	retn
 19373                                  
 19374                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19375                                  ;----------------------------------------------------------------------------
 19376                                  ;
 19377                                  ; Procedure Name : SetSFTTimes
 19378                                  ;
 19379                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19380                                  ;   Reflect these times in other SFT's for the same file.
 19381                                  ;
 19382                                  ;   Inputs:	ES:DI point to SFT
 19383                                  ;		BX = sf_flags set apprpriately
 19384                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19385                                  ;   Registers modified: All except ES:DI, BX, AX
 19386                                  ;
 19387                                  ;----------------------------------------------------------------------------
 19388                                  
 19389                                  SetSFTTimes:
 19390                                  ;	File clean or device does not get stamped nor disk looked at.
 19391                                  	
 19392                                  	;test	bx,0C0h
 19393                                  	; 17/12/2022
 19394 00003124 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19395                                  	;TEST	BX,devid_file_clean+devid_device
 19396                                  	;retnz				; clean or device => no timestamp
 19397 00003127 75E3                    	jnz	short localcommit_retn
 19398                                  
 19399                                  ;	file and dirty. See if date is good
 19400                                  
 19401                                  	;test	bx,4000h
 19402                                  	; 17/12/2022
 19403                                  	;test	bh,40h
 19404 00003129 F6C740                  	test	bh,(sf_close_nodate>>8)
 19405                                  	;TEST	BX,sf_close_nodate
 19406                                  	;retnz				; nodate => no timestamp
 19407 0000312C 75DE                    	jnz	short localcommit_retn
 19408                                  
 19409 0000312E 50                      	push	ax
 19410 0000312F 53                      	push	bx
 19411 00003130 E8DCD9                  	call	DATE16			; Date/Time to AX/DX
 19412                                  	;mov	[es:di+0Fh],ax
 19413 00003133 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19414                                  	;mov	[es:di+0Dh],dx
 19415 00003137 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19416 0000313B 31C0                    	XOR	AX,AX
 19417                                  ;if installed
 19418                                  	;call	JShare + 14 * 4
 19419 0000313D FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19420                                  ;else
 19421                                  ;	call	ShSU
 19422                                  ;endif
 19423 00003141 5B                      	pop	bx
 19424 00003142 58                      	pop	ax
 19425 00003143 C3                      	retn
 19426                                  
 19427                                  ;============================================================================
 19428                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19429                                  ;============================================================================
 19430                                  ; 23/07/2018 - Retro DOS v3.0
 19431                                  ; 18/05/2019 - Retro DOS v4.0
 19432                                  
 19433                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19434                                  
 19435                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19436                                  ;NAME  DIRCALL
 19437                                  
 19438                                  ;**	Low level directory manipulation routines for making removing and
 19439                                  ;	  verifying local or NET directories
 19440                                  ;
 19441                                  ;	DOS_MKDIR
 19442                                  ;	DOS_CHDIR
 19443                                  ;	DOS_RMDIR
 19444                                  ;
 19445                                  ;	Modification history:
 19446                                  ;
 19447                                  ;		Created: ARR 30 March 1983
 19448                                  
 19449                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19450                                  ;---------------------------------------------------------------------------
 19451                                  ;
 19452                                  ; Procedure Name : DOS_MkDir
 19453                                  ;
 19454                                  ; Inputs:
 19455                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19456                                  ;		terminated)
 19457                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19458                                  ;		( = -1 if current dir not involved, else
 19459                                  ;		 Points to first char after last "/" of current dir part)
 19460                                  ;	[THISCDS] Points to CDS being used
 19461                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19462                                  ; Function:
 19463                                  ;	Make a new directory
 19464                                  ; Returns:
 19465                                  ;	Carry Clear
 19466                                  ;		No error
 19467                                  ;	Carry Set
 19468                                  ;	    AX is error code
 19469                                  ;		error_path_not_found
 19470                                  ;			Bad path (not in curr dir part if present)
 19471                                  ;		error_bad_curr_dir
 19472                                  ;			Bad path in current directory part of path
 19473                                  ;		error_access_denied
 19474                                  ;			Already exists, device name
 19475                                  ; DS preserved, Others destroyed
 19476                                  ;---------------------------------------------------------------------------
 19477                                  
 19478                                  ;hkn; called from path.asm. DS already set up.
 19479                                  
 19480                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19481                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19482                                  
 19483                                  DOS_MKDIR:
 19484 00003144 E84CE1                  	call	TestNet
 19485 00003147 7313                    	JNC	short LOCAL_MKDIR
 19486                                  
 19487                                  ;IF NOT Installed
 19488                                  ;	transfer NET_MKDIR
 19489                                  ;ELSE
 19490                                  	;mov	ax,1103h
 19491 00003149 B80311                  	MOV	AX,(MultNET<<8)|3
 19492 0000314C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19493                                  			; SS = DOS CS
 19494                                  			; SDA first filename pointer -> fully-qualified directory name
 19495                                  			; SDA CDS pointer -> current directory
 19496                                  			; Return: CF set on error, AX = DOS error code
 19497                                  			; CF clear if successful
 19498 0000314E C3                      	retn
 19499                                  ;ENDIF
 19500                                  
 19501                                  NODEACCERRJ:
 19502                                  	;mov	ax,5
 19503 0000314F B80500                  	MOV	AX,error_access_denied
 19504                                  _BadRet:
 19505 00003152 F9                      	STC
 19506                                  	;call	LCritDisk
 19507                                  	;retn
 19508                                  	; 18/12/2022
 19509 00003153 E91DE2                  	jmp	LCritDisk
 19510                                  
 19511                                  PATHNFJ:
 19512 00003156 E81AE2                  	call	LCritDisk
 19513 00003159 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19514                                  
 19515                                  LOCAL_MKDIR:
 19516 0000315C E8F9E1                  	call	ECritDisk
 19517                                  
 19518                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19519                                  
 19520 0000315F 8C16[A005]              	MOV	[THISSFT+2],SS
 19521                                  
 19522                                  ;hkn; DOSDATA
 19523 00003163 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19524                                  
 19525                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19526                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19527                                  
 19528                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19529 00003169 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19530                                  				; make sure SHARER won't complain.
 19531                                  	;mov	al,10h
 19532 0000316F B010                    	MOV	AL,attr_directory
 19533 00003171 E8E418                  	call	MakeNode
 19534 00003174 72E0                    	JC	short PATHNFJ
 19535 00003176 83F803                  	CMP	AX,3
 19536 00003179 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19537 0000317B C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19538 0000317F C53E[E205]              	LDS	DI,[CURBUF]
 19539 00003183 29FE                    	SUB	SI,DI
 19540 00003185 56                      	PUSH	SI		; Pointer to dir_first
 19541                                  	; MSDOS 6.0
 19542                                  	;push	word [DI+8]
 19543 00003186 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19544                                  	; MSDOS 3.3 & MSDOS 6.0
 19545                                  	;push	word [di+6]
 19546 00003189 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19547 0000318C 16                      	push	ss
 19548 0000318D 1F                      	pop	ds
 19549 0000318E FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19550 00003192 31C0                    	XOR	AX,AX
 19551 00003194 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19552 00003197 E8F117                  	call	NEWDIR
 19553 0000319A 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19554 0000319C E89C0D                  	call	GETENT		; First entry
 19555 0000319F 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19556 000031A1 C43E[E205]              	LES	DI,[CURBUF]
 19557                                  
 19558                                  	; MSDOS 6.0
 19559 000031A5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19560                                  				 ;LB. if already dirty		    ;AN000;
 19561 000031AA 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19562 000031AC E8982A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19563                                  	
 19564                                  	; MSDOS 3.3 & MSDOS 6.0
 19565                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19566 000031AF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19567                                  yesdirty5:
 19568                                  	;;add	di,16 ; MSDOS 3.3
 19569                                  	;add	di,20 ; MSDOS 6.0
 19570 000031B4 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19571 000031B7 B82E20                  	MOV	AX,202EH	; ". "
 19572 000031BA 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19573 000031BE E87318                  	call	SETDOTENT
 19574 000031C1 B82E2E                  	MOV	AX,2E2EH	; ".."
 19575 000031C4 5A                      	POP	DX		; Parent
 19576 000031C5 E86C18                  	call	SETDOTENT
 19577 000031C8 C42E[8A05]              	LES	BP,[THISDPB]
 19578                                  	;mov	byte [ALLOWED],18h
 19579 000031CC C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19580 000031D1 5A                      	POP	DX		; Entry sector
 19581                                  	; MSDOS 6.0
 19582 000031D2 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19583                                  
 19584 000031D6 30C0                    	XOR	AL,AL		; Pre read
 19585 000031D8 E86628                  	call	GETBUFFR
 19586 000031DB 7262                    	JC	short NODEEXISTSP
 19587 000031DD 8B16[C205]              	MOV	DX,[DIRSTART]
 19588 000031E1 C53E[E205]              	LDS	DI,[CURBUF]
 19589                                  	;or	byte [di+5],4
 19590 000031E5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19591 000031E9 5E                      	POP	SI		; dir_first pointer
 19592 000031EA 01FE                    	ADD	SI,DI
 19593 000031EC 8914                    	MOV	[SI],DX
 19594 000031EE 31D2                    	XOR	DX,DX
 19595 000031F0 895402                  	MOV	[SI+2],DX	; Zero size
 19596 000031F3 895404                  	MOV	[SI+4],DX
 19597                                  DIRUP:
 19598                                  	; MSDOS 6.0
 19599 000031F6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19600                                  	;			 ;LB. if already dirty 		   ;AN000;
 19601 000031FA 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19602 000031FC E8482A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19603                                  	
 19604                                  	; MSDOS 3.3 & MSDOS 6.0
 19605                                  	;or	byte [di+5],40h
 19606 000031FF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19607                                  yesdirty6:
 19608 00003203 16                      	push	ss
 19609 00003204 1F                      	pop	ds
 19610 00003205 268A4600                	mov	al,[es:bp]
 19611                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19612 00003209 E83329                  	call	FLUSHBUF
 19613                                  	;mov	ax,5
 19614 0000320C B80500                  	MOV	AX,error_access_denied
 19615                                  	;call	LCritDisk
 19616                                  	;retn
 19617                                  	; 18/12/2022
 19618 0000320F E961E1                  	jmp	LCritDisk
 19619                                  
 19620                                  NODEEXISTSPOPDEL:
 19621 00003212 5A                      	POP	DX		; Parent
 19622 00003213 5A                      	POP	DX		; Entry sector
 19623                                  	; MSDOS 6.0 
 19624 00003214 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19625 00003218 C42E[8A05]              	LES	BP,[THISDPB]
 19626                                  	;mov	byte [ALLOWED],18h
 19627 0000321C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19628 00003221 30C0                    	XOR	AL,AL		; Pre read
 19629 00003223 E81B28                  	call	GETBUFFR
 19630 00003226 7217                    	JC	short NODEEXISTSP
 19631 00003228 C53E[E205]              	LDS	DI,[CURBUF]
 19632                                  	;or	byte [di+5],4
 19633 0000322C 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19634 00003230 5E                      	POP	SI		; dir_first pointer
 19635 00003231 01FE                    	ADD	SI,DI
 19636                                  	;sub	si,1Ah ; 26
 19637 00003233 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19638 00003236 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19639 00003239 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19640                                  NODEEXISTS:
 19641 0000323C E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19642                                  
 19643                                  NODEEXISTSP:
 19644 0000323F 5E                      	POP	SI		; Clean stack
 19645 00003240 EBFA                    	JMP	short NODEEXISTS
 19646                                  
 19647                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19648                                  
 19649                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19650                                  ;----------------------------------------------------------------------------
 19651                                  ;
 19652                                  ; Procedure Name : DOS_ChDir
 19653                                  ;
 19654                                  ; Inputs:
 19655                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19656                                  ;		terminated)
 19657                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19658                                  ;		( = -1 if current dir not involved, else
 19659                                  ;		 Points to first char after last "/" of current dir part)
 19660                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19661                                  ; Function:
 19662                                  ;	Validate the path for potential new current directory
 19663                                  ; Returns:
 19664                                  ;	NOTE:
 19665                                  ;	    [SATTRIB] is modified by this call
 19666                                  ;	Carry Clear
 19667                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19668                                  ;		Caller must NOT set ID fields on a NET CDS.
 19669                                  ;	Carry Set
 19670                                  ;	    AX is error code
 19671                                  ;		error_path_not_found
 19672                                  ;			Bad path
 19673                                  ;		error_access_denied
 19674                                  ;			device or file name
 19675                                  ; DS preserved, Others destroyed
 19676                                  ;----------------------------------------------------------------------------
 19677                                  
 19678                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19679                                  
 19680                                  ; 18/05/2019 - Retro DOS v4.0
 19681                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19682                                  
 19683                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19684                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19685                                  
 19686                                  DOS_CHDIR:
 19687 00003242 E84EE0                  	call	TestNet
 19688 00003245 7306                    	JNC	short LOCAL_CHDIR
 19689                                  
 19690                                  ;IF NOT Installed
 19691                                  ;	transfer NET_CHDIR
 19692                                  ;ELSE
 19693                                  	;mov	ax,1105h
 19694 00003247 B80511                  	MOV	AX,(MultNET<<8)|5
 19695 0000324A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19696                                  			; SS = DOS CS
 19697                                  			; SDA first filename pointer -> fully-qualified directory name
 19698                                  			; SDA CDS pointer -> current directory
 19699                                  			; Return: CF set on error, AX = DOS error code
 19700                                  			; CF clear if successful
 19701 0000324C C3                      	retn
 19702                                  ;ENDIF
 19703                                  
 19704                                  LOCAL_CHDIR:
 19705 0000324D E808E1                  	call	ECritDisk
 19706                                  	; MSDOS 6.0
 19707                                  	;;test	word [es:di+43h],2000h
 19708                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19709                                  	; 17/12/2022
 19710                                  	;test	byte [es:di+44h],20h
 19711 00003250 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19712 00003255 7406                    	JZ	short nojoin		   ;PTM.
 19713                                  	;mov	word [es:di+49h], 0FFFFh
 19714 00003257 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19715                                  nojoin:
 19716                                  	; MSDOS 3.3 & MSDOS 6.0
 19717 0000325D C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19718                                  	;mov	byte [SATTRIB],16h
 19719 00003262 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19720                                  				; Dir calls can find these
 19721                                  ; DOS 3.3  6/24/86 FastOpen
 19722 00003267 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19723 0000326C E85B0D                  	call	GETPATH
 19724 0000326F 9C                      	PUSHF						;AN000;
 19725 00003270 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19726 00003275 9D                      	POPF						;AN000;
 19727                                  ; DOS 3.3  6/24/86 FastOpen
 19728                                  
 19729                                  	; MSDOS 3.3
 19730                                  	;mov	byte [FastOpenFlg],0
 19731                                  	
 19732                                  	;mov	ax,3
 19733 00003276 B80300                  	MOV	AX,error_path_not_found
 19734 00003279 7207                    	JC	short ChDirDone
 19735 0000327B 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19736 0000327D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19737 00003281 F8                      	CLC
 19738                                  ChDirDone:
 19739                                  	;call	LCritDisk
 19740                                  	;retn
 19741                                  	; 18/12/2022
 19742 00003282 E9EEE0                  	jmp	LCritDisk
 19743                                  
 19744                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19745                                  ;----------------------------------------------------------------------------
 19746                                  ;
 19747                                  ; Procedure Name : DOS_RmDir
 19748                                  ;
 19749                                  ; Inputs:
 19750                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19751                                  ;		terminated)
 19752                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19753                                  ;		( = -1 if current dir not involved, else
 19754                                  ;		 Points to first char after last "/" of current dir part)
 19755                                  ;	[THISCDS] Points to CDS being used
 19756                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19757                                  ; Function:
 19758                                  ;	Remove a directory
 19759                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19760                                  ; Returns:
 19761                                  ;	NOTE:
 19762                                  ;	    [SATTRIB] is modified by this call
 19763                                  ;	Carry Clear
 19764                                  ;		No error
 19765                                  ;	Carry Set
 19766                                  ;	    AX is error code
 19767                                  ;		error_path_not_found
 19768                                  ;			Bad path (not in curr dir part if present)
 19769                                  ;		error_bad_curr_dir
 19770                                  ;			Bad path in current directory part of path
 19771                                  ;		error_access_denied
 19772                                  ;			device or file name, root directory
 19773                                  ;			Bad directory ('.' '..' messed up)
 19774                                  ; DS preserved, Others destroyed
 19775                                  ;----------------------------------------------------------------------------
 19776                                  
 19777                                  ;hkn; called from path.asm. DS already set up.
 19778                                  
 19779                                  ; 18/05/2019 - Retro DOS v4.0
 19780                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19781                                  
 19782                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19783                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19784                                  
 19785                                  DOS_RMDIR:
 19786 00003285 E80BE0                  	call	TestNet
 19787 00003288 7306                    	JNC	short LOCAL_RMDIR
 19788                                  
 19789                                  ;IF NOT Installed
 19790                                  ;	transfer NET_RMDIR
 19791                                  ;ELSE
 19792                                  	;mov	ax,1101h
 19793 0000328A B80111                  	MOV	AX,(MultNET<<8)|1
 19794 0000328D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19795                                  			; SS = DOS CS
 19796                                  			; SDA first filename pointer -> fully-qualified directory name
 19797                                  			; SDA CDS pointer -> current directory
 19798                                  			; Return: CF set on error, AX = DOS error code
 19799                                  			; CF clear if successful
 19800 0000328F C3                      	retn
 19801                                  ;ENDIF
 19802                                  
 19803                                  LOCAL_RMDIR:
 19804 00003290 E8C5E0                  	call	ECritDisk
 19805 00003293 C606[4C03]00            	MOV	byte [NoSetDir],0
 19806                                  	;mov	byte [SATTRIB],16h
 19807 00003298 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19808                                  					; Dir calls can find these
 19809 0000329D E82A0D                  	call	GETPATH
 19810 000032A0 720C                    	JC	short NOPATH		; Path not found
 19811 000032A2 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19812 000032A4 8B3E[C205]              	MOV	DI,[DIRSTART]
 19813 000032A8 09FF                    	OR	DI,DI			; Root ?
 19814 000032AA 750E                    	JNZ	short rmdir_get_buf	; No
 19815 000032AC EB09                    	JMP	SHORT NOTDIRPATH
 19816                                  
 19817                                  NOPATH:
 19818                                  	;mov	ax,3
 19819 000032AE B80300                  	MOV	AX,error_path_not_found
 19820 000032B1 E99EFE                  	JMP	_BadRet
 19821                                  
 19822                                  NOTDIRPATHPOP:
 19823 000032B4 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19824 000032B5 58                      	POP	AX
 19825                                  NOTDIRPATHPOP2:
 19826 000032B6 58                      	POP	AX
 19827                                  NOTDIRPATH:
 19828 000032B7 E995FE                  	JMP	NODEACCERRJ
 19829                                  
 19830                                  rmdir_get_buf:
 19831 000032BA C53E[E205]              	LDS	DI,[CURBUF]
 19832 000032BE 29FB                    	SUB	BX,DI		; Compute true offset
 19833 000032C0 53                      	PUSH	BX		; Save entry pointer
 19834                                  	
 19835                                  	; MSDOS 6.0
 19836                                  	;push	word [di+8]
 19837 000032C1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19838                                  	
 19839                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19840                                  	;push	word [di+6]
 19841 000032C4 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19842                                  
 19843                                  ;hkn; SS is DOSDATA
 19844                                  	;context DS
 19845 000032C7 16                      	push	ss
 19846 000032C8 1F                      	pop	ds
 19847                                  	;context ES
 19848 000032C9 16                      	push	ss
 19849 000032CA 07                      	pop	es
 19850                                  
 19851                                  ;hkn; NAME1 is in DOSDATA
 19852 000032CB BF[4B05]                	MOV	DI,NAME1
 19853 000032CE B03F                    	MOV	AL,'?'
 19854 000032D0 B90B00                  	MOV	CX,11
 19855 000032D3 F3AA                    	REP	STOSB
 19856 000032D5 30C0                    	XOR	AL,AL
 19857 000032D7 AA                      	STOSB				; Nul terminate it
 19858 000032D8 E88C0F                  	call	STARTSRCH		; Set search
 19859 000032DB E85A0C                  	call	GETENTRY		; Get start of directory
 19860 000032DE 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19861 000032E0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19862 000032E4 89DE                    	MOV	SI,BX
 19863 000032E6 AD                      	LODSW
 19864                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19865 000032E7 3D2E20                  	cmp	ax,202Eh ; ". "
 19866 000032EA 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19867                                  	;add	si,30
 19868 000032EC 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19869 000032EF AD                      	LODSW
 19870                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19871                                  	;cmp	ax, '..'
 19872 000032F0 3D2E2E                  	cmp	ax,2E2Eh
 19873 000032F3 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19874                                  
 19875                                  ;hkn; SS is DOSDATA
 19876                                  	;context DS
 19877 000032F5 16                      	push	ss
 19878 000032F6 1F                      	pop	ds
 19879 000032F7 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19880 000032FD E8380C                  	call	GETENTRY		; Get next entry
 19881 00003300 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19882                                  	;mov	byte [ATTRIB],16h
 19883 00003302 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19884 00003307 E82D0B                  	call	SRCH			; Do a search
 19885 0000330A 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19886 0000330C 803E[4A03]00            	CMP	byte [FAILERR],0
 19887 00003311 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19888 00003313 C42E[8A05]              	LES	BP,[THISDPB]
 19889 00003317 8B1E[C205]              	MOV	BX,[DIRSTART]
 19890 0000331B E87D1C                  	call	RELEASE 		; Release data in sub dir
 19891 0000331E 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19892 00003320 5A                      	POP	DX			; Sector # of entry
 19893 00003321 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19894                                  	;mov	byte [ALLOWED],18h
 19895 00003325 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19896 0000332A 30C0                    	XOR	AL,AL			; Pre read
 19897 0000332C E81227                  	call	GETBUFFR		; Get sector back
 19898 0000332F 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19899 00003331 C53E[E205]              	LDS	DI,[CURBUF]
 19900                                  	;or	byte [di+5],4
 19901 00003335 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19902 00003339 5B                      	POP	BX			; Pointer to start of entry
 19903 0000333A 01FB                    	ADD	BX,DI			; Corrected
 19904 0000333C C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19905                                  
 19906                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19907 0000333F 1E                      	PUSH	DS
 19908                                  
 19909                                  ;hkn; SS is DOSDATA
 19910                                  	;context DS
 19911 00003340 16                      	push	ss
 19912 00003341 1F                      	pop	ds
 19913                                  
 19914                                  	; MSDOS 6.0
 19915 00003342 E8EFF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19916                                  
 19917                                  ;	; MSDOS 3.3
 19918                                  ;_FastOpen_Delete:
 19919                                  ;	push	ax
 19920                                  ;	mov	si,[WFP_START]
 19921                                  ;	mov	bx,FastTable
 19922                                  ;	;mov	al,3  ; FONC_delete
 19923                                  ;	mov	al,FONC_delete
 19924                                  ;	call	far [BX+2]  ; FastTable+2
 19925                                  ;	pop	ax
 19926                                  
 19927 00003345 1F                      	POP	DS
 19928                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19929                                  
 19930 00003346 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19931                                  
 19932                                  ;============================================================================
 19933                                  ; DISK.ASM, MSDOS 6.0, 1991
 19934                                  ;============================================================================
 19935                                  ; 23/07/2018 - Retro DOS v3.0 
 19936                                  ; 04/05/2019 - Retro DOS v4.0
 19937                                  
 19938                                  ;	TITLE	DISK - Disk utility routines
 19939                                  ;	NAME	Disk
 19940                                  
 19941                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19942                                  ;
 19943                                  ;	SWAPCON
 19944                                  ;	SWAPBACK
 19945                                  ;	DOS_READ
 19946                                  ;	DOS_WRITE
 19947                                  ;	get_io_sft
 19948                                  ;	DirRead
 19949                                  ;	FIRSTCLUSTER
 19950                                  ;	SET_BUF_AS_DIR
 19951                                  ;	FATSecRd
 19952                                  ;	DREAD
 19953                                  ;	CHECK_WRITE_LOCK
 19954                                  ;	CHECK_READ_LOCK
 19955                                  ;
 19956                                  ;	Revision history:
 19957                                  ;
 19958                                  ;		A000   version 4.00  Jan. 1988
 19959                                  ;
 19960                                  ;----------------------------------------------------------------------------
 19961                                  ;
 19962                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19963                                  ;		error happens, DOS retries the entire block assuming that
 19964                                  ;		zero characters were transferred. Modified the code to take
 19965                                  ;		into account the number of characters transfered before
 19966                                  ;		retrying the operation.
 19967                                  ;
 19968                                  ;----------------------------------------------------------------------------
 19969                                  ;
 19970                                  
 19971                                  ;Installed = TRUE
 19972                                  
 19973                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 19974                                  
 19975                                  ; **** Drivers for file input from devices ****
 19976                                  ;----------------------------------------------------------------------------
 19977                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 19978                                  ;   of handles 0 and 1
 19979                                  ;
 19980                                  ;   Inputs:	DS is DOSDATA
 19981                                  ;   Outputs:	CONSWAP is set to false.
 19982                                  ;   Registers modified: none
 19983                                  ;----------------------------------------------------------------------------
 19984                                  
 19985                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 19986                                  
 19987                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 19988                                  ; 04/05/2019 - Retro DOS v4.0
 19989                                  
 19990                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 19991                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19992                                  
 19993                                  SWAPBACK:
 19994 00003349 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 19995 0000334E C3                      	retn
 19996                                  
 19997                                  ;----------------------------------------------------------------------------
 19998                                  ;
 19999                                  ; Procedure Name : SWAPCON
 20000                                  ;
 20001                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20002                                  ;
 20003                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20004                                  ;		DS is DOSDATA
 20005                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20006                                  ;   Registers modified: none
 20007                                  ;--------------------------------------------------------------------------
 20008                                  
 20009                                  SWAPCON:
 20010                                  	; MSDOS 3.3
 20011                                  	;push	es
 20012                                  	;push	di
 20013                                  	;mov	byte [CONSWAP],1
 20014                                  	;les	di,[THISSFT]
 20015                                  	;mov	word [CONSFT],di
 20016                                  	;mov	word [CONSFT+2],es
 20017                                  	;pop	di
 20018                                  	;pop	es
 20019                                  	;retn
 20020                                  
 20021                                  	; MSDOS 6.0
 20022 0000334F C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20023 00003354 50                      	push	ax
 20024 00003355 A1[9E05]                	mov	ax,[THISSFT]
 20025 00003358 A3[E605]                	mov	[CONSFT],ax
 20026 0000335B A1[A005]                	mov	ax,[THISSFT+2]
 20027 0000335E A3[E805]                	mov	[CONSFT+2],ax
 20028 00003361 58                      	pop	ax
 20029 00003362 C3                      	retn
 20030                                  
 20031                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20032                                  ; 04/05/2019 - Retro DOS v4.0
 20033                                  
 20034                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20035                                  ;-----------------------------------------------------------------------------
 20036                                  ;
 20037                                  ; Inputs:
 20038                                  ;	ThisSFT set to the SFT for the file being used
 20039                                  ;	[DMAADD] contains transfer address
 20040                                  ;	CX = No. of bytes to read
 20041                                  ;	DS = DOSDATA
 20042                                  ; Function:
 20043                                  ;	Perform read operation
 20044                                  ; Outputs:
 20045                                  ;    Carry clear
 20046                                  ;	SFT Position and cluster pointers updated
 20047                                  ;	CX = No. of bytes read
 20048                                  ;	ES:DI point to SFT
 20049                                  ;    Carry set
 20050                                  ;	AX is error code
 20051                                  ;	CX = 0
 20052                                  ;	ES:DI point to SFT
 20053                                  ; DS preserved, all other registers destroyed
 20054                                  ;
 20055                                  ;-----------------------------------------------------------------------------
 20056                                  
 20057                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20058                                  
 20059                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20060                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20061                                  
 20062                                  DOS_READ:
 20063 00003363 C43E[9E05]              	LES	DI,[THISSFT]
 20064                                  
 20065                                  ; Verify that the sft has been opened in a mode that allows reading.
 20066                                  
 20067                                  	;mov	al,[es:di+2]
 20068 00003367 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20069                                  	;and	al,0Fh
 20070 0000336B 240F                    	AND	AL,access_mask
 20071                                  	;cmp	al,1
 20072 0000336D 3C01                    	CMP	AL,open_for_write
 20073 0000336F 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20074 00003371 E91506                  	jmp	SET_ACC_ERR
 20075                                  
 20076                                  READ_NO_MODE:
 20077 00003374 E8ED04                  	call	SETUP
 20078 00003377 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20079 00003379 E830DF                  	call	IsSFTNet
 20080 0000337C 7408                    	JZ	short LOCAL_READ
 20081                                  
 20082                                  ;IF NOT Installed
 20083                                  ;	transfer NET_READ
 20084                                  ;ELSE
 20085                                  	;mov	ax,1108h
 20086 0000337E B80811                  	MOV	AX,(MultNET<<8)|8
 20087 00003381 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20088                                  			; ES:DI -> SFT
 20089                                  			; SFT DPB field -> DPB of drive containing file
 20090                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20091                                  			; Return: CF set on error, CX = bytes read
 20092 00003383 C3                      	retn
 20093                                  ;ENDIF
 20094                                  
 20095                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20096                                  ; except return immediately.
 20097                                  
 20098                                  NoIORet:
 20099 00003384 F8                      	CLC
 20100 00003385 C3                      	retn
 20101                                  
 20102                                  LOCAL_READ:
 20103                                  	;test	word [es:di+5],80h
 20104                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20105 00003386 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20106 0000338B 750E                    	JNZ	short READDEV
 20107                                  
 20108                                  	;mov	byte [EXTERR_LOCUS],2
 20109 0000338D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20110 00003392 E8C3DF                  	call	ECritDisk
 20111 00003395 E8AD05                  	call	DISKREAD
 20112                                  
 20113                                  critexit:
 20114                                  	;call	LCritDisk
 20115                                  	;retn
 20116                                  	; 16/12/2022
 20117 00003398 E9D8DF                  	jmp	LCritDisk
 20118                                  
 20119                                  ; We are reading from a device. Examine the status of the device to see if we
 20120                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20121                                  ; null device, we can safely indicate no transfer.
 20122                                  
 20123                                  READDEV:
 20124                                  	;mov	byte [EXTERR_LOCUS],4
 20125 0000339B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20126                                  	;mov	bl,[es:di+5]
 20127 000033A0 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20128 000033A4 C43E[2C03]              	LES	DI,[DMAADD]
 20129                                  	;test	bl,40h
 20130 000033A8 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20131 000033AB 7407                    	JZ	short ENDRDDEVJ3
 20132                                  	;test	bl,4
 20133 000033AD F6C304                  	test	BL,devid_device_null	; NUL device?
 20134 000033B0 7405                    	JZ	short TESTRAW 		; NO
 20135 000033B2 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20136                                  ENDRDDEVJ3:
 20137                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20138                                  	;JMP	short ENDRDDEVJ2
 20139                                  	; 16/12/2022
 20140 000033B4 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20141                                  
 20142                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20143                                  ; bizarre std_con_string_input.
 20144                                  
 20145                                  TESTRAW:
 20146                                  	;test	bl,20h
 20147 000033B7 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20148 000033BA 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20149                                  	;test	bl,1
 20150 000033BC F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20151 000033BF 7461                    	JZ	short NOTRDCON
 20152 000033C1 E98F01                  	JMP	READCON
 20153                                  
 20154                                  DVRDRAW:
 20155 000033C4 06                      	PUSH	ES
 20156 000033C5 1F                      	POP	DS			; Xaddr to DS:DI
 20157                                  
 20158                                  	; 04/05/2019 - Retro DOS v4.0
 20159                                  
 20160                                  	; MSDOS 6.0
 20161                                  ;SR;
 20162                                  ;Check for win386 presence -- if present, do polled read of characters
 20163                                  
 20164 000033C6 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20165 000033CC 7408                    	jz	short ReadRawRetry	;not present
 20166 000033CE F6C301                  	test	bl,devid_device_con_in	;is it console device
 20167 000033D1 7403                    	jz	short ReadRawRetry	;no, do normal read
 20168 000033D3 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20169                                  
 20170                                  ReadRawRetry:
 20171 000033D6 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20172 000033D8 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20173 000033DA 89C2                    	MOV	DX,AX			; Start at 0
 20174 000033DC E8BE13                  	call	SETREAD
 20175 000033DF 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20176                                  
 20177                                  ;hkn; SS override
 20178 000033E0 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20179 000033E5 E83C13                  	call	DEVIOCALL
 20180 000033E8 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20181 000033EA B486                    	MOV	AH,86H			; Read error
 20182                                  
 20183                                  ;hkn; SS override
 20184 000033EC 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20185                                  	; MSDOS 3.3
 20186                                  	;test	di,8000h
 20187                                  	;jz	short CRDROK
 20188                                  	; MSDOS 6.0
 20189 000033F1 09FF                    	or	di,di
 20190 000033F3 7923                    	jns	short CRDROK		; no errors
 20191                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20192 000033F5 E8BC1F                  	call	CHARHARD
 20193 000033F8 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20194                                  
 20195                                  	; 04/05/2019
 20196                                  
 20197                                  	; MSDOS 6.0
 20198 000033FA 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20199 000033FF 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20200                                  
 20201                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20202 00003404 08C0                    	OR	AL,AL
 20203 00003406 7410                    	JZ	short CRDROK		; Ignore
 20204 00003408 3C03                    	CMP	AL,3
 20205 0000340A 7403                    	JZ	short CRDFERR 		; fail.
 20206 0000340C 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20207 0000340D EBC7                    	JMP	short ReadRawRetry	; Retry
 20208                                  
 20209                                  ; We have encountered a device-driver error. We have informed the user of it
 20210                                  ; and he has said for us to fail the system call.
 20211                                  
 20212                                  CRDFERR:
 20213 0000340F 5F                      	POP	DI			; Clean stack
 20214                                  DEVIOFERR:
 20215                                  
 20216                                  ;hkn; SS override
 20217 00003410 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20218 00003415 E96F05                  	jmp	SET_ACC_ERR_DS
 20219                                  
 20220                                  CRDROK:
 20221 00003418 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20222 00003419 89D7                    	MOV	DI,DX
 20223                                  
 20224                                  ;hkn; SS override
 20225 0000341B 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20226                                  	;JMP	SHORT ENDRDDEVJ3
 20227                                  	; 16/12/2022
 20228 00003420 EB6B                    	jmp	short ENDRDDEVJ2
 20229                                  
 20230                                  ; We are going to do a cooked read on some character device. There is a
 20231                                  ; problem here, what does the data look like? Is it a terminal device, line
 20232                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20233                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20234                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20235                                  ; included in data). this "simulates" the way con works in cooked mode
 20236                                  ; reading one line at a time. With file data, however, the lines will look
 20237                                  ; like, LF line CR. This is a little weird.
 20238                                  
 20239                                  NOTRDCON:
 20240 00003422 8CC0                    	MOV	AX,ES
 20241 00003424 8ED8                    	MOV	DS,AX
 20242 00003426 89FB                    	MOV	BX,DI
 20243 00003428 31D2                    	XOR	DX,DX
 20244 0000342A 89D0                    	MOV	AX,DX
 20245 0000342C 51                      	PUSH	CX
 20246 0000342D B90100                  	MOV	CX,1
 20247 00003430 E86A13                  	call	SETREAD
 20248 00003433 59                      	POP	CX
 20249                                  
 20250                                  ;hkn; SS override
 20251 00003434 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20252                                  	;lds	si,[si+7]
 20253 00003439 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20254                                  DVRDLP:
 20255 0000343C E8551D                  	call	DSKSTATCHK
 20256 0000343F E8E512                  	call	DEVIOCALL2
 20257 00003442 57                      	PUSH	DI		; Save "count" done
 20258 00003443 B486                    	MOV	AH,86H
 20259                                  
 20260                                  ;hkn; SS override
 20261 00003445 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20262                                  	
 20263                                  	; MSDOS 3.3
 20264                                  	;test	di,8000h
 20265                                  	;jz	short CRDOK
 20266                                  	; MSDOS 6.0
 20267 0000344A 09FF                    	or	di,di
 20268 0000344C 7917                    	jns	short CRDOK
 20269                                  	
 20270 0000344E E8631F                  	call	CHARHARD
 20271 00003451 5F                      	POP	DI
 20272                                  
 20273                                  ;hkn; SS override
 20274 00003452 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20275 00003459 3C01                    	CMP	AL,1
 20276 0000345B 74DF                    	JZ	short DVRDLP		;Retry
 20277 0000345D 3C03                    	CMP	AL,3
 20278 0000345F 74AF                    	JZ	short DEVIOFERR		; FAIL
 20279 00003461 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20280 00003463 EB12                    	JMP	SHORT DVRDIGN
 20281                                  
 20282                                  CRDOK:
 20283 00003465 5F                      	POP	DI
 20284                                  
 20285                                  ;hkn; SS override
 20286 00003466 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20287                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20288 0000346C 751F                    	JNZ	short ENDRDDEVJ2
 20289                                  	; 16/12/2022
 20290                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20291                                  
 20292 0000346E 1E                      	PUSH	DS
 20293                                  
 20294                                  ;hkn; SS override
 20295 0000346F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20296 00003474 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20297 00003476 1F                      	POP	DS
 20298                                  DVRDIGN:
 20299                                  
 20300                                  ;hkn; SS override
 20301 00003477 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20302 0000347C 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20303 00003483 47                      	INC	DI			; Next character
 20304 00003484 3C1A                    	CMP	AL,1Ah			; ^Z?
 20305                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20306 00003486 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20307                                  	; 16/12/2022
 20308                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20309 00003488 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20310 0000348A E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20311 0000348C 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20312                                  					;  AX=FFFF which is not likely
 20313                                  ENDRDDEVJ2:
 20314                                  	; 16/12/2022
 20315                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20316                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20317 0000348D E98E00                  	jmp	ENDRDDEV
 20318                                  
 20319                                  	; 04/05/2019
 20320                                  
 20321                                  	; MSDOS 6.0
 20322                                  ;SR;
 20323                                  ;Polling code for raw read on CON when WIN386 is present
 20324                                  ;
 20325                                  ;At this point -- ds:di is transfer address
 20326                                  ;		  cx is count
 20327                                  
 20328                                  do_polling:
 20329 00003490 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20330 00003492 31C0                    	xor	ax,ax
 20331 00003494 89C2                    	mov	dx,ax
 20332 00003496 E80413                  	call	SETREAD			;prepare device packet
 20333                                  
 20334                                  do_io:
 20335                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20336                                  
 20337 00003499 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20338 0000349E 1E                      	push	ds
 20339 0000349F 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20340 000034A4 E87D12                  	call	DEVIOCALL		;call device driver
 20341 000034A7 1F                      	pop	ds
 20342                                  	
 20343                                  	;test	word [es:bx+3],8000h
 20344                                  	; 16/12/2022
 20345                                  	;test	byte [es:bx+4],80h
 20346 000034A8 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20347                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20348 000034AD 7413                    	jz	short check_busy	;no
 20349                                  
 20350 000034AF 1E                      	push	ds
 20351 000034B0 89FA                    	mov	dx,di
 20352                                  	;invoke charhard		;invoke int 24h handler
 20353 000034B2 E8FF1E                  	call	CHARHARD
 20354 000034B5 89D7                    	mov	di,dx
 20355 000034B7 08C0                    	or	al,al
 20356 000034B9 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20357 000034BB 3C03                    	cmp	al,3
 20358 000034BD 7448                    	jz	short devrderr		;user asked to fail
 20359 000034BF 1F                      	pop	ds
 20360 000034C0 EBD7                    	jmp	short do_io		;user asked to retry
 20361                                  
 20362                                  check_busy:
 20363                                  	;test	word [es:bx+3],200h
 20364                                  	; 16/12/2022
 20365 000034C2 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20366                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20367 000034C7 7547                    	jnz	short no_char		;yes, no character available
 20368                                  
 20369                                  ;Character is available. Read in 1 character at a time until all characters
 20370                                  ;are read in or no character is available
 20371                                  
 20372 000034C9 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20373 000034CE 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20374 000034D4 1E                      	push	ds
 20375 000034D5 36C536[9E05]            	lds	si,[ss:THISSFT]
 20376 000034DA E84712                  	call	DEVIOCALL
 20377                                  
 20378 000034DD 89FA                    	mov	dx,di
 20379 000034DF B486                    	mov	ah,86h
 20380                                  	;mov	di,[es:bx+3]
 20381 000034E1 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20382 000034E5 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20383 000034E9 7410                    	jz	short next_char		;no,read next character
 20384                                  
 20385                                  	;invoke	charhard		;invoke int 24h handler
 20386 000034EB E8C61E                  	call	CHARHARD
 20387 000034EE 89D7                    	mov	di,dx			;restore di
 20388 000034F0 08C0                    	or	al,al			;
 20389 000034F2 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20390 000034F4 3C03                    	cmp	al,3
 20391 000034F6 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20392 000034F8 1F                      	pop	ds
 20393 000034F9 EB9E                    	jmp	short do_io		;user issued a retry
 20394                                  
 20395                                  next_char:
 20396 000034FB 1F                      	pop	ds
 20397 000034FC 89D7                    	mov	di,dx
 20398 000034FE 49                      	dec	cx			;decrement count
 20399 000034FF E318                    	jcxz	done_read		;all characters read in
 20400 00003501 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20401 00003505 EB92                    	jmp	short do_io			;read next character in
 20402                                  
 20403                                  devrderr:
 20404 00003507 5F                      	pop	di			;discard segment address
 20405 00003508 36C43E[9E05]            	les	di,[ss:THISSFT]
 20406                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20407 0000350D E97704                  	jmp     SET_ACC_ERR_DS
 20408                                  
 20409                                  no_char:
 20410                                  ;Since no character is available, we let win386 switch the VM out
 20411                                  
 20412 00003510 50                      	push	ax
 20413 00003511 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20414 00003513 CD2A                    	int	2Ah			;indicate idle to WIN386
 20415                                  
 20416                                  ;When control returns from WIN386, we continue the raw read
 20417                                  
 20418 00003515 58                      	pop	ax
 20419 00003516 EB81                    	jmp	do_io
 20420                                  
 20421                                  pop_done_read:
 20422 00003518 1F                      	pop	ds
 20423                                  done_read:
 20424 00003519 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20425                                  
 20426                                  	; 16/12/2022
 20427                                  
 20428                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20429                                  	;jmp	ENDRDDEV ; 04/05/2019
 20430                                  
 20431                                  	; 04/05/2019 - Retro DOS v4.0
 20432                                  ENDRDDEV:
 20433 0000351E 16                      	push	ss
 20434 0000351F 1F                      	pop	ds
 20435 00003520 EB1F                    	jmp	short endrddev1
 20436                                  
 20437                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20438                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20439                                  
 20440                                  TRANBUF:
 20441 00003522 AC                      	LODSB
 20442 00003523 AA                      	STOSB
 20443 00003524 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20444 00003526 7503                    	JNZ	short NORMCH
 20445 00003528 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20446                                  NORMCH:
 20447 0000352B 3C0A                    	CMP	AL,c_LF ; 0Ah
 20448 0000352D E0F3                    	LOOPNZ	TRANBUF
 20449 0000352F 7507                    	JNZ	short ENDRDCON
 20450 00003531 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20451 00003533 E880E1                  	call	OUTT		; Transmit linefeed
 20452 00003536 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20453                                  ENDRDCON:
 20454                                  ;hkn; SS is DOSDATA
 20455 00003538 16                      	push	ss
 20456 00003539 1F                      	pop	ds
 20457 0000353A E80CFE                  	CALL	SWAPBACK
 20458 0000353D 8936[2200]              	MOV	[CONTPOS],SI
 20459                                  
 20460                                  	; 16/12/2022
 20461                                  ;ENDRDDEV:
 20462                                  ;;hkn; SS is DOSDATA
 20463                                  ;	push	ss
 20464                                  ;	pop	ds
 20465                                  endrddev1:	; 04/05/2019
 20466 00003541 893E[B805]              	MOV	[NEXTADD],DI
 20467 00003545 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20468 00003547 C43E[9E05]              	LES	DI,[THISSFT]
 20469                                  	;and	byte [es:di+5],0BFh
 20470 0000354B 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20471                                  				; Mark as no more data available
 20472                                  SETSFTC:
 20473                                  	; 31/07/2019
 20474                                  	;call	SETSFT
 20475                                  	;retn
 20476 00003550 E9C804                  	jmp	SETSFT
 20477                                  
 20478                                  ; 16/12/2022
 20479                                  %if 0
 20480                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20481                                  ENDRDDEV:
 20482                                  ;hkn; SS is DOSDATA
 20483                                  	push	ss
 20484                                  	pop	ds
 20485                                  	MOV	[NEXTADD],DI
 20486                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20487                                  	LES	DI,[THISSFT]
 20488                                  	;and	byte [es:di+5],0BFh
 20489                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20490                                  				; Mark as no more data available
 20491                                  SETSFTC:
 20492                                  	;call	SETSFT
 20493                                  	;retn
 20494                                  	jmp	SETSFT	
 20495                                  %endif
 20496                                  
 20497                                  READCON:
 20498 00003553 E8F9FD                  	CALL	SWAPCON
 20499 00003556 8B36[2200]              	MOV	SI,[CONTPOS]
 20500 0000355A 09F6                    	OR	SI,SI
 20501 0000355C 75C4                    	JNZ	short TRANBUF
 20502 0000355E 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20503 00003563 7406                    	JZ	short GETBUF
 20504 00003565 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20505                                  GETBUF:
 20506 0000356B 51                      	PUSH	CX
 20507 0000356C 06                      	PUSH	ES
 20508 0000356D 57                      	PUSH	DI
 20509                                  
 20510                                  ;hkn; CONBUF is in DOSDATA
 20511 0000356E BA[7B02]                	MOV	DX,CONBUF
 20512                                  
 20513 00003571 E8B4DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20514 00003574 5F                      	POP	DI
 20515 00003575 07                      	POP	ES
 20516 00003576 59                      	POP	CX
 20517                                  
 20518                                  ;hkn; CONBUF is in DOSDATA
 20519 00003577 BE[7D02]                	MOV	SI,CONBUF+2
 20520                                  
 20521 0000357A 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20522 0000357D 75A3                    	JNZ	short TRANBUF
 20523 0000357F B01A                    	MOV	AL,1AH
 20524 00003581 AA                      	STOSB
 20525 00003582 4F                      	DEC	DI
 20526 00003583 B00A                    	MOV	AL,c_LF
 20527 00003585 E82EE1                  	call	OUTT		; Send linefeed
 20528 00003588 31F6                    	XOR	SI,SI
 20529 0000358A EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20530                                  
 20531                                  ; 24/07/2018 - Retro DOS v3.0
 20532                                  
 20533                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20534                                  ;---------------------------------------------------------------------------
 20535                                  ;
 20536                                  ; Procedure Name : DOS_WRITE
 20537                                  ;
 20538                                  ; Inputs:
 20539                                  ;	ThisSFT set to the SFT for the file being used
 20540                                  ;	[DMAADD] contains transfer address
 20541                                  ;	CX = No. of bytes to write
 20542                                  ; Function:
 20543                                  ;	Perform write operation
 20544                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20545                                  ;		to current sf_position
 20546                                  ; Outputs:
 20547                                  ;    Carry clear
 20548                                  ;	SFT Position and cluster pointers updated
 20549                                  ;	CX = No. of bytes written
 20550                                  ;	ES:DI point to SFT
 20551                                  ;    Carry set
 20552                                  ;	AX is error code
 20553                                  ;	CX = 0
 20554                                  ;	ES:DI point to SFT
 20555                                  ; DS preserved, all other registers destroyed
 20556                                  ;---------------------------------------------------------------------------
 20557                                  
 20558                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20559                                  ;hkn; point to DOSDATA.
 20560                                  
 20561                                  ; 04/05/2019 - Retro DOS v4.0
 20562                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20563                                  
 20564                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20565                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20566                                  
 20567                                  DOS_WRITE:
 20568 0000358C C43E[9E05]              	LES	DI,[THISSFT]
 20569                                  	;mov	al,[ES:DI+2]
 20570 00003590 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20571                                  	;and	al,0Fh
 20572 00003594 240F                    	AND	AL,access_mask
 20573                                  	;cmp	al,0
 20574 00003596 3C00                    	CMP	AL,open_for_read
 20575 00003598 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20576                                  BadMode:
 20577 0000359A E9EC03                  	jmp	SET_ACC_ERR
 20578                                  
 20579                                  ; NOTE: The following check for writting to a Read Only File is performed
 20580                                  ;	    ONLY on FCBs!!!!
 20581                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20582                                  ;	    of a read only file which can then be written to.
 20583                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20584                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20585                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20586                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20587                                  ;	    to a read-only file.
 20588                                  
 20589                                  Check_FCB_RO:
 20590                                  	;;test	word [es:di+2],8000h
 20591                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20592                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20593                                  	
 20594                                  	;test	byte [es:di+3],80h
 20595 0000359D 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20596 000035A2 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20597                                  
 20598                                  	;test	byte [es:di+4],1
 20599 000035A4 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20600 000035A9 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20601                                  WRITE_NO_MODE:
 20602 000035AB E8B602                  	call	SETUP
 20603 000035AE E8FBDC                  	call	IsSFTNet
 20604 000035B1 7406                    	JZ	short LOCAL_WRITE
 20605                                  
 20606                                  ;IF NOT Installed
 20607                                  ;	transfer NET_WRITE
 20608                                  ;ELSE
 20609                                  	;mov	ax,1109h
 20610 000035B3 B80911                  	MOV	AX,(MultNET<<8)|9
 20611 000035B6 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20612                                  			; ES:DI -> SFT
 20613                                  			; SFT DPB field -> DPB of drive containing file
 20614                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20615                                  			; Return: CF set on error, CX = bytes written
 20616 000035B8 C3                      	retn
 20617                                  ;ENDIF
 20618                                  
 20619                                  LOCAL_WRITE:
 20620                                  	;;test	word [es:di+5],80h
 20621                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20622                                  	;jnz	short WRTDEV
 20623                                  
 20624                                  	;test	byte [es:di+5],80h
 20625 000035B9 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20626 000035BE 756E                    	jnz	short WRTDEV
 20627                                  
 20628                                  	;mov	byte [EXTERR_LOCUS],2
 20629 000035C0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20630 000035C5 E890DD                  	call	ECritDisk
 20631                                  
 20632 000035C8 E80805                  	call	DISKWRITE
 20633                                  
 20634                                  	; 04/05/2019 - Retro DOS v4.0
 20635                                  
 20636                                  	; MSDOS 6.0
 20637                                  ; Extended Open
 20638 000035CB 7210                    	JC	short nocommit
 20639                                  	
 20640 000035CD C43E[9E05]              	LES	DI,[THISSFT]
 20641                                  	
 20642                                  	;;test	word [ES:DI+2],4000h
 20643                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20644                                  	;JZ	short nocommit
 20645                                  	
 20646                                  	;test	byte [ES:DI+3],40h
 20647 000035D1 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20648 000035D6 7405                    	JZ	short nocommit
 20649                                  	
 20650 000035D8 51                      	PUSH	CX
 20651 000035D9 E819FB                  	call	DOS_COMMIT
 20652 000035DC 59                      	POP	CX
 20653                                  nocommit:
 20654                                  ; Extended Open
 20655                                  	;call	LCritDisk
 20656                                  	;retn
 20657                                  	; 18/12/2022
 20658 000035DD E993DD                  	jmp	LCritDisk
 20659                                  
 20660                                  DVWRTRAW:
 20661 000035E0 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20662 000035E2 E8EB11                  	call	SETWRITE
 20663 000035E5 1E                      	PUSH	DS			; Save seg of transfer
 20664                                  
 20665                                  ;hkn; SS override
 20666 000035E6 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20667 000035EB E83611                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20668                                  
 20669 000035EE 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20670 000035F0 B487                    	MOV	AH,87H
 20671                                  
 20672                                  ;hkn; SS override
 20673 000035F2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20674                                  
 20675                                  	; MSDOS 3.3
 20676                                  	;test	di,8000h
 20677                                  	;jz	short CWRTROK
 20678                                  
 20679                                  	; MSDOS 6.0
 20680 000035F7 09FF                    	or	di,di
 20681 000035F9 7920                    	jns	short CWRTROK
 20682                                  	
 20683                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20684 000035FB E8B61D                  	call	CHARHARD
 20685                                  
 20686                                  	; 04/05/2019  - Retro DOS v4.0
 20687                                  
 20688                                  	; MSDOS 6.0
 20689 000035FE 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20690 00003603 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20691 00003605 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20692 0000360A 89DF                    	mov	di,bx			;				M065
 20693                                  	
 20694                                  	; MSDOS 3.3
 20695                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20696                                  
 20697                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20698 0000360C 08C0                    	OR	AL,AL
 20699 0000360E 740B                    	JZ	short CWRTROK 		; Ignore
 20700 00003610 3C03                    	CMP	AL,3
 20701 00003612 7403                    	JZ	short CWRFERR
 20702 00003614 1F                      	POP	DS			; Recover saved seg of transfer
 20703 00003615 EBC9                    	JMP	short DVWRTRAW		; Try again
 20704                                  CWRFERR:
 20705 00003617 58                      	POP	AX			; Chuck saved seg of transfer
 20706 00003618 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20707                                  CWRTROK:
 20708 0000361B 58                      	POP	AX			; Chuck saved seg of transfer
 20709 0000361C 1F                      	POP	DS
 20710 0000361D A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20711                                  ENDWRDEV:
 20712 00003620 C43E[9E05]              	LES	DI,[THISSFT]
 20713 00003624 89C1                    	MOV	CX,AX
 20714                                  	;call	ADDREC
 20715                                  	;retn
 20716                                  	; 16/12/2022
 20717                                  	; 10/06/2019
 20718 00003626 E91304                  	jmp	ADDREC
 20719                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20720                                  	;call	ADDREC
 20721                                  	;retn
 20722                                  	
 20723                                  WRTNUL:
 20724 00003629 89CA                    	MOV	DX,CX			; Entire transfer done
 20725                                  WRTCOOKJ:
 20726 0000362B E98D00                  	JMP	WRTCOOKDONE
 20727                                  WRTDEV:
 20728                                  	;mov	byte [EXTERR_LOCUS],4
 20729 0000362E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20730                                  	;or	byte [es:di+5],40h
 20731 00003633 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20732                                  					; Reset EOF for input
 20733                                  	;mov	bl,[es:di+5]
 20734 00003638 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20735 0000363C 31C0                    	XOR	AX,AX
 20736 0000363E E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20737 00003640 1E                      	PUSH	DS
 20738 00003641 88D8                    	MOV	AL,BL
 20739 00003643 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20740 00003647 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20741 00003649 31D2                    	XOR	DX,DX			; Set starting point
 20742                                  	;test	al,20h
 20743 0000364B A820                    	test	AL,devid_device_raw	; Raw?
 20744                                  	;JZ	short TEST_DEV_CON
 20745                                  	;JMP	DVWRTRAW
 20746                                  	; 16/12/2022
 20747 0000364D 7591                    	jnz	short DVWRTRAW
 20748                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20749                                  	;JZ	short TEST_DEV_CON
 20750                                  	;JMP	short DVWRTRAW
 20751                                  
 20752                                  TEST_DEV_CON:
 20753                                  	;test	al,2
 20754 0000364F A802                    	test	AL,devid_device_con_out ; Console output device?
 20755 00003651 756E                    	jnz	short WRITECON
 20756                                  	;test	al,4
 20757 00003653 A804                    	test	AL,devid_device_null
 20758 00003655 75D2                    	JNZ	short WRTNUL
 20759 00003657 89D0                    	MOV	AX,DX
 20760 00003659 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20761 0000365C 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20762 0000365E 51                      	PUSH	CX
 20763 0000365F B90100                  	MOV	CX,1
 20764 00003662 E86B11                  	call	SETWRITE
 20765 00003665 59                      	POP	CX
 20766                                  
 20767                                  ;hkn; SS override
 20768 00003666 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20769                                  ;
 20770                                  ;SR; Removed X25 support from here
 20771                                  ;
 20772                                  	;lds	si,[si+7]
 20773 0000366B C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20774                                  DVWRTLP:
 20775 0000366E E8231B                  	call	DSKSTATCHK
 20776 00003671 E8B310                  	call	DEVIOCALL2
 20777 00003674 57                      	PUSH	DI
 20778 00003675 B487                    	MOV	AH,87H
 20779                                  
 20780                                  ;hkn; SS override
 20781 00003677 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20782                                  	
 20783                                  	; MSDOS 3.3
 20784                                  	;test	di,8000h
 20785                                  	;jz	short CWROK
 20786                                  
 20787                                  	; MSDOS 6.0
 20788 0000367C 09FF                    	or	di,di
 20789 0000367E 7916                    	jns	short CWROK
 20790                                  	
 20791                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20792 00003680 E8311D                  	call	CHARHARD
 20793 00003683 5F                      	POP	DI
 20794                                  
 20795                                  ;hkn; SS override
 20796 00003684 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20797 0000368B 3C01                    	CMP	AL,1
 20798 0000368D 74DF                    	JZ	short DVWRTLP 	; Retry
 20799 0000368F 08C0                    	OR	AL,AL
 20800 00003691 740C                    	JZ	short DVWRTIGN	; Ignore
 20801                                  	; 10/08/2018
 20802 00003693 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20803                                  CWROK:
 20804 00003696 5F                      	POP	DI
 20805                                  
 20806                                  ;hkn; SS override
 20807 00003697 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20808 0000369D 741C                    	JZ	short WRTCOOKDONE
 20809                                  DVWRTIGN:
 20810 0000369F 42                      	INC	DX
 20811                                  
 20812                                  ;hkn; SS override for CALLXAD
 20813 000036A0 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20814 000036A5 47                      	INC	DI
 20815 000036A6 1E                      	PUSH	DS
 20816 000036A7 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20817 000036AC 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20818 000036AF 1F                      	POP	DS
 20819 000036B0 7409                    	JZ	short WRTCOOKDONE
 20820                                  
 20821                                  ;hkn; SS override
 20822 000036B2 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20823 000036B9 E2B3                    	LOOP	DVWRTLP
 20824                                  WRTCOOKDONE:
 20825 000036BB 89D0                    	MOV	AX,DX
 20826 000036BD 1F                      	POP	DS
 20827 000036BE E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20828                                  
 20829                                  WRITECON:
 20830 000036C1 1E                      	PUSH	DS
 20831                                  
 20832                                  ;hkn; SS is DOSDATA
 20833 000036C2 16                      	push	ss
 20834 000036C3 1F                      	pop	ds
 20835 000036C4 E888FC                  	CALL	SWAPCON
 20836 000036C7 1F                      	POP	DS
 20837 000036C8 89DE                    	MOV	SI,BX
 20838 000036CA 51                      	PUSH	CX
 20839                                  WRCONLP:
 20840 000036CB AC                      	LODSB
 20841 000036CC 3C1A                    	CMP	AL,1Ah		; ^Z?
 20842 000036CE 7405                    	JZ	short CONEOF
 20843 000036D0 E8E3DF                  	call	OUTT
 20844 000036D3 E2F6                    	LOOP	WRCONLP
 20845                                  CONEOF:
 20846 000036D5 58                      	POP	AX			; Count
 20847 000036D6 29C8                    	SUB	AX,CX			; Amount actually written
 20848 000036D8 1F                      	POP	DS
 20849 000036D9 E86DFC                  	CALL	SWAPBACK
 20850 000036DC E941FF                  	JMP	ENDWRDEV
 20851                                  
 20852                                  ;---------------------------------------------------------------------------
 20853                                  ;
 20854                                  ; Procedure Name : get_io_sft
 20855                                  ;
 20856                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20857                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20858                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20859                                  ;
 20860                                  ;---------------------------------------------------------------------------
 20861                                  
 20862                                  ; 04/05/2019 - Retro DOS v4.0
 20863                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20864                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20865                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20866                                  
 20867                                  GET_IO_SFT:
 20868                                  	;test	byte [SS:CONSWAP],0FFh
 20869 000036DF 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20870 000036E5 7512                    	JNZ	short GetRedir
 20871                                  GetNormal:
 20872 000036E7 16                      	push	ss
 20873 000036E8 1F                      	pop	ds
 20874 000036E9 06                      	PUSH	ES
 20875 000036EA 57                      	PUSH	DI
 20876 000036EB E88130                  	call	SFFromHandle
 20877 000036EE 7206                    	JC	short RET44P
 20878 000036F0 8CC6                    	MOV	SI,ES
 20879 000036F2 8EDE                    	MOV	DS,SI
 20880 000036F4 89FE                    	MOV	SI,DI
 20881                                  RET44P:
 20882 000036F6 5F                      	POP	DI
 20883 000036F7 07                      	POP	ES
 20884 000036F8 C3                      	retn
 20885                                  GetRedir:
 20886 000036F9 83FB01                  	CMP	BX,1
 20887 000036FC 77E9                    	JA	short GetNormal
 20888 000036FE 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20889 00003703 F8                      	CLC
 20890                                  get_io_sft_retn:
 20891 00003704 C3                      	retn
 20892                                  
 20893                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20894                                  ;---------------------------------------------------------------------------
 20895                                  ;
 20896                                  ; Procedure Name : DIRREAD
 20897                                  ;
 20898                                  ; Inputs:
 20899                                  ;	AX = Directory block number (relative to first block of directory)
 20900                                  ;	ES:BP = Base of drive parameters
 20901                                  ;	[DIRSEC] = First sector of first cluster of directory
 20902                                  ;	[CLUSNUM] = Next cluster
 20903                                  ;	[CLUSFAC] = Sectors/Cluster
 20904                                  ; Function:
 20905                                  ;	Read the directory block into [CURBUF].
 20906                                  ; Outputs:
 20907                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20908                                  ;	[SECCLUSPOS] Set
 20909                                  ;	ES:BP unchanged
 20910                                  ;	[CURBUF] Points to Buffer with dir sector
 20911                                  ;	Carry set if error (user said FAIL to I 24)
 20912                                  ; DS preserved, all other registers destroyed.
 20913                                  ;---------------------------------------------------------------------------
 20914                                  
 20915                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20916                                  
 20917                                  DIRREAD:
 20918                                  
 20919                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20920                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20921                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20922                                  ; by DIRStart = 0.
 20923                                  
 20924 00003705 31D2                    	XOR	DX,DX
 20925 00003707 833E[C205]00            	CMP	word [DIRSTART],0
 20926 0000370C 7503                    	jnz	short SubDir
 20927 0000370E 92                      	XCHG	AX,DX
 20928 0000370F EB0C                    	JMP	short DoRead
 20929                                  
 20930                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20931                                  
 20932                                  SubDir:
 20933 00003711 88C2                    	MOV	DL,AL
 20934                                  	;and	dl,[es:bp+4]
 20935 00003713 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20936                                  
 20937                                  ;	(DX) = sector-in-cluster
 20938                                  
 20939                                  	;mov	cl,[es:bp+5]
 20940 00003717 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20941 0000371B D3E8                    	SHR	AX,CL
 20942                                  
 20943                                  ;	(DX) = position in cluster
 20944                                  ;	(AX) = number of clusters to skip
 20945                                  
 20946                                  DoRead:
 20947 0000371D 8816[7305]              	MOV	[SECCLUSPOS],DL
 20948 00003721 89C1                    	MOV	CX,AX
 20949 00003723 88D4                    	MOV	AH,DL
 20950                                  
 20951                                  ;	(CX) = number of clusters to skip.
 20952                                  ;	(AH) = remainder
 20953                                  
 20954                                  	; 04/05/2019 - Retro DOS v4.0
 20955                                  
 20956                                  	; MSDOS 6.0
 20957 00003725 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20958 00003729 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20959 0000372D 8B16[BE05]              	MOV	DX,[DIRSEC]
 20960 00003731 00E2                    	ADD	DL,AH
 20961 00003733 80D600                  	ADC	DH,0
 20962 00003736 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20963                                  
 20964 0000373B 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20965 0000373F 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20966 00003743 E319                    	JCXZ	FIRSTCLUSTER
 20967                                  SKPCLLP:
 20968 00003745 E8D71E                  	call	UNPACK
 20969 00003748 72BA                    	jc	short get_io_sft_retn
 20970 0000374A 87DF                    	XCHG	BX,DI
 20971 0000374C E8B91E                  	call	IsEOF			; test for eof based on fat size
 20972 0000374F 7302                    	JAE	short HAVESKIPPED
 20973 00003751 E2F2                    	LOOP	SKPCLLP
 20974                                  HAVESKIPPED:
 20975 00003753 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20976 00003757 89FA                    	MOV	DX,DI
 20977 00003759 88E3                    	MOV	BL,AH
 20978 0000375B E86517                  	call	FIGREC
 20979                                  
 20980                                  	;entry	FIRSTCLUSTER
 20981                                  
 20982                                  FIRSTCLUSTER:
 20983                                  	;mov	byte [ALLOWED],18h
 20984 0000375E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 20985 00003763 30C0                    	XOR	AL,AL		; Indicate pre-read
 20986 00003765 E8D922                  	call	GETBUFFR
 20987 00003768 729A                    	jc	short get_io_sft_retn
 20988                                  
 20989                                  	;entry	SET_BUF_AS_DIR
 20990                                  
 20991                                  SET_BUF_AS_DIR:
 20992                                  
 20993                                  ;	Set the type of CURBUF to be a directory sector.
 20994                                  ;	Only flags are modified.
 20995                                  
 20996 0000376A 1E                      	PUSH	DS
 20997 0000376B 56                      	PUSH	SI
 20998 0000376C C536[E205]              	LDS	SI,[CURBUF]
 20999                                  	;or	byte [si+5],4
 21000 00003770 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21001 00003774 5E                      	POP	SI
 21002 00003775 1F                      	POP	DS
 21003                                  dirread_retn:
 21004 00003776 C3                      	retn
 21005                                  
 21006                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21007                                  ;----------------------------------------------------------------------------
 21008                                  ;
 21009                                  ; Procedure Name : FATSECRD
 21010                                  ; Inputs:
 21011                                  ;	Same as DREAD
 21012                                  ;	DS:BX = Transfer address
 21013                                  ;	CX = Number of sectors
 21014                                  ;	DX = Absolute record number
 21015                                  ;	ES:BP = Base of drive parameters
 21016                                  ; Function:
 21017                                  ;	Calls BIOS to perform FAT read.
 21018                                  ; Outputs:
 21019                                  ;	Same as DREAD
 21020                                  ;---------------------------------------------------------------------------
 21021                                  
 21022                                  	; 04/05/2019 - Retro DOS v4.0
 21023                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21024                                  
 21025                                  FATSECRD:
 21026                                  ;hkn; SS override
 21027                                  	;mov	byte [ss:ALLOWED],18h
 21028 00003777 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21029 0000377D 89CF                    	MOV	DI,CX
 21030                                  	;mov	cl,[es:bp+8]
 21031 0000377F 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21032                                  	; MSDOS 3.3
 21033                                  	;;mov	al,[es:bp+0Fh]
 21034                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21035                                  	;XOR	AH,AH
 21036                                  	; MSDOS 6.0
 21037                                  	;mov	ax,[es:bp+0Fh]
 21038 00003783 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21039 00003787 30ED                    	XOR	CH,CH	
 21040 00003789 52                      	PUSH	DX
 21041                                  NXTFAT:
 21042                                  	; MSDOS 6.0
 21043                                  ;hkn; SS override
 21044 0000378A 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21045 00003791 51                      	PUSH	CX			;32mb
 21046 00003792 50                      	PUSH	AX
 21047 00003793 89F9                    	MOV	CX,DI
 21048 00003795 E85B00                  	call	DSKREAD
 21049 00003798 58                      	POP	AX
 21050 00003799 59                      	POP	CX
 21051 0000379A 7420                    	JZ	short RET41P		; Carry clear
 21052 0000379C 01C2                    	ADD	DX,AX
 21053 0000379E E2EA                    	LOOP	NXTFAT
 21054 000037A0 5A                      	POP	DX
 21055 000037A1 89F9                    	MOV	CX,DI
 21056                                  
 21057                                  ; NOTE FALL THROUGH
 21058                                  
 21059                                  ;Break	<DREAD -- DO A DISK READ>
 21060                                  ;---------------------------------------------------------------------------
 21061                                  ;
 21062                                  ; Procedure Name : DREAD
 21063                                  ;
 21064                                  ; Inputs:
 21065                                  ;	DS:BX = Transfer address
 21066                                  ;	CX = Number of sectors
 21067                                  ;	DX = Absolute record number	      (LOW)
 21068                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21069                                  ;	ES:BP = Base of drive parameters
 21070                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21071                                  ; Function:
 21072                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21073                                  ;	errors, will call HARDERRRW for further action.
 21074                                  ; Outputs:
 21075                                  ;	Carry set if error (currently user FAILED to INT 24)
 21076                                  ; DS,ES:BP preserved. All other registers destroyed.
 21077                                  ;---------------------------------------------------------------------------
 21078                                  
 21079                                  	;entry	DREAD
 21080                                  DREAD:
 21081 000037A3 E84D00                  	call	DSKREAD
 21082 000037A6 74CE                    	jz	short dirread_retn	; Carry clear
 21083                                  ;hkn; SS override
 21084 000037A8 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21085 000037AE E89A00                  	call	HARDERRRW
 21086 000037B1 3C01                    	CMP	AL,1			; Check for retry
 21087 000037B3 74EE                    	JZ	short DREAD
 21088 000037B5 3C03                    	CMP	AL,3			; Check for FAIL
 21089 000037B7 F8                      	CLC
 21090 000037B8 7501                    	JNZ	short NO_CAR		; Ignore
 21091 000037BA F9                      	STC
 21092                                  NO_CAR:
 21093 000037BB C3                      	retn
 21094                                  RET41P: 
 21095 000037BC 5A                      	POP	DX
 21096 000037BD C3                      	retn
 21097                                  
 21098                                  ; 24/07/2018 - Retro DOS v3.0
 21099                                  
 21100                                  ;Break	<CHECK_WRITE_LOCK>
 21101                                  ;---------------------------------------------------------------------------
 21102                                  ;
 21103                                  ; Procedure Name : CHECK_WRITE_LOCK
 21104                                  ;
 21105                                  ; Inputs:
 21106                                  ;	output of SETUP
 21107                                  ;	ES:DI -> SFT
 21108                                  ; Function:
 21109                                  ;	check write lock
 21110                                  ; Outputs:
 21111                                  ;	Carry set if error
 21112                                  ;	Carry clear if ok
 21113                                  ;
 21114                                  ;----------------------------------------------------------------------------
 21115                                  
 21116                                  	; 04/05/2019 - Retro DOS v4.0
 21117                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21118                                  
 21119                                  CHECK_WRITE_LOCK:
 21120                                  	; MSDOS 6.0
 21121                                  	;test	byte [es:di+4],8
 21122 000037BE 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21123                                  	;JZ	short write_cont			     ;no
 21124                                  	;;call	SET_ACC_ERR_DS
 21125                                  	;;retn
 21126                                  	;;jnz	SET_ACC_ERR_DS
 21127                                  	; 19/08/2018
 21128                                  	;jz	short write_cont
 21129                                  	;jmp	SET_ACC_ERR_DS
 21130                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21131 000037C3 7403                    	JZ	short write_cont
 21132                                  	;call	SET_ACC_ERR_DS
 21133                                  	;retn
 21134                                  	; 16/12/2022
 21135 000037C5 E9BF01                  	jmp	SET_ACC_ERR_DS
 21136                                  
 21137                                  write_cont:				;
 21138 000037C8 51                      	PUSH	CX			;save reg
 21139 000037C9 09C9                    	OR	CX,CX			;
 21140 000037CB 7501                    	JNZ	short Not_Truncate	;
 21141 000037CD 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21142                                  Not_Truncate:				;
 21143 000037CE B080                    	MOV	AL,80H			;check write access
 21144 000037D0 E82A3C                  	call	LOCK_CHECK		;check lock
 21145 000037D3 59                      	POP	CX			;restore reg
 21146 000037D4 7305                    	JNC	short WRITE_OK		;lock ok
 21147 000037D6 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21148 000037D9 73ED                    	JNC	short write_cont	;retry
 21149                                  WRITE_OK:				;
 21150 000037DB C3                      	retn				;
 21151                                  
 21152                                  ;Break	<CHECK_READ_LOCK>
 21153                                  ;---------------------------------------------------------------------------
 21154                                  ;
 21155                                  ; Procedure Name : CHECK_READ_LOC
 21156                                  ;
 21157                                  ; Inputs:
 21158                                  ;	ES:DI -> SFT
 21159                                  ;	output of SETUP
 21160                                  ; Function:
 21161                                  ;	check read lock
 21162                                  ; Outputs:
 21163                                  ;	Carry set if error
 21164                                  ;	Carry clear if ok
 21165                                  ;----------------------------------------------------------------------------
 21166                                  
 21167                                  CHECK_READ_LOCK:
 21168                                  	; MSDOS 6.0
 21169                                  	;test	byte [es:di+4],8
 21170 000037DC 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21171                                  	;JZ	short do_retry			   	     ; no
 21172                                  	;;call	SET_ACC_ERR
 21173                                  	;;retn
 21174                                  	;;jnz	SET_ACC_ERR
 21175                                  	; 16/12/2022
 21176                                  	; 28/07/2019
 21177 000037E1 7403                    	jz	short do_retry
 21178 000037E3 E9A301                  	jmp	SET_ACC_ERR
 21179                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21180                                  	;JZ	short do_retry
 21181                                  	;call	SET_ACC_ERR
 21182                                  	;retn
 21183                                  do_retry:				;
 21184 000037E6 30C0                    	xor	al,al			;check read access
 21185 000037E8 E8123C                  	call	LOCK_CHECK		;check lock
 21186 000037EB 7305                    	JNC	short READLOCK_OK 	;lock ok
 21187 000037ED E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21188 000037F0 73F4                    	JNC	short do_retry		;retry
 21189                                  READLOCK_OK:				;
 21190 000037F2 C3                      	retn				;
 21191                                  
 21192                                  ;============================================================================
 21193                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21194                                  ;============================================================================
 21195                                  ; 24/07/2018 - Retro DOS v3.0
 21196                                  ; 04/05/2019 - Retro DOS v4.0
 21197                                  
 21198                                  ;	TITLE	DISK2 - Disk utility routines
 21199                                  ;	NAME	Disk2
 21200                                  
 21201                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21202                                  ;
 21203                                  ;	DskRead
 21204                                  ;	DWRITE
 21205                                  ;	DSKWRITE
 21206                                  ;	HarderrRW
 21207                                  ;	SETUP
 21208                                  ;	BREAKDOWN
 21209                                  ;	READ_LOCK_VIOLATION
 21210                                  ;	WRITE_LOCK_VIOLATION
 21211                                  ;	DISKREAD
 21212                                  ;	SET_ACC_ERR_DS
 21213                                  ;	SET_ACC_ERR
 21214                                  ;	SETSFT
 21215                                  ;	SETCLUS
 21216                                  ;	AddRec
 21217                                  ;
 21218                                  ;	Revision history:
 21219                                  ;
 21220                                  ;		AN000 version 4.00 Jan. 1988
 21221                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21222                                  
 21223                                  ; 04/05/2019 - Retro DOS v4.0
 21224                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21225                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21226                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21227                                  
 21228                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21229                                  ;---------------------------------------------------------------------------
 21230                                  ;
 21231                                  ; Procedure Name : DSKREAD
 21232                                  ;
 21233                                  ; Inputs:
 21234                                  ;	DS:BX = Transfer addr
 21235                                  ;	CX = Number of sectors
 21236                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21237                                  ;	DX = Absolute record number	       (LOW)
 21238                                  ;	ES:BP = Base of drive parameters
 21239                                  ; Function:
 21240                                  ;	Call BIOS to perform disk read
 21241                                  ; Outputs:
 21242                                  ;	DI = CX on entry
 21243                                  ;	CX = Number of sectors unsuccessfully transfered
 21244                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21245                                  ;	Zero set if OK (from BIOS) (carry clear)
 21246                                  ;	Zero clear if error (carry clear)
 21247                                  ; SI Destroyed, others preserved
 21248                                  ;---------------------------------------------------------------------------
 21249                                  
 21250                                  DSKREAD:
 21251 000037F3 51                      	PUSH	CX
 21252                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21253 000037F4 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21254                                  	;mov	al,[es:bp+1]
 21255 000037F8 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21256 000037FC 53                      	PUSH	BX
 21257 000037FD 06                      	PUSH	ES
 21258 000037FE E89C0F                  	call	SETREAD
 21259 00003801 EB27                    	JMP	short DODSKOP
 21260                                  
 21261                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21262                                  ;--------------------------------------------------------------------------
 21263                                  ;
 21264                                  ; Procedure Name : DWRITE
 21265                                  ;
 21266                                  ; Inputs:
 21267                                  ;	DS:BX = Transfer address
 21268                                  ;	CX = Number of sectors
 21269                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21270                                  ;	DX = Absolute record number	       (LOW)
 21271                                  ;	ES:BP = Base of drive parameters
 21272                                  ;	[ALLOWED] must be set in case HARDERR called
 21273                                  ; Function:
 21274                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21275                                  ;	errors, will call HARDERRRW for further action.
 21276                                  ; Output:
 21277                                  ;	Carry set if error (currently, user FAILed to I 24)
 21278                                  ; BP preserved. All other registers destroyed.
 21279                                  ;----------------------------------------------------------------------------
 21280                                  
 21281                                  	;entry	DWRITE
 21282                                  DWRITE:
 21283 00003803 E81600                  	CALL	DSKWRITE
 21284 00003806 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21285                                  
 21286                                  ;hkn; SS override
 21287 00003808 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21288 0000380E E83A00                  	call	HARDERRRW
 21289 00003811 3C01                    	CMP	AL,1		; Check for retry
 21290 00003813 74EE                    	JZ	short DWRITE
 21291 00003815 3C03                    	CMP	AL,3		; Check for FAIL
 21292 00003817 F8                      	CLC
 21293 00003818 7501                    	JNZ	short NO_CAR2 	; Ignore
 21294 0000381A F9                      	STC
 21295                                  NO_CAR2:
 21296                                  dw_ret_label:
 21297 0000381B C3                      	retn
 21298                                  
 21299                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21300                                  ;---------------------------------------------------------------------------
 21301                                  ;
 21302                                  ; Procedure Name : DSKWRITE
 21303                                  ;
 21304                                  ; Inputs:
 21305                                  ;	DS:BX = Transfer addr
 21306                                  ;	CX = Number of sectors
 21307                                  ;	DX = Absolute record number	       (LOW)
 21308                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21309                                  ;	ES:BP = Base of drive parameters
 21310                                  ; Function:
 21311                                  ;	Call BIOS to perform disk read
 21312                                  ; Outputs:
 21313                                  ;	DI = CX on entry
 21314                                  ;	CX = Number of sectors unsuccessfully transfered
 21315                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21316                                  ;	Zero set if OK (from BIOS) (carry clear)
 21317                                  ;	Zero clear if error (carry clear)
 21318                                  ; SI Destroyed, others preserved
 21319                                  ;
 21320                                  ;----------------------------------------------------------------------------
 21321                                  
 21322                                  	;entry	DSKWRITE
 21323                                  DSKWRITE:
 21324 0000381C 51                      	PUSH	CX
 21325                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21326 0000381D 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21327                                  	;mov	al,[es:bp+1]
 21328 00003821 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21329 00003825 53                      	PUSH	BX
 21330 00003826 06                      	PUSH	ES
 21331 00003827 E8A60F                  	call	SETWRITE
 21332                                  DODSKOP:
 21333 0000382A 8CD9                    	MOV	CX,DS		; Save DS
 21334 0000382C 1F                      	POP	DS		; DS:BP points to DPB
 21335 0000382D 1E                      	PUSH	DS
 21336                                  
 21337                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21338 0000382E 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21339 00003832 E8F20E                  	call	DEVIOCALL2
 21340                                  
 21341 00003835 8ED9                    	MOV	DS,CX		; Restore DS
 21342 00003837 07                      	POP	ES		; Restore ES
 21343 00003838 5B                      	POP	BX
 21344                                  
 21345                                  ;hkn; SS override
 21346 00003839 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21347 0000383E 5F                      	POP	DI
 21348 0000383F 29F9                    	SUB	CX,DI
 21349 00003841 F7D9                    	NEG	CX		; Number of sectors not transferred
 21350                                  
 21351                                  ;hkn; SS override
 21352 00003843 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21353                                  	;test	ax,8000h
 21354                                  	; 17/12/2022
 21355                                  	;test	ah,80h
 21356 00003847 F6C480                  	test	ah,(STERR>>8)
 21357                                  	;test	AX,STERR
 21358 0000384A C3                      	retn
 21359                                  
 21360                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21361                                  ;---------------------------------------------------------------------------
 21362                                  ;
 21363                                  ; Procedure Name : HardErrRW
 21364                                  ;
 21365                                  ; Inputs:
 21366                                  ;	AX is error code from read or write
 21367                                  ;	Other registers set as per HARDERR
 21368                                  ; Function:
 21369                                  ;	Checks the error code for special extended
 21370                                  ;	errors and maps them if needed. Then invokes
 21371                                  ;	Harderr
 21372                                  ; Outputs:
 21373                                  ;	Of HARDERR
 21374                                  ; AX may be modified prior to call to HARDERR.
 21375                                  ; No other registers altered.
 21376                                  ;
 21377                                  ;---------------------------------------------------------------------------
 21378                                  
 21379                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21380                                  HARDERRRW:
 21381                                  	;cmp	al,0Fh
 21382 0000384B 3C0F                    	CMP	AL,error_I24_wrong_disk
 21383 0000384D 7512                    	JNZ	short DO_ERR				; Nothing to do
 21384                                  
 21385                                  	; MSDOS 3.3
 21386                                  	;push	ds
 21387                                  	;push	si
 21388                                  	;lds	si,[ss:CALLVIDRW]
 21389                                  	;mov	[ss:EXTERRPT+2], ds
 21390                                  	;mov	[ss:EXTERRPT], si
 21391                                  	;pop	si
 21392                                  	;pop	ds
 21393                                  
 21394                                  	; MSDOS 6.0
 21395 0000384F 50                      	push	ax
 21396 00003850 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21397 00003854 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21398 00003858 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21399 0000385C 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21400 00003860 58                      	pop	ax
 21401                                  DO_ERR:
 21402                                  	;;call	HARDERR
 21403                                  	;;retn
 21404                                  	; 16/12/2022
 21405                                  	; 10/06/2019
 21406 00003861 E9811B                  	jmp	HARDERR	
 21407                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21408                                  	;call	HARDERR
 21409                                  	;retn
 21410                                  
 21411                                  ; 24/07/2018 - Retro DOS v3.0
 21412                                  
 21413                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21414                                  ;----------------------------------------------------------------------------
 21415                                  ;
 21416                                  ; Procedure Name : SETUP
 21417                                  ;
 21418                                  ; Inputs:
 21419                                  ;	ES:DI point to SFT (value also in THISSFT)
 21420                                  ;	DMAAdd contains transfer address
 21421                                  ;	CX = Byte count
 21422                                  ;	DS = DOSDATA
 21423                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21424                                  ;		2nd of caller of caller.
 21425                                  ; Outputs:
 21426                                  ;	    CX = byte count
 21427                                  ;	    [THISDPB] = Base of drive parameters if file
 21428                                  ;		      = Pointer to device header if device or NET
 21429                                  ;	    ES:DI Points to SFT
 21430                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21431                                  ;	    [TRANS] = 0 (No transfers yet)
 21432                                  ;	    BytPos = Byte position in file
 21433                                  ;
 21434                                  ;	The following fields are relevant to local files (not devices) only:
 21435                                  ;
 21436                                  ;	    SecPos = Position of first sector (local files only)
 21437                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21438                                  ;	    [CLUSNUM] = First cluster (local files only)
 21439                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21440                                  ;	    [THISDRV] = Physical unit number (local files only)
 21441                                  ;
 21442                                  ;      RETURNS ONE LEVEL UP WITH:
 21443                                  ;	   CX = 0
 21444                                  ;	   CARRY = Clear
 21445                                  ;	IF AN ERROR IS DETECTED
 21446                                  ; All other registers destroyed
 21447                                  ;----------------------------------------------------------------------------
 21448                                  
 21449                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21450                                  
 21451                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21452                                  
 21453                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21454                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21455                                  
 21456                                  SETUP:
 21457                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21458                                  
 21459                                  	;lds 	si,[es:di+7]
 21460 00003864 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21461                                  
 21462                                  ;hkn; SS override
 21463 00003868 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21464                                  
 21465                                  ;hkn; SS is DOSDATA
 21466 0000386D 16                      	push	ss
 21467 0000386E 1F                      	pop	ds
 21468                                  
 21469 0000386F 8936[8A05]              	MOV	[THISDPB],SI
 21470                                  
 21471 00003873 8B1E[2C03]              	MOV	BX,[DMAADD]
 21472 00003877 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21473 0000387B C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21474                                  	;mov	ax,[es:di+15h]
 21475 00003880 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21476                                  	;mov	dx,[es:di+17h]
 21477 00003884 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21478 00003888 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21479 0000388C A3[CE05]                	MOV	[BYTPOS],AX
 21480                                  	;test	word [es:di+5],8080h
 21481 0000388F 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21482 00003895 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21483 00003897 06                      	PUSH	ES
 21484 00003898 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21485                                  
 21486                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21487                                  	;;mov	bl,[es:bp+0]
 21488                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21489                                  	; 05/12/2022
 21490 0000389C 268A5E00                	mov	bl,[es:bp]
 21491                                  	
 21492 000038A0 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21493                                  	;mov	bx,[es:bp+2]
 21494 000038A4 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21495                                  
 21496                                  	;; MSDOS 3.3
 21497                                  	;cmp	dx,bx
 21498                                  	;jnb	short EOFERR
 21499                                  	;div	bx
 21500                                  	;mov	[SECPOS],ax
 21501                                  	;mov	[BYTSECPOS],dx
 21502                                  	;mov	dx,ax
 21503                                  	;;and	al,[es:bp+4]
 21504                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21505                                  	;mov	[SECCLUSPOS],al
 21506                                  	;mov	ax,cx
 21507                                  	;;mov	cl,[es:bp+5]
 21508                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21509                                  	;shr	dx,cl
 21510                                  	;mov	[CLUSNUM],dx
 21511                                  	;pop	es
 21512                                  	;mov	cx,ax
 21513                                  
 21514                                  	; 04/05/2019 - Retro DOS v4.0
 21515                                  
 21516                                  	; MSDOS 6.0
 21517                                  ;M039: Optimized this section.
 21518 000038A8 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21519 000038A9 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21520 000038AC 8916[CC05]              	MOV	[BYTSECPOS],DX
 21521 000038B0 A3[C405]                	MOV	[SECPOS],AX
 21522 000038B3 890E[C605]              	MOV	[SECPOS+2],CX
 21523 000038B7 89CA                    	MOV	DX,CX
 21524                                  
 21525 000038B9 89C3                    	MOV	BX,AX
 21526                                  	;and	bl,[es:bp+4]
 21527 000038BB 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21528 000038BF 881E[7305]              	MOV	[SECCLUSPOS],BL
 21529                                  
 21530 000038C3 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21531 000038C6 59                      	POP	CX			;CX = byte count.
 21532 000038C7 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21533                                  	;cmp	ax,[es:bp+0Dh]
 21534 000038C9 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21535 000038CD 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21536                                  
 21537 000038CF A3[BC05]                	MOV	[CLUSNUM],AX
 21538 000038D2 07                      	POP	ES			; ES:DI point to SFT
 21539                                  ;M039
 21540                                  
 21541                                  NOSETSTUFF:
 21542 000038D3 89C8                    	MOV	AX,CX		; AX = Byte count.
 21543 000038D5 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21544 000038D9 730C                    	JNC	short setup_OK	; Must be less than 64
 21545 000038DB A1[2C03]                	MOV	AX,[DMAADD]
 21546 000038DE F7D8                    	NEG	AX		; Amount of room left in segment (know
 21547                                  				;    less than 64K since max value of CX
 21548                                  				;    is FFFF).
 21549 000038E0 7501                    	JNZ	short NoDec
 21550 000038E2 48                      	DEC	AX
 21551                                  NoDec:
 21552 000038E3 89C1                    	MOV	CX,AX		; Can do this much
 21553 000038E5 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21554                                  setup_OK:
 21555 000038E7 C3                      	retn
 21556                                  
 21557                                  EOFERR:
 21558 000038E8 07                      	POP	ES		; ES:DI point to SFT
 21559 000038E9 31C9                    	XOR	CX,CX		; No bytes read
 21560                                  ;;;;;;;;;;; 7/18/86
 21561                                  	; MSDOS 3.3
 21562                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21563                                  ;;;;;;;;;;;
 21564                                  NOROOM:
 21565 000038EB 5B                      	POP	BX		; Kill return address
 21566 000038EC F8                      	CLC
 21567 000038ED C3                      	retn			; RETURN TO CALLER OF CALLER
 21568                                  
 21569                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21570                                  ;---------------------------------------------------------------------------
 21571                                  ;
 21572                                  ; Procedure Name : BREAKDOWN
 21573                                  ;
 21574                                  ; Inputs:
 21575                                  ;	CX = Length of disk transfer in bytes
 21576                                  ;	ES:BP = Base of drive parameters
 21577                                  ;	[BYTSECPOS] = Byte position within first sector
 21578                                  ;	DS = DOSDATA
 21579                                  ; Outputs:
 21580                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21581                                  ;	[SECCNT] = No. of whole sectors to transfer
 21582                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21583                                  ; AX, BX, DX destroyed. No other registers affected.
 21584                                  ;---------------------------------------------------------------------------
 21585                                  
 21586                                  BREAKDOWN:
 21587 000038EE A1[CC05]                	MOV	AX,[BYTSECPOS]
 21588 000038F1 89CB                    	MOV	BX,CX
 21589 000038F3 09C0                    	OR	AX,AX
 21590 000038F5 740E                    	JZ	short SAVFIR	; Partial first sector?
 21591                                  	;sub	ax,[es:bp+2]
 21592 000038F7 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21593 000038FB F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21594 000038FD 29C3                    	SUB	BX,AX		; Subtract from total length
 21595 000038FF 7304                    	JAE	short SAVFIR
 21596 00003901 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21597 00003903 31DB                    	XOR	BX,BX		; And no bytes are left
 21598                                  SAVFIR:
 21599 00003905 A3[D205]                	MOV	[BYTCNT1],AX
 21600 00003908 89D8                    	MOV	AX,BX
 21601 0000390A 31D2                    	XOR	DX,DX
 21602                                  	;div	word [ES:BP+2]
 21603 0000390C 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21604 00003910 A3[D605]                	MOV	[SECCNT],AX
 21605 00003913 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21606                                  	; MSDOS 3.3
 21607                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21608                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21609                                  	;CMP	AX,1
 21610                                  	;retnz
 21611                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21612                                  	;MOV	[BYTCNT2],AX
 21613                                  	;MOV	[SECCNT],DX	; DX = 0
 21614                                  _RET45:
 21615 00003917 C3                      	retn
 21616                                  
 21617                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21618                                  
 21619                                  ;----------------------------------------------------------------------------
 21620                                  ;
 21621                                  ; Procedure Name : READ_LOCK_VIOLATION
 21622                                  ;
 21623                                  ; ES:DI points to SFT. This entry used by NET_READ
 21624                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21625                                  ; Else do retrys.
 21626                                  ; ES:DI,DS,CX preserved
 21627                                  ;
 21628                                  ;----------------------------------------------------------------------------
 21629                                  
 21630                                  READ_LOCK_VIOLATION:
 21631 00003918 C606[7505]00            	MOV	byte [READOP],0
 21632                                  ERR_ON_CHECK:
 21633                                  	;;test	word [es:di+2],8000h
 21634                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21635                                  	;JNZ	short HARD_ERR
 21636                                  
 21637                                  	; 04/05/2019
 21638                                  	;test	byte [es:di+3],80h
 21639 0000391D 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21640 00003922 750E                    	JNZ	short HARD_ERR
 21641                                  
 21642 00003924 51                      	PUSH	CX
 21643                                  	;mov	cl,[es:di+2]
 21644 00003925 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21645                                  	;and	cl,0F0h
 21646 00003929 80E1F0                  	AND	CL,SHARING_MASK
 21647                                  	;cmp	cl,0
 21648 0000392C 80F900                  	CMP	CL,SHARING_COMPAT
 21649 0000392F 59                      	POP	CX
 21650 00003930 7505                    	JNE	short NO_HARD_ERR
 21651                                  HARD_ERR:
 21652 00003932 E8DE3A                  	call	LOCK_VIOLATION
 21653 00003935 73E0                    	jnc	short _RET45		; User wants Retrys
 21654                                  NO_HARD_ERR:
 21655 00003937 31C9                    	XOR	CX,CX			;No bytes transferred
 21656                                  	;mov	ax,21h
 21657 00003939 B82100                  	MOV	AX,error_lock_violation
 21658 0000393C F9                      	STC
 21659 0000393D C3                      	retn
 21660                                  
 21661                                  ;----------------------------------------------------------------------------
 21662                                  ;
 21663                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21664                                  ;
 21665                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21666                                  ; This entry used by NET_WRITE
 21667                                  ;
 21668                                  ;----------------------------------------------------------------------------
 21669                                  
 21670                                  WRITE_LOCK_VIOLATION:
 21671 0000393E C606[7505]01            	MOV	byte [READOP],1
 21672 00003943 EBD8                    	JMP	short ERR_ON_CHECK
 21673                                  
 21674                                  ; 04/05/2019 - Retro DOS v4.0
 21675                                  
 21676                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21677                                  
 21678                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21679                                  ;----------------------------------------------------------------------------
 21680                                  ;
 21681                                  ; Procedure Name : DISKREAD
 21682                                  ;
 21683                                  ; Inputs:
 21684                                  ;	Outputs of SETUP
 21685                                  ; Function:
 21686                                  ;	Perform disk read
 21687                                  ; Outputs:
 21688                                  ;    Carry clear
 21689                                  ;	CX = No. of bytes read
 21690                                  ;	ES:DI point to SFT
 21691                                  ;	SFT offset and cluster pointers updated
 21692                                  ;    Carry set
 21693                                  ;	CX = 0
 21694                                  ;	ES:DI point to SFT
 21695                                  ;	AX has error code
 21696                                  ;----------------------------------------------------------------------------
 21697                                  
 21698                                  ;hkn; called from disk.asm. DS already set up.
 21699                                  
 21700                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21701                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21702                                  
 21703                                  DISKREAD:
 21704                                  	;mov	ax,[es:di+11h]
 21705 00003945 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21706                                  	;mov	bx,[es:di+13h]
 21707 00003949 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21708 0000394D 2B06[CE05]              	SUB	AX,[BYTPOS]
 21709 00003951 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21710 00003955 7226                    	JB	short RDERR		;Read starts past EOF
 21711 00003957 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21712 00003959 09C0                    	OR	AX,AX
 21713 0000395B 7420                    	JZ	short RDERR		;Read starts at EOF
 21714 0000395D 39C8                    	CMP	AX,CX
 21715 0000395F 7302                    	JAE	short ENUF		;I/O fits
 21716 00003961 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21717                                  ENUF:
 21718                                  	; MSDOS 3.3
 21719                                  	;test	byte [es:di+4],8
 21720                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21721                                  	;jnz	short SET_ACC_ERR
 21722                                  	;call	LOCK_CHECK
 21723                                  	;jnb	short _READ_OK
 21724                                  	;call	READ_LOCK_VIOLATION
 21725                                  	;jnb	short ENUF
 21726                                  	;retn
 21727                                  
 21728                                  	; MSDOS 6.0
 21729 00003963 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21730 00003966 7301                    	JNC	short _READ_OK 		; There are no locks
 21731 00003968 C3                      	retn
 21732                                  
 21733                                  _READ_OK:
 21734 00003969 C42E[8A05]              	LES	BP,[THISDPB]
 21735 0000396D E87EFF                  	CALL	BREAKDOWN
 21736 00003970 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21737                                  
 21738 00003974 E8AD13                  	call	FNDCLUS
 21739                                       	; MSDOS 6.0			;M022 conditional removed here
 21740 00003977 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21741                                  					; migrated from 330a - HKN
 21742 00003979 09C9                    	OR	CX,CX
 21743 0000397B 7413                    	JZ	short SKIPERR
 21744                                  RDERR:
 21745 0000397D B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21746 0000397F E92502                  	jmp	WRTERR22
 21747                                  
 21748                                  ;RDLASTJ: 
 21749                                  	;JMP	RDLAST                  ;M039
 21750                                  
 21751                                  SETSFTJ2: 
 21752 00003982 E99600                  	JMP	SETSFT
 21753                                  
 21754                                  CANOT_READ:
 21755                                  	; MSDOS 3.3
 21756                                  	;POP	CX		;M039.
 21757                                  	; MSDOS 3.3 & MSDOS 6.0
 21758 00003985 59                      	POP	CX              ;Clean stack.
 21759 00003986 5B                      	POP	BX
 21760                                  
 21761                                  	;entry	SET_ACC_ERR_DS
 21762                                  SET_ACC_ERR_DS:
 21763                                  
 21764                                  ;hkn; SS is DOSDATA
 21765                                  	;Context DS
 21766 00003987 16                      	push	ss
 21767 00003988 1F                      	pop	ds
 21768                                  
 21769                                  	;entry	SET_ACC_ERR
 21770                                  SET_ACC_ERR:
 21771 00003989 31C9                    	XOR	CX,CX
 21772                                  	;mov	ax,5
 21773 0000398B B80500                  	MOV	AX,error_access_denied
 21774 0000398E F9                      	STC
 21775 0000398F C3                      	retn
 21776                                  
 21777                                  SKIPERR:
 21778 00003990 8916[BA05]              	MOV	[LASTPOS],DX
 21779 00003994 891E[BC05]              	MOV	[CLUSNUM],BX
 21780 00003998 833E[D205]00            	CMP	word [BYTCNT1],0
 21781 0000399D 7405                    	JZ	short RDMID
 21782                                  
 21783 0000399F E8F813                  	call	BUFRD
 21784 000039A2 72E3                    	JC	short SET_ACC_ERR_DS
 21785                                  
 21786                                  RDMID:
 21787 000039A4 833E[D605]00            	CMP	word [SECCNT],0
 21788                                  	;JZ	RDLAST ; 10/08/2018
 21789 000039A9 7453                    	jz	short RDLAST
 21790                                  
 21791 000039AB E88514                  	call	NEXTSEC
 21792 000039AE 72D2                    	JC	short SETSFTJ2
 21793                                  
 21794 000039B0 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21795                                  ONSEC:
 21796 000039B5 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21797 000039B9 8B0E[D605]              	MOV	CX,[SECCNT]
 21798 000039BD 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21799                                  RDLP:
 21800 000039C1 E8A014                  	call	OPTIMIZE
 21801 000039C4 72C1                    	JC	short SET_ACC_ERR_DS
 21802                                  
 21803 000039C6 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21804 000039C7 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21805 000039C8 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21806                                  	;mov	byte [ALLOWED],38h
 21807 000039C9 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21808 000039CE 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21809                                  
 21810 000039D2 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21811 000039D3 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21812                                  
 21813                                  	; 04/05/2019 - Retro DOS v4.0
 21814                                  
 21815                                  	; MSDOS 6.0
 21816 000039D4 E85D22                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21817                                  
 21818                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21819 000039D7 E8C9FD                  	call	DREAD
 21820                                  
 21821                                  	; MSDOS 3.3 
 21822                                  	;pop	bx
 21823                                  	;pop	dx
 21824                                  	;jc	short CANOT_READ
 21825                                  	;add	bx,dx	; (bx = Extent end)
 21826                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21827                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21828                                  	;call	SETVISIT
 21829                                  	; ->***
 21830                                  ;M039
 21831                                  	; MSDOS 6.0 
 21832 000039DA 59                      	pop	cx
 21833 000039DB 5A                      	pop	dx
 21834 000039DC 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21835 000039E1 72A2                    	jc	short CANOT_READ
 21836                                  
 21837 000039E3 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21838                                  
 21839                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21840                                  ;            sectors, also termed an "Extent".)
 21841                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21842                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21843                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21844                                  ;
 21845                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21846                                  ;	buffers must be "read" into the transfer memory block, so that the
 21847                                  ;       transfer memory reflects the most recent data.
 21848                                  
 21849 000039E8 E85E00                  	call	DskRdBufScan
 21850                                  
 21851                                  	;Context DS
 21852 000039EB 16                      	push	ss
 21853 000039EC 1F                      	pop	ds
 21854                                          
 21855 000039ED 59                      	pop	cx
 21856 000039EE 5B                              pop	bx
 21857                                  
 21858                                  ;       CX = # of sector remaining.
 21859                                  ;       BX = Next physical cluster.
 21860                                  
 21861                                  ;M039
 21862                                  
 21863                                  ;;;;;;;;
 21864                                  ;	; 25/07/2018 - Retro DOS v3.0
 21865                                  ;	; ***->
 21866                                  ;	; MSDOS 3.3
 21867                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21868                                  ;bufq:
 21869                                  ;;	DX = Extent start.
 21870                                  ;;	BX = Extent end.
 21871                                  ;;	 AL = Drive #.
 21872                                  ;;     DS:DI-> 1st buffer in queue.
 21873                                  ;
 21874                                  ;	;or	byte [di+5],20h
 21875                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21876                                  ;	;cmp	al,[di+4]	
 21877                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21878                                  ;	jnz	short bufq3
 21879                                  ;	;cmp	[di+6],dx
 21880                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21881                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21882                                  ;	;cmp	[di+6],bx
 21883                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21884                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21885                                  ;	
 21886                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21887                                  ;
 21888                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21889                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21890                                  ;;      as MRU (Most Recently Used).
 21891                                  ;
 21892                                  ;	;test	byte [di+5],40h
 21893                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21894                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21895                                  ;	pop	ax ; transfer address
 21896                                  ;	push	ax
 21897                                  ;	push	di
 21898                                  ;	push	dx
 21899                                  ;	;sub	dx,[di+6]
 21900                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21901                                  ;	neg	dx
 21902                                  ;
 21903                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21904                                  ;;           block.
 21905                                  ;
 21906                                  ;	mov	si,di
 21907                                  ;	mov	di,ax
 21908                                  ;	mov	ax,dx
 21909                                  ;	;mov	cx,[es:bp+6]	
 21910                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21911                                  ;	mul	cx
 21912                                  ;	add	di,ax
 21913                                  ;
 21914                                  ;	lea	si,[si+16]
 21915                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21916                                  ;	shr	cx,1
 21917                                  ;	push	es
 21918                                  ;	mov	es,[SS:DMAADD+2]
 21919                                  ;
 21920                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21921                                  ;;      DS:SI-> Buffer sector data.
 21922                                  ;;      ES:DI-> Destination within Transfer memory block.
 21923                                  ;
 21924                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21925                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21926                                  ;	;rep	movsb                   ;Copy last byte.
 21927                                  ;	jnc	short bufq1
 21928                                  ;	movsb
 21929                                  ;bufq1:
 21930                                  ;	pop	es
 21931                                  ;	pop	dx
 21932                                  ;	pop	di
 21933                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21934                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21935                                  ;bufq2:
 21936                                  ;	call	SCANPLACE
 21937                                  ;bufq3:
 21938                                  ;	call	SKIPVISIT
 21939                                  ;	jnz	short bufq
 21940                                  ;	
 21941                                  ;	push	ss
 21942                                  ;	pop	ds
 21943                                  ;	pop	cx
 21944                                  ;	pop	cx
 21945                                  ;	pop	bx	
 21946                                  ;bufq4:
 21947                                  ;;;;;;;
 21948 000039EF E30D                    	JCXZ	RDLAST
 21949                                  
 21950 000039F1 E8141C                  	call	IsEOF			; test for eof on fat size
 21951 000039F4 7325                    	JAE	short SETSFT
 21952                                  
 21953 000039F6 B200                    	MOV	DL,0
 21954 000039F8 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21955 000039FC EBC3                    	JMP	short RDLP ; 19/05/2019
 21956                                  
 21957                                  RDLAST:
 21958 000039FE A1[D405]                	MOV	AX,[BYTCNT2]
 21959 00003A01 09C0                    	OR	AX,AX
 21960 00003A03 7416                    	JZ	short SETSFT
 21961 00003A05 A3[D205]                	MOV	[BYTCNT1],AX
 21962                                  
 21963 00003A08 E82814                  	call	NEXTSEC
 21964 00003A0B 720E                    	JC	short SETSFT
 21965                                  
 21966 00003A0D C706[CC05]0000          	MOV	word [BYTSECPOS],0
 21967 00003A13 E88413                  	call	BUFRD
 21968                                  	; 10/08/2018
 21969                                  
 21970 00003A16 7303                    	JNC	short SETSFT
 21971 00003A18 E96CFF                  	JMP	SET_ACC_ERR_DS
 21972                                  
 21973                                  ;------------------------------------------------------------------------------
 21974                                  ;
 21975                                  ; Procedure Name : SETSFT
 21976                                  ; Inputs:
 21977                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 21978                                  ;		and set cluster fields
 21979                                  ; Function:
 21980                                  ;	Update [THISSFT] based on the transfer
 21981                                  ; Outputs:
 21982                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 21983                                  ;	ES:DI points to [THISSFT]
 21984                                  ;	CX No. of bytes transferred
 21985                                  ;	Carry clear
 21986                                  ;
 21987                                  ;----------------------------------------------------------------------------
 21988                                  
 21989                                  	;entry	SETSFT
 21990                                  
 21991                                  ; 26/07/2018 - Retro DOS v3.0
 21992                                  SETSFT:
 21993 00003A1B C43E[9E05]              	LES	DI,[THISSFT]
 21994                                  
 21995                                  ; Same as SETSFT except ES:DI already points to SFT
 21996                                  	;entry	SETCLUS
 21997                                  SETCLUS:	
 21998 00003A1F 8B0E[B805]              	MOV	CX,[NEXTADD]
 21999 00003A23 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22000                                  	;;test	word [es:di+5],80h
 22001                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22002                                  	;JNZ	short ADDREC		; don't set clusters if device
 22003                                  
 22004                                  	; 04/05/2019 - Retro DOS v4.0
 22005                                  	;test	byte [es:di+5],80h
 22006 00003A27 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22007 00003A2C 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22008                                  
 22009 00003A2E A1[BC05]                	MOV	AX,[CLUSNUM]
 22010                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22011                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22012 00003A31 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22013 00003A35 A1[BA05]                	MOV	AX,[LASTPOS]
 22014                                  	;mov	[es:di+19h],ax
 22015 00003A38 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22016                                  
 22017                                  ;----------------------------------------------------------------------------
 22018                                  ;
 22019                                  ; Procedure : AddRec
 22020                                  ; Inputs:
 22021                                  ;	ES:DI points to SFT
 22022                                  ;	CX is No. Bytes transferred
 22023                                  ; Function:
 22024                                  ;	Update the SFT offset based on the transfer
 22025                                  ; Outputs:
 22026                                  ;	sf_position updated to point to first byte after transfer
 22027                                  ;	ES:DI points to SFT
 22028                                  ;	CX No. of bytes transferred
 22029                                  ;	Carry clear
 22030                                  ;----------------------------------------------------------------------------
 22031                                  
 22032                                  	;entry	AddRec
 22033                                  ADDREC:
 22034 00003A3C E309                    	JCXZ	RET28		; If no records read,  don't change position
 22035                                  	;add	[es:di+15h],cx
 22036 00003A3E 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22037                                  	;adc	word [es:di+17h], 0
 22038 00003A42 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22039                                  RET28:	
 22040 00003A47 F8                      	CLC
 22041 00003A48 C3                      	retn
 22042                                  
 22043                                  ; 25/07/2018
 22044                                  ; MSDOS 6.0
 22045                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22046                                  ;----------------------------------------------------------------------------
 22047                                  ;
 22048                                  ; Procedure Name : DskRdBufScan
 22049                                  ;
 22050                                  ; Inputs:
 22051                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22052                                  ;            sectors, also termed an "Extent".)
 22053                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22054                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22055                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22056                                  ;
 22057                                  ; Function:
 22058                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22059                                  ;	"read" into the transfer memory block, so that the transfer memory
 22060                                  ;	reflects the most recent data.
 22061                                  ;
 22062                                  ; Outputs:
 22063                                  ;       Transfer memory updated as required.
 22064                                  ;
 22065                                  ; Uses:
 22066                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22067                                  ;       SS override for all global variables.
 22068                                  ;
 22069                                  ; Notes:
 22070                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22071                                  ;	than the FIRST.
 22072                                  ;----------------------------------------------------------------------------
 22073                                  ;M039: Created
 22074                                  
 22075                                  ; 04/05/2019 - Retro DOS v4.0
 22076                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22077                                  
 22078                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22079                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22080                                  
 22081                                  ;procedure DskRdBufScan,NEAR
 22082                                  ;
 22083                                  ;ASSUME  DS:NOTHING
 22084                                  
 22085                                  DskRdBufScan:
 22086 00003A49 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22087 00003A4F 743C                    	je	short bufx		     ; -no, skip all work.
 22088                                  
 22089 00003A51 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22090 00003A56 89DE                    	mov     si,bx
 22091 00003A58 01D1                    	add     cx,dx
 22092 00003A5A 83D600                  	adc     si,0
 22093                                  
 22094 00003A5D E87C1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22095                                  	;mov	ax,[di+2]
 22096 00003A60 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22097 00003A63 36A3[BA0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22098                                  		
 22099                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22100                                  	;;mov	al,[es:bp+0]
 22101                                  	;mov	al,[es:bp+DPB.DRIVE]
 22102                                  	; 15/12/2022
 22103 00003A67 268A4600                	mov	al,[es:bp]
 22104                                  
 22105                                  ;       BX:DX = Extent start.
 22106                                  ;       SI:CX = Extent end + 1.
 22107                                  ;          AL = Drive #.
 22108                                  ;       DS:DI-> 1st buffer in queue.
 22109                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22110                                  
 22111                                  bufq:	
 22112                                  	;cmp	al,[di+4]
 22113 00003A6B 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22114 00003A6E 7514                    	jne	short bufq1        	;  -no, jump.
 22115                                  
 22116                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22117                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22118                                  
 22119                                  	;cmp	bx,[di+8]
 22120 00003A70 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22121 00003A73 7503                    	jne	short bufq01
 22122                                  	;cmp	dx,[di+6]
 22123 00003A75 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22124                                  bufq01:
 22125 00003A78 770A                    	ja	short bufq1
 22126                                  
 22127                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22128                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22129                                  
 22130                                  	;cmp	si,[di+8]
 22131 00003A7A 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22132 00003A7D 7503                    	jne	short bufq02
 22133                                  	;cmp	cx,[di+6]
 22134 00003A7F 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22135                                  bufq02:
 22136 00003A82 770A                    	ja	short bufq2
 22137                                  bufq1:	
 22138 00003A84 363B3E[BA0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22139 00003A89 8B3D                    	mov	di,[di]
 22140                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22141 00003A8B 75DE                    	jne	short bufq		; -no, do next buffer
 22142                                  bufx:
 22143 00003A8D C3                      	retn				;Exit.
 22144                                  
 22145                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22146                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22147                                  ;       as MRU (Most Recently Used).
 22148                                  
 22149                                  bufq2:	
 22150 00003A8E 50                      	push	ax
 22151                                  	;test	byte [di+5],40h
 22152 00003A8F F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22153 00003A93 742F                    	jz	short bufq3                    ; -no, jump.
 22154                                  
 22155                                  ;       SaveReg <cx,dx,si,di,es>
 22156 00003A95 51                      	push	cx
 22157 00003A96 52                      	push	dx
 22158 00003A97 56                      	push	si
 22159 00003A98 57                      	push	di
 22160 00003A99 06                      	push	es
 22161                                  
 22162 00003A9A 89D0                    	mov     ax,dx
 22163                                  	;sub	ax,[di+6]
 22164 00003A9C 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22165 00003A9F F7D8                    	neg	ax
 22166                                  
 22167                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22168                                  ;            block. (Note: the upper word of the sector # may be ignored
 22169                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22170                                  ;            is imposed by the input parameters of the disk read operation.)
 22171                                  
 22172                                  	;lea	si,[di+20]
 22173 00003AA1 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22174                                  	;mov	cx,[es:bp+2]
 22175 00003AA4 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22176 00003AA8 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22177 00003AAA 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22178 00003AAF 01C7                    	add	di,ax
 22179 00003AB1 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22180 00003AB6 D1E9                    	shr	cx,1
 22181                                  
 22182                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22183                                  ;       DS:SI-> Buffer sector data.
 22184                                  ;       ES:DI-> Destination within Transfer memory block.
 22185                                  
 22186 00003AB8 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22187                                  	;; 04/05/2019
 22188                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22189                                  	;;rep	movsb                   ;Copy last byte.
 22190                                  	;jnc	short bufq03	
 22191                                  	;movsb
 22192                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22193 00003ABA 83D100                  	adc	cx,0
 22194 00003ABD F3A4                    	rep	movsb
 22195                                  bufq03:
 22196                                  	;RestoreReg <es,di,si,dx,cx>
 22197 00003ABF 07                      	pop	es
 22198 00003AC0 5F                      	pop	di
 22199 00003AC1 5E                      	pop	si
 22200 00003AC2 5A                      	pop	dx
 22201 00003AC3 59                      	pop	cx
 22202                                  
 22203                                  ;       DS:DI -> current buffer.
 22204                                  bufq3:	
 22205 00003AC4 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22206                                          ;invoke SCANPLACE
 22207 00003AC6 E8251F                  	call	SCANPLACE
 22208 00003AC9 363B06[BA0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22209 00003ACE 58                      	pop	ax
 22210                                  	;jne	short bufq		; -no, jump.
 22211                                  	;;jmp	short bufx		; -yes, exit.
 22212                                  	;; 12/06/2019
 22213                                  	;retn
 22214                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22215 00003ACF 759A                    	jne	short bufq
 22216 00003AD1 EBBA                    	jmp	short bufx
 22217                                  
 22218                                  ;EndProc DskRdBufScan
 22219                                  
 22220                                  ;============================================================================
 22221                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22222                                  ;============================================================================
 22223                                  ; 04/05/2019 - Retro DOS v4.0
 22224                                  ; 24/07/2018 - Retro DOS v3.0
 22225                                  
 22226                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22227                                  ;----------------------------------------------------------------------------
 22228                                  ;
 22229                                  ; Procedure Name : DISKWRITE
 22230                                  ;
 22231                                  ; Inputs:
 22232                                  ;       Outputs of SETUP
 22233                                  ; Function:
 22234                                  ;       Perform disk write
 22235                                  ; Outputs:
 22236                                  ;    Carry clear
 22237                                  ;       CX = No. of bytes written
 22238                                  ;       ES:DI point to SFT
 22239                                  ;       SFT offset and cluster pointers updated
 22240                                  ;    Carry set
 22241                                  ;       CX = 0
 22242                                  ;       ES:DI point to SFT
 22243                                  ;       AX has error code
 22244                                  ;----------------------------------------------------------------------------
 22245                                  
 22246                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22247                                  
 22248                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22249                                  
 22250                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22251                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22252                                  
 22253                                  DISKWRITE:
 22254                                  	; MSDOS 3.3
 22255                                  	; IBMDOS.COM - Offset 436Dh
 22256                                  	;;test	byte [es:di+4],8
 22257                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22258                                  	;jz	short write_cont
 22259                                  	;jmp	SET_ACC_ERR_DS
 22260                                  ;write_cont:
 22261                                  	;push	cx
 22262                                  	;or	cx,cx
 22263                                  	;jnz	short Not_Truncate
 22264                                  	;;mov	cx,-1
 22265                                  	;dec	cx
 22266                                  ;Not_Truncate:
 22267                                  	;call	LOCK_CHECK
 22268                                  	;pop	cx
 22269                                  	;jnb	short _WRITE_OK
 22270                                  	;call	WRITE_LOCK_VIOLATION
 22271                                  	;jnb	short DISKWRITE
 22272                                  	;retn
 22273                                  
 22274                                  	; MSDOS 6.0
 22275 00003AD3 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22276                                  	; 19/08/2018
 22277 00003AD6 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22278 00003AD8 C3                      	retn
 22279                                  
 22280                                  WRTEOFJ:
 22281 00003AD9 E9DE01                  	JMP     WRTEOF
 22282                                  
 22283                                  _WRITE_OK:
 22284                                   	; 27/07/2018
 22285                                  	; IBMDOS.COM - Offset 438Eh
 22286                                  	
 22287                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22288                                  	;and	word [es:di+5],0BFBFh
 22289 00003ADC 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22290                                  				; Mark file as dirty, clear no date on close
 22291                                  
 22292                                  	; 04/05/2019 - Retro DOS v4.0	
 22293                                  
 22294                                  	; MSDOS 6.0
 22295                                  	; mov 	ax,[es:di+11h]
 22296 00003AE2 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22297 00003AE6 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22298                                  	;mov	ax,[es:di+13h]
 22299 00003AE9 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22300 00003AED A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22301                                  
 22302                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22303                                  
 22304                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22305 00003AF0 C42E[8A05]              	LES     BP,[THISDPB]
 22306                                  
 22307 00003AF4 E8F7FD                  	call	BREAKDOWN
 22308                                  
 22309 00003AF7 A1[CE05]                	MOV     AX,[BYTPOS]
 22310 00003AFA 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22311 00003AFE E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22312 00003B00 01C8                    	ADD     AX,CX
 22313 00003B02 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22314                                  
 22315                                  	;mov	bx,[es:bp+2]
 22316 00003B05 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22317                                  
 22318                                  	; MSDOS 3.3
 22319                                  	;cmp	dx,bx
 22320                                  	;jnb	short WRTERR33
 22321                                  	;div	bx
 22322                                  	;mov	bx,ax
 22323                                  	;OR	DX,DX
 22324                                  	;JNZ	short CALCLUS
 22325                                  	;dec	ax
 22326                                  ;CALCLUS:
 22327                                  	; MSDOS 3.3
 22328                                  	;mov	cl,[es:bp+5]
 22329                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22330                                  	;shr	ax,cl
 22331                                  	;push	ax
 22332                                  	;push	dx
 22333                                  	;push	es
 22334                                  	;les	di,[THISSFT]
 22335                                  	;;mov	ax,[es:di+11h]
 22336                                  	;;mov	dx,[es:di+13h]
 22337                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22338                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22339                                  	;pop	es
 22340                                  	;;DX:AX = current file size (in bytes).
 22341                                  	;;div	word [es:bp+2]
 22342                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22343                                  	;mov	cx,ax
 22344                                  	;or	dx,dx
 22345                                  	;jz	short NORND
 22346                                  	;inc	ax
 22347                                  ;NORND:
 22348                                  	; MSDOS 6.0
 22349 00003B09 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22350 00003B0C 89C6                    	MOV	SI,AX
 22351 00003B0E 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22352                                  
 22353                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22354                                  
 22355 00003B12 09D2                    	OR	DX,DX
 22356 00003B14 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22357 00003B15 89CA                    	MOV	DX,CX			;M039
 22358 00003B17 7506                    	JNZ	short CALCLUS
 22359 00003B19 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22360 00003B1C 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22361                                  
 22362                                  CALCLUS:
 22363                                  	; MSDOS 6.0
 22364 00003B1F E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22365 00003B22 5A                      	POP	DX
 22366                                  
 22367                                  ;       AX = Last cluster to write.
 22368                                  ;       DX = # of bytes in last sector to write (the "tail").
 22369                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22370                                  
 22371 00003B23 50                      	PUSH	AX
 22372 00003B24 52                      	PUSH	DX
 22373                                  ;M039
 22374 00003B25 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22375 00003B29 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22376 00003B2C E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22377 00003B2F 890E[0E06]              	mov	[TEMP_VAR2],cx
 22378 00003B33 890E[CA05]              	mov	[VALSEC+2],cx
 22379 00003B37 89C1                    	mov	cx,ax
 22380 00003B39 89F3                    	mov	bx,si
 22381                                  
 22382                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22383                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22384                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22385                                  ;                     DX = # of bytes in last sector of current file.
 22386                                  ;M039
 22387 00003B3B 09D2                    	OR	DX,DX
 22388 00003B3D 7408                    	JZ	short NORND
 22389 00003B3F 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22390 00003B42 8316[CA05]00            	ADC	word [VALSEC+2],0
 22391                                  NORND:	
 22392                                  	; MSDOS 3.3 & MSDOS 6.0
 22393 00003B47 A3[C805]                	MOV     [VALSEC],AX
 22394                                  
 22395                                  ;       [VALSEC] = Last sector of current file.
 22396                                  
 22397 00003B4A 31C0                    	XOR     AX,AX
 22398 00003B4C A3[DE05]                	MOV     [GROWCNT],AX
 22399 00003B4F A3[E005]                	MOV     [GROWCNT+2],AX
 22400 00003B52 58                      	POP     AX
 22401                                  
 22402                                  	; MSDOS 6.0
 22403 00003B53 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22404 00003B57 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22405 00003B5B 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22406 00003B5D 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22407 00003B5F 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22408 00003B61 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22409 00003B65 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22410                                  lowsec:
 22411 00003B67 BF0000                  	MOV	DI,0			;F.C. >32mb
 22412                                  	; MSDOS 3.3 & MSDOS 6.0
 22413 00003B6A 29CB                    	SUB	BX,CX			; Number of full sectors
 22414 00003B6C 7253                    	JB	short NOGROW
 22415 00003B6E 7444                    	JZ	short TESTTAIL
 22416                                  yesgrow:
 22417                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22418 00003B70 89D1                    	MOV     CX,DX
 22419 00003B72 93                      	XCHG    AX,BX
 22420                                  	;mul	word [es:bp+2]
 22421 00003B73 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22422                                  	
 22423                                  	; MSDOS 6.0
 22424 00003B77 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22425 00003B7B A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22426 00003B7E 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22427                                  	;mul	word [es:bp+2]
 22428 00003B80 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22429                                  	
 22430 00003B84 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22431 00003B88 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22432 00003B8A A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22433                                  
 22434                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22435 00003B8D 29C8                    	SUB     AX,CX			; Take off current "tail"
 22436 00003B8F 83DA00                  	SBB     DX,0			; 32-bit extension
 22437 00003B92 01D8                    	ADD     AX,BX			; Add on new "tail"
 22438 00003B94 83D200                  	ADC     DX,0			; ripple tim's head off
 22439 00003B97 EB21                    	JMP     SHORT SETGRW
 22440                                  
 22441                                  HAVSTART:
 22442                                  	;int 3
 22443 00003B99 89C1                    	MOV     CX,AX
 22444 00003B9B E8A611                  	call	SKPCLP
 22445                                  	;JCXZ	DOWRTJ
 22446                                  	; 16/12/2022
 22447 00003B9E E357                    	jcxz	DOWRT
 22448                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22449                                  	;jcxz	DOWRTJ
 22450                                  
 22451 00003BA0 E84C13                  	call	ALLOCATE
 22452                                  	;JNC	short DOWRTJ
 22453                                  	; 16/12/2022
 22454 00003BA3 7352                    	jnc	short DOWRT
 22455                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22456                                  	;jnc	short DOWRTJ
 22457                                  
 22458                                  	;entry   WRTERR
 22459                                  WRTERR:
 22460 00003BA5 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22461                                  
 22462                                  	;entry WRTERR22
 22463                                  WRTERR22:
 22464 00003BA7 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22465                                  
 22466                                  	; 27/07/2018
 22467                                  WRTERR33:
 22468                                  	;MOV	CX,0			;No bytes transferred
 22469 00003BAA 31C9                    	XOR     CX,CX
 22470                                  					
 22471 00003BAC C43E[9E05]              	LES     DI,[THISSFT]
 22472                                  	;CLC ; 19/05/2019
 22473                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22474                                  	; 16/12/2022
 22475                                  	;clc
 22476 00003BB0 C3                      	retn
 22477                                  
 22478                                  	; 16/12/2022
 22479                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22480                                  ;DOWRTJ:
 22481                                  	;JMP	short DOWRT
 22482                                  
 22483                                  ACC_ERRWJ:
 22484                                  	; 10/08/2018
 22485                                  	;JMP	SET_ACC_ERRW
 22486                                  	; 16/12/2022
 22487 00003BB1 E9D3FD                  	jmp	SET_ACC_ERR_DS
 22488                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22489                                  	;jmp	SET_ACC_ERRW	
 22490                                  
 22491                                  TESTTAIL:
 22492 00003BB4 29D0                    	SUB     AX,DX
 22493 00003BB6 7609                    	JBE	short NOGROW
 22494 00003BB8 31D2                    	XOR     DX,DX
 22495                                  SETGRW:
 22496 00003BBA A3[DE05]                	MOV	[GROWCNT],AX
 22497 00003BBD 8916[E005]              	MOV	[GROWCNT+2],DX
 22498                                  NOGROW:
 22499 00003BC1 58                      	POP     AX
 22500 00003BC2 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22501 00003BC6 E85B11                  	call	FNDCLUS
 22502 00003BC9 72E6                    	JC	short ACC_ERRWJ
 22503 00003BCB 891E[BC05]              	MOV     [CLUSNUM],BX
 22504 00003BCF 8916[BA05]              	MOV     [LASTPOS],DX
 22505                                  
 22506 00003BD3 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22507 00003BD5 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22508 00003BD7 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22509 00003BD9 51                      	PUSH    CX              ; No. of clusters short of first
 22510 00003BDA 89C1                    	MOV     CX,AX
 22511 00003BDC E81013                  	call	ALLOCATE
 22512 00003BDF 59                      	POP     CX
 22513 00003BE0 72C3                    	JC	short WRTERR
 22514 00003BE2 8B16[BA05]              	MOV     DX,[LASTPOS]
 22515 00003BE6 42                      	INC     DX
 22516 00003BE7 49                      	DEC     CX
 22517 00003BE8 7405                    	JZ	short NOSKIP
 22518 00003BEA E85711                  	call	SKPCLP
 22519 00003BED 72C2                    	JC	short ACC_ERRWJ
 22520                                  NOSKIP:
 22521 00003BEF 891E[BC05]              	MOV     [CLUSNUM],BX
 22522 00003BF3 8916[BA05]              	MOV     [LASTPOS],DX
 22523                                  DOWRT:
 22524 00003BF7 833E[D205]00            	CMP     word [BYTCNT1],0
 22525 00003BFC 7409                    	JZ	short WRTMID
 22526 00003BFE 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22527 00003C02 E8CE11                  	call	BUFWRT
 22528 00003C05 72AA                    	JC	short ACC_ERRWJ
 22529                                  WRTMID:
 22530 00003C07 A1[D605]                	MOV     AX,[SECCNT]
 22531 00003C0A 09C0                    	OR      AX,AX
 22532                                  	; 20/11/2022
 22533 00003C0C 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22534 00003C0E 0106[C405]              	ADD     [SECPOS],AX
 22535                                  	; 19/05/2019
 22536                                  	; MSDOS 6.0
 22537 00003C12 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22538 00003C17 E81912                  	call	NEXTSEC
 22539                                  	; 16/12/2022
 22540 00003C1A 7295                    	JC	short ACC_ERRWJ
 22541                                  	;JC	short SET_ACC_ERRW	;M039
 22542 00003C1C C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22543 00003C21 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22544 00003C25 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22545 00003C29 8B0E[D605]              	MOV     CX,[SECCNT]
 22546                                  WRTLP:
 22547 00003C2D E83412                  	call	OPTIMIZE
 22548 00003C30 7248                    	JC	short SET_ACC_ERRW
 22549                                  	; 16/12/2022
 22550                                  	;JC	short ACC_ERRWJ
 22551                                  
 22552                                  ;M039
 22553                                  ;       DI = Next physical cluster.
 22554                                  ;       AX = # sectors remaining.
 22555                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22556                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22557                                  ;	     sectors, also termed an "Extent".)
 22558                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22559                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22560                                  ;
 22561                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22562                                  ;	are in Extent; they are being over-written.
 22563                                  
 22564 00003C32 57                      	push    di
 22565 00003C33 50                      	push    ax
 22566                                  
 22567                                  	; MSDOS 3.3
 22568                                  	; IBMDOS.COM (1987) - Offset 4497h
 22569                                  	;push	dx
 22570                                  	;push	bx
 22571                                  	;mov	al,[es:bp]
 22572                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22573                                  	;mov	bx,cx
 22574                                  	;add	bx,dx	; (bx = Extent end)
 22575                                  
 22576                                  ;	DX = Extent start.
 22577                                  ;	BX = Extent end.
 22578                                  ;	AL = Drive #.
 22579                                  
 22580                                  	;call	SETVISIT
 22581                                  
 22582                                  ;wbufq1:
 22583                                  	;;or	byte [di+5],20h
 22584                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22585                                  	;;cmp	al,[di+4]	
 22586                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22587                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22588                                  	;;cmp	[di+6],dx
 22589                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22590                                  	;jb	short wbufq2
 22591                                  	;;cmp	[di+6],bx
 22592                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22593                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22594                                  
 22595                                  	;; Buffer sector is in the Extent
 22596                                  
 22597                                  	;;mov	word [di+4],20FFh
 22598                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22599                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22600                                  	;				; .buf_flags, AH = 0, reset/clear
 22601                                  	;call	SCANPLACE
 22602                                  ;wbufq2:
 22603                                  	;call	SKIPVISIT
 22604                                  	;jnz	short wbufq1
 22605                                  	;pop	bx
 22606                                  	;pop	dx
 22607                                  
 22608                                          ; MSDOS 6.0
 22609 00003C34 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22610                                  
 22611                                  ;ASSUME DS:NOTHING
 22612                                  ;M039
 22613                                  	; MSDOS 3.3 & MSDOS 6.0
 22614                                  ;hkn; SS override for DMAADD and ALLOWED
 22615 00003C37 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22616                                  	;mov	byte [ss:ALLOWED],38h
 22617 00003C3C 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22618                                  
 22619                                  ;	put logic from DWRITE in-line here so we can modify it
 22620                                  ;	for DISK FULL conditions.
 22621                                  
 22622                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22623                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22624                                  
 22625                                  	; 16/12/2022
 22626                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22627                                  	;call	DWRITE
 22628                                  
 22629                                  ;DWRITE_OKAY:
 22630                                  
 22631                                  	; 16/12/2022
 22632                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22633                                  	;pop     cx
 22634                                  	;pop     bx
 22635                                  	;push    ss
 22636                                  	;pop     ds
 22637                                  	;jc      short SET_ACC_ERRW
 22638                                  	;jcxz    WRTLAST
 22639                                  	;mov     dl, 0
 22640                                  	;inc     word [LASTPOS]
 22641                                  	;jmp     short WRTLP
 22642                                  
 22643                                  	; 16/12/2022
 22644                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22645                                  DWRITE_LUP:
 22646                                  	; 23/07/2019 - Retro DOS v3.2
 22647                                  
 22648                                  	; MSDOS 6.0
 22649 00003C42 E8D7FB                  	call	DSKWRITE
 22650 00003C45 7417                    	jz	short DWRITE_OKAY
 22651                                  
 22652                                  ;;	int	3
 22653                                  
 22654 00003C47 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22655 00003C49 7423                    	jz	short DWRITE_DISK_FULL
 22656                                  
 22657                                  	; 16/12/2022
 22658                                  
 22659                                  ;;hkn; SS override
 22660 00003C4B 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22661 00003C51 E8F7FB                  	call	HARDERRRW
 22662 00003C54 3C01                    	CMP	AL,1		; Check for retry
 22663 00003C56 74EA                    	JZ	short DWRITE_LUP
 22664                                  
 22665                                  	; 16/12/2022
 22666                                  	; 23/07/2019
 22667                                  	;POP	CX ; *4*
 22668                                  	;POP	BX ; *5*
 22669                                  	;
 22670                                  	;push	ss
 22671                                  	;pop	ds
 22672                                  	;
 22673                                  
 22674                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22675                                  
 22676                                  	; 16/12/2022
 22677 00003C58 3C03                    	CMP	AL,3		; Check for FAIL
 22678 00003C5A F8                      	CLC
 22679 00003C5B 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22680 00003C5D F9                      	STC
 22681                                  
 22682                                  DWRITE_OKAY:
 22683                                  	; 16/12/2022
 22684                                  	; 23/07/2019
 22685                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22686 00003C5E 59                      	POP	CX ; *4*
 22687 00003C5F 5B                      	POP	BX ; *5*
 22688                                  
 22689                                  ;       CX = # sectors remaining.
 22690                                  ;       BX = Next physical cluster.
 22691                                  
 22692                                  ;hkn; SS override
 22693                                          ;Context DS
 22694                                  	; 16/12/2022
 22695                                  	;push	ss
 22696                                  	;pop	ds
 22697                                  
 22698                                  	; 16/12/2022
 22699 00003C60 7218                    	jc	short SET_ACC_ERRW
 22700                                  
 22701                                  	; 16/12/2022
 22702 00003C62 16                      	push	ss
 22703 00003C63 1F                      	pop	ds
 22704                                  
 22705 00003C64 E317                    	JCXZ    WRTLAST
 22706                                  
 22707                                  	;MOV	DL,0
 22708 00003C66 30D2                    	xor	dl,dl ; 23/07/2019
 22709 00003C68 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22710 00003C6C EBBF                    	JMP     short WRTLP
 22711                                  
 22712                                  	; 23/07/2019 - Retro DOS v3.2
 22713                                  	; 09/08/2018
 22714                                  	; MSDOS 6.0
 22715                                  DWRITE_DISK_FULL:
 22716                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22717                                  	; 16/12/2022
 22718 00003C6E 16                      	push	ss
 22719 00003C6F 1F                      	pop	ds
 22720 00003C70 59                      	pop	cx		; unjunk stack
 22721 00003C71 5B                      	pop	bx
 22722 00003C72 C606[0B06]01            	mov	byte [DISK_FULL],1
 22723                                  	;stc
 22724 00003C77 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22725                                  
 22726                                  	; 16/12/2022
 22727                                  SET_ACC_ERRW:
 22728 00003C7A E90AFD                  	jmp	SET_ACC_ERR_DS
 22729                                  
 22730                                  WRTLAST:
 22731 00003C7D A1[D405]                	MOV     AX,[BYTCNT2]
 22732 00003C80 09C0                    	OR      AX,AX
 22733 00003C82 7413                    	JZ	short FINWRT
 22734 00003C84 A3[D205]                	MOV     [BYTCNT1],AX
 22735 00003C87 E8A911                  	call	NEXTSEC
 22736 00003C8A 72EE                    	JC	short SET_ACC_ERRW
 22737 00003C8C C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22738 00003C92 E83E11                  	call	BUFWRT
 22739 00003C95 72E3                    	JC	short SET_ACC_ERRW
 22740                                  FINWRT:
 22741 00003C97 C43E[9E05]              	LES     DI,[THISSFT]
 22742 00003C9B A1[DE05]                	MOV     AX,[GROWCNT]
 22743 00003C9E 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22744 00003CA2 09C0                    	OR      AX,AX
 22745 00003CA4 7502                    	JNZ	short UPDATE_size
 22746 00003CA6 E30F                    	JCXZ    SAMSIZ
 22747                                  UPDATE_size:
 22748                                  	;add	[es:di+11h],ax
 22749 00003CA8 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22750                                  	;adc	[es:di+13h],cx
 22751 00003CAC 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22752                                  
 22753                                  ; Make sure that all other SFT's see this growth also.
 22754                                  
 22755 00003CB0 B80100                  	MOV     AX,1
 22756                                  ;if installed
 22757                                  	;Call	JShare + 14 * 4
 22758 00003CB3 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22759                                  ;else
 22760                                  ;	Call    ShSU
 22761                                  ;endif
 22762                                  
 22763                                  SAMSIZ:
 22764 00003CB7 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22765                                  
 22766                                  	; 16/12/2022
 22767                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22768                                  ;SET_ACC_ERRW:
 22769                                  	;jmp	SET_ACC_ERR_DS
 22770                                  
 22771                                  WRTEOF:
 22772 00003CBA 89C1                    	MOV     CX,AX
 22773 00003CBC 09D1                    	OR      CX,DX
 22774 00003CBE 746C                    	JZ	short KILLFIL
 22775 00003CC0 83E801                  	SUB     AX,1
 22776 00003CC3 83DA00                  	SBB     DX,0
 22777                                  
 22778                                  	; MSDOS 3.3
 22779                                  	;;div	word [es:bp+2]
 22780                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22781                                  	;;mov	cl,[es:bp+5]
 22782                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22783                                  	;shr	ax,cl
 22784                                  
 22785                                  	; MSDOS 6.0
 22786 00003CC6 53                      	PUSH	BX
 22787                                  	;mov	bx,[es:bp+2]
 22788 00003CC7 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22789 00003CCB E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22790 00003CCE 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22791 00003CCF 89CA                    	MOV	DX,CX			      ;M039
 22792 00003CD1 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22793 00003CD5 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22794                                  
 22795 00003CD8 89C1                    	MOV     CX,AX
 22796 00003CDA E84710                  	call	FNDCLUS
 22797                                  SET_ACC_ERRWJ2:
 22798 00003CDD 729B                    	JC	short SET_ACC_ERRW
 22799                                  
 22800 00003CDF E326                    	JCXZ    RELFILE
 22801 00003CE1 E80B12                  	call	ALLOCATE
 22802                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22803                                  	; 16/12/2022
 22804 00003CE4 7303                    	jnc	short UPDATE
 22805 00003CE6 E9BCFE                  	JMP	WRTERR
 22806                                  UPDATE:
 22807 00003CE9 C43E[9E05]              	LES	DI,[THISSFT]
 22808 00003CED A1[CE05]                	MOV	AX,[BYTPOS]
 22809                                  	;mov	[es:di+11h],ax
 22810 00003CF0 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22811 00003CF4 A1[D005]                	MOV	AX,[BYTPOS+2]
 22812                                  	;mov	[es:di+13h],ax
 22813 00003CF7 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22814                                  ;
 22815                                  ; Make sure that all other SFT's see this growth also.
 22816                                  ;
 22817 00003CFB B80200                  	MOV     AX,2
 22818                                  ;if installed
 22819                                  	;Call	JShare + 14 * 4
 22820 00003CFE FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22821                                  ;else
 22822                                  ;	Call    ShSU
 22823                                  ;endif
 22824 00003D02 31C9                    	XOR     CX,CX
 22825 00003D04 E935FD                  	jmp	ADDREC
 22826                                  
 22827                                  	; 16/12/2022
 22828                                  ;WRTERRJ: 
 22829                                  	;JMP	WRTERR
 22830                                  
 22831                                  ;;;;;;;;;;;;;;;; 7/18/86
 22832                                  ;;;;;;;;;;;;;;;;
 22833                                  
 22834                                  RELFILE:
 22835                                  	; MSDOS 6.0
 22836 00003D07 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22837 00003D08 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22838                                  	;cmp	dx,[es:di+19h]
 22839 00003D0C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22840 00003D10 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22841                                  	;mov	[es:di+19h],0
 22842 00003D12 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22843                                  	;mov	dx,[es:di+0Bh]
 22844 00003D18 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22845                                  	;mov	[es:di+35h],dx
 22846 00003D1C 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22847                                  SKIPRESET:                            		;AN002; BL
 22848 00003D20 07                      	POP     ES                    		;AN002; BL
 22849                                  ;
 22850 00003D21 BAFFFF                  	MOV     DX,0FFFFH
 22851 00003D24 E87612                  	call	RELBLKS
 22852                                  	; 16/12/2022
 22853                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22854 00003D27 73C0                    	jnc	short UPDATE
 22855                                  SET_ACC_ERRWJ:
 22856                                  	;JC	short SET_ACC_ERRWJ2
 22857                                  	;JMP	SHORT UPDATE
 22858                                  	; 16/12/2022
 22859 00003D29 E95BFC                  	jmp	SET_ACC_ERR_DS
 22860                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22861                                  	;JC	short SET_ACC_ERRWJ2
 22862                                  	;JMP	SHORT UPDATE
 22863                                  
 22864                                  KILLFIL:
 22865 00003D2C 31DB                    	XOR     BX,BX
 22866 00003D2E 06                      	PUSH    ES
 22867 00003D2F C43E[9E05]              	LES     DI,[THISSFT]
 22868                                  	;mov	[es:di+19h],bx
 22869 00003D33 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22870                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22871 00003D37 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22872                                  	;xchg	bx,[es:di+0Bh]
 22873 00003D3B 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22874 00003D3F 07                      	POP	ES
 22875                                  
 22876 00003D40 09DB                    	OR	BX,BX
 22877                                  	;JZ	short UPDATEJ
 22878                                  	; 16/12/2022
 22879 00003D42 74A5                    	jz	short UPDATE
 22880                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22881                                  	;jz	short UPDATEJ
 22882                                  
 22883                                  ;; 10/23/86 FastOpen update
 22884 00003D44 06                      	PUSH	ES              ; since first cluster # is 0
 22885 00003D45 55                      	PUSH	BP              ; we must delete the old cache entry
 22886 00003D46 50                      	PUSH	AX
 22887 00003D47 51                      	PUSH	CX
 22888 00003D48 52                      	PUSH	DX
 22889 00003D49 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22890                                  	; 15/12/2022
 22891 00003D4D 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22892                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22893                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22894 00003D51 89D9                    	MOV	CX,BX                    ; first cluster #
 22895 00003D53 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22896 00003D55 E80BEA                  	call	FastOpen_Update          ; call fastopen
 22897 00003D58 5A                      	POP	DX
 22898 00003D59 59                      	POP	CX
 22899 00003D5A 58                      	POP	AX
 22900 00003D5B 5D                      	POP	BP
 22901 00003D5C 07                      	POP	ES
 22902                                  ;; 10/23/86 FastOpen update
 22903                                  
 22904 00003D5D E83B12                  	call	RELEASE
 22905 00003D60 72C7                    	JC	short SET_ACC_ERRWJ
 22906                                  UPDATEJ:
 22907                                  	; 20/11/2022
 22908 00003D62 EB85                    	JMP	short UPDATE ; 10/08/2018
 22909                                  
 22910                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22911                                  ;----------------------------------------------------------------------------
 22912                                  ;
 22913                                  ; Procedure Name : DskWrtBufPurge
 22914                                  ;
 22915                                  ; Inputs:
 22916                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22917                                  ;	     sectors, also termed an "Extent".)
 22918                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22919                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22920                                  ;
 22921                                  ; Function:
 22922                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22923                                  ;	are in Extent; they are being over-written.
 22924                                  ;
 22925                                  ; Outputs:
 22926                                  ;       (Same as Input.)
 22927                                  ; Uses:
 22928                                  ;       All registers except DS,AX,SI,DI preserved.
 22929                                  ;       SS override for all global variables.
 22930                                  ;----------------------------------------------------------------------------
 22931                                  ;M039: Created
 22932                                  
 22933                                  ;procedure   DskWrtBufPurge,NEAR
 22934                                  ;
 22935                                  ;ASSUME  DS:NOTHING
 22936                                  
 22937                                  ; 04/05/2019 - Retro DOS v4.0
 22938                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22939                                  
 22940                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22941                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22942                                  
 22943                                  DskWrtBufPurge:
 22944                                  	;SaveReg <bx,cx>
 22945 00003D64 53                      	push	bx
 22946 00003D65 51                      	push	cx
 22947                                  
 22948 00003D66 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22949 00003D6B 89DE                    	mov	si,bx
 22950 00003D6D 01D1                    	add	cx,dx
 22951 00003D6F 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22952                                  
 22953                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22954                                  	;;mov	al,[es:bp+0]
 22955                                  	;mov	al,[es:bp+DPB.DRIVE]
 22956                                  	; 15/12/2022
 22957 00003D72 268A4600                	mov	al,[es:bp]
 22958                                  
 22959                                  ;	BX:DX = Extent start.
 22960                                  ;	SI:CX = Extent end + 1.
 22961                                  ;	AL = Drive #
 22962                                  
 22963 00003D76 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22964 00003D7C 7431                    	je	short nosc		; -no, jump.
 22965                                  
 22966                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 22967                                  ;	invalidate the entire SC. (This is an optimization; we really only
 22968                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 22969                                  
 22970 00003D7E 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 22971 00003D83 752A                    	jne	short nosc		; -no, jump.
 22972                                  
 22973 00003D85 50                      	push    ax
 22974 00003D86 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 22975 00003D8A 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 22976                                  
 22977                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 22978                                  	;jbe	short sc5		; -yes, jump.
 22979                                  
 22980 00003D8F 39FE                    	cmp	si,di
 22981 00003D91 7502                    	jne	short sc01
 22982 00003D93 39C1                    	cmp	cx,ax
 22983                                  sc01: 
 22984 00003D95 7617                    	jbe	short sc5	
 22985                                  
 22986 00003D97 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 22987 00003D9C 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 22988                                  	
 22989                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 22990                                  	;jae	short sc5		; -yes, jump.
 22991                                  
 22992 00003D9F 39FB                    	cmp	bx,di
 22993 00003DA1 7502                    	jne	short sc02
 22994 00003DA3 39C2                    	cmp	dx,ax
 22995                                  sc02:
 22996 00003DA5 7307                    	jnb	short sc5
 22997                                  
 22998 00003DA7 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 22999                                  sc5:	
 23000 00003DAE 58                      	pop     ax
 23001                                  
 23002                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23003                                  ;	written.
 23004                                  
 23005                                  nosc:	
 23006 00003DAF E82A1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23007                                  
 23008                                  _bufq:	
 23009                                  	;cmpo	al,[di+4]
 23010 00003DB2 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23011 00003DB5 7527                    	jne	short bufq5		; -no, jump.
 23012                                  
 23013                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23014                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23015                                  
 23016                                  	;cmp	bx,[di+8]
 23017 00003DB7 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23018 00003DBA 7503                    	jne	short bufq04
 23019                                  	;cmp	dx,[di+6]
 23020 00003DBC 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23021                                  bufq04:
 23022 00003DBF 771D                    	ja	short bufq5
 23023                                  
 23024                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23025                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23026                                  
 23027                                  	;cmp	si,[di+8]
 23028 00003DC1 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23029 00003DC4 7503                    	jne	short bufq05
 23030                                  	;cmp	cx,[di+6]
 23031 00003DC6 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23032                                  bufq05:
 23033 00003DC9 7613                    	jbe	short bufq5
 23034                                  
 23035                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23036                                  
 23037                                  	;test	byte [di+5],40h
 23038 00003DCB F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23039 00003DCF 7403                    	jz	short bufq4		; -no, jump.
 23040 00003DD1 E8791E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23041                                  bufq4:
 23042                                  	;mov	word [di+4],20FFh
 23043 00003DD4 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23044                                  
 23045 00003DD9 E8121C                  	call	SCANPLACE
 23046 00003DDC EB02                    	jmp     short bufq6
 23047                                  bufq5: 
 23048 00003DDE 8B3D                    	mov     di,[di]
 23049                                  	;mov	di,[di+BUFFINFO.buf_next]
 23050                                  bufq6: 
 23051 00003DE0 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23052 00003DE5 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23053                                  	
 23054                                  	;RestoreReg <cx,bx>
 23055 00003DE7 59                      	pop	cx
 23056 00003DE8 5B                      	pop	bx
 23057 00003DE9 C3                      	retn
 23058                                  
 23059                                  ;EndProc DskWrtBufPurge
 23060                                  
 23061                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23062                                  ;----------------------------------------------------------------------------
 23063                                  ;
 23064                                  ; Procedure Name : DIV32
 23065                                  ;
 23066                                  ; Inputs:
 23067                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23068                                  ; Function:
 23069                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23070                                  ; Outputs:
 23071                                  ;       CX:AX = quotient , DX= remainder
 23072                                  ; Uses:
 23073                                  ;       All registers except AX,CX,DX preserved.
 23074                                  ;----------------------------------------------------------------------------
 23075                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23076                                  
 23077                                  ; 04/05/2019 - Retro DOS v4.0
 23078                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23079                                  
 23080                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23081                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23082                                  
 23083                                  DIV32:
 23084 00003DEA 81FB0002                	cmp	bx,512
 23085 00003DEE 7515                    	jne	short div5
 23086                                  
 23087 00003DF0 89D1                    	mov	cx,dx
 23088 00003DF2 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23089 00003DF4 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23090 00003DF8 88E0                    	mov	al,ah
 23091 00003DFA 88CC                    	mov	ah,cl
 23092 00003DFC 88E9                    	mov	cl,ch
 23093 00003DFE 30ED                    	xor	ch,ch
 23094 00003E00 D1E9                    	shr	cx,1
 23095 00003E02 D1D8                    	rcr	ax,1
 23096 00003E04 C3                      	retn
 23097                                  div5:	
 23098 00003E05 89C1                    	mov	cx,ax
 23099 00003E07 89D0                    	mov	ax,dx
 23100 00003E09 31D2                    	xor	dx,dx
 23101 00003E0B F7F3                    	div	bx              ; 0:AX/BX
 23102 00003E0D 91                      	xchg	cx,ax
 23103 00003E0E F7F3                    	div	bx              ; DX:AX/BX
 23104 00003E10 C3                      	retn
 23105                                  
 23106                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23107                                  ;----------------------------------------------------------------------------
 23108                                  ;
 23109                                  ; Procedure Name : SHR32
 23110                                  ;
 23111                                  ; Inputs:
 23112                                  ;	DX:AX = 32 bit sector number
 23113                                  ; Function:
 23114                                  ;       Perform 32 bit shift right
 23115                                  ; Outputs:
 23116                                  ;	AX = cluster number
 23117                                  ;	ZF = 1 if no error
 23118                                  ;	   = 0 if error (cluster number > 64k)
 23119                                  ; Uses:
 23120                                  ;       DX,CX
 23121                                  ;---------------------------------------------------------------------------
 23122                                  ; M017	- SHR32 rewritten for better performance
 23123                                  ; M039	- Additional optimization
 23124                                  
 23125                                  ; 04/05/2019 - Retro DOS v4.0
 23126                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23127                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23128                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23129                                  
 23130                                  SHR32:
 23131                                  	;mov	cl,[es:bp+5]
 23132 00003E11 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23133 00003E15 30ED                    	xor	ch,ch	    ;ZF=1
 23134 00003E17 E306                    	jcxz	norota
 23135                                  
 23136                                  rotashft2:
 23137 00003E19 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23138 00003E1B D1D8                    	rcr	ax,1	    ;ZF not affected.
 23139 00003E1D E2FA                    	loop	rotashft2
 23140                                  norota:
 23141 00003E1F C3                      	retn
 23142                                  
 23143                                  ;============================================================================
 23144                                  ; DIR.ASM, MSDOS 6.0, 1991
 23145                                  ;============================================================================
 23146                                  ; 27/07/2018 - Retro DOS v3.0
 23147                                  ; 19/05/2019 - Retro DOS v4.0 
 23148                                  
 23149                                  ;	TITLE	DIR - Directory and path cracking
 23150                                  ;	NAME	Dir
 23151                                  
 23152                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23153                                  ;---------------------------------------------------------------------------
 23154                                  ;
 23155                                  ; Procedure Name : FINDENTRY,SEARCH
 23156                                  ;
 23157                                  ; Inputs:
 23158                                  ;	[THISDPB] set
 23159                                  ;	[SECCLUSPOS] = 0
 23160                                  ;	[DIRSEC] = Starting directory sector number
 23161                                  ;	[CLUSNUM] = Next cluster of directory
 23162                                  ;	[CLUSFAC] = Sectors/Cluster
 23163                                  ;	[NAME1] = Name to look for
 23164                                  ; Function:
 23165                                  ;	Find file name in disk directory.
 23166                                  ;	"?" matches any character.
 23167                                  ; Outputs:
 23168                                  ;	Carry set if name not found
 23169                                  ;	ELSE
 23170                                  ;	Zero set if attributes match (always except when creating)
 23171                                  ;	AH = Device ID (bit 7 set if not disk)
 23172                                  ;	[THISDPB] = Base of drive parameters
 23173                                  ;	DS = DOSGROUP
 23174                                  ;	ES = DOSGROUP
 23175                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23176                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23177                                  ;	[CURBUF] has directory record with match
 23178                                  ;	[NAME1] has file name
 23179                                  ;	[LASTENT] is entry number of the entry
 23180                                  ; All other registers destroyed.
 23181                                  ;----------------------------------------------------------------------------
 23182                                  
 23183                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23184                                  ;hkn; this point.
 23185                                  
 23186                                  SEARCH:
 23187                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23188                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23189                                  
 23190                                  	; 19/05/2019 - Retro DOS v4.0
 23191                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23192                                  
 23193                                  	; 27/07/2018 - Retro DOS v3.0
 23194                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23195                                  	; 15/03/2018 - Retro DOS v2.0
 23196                                  
 23197                                  	;entry	FindEntry
 23198                                  FINDENTRY:
 23199 00003E20 E84404                  	call	STARTSRCH
 23200 00003E23 A0[6B05]                	MOV	AL,[ATTRIB]
 23201                                  	;and	al,9Eh
 23202 00003E26 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23203                                  	;cmp	al,8
 23204 00003E28 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23205 00003E2A 7503                    	JNZ	short NOTVOLSRCH	; No
 23206 00003E2C E87601                  	CALL	SETROOTSRCH		; Yes force search of root
 23207                                  NOTVOLSRCH:
 23208 00003E2F E80601                  	CALL	GETENTRY
 23209 00003E32 7303                    	JNC	short SRCH
 23210 00003E34 E99500                  	JMP	SETESRET
 23211                                  
 23212                                  	;entry	Srch
 23213                                  SRCH:
 23214 00003E37 1E                      	PUSH	DS
 23215 00003E38 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23216                                  
 23217                                  ;	(DS:BX) = directory entry address
 23218                                  
 23219 00003E3C 8A27                    	mov	ah,[BX]
 23220                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23221 00003E3E 08E4                    	OR	AH,AH			; End of directory?
 23222 00003E40 743A                    	JZ	short FREE
 23223                                  
 23224                                  ;hkn; SS override
 23225 00003E42 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23226 00003E47 7433                    	JZ	short FREE
 23227                                  	;test	byte [bx+0Bh],8
 23228 00003E49 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23229                                  					; Volume ID file?
 23230 00003E4D 7405                    	JZ	short CHKFNAM 		; NO
 23231                                  
 23232                                  ;hkn; SS override
 23233 00003E4F 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23234                                  CHKFNAM:
 23235                                  ;	Context ES
 23236 00003E54 8CD6                    	MOV	SI,SS
 23237 00003E56 8EC6                    	MOV	ES,SI
 23238 00003E58 89DE                    	MOV	SI,BX
 23239                                  
 23240                                  ;hkn; NAME1 is in DOSDATA
 23241 00003E5A BF[4B05]                	MOV	DI,NAME1
 23242                                  ;;;;; 7/29/86
 23243                                  
 23244                                  ;hkn; SS override for NAME1
 23245 00003E5D 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23246 00003E63 7506                    	JNZ	short NO_E5
 23247 00003E65 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23248                                  NO_E5:
 23249                                  ;;;;; 7/29/86
 23250 00003E6B E86100                  	CALL	MetaCompare
 23251 00003E6E 7428                    	JZ	short FOUND
 23252 00003E70 1F                      	POP	DS
 23253                                  
 23254                                  	;entry	NEXTENT
 23255                                  NEXTENT:
 23256 00003E71 C42E[8A05]              	LES	BP,[THISDPB]
 23257 00003E75 E86600                  	CALL	NEXTENTRY
 23258 00003E78 73BD                    	JNC	short SRCH
 23259 00003E7A EB50                    	JMP	SHORT SETESRET
 23260                                  
 23261                                  FREE:
 23262 00003E7C 1F                      	POP	DS
 23263 00003E7D 8B0E[4803]              	MOV	CX,[LASTENT]
 23264 00003E81 3B0E[D805]              	CMP	CX,[ENTFREE]
 23265 00003E85 7304                    	JAE	short TSTALL
 23266 00003E87 890E[D805]              	MOV	[ENTFREE],CX
 23267                                  TSTALL:
 23268 00003E8B 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23269                                  NEXTENTJ:
 23270 00003E8F 74E0                    	je	short NEXTENT 		; No - continue search
 23271 00003E91 890E[DA05]              	MOV	[ENTLAST],CX
 23272 00003E95 F9                      	STC
 23273 00003E96 EB34                    	JMP	SHORT SETESRET
 23274                                  
 23275                                  FOUND:
 23276                                  ; We have a file with a matching name. We must now consider the attributes:
 23277                                  ; ATTRIB	Action
 23278                                  ; ------	------
 23279                                  ; Volume_ID	Is Volume_ID in test?
 23280                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23281                                  ;		If create then Is ATTRIB equal to test?
 23282                                  
 23283 00003E98 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23284 00003E9A 1F                      	POP	DS
 23285 00003E9B 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23286                                  	;and	ah,9Eh
 23287 00003E9F 80E4DE                  	AND	AH,~attr_ignore
 23288                                  	;lea	si,[si+15]
 23289 00003EA2 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23290                                  					; point to first cluster field
 23291                                  	;test	ch,8
 23292 00003EA5 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23293 00003EA8 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23294                                  	;test	ah,8
 23295 00003EAA F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23296                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23297                                  	; 16/12/2022
 23298 00003EAD 74C2                    	jz	short NEXTENT ; 19/05/2019
 23299                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23300                                  	;JZ	short NEXTENTJ
 23301 00003EAF 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23302 00003EB1 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23303                                  check_one_volume_id:
 23304                                  	;CMP	ah,8
 23305 00003EB3 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23306                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23307                                  	; 16/12/2022
 23308 00003EB6 74B9                    	je	short NEXTENT ; 19/05/2019
 23309                                  	;JZ	short NEXTENTJ
 23310 00003EB8 E8C003                  	CALL	MatchAttributes
 23311 00003EBB 7407                    	JZ	SHORT RETFF
 23312 00003EBD F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23313                                  	; 16/12/2022
 23314                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23315 00003EC2 74AD                    	jz	short NEXTENT ; 19/05/2019
 23316                                  RETFF:
 23317 00003EC4 C42E[8A05]              	LES	BP,[THISDPB]
 23318                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23319                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23320                                  	; 15/12/2022
 23321 00003EC8 268A6600                	MOV	AH,[ES:BP]
 23322                                  SETESRET:
 23323 00003ECC 16                      	PUSH	SS
 23324 00003ECD 07                      	POP	ES
 23325 00003ECE C3                      	retn
 23326                                  
 23327                                  ;----------------------------------------------------------------------------
 23328                                  ;
 23329                                  ; Procedure Name : MetaCompare
 23330                                  ;
 23331                                  ; Inputs:
 23332                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23333                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23334                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23335                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23336                                  ; Function:
 23337                                  ;	Compare FCB style names allowing for ? match to any char
 23338                                  ; Outputs:
 23339                                  ;	Zero if match else NZ
 23340                                  ; Destroys CX,SI,DI all others preserved
 23341                                  ;----------------------------------------------------------------------------
 23342                                  
 23343                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23344                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23345                                  
 23346                                  MetaCompare:
 23347 00003ECF B90B00                  	MOV	CX,11
 23348                                  WILDCRD:
 23349 00003ED2 F3A6                    	REPE	CMPSB
 23350 00003ED4 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23351                                  CHECK_META:
 23352 00003ED6 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23353 00003EDB 74F5                    	JZ	short WILDCRD
 23354                                  MetaRet:
 23355 00003EDD C3                       	retn				; Zero set, Match
 23356                                  
 23357                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23358                                  ;----------------------------------------------------------------------------
 23359                                  ;
 23360                                  ; Procedure Name : NEXTENTRY
 23361                                  ;
 23362                                  ; Inputs:
 23363                                  ;	Same as outputs of GETENTRY, above
 23364                                  ; Function:
 23365                                  ;	Update BX, and [LASTENT] for next directory entry.
 23366                                  ;	Carry set if no more.
 23367                                  ;----------------------------------------------------------------------------
 23368                                  
 23369                                  NEXTENTRY:
 23370                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23371                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23372                                  
 23373                                  	; 19/05/2019 - Retro DOS v4.0
 23374                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23375                                  
 23376                                  	; 27/07/2018 - Retro DOS v3.0
 23377                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23378                                  	; 15/03/2018 - Retro DOS v2.0
 23379                                  
 23380 00003EDE A1[4803]                	MOV	AX,[LASTENT]
 23381 00003EE1 3B06[DA05]              	CMP	AX,[ENTLAST]
 23382 00003EE5 7422                    	JZ	short NONE
 23383 00003EE7 40                      	INC	AX
 23384                                  	;ADD	BX,32
 23385 00003EE8 8D5F20                  	LEA	BX,[BX+32]
 23386 00003EEB 39D3                    	CMP	BX,DX
 23387                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23388                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23389                                  	; 16/12/2022
 23390 00003EED 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23391 00003EEF 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23392 00003EF3 FEC3                    	INC	BL
 23393 00003EF5 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23394 00003EF9 7215                    	JB	short SAMECLUS
 23395 00003EFB 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23396 00003EFF E80617                  	call	IsEOF
 23397 00003F02 7305                    	JAE	short NONE
 23398                                  	; 23/07/2019
 23399 00003F04 83FB02                  	CMP	BX,2
 23400                                  	;JB	short NONE
 23401                                  	;JMP	short GETENT
 23402                                  	; 16/12/2022
 23403 00003F07 7332                    	jnb	short GETENT
 23404                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23405                                  	;JB	short NONE
 23406                                  	;JMP	short GETENT
 23407                                  NONE:
 23408 00003F09 F9                      	STC
 23409 00003F0A C3                      	retn
 23410                                  HAVIT:
 23411 00003F0B A3[4803]                	MOV	[LASTENT],AX
 23412 00003F0E F8                      	CLC
 23413                                  nextentry_retn:
 23414 00003F0F C3                      	retn
 23415                                  SAMECLUS:
 23416 00003F10 881E[7305]              	MOV	[SECCLUSPOS],BL
 23417 00003F14 A3[4803]                	MOV	[LASTENT],AX
 23418 00003F17 1E                      	PUSH	DS
 23419 00003F18 C53E[E205]              	LDS	DI,[CURBUF]
 23420                                  	; 19/05/2019
 23421                                  	; MSDOS 6.0
 23422                                  	;mov	dx,[di+8]
 23423 00003F1C 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23424                                  ;hkn; SS override
 23425 00003F1F 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23426                                  	;mov	dx,[di+6]
 23427 00003F24 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23428                                  	;inc	dx ; MSDOS 3.3
 23429                                  	; MSDOS 6.0
 23430 00003F27 83C201                  	ADD	DX,1				;AN000; >32mb
 23431 00003F2A 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23432                                  	; MSDOS 3.3 & MSDOS 6.0
 23433 00003F30 1F                      	POP	DS
 23434 00003F31 E82AF8                  	call	FIRSTCLUSTER
 23435 00003F34 31DB                    	XOR	BX,BX
 23436 00003F36 EB23                    	JMP	short SETENTRY
 23437                                  
 23438                                  ;----------------------------------------------------------------------------
 23439                                  ;
 23440                                  ; Procedure Name : GETENTRY
 23441                                  ;
 23442                                  ; Inputs:
 23443                                  ;	[LASTENT] has directory entry
 23444                                  ;	ES:BP points to drive parameters
 23445                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23446                                  ; Function:
 23447                                  ;	Locates directory entry in preparation for search
 23448                                  ;	GETENT provides entry for passing desired entry in AX
 23449                                  ; Outputs:
 23450                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23451                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23452                                  ;	[LASTENT] = New directory entry number
 23453                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23454                                  ;	Carry set if error (currently user FAILed to I 24)
 23455                                  ;----------------------------------------------------------------------------
 23456                                  
 23457                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23458                                  GETENTRY:
 23459                                  	; 27/07/2018 - Retro DOS v3.0
 23460 00003F38 A1[4803]                	MOV	AX,[LASTENT]
 23461                                  
 23462                                  	;entry	GETENT
 23463                                  GETENT:
 23464 00003F3B A3[4803]                	MOV	[LASTENT],AX
 23465                                  ;
 23466                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23467                                  ; directory.
 23468                                  ;
 23469 00003F3E B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23470 00003F40 D3C0                    	rol	ax,cl			; keep hight order bits
 23471 00003F42 89C2                    	mov	dx,ax
 23472                                  	; 19/05/2019 - Retro DOS v4.0
 23473                                  	;and	ax,0FFE0h
 23474                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23475                                  	;and	ax,~(32-1)		; mask off high order bits
 23476                                  	; 16/12/2022
 23477 00003F44 24E0                    	and	al,0E0h ; ~31
 23478 00003F46 83E21F                  	and	dx,1Fh
 23479                                  	;and	dx,32-1			; mask off low order bits
 23480                                  ;
 23481                                  ; DX:AX contain the byte offset of the required directory entry from the
 23482                                  ; beginning of the directory. Convert this to a sector number. Round the
 23483                                  ; sector size down to a multiple of 32.
 23484                                  ;
 23485                                  	;mov	bx,[es:bp+2]
 23486 00003F49 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23487 00003F4D 80E3E0                  	and	bl,0E0h
 23488                                  	;AND	BL,255-31		; Must be multiple of 32
 23489 00003F50 F7F3                    	DIV	BX
 23490 00003F52 89D3                    	MOV	BX,DX			; Position within sector
 23491 00003F54 53                      	PUSH	BX
 23492 00003F55 E8ADF7                  	call	DIRREAD
 23493 00003F58 5B                      	POP	BX
 23494                                  	;retc
 23495 00003F59 72B4                    	jc	short nextentry_retn	
 23496                                  SETENTRY:
 23497 00003F5B 8B16[E205]              	MOV	DX,[CURBUF]
 23498                                  	;add	dx,16 ; MSDOS 3.3
 23499                                  	;add	dx,20 ; MSDOS 6.0 
 23500 00003F5F 83C214                  	ADD	DX,BUFINSIZ
 23501 00003F62 01D3                    	ADD	BX,DX
 23502                                  	;add	dx,[es:bp+2]
 23503 00003F64 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23504                                  	; 29/12/2022
 23505                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23506 00003F68 F8                      	clc
 23507 00003F69 C3                      	retn
 23508                                  
 23509                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23510                                  ;----------------------------------------------------------------------------
 23511                                  ;
 23512                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23513                                  ;
 23514                                  ; Inputs:
 23515                                  ;	BX cluster number of start of directory
 23516                                  ;	ES:BP Points to DPB
 23517                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23518                                  ; Function:
 23519                                  ;	Set up a directory search
 23520                                  ; Outputs:
 23521                                  ;	[DIRSTART] = BX
 23522                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23523                                  ;	Carry set if error (currently user FAILed to I 24)
 23524                                  ; destroys AX,DX,BX
 23525                                  ;----------------------------------------------------------------------------
 23526                                  
 23527                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23528                                  SETDIRSRCH:
 23529 00003F6A 09DB                    	OR	BX,BX
 23530 00003F6C 7437                    	JZ	short SETROOTSRCH
 23531 00003F6E 891E[C205]              	MOV	[DIRSTART],BX
 23532                                  	;mov	al,[es:bp+4]
 23533 00003F72 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23534 00003F76 FEC0                    	INC	AL
 23535 00003F78 A2[7705]                	MOV	[CLUSFAC],AL
 23536                                  
 23537                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23538                                  	;SAVE	<SI>
 23539 00003F7B 56                      	push	si
 23540                                  	;test	byte [FastOpenFlg],2
 23541 00003F7C F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23542 00003F81 7507                    	JNZ	short UNP_OK
 23543                                  
 23544                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23545                                  	;invoke	UNPACK
 23546 00003F83 E89916                  	call	UNPACK
 23547 00003F86 7302                    	JNC	short UNP_OK
 23548                                  	;RESTORE <SI>
 23549 00003F88 5E                      	pop	si
 23550                                  	;return
 23551 00003F89 C3                      	retn
 23552                                  
 23553                                  UNP_OK:
 23554 00003F8A 893E[BC05]              	MOV	[CLUSNUM],DI
 23555 00003F8E 89DA                    	MOV	DX,BX
 23556 00003F90 30DB                    	XOR	BL,BL
 23557 00003F92 881E[7305]              	MOV	[SECCLUSPOS],BL
 23558                                  	;invoke	FIGREC
 23559 00003F96 E82A0F                  	call	FIGREC
 23560                                  	;RESTORE <SI>
 23561 00003F99 5E                      	pop	si
 23562                                  	
 23563                                  	; 19/05/2019 - Retro DOS v4.0
 23564                                  
 23565                                  	; MSDOS 6.0
 23566                                  	;PUSH	DX			   ;AN000; >32mb
 23567                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23568                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23569                                  	;POP	DX			   ;AN000; >32mb
 23570                                  
 23571                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23572                                  	;push	dx
 23573                                  	;mov	dx,[HIGH_SECTOR]
 23574                                  	;mov	[DIRSEC+2],dx
 23575                                  	;pop	dx
 23576                                  	;MOV	[DIRSEC],dx
 23577                                  	; 16/12/2022
 23578 00003F9A A1[0706]                	mov	ax,[HIGH_SECTOR]
 23579 00003F9D A3[C005]                	mov	[DIRSEC+2],AX
 23580 00003FA0 8916[BE05]              	MOV	[DIRSEC],DX
 23581                                  
 23582                                  	; 16/12/2022
 23583                                  	; cf=0 (at the return of FIGREC)
 23584                                  	;CLC
 23585 00003FA4 C3                      	retn
 23586                                  
 23587                                  	;entry	SETROOTSRCH
 23588                                  SETROOTSRCH:
 23589 00003FA5 31C0                    	XOR	AX,AX
 23590 00003FA7 A3[C205]                	MOV	[DIRSTART],AX
 23591 00003FAA A2[7305]                	MOV	[SECCLUSPOS],AL
 23592 00003FAD 48                      	DEC	AX
 23593 00003FAE A3[BC05]                	MOV	[CLUSNUM],AX
 23594                                  	;mov	ax,[es:bp+0Bh]
 23595 00003FB1 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23596                                  	; 19/05/2019
 23597                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23598                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23599 00003FB5 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23600 00003FB9 29D0                    	SUB	AX,DX
 23601 00003FBB A2[7705]                	MOV	[CLUSFAC],AL
 23602 00003FBE 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23603                                  	; MSDOS 6.0
 23604 00003FC2 C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23605 00003FC8 F8                      	CLC
 23606 00003FC9 C3                      	retn
 23607                                  
 23608                                  ;============================================================================
 23609                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23610                                  ;============================================================================
 23611                                  ; 27/07/2018 - Retro DOS v3.0
 23612                                  ; 19/05/2019 - Retro DOS v4.0 
 23613                                  
 23614                                  ;	TITLE	DIR2 - Directory and path cracking
 23615                                  ;	NAME	Dir2
 23616                                  
 23617                                  ;Break	<GETPATH -- PARSE A WFP>
 23618                                  ;----------------------------------------------------------------------------
 23619                                  ;
 23620                                  ; Procedure Name : GETPATH
 23621                                  ;
 23622                                  ; Inputs:
 23623                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23624                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23625                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23626                                  ;		( = -1 if current dir not involved, else
 23627                                  ;		 Points to first char after last "/" of current dir part)
 23628                                  ;	[THISCDS] Points to CDS being used
 23629                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23630                                  ;	[NoSetDir] set
 23631                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23632                                  ; Function:
 23633                                  ;	Crack the path
 23634                                  ; Outputs:
 23635                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23636                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23637                                  ;	ID1 field of [THISCDS] updated appropriately
 23638                                  ;	[ATTRIB] = [SATTRIB]
 23639                                  ;	ES:BP Points to DPB
 23640                                  ;	Carry set if bad path
 23641                                  ;	   SI Points to path element causing failure
 23642                                  ;	   Zero set
 23643                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23644                                  ;	      start a search on the last directory
 23645                                  ;	      CL is zero if there is a bad name in the path
 23646                                  ;	      CL is non-zero if the name was simply not found
 23647                                  ;		 [ENTFREE] may have free spot in directory
 23648                                  ;		 [NAME1] is the name.
 23649                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23650                                  ;	   Zero reset
 23651                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23652                                  ;		or path too long or malformed path
 23653                                  ;	ELSE
 23654                                  ;	   [CurBuf] = -1 if root directory
 23655                                  ;	   [CURBUF] contains directory record with match
 23656                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23657                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23658                                  ;	   AH = device ID
 23659                                  ;	      bit 7 of AH set if device SI and BX
 23660                                  ;	      will point DOSGROUP relative The firclus
 23661                                  ;	      field of the device entry contains the device pointer
 23662                                  ;	   [NAME1] Has name looked for
 23663                                  ;	   If last element is a directory zero is set and:
 23664                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23665                                  ;	      are set up to start a search on it.
 23666                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23667                                  ;	      like that for a file (except for zero flag)
 23668                                  ;	   If last element is a file zero is reset
 23669                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23670                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23671                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23672                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23673                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23674                                  ; DS preserved, Others destroyed
 23675                                  ;---------------------------------------------------------------------------
 23676                                  
 23677                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23678                                  ;hkn; DS already set up at this point.
 23679                                  
 23680                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23681                                  GETPATH:
 23682                                  	;mov	word [CREATING],0E500h
 23683 00003FCA C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23684                                  
 23685                                  ; Same as GetPath only CREATING and DELALL already set
 23686                                  
 23687                                  	;entry	GetPathNoSet
 23688                                  GetPathNoSet:
 23689                                  	;mov	byte [EXTERR_LOCUS],2	
 23690 00003FD0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23691 00003FD5 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23692                                  
 23693                                  ; See if the input indicates a device that has already been detected. If so,
 23694                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23695                                  
 23696 00003FDB 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23697                                  	;cmp	word [DI+1],5C3Ah
 23698                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23699 00003FDF 817D013A5C              	cmp	word [DI+1],':\'
 23700 00003FE4 7438                    	JZ	short CrackIt
 23701                                  
 23702                                  ; Let ChkDev find it in the device list
 23703                                  
 23704 00003FE6 83C703                  	ADD	DI,3
 23705                                  	; 18/08/2018
 23706                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23707                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23708                                  	; 16/12/2022
 23709                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23710 00003FE9 E8AB00                  	CALL	CHKDEV
 23711 00003FEC 722E                    	JC	short InternalError
 23712                                  
 23713                                  Build_devJ:
 23714 00003FEE A0[6D05]                	MOV	AL,[SATTRIB]
 23715 00003FF1 A2[6B05]                	MOV	[ATTRIB],AL
 23716                                  	;mov	byte [EXTERR_LOCUS],1
 23717 00003FF4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23718                                  					; "finding" a char device
 23719                                  					; set LOCUS to Unknown. This makes
 23720                                  					; certain idiotic problems reported
 23721                                  					; by a certain 3 letter OEM go away.
 23722                                  
 23723                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23724                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23725                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23726                                  ; wfp into the share set.
 23727                                  ;
 23728                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23729                                  ; non-space seen +1.  This position is kept in DX.
 23730                                  
 23731                                  ;hkn; SS is DOSDATA
 23732 00003FF9 16                      	push	ss
 23733 00003FFA 07                      	pop	es
 23734                                  
 23735                                  ;hkn; NAME1 is in DOSDATA
 23736 00003FFB BE[4B05]                	mov	si,NAME1
 23737 00003FFE 8B3E[B205]              	mov	di,[WFP_START]
 23738 00004002 89FA                    	mov	dx,di
 23739 00004004 B90800                  	mov	cx,8			; 8 chars in device name
 23740                                  MoveLoop:
 23741 00004007 AC                      	lodsb
 23742 00004008 AA                      	stosb
 23743 00004009 3C20                    	cmp	al," "
 23744 0000400B 7402                    	jz	short NoSave
 23745                                  
 23746 0000400D 89FA                    	mov	dx,di
 23747                                  NoSave:
 23748 0000400F E2F6                    	loop	MoveLoop
 23749                                  
 23750                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23751                                  ; at this point.
 23752                                  
 23753 00004011 89D7                    	mov	di,dx
 23754 00004013 C60500                  	mov	byte [di],0		; end of string
 23755 00004016 E8CE02                  	call	Build_device_ent	; Clears carry sets zero
 23756 00004019 FEC0                    	INC	AL			; reset zero
 23757 0000401B C3                      	retn
 23758                                  
 23759                                  InternalError:
 23760                                  InternalError_loop:
 23761 0000401C EBFE                    	JMP	short InternalError_loop	; freeze
 23762                                  
 23763                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23764                                  
 23765                                  CrackIt:
 23766 0000401E 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23767 00004022 83FEFF                  	CMP	SI,-1			; valid?
 23768 00004025 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23769 00004027 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23770                                  LOOK_SING:
 23771                                  	;mov	byte [ATTRIB],16h
 23772 0000402A C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23773                                  					; Attributes to search through Dirs
 23774 0000402F C43E[A205]              	LES	DI,[THISCDS]
 23775 00004033 B8FFFF                  	MOV	AX,-1
 23776                                  	;mov	bx,[es:di+73]
 23777 00004036 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23778 0000403A 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23779                                  
 23780                                  ; AX = -1
 23781                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23782                                  ;      has been uncertainly changed.
 23783                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23784                                  ;      may be -1 if no current directory part has been used.
 23785                                  
 23786 0000403E 39C6                    	CMP	SI,AX			; if Current directory is not part
 23787 00004040 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 23788 00004042 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23789                                  
 23790                                  ; DOS 3.3  6/25/86
 23791 00004044 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 23792                                  	;test	byte [FastOpenFlg],1
 23793 00004046 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23794 0000404B 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23795 0000404D 06                      	PUSH	ES			; save registers
 23796 0000404E 57                      	PUSH	DI
 23797 0000404F 51                      	PUSH	CX
 23798 00004050 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23799 00004053 56                      	PUSH	SI
 23800 00004054 53                      	PUSH	BX
 23801                                  
 23802 00004055 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23803 00004059 8B36[B205]              	MOV	SI,[WFP_START]
 23804                                  
 23805                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23806 0000405D BB[300D]                	MOV	BX,FastOpenTable
 23807 00004060 BF[460D]                	MOV	DI,Dir_Info_Buff
 23808 00004063 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23809                                  	;mov	al,1
 23810 00004066 B001                    	MOV	AL,FONC_Look_up
 23811 00004068 1E                      	PUSH	DS
 23812 00004069 07                      	POP	ES
 23813                                  	;call	far [BX+2]
 23814 0000406A FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23815 0000406D 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23816                                  					; Go to Got_Srch_cluster
 23817                                  	; 29/12/2022
 23818                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 23819                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23820                                  	;stc
 23821                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 23822                                  
 23823 0000406F 803C01                  	cmp	byte [si],1
 23824                                  GO_Chk_end1:	; 29/12/2022
 23825 00004072 F5                      	cmc 
 23826                                  	; [si] = 0 -> cf = 0
 23827                                  	; [si] > 0 -> cf = 1
 23828                                  
 23829                                  ;GO_Chk_end1:
 23830                                  	; 29/12/2022
 23831                                  	;clc
 23832                                  
 23833                                  GO_Chk_end:				; restore registers
 23834 00004073 5B                      	POP	BX
 23835 00004074 5E                      	POP	SI
 23836 00004075 8F44FF                  	POP	word [SI-1]
 23837 00004078 59                      	POP	CX
 23838 00004079 5F                      	POP	DI
 23839 0000407A 07                      	POP	ES
 23840 0000407B 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23841                                  
 23842                                  ; DOS 3.3  6/25/86
 23843                                  ;
 23844                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23845                                  ; of path and go crack from root.
 23846                                  
 23847                                  NO_CURR_D:
 23848 0000407D 8B36[B205]              	MOV	SI,[WFP_START]
 23849 00004081 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23850 00004084 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23851 00004088 EB3C                    	JMP	short ROOTPATH
 23852                                  
 23853                                  ; We are able to crack from the current directory part. Go set up for search
 23854                                  ; of specified cluster.
 23855                                  
 23856                                  GOT_SEARCH_CLUSTER:
 23857 0000408A C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23858 0000408E E8D9FE                  	call	SETDIRSRCH
 23859                                  	;JC	short SETFERR
 23860                                  	;JMP	short FINDPATH
 23861                                  	; 16/12/2022
 23862 00004091 7344                    	jnc	short FINDPATH ; 17/08/2018
 23863                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23864                                  	;JC	short SETFERR
 23865                                  	;JMP	short FINDPATH
 23866                                  SETFERR:
 23867 00004093 30C9                    	XOR	CL,CL			; set zero
 23868 00004095 F9                      	STC
 23869 00004096 C3                      	retn
 23870                                  
 23871                                  ;---------------------------------------------------------------------------
 23872                                  ;
 23873                                  ; Procedure Name : ChkDev
 23874                                  ;
 23875                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23876                                  ;   device.
 23877                                  ; Blasts CX,SI,DI,AX,BX
 23878                                  ;---------------------------------------------------------------------------
 23879                                  
 23880                                  CHKDEV:
 23881 00004097 89FE                    	MOV	SI,DI
 23882 00004099 8CD7                    	MOV	DI,SS
 23883 0000409B 8EC7                    	MOV	ES,DI
 23884                                  
 23885 0000409D BF[4B05]                	MOV	DI,NAME1
 23886 000040A0 B90900                  	MOV	CX,9
 23887                                  TESTLOOP:
 23888 000040A3 E87F10                  	call	GETLET
 23889                                  
 23890 000040A6 3C2E                    	CMP	AL,'.'
 23891 000040A8 740E                    	JZ	short TESTDEVICE
 23892 000040AA E8CE10                  	call	PATHCHRCMP
 23893 000040AD 7407                    	JZ	short NOTDEV
 23894 000040AF 08C0                    	OR	AL,AL
 23895 000040B1 7405                    	JZ	short TESTDEVICE
 23896                                  
 23897 000040B3 AA                      	STOSB
 23898 000040B4 E2ED                    	LOOP	TESTLOOP
 23899                                  NOTDEV:
 23900 000040B6 F9                      	STC
 23901 000040B7 C3                      	retn
 23902                                  
 23903                                  TESTDEVICE:
 23904 000040B8 83C102                  	ADD	CX,2
 23905 000040BB B020                    	MOV	AL,' '
 23906 000040BD F3AA                    	REP	STOSB
 23907 000040BF 8CD0                    	MOV	AX,SS
 23908 000040C1 8ED8                    	MOV	DS,AX
 23909                                  	;call	DEVNAME
 23910                                  	;retn
 23911                                  	; 18/12/2022
 23912 000040C3 E9C201                  	jmp	DEVNAME
 23913                                  
 23914                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23915                                  ;----------------------------------------------------------------------------
 23916                                  ;
 23917                                  ; Procedure Name : ROOTPATH,FINDPATH
 23918                                  ;
 23919                                  ; Inputs:
 23920                                  ;	Same as FINDPATH but,
 23921                                  ;	SI Points to asciz string of path which is assumed to start at
 23922                                  ;		the root (no leading '/').
 23923                                  ; Function:
 23924                                  ;	Search from root for path
 23925                                  ; Outputs:
 23926                                  ;	Same as FINDPATH but:
 23927                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23928                                  ;	[NoSetDir] is ignored.
 23929                                  ;----------------------------------------------------------------------------
 23930                                  
 23931                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23932                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23933                                  
 23934                                  ROOTPATH:
 23935 000040C6 E8DCFE                  	call	SETROOTSRCH
 23936 000040C9 803C00                  	CMP	BYTE [SI],0
 23937 000040CC 7509                    	JNZ	short FINDPATH
 23938                                  
 23939                                  ; Root dir specified
 23940 000040CE A0[6D05]                	MOV	AL,[SATTRIB]
 23941 000040D1 A2[6B05]                	MOV	[ATTRIB],AL
 23942 000040D4 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23943                                  					; (dir), clears carry.
 23944 000040D6 C3                      	retn
 23945                                  
 23946                                  ; Inputs:
 23947                                  ;	[ATTRIB] Set to get through directories
 23948                                  ;	[SATTRIB] Set to find last element
 23949                                  ;	ES:BP Points to DPB
 23950                                  ;	SI Points to asciz string of path (no leading '/').
 23951                                  ;	[SECCLUSPOS] = 0
 23952                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23953                                  ;	[CLUSNUM] = Cluster # of next cluster
 23954                                  ;	[CLUSFAC] = Sectors per cluster
 23955                                  ;	[NoSetDir] set
 23956                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23957                                  ;		( = -1 if current dir not involved, else
 23958                                  ;		 Points to first char after last "/" of current dir part)
 23959                                  ;	[THISCDS] Points to CDS being used
 23960                                  ;	[CREATING] and [DELALL] set
 23961                                  ; Function:
 23962                                  ;	Parse path name
 23963                                  ; Outputs:
 23964                                  ;	ID1 field of [THISCDS] updated appropriately
 23965                                  ;	[ATTRIB] = [SATTRIB]
 23966                                  ;	ES:BP Points to DPB
 23967                                  ;	[THISDPB] = ES:BP
 23968                                  ;	Carry set if bad path
 23969                                  ;	   SI Points to path element causing failure
 23970                                  ;	   Zero set
 23971                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23972                                  ;	      start a search on the last directory
 23973                                  ;	      CL is zero if there is a bad name in the path
 23974                                  ;	      CL is non-zero if the name was simply not found
 23975                                  ;		 [ENTFREE] may have free spot in directory
 23976                                  ;		 [NAME1] is the name.
 23977                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23978                                  ;	   Zero reset
 23979                                  ;	      File in middle of path or bad name in path
 23980                                  ;		or path too long or malformed path
 23981                                  ;	ELSE
 23982                                  ;	   [CURBUF] contains directory record with match
 23983                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23984                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 23985                                  ;	   [NAME1] Has name looked for
 23986                                  ;	   AH = device ID
 23987                                  ;	      bit 7 of AH set if device SI and BX
 23988                                  ;	      will point DOSGROUP relative The firclus
 23989                                  ;	      field of the device entry contains the device pointer
 23990                                  ;	   If last element is a directory zero is set and:
 23991                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23992                                  ;	      are set up to start a search on it,
 23993                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23994                                  ;	      like that for a file (except for zero flag)
 23995                                  ;	   If last element is a file zero is reset
 23996                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23997                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23998                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23999                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24000                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24001                                  ; Destroys all other registers
 24002                                  
 24003                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24004                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24005                                  
 24006                                      	;entry	FINDPATH
 24007                                  FINDPATH:
 24008 000040D7 06                      	PUSH	ES			; Save ES:BP
 24009 000040D8 56                      	PUSH	SI
 24010 000040D9 89F7                    	MOV	DI,SI
 24011 000040DB 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24012 000040DF 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24013 000040E4 740E                    	JZ	short NOIDS		; No current dir part
 24014 000040E6 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24015 000040EA 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24016 000040EC C43E[A205]              	LES	DI,[THISCDS]
 24017                                  	;mov	[es:di+73],cx
 24018 000040F0 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24019                                  NOIDS:
 24020                                  
 24021                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24022                                  ; character in the string. CX,DI may be destroyed.
 24023                                  ;
 24024                                  ;	invoke	NAMETRANS
 24025                                  ;	MOV	CL,AL
 24026                                  ;
 24027                                  ; The above is the slow method. The name has *already* been munged by
 24028                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24029                                  ; the name until ., \ or 0 is hit.
 24030                                  
 24031 000040F4 8CD0                    	MOV	AX,SS
 24032 000040F6 8EC0                    	MOV	ES,AX
 24033                                  
 24034                                  ;hkn; Name1 is in DOSDATA
 24035 000040F8 BF[4B05]                	MOV	DI,NAME1
 24036 000040FB B82020                  	MOV	AX,'  ' ; 2020h
 24037 000040FE AA                      	STOSB
 24038 000040FF AB                      	STOSW
 24039 00004100 AB                      	STOSW
 24040 00004101 AB                      	STOSW
 24041 00004102 AB                      	STOSW
 24042 00004103 AB                      	STOSW
 24043                                  
 24044                                  ;hkn; Name1 is in DOSDATA
 24045 00004104 BF[4B05]                	MOV	DI,NAME1
 24046 00004107 30E4                    	XOR	AH,AH			; bits for CL
 24047                                  GetNam:
 24048                                  	; 19/05/2019 - Retro DOS v4.0
 24049                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24050                                  
 24051                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24052                                  	; 16/12/2022
 24053                                  	;inc	cl ; not required !	
 24054                                  	
 24055 00004109 AC                      	LODSB
 24056 0000410A 3C2E                    	CMP	AL,'.'	; 2Eh
 24057 0000410C 7412                    	JZ	short _SetExt
 24058 0000410E 08C0                    	OR	AL,AL
 24059 00004110 7424                    	JZ	short _GetDone
 24060 00004112 3C5C                    	CMP	AL,'\'	; 5Ch
 24061 00004114 7420                    	JZ	short _GetDone
 24062 00004116 3C3F                    	CMP	AL,'?'	; 3Fh
 24063 00004118 7503                    	JNZ	short StoNam
 24064 0000411A 80CC01                  	OR	AH,1
 24065                                  StoNam: 
 24066 0000411D AA                      	STOSB
 24067 0000411E EBE9                    	JMP	short GetNam
 24068                                  _SetExt:
 24069 00004120 BF[5305]                	MOV	DI,NAME1+8
 24070                                  GetExt:
 24071 00004123 AC                      	LODSB
 24072 00004124 08C0                    	OR	AL,AL
 24073 00004126 740E                    	JZ	short _GetDone
 24074 00004128 3C5C                    	CMP	AL,'\'
 24075 0000412A 740A                    	JZ	short _GetDone
 24076 0000412C 3C3F                    	CMP	AL,'?'
 24077 0000412E 7503                    	JNZ	short StoExt
 24078 00004130 80CC01                  	OR	AH,1
 24079                                  StoExt: 
 24080 00004133 AA                      	STOSB
 24081 00004134 EBED                    	JMP	short GetExt
 24082                                  _GetDone:
 24083 00004136 4E                      	DEC	SI
 24084 00004137 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24085 00004139 80C980                  	OR	CL,80H
 24086 0000413C 5F                      	POP	DI			; Start of this element
 24087 0000413D 07                      	POP	ES			; Restore ES:BP
 24088 0000413E 39FE                    	CMP	SI,DI
 24089 00004140 7503                    	JNZ	short check_device
 24090 00004142 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24091                                  check_device:
 24092 00004145 56                      	PUSH	SI			; Start of next element
 24093 00004146 8A04                    	MOV	AL,[SI]
 24094 00004148 08C0                    	OR	AL,AL
 24095 0000414A 7508                    	JNZ	short NOT_LAST
 24096                                  
 24097                                  ; for last element of the path switch to the correct search attributes
 24098                                  
 24099 0000414C 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24100 00004150 883E[6B05]              	MOV	[ATTRIB],BH
 24101                                  
 24102                                  NOT_LAST:
 24103                                  
 24104                                  ; check name1 to see if we have a device...
 24105                                  
 24106 00004154 06                      	PUSH	ES			; Save ES:BP
 24107                                  
 24108                                  ;hkn; SS is DOSDATA
 24109                                  	;context ES
 24110 00004155 16                      	push	ss
 24111 00004156 07                      	pop	es
 24112 00004157 E82E01                  	call	DEVNAME 		; blast BX
 24113 0000415A 07                      	POP	ES			; Restore ES:BP
 24114 0000415B 720B                    	JC	short FindFile		; Not a device
 24115 0000415D 08C0                    	OR	AL,AL			; Test next char again
 24116 0000415F 7403                    	JZ	short GO_BDEV
 24117 00004161 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24118                                  
 24119                                  GO_BDEV:
 24120 00004164 5E                      	POP	SI			; Points to NUL at end of path
 24121 00004165 E986FE                  	JMP	Build_devJ
 24122                                  
 24123                                  FindFile:
 24124                                  ;;;; 7/28/86
 24125 00004168 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24126 0000416D 7505                    	JNZ	short NOE5		; no
 24127 0000416F C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24128                                  NOE5:
 24129                                  ;;;; 7/28/86
 24130 00004174 57                      	PUSH	DI			; Start of this element
 24131 00004175 06                      	PUSH	ES			; Save ES:BP
 24132 00004176 51                      	PUSH	CX			; CL return from NameTrans
 24133                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24134                                  
 24135 00004177 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24136 0000417A 7303                    	JNC	short DIR_FOUND		; found dir entry
 24137                                  
 24138                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24139 0000417C E8A1FC                  	call	FINDENTRY
 24140                                  DIR_FOUND:
 24141 0000417F 59                      	POP	CX
 24142 00004180 07                      	POP	ES
 24143 00004181 5F                      	POP	DI
 24144 00004182 7303                    	JNC	short LOAD_BUF
 24145 00004184 E9D100                  	JMP	BADPATHPOP
 24146                                  
 24147                                  LOAD_BUF:
 24148 00004187 C53E[E205]              	LDS	DI,[CURBUF]
 24149                                  	;test	byte [bx+0Bh],10h
 24150 0000418B F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24151 0000418F 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24152 00004191 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24153                                  
 24154                                  ; if we are not setting the directory, then check for end of string
 24155                                  
 24156                                  GO_NEXT:
 24157                                  ;hkn; SS override
 24158 00004194 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24159 0000419A 7423                    	JZ	short SetDir
 24160 0000419C 89FA                    	MOV	DX,DI			; Save pointer to entry
 24161 0000419E 8CD9                    	MOV	CX,DS
 24162                                  
 24163                                  ;hkn; SS is DOSDATA
 24164                                  	;context DS
 24165 000041A0 16                      	push	ss
 24166 000041A1 1F                      	pop	ds
 24167 000041A2 5F                      	POP	DI			; Start of next element
 24168                                  	; 19/05/2019 - Retro DOS v4.0
 24169                                  	; MSDOS 6.0
 24170 000041A3 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24171 000041A8 740B                    	JZ	short _nofast			; the FastOpen
 24172 000041AA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24173 000041AF 7404                    	JZ	short _nofast			; no
 24174 000041B1 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24175                                  _nofast:
 24176 000041B5 803D00                  	CMP	BYTE [DI],0
 24177                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24178                                  	;;JMP	_SETRET  ; retn		; Got it
 24179                                  	;retn	; 05/09/2018
 24180                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24181                                  	;jmp	_SETRET
 24182                                  	; 16/12/2022
 24183 000041B8 7421                    	jz	short _SETRET
 24184                                  
 24185                                  NEXT_ONE:
 24186 000041BA 57                      	PUSH	DI			; Put start of next element back on stack
 24187 000041BB 89D7                    	MOV	DI,DX
 24188 000041BD 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24189                                  SetDir:
 24190 000041BF 8B14                    	MOV	DX,[SI] 		; Dir_first
 24191                                  
 24192                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24193 000041C1 1E                      	PUSH	DS		      ; save [curbuf+2]
 24194                                  ;hkn; SS is DOSDATA
 24195 000041C2 16                      	push	ss
 24196 000041C3 1F                      	pop	ds		      ; set DS Dosgroup
 24197                                  	;test	byte [FastOpenFlg],2
 24198 000041C4 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24199 000041C9 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24200 000041CB 89D3                    	MOV	BX,DX		      ; not found
 24201 000041CD 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24202 000041D1 50                      	PUSH	AX		      ; save device id (AH)
 24203 000041D2 E895FD                  	call	SETDIRSRCH
 24204 000041D5 58                      	POP	AX		      ; restore device id (AH)
 24205 000041D6 83C402                  	ADD	SP,2		      ; pop ds in stack
 24206 000041D9 EB3E                    	JMP	short FAST_OPEN_SKIP
 24207                                  
 24208                                  	; 16/12/2022
 24209                                  _SETRET:
 24210 000041DB C3                      	retn
 24211                                  
 24212                                  DO_NORMAL:
 24213 000041DC 1F                      	POP	DS			; DS = [curbuf + 2]
 24214                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24215                                  
 24216 000041DD 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24217 000041DF 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24218 000041E1 53                      	PUSH	BX
 24219 000041E2 50                      	PUSH	AX
 24220 000041E3 56                      	PUSH	SI
 24221 000041E4 51                      	PUSH	CX
 24222                                  	;push	word [di+6]
 24223 000041E5 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24224                                  	; 19/05/2019
 24225                                  	; MSDOS 6.0
 24226                                  	;push	word [di+8]
 24227 000041E8 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24228 000041EB 89D3                    	MOV	BX,DX
 24229                                  
 24230                                  ;hkn; SS is DOSDATA
 24231                                  	;context DS
 24232 000041ED 16                      	push	ss
 24233 000041EE 1F                      	pop	ds
 24234                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24235 000041EF E878FD                  	call	SETDIRSRCH		; the entry sector buffer
 24236                                  	; 19/05/2019
 24237                                  	; MSDOS 6.0
 24238 000041F2 8F06[0706]              	POP	word [HIGH_SECTOR]
 24239 000041F6 5A                      	POP	DX
 24240 000041F7 720A                    	JC	short SKIP_GETB
 24241                                  	;mov	byte [ALLOWED],18h
 24242 000041F9 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24243 000041FE 30C0                    	XOR	AL,AL
 24244                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24245 00004200 E83E18                  	call	GETBUFFR
 24246                                  SKIP_GETB:
 24247 00004203 59                      	POP	CX
 24248 00004204 5E                      	POP	SI
 24249 00004205 58                      	POP	AX
 24250 00004206 5B                      	POP	BX
 24251 00004207 7305                    	JNC	short SET_THE_BUF
 24252 00004209 5F                      	POP	DI			; Start of next element
 24253 0000420A 89FE                    	MOV	SI,DI			; Point with SI
 24254 0000420C EB21                    	JMP	SHORT _BADPATH
 24255                                  
 24256                                  SET_THE_BUF:
 24257 0000420E E859F5                  	call	SET_BUF_AS_DIR
 24258 00004211 8B3E[E205]              	MOV	DI,[CURBUF]
 24259 00004215 01FE                    	ADD	SI,DI			; Get the offsets back
 24260 00004217 01FB                    	ADD	BX,DI
 24261                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24262                                  FAST_OPEN_SKIP:
 24263 00004219 5F                      	POP	DI			; Start of next element
 24264 0000421A E89D02                  	CALL	InsertPath		; insert dir entry info
 24265                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24266 0000421D 8A05                    	MOV	AL,[DI]
 24267 0000421F 08C0                    	OR	AL,AL
 24268 00004221 74B8                    	JZ	short _SETRET		; At end
 24269 00004223 47                      	INC	DI			; Skip over "/"
 24270 00004224 89FE                    	MOV	SI,DI			; Point with SI
 24271 00004226 E8520F                  	call	PATHCHRCMP
 24272 00004229 7503                    	JNZ	short find_bad_name	; oops
 24273 0000422B E9A9FE                  	JMP	FINDPATH		; Next element
 24274                                  
 24275                                  find_bad_name:
 24276 0000422E 4E                      	DEC	SI			; Undo above INC to get failure point
 24277                                  _BADPATH:
 24278 0000422F 30C9                    	XOR	CL,CL			; Set zero
 24279 00004231 EB2C                    	JMP	SHORT BADPRET
 24280                                  
 24281                                  FILEINPATH:
 24282 00004233 5F                      	POP	DI			; Start of next element
 24283                                  
 24284                                  ;hkn; SS is DOSDATA
 24285                                  	;context DS			; Got to from one place with DS gone
 24286 00004234 16                      	push	ss
 24287 00004235 1F                      	pop	ds
 24288                                  
 24289                                  ; DOS 3.3 FastOpen
 24290                                  	;test	byte [FastOpenFlg],1
 24291 00004236 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24292 0000423B 740B                    	JZ	short NO_FAST		; device info to fastopen
 24293                                  	;test	byte [FastOpenFlg],2
 24294 0000423D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24295 00004242 7404                    	JZ	short NO_FAST
 24296 00004244 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24297                                  					 ; success
 24298                                  NO_FAST:
 24299                                  ; DOS 3.3 FastOpen
 24300 00004248 8A05                    	MOV	AL,[DI]
 24301 0000424A 08C0                    	OR	AL,AL
 24302 0000424C 7404                    	JZ	short INCRET
 24303 0000424E 89FE                    	MOV	SI,DI			; Path too long
 24304 00004250 EB0D                    	JMP	SHORT BADPRET
 24305                                  
 24306                                  INCRET:
 24307                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24308                                  
 24309 00004252 E86502                  	CALL   InsertPath		; insert dir entry info
 24310                                  
 24311                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24312 00004255 FEC0                    	INC	AL			; Reset zero
 24313                                  	; 16/12/2022	
 24314                                  ;_SETRET:
 24315 00004257 C3                      	retn
 24316                                  
 24317                                  BADPATHPOP:
 24318 00004258 5E                      	POP	SI			; Start of next element
 24319 00004259 8A04                    	MOV	AL,[SI]
 24320 0000425B 89FE                    	MOV	SI,DI			; Start of bad element
 24321 0000425D 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24322                                  BADPRET:
 24323 0000425F A0[6D05]                	MOV	AL,[SATTRIB]
 24324 00004262 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24325 00004265 F9                      	STC
 24326 00004266 C3                      	retn
 24327                                  
 24328                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24329                                  ;---------------------------------------------------------------------------
 24330                                  ;
 24331                                  ; Procedure Name : STARTSRCH
 24332                                  ;
 24333                                  ; Inputs:
 24334                                  ;	[THISDPB] Set
 24335                                  ; Function:
 24336                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24337                                  ; Outputs:
 24338                                  ;	ES:BP = Drive parameters
 24339                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24340                                  ; Destroys ES,BP,AX
 24341                                  ;--------------------------------------------------------------------------
 24342                                  
 24343                                  STARTSRCH:
 24344 00004267 C42E[8A05]              	LES	BP,[THISDPB]
 24345 0000426B 31C0                    	XOR	AX,AX
 24346 0000426D A3[4803]                	MOV	[LASTENT],AX
 24347 00004270 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24348 00004273 48                      	DEC	AX
 24349 00004274 A3[D805]                	MOV	[ENTFREE],AX
 24350 00004277 A3[DA05]                	MOV	[ENTLAST],AX
 24351 0000427A C3                      	retn
 24352                                  
 24353                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24354                                  ;----------------------------------------------------------------------------
 24355                                  ; Procedure Name : MatchAttributes
 24356                                  ;
 24357                                  ; Input:    [Attrib] = attribute to search for
 24358                                  ;	    CH = found attribute
 24359                                  ; Output:   JZ <match>
 24360                                  ;	    JNZ <nomatch>
 24361                                  ; Registers modified: noneski
 24362                                  ;----------------------------------------------------------------------------
 24363                                  
 24364                                  MatchAttributes:
 24365 0000427B 50                      	PUSH	AX
 24366                                  
 24367                                  ;hkn; SS override
 24368 0000427C 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24369 00004280 F6D0                    	NOT	AL			; AL <- SearchSet'
 24370 00004282 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24371                                  	;and	al,16h
 24372 00004284 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24373                                  ;
 24374                                  ; the result is non-zero if an attribute is not in the search set
 24375                                  ; and in the found set and in the important set. This means that we do not
 24376                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24377                                  ;
 24378 00004286 58                      	POP	AX
 24379 00004287 C3                      	retn
 24380                                  
 24381                                  ; 19/05/2019 - Retro DOS v4.0
 24382                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24383                                  
 24384                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24385                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24386                                  
 24387                                  ;Break <DevName - Look for name of device>
 24388                                  ;---------------------------------------------------------------------------
 24389                                  ;
 24390                                  ; Procedure Name : DevName
 24391                                  ;
 24392                                  ; Inputs:
 24393                                  ;	DS,ES:DOSDATA
 24394                                  ;	Filename in NAME1
 24395                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24396                                  ; Function:
 24397                                  ;	Determine if file is in list of I/O drivers
 24398                                  ; Outputs:
 24399                                  ;	Carry set if not a device
 24400                                  ;	ELSE
 24401                                  ;	Zero flag set
 24402                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24403                                  ;	     bits 0-4 set from low byte of attribute word
 24404                                  ;	DEVPT = DWORD pointer to Device header of device
 24405                                  ; BX destroyed, others preserved
 24406                                  ;---------------------------------------------------------------------------
 24407                                  
 24408                                  DEVNAME:
 24409                                  	; 28/07/2018 - Retro DOS v3.0
 24410                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24411                                  
 24412 00004288 56                      	PUSH	SI
 24413 00004289 57                      	PUSH	DI
 24414 0000428A 51                      	PUSH	CX
 24415 0000428B 50                      	PUSH	AX
 24416                                  
 24417                                  ; E5 special code
 24418 0000428C FF36[4B05]              	PUSH	WORD [NAME1]
 24419 00004290 803E[4B05]05            	CMP	byte [NAME1],5
 24420 00004295 7505                    	JNZ	short NOKTR
 24421 00004297 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24422                                  NOKTR:
 24423                                  	;test	byte [ATTRIB],8
 24424 0000429C F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24425                                  					; If looking for VOL id don't find devs
 24426 000042A1 7521                    	JNZ	short RET31
 24427                                  
 24428                                  ;hkn; NULDEV is in DOSDATA
 24429 000042A3 BE[4800]                	MOV	SI,NULDEV
 24430                                  LOOKIO:
 24431                                  	; 21/11/2022
 24432                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24433                                  	; 17/12/2022
 24434                                  	;test	byte [si+5],80h
 24435 000042A6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24436                                  	;;test	word [si+4],8000h
 24437                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24438 000042AA 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24439 000042AC 89F0                    	MOV	AX,SI
 24440                                  	;add	si,10
 24441 000042AE 83C60A                  	ADD	SI,SYSDEV.NAME
 24442                                  
 24443                                  ;hkn; NAME1 is in DOSDATA
 24444 000042B1 BF[4B05]                	MOV	DI,NAME1
 24445 000042B4 B90400                  	MOV	CX,4			; All devices are 8 letters
 24446 000042B7 F3A7                    	REPE	CMPSW			; Check for name in list
 24447 000042B9 89C6                    	MOV	SI,AX
 24448 000042BB 7415                    	JZ	short IOCHK		; Found it?
 24449                                  SKIPDEV:
 24450 000042BD C534                    	LDS	SI,[SI]			; Get address of next device
 24451 000042BF 83FEFF                  	CMP	SI,-1			; At end of list?
 24452 000042C2 75E2                    	JNZ	short LOOKIO
 24453                                  RET31:	
 24454 000042C4 F9                      	STC				; Not found
 24455                                  RETNV:	
 24456 000042C5 8CD1                    	MOV	CX,SS
 24457 000042C7 8ED9                    	MOV	DS,CX
 24458                                  
 24459 000042C9 8F06[4B05]              	POP	WORD [NAME1]
 24460 000042CD 58                      	POP	AX
 24461 000042CE 59                      	POP	CX
 24462 000042CF 5F                      	POP	DI
 24463 000042D0 5E                      	POP	SI
 24464 000042D1 C3                      	RETN
 24465                                  
 24466                                  IOCHK:
 24467                                  ;hkn; SS override for DEVPT
 24468 000042D2 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24469                                  	;mov	bh,[si+4]
 24470 000042D7 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24471 000042DA 80CFC0                  	OR	BH,0C0h
 24472 000042DD 80E7DF                  	and	bh,0DFh
 24473                                  	;AND	BH,~(020h)		; Clears Carry
 24474 000042E0 368936[9A05]            	MOV	[SS:DEVPT],SI
 24475 000042E5 EBDE                    	JMP	short RETNV
 24476                                  
 24477                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24478                                  ;---------------------------------------------------------------------------
 24479                                  ; Procedure Name : Build_device_ent
 24480                                  ;
 24481                                  ; Inputs:
 24482                                  ;	[NAME1] has name
 24483                                  ;	BH is attribute field (supplied by DEVNAME)
 24484                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24485                                  ; Function:
 24486                                  ;	Build a directory entry for a device at DEVFCB
 24487                                  ; Outputs:
 24488                                  ;	BX points to DEVFCB
 24489                                  ;	SI points to dir_first field
 24490                                  ;	AH = input BH
 24491                                  ;	AL = 0
 24492                                  ;	dir_first = DEVPT
 24493                                  ;	Zero Set, Carry Clear
 24494                                  ; DS,ES,BP preserved, others destroyed
 24495                                  ;--------------------------------------------------------------------------
 24496                                  
 24497                                  Build_device_ent:
 24498 000042E7 B82020                  	MOV	AX,"  " ; 2020h
 24499                                  
 24500                                  ;hkn; DEVFCB is in DOSDATA
 24501 000042EA BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24502                                  
 24503                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24504                                  
 24505 000042ED AB                      	STOSW
 24506 000042EE AA                      	STOSB				; Blank out extent field
 24507                                  	;mov	al,40h
 24508 000042EF B040                    	MOV	AL,attr_device
 24509                                  
 24510                                  ;	Fill Dir_attr
 24511                                  
 24512 000042F1 AA                      	STOSB				; Set attribute field
 24513 000042F2 31C0                    	XOR	AX,AX
 24514 000042F4 B90A00                  	MOV	CX,10
 24515                                  
 24516                                  ; Fill dir_pad
 24517                                  
 24518 000042F7 F3AB                    	REP	STOSW			; Fill rest with zeros
 24519 000042F9 E813C8                  	call	DATE16
 24520                                  
 24521                                  ;hkn; DEVFCB is in DOSDATA
 24522 000042FC BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24523 000042FF 92                      	XCHG	AX,DX
 24524                                  
 24525                                  ; Fill dir_time
 24526                                  
 24527 00004300 AB                      	STOSW
 24528 00004301 92                      	XCHG	AX,DX
 24529                                  
 24530                                  ; Fill dir_date
 24531                                  
 24532 00004302 AB                      	STOSW
 24533 00004303 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24534 00004305 A1[9A05]                	MOV	AX,[DEVPT]
 24535                                  
 24536                                  ; Fill dir_first
 24537                                  
 24538 00004308 AB                      	STOSW				; Dir_first points to device
 24539 00004309 A1[9C05]                	MOV	AX,[DEVPT+2]
 24540                                  ;
 24541                                  ; Fill dir_size_l
 24542                                  ;
 24543 0000430C AB                      	STOSW
 24544 0000430D 88FC                    	MOV	AH,BH			; Put device atts in AH
 24545                                  
 24546                                  ;hkn; DEVFCB is in DOSDATA
 24547 0000430F BB[4B05]                	MOV	BX,DEVFCB
 24548 00004312 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24549 00004314 C3                      	retn
 24550                                  
 24551                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24552                                  ;----------------------------------------------------------------------------
 24553                                  ;
 24554                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24555                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24556                                  ;   If invalid, reset original CDS to root.
 24557                                  ;
 24558                                  ;   Inputs:	ThisCDS points to CDS of interest
 24559                                  ;		SS:DI points to temp buffer
 24560                                  ;   Outputs:	The current directory string is validated on the appropriate
 24561                                  ;		    drive
 24562                                  ;		ThisDPB changed
 24563                                  ;		ES:DI point to CDS
 24564                                  ;		Carry set if error (currently user FAILed to I 24)
 24565                                  ;   Registers modified: all
 24566                                  ;----------------------------------------------------------------------------
 24567                                  
 24568                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24569                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24570                                  
 24571                                  ValidateCDS:
 24572                                  	; 19/05/2019 - Retro DOS v4.0
 24573                                  	; 28/07/2018 - Retro DOS v3.0
 24574                                  
 24575                                     %define  Temp	[bp-2]	; word
 24576                                     %define  SaveCDS	[bp-6]	; dword
 24577                                     %define  SaveCDSL	[bp-6]	; word
 24578                                     %define  SaveCDSH	[bp-4]	; word
 24579                                  
 24580                                  	;Enter
 24581 00004315 55                      	push	bp
 24582 00004316 89E5                    	mov	bp,sp
 24583 00004318 83EC06                  	sub	sp,6
 24584                                  
 24585 0000431B 897EFE                  	MOV	Temp,DI
 24586                                  
 24587                                  ;hkn; SS override
 24588 0000431E 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24589 00004323 8976FA                  	MOV	SaveCDSL,SI
 24590 00004326 8C5EFC                  	MOV	SaveCDSH,DS
 24591                                  	;EnterCrit critDisk
 24592 00004329 E82CD0                  	call	ECritDisk
 24593                                  	; 21/11/2022
 24594                                  	;test	byte [SI+curdir.flags+1],80h
 24595                                  	;test	word [si+67],8000h
 24596                                  	; 17/12/2022
 24597                                  	;test	byte [SI+68],80h
 24598 0000432C F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24599                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24600 00004330 7403                    	JZ	short _DoSplice
 24601 00004332 E99200                  	JMP	FatFail
 24602                                  _DoSplice:
 24603 00004335 30D2                    	XOR	DL,DL
 24604 00004337 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24605                                  
 24606                                  ;hkn; SS is DOSDATA
 24607                                  	;Context ES
 24608 0000433C 16                      	push	ss
 24609 0000433D 07                      	pop	es
 24610                                  	;Invoke	FStrcpy
 24611 0000433E E8E9CE                  	call	FStrCpy
 24612 00004341 8B76FE                  	MOV	SI,Temp
 24613                                  
 24614                                  ;hkn; SS is DOSDATA
 24615                                  	;Context DS
 24616 00004344 16                      	push	ss
 24617 00004345 1F                      	pop	ds	
 24618                                  	;Invoke	Splice
 24619 00004346 E8A92B                  	call	Splice
 24620                                  
 24621                                   ;hkn; SS is DOSDATA
 24622                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24623 00004349 16                      	push	ss
 24624 0000434A 1F                      	pop	ds
 24625 0000434B 8816[4C03]              	MOV	[NoSetDir],DL
 24626 0000434F C43E[A205]              	LES	DI,[THISCDS]
 24627                                  	;SAVE	<BP>
 24628 00004353 55                      	push	bp
 24629                                  	;Invoke	FATREAD_CDS
 24630 00004354 E87A14                  	call	FATREAD_CDS	
 24631                                  	;RESTORE <BP>
 24632 00004357 5D                      	pop	bp
 24633 00004358 726D                    	JC	short FatFail
 24634                                  
 24635 0000435A C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24636                                  	;cmp	word [si+73],-1
 24637 0000435E 837C49FF                	CMP	word [SI+curdir.ID],-1
 24638 00004362 7555                    	JNZ	short RestoreCDS
 24639                                  
 24640                                  ;hkn; SS is DOSDATA
 24641                                  	;Context ES
 24642 00004364 16                      	push	ss
 24643 00004365 07                      	pop	es
 24644                                  
 24645                                  ;hkn; SS override
 24646                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24647 00004366 36FF36[B205]            	push	word [SS:WFP_START]
 24648                                  	;cmp	si,[bp-6]
 24649 0000436B 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24650 0000436E 750B                    	JNZ	short DoChdir
 24651                                  	;mov	di,[bp-2]
 24652 00004370 8B7EFE                  	MOV	DI,Temp
 24653                                  
 24654                                  ;hkn; SS override
 24655 00004373 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24656                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24657 00004378 E8AFCE                  	call	FStrCpy
 24658                                  DoChdir:
 24659                                  ;hkn; SS is DOSDATA
 24660                                  	;Context DS
 24661 0000437B 16                      	push	ss
 24662 0000437C 1F                      	pop	ds
 24663                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24664 0000437D FF36[6D05]              	push	word [SATTRIB]
 24665 00004381 55                      	push	bp
 24666                                  	;Invoke	DOS_ChDir
 24667 00004382 E8BDEE                  	call	DOS_CHDIR
 24668                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24669 00004385 5D                      	pop	bp
 24670 00004386 5B                      	pop	bx
 24671 00004387 8F06[B205]              	pop	word [WFP_START]
 24672 0000438B 881E[6D05]              	MOV	[SATTRIB],BL
 24673 0000438F C576FA                  	LDS	SI,SaveCDS
 24674 00004392 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24675                                  
 24676                                  ;hkn; SS override for THISCDS
 24677 00004394 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24678 00004399 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24679 0000439E 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24680 000043A0 884C03                  	MOV	[SI+3],CL		;	    }
 24681                                  SetCluster:
 24682                                  	;mov	word [si+73],0FFFFh
 24683 000043A3 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24684 000043A8 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24685                                  	; 21/11/2022
 24686                                  	;test	byte [si+curdir.flags+1],20h
 24687                                  	; 19/05/2019
 24688                                  	; MSDOS 6.0
 24689                                  	; 17/12/2022
 24690                                  	;test	byte [si+68],20h
 24691 000043AD F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24692                                  	;;test	word [si+67],2000h
 24693                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24694 000043B1 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24695 000043B3 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24696                                  _setdirclus:
 24697                                  	;mov	[si+73],cx
 24698 000043B6 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24699                                  RestoreCDS:
 24700 000043B9 C47EFA                  	LES	DI,SaveCDS
 24701 000043BC 36893E[A205]            	MOV	[SS:THISCDS],DI
 24702 000043C1 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24703 000043C6 F8                      	CLC
 24704                                  FatFail:
 24705                                  	;LeaveCrit critDisk
 24706 000043C7 E8A9CF                  	call	LCritDisk
 24707                                  
 24708                                  	;les	di,[bp-6]
 24709 000043CA C47EFA                  	LES	DI,SaveCDS
 24710                                  	;Leave
 24711 000043CD 89EC                    	mov	sp,bp
 24712 000043CF 5D                      	pop	bp
 24713 000043D0 C3                      	retn
 24714                                  
 24715                                  ; 28/07/2018 - Retro DOS v3.0
 24716                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24717                                  
 24718                                  ;Break	<CheckThisDevice - Check for being a device>
 24719                                  ;---------------------------------------------------------------------------
 24720                                  ;
 24721                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24722                                  ;   device specified. We will return carry if there is a device present. 
 24723                                  ;   The forms of devices we will recognize are:
 24724                                  ;
 24725                                  ;	[path]device
 24726                                  ;
 24727                                  ;   Note that the drive letter has *already* been removed. All other forms
 24728                                  ;   are not considered to be devices. If such a device is found we change
 24729                                  ;   the source pointer to point to the device component.
 24730                                  ;
 24731                                  ;   Inputs:	ES is DOSDATA
 24732                                  ;		DS:SI contains name
 24733                                  ;   Outputs:	ES is DOSDATA
 24734                                  ;		DS:SI point to name or device
 24735                                  ;		Carry flag set if device was found
 24736                                  ;		Carry flag reset otherwise
 24737                                  ;   Registers Modified: all except ES:DI, DS
 24738                                  ;----------------------------------------------------------------------------
 24739                                  
 24740                                  CheckThisDevice:
 24741 000043D1 57                      	push	di
 24742 000043D2 56                      	push	si
 24743 000043D3 89F7                    	MOV	DI,SI
 24744                                  
 24745                                  ; Check for presence of \dev\ (Dam multiplan!)
 24746                                  
 24747 000043D5 8A04                    	MOV	AL,[SI]
 24748 000043D7 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24749 000043DA 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24750 000043DC 46                      	INC	SI			; simulate LODSB
 24751                                  
 24752                                  ; We have the leading path separator. Look for DEV part.
 24753                                  
 24754 000043DD AD                      	LODSW
 24755 000043DE 0D2020                  	OR	AX,2020h
 24756 000043E1 3D6465                  	cmp	ax,"de"
 24757                                  	;CMP	AX,"e"<< 8 + "d"
 24758 000043E4 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24759 000043E6 AC                      	LODSB
 24760 000043E7 0C20                    	OR	AL,20h
 24761 000043E9 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24762 000043EB 7526                    	JNZ	short NotDevice
 24763 000043ED AC                      	LODSB
 24764 000043EE E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24765 000043F1 7520                    	JNZ	short NotDevice		; no. go for it.
 24766                                  
 24767                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24768                                  ; SI and DevName may destroy DS.
 24769                                  
 24770                                  ParseDev:
 24771 000043F3 1E                      	push	ds
 24772 000043F4 56                      	push	si			; preserve the source pointer
 24773 000043F5 E8C10C                  	call	NameTrans		; advance DS:SI
 24774 000043F8 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24775 000043FB F9                      	STC				; simulate a Carry return from DevName
 24776 000043FC 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24777                                  
 24778                                  ;hkn; SS is DOSDATA
 24779 000043FE 16                      	push	ss
 24780 000043FF 1F                      	pop	ds
 24781                                  
 24782                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24783                                  ;
 24784                                  ; SR;
 24785                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24786                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24787                                  ; old call set the volume attribute bit.
 24788                                  
 24789 00004400 A0[6D05]                	mov	al,[SATTRIB]
 24790 00004403 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24791                                  
 24792                                  ; M026 - end
 24793                                  
 24794 00004406 E87FFE                  	call	DEVNAME
 24795                                  
 24796                                  SkipSearch:
 24797 00004409 5E                      	pop	si
 24798 0000440A 1F                      	pop	ds
 24799                                  
 24800                                  ; SI points to the beginning of the potential device. If we have a device
 24801                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24802                                  ; original value. At this point Carry set indicates FILE.
 24803                                  
 24804                                  CheckReturn:
 24805 0000440B 5F                      	pop	di			; get original SI
 24806 0000440C 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24807 0000440E 89FE                    	MOV	SI,DI
 24808                                  Check_Done:
 24809 00004410 5F                      	pop	di
 24810 00004411 F5                      	CMC				; invert carry. Carry => device
 24811 00004412 C3                      	retn
 24812                                  NotDevice:
 24813 00004413 F9                      	STC
 24814 00004414 EBF5                    	JMP	short CheckReturn
 24815                                  
 24816                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24817                                  ;-----------------------------------------------------------------------------
 24818                                  ;
 24819                                  ; Procedure Name : LookupPath
 24820                                  ;
 24821                                  ; Output  DS:SI -> path name,
 24822                                  ;	  ES:DI -> dir entry info buffer
 24823                                  ;	  ES:CX -> extended dir info buffer
 24824                                  ;
 24825                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24826                                  ;			     FastOpen, DS:SI points to char just one after
 24827                                  ;			     the last char of path name which is fully or
 24828                                  ;			     partially found in FastOPen
 24829                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24830                                  ;
 24831                                  ;----------------------------------------------------------------------------
 24832                                  
 24833                                  LookupPath:
 24834                                  ;	PUSH	AX
 24835                                  
 24836                                  ;hkn; SS override
 24837                                  	;test	byte [ss:FastOpenFlg],1
 24838 00004416 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24839 0000441C 7503                    	JNZ	short FASTINST			    ; and this routine is
 24840                                  NOLOOK:
 24841 0000441E E99700                  	JMP	NOLOOKUP			    ; executed once
 24842                                  
 24843                                  FASTINST:
 24844                                  ;hkn; SS override
 24845                                  	;test	byte [ss:FastOpenFlg],8
 24846 00004421 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24847 00004427 75F5                    	JNZ	short NOLOOK			    ; yes
 24848                                  
 24849 00004429 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24850                                  
 24851                                  ;hkn; SS override
 24852 0000442C 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24853 00004431 BF[460D]                	MOV	DI,Dir_Info_Buff
 24854 00004434 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24855 00004437 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24856 00004439 1E                      	PUSH	DS
 24857 0000443A 07                      	POP	ES
 24858                                  
 24859                                  ;hkn; SS override
 24860                                  	;call	far [bx+2]
 24861 0000443B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24862 0000443E 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24863                                  
 24864 00004440 8D5CFE                  	LEA	BX,[SI-2]
 24865                                  
 24866                                  ;hkn; SS override
 24867 00004443 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24868 00004448 745D                    	JZ	short NOTFOUND			    ; no
 24869                                  
 24870                                  	; 19/05/2019 - Retro DOS v4.0
 24871                                  
 24872                                  	; MSDOS 6.0				    ; fully or partially found
 24873 0000444A 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24874 0000444D 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24875 0000444F 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24876                                  
 24877                                  ;hkn; SS override for attrib/sattrib
 24878 00004450 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24879 00004455 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24880 0000445A 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24881                                  	;mov	ch,[es:di+0Bh]
 24882 0000445F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24883 00004463 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24884                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24885 00004466 59                      	POP	CX				    ;AN000;FO.;
 24886 00004467 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24887                                  parfnd:
 24888                                  
 24889                                  ;hkn; SS override
 24890 00004469 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24891 0000446E 89CB                    	MOV	BX,CX
 24892                                  	; MSDOS 6.0
 24893                                  	;mov	ax,[bx+7]
 24894 00004470 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24895                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24896 00004473 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24897 00004477 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24898 0000447A 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24899                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24900                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24901                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24902 0000447E 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24903 00004481 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24904                                  
 24905 00004485 06                      	PUSH	ES				    ; save ES
 24906                                  ;hkn; SS override
 24907 00004486 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24908 0000448B 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24909                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24910 0000448E 07                      	POP	ES				    ; pop ES
 24911                                  ;SR;
 24912                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24913                                  ;indicate it is not a root dir
 24914                                  
 24915 0000448F 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24916 00004496 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24917 0000449B 89FB                    	MOV	BX,DI				    ; start of entry
 24918                                  	;lea	si,[di+1Ah]
 24919 0000449D 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24920                                  						    ; dir_first field in the
 24921                                  						    ; dir entry
 24922                                  ;hkn; SS override for FastOpenFlg
 24923                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 24924 000044A0 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24925                                  ;	POP	AX
 24926 000044A6 C3                      	RETN
 24927                                  NOTFOUND:
 24928 000044A7 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24929 000044AA 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24930 000044AC 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24931                                  Partial_Success:
 24932                                  	;and	byte [SS:FastOpenFlg],0FBh
 24933 000044B2 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24934                                  NOLOOKUP:
 24935                                  ;	POP	AX
 24936 000044B8 F9                      	STC
 24937 000044B9 C3                      	RETN
 24938                                  
 24939                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24940                                  ;-----------------------------------------------------------------------------
 24941                                  ;
 24942                                  ; Procedure Name : InsertPath
 24943                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24944                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24945                                  ;	  DS = DOSDATA
 24946                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24947                                  ;
 24948                                  ;-----------------------------------------------------------------------------
 24949                                  
 24950                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24951                                  
 24952                                  InsertPath:
 24953 000044BA 9C                      	PUSHF
 24954                                  ;hkn; SS override for FastOpenFlag
 24955                                  	;test	byte [SS:FastOpenFlg], 1
 24956 000044BB 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24957 000044C1 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24958                                  	;test	byte [ss:FastOpenFlg],2
 24959 000044C3 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24960 000044C9 740D                    	JZ	short INSERT_DIR_INFO		; no
 24961                                  	;and	byte [ss:FastOpenFlg],0FDh
 24962 000044CB 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24963 000044D1 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24964 000044D6 EB5E                    	JMP	short GET_NEXT2
 24965                                  INSERT_DIR_INFO:				; save registers
 24966 000044D8 1E                      	PUSH	DS
 24967 000044D9 06                      	PUSH	ES
 24968 000044DA 53                      	PUSH	BX
 24969 000044DB 56                      	PUSH	SI
 24970 000044DC 57                      	PUSH	DI
 24971 000044DD 51                      	PUSH	CX
 24972 000044DE 50                      	PUSH	AX
 24973                                  
 24974                                  ;hkn; SS override
 24975 000044DF 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24976 000044E4 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24977                                  	;mov	ax,[di+6]
 24978 000044E7 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 24979                                  	; MSDOS 6.0
 24980                                  	;mov	[ss:si+1],ax
 24981 000044EA 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 24982                                  	; 19/05/2019 - Retro DOS v4.0
 24983 000044EE 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24984                                  
 24985                                  ;hkn; SS is DOSDATA
 24986 000044F1 16                      	push	ss
 24987 000044F2 1F                      	pop	ds
 24988                                  	; MSDOS 3.3	
 24989                                  	;;mov	[si+1],ax	
 24990                                  	;MOV	[SI+FEI.dirsec],AX
 24991                                  	; MSDOS 6.0
 24992                                  	;mov	[si+3],ax
 24993 000044F3 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 24994                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24995 000044F6 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 24996                                  	;;mov	[si+5],ax ; MSDOS 6.0
 24997                                  	;mov	[si+3],ax ; MSDOS 3.3
 24998 000044F9 894405                  	MOV	[SI+FEI.clusnum],AX
 24999                                  	; MSDOS 6.0
 25000 000044FC A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25001                                  	;mov	[si+7],ax
 25002 000044FF 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25003 00004502 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25004                                  	;mov	[si+9],ax
 25005 00004505 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25006                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25007 00004508 89D8                    	MOV	AX,BX
 25008                                  	;;add	di,16  ; MSDOS 3.3
 25009                                  	;add	di,20  ; MSDOS 6.0
 25010 0000450A 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25011 0000450D 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25012                                  	;mov	cl,32
 25013 0000450F B120                    	MOV	CL,dir_entry.size
 25014 00004511 F6F1                    	DIV	CL
 25015                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25016 00004513 8804                    	mov	[si],al
 25017                                  
 25018 00004515 1E                      	PUSH	DS
 25019 00004516 07                      	POP	ES
 25020                                  
 25021 00004517 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25022 0000451B 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25023                                  	;cmp	word [di+1Ah],0
 25024 0000451D 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25025                                  					; never insert info when file is empty
 25026 00004521 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25027                                  
 25028 00004523 56                      	PUSH	SI			; ES:BX -> extended info
 25029 00004524 5B                      	POP	BX
 25030                                  
 25031                                  	;mov	al,2
 25032 00004525 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25033 00004527 BE[300D]                	MOV	SI,FastOpenTable
 25034                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25035                                  	; 07/12/2022
 25036 0000452A 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25037                                  
 25038 0000452E F8                      	CLC
 25039                                  SKIP_INSERT:
 25040 0000452F 58                      	POP	AX
 25041 00004530 59                      	POP	CX			; restore registers
 25042 00004531 5F                      	POP	DI
 25043 00004532 5E                      	POP	SI
 25044 00004533 5B                      	POP	BX
 25045 00004534 07                      	POP	ES
 25046 00004535 1F                      	POP	DS
 25047                                  GET_NEXT2:
 25048                                  	;or	[ss:FastOpenFlg],8
 25049 00004536 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25050                                  					; we got dir info from fastopen so
 25051                                  GET_NEXT_ELEMENT:
 25052 0000453C 9D                      	POPF
 25053 0000453D C3                      	RETN
 25054                                  
 25055                                  ;============================================================================
 25056                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25057                                  ;============================================================================
 25058                                  ; 17/07/2018 - Retro DOS v3.0
 25059                                  ; 30/04/2019 - Retro DOS v4.0
 25060                                  
 25061                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25062                                  
 25063                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25064                                  
 25065                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25066                                  
 25067                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25068                                  ;DEV001s:
 25069                                  ;		length of packets
 25070 0000453E 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25071                                  ;LenTab: db	22,14,22,13,15,14
 25072                                  
 25073                                  ;	Error Function
 25074                                  
 25075                                  CmdTab:
 25076 00004544 8604                    	DB	86h, DEVRD	; 0 input
 25077 00004546 8605                    	DB	86h, DEVRDND	; 1 input status
 25078 00004548 8708                    	DB	87h, DEVWRT	; 2 output
 25079 0000454A 870A                    	DB	87h, DEVOST	; 3 output status
 25080 0000454C 8607                    	DB	86h, DEVIFL	; 4 input flush
 25081 0000454E 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25082                                  
 25083                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25084                                  
 25085                                  ;CmdTab:
 25086                                  ;	db	86h, 4
 25087                                  ;	db	86h, 5
 25088                                  ;	db	87h, 8
 25089                                  ;	db	87h, 10
 25090                                  ;	db	86h, 7
 25091                                  ;	db	86h, 5
 25092                                  
 25093                                  ;DEV001E:
 25094                                  
 25095                                  ; 30/04/2019 - Retro DOS v4.0
 25096                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25097                                  
 25098                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25099                                  ;----------------------------------------------------------------------------
 25100                                  ;
 25101                                  ; Procedure Name : IOFUNC
 25102                                  ;
 25103                                  ; Inputs:
 25104                                  ;	DS:SI Points to SFT
 25105                                  ;	AH is function code
 25106                                  ;		= 0 Input
 25107                                  ;		= 1 Input Status
 25108                                  ;		= 2 Output
 25109                                  ;		= 3 Output Status
 25110                                  ;		= 4 Flush
 25111                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25112                                  ;				   present.
 25113                                  ;	AL = character if output
 25114                                  ; Function:
 25115                                  ;	Perform indicated I/O to device or file
 25116                                  ; Outputs:
 25117                                  ;	AL is character if input
 25118                                  ;	If a status call
 25119                                  ;		zero set if not ready
 25120                                  ;		zero reset if ready (character in AL for input status)
 25121                                  ; For regular files:
 25122                                  ;	Input Status
 25123                                  ;		Gets character but restores position
 25124                                  ;		Zero set on EOF
 25125                                  ;	Input
 25126                                  ;		Gets character advances position
 25127                                  ;		Returns ^Z on EOF
 25128                                  ;	Output Status
 25129                                  ;		Always ready
 25130                                  ; AX altered, all other registers preserved
 25131                                  ;----------------------------------------------------------------------------
 25132                                  
 25133                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25134                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25135                                  
 25136                                  IOFUNC:
 25137 00004550 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25138                                  					; DEVIOBUF
 25139 00004555 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25140 0000455C 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25141 00004563 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25142                                  	;test	byte [si+6],80h
 25143                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25144 00004567 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25145 0000456B 7403                    	JZ	short IOTO22		;AN000;
 25146 0000456D E9A500                  	JMP	IOTOFILE		;AN000;
 25147                                  IOTO22:
 25148                                  	;test	word [si+5],80h
 25149                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25150 00004570 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25151 00004574 7503                    	JNZ	short IOTO33		;AN000;
 25152 00004576 E99C00                  	JMP	IOTOFILE		;AN000;
 25153                                  IOTO33:
 25154 00004579 06                      	push	es ; * (MSDOS 6.21)
 25155 0000457A E8F3BE                  	call	save_world
 25156 0000457D 8CDA                    	MOV	DX,DS
 25157 0000457F 8CD3                    	MOV	BX,SS
 25158 00004581 8EDB                    	MOV	DS,BX
 25159 00004583 8EC3                    	MOV	ES,BX
 25160 00004585 31DB                    	XOR	BX,BX
 25161 00004587 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25162 0000458A 7503                    	jnz	short _no_sys_wait
 25163                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25164                                  	; 16/12/2022
 25165 0000458C 80CF04                  	or	bh,04h
 25166                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25167                                  				    ; It is up to device driver to carry out
 25168                                  				    ; appropriate action.
 25169                                  _no_sys_wait:
 25170 0000458F 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25171 00004593 31DB                    	XOR	BX,BX
 25172 00004595 881E[8903]              	MOV	[IOMED],BL
 25173                                  
 25174 00004599 88E3                    	MOV	BL,AH		 	; get function
 25175 0000459B 2E8AA7[3E45]            	MOV	AH,[cs:BX+LenTab]
 25176 000045A0 D1E3                    	SHL	BX,1
 25177 000045A2 2E8B8F[4445]            	MOV	CX,[cs:BX+CmdTab]
 25178 000045A7 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25179 000045AA 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25180 000045AE 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25181                                  
 25182 000045B2 8EDA                    	MOV	DS,DX
 25183 000045B4 E86D01                  	CALL	DEVIOCALL
 25184 000045B7 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25185 000045BC 21FF                    	and	di,di
 25186 000045BE 7834                    	js	short DevErr
 25187                                  OKDevIO:
 25188 000045C0 8CD0                    	MOV	AX,SS
 25189 000045C2 8ED8                    	MOV	DS,AX
 25190                                  
 25191                                  	;cmp	ch,5
 25192 000045C4 80FD05                  	CMP	CH,DEVRDND
 25193 000045C7 7506                    	JNZ	short DNODRD
 25194 000045C9 A0[8903]                	MOV	AL,[IORCHR]
 25195 000045CC A2[BC03]                	MOV	[DEVIOBUF],AL
 25196                                  
 25197                                  DNODRD: 
 25198 000045CF 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25199 000045D3 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25200                                  	;and	ah,2
 25201 000045D5 80E402                  	AND	AH,STBUI>>8
 25202                                  
 25203                                  QuickReturn:				;AN000; 2/13/KK
 25204 000045D8 E87EBE                  	call	restore_world
 25205 000045DB 07                      	pop	es ; * (MSDOS 6.21)
 25206                                  
 25207                                  	; SR;
 25208                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25209                                  	; IoStatFail = -1 (set after return from the I24)
 25210                                  
 25211                                  	; MSDOS 6.0
 25212 000045DC 9C                      	pushf
 25213 000045DD 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25214 000045E1 98                      	cbw				;sign extend to word
 25215 000045E2 83F8FF                  	cmp	ax,-1
 25216 000045E5 7507                    	jne	short not_fail_ret
 25217 000045E7 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25218 000045EC 9D                      	popf
 25219 000045ED C3                      	retn
 25220                                  
 25221                                  not_fail_ret:
 25222 000045EE 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25223 000045F2 9D                      	popf
 25224 000045F3 C3                      	retn
 25225                                  
 25226                                  DevErr:
 25227 000045F4 88CC                    	MOV	AH,CL
 25228 000045F6 E8BB0D                  	call	CHARHARD
 25229 000045F9 3C01                    	CMP	AL,1
 25230 000045FB 7507                    	JNZ	short NO_RETRY
 25231 000045FD E859BE                  	call	restore_world
 25232                                  	; 12/05/2019
 25233 00004600 07                      	pop	es ; * (MSDOS 6.21)		
 25234 00004601 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25235                                  
 25236                                  NO_RETRY:
 25237                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25238                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25239                                  	; simply wants to ignore the error.
 25240                                  	;
 25241                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25242                                  	; should be checked by the caller on return
 25243                                  
 25244                                  					; SS override
 25245 00004604 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25246                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25247                                  
 25248                                  	; SR;
 25249                                  	; Check if user failed
 25250                                  
 25251                                  	; MSDOS 6.0
 25252 0000460A 3C03                    	cmp	al,3
 25253 0000460C 7505                    	jnz	short not_fail
 25254 0000460E 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25255                                  not_fail:
 25256 00004613 EBAB                    	JMP	short OKDevIO
 25257                                  
 25258                                  IOTOFILE:
 25259 00004615 08E4                    	OR	AH,AH
 25260 00004617 7421                    	JZ	short IOIN
 25261 00004619 FECC                    	DEC	AH
 25262 0000461B 7405                    	JZ	short IOIST
 25263 0000461D FECC                    	DEC	AH
 25264 0000461F 7411                    	JZ	short IOUT
 25265                                  IOUT_retn:	; 18/12/2022
 25266 00004621 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25267                                  IOIST:
 25268                                  	;push	word [si+15h]
 25269 00004622 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25270                                  	;push	word [si+17h]
 25271 00004625 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25272 00004628 E80F00                  	CALL	IOIN
 25273                                  	;pop	word [si+17h]
 25274 0000462B 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25275                                  	;pop	word [si+15h]
 25276 0000462E 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25277 00004631 C3                      	retn
 25278                                  IOUT:
 25279 00004632 E82500                  	CALL	SETXADDR
 25280 00004635 E854EF                  	call	DOS_WRITE
 25281                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25282                                  	; 18/12/2022
 25283 00004638 EB54                    	jmp	RESTXADDR
 25284                                  ;IOUT_retn:
 25285                                  	;retn			; come crying to me when things don't
 25286                                  				; work ARR
 25287                                  IOIN:
 25288 0000463A E81D00                  	CALL	SETXADDR
 25289                                  					; SS override for DOS34_FLAG
 25290                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25291                                  	;or	word [ss:DOS34_FLAG],40h
 25292                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25293                                  	; 16/12/2022
 25294 0000463D 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25295 00004643 E81DED                  	CALL	DOS_READ
 25296                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25297                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25298                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25299                                  	; 16/12/2022
 25300 00004646 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25301 0000464C 09C9                    	OR	CX,CX			; Check EOF
 25302 0000464E E83D00                  	CALL	RESTXADDR
 25303                                  					; SS override
 25304 00004651 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25305 00004655 75CA                    	jnz	short IOUT_retn	
 25306 00004657 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25307 00004659 C3                      	retn
 25308                                  
 25309                                  SETXADDR:
 25310                                  					; SS override
 25311 0000465A 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25312                                  
 25313 0000465F 06                      	push	es ; * (MSDOS 6.21)
 25314                                  
 25315 00004660 E80DBE                  	call	save_world
 25316                                  					; SS override for DMAADD and THISSFT
 25317 00004663 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25318 00004668 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25319 0000466D 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25320                                  
 25321 00004672 16                      	push	ss
 25322 00004673 1F                      	pop	ds
 25323                                  
 25324 00004674 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25325 00004678 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25326 0000467C 890E[2E03]              	MOV	[DMAADD+2],CX
 25327 00004680 8B0E[8A03]              	MOV	CX,[IOXAD]
 25328 00004684 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25329 00004688 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25330 0000468C EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25331                                  
 25332                                  RESTXADDR:
 25333 0000468E 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25334 00004692 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25335 00004696 8F06[2C03]              	POP	WORD [DMAADD]
 25336                                  
 25337 0000469A E8BCBD                  	call	restore_world
 25338                                  
 25339 0000469D 07                      	pop	es ; * (MSDOS 6.21)
 25340                                  					; SS override
 25341                                  RESTRET:
 25342 0000469E 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25343                                  
 25344                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25345                                  ; 21/11/2022
 25346                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25347                                  
 25348                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25349                                  
 25350                                  ;----------------------------------------------------------------------------
 25351                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25352                                  ;
 25353                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25354                                  ;	the SFT.
 25355                                  ;
 25356                                  ;	ENTRY	(ES:DI) = SFT
 25357                                  ;	EXIT	none
 25358                                  ;	USES	all
 25359                                  ;----------------------------------------------------------------------------
 25360                                  
 25361                                  DEV_OPEN_SFT:
 25362 000046A3 06                      	push	es ; * (MSDOS 6.21)
 25363 000046A4 E8C9BD                  	call	save_world
 25364                                  	;mov	al,0Dh	
 25365 000046A7 B00D                    	MOV	AL,DEVOPN
 25366 000046A9 EB06                    	JMP	SHORT DO_OPCLS
 25367                                  
 25368                                  ;----------------------------------------------------------------------------
 25369                                  ; Procedure Name : DEV_CLOSE_SFT
 25370                                  ;
 25371                                  ; Inputs:
 25372                                  ;	ES:DI Points to SFT
 25373                                  ; Function:
 25374                                  ;	Issue a CLOSE call to the correct device
 25375                                  ; Outputs:
 25376                                  ;	None
 25377                                  ; ALL preserved
 25378                                  ;----------------------------------------------------------------------------
 25379                                  
 25380                                  DEV_CLOSE_SFT:
 25381 000046AB 06                      	push	es ; * (MSDOS 6.21)
 25382 000046AC E8C1BD                  	call	save_world
 25383                                  	;mov	al,0Eh	
 25384 000046AF B00E                    	MOV	AL,DEVCLS
 25385                                  
 25386                                  	; Main entry for device open and close. AL contains the function 
 25387                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25388                                  	; open/close to block devices. This allows networks to function but 
 25389                                  	; does NOT hang up with bogus change-line code.
 25390                                  
 25391                                  	;entry	DO_OPCLS
 25392                                  DO_OPCLS:
 25393                                  	; Is the SFT for the net? If so, no action necessary.
 25394                                  
 25395                                  	; MSDOS 6.0
 25396                                  	;test	word [es:di+5],8000h
 25397                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25398 000046B1 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25399 000046B6 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25400 000046B8 30E4                    	XOR	AH,AH			; Unit
 25401                                  	;test	byte [es:di+5],80h
 25402 000046BA 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25403                                  	;les	di,[es:di+7]
 25404 000046BF 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25405 000046C3 7513                    	JNZ	short GOT_DEV_ADDR
 25406                                  
 25407                                  	; We are about to call device open/close on a block driver. If no 
 25408                                  	; sharing then just short circuit to done.
 25409                                  	
 25410                                  	; MSDOS 6.0
 25411                                  					; SS override
 25412 000046C5 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25413 000046CB 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25414                                  
 25415                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25416                                  	;mov	ah,[es:di+1]
 25417 000046CD 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25418 000046D1 268A0D                  	mov	cl,[es:di]
 25419                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25420                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25421                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25422 000046D4 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25423                                  GOT_DEV_ADDR:				; ES:DI -> device
 25424                                  	;test	word [es:di+4],800h
 25425                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25426 000046D8 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25427 000046DD 7440                    	JZ	short OPCLS_DONE	; Device can't
 25428 000046DF 06                      	PUSH	ES
 25429 000046E0 1F                      	POP	DS
 25430 000046E1 89FE                    	MOV	SI,DI			; DS:SI -> device
 25431                                  
 25432                                  OPCLS_RETRY:
 25433                                  	;Context ES
 25434 000046E3 16                      	push	ss
 25435 000046E4 07                      	pop	es
 25436                                  					; DEVCALL is in DOSDATA
 25437 000046E5 BF[5A03]                	MOV	DI,DEVCALL
 25438                                  
 25439 000046E8 89FB                    	MOV	BX,DI
 25440 000046EA 50                      	PUSH	AX
 25441                                  	;mov	al,13
 25442 000046EB B00D                    	MOV	AL,DOPCLHL
 25443 000046ED AA                      	STOSB				; Length
 25444 000046EE 58                      	POP	AX
 25445 000046EF 86E0                    	XCHG	AH,AL
 25446 000046F1 AA                      	STOSB				; Unit
 25447 000046F2 86E0                    	XCHG	AH,AL
 25448 000046F4 AA                      	STOSB				; Command
 25449 000046F5 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25450 000046FA 50                      	PUSH	AX			; Save Unit,Command
 25451                                  	;invoke	DEVIOCALL2
 25452 000046FB E82900                  	call	DEVIOCALL2
 25453                                  
 25454                                  	;mov	di,[es:bx+3]
 25455 000046FE 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25456                                  	;test	di,8000h
 25457                                  	;jz	short OPCLS_DONEP	
 25458 00004702 21FF                    	and	di,di
 25459 00004704 7918                    	jns	short OPCLS_DONEP	; No error
 25460                                  	; 21/11/2022
 25461                                  	;test	word [si+4],8000h
 25462                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25463                                  	;test	word [si+5],80h
 25464 00004706 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25465 0000470A 7404                    	JZ	short BLKDEV
 25466 0000470C B486                    	MOV	AH,86H			; Read error in data, Char dev
 25467 0000470E EB04                    	JMP	SHORT HRDERR
 25468                                  BLKDEV:
 25469 00004710 88C8                    	MOV	AL,CL			; Drive # in AL
 25470 00004712 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25471                                  HRDERR:
 25472                                  	;invoke	CHARHARD
 25473 00004714 E89D0C                  	call	CHARHARD
 25474 00004717 3C01                    	cmp	al,1
 25475 00004719 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25476                                  					;  Note that FAIL is essentually IGNORED
 25477 0000471B 58                      	POP	AX			; Get back Unit, Command
 25478 0000471C EBC5                    	JMP	short OPCLS_RETRY
 25479                                  OPCLS_DONEP:
 25480 0000471E 58                      	POP	AX			; Clean stack
 25481                                  OPCLS_DONE:
 25482 0000471F E837BD                  	call	restore_world
 25483 00004722 07                      	pop	es ; * (MSDOS 6.21)
 25484 00004723 C3                      	retn
 25485                                  
 25486                                  ; 30/04/2019 - Retro DOS v4.0
 25487                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25488                                  
 25489                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25490                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25491                                  
 25492                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25493                                  ;----------------------------------------------------------------------------
 25494                                  ;**	DevIoCall  - Call Device
 25495                                  ;
 25496                                  ;	ENTRY	DS:SI Points to device SFT
 25497                                  ;		ES:BX Points to request data
 25498                                  ;	EXIT	DS:SI -> Device driver
 25499                                  ;	USES	DS:SI,AX
 25500                                  ;----------------------------------------------------------------------------
 25501                                  ;**	DevIoCall2 - Call Device
 25502                                  ;
 25503                                  ;	ENTRY	DS:SI Points to DPB
 25504                                  ;		ES:BX Points to request data
 25505                                  ;	EXIT	DS:SI -> Device driver
 25506                                  ;	USES	DS:SI,AX
 25507                                  ;----------------------------------------------------------------------------
 25508                                  
 25509                                  DEVIOCALL:
 25510                                  					; SS override for CALLSSEC, 
 25511                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25512 00004724 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25513                                  
 25514                                  	;entry	DEVIOCALL2
 25515                                  DEVIOCALL2:
 25516                                  	;EnterCrit critDevice
 25517 00004727 E863CC                  	call	ECritDevice
 25518                                  
 25519                                  	; MSDOS 6.0
 25520                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25521                                  	;test	byte [si+5],80h
 25522 0000472A F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25523 0000472E 7548                    	jnz	short chardev2		;AN000; >32mb no
 25524                                  
 25525                                  	; 16/12/2022
 25526                                  	; 22/11/2022
 25527 00004730 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25528 00004734 3C04                    	cmp	al,DEVRD	; 4
 25529 00004736 7408                    	je	short chkext	
 25530 00004738 3C08                    	cmp	al,DEVWRT	; 8
 25531 0000473A 7404                    	je	short chkext
 25532 0000473C 3C09                    	cmp	al,DEVWRTV	; 9
 25533 0000473E 7538                    	jne	short chardev2
 25534                                  
 25535                                  	; 16/12/2022
 25536                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25537                                  	;;cmp	byte [es:bx+2],4
 25538                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25539                                  	;JZ	short chkext		;AN000; >32mb   yes
 25540                                  	;;cmp	byte [es:bx+2],8
 25541                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25542                                  	;JZ	short chkext		;AN000; >32mb   yes
 25543                                  	;;cmp	byte [es:bx+2],9
 25544                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25545                                  	;				;AN000; >32mb write/verify ?
 25546                                  	;JNZ	short chardev2		;AN000; >32mb no
 25547                                  chkext:
 25548 00004740 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25549 00004743 7255                    	JC	short dev_exit		;AN000;LB. done
 25550                                  
 25551                                  	;test	byte [si+4],2
 25552 00004745 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25553 00004749 741D                    	JZ	short chksector		;AN000;>32mb   no
 25554 0000474B 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25555 0000474F 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25556 00004753 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25557 0000475A 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25558 0000475E 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25559 00004762 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25560 00004766 EB10                    	JMP	short chardev2		;AN000; >32mb
 25561                                  chksector:				;AN000; >32mb
 25562 00004768 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25563 0000476E 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25564                                  	;mov	word [es:bx+3],8107h
 25565 00004770 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25566                                  					;AN000; >32mb
 25567 00004776 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25568                                  
 25569                                  chardev2:				;AN000;
 25570                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25571                                  	; preserved
 25572                                  
 25573                                  	;mov	ax,[si+6]
 25574 00004778 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25575 0000477B 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25576 0000477F 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25577 00004784 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25578                                  
 25579                                  	;mov	ax,[si+8]
 25580 00004789 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25581 0000478C 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25582 00004790 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25583                                  
 25584                                  	; MSDOS 6.0
 25585 00004795 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25586 00004798 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25587                                  
 25588                                  dev_exit:
 25589                                  	;LeaveCrit critDevice
 25590                                  	;call	LCritDevice
 25591                                  	;retn
 25592                                  	; 18/12/2022
 25593 0000479A E90BCC                  	jmp	LCritDevice
 25594                                  
 25595                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25596                                  ; 22/11/2022
 25597                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25598                                  
 25599                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25600                                  ;---------------------------------------------------------------------------
 25601                                  ;
 25602                                  ; Procedure Name : SETREAD, SETWRITE
 25603                                  ;
 25604                                  ; Inputs:
 25605                                  ;	DS:BX = Transfer Address
 25606                                  ;	CX = Record Count
 25607                                  ;	DX = Starting Record
 25608                                  ;	AH = Media Byte
 25609                                  ;	AL = Unit Code
 25610                                  ; Function:
 25611                                  ;	Set up the device call header at DEVCALL
 25612                                  ; Output:
 25613                                  ;	ES:BX Points to DEVCALL
 25614                                  ; No other registers effected
 25615                                  ;
 25616                                  ;---------------------------------------------------------------------------
 25617                                  
 25618                                  SETREAD:
 25619 0000479D 57                      	PUSH	DI
 25620 0000479E 51                      	PUSH	CX
 25621 0000479F 50                      	PUSH	AX
 25622 000047A0 B104                    	MOV	CL,DEVRD ; mov cl,4
 25623                                  SETCALLHEAD:
 25624 000047A2 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25625 000047A4 16                      	PUSH	SS
 25626 000047A5 07                      	POP	ES
 25627                                  					; DEVCALL is in DOSDATA
 25628 000047A6 BF[5A03]                	MOV	DI,DEVCALL
 25629                                  
 25630 000047A9 AA                      	STOSB				; length
 25631 000047AA 58                      	POP	AX			; 
 25632 000047AB AA                      	STOSB				; Unit
 25633 000047AC 50                      	PUSH	AX
 25634 000047AD 88C8                    	MOV	AL,CL
 25635 000047AF AA                      	STOSB				; Command code
 25636 000047B0 31C0                    	XOR	AX,AX
 25637 000047B2 AB                      	STOSW				; Status
 25638 000047B3 83C708                  	ADD	DI,8			; Skip link fields
 25639 000047B6 58                      	POP	AX
 25640 000047B7 86E0                    	XCHG	AH,AL
 25641 000047B9 AA                      	STOSB				; Media byte
 25642 000047BA 86C4                    	XCHG	AL,AH
 25643 000047BC 50                      	PUSH	AX
 25644 000047BD 89D8                    	MOV	AX,BX
 25645 000047BF AB                      	STOSW
 25646                                  
 25647 000047C0 8CD8                    	MOV	AX,DS
 25648 000047C2 AB                      	STOSW				; Transfer addr
 25649                                  
 25650 000047C3 59                      	POP	CX			; Real AX
 25651 000047C4 58                      	POP	AX			; Real CX
 25652 000047C5 AB                      	STOSW				; Count
 25653                                  
 25654 000047C6 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25655 000047C7 AB                      	STOSW				; Start
 25656 000047C8 91                      	XCHG	AX,CX
 25657 000047C9 87D1                    	XCHG	DX,CX
 25658 000047CB 5F                      	POP	DI
 25659                                  					; DEVCALL is in DOSDATA
 25660 000047CC BB[5A03]                	MOV	BX,DEVCALL
 25661 000047CF C3                      	retn
 25662                                  
 25663                                  	;entry	SETWRITE
 25664                                  SETWRITE:
 25665                                  
 25666                                  ; Inputs:
 25667                                  ;	DS:BX = Transfer Address
 25668                                  ;	CX = Record Count
 25669                                  ;	DX = Starting Record
 25670                                  ;	AH = Media Byte
 25671                                  ;	AL = Unit Code
 25672                                  ; Function:
 25673                                  ;	Set up the device call header at DEVCALL
 25674                                  ; Output:
 25675                                  ;	ES:BX Points to DEVCALL
 25676                                  ; No other registers effected
 25677                                  
 25678 000047D0 57                      	PUSH	DI
 25679 000047D1 51                      	PUSH	CX
 25680 000047D2 50                      	PUSH	AX
 25681 000047D3 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25682 000047D5 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25683 000047DA EBC6                    	JMP	SHORT SETCALLHEAD
 25684                                  
 25685                                  ; 30/04/2019 - Retro DOS v4.0
 25686                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25687                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25688                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25689                                  
 25690                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25691                                  ;---------------------------------------------------------------------------
 25692                                  ;
 25693                                  ; Procedure Name : RW_SC
 25694                                  ;
 25695                                  ; Inputs:
 25696                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25697                                  ;	 [SC_STATUS]= SC validity status
 25698                                  ;	 [SEQ_SECTOR]= last sector read
 25699                                  ; Function:
 25700                                  ;	Read from or write through secondary cache
 25701                                  ; Output:
 25702                                  ;	ES:BX Points to DEVCALL
 25703                                  ;	carry clear, I/O is not done
 25704                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25705                                  ;	carry set, I/O is done
 25706                                  ;
 25707                                  ;----------------------------------------------------------------------------
 25708                                  
 25709                                  RW_SC:
 25710                                  	; SS override for all variables used.
 25711                                  	
 25712 000047DC 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25713 000047E2 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25714 000047E4 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25715 000047EA 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25716 000047EC 51                      	PUSH	CX			    ;AN000;LB.
 25717 000047ED 52                      	PUSH	DX			    ;AN000;LB. yes
 25718 000047EE 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25719 000047EF 56                      	PUSH	SI			    ;AN000;LB.
 25720 000047F0 06                      	PUSH	ES			    ;AN000;LB.
 25721 000047F1 57                      	PUSH	DI			    ;AN000;LB.
 25722                                  
 25723 000047F2 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25724 000047F7 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25725 000047FD 7408                    	JZ	short doread		    ;AN000;LB. yes
 25726 000047FF E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25727 00004802 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25728                                  scexit4:				    ;AN000;
 25729 00004805 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25730 00004806 C3                      	retn				    ;AN000;LB.
 25731                                  doread: 				    ;AN000;
 25732 00004807 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25733 0000480A 720A                    	JC	short readSC		    ;AN000;LB.
 25734 0000480C 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25735 00004813 F9                      	STC				    ;AN000;LB. set carry
 25736 00004814 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25737                                  readSC: 				    ;AN000;
 25738 00004816 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25739 0000481A 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25740 0000481F 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25741 00004824 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25742 00004829 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25743 0000482C 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25744                                  chklow: 						
 25745 0000482E 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25746 00004831 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25747 00004833 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25748 0000483A 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25749 0000483E 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25750                                  readsr:
 25751 00004842 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25752 00004846 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25753 0000484A 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25754 0000484E 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25755                                  
 25756 00004852 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25757 00004856 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25758 0000485A 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25759 0000485E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25760 00004862 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25761 00004868 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25762 0000486C 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25763 00004870 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25764 00004874 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25765 00004878 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25766 0000487C 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25767                                  saveseq2:				    ;AN000;
 25768 00004880 F8                      	CLC				    ;AN000;LB. clear carry
 25769                                  saveseq:				    ;AN000;	
 25770 00004881 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25771 00004885 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25772 00004889 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25773 0000488D 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25774 00004891 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25775                                  scexit2:				    ;AN000;LB.
 25776 00004893 F8                      	CLC				    ;AN000;LB.	clear carry
 25777                                  scexit: 				    ;AN000;		
 25778 00004894 5F                      	POP	DI			    ;AN000;LB.
 25779 00004895 07                      	POP	ES			    ;AN000;LB. restore registers
 25780 00004896 5E                      	POP	SI			    ;AN000;LB.
 25781 00004897 1F                      	POP	DS			    ;AN000;LB.
 25782 00004898 5A                      	POP	DX			    ;AN000;LB.
 25783 00004899 59                      	POP	CX			    ;AN000;LB.
 25784 0000489A C3                      	retn				    ;AN000;LB.
 25785                                  
 25786                                  ;Break	<IN_SC -- check if in secondary cache>
 25787                                  ;--------------------------------------------------------------------------
 25788                                  ;
 25789                                  ; Procedure Name : IN_SC
 25790                                  ;
 25791                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25792                                  ;	   [CURSC_DRIVE]= current SC drive
 25793                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25794                                  ;	   [SC_CACHE_COUNT]= SC count
 25795                                  ;	   [HIGH_SECTOR]:DX= sector number
 25796                                  ; Function:
 25797                                  ;	Check if the sector is in secondary cache
 25798                                  ; Output:
 25799                                  ;	carry clear, in SC
 25800                                  ;	   CX= the index in the secondary cache
 25801                                  ;	carry set, not in SC
 25802                                  ;
 25803                                  ;---------------------------------------------------------------------------
 25804                                  
 25805                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25806                                  IN_SC:
 25807                                  	; SS override for all variables used
 25808 0000489B 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25809 0000489F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25810 000048A4 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25811 000048A6 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25812 000048AA 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25813 000048AC 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25814 000048B1 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25815 000048B6 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25816 000048B9 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25817 000048BB 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25818 000048C0 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25819 000048C2 F8                      	CLC				    ;AN000;;LB. clear carry
 25820                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25821                                  	; 16/12/2022
 25822 000048C3 C3                      	retn	; 30/04/2019
 25823                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25824                                  	;jmp	short inexit
 25825                                  
 25826                                  outrange2:				    ;AN000;;LB. set carry
 25827 000048C4 F9                      	STC				    ;AN000;;LB.
 25828                                  inexit: 				    ;AN000;;LB.
 25829 000048C5 C3                      	retn				    ;AN000;;LB.
 25830                                  
 25831                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25832                                  ;---------------------------------------------------------------------------
 25833                                  ;
 25834                                  ; Procedure Name : Invalidate_Sc
 25835                                  ;
 25836                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25837                                  ;	   [CURSC_DRIVE]= current SC drive
 25838                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25839                                  ;	   [SC_CACHE_COUNT]= SC count
 25840                                  ;	   [SC_STATUS]= SC status word
 25841                                  ;	   [HIGH_SECTOR]:DX= sector number
 25842                                  ;
 25843                                  ; Function:
 25844                                  ;	invalidate secondary cache if in there
 25845                                  ; Output:
 25846                                  ;	[SC_STATUS] is updated
 25847                                  ;---------------------------------------------------------------------------
 25848                                  
 25849                                  INVALIDATE_SC:
 25850                                  	; SS override for all variables used
 25851                                  
 25852 000048C6 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25853 000048C9 720C                    	JC	short outrange		    ;AN000;;LB. no
 25854 000048CB B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25855 000048CE D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25856 000048D0 F7D0                    	NOT	AX			    ;AN000;;LB.
 25857 000048D2 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25858                                  outrange:				    ;AN000;;LB.
 25859 000048D7 C3                      	retn				    ;AN000;;LB.
 25860                                  
 25861                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25862                                  ; 22/11/2022
 25863                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25864                                  
 25865                                  ;Break	<VIRREAD- virtually read data into buffer>
 25866                                  ;--------------------------------------------------------------------------
 25867                                  ;
 25868                                  ; Procedure Name : SC_FLAG
 25869                                  ;
 25870                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25871                                  ;		     1, continuous sectors were read into SC
 25872                                  ; Function:
 25873                                  ;	   Move data from SC to buffer
 25874                                  ; Output:
 25875                                  ;	 carry clear, data is moved to buffer
 25876                                  ;	 carry set, bad sector or exceeds maximum sector
 25877                                  ;	   SC_FLAG =0
 25878                                  ;	   CALLSCNT=1
 25879                                  ;	   SC_STATUS= -1 if succeeded
 25880                                  ;     
 25881                                  ;		       0 if failed
 25882                                  ;--------------------------------------------------------------------------
 25883                                  
 25884                                  VIRREAD:
 25885                                  	; SS override for all variables used
 25886                                  
 25887 000048D8 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25888 000048DE 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25889 000048E0 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25890 000048E4 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25891 000048E8 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25892 000048EC 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25893 000048F0 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25894 000048F6 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25895                                  
 25896                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25897 000048FD 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25898 00004903 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25899 00004905 1E                      	PUSH	DS			    ;AN000;;LB.
 25900 00004906 56                      	PUSH	SI			    ;AN000;;LB.
 25901 00004907 06                      	PUSH	ES			    ;AN000;;LB.
 25902 00004908 57                      	PUSH	DI			    ;AN000;;LB.
 25903 00004909 52                      	PUSH	DX			    ;AN000;;LB.
 25904 0000490A 51                      	PUSH	CX			    ;AN000;;LB.
 25905 0000490B 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25906 0000490D E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25907 00004910 59                      	POP	CX
 25908 00004911 5A                      	POP	DX			    ;AN000;;LB.
 25909 00004912 5F                      	POP	DI			    ;AN000;;LB.
 25910 00004913 07                      	POP	ES			    ;AN000;;LB.
 25911 00004914 5E                      	POP	SI			    ;AN000;;LB.
 25912 00004915 1F                      	POP	DS			    ;AN000;;LB.
 25913 00004916 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25914                                  scerror:				    ;AN000;
 25915 00004918 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25916 0000491F 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25917 00004926 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25918 0000492C F9                      	STC				    ;AN000;;LB. carry set
 25919 0000492D C3                      	retn				    ;AN000;;LB.
 25920                                  sc2end: 				    ;AN000;
 25921 0000492E F8                      	CLC				    ;AN000;;LB. carry clear
 25922 0000492F C3                      	retn				    ;AN000;;LB.
 25923                                  
 25924                                  ; 30/04/2019 - Retro  DOS v4.0
 25925                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25926                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25927                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25928                                  
 25929                                  ;Break	<SC2BUF- move data from SC to buffer>
 25930                                  ;----------------------------------------------------------------------------
 25931                                  ;
 25932                                  ; Procedure Name : SC2BUF
 25933                                  ;
 25934                                  ; Inputs:  [SC_STATUS] = SC validity status
 25935                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25936                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25937                                  ; Function:
 25938                                  ;	   Move data from SC to buffer
 25939                                  ; Output:
 25940                                  ;	   carry clear, in SC  and data is moved
 25941                                  ;	   carry set, not in SC and data is not moved
 25942                                  ;---------------------------------------------------------------------------
 25943                                  
 25944                                  SC2BUF:
 25945                                  	; SS override for all variables used
 25946 00004930 E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25947 00004933 7241                    	JC	short noSC		    ;AN000;LB. no
 25948 00004935 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25949 00004938 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25950 0000493A 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25951 0000493F 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25952                                  ;entry SC2BUF2
 25953                                  SC2BUF2:				    ;AN000;
 25954 00004941 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25955 00004943 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25956 00004948 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25957 0000494D 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25958 00004952 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25959 00004954 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25960 00004956 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25961 0000495B 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25962 00004960 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25963 00004965 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25964                                  ;entry MOVWORDS
 25965                                  MOVWORDS:				    ;AN000;
 25966 00004967 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25967 0000496D 7403                    	JZ	short nodd		    ;AN000;LB. no
 25968 0000496F D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25969 00004971 66                      	DB	66H			    ;AN000;LB. use double word move
 25970                                  nodd:
 25971 00004972 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25972 00004974 F8                      	CLC				    ;AN000;LB. clear carry
 25973 00004975 C3                      	retn				    ;AN000;LB. exit
 25974                                  noSC:					    ;AN000;
 25975 00004976 F9                      	STC				    ;AN000;LB. set carry
 25976                                  sexit:					    ;AN000;
 25977 00004977 C3                      	retn				    ;AN000;LB.
 25978                                  
 25979                                  ;============================================================================
 25980                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 25981                                  ;============================================================================
 25982                                  ; 29/07/2018 - Retro DOS v3.0
 25983                                  ; 19/05/2019 - Retro DOS v4.0
 25984                                  
 25985                                  ;	TITLE	MKNODE - Node maker
 25986                                  ;	NAME	MKNODE
 25987                                  
 25988                                  ;**	MKNODE.ASM
 25989                                  ;----------------------------------------------------------------------------
 25990                                  ;	Low level routines for making a new local file system node
 25991                                  ;	and filling in an SFT from a directory entry
 25992                                  ;
 25993                                  ;	BUILDDIR
 25994                                  ;	SETDOTENT
 25995                                  ;	MakeNode
 25996                                  ;	NEWENTRY
 25997                                  ;	FREEENT
 25998                                  ;	NEWDIR
 25999                                  ;	DOOPEN
 26000                                  ;	RENAME_MAKE
 26001                                  ;	CHECK_VIRT_OPEN
 26002                                  ;
 26003                                  ;	Revision history:
 26004                                  ;
 26005                                  ;	 AN000	version 4.0  Jan. 1988
 26006                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26007                                  
 26008                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26009                                  ;----------------------------------------------------------------------------
 26010                                  ;
 26011                                  ; Procedure Name : BUILDDIR,NEWDIR
 26012                                  ;
 26013                                  ; Inputs:
 26014                                  ;       ES:BP Points to DPB
 26015                                  ;       [THISSFT] Set if using NEWDIR entry point
 26016                                  ;               (used by ALLOCATE)
 26017                                  ;       [LASTENT] current last valid entry number in directory if no free
 26018                                  ;               entries
 26019                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26020                                  ; Function:
 26021                                  ;       Grow directory if no free entries and not root
 26022                                  ; Outputs:
 26023                                  ;       CARRY SET IF FAILURE
 26024                                  ;       ELSE
 26025                                  ;          AX entry number of new entry
 26026                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26027                                  ;               AX = first entry of new dir
 26028                                  ;       GETENT should be called to set [LASTENT]
 26029                                  ;
 26030                                  ;----------------------------------------------------------------------------
 26031                                  
 26032                                  ; 19/05/2019 - Retro DOS v4.0
 26033                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26034                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26035                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26036                                  
 26037                                  BUILDDIR:
 26038                                  	; 29/07/2018 - Retro DOS v3.0
 26039                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26040                                  
 26041 00004978 A1[D805]                        MOV     AX,[ENTFREE]
 26042 0000497B 83F8FF                          CMP     AX,-1
 26043 0000497E 7402                            JZ	short CHECK_IF_ROOT
 26044 00004980 F8                              CLC
 26045 00004981 C3                              retn
 26046                                  
 26047                                  CHECK_IF_ROOT:
 26048 00004982 833E[C205]00                    CMP     word [DIRSTART],0
 26049 00004987 7502                            JNZ	short NEWDIR
 26050 00004989 F9                              STC
 26051                                  builddir_retn:
 26052 0000498A C3                              retn				; Can't grow root
 26053                                  
 26054                                  	;entry   NEWDIR
 26055                                  NEWDIR:        
 26056 0000498B 8B1E[C205]              	MOV     BX,[DIRSTART]
 26057 0000498F 09DB                            OR      BX,BX
 26058 00004991 7405                            JZ	short NULLDIR
 26059 00004993 E84006                  	call	GETEOF
 26060 00004996 72F2                            jc	short builddir_retn	; Screw up
 26061                                  NULLDIR:
 26062 00004998 B90100                          MOV     CX,1
 26063 0000499B E85105                  	call	ALLOCATE
 26064 0000499E 72EA                            jc	short  builddir_retn
 26065 000049A0 8B16[C205]                      MOV     DX,[DIRSTART]
 26066 000049A4 09D2                            OR      DX,DX
 26067 000049A6 750D                            JNZ	short ADDINGDIR
 26068 000049A8 E8BFF5                  	call	SETDIRSRCH
 26069 000049AB 72DD                            jc	short  builddir_retn
 26070 000049AD C706[4803]FFFF                  MOV     word [LASTENT],-1
 26071 000049B3 EB2B                            JMP     SHORT GOTDIRREC
 26072                                  ADDINGDIR:
 26073 000049B5 53                              PUSH    BX
 26074 000049B6 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26075 000049BA E84B0C                          call	IsEOF
 26076 000049BD 5B                              POP     BX
 26077 000049BE 7219                            JB	short NOTFIRSTGROW
 26078                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26079 000049C0 891E[BC05]                      MOV     [CLUSNUM],BX
 26080 000049C4 51                              PUSH    CX
 26081 000049C5 50                              PUSH    AX
 26082 000049C6 55                              PUSH    BP
 26083 000049C7 B401                            MOV     AH,1			; CLUSNUM update
 26084                                  	; 15/12/2022
 26085 000049C9 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26086                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26087                                  	;;mov	dl,[es:bp+0]
 26088                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26089 000049CD 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26090 000049D1 89DD                            MOV     BP,BX 			; CLUSNUM
 26091 000049D3 E88DDD                  	call	FastOpen_Update
 26092 000049D6 5D                              POP     BP
 26093 000049D7 58                              POP     AX
 26094 000049D8 59                              POP     CX
 26095                                  
 26096                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26097                                  NOTFIRSTGROW:
 26098 000049D9 89DA                            MOV     DX,BX
 26099 000049DB 30DB                            XOR     BL,BL
 26100 000049DD E8E304                  	call	FIGREC
 26101                                  GOTDIRREC:
 26102                                  	;mov	cl,[es:bp+4]
 26103 000049E0 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26104 000049E4 FEC1                            INC     CL
 26105 000049E6 30ED                            XOR     CH,CH
 26106                                  ZERODIR:
 26107 000049E8 51                              PUSH    CX
 26108                                  	;mov	byte [ALLOWED],18h
 26109 000049E9 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26110 000049EE B0FF                            MOV     AL,0FFH
 26111 000049F0 E84E10                          call	GETBUFFR
 26112 000049F3 7302                            JNC	short GET_SSIZE
 26113 000049F5 59                              POP     CX
 26114 000049F6 C3                              retn
 26115                                  
 26116                                  GET_SSIZE:
 26117                                  	;mov	cx,[es:bp+2]
 26118 000049F7 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26119 000049FB 06                              PUSH    ES
 26120 000049FC C43E[E205]                      LES     DI,[CURBUF]
 26121                                  	;or	byte [es:di+5],4
 26122 00004A00 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26123 00004A05 57                              PUSH    DI
 26124                                  	;;add	di,16	; MSDOS 3.3
 26125                                  	;add	di,20	; MSDOS 6.0	
 26126 00004A06 83C714                          ADD     DI,BUFINSIZ
 26127 00004A09 31C0                            XOR     AX,AX
 26128 00004A0B D1E9                            SHR     CX,1
 26129 00004A0D F3AB                            REP     STOSW
 26130 00004A0F 7301                            JNC	short EVENZ
 26131 00004A11 AA                              STOSB
 26132                                  EVENZ:
 26133 00004A12 5F                              POP     DI
 26134                                  
 26135                                  	; MSDOS 6.0
 26136 00004A13 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26137                                  					;LB. if already dirty		  ;AN000;
 26138 00004A18 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26139 00004A1A E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26140                                          
 26141                                  	;or	byte [es:di+5],40h
 26142 00004A1D 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26143                                  yesdirty7:
 26144 00004A22 07                              POP	ES
 26145 00004A23 59                              POP	CX
 26146                                  
 26147                                  	; 19/05/2019 - Retro DOS v4.0
 26148                                  
 26149                                  	; MSDOS 3.3
 26150                                  	;INC	DX
 26151                                  
 26152                                  	; MSDOS 6.0
 26153 00004A24 83C201                  	add	dx,1
 26154 00004A27 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26155                                  
 26156 00004A2C E2BA                            LOOP    ZERODIR
 26157                                  
 26158 00004A2E A1[4803]                        MOV     AX,[LASTENT]
 26159 00004A31 40                              INC     AX
 26160 00004A32 F8                              CLC
 26161 00004A33 C3                              retn
 26162                                  
 26163                                  ;--------------------------------------------------------------------------
 26164                                  ;
 26165                                  ; Procedure Name : SETDOTENT
 26166                                  ;
 26167                                  ; set up a . or .. directory entry for a directory.
 26168                                  ;
 26169                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26170                                  ;               AX contains ". " or ".."
 26171                                  ;               DX contains first cluster of entry
 26172                                  ;
 26173                                  ;----------------------------------------------------------------------------
 26174                                  
 26175                                  SETDOTENT:
 26176                                  ;	Fill in name field
 26177 00004A34 AB                              STOSW
 26178 00004A35 B90400                          MOV     CX,4
 26179 00004A38 B82020                          MOV     AX,"  " ; 2020h
 26180 00004A3B F3AB                            REP     STOSW
 26181 00004A3D AA                              STOSB
 26182                                  
 26183                                  ;	Set up attribute
 26184                                  	;mov	al, 10h
 26185 00004A3E B010                            MOV     AL,attr_directory
 26186 00004A40 AA                              STOSB
 26187                                  
 26188                                  ;	Initialize time and date of creation
 26189 00004A41 83C70A                          ADD     DI,10
 26190 00004A44 8B36[9E05]                      MOV     SI,[THISSFT]
 26191                                  	;mov	ax,[si+0Dh]
 26192 00004A48 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26193 00004A4B AB                              STOSW
 26194                                  	;mov	ax,[si+0Fh]
 26195 00004A4C 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26196 00004A4F AB                      	STOSW
 26197                                  
 26198                                  ;	Set up first cluster field
 26199 00004A50 89D0                            MOV     AX,DX
 26200 00004A52 AB                              STOSW
 26201                                  
 26202                                  ;	0 file size
 26203 00004A53 31C0                            XOR     AX,AX
 26204 00004A55 AB                              STOSW
 26205 00004A56 AB                              STOSW
 26206 00004A57 C3                              retn
 26207                                  
 26208                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26209                                  ;---------------------------------------------------------------------------
 26210                                  ;
 26211                                  ; Procedure Name : MakeNode
 26212                                  ;
 26213                                  ; Inputs:
 26214                                  ;       AL - attribute to create
 26215                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26216                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26217                                  ;               (AH ignored on dirs and devices)
 26218                                  ;
 26219                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26220                                  ;               a name already existant is ALWAYS an error in these cases.
 26221                                  ;
 26222                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26223                                  ;               terminated)
 26224                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26225                                  ;               ( = -1 if current dir not involved, else
 26226                                  ;                Points to first char after last "/" of current dir part)
 26227                                  ;       [THISCDS] Points to CDS being used
 26228                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26229                                  ; Function:
 26230                                  ;       Make a new node
 26231                                  ; Outputs:
 26232                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26233                                  ;       CARRY SET IF ERROR
 26234                                  ;          AX = 1 A node by this name exists and is a directory
 26235                                  ;          AX = 2 A new node could not be created
 26236                                  ;          AX = 3 A node by this name exists and is a disk file
 26237                                  ;               (AH was NZ on input)
 26238                                  ;          AX = 4 Bad Path
 26239                                  ;               SI return from GetPath maintained
 26240                                  ;          AX = 5 Attribute mismatch
 26241                                  ;          AX = 6 Sharing Violation
 26242                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26243                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26244                                  ;       ELSE
 26245                                  ;          AX = 0 Disk Node
 26246                                  ;          AX = 3 Device Node (error in some cases)
 26247                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26248                                  ;               containing new node.
 26249                                  ;          [CURBUF+2]:BX Points to entry
 26250                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26251                                  ;          [THISSFT] is filled in
 26252                                  ;               sf_mode = unchanged.
 26253                                  ;          Attribute byte in entry is input AL
 26254                                  ; DS preserved, others destroyed
 26255                                  ;
 26256                                  ;-------------------------------------------------------------------------
 26257                                  
 26258                                  ; 19/05/2019 - Retro DOS v4.0
 26259                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26260                                  
 26261                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26262                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26263                                  
 26264                                  MakeNode:
 26265                                  	;mov	word [CREATING],0E5FFh
 26266 00004A58 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26267 00004A5E 50                              PUSH    AX              ; Save AH value
 26268 00004A5F C606[4C03]00            	MOV	byte [NoSetDir],0
 26269 00004A64 A2[6D05]                	MOV	[SATTRIB],AL
 26270 00004A67 E866F5                  	call	GetPathNoSet
 26271 00004A6A 88CA                            MOV     DL,CL           ; Save CL info
 26272 00004A6C 89C1                            MOV     CX,AX           ; Device ID to CH
 26273 00004A6E 58                              POP     AX              ; Get back AH
 26274 00004A6F 732E                            JNC	short make_exists ; File existed
 26275 00004A71 7505                            JNZ	short make_err_4 ; Path bad
 26276 00004A73 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26277 00004A76 7406                            JZ	short make_type	; Name simply not found, and no metas
 26278                                  make_err_4:
 26279 00004A78 B004                            MOV     AL,4            ; case 1 bad path
 26280                                  make_err_ret:
 26281 00004A7A 30E4                            XOR     AH,AH
 26282 00004A7C F9                              STC
 26283                                  ;make_retn:	; 22/11/2022
 26284 00004A7D C3                              retn
 26285                                  
 26286                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26287                                  RENAME_MAKE:
 26288                                  make_type:
 26289                                  ;Extended Open hooks
 26290                                  	; MSDOS 6.0
 26291                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26292 00004A7E F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26293 00004A83 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26294 00004A85 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26295                                  					;FT. set for extended open ;AN000;
 26296                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26297 00004A8A F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26298 00004A8F 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26299 00004A91 F9                      	STC				;FT. set carry			;AN000;
 26300 00004A92 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26301                                  	; 22/11/2022
 26302                                  make_retn:
 26303                                  	;return
 26304 00004A95 C3                      	retn				;FT.				;AN000;
 26305                                  
 26306                                  ;	Extended Open hooks
 26307                                  
 26308                                  make_type2:
 26309 00004A96 C43E[9E05]                      LES     DI,[THISSFT]
 26310 00004A9A 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26311 00004A9C F9                              STC                     ; Not found
 26312 00004A9D EB5A                            JMP     short make_new
 26313                                  
 26314                                  ; The node exists. It may be either a device, directory or file:
 26315                                  ;   Zero set => directory
 26316                                  ;   High bit of CH on => device
 26317                                  ;   else => file
 26318                                  
 26319                                  make_exists:
 26320 00004A9F 7448                            JZ	short make_exists_dir
 26321 00004AA1 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26322                                  	;test	byte [ATTRIB],18h
 26323 00004AA3 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26324 00004AA8 753B                            JNZ	short make_err_ret_5
 26325                                  				; Cannot already exist as Disk or Device Node
 26326                                                                  ;       if making DIR or Volume ID
 26327 00004AAA 08ED                            OR      CH,CH
 26328 00004AAC 781A                            JS	short make_share ; No further checks on attributes if device
 26329 00004AAE 08E4                            OR      AH,AH
 26330 00004AB0 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26331 00004AB2 51                              PUSH    CX              ; Save device ID
 26332 00004AB3 8E06[E405]                      MOV     ES,[CURBUF+2]
 26333                                  	;mov	ch,[es:bx+0Bh]
 26334 00004AB7 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26335                                  	;test	ch,1
 26336 00004ABB F6C501                  	test	CH,attr_read_only
 26337 00004ABE 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26338 00004AC0 E8B8F7                  	call	MatchAttributes
 26339 00004AC3 59                              POP     CX              ; Devid back in CH
 26340 00004AC4 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26341 00004AC6 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26342                                  make_share:
 26343 00004AC8 30E4                            XOR     AH,AH
 26344 00004ACA 50                              PUSH    AX              ; Save Disk or Device node
 26345 00004ACB 51                              PUSH    CX              ; Save Device ID
 26346 00004ACC 88EC                            MOV     AH,CH           ; Device ID to AH
 26347 00004ACE E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26348 00004AD1 C43E[9E05]                      LES     DI,[THISSFT]
 26349 00004AD5 56                      	push	si
 26350 00004AD6 53                      	push	bx		; Save CURBUF pointers
 26351 00004AD7 E89C29                  	call	ShareEnter
 26352 00004ADA 735A                            jnc	short MakeEndShare
 26353                                  
 26354                                  ; User failed request.
 26355 00004ADC 5B                      	pop	bx
 26356 00004ADD 5E                      	pop	si
 26357 00004ADE 59                      	pop	cx
 26358 00004ADF 58                      	pop	ax
 26359                                  
 26360                                  Make_Share_ret:
 26361 00004AE0 B006                            MOV     AL,6
 26362 00004AE2 EB96                            JMP	short make_err_ret
 26363                                  
 26364                                  make_err_ret_5P:
 26365 00004AE4 59                              POP     CX              ; Get back device ID
 26366                                  make_err_ret_5:
 26367 00004AE5 B005                            MOV     AL,5            ; Attribute mismatch
 26368                                          ; 22/11/2022
 26369 00004AE7 EB91                    	JMP     short make_err_ret
 26370                                  
 26371                                  make_exists_dir:
 26372 00004AE9 B001                            MOV     AL,1            ; exists as directory, always an error
 26373                                  	; 22/11/2022
 26374 00004AEB EB8D                    	JMP     short make_err_ret
 26375                                  
 26376                                  make_save:
 26377 00004AED 50                              PUSH    AX              ; Save whether Disk or File
 26378 00004AEE 89C8                            MOV     AX,CX           ; Device ID to AH
 26379 00004AF0 E87400                          CALL    NEWENTRY
 26380 00004AF3 58                              POP     AX              ; 0 if Disk, 3 if File
 26381 00004AF4 739F                            jnc	short make_retn
 26382 00004AF6 B002                            MOV     AL,2            ; create failed case 2
 26383                                  make_save_retn:
 26384 00004AF8 C3                              retn
 26385                                  
 26386                                  make_new:
 26387 00004AF9 E8F1FF                          call    make_save
 26388 00004AFC 72FA                            jc	short make_save_retn	; case 2 fail
 26389                                  	;test	byte [ATTRIB],10h
 26390 00004AFE F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26391 00004B03 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26392                                  					; so don't tell the sharer about them
 26393 00004B05 50                      	push	ax
 26394 00004B06 53                      	push	bx
 26395 00004B07 56                      	push	si		
 26396 00004B08 E86B29                          call	ShareEnter
 26397 00004B0B 5E                      	pop	si
 26398 00004B0C 5B                      	pop	bx
 26399 00004B0D 58                      	pop	ax
 26400 00004B0E 73E8                    	jnc	short make_save_retn
 26401                                  
 26402                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26403                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26404                                  ; possible: delete the newly created directory entry and return share_error.
 26405                                  
 26406 00004B10 50                              PUSH    AX
 26407 00004B11 C43E[E205]                      LES     DI,[CURBUF]
 26408                                  	;mov	byte [es:bx],0E5h
 26409 00004B15 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26410                                  	
 26411                                  	; MSDOS 6.0
 26412                                  	;test	byte [es:di+5],40h
 26413 00004B19 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26414                                  					;LB. if already dirty		  ;AN000;
 26415 00004B1E 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26416                                  	; 22/11/2022
 26417 00004B20 E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26418                                  	;or	byte [es:di+5],40h
 26419 00004B23 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26420                                  yesdirty8:
 26421 00004B28 C42E[8A05]                      LES     BP,[THISDPB]
 26422                                  	; 15/12/2022
 26423 00004B2C 268A4600                        mov	al,[ES:BP]
 26424                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26425                                  	;;mov	al,[es:bp+0]
 26426                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26427 00004B30 E80C10                          call	FLUSHBUF		; write out buffer.
 26428 00004B33 58                              POP     AX
 26429 00004B34 EBAA                            jmp	short Make_Share_ret
 26430                                  
 26431                                  ; We have found an existing file. We have also entered it into the share set.
 26432                                  ; At this point we need to call newentry to correctly address the problem of
 26433                                  ; getting rid of old data (create an existing file) or creating a new
 26434                                  ; directory entry (create a new file). Unfortunately, this operation may
 26435                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26436                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26437                                  ; the share set now, do the operation and then reassert the share access.
 26438                                  ;
 26439                                  ; We are allowed to do this! There is no window! After all, we are in
 26440                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26441                                  
 26442                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26443                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26444                                  
 26445                                  MakeEndShare:
 26446 00004B36 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26447 00004B3A 31C0                            XOR     AX,AX
 26448 00004B3C E819C8                  	call	ECritSFT
 26449 00004B3F 268705                  	xchg	AX,[ES:DI]
 26450                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26451 00004B42 50                      	push	ax
 26452 00004B43 57                      	push	di
 26453 00004B44 06                      	push	es
 26454 00004B45 9C                              PUSHF
 26455 00004B46 E82829                          call	ShareEnd                ; remove sharing
 26456 00004B49 9D                              POPF
 26457 00004B4A 07                      	pop	es
 26458 00004B4B 5F                      	pop	di
 26459 00004B4C 268F05                          pop	word [ES:DI]	
 26460                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26461 00004B4F E821C8                  	call	LCritSFT
 26462                                  	; 22/11/2022
 26463                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26464 00004B52 5B                      	pop	bx
 26465 00004B53 5E                      	pop	si
 26466 00004B54 59                      	pop	cx
 26467 00004B55 58                      	pop	ax
 26468 00004B56 E894FF                          CALL    make_save
 26469                                  
 26470                                  ; If the user failed, we do not reenter into the sharing set.
 26471                                  
 26472 00004B59 729D                            jc	short make_save_retn	; bye if error
 26473 00004B5B 50                      	push	ax
 26474 00004B5C 53                      	push	bx
 26475 00004B5D 56                      	push	si
 26476 00004B5E 9C                              PUSHF
 26477 00004B5F E81429                          call	ShareEnter
 26478 00004B62 9D                              POPF
 26479 00004B63 5E                      	pop	si
 26480 00004B64 5B                      	pop	bx
 26481 00004B65 58                      	pop	ax
 26482                                  
 26483                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26484                                  
 26485                                  makeendshare_retn:
 26486 00004B66 C3                              retn
 26487                                  
 26488                                  ;---------------------------------------------------------------------------
 26489                                  ;
 26490                                  ; Procedure Name : NEWENTRY
 26491                                  ;
 26492                                  ; Inputs:
 26493                                  ;       [THISSFT] set
 26494                                  ;       [THISDPB] set
 26495                                  ;       [LASTENT] current last valid entry number in directory if no free
 26496                                  ;               entries
 26497                                  ;       [VOLID] set if a volume ID was found during search
 26498                                  ;	Attrib Contains attributes for new file
 26499                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26500                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26501                                  ;               NC means file existed (device)
 26502                                  ;               C  means file did not exist
 26503                                  ;       AH = Device ID byte
 26504                                  ;       If FILE
 26505                                  ;           [CURBUF+2]:BX points to start of directory entry
 26506                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26507                                  ;       If device
 26508                                  ;           DS:BX points to start of "fake" directory entry
 26509                                  ;           DS:SI points to dir_first of "fake" directory entry
 26510                                  ;               (has DWORD pointer to device header)
 26511                                  ; Function:
 26512                                  ;       Make a new directory entry
 26513                                  ;       If an old one existed it is truncated first
 26514                                  ; Outputs:
 26515                                  ;       Carry set if error
 26516                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26517                                  ;               vol ID, user FAILed to I 24
 26518                                  ;       else
 26519                                  ;               outputs of DOOPEN
 26520                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26521                                  ;
 26522                                  ;----------------------------------------------------------------------------
 26523                                  
 26524                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26525                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26526                                  
 26527                                  NEWENTRY:
 26528 00004B67 C42E[8A05]                      LES     BP,[THISDPB]
 26529 00004B6B 7316                            JNC	short EXISTENT	
 26530 00004B6D 803E[4A03]00                    CMP     byte [FAILERR],0
 26531 00004B72 F9                              STC
 26532 00004B73 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26533 00004B75 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26534 00004B78 72EC                            jc	short makeendshare_retn	; Failed
 26535 00004B7A E8BEF3                          call	GETENT          ; Point at that free entry
 26536 00004B7D 72E7                            jc	short makeendshare_retn	; Failed
 26537 00004B7F EB0E                            JMP     SHORT FREESPOT
 26538                                  
 26539                                  ERRRET3:
 26540 00004B81 F9                              STC
 26541                                  newentry_retn:
 26542 00004B82 C3                              retn
 26543                                  
 26544                                  EXISTENT:
 26545 00004B83 08E4                            OR      AH,AH           ; Check if file is I/O device
 26546 00004B85 7903                            JNS	short NOT_DEV1
 26547 00004B87 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26548                                  
 26549                                  NOT_DEV1:
 26550 00004B8A E82C01                          call	FREEENT		; Free cluster chain
 26551 00004B8D 72F3                            jc	short newentry_retn ; Failed
 26552                                  FREESPOT:
 26553                                  	;test	byte [ATTRIB],8
 26554 00004B8F F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26555 00004B94 7407                            JZ	short NOTVOLID
 26556 00004B96 803E[7B05]00                    CMP     BYTE [VOLID],0
 26557 00004B9B 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26558                                  NOTVOLID:
 26559 00004B9D 8E06[E405]                      MOV     ES,[CURBUF+2]
 26560 00004BA1 89DF                            MOV     DI,BX
 26561                                  
 26562 00004BA3 BE[4B05]                        MOV     SI,NAME1
 26563                                  
 26564 00004BA6 B90500                          MOV     CX,5
 26565 00004BA9 F3A5                            REP     MOVSW
 26566 00004BAB A4                              MOVSB                   ; Move name into dir entry
 26567 00004BAC A0[6B05]                	MOV	AL,[ATTRIB]
 26568 00004BAF AA                      	STOSB                   ; Attributes
 26569                                  
 26570                                  ;; File Tagging for Create DOS 4.00
 26571 00004BB0 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26572                                  ;; File Tagging for Create DOS 4.00
 26573                                  
 26574 00004BB2 31C0                            XOR     AX,AX
 26575 00004BB4 F3AB                            REP     STOSW           ; Zero pad
 26576 00004BB6 E856BF                          call	DATE16
 26577 00004BB9 92                              XCHG    AX,DX
 26578 00004BBA AB                              STOSW                   ; dir_time
 26579 00004BBB 92                              XCHG    AX,DX
 26580 00004BBC AB                              STOSW                   ; dir_date
 26581 00004BBD 31C0                            XOR     AX,AX
 26582 00004BBF 57                              PUSH    DI              ; Correct SI input value
 26583                                  				; 	(recomputed for new buffer)
 26584 00004BC0 AB                              STOSW                   ; Zero dir_first and size
 26585 00004BC1 AB                              STOSW
 26586 00004BC2 AB                              STOSW
 26587                                  updnxt:
 26588 00004BC3 8B36[E205]              	MOV	SI,[CURBUF]
 26589                                  
 26590                                  	; 19/05/2019 - Retro DOS v4.0
 26591                                  
 26592                                  	; MSDOS 6.0
 26593 00004BC7 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26594                                  				;LB. if already dirty		  ;AN000;
 26595 00004BCC 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26596 00004BCE E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26597                                          
 26598                                  	;or	byte [es:si+5],40h
 26599 00004BD1 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26600                                  yesdirty9:
 26601 00004BD6 C42E[8A05]                      LES     BP,[THISDPB]
 26602                                  	; 15/12/2022
 26603 00004BDA 268A4600                	MOV	AL,[ES:BP]
 26604                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26605                                  	;;mov	al,[es:bp+0]
 26606                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26607 00004BDE 50                              PUSH    AX
 26608 00004BDF 53                              PUSH    BX
 26609                                  
 26610                                  ; If we have a file, we need to increment the open ref. count so that
 26611                                  ; we have some protection against invalid media changes if an Int 24
 26612                                  ; error occurs.
 26613                                  ; Do nothing for a device.
 26614                                  
 26615 00004BE0 06                      	push	es
 26616 00004BE1 57                      	push	di
 26617 00004BE2 C43E[9E05]                      LES     DI,[THISSFT]
 26618                                  	;test	word [es:di+5],80h
 26619                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26620 00004BE6 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26621 00004BEB 751A                            jnz	short GotADevice
 26622 00004BED 1E                      	push	ds
 26623 00004BEE 53                      	push	bx
 26624 00004BEF C51E[8A05]                      LDS     BX,[THISDPB]
 26625                                  	;mov	[es:di+7],bx
 26626 00004BF3 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26627 00004BF7 8CDB                            MOV     BX,DS
 26628                                  	;mov	[es:di+9],bx
 26629 00004BF9 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26630 00004BFD 5B                      	pop	bx
 26631 00004BFE 1F                      	pop	ds ; need to use DS for segment later on
 26632 00004BFF E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26633 00004C02 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26634                                  GotADevice:
 26635 00004C07 5F                      	pop	di
 26636 00004C08 07                      	pop	es
 26637                                  
 26638 00004C09 E8330F                          call	FLUSHBUF
 26639 00004C0C E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26640 00004C0F 5B                              POP     BX
 26641 00004C10 58                              POP     AX
 26642 00004C11 5E                              POP     SI              ; Get SI input back
 26643 00004C12 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26644 00004C14 7301                    	jnc	short DOOPEN    ; Failed
 26645 00004C16 C3                      	retn
 26646                                  	
 26647                                  ;NOTE FALL THROUGH
 26648                                  
 26649                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26650                                  
 26651                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26652                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26653                                  
 26654                                  ; DOOPEN
 26655                                  ;----------------------------------------------------------------------------
 26656                                  ;
 26657                                  ; Inputs:
 26658                                  ;       [THISDPB] points to DPB if file
 26659                                  ;       [THISSFT] points to SFT being used
 26660                                  ;       AH = Device ID byte
 26661                                  ;       If FILE
 26662                                  ;           [CURBUF+2]:BX points to start of directory entry
 26663                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26664                                  ;       If device
 26665                                  ;           DS:BX points to start of "fake" directory entry
 26666                                  ;           DS:SI points to dir_first of "fake" directory entry
 26667                                  ;               (has DWORD pointer to device header)
 26668                                  ; Function:
 26669                                  ;       Fill in SFT from dir entry
 26670                                  ; Outputs:
 26671                                  ;       CARRY CLEAR
 26672                                  ;       sf_ref_count and sf_mode fields not altered
 26673                                  ;       sf_flags high byte = 0
 26674                                  ;       sf_flags low byte = AH except
 26675                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26676                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26677                                  ;       sf_position = 0
 26678                                  ;       If device
 26679                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26680                                  ;           sf_size = 0
 26681                                  ;       If file
 26682                                  ;           sf_firclus sf_size set from entry
 26683                                  ;           sf_devptr = [THISDPB]
 26684                                  ;           sf_cluspos = 0
 26685                                  ;           sf_lstclus = sf_firclus
 26686                                  ;           sf_dirsec sf_dirpos set
 26687                                  ; DS,SI,BX preserved, others destroyed
 26688                                  ;
 26689                                  ;----------------------------------------------------------------------------
 26690                                  
 26691                                  	;entry	DOOPEN
 26692                                  DOOPEN:
 26693                                  ;	Generate and store attribute
 26694                                  
 26695 00004C17 88E6                            MOV     DH,AH           ; AH to different place
 26696 00004C19 C43E[9E05]                      LES     DI,[THISSFT]
 26697                                  	;add	di,4
 26698 00004C1D 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26699 00004C20 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26700                                                                  ;   attribute of 0 (for R/O testing etc).
 26701 00004C22 08F6                            OR      DH,DH           ; See if our assumption good.
 26702 00004C24 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26703 00004C26 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26704                                  	;mov	al,[BX+0Bh]
 26705 00004C2A 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26706                                  				; If file, get attrib from dir entry
 26707                                  DEV_SFT1:
 26708 00004C2D AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26709                                  
 26710                                  ;	Generate and store flags word
 26711                                  
 26712 00004C2E 31C0                            XOR     AX,AX
 26713 00004C30 88F0                            MOV     AL,DH
 26714                                  	;or	al,40h
 26715 00004C32 0C40                            OR      AL,devid_file_clean
 26716 00004C34 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26717                                  
 26718                                  ;	Generate and store device pointer
 26719                                  
 26720 00004C35 1E                              PUSH    DS
 26721                                  	;lds	ax,[bx+1Ah]
 26722 00004C36 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26723 00004C39 08F6                            OR      DH,DH
 26724 00004C3B 7805                            JS	short DEV_SFT2
 26725                                  
 26726                                  ;hkn; SS override
 26727 00004C3D 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26728                                  DEV_SFT2:
 26729 00004C42 AB                              STOSW 			; store offset
 26730 00004C43 8CD8                            MOV     AX,DS
 26731 00004C45 1F                              POP     DS
 26732 00004C46 AB                      	STOSW			; store segment
 26733                                  				; ES:DI -> sf_firclus
 26734                                  
 26735                                  ;	Generate pointer to, generate and store first cluster 
 26736                                  ;	(irrelevant for devices)
 26737                                  
 26738 00004C47 56                              PUSH    SI              ; Save pointer to dir_first
 26739 00004C48 A5                              MOVSW                   ; dir_first -> sf_firclus
 26740                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26741                                  
 26742                                  ;	Copy time/date of last modification
 26743                                  
 26744                                  	;sub	si,6
 26745 00004C49 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26746                                  				; DS:SI->dir_time
 26747 00004C4C A5                              MOVSW                   ; dir_time -> sf_time
 26748                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26749 00004C4D A5                              MOVSW                   ; dir_date -> sf_date
 26750                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26751                                  
 26752                                  ;	Generate and store file size (0 for devices)
 26753                                  
 26754 00004C4E AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26755 00004C4F AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26756 00004C50 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26757 00004C52 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26758 00004C53 08F6                            OR      DH,DH
 26759 00004C55 7904                            JNS	short FILE_SFT1
 26760 00004C57 31C0                            XOR     AX,AX
 26761 00004C59 89C1                            MOV     CX,AX           ; Devices are open ended
 26762                                  FILE_SFT1:
 26763 00004C5B 91                              XCHG    AX,CX
 26764 00004C5C AB                              STOSW                   ; Low word of sf_size
 26765 00004C5D 91                              XCHG    AX,CX
 26766 00004C5E AB                              STOSW                   ; High word of sf_size
 26767                                                                  ; ES:DI -> sf_position
 26768                                  ; Initialize position to 0
 26769                                  
 26770 00004C5F 31C0                            XOR     AX,AX
 26771 00004C61 AB                              STOSW
 26772 00004C62 AB                              STOSW                   ; sf_position
 26773                                                                  ; ES:DI -> sf_cluspos
 26774                                  
 26775                                  ; Generate cluster optimizations for files
 26776                                  
 26777 00004C63 08F6                            OR      DH,DH
 26778 00004C65 7843                            JS	short DEV_SFT3
 26779 00004C67 AB                              STOSW                   ; sf_cluspos ; 19h
 26780                                  	;mov	ax,[bx+1Ah]
 26781 00004C68 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26782                                  	; 19/05/2019
 26783                                  	; MSDOS 3.3
 26784                                  	;STOSW 			; sf_lstclus ; 1Bh
 26785                                  	; MSDOS 6.0
 26786 00004C6B 57                              PUSH	DI              ;AN004; save dirsec offset
 26787                                  	;sub	di,1Bh
 26788 00004C6C 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26789                                  	;mov	[es:di+35h],ax
 26790 00004C6F 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26791 00004C73 5F                              POP	DI              ;AN004; restore dirsec offset
 26792                                  
 26793                                  ; DOS 3.3  FastOpen  6/13/86
 26794                                  
 26795 00004C74 1E                      	PUSH	DS
 26796                                  
 26797                                  ;hkn; SS is DOSDATA
 26798 00004C75 16                      	push	ss
 26799 00004C76 1F                      	pop	ds
 26800                                  	;test	byte [FastOpenFlg],4
 26801 00004C77 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26802 00004C7C 7411                    	JZ	short Not_FastOpen
 26803                                  
 26804                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26805 00004C7E BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26806                                  
 26807                                  	;mov	ax,[si+1]
 26808 00004C81 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26809 00004C84 AB                              STOSW                   ; sf_dirsec
 26810                                  	; MSDOS 6.0
 26811                                  	;mov	ax,[si+3]
 26812 00004C85 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26813                                  				;;; changed for >32mb
 26814 00004C88 AB                              STOSW                   ; sf_dirsec
 26815                                  	; 19/08//2018
 26816 00004C89 8A04                    	mov	al,[SI]
 26817                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26818 00004C8B AA                              STOSB                   ; sf_dirpos
 26819 00004C8C 1F                              POP	DS
 26820 00004C8D EB19                            JMP     short Next_Name
 26821                                  
 26822                                  ; DOS 3.3  FastOpen  6/13/86
 26823                                  
 26824                                  Not_FastOpen:
 26825                                          ;POP     DS		; normal path
 26826                                  
 26827                                  ;hkn; SS override
 26828                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26829                                  	; 16/12/2022
 26830                                  	; 28/07/2019
 26831 00004C8F 8B36[E205]              	mov	si,[CURBUF]
 26832 00004C93 1F                      	pop	ds
 26833                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26834                                  	;pop	ds
 26835                                  	;mov	si,[ss:CURBUF]
 26836                                  	
 26837                                  	;mov	ax,[si+6]
 26838 00004C94 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26839 00004C97 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26840                                  	; 19/05/2019        
 26841                                  	; MSDOS 6.0
 26842                                  	;mov	ax,[si+8]
 26843 00004C98 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26844 00004C9B AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26845                                          
 26846 00004C9C 89D8                    	MOV     AX,BX
 26847                                  	;;add	si,16	; MSDOS 3.3	
 26848                                  	;add	si,20	; MSDOS 6.0
 26849 00004C9E 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26850 00004CA1 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26851                                          ;mov	cl,32
 26852 00004CA3 B120                    	MOV     CL,dir_entry.size
 26853 00004CA5 F6F1                            DIV     CL
 26854 00004CA7 AA                              STOSB                   ; sf_dirpos
 26855                                  Next_Name:
 26856 00004CA8 EB03                            JMP     SHORT FILE_SFT2
 26857                                  
 26858                                  DEV_SFT3:
 26859                                  	;add	di,7
 26860 00004CAA 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26861                                  FILE_SFT2:
 26862                                  
 26863                                  ; Copy in the object's name
 26864                                  
 26865 00004CAD 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26866 00004CAF B90B00                          MOV     CX,11
 26867 00004CB2 F3A4                            REP     MOVSB           ; sf_name
 26868 00004CB4 5E                              POP     SI              ; recover DS:SI -> dir_first
 26869                                  
 26870                                  ;hkn; SS is DOSDATA
 26871 00004CB5 16                              push	ss
 26872 00004CB6 1F                      	pop	ds
 26873 00004CB7 F8                              CLC
 26874 00004CB8 C3                              retn
 26875                                  
 26876                                  ;---------------------------------------------------------------------------
 26877                                  ;
 26878                                  ; Procedure Name : FREEENT
 26879                                  ;
 26880                                  ; Inputs:
 26881                                  ;       ES:BP -> DPB
 26882                                  ;       [CURBUF] Set
 26883                                  ;       [CURBUF+2]:BX points to directory entry
 26884                                  ;       [CURBUF+2]:SI points to above dir_first
 26885                                  ; Function:
 26886                                  ;       Free the cluster chain for the entry if present
 26887                                  ; Outputs:
 26888                                  ;       Carry set if error (currently user FAILed to I 24)
 26889                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26890                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26891                                  ;---------------------------------------------------------------------------
 26892                                  
 26893                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26894                                  FREEENT:
 26895 00004CB9 1E                              PUSH    DS
 26896 00004CBA C53E[E205]                      LDS     DI,[CURBUF]
 26897 00004CBE 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26898                                  	; 19/05/2019 - Retro DOS v4.0
 26899                                  	; MSDOS 6.0
 26900 00004CC0 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26901                                  ;hkn; SS override
 26902 00004CC3 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26903 00004CC8 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26904 00004CCB 1F                              POP     DS
 26905 00004CCC 83F902                  	CMP	CX,2
 26906 00004CCF 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26907                                  	;cmp	cx,[es:bp+0Dh]
 26908 00004CD1 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26909 00004CD5 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26910 00004CD7 29FB                            SUB     BX,DI
 26911 00004CD9 53                              PUSH    BX              ; Save offset
 26912 00004CDA FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26913 00004CDE 52                              PUSH    DX              ; Save sector number
 26914 00004CDF 89CB                            MOV     BX,CX
 26915 00004CE1 E8B702                          call	RELEASE         ; Free any data allocated
 26916 00004CE4 5A                              POP     DX
 26917 00004CE5 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26918 00004CE9 7302                            JNC	short GET_BUF_BACK
 26919 00004CEB 5B                              POP     BX
 26920                                  freeent_retn:
 26921 00004CEC C3                              retn			; Screw up
 26922                                  
 26923                                  GET_BUF_BACK:
 26924                                  	;mov	byte [ALLOWED],18h
 26925 00004CED C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26926 00004CF2 30C0                            XOR     AL,AL
 26927 00004CF4 E84A0D                  	call	GETBUFFR        ; Get sector back
 26928 00004CF7 5B                              POP     BX              ; Get offset back
 26929 00004CF8 72F2                            jc	short freeent_retn
 26930 00004CFA E86DEA                  	call	SET_BUF_AS_DIR
 26931 00004CFD 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26932 00004D01 89DE                            MOV     SI,BX
 26933                                  	;add	si,1Ah
 26934 00004D03 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26935                                  RET1:
 26936 00004D06 F8                              CLC
 26937 00004D07 C3                              retn
 26938                                  
 26939                                  ;---------------------------------------------------------------------------
 26940                                  ;
 26941                                  ; Procedure Name : CHECK_VIRT_OPEN
 26942                                  ;
 26943                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26944                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26945                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26946                                  ; flag [VIRTUAL_OPEN].
 26947                                  ; No registers affected (including flags).
 26948                                  ; On input, [THISSFT] points to current SFT.
 26949                                  ;
 26950                                  ;---------------------------------------------------------------------------
 26951                                  
 26952                                  CHECK_VIRT_OPEN:
 26953 00004D08 50                      	PUSH    AX
 26954 00004D09 9F                              lahf                    ; preserve flags
 26955 00004D0A 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26956 00004D0F 7410                            JZ	short ALL_CLOSED
 26957 00004D11 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26958 00004D16 06                      	push	es
 26959 00004D17 57                      	push	di
 26960 00004D18 C43E[9E05]                      LES     DI,[THISSFT]
 26961 00004D1C E88CF9                          call	DEV_CLOSE_SFT
 26962 00004D1F 5F                      	pop	di
 26963 00004D20 07                      	pop	es
 26964                                  
 26965                                  ALL_CLOSED:
 26966 00004D21 9E                              sahf                    ; restore flags
 26967 00004D22 58                              POP     AX
 26968 00004D23 C3                              retn
 26969                                  
 26970                                  ;============================================================================
 26971                                  ; ROM.ASM, MSDOS 6.0, 1991
 26972                                  ;============================================================================
 26973                                  ; 29/07/2018 - Retro DOS v3.0
 26974                                  ; 20/05/2019 - Retro DOS v4.0
 26975                                  
 26976                                  ;	TITLE	ROM - Miscellaneous routines
 26977                                  ;	NAME	ROM
 26978                                  
 26979                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 26980                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 26981                                  ;
 26982                                  ;	SKPCLP
 26983                                  ;	FNDCLUS
 26984                                  ;	BUFSEC
 26985                                  ;	BUFRD
 26986                                  ;	BUFWRT
 26987                                  ;	NEXTSEC
 26988                                  ;	OPTIMIZE
 26989                                  ;	FIGREC
 26990                                  ;	ALLOCATE
 26991                                  ;	RESTFATBYT
 26992                                  ;	RELEASE
 26993                                  ;	RELBLKS
 26994                                  ;	GETEOF
 26995                                  ;
 26996                                  ;	Modification history:
 26997                                  ;
 26998                                  ;		Created: ARR 30 March 1983
 26999                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27000                                  
 27001                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27002                                  ;--------------------------------------------------------------------------
 27003                                  ;
 27004                                  ; Procedure Name : FNDCLUS
 27005                                  ;
 27006                                  ; Inputs:
 27007                                  ;       CX = No. of clusters to skip
 27008                                  ;       ES:BP = Base of drive parameters
 27009                                  ;       [THISSFT] point to SFT
 27010                                  ; Outputs:
 27011                                  ;       BX = Last cluster skipped to
 27012                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27013                                  ;       DX = Position of last cluster
 27014                                  ;       Carry set if error (currently user FAILed to I 24)
 27015                                  ; DI destroyed. No other registers affected.
 27016                                  ;--------------------------------------------------------------------------
 27017                                  
 27018                                  ; 20/05/2019 - Retro DOS v4.0
 27019                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27020                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27021                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27022                                  
 27023                                  FNDCLUS:
 27024 00004D24 06                      	PUSH	ES
 27025 00004D25 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27026                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27027                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27028 00004D29 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27029                                  	;mov	dx,[es:di+19h]
 27030 00004D2D 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27031 00004D31 09DB                    	OR	BX,BX
 27032 00004D33 7424                    	JZ	short NOCLUS
 27033                                  
 27034 00004D35 29D1                            SUB     CX,DX
 27035 00004D37 7308                            JNB	short FINDIT
 27036                                  
 27037 00004D39 01D1                            ADD     CX,DX
 27038 00004D3B 31D2                            XOR     DX,DX
 27039                                  	;mov	bx,[es:di+0Bh]
 27040 00004D3D 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27041                                  FINDIT:
 27042 00004D41 07                              POP	ES
 27043 00004D42 E313                    	JCXZ	RET9
 27044                                  
 27045                                  	;entry	SKPCLP
 27046                                  SKPCLP:
 27047 00004D44 E8D808                  	call	UNPACK
 27048 00004D47 7214                            jc	short fndclus_retn	; retc
 27049                                  
 27050                                  	; 09/09/2018
 27051                                  
 27052                                  	; MSDOS 3.3
 27053                                  	;push	bx
 27054                                  	;mov	bx,di
 27055                                  	;call	IsEOF
 27056                                  	;pop	bx	
 27057                                  	;jae	short RET9
 27058                                  
 27059                                  	; 20/05/2019 - Retro DOS v4.0
 27060                                  
 27061                                  	; MSDOS 6.0
 27062 00004D49 87DF                    	xchg	bx,di
 27063 00004D4B E8BA08                  	call	IsEOF
 27064 00004D4E 87DF                    	xchg	bx,di
 27065 00004D50 7305                    	jae	short RET9
 27066                                  
 27067 00004D52 87DF                            XCHG    BX,DI
 27068 00004D54 42                              INC     DX
 27069                                  
 27070 00004D55 E2ED                    	LOOP	SKPCLP			; RMFS
 27071                                  RET9:	
 27072 00004D57 F8                      	CLC
 27073 00004D58 C3                              retn
 27074                                  NOCLUS:
 27075 00004D59 07                              POP	ES
 27076 00004D5A 41                              INC	CX
 27077 00004D5B 4A                              DEC	DX
 27078 00004D5C F8                              CLC
 27079                                  
 27080                                  fndclus_retn:
 27081 00004D5D C3                              retn
 27082                                  
 27083                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27084                                  ;--------------------------------------------------------------------------
 27085                                  ;
 27086                                  ; Procedure Name : BUFSEC
 27087                                  ;
 27088                                  ; Inputs:
 27089                                  ;       AH = priority of buffer
 27090                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27091                                  ;       ES:BP = Base of drive parameters
 27092                                  ;       [CLUSNUM] = Physical cluster number
 27093                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27094                                  ;       [BYTCNT1] = Size of transfer
 27095                                  ; Function:
 27096                                  ;       Insure specified sector is in buffer, flushing buffer before
 27097                                  ;       read if necessary.
 27098                                  ; Outputs:
 27099                                  ;       ES:DI = Pointer to buffer
 27100                                  ;       SI = Pointer to transfer address
 27101                                  ;       CX = Number of bytes
 27102                                  ;       [NEXTADD] updated
 27103                                  ;       [TRANS] set to indicate a transfer will occur
 27104                                  ;       Carry set if error (user FAILed to I 24)
 27105                                  ;--------------------------------------------------------------------------
 27106                                  
 27107                                  BUFSEC:
 27108 00004D5E 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27109 00004D62 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27110                                  	;mov	byte [ALLOWED],38h
 27111 00004D66 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27112 00004D6B E85501                          CALL    FIGREC
 27113 00004D6E E8D00C                  	call	GETBUFFR
 27114 00004D71 72EA                            jc	short fndclus_retn
 27115                                  
 27116 00004D73 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27117 00004D78 8B36[B805]                      MOV     SI,[NEXTADD]
 27118 00004D7C 89F7                            MOV     DI,SI
 27119 00004D7E 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27120 00004D82 01CF                            ADD     DI,CX
 27121 00004D84 893E[B805]                      MOV     [NEXTADD],DI
 27122 00004D88 C43E[E205]                      LES     DI,[CURBUF]
 27123                                  	;or	byte [es:di+5],8
 27124 00004D8C 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27125                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27126                                  	;lea	di,[di+20] ; MSDOS 6.0
 27127 00004D91 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27128 00004D94 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27129 00004D98 F8                              CLC
 27130 00004D99 C3                              retn
 27131                                  
 27132                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27133                                  
 27134                                  ;---------------------------------------------------------------------------
 27135                                  ;
 27136                                  ; Procedure Name : BUFRD
 27137                                  ;
 27138                                  ; Do a partial sector read via one of the system buffers
 27139                                  ; ES:BP Points to DPB
 27140                                  ; Carry set if error (currently user FAILed to I 24)
 27141                                  ;
 27142                                  ; DS - set to DOSDATA
 27143                                  ;
 27144                                  ;----------------------------------------------------------------------------
 27145                                  
 27146                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27147                                  	; 20/05/2019 - Retro DOS v4.0
 27148                                  BUFRD:
 27149 00004D9A 06                              PUSH	ES
 27150 00004D9B 31C0                            xor	ax, ax			; pre-read sector
 27151 00004D9D E8BEFF                          CALL    BUFSEC
 27152 00004DA0 7303                            JNC	short BUF_OK
 27153                                  
 27154                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27155 00004DA2 07                              POP	ES
 27156 00004DA3 EB2B                            JMP     SHORT RBUFPLACED
 27157                                  
 27158                                  BUF_OK:
 27159 00004DA5 8CC3                            MOV     BX,ES
 27160 00004DA7 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27161 00004DAB 8EDB                            MOV     DS,BX
 27162 00004DAD 87FE                    	XCHG    DI,SI
 27163 00004DAF D1E9                            SHR     CX,1
 27164                                  ;M039
 27165                                  	; MSDOS 3.3
 27166                                  	;JNC	short EVENRD
 27167                                  	;MOVSB
 27168                                  ;EVENRD:
 27169                                  	;REP     MOVSW
 27170                                  
 27171                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27172                                  ;       DS:SI-> Source within Buffer.
 27173                                  ;       ES:DI-> Destination within Transfer memory block.
 27174                                  
 27175                                  	; MSDOS 6.0
 27176 00004DB1 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27177                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27178                                  	;rep	movsb                   ;Copy last byte.
 27179                                  	; 16/12/2022
 27180 00004DB3 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27181 00004DB5 A4                      	movsb ; ****
 27182                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27183                                  	;adc	cx,0
 27184                                  	;rep	movsb
 27185                                  ;M039
 27186                                  EVENRD: ; ****
 27187 00004DB6 07                              POP	ES
 27188                                  ;hkn; SS override
 27189 00004DB7 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27190                                  	;;lea	bx,[di+16]
 27191                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27192 00004DBC 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27193 00004DBF 29DE                            SUB     SI,BX                   ; Position in buffer
 27194 00004DC1 E8310C                          call	PLACEBUF
 27195                                  	;cmp	si,[es:bp+2]
 27196 00004DC4 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27197 00004DC8 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27198                                  ;M039
 27199                                  	; MSDOS 3.3
 27200                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27201                                                                          ;  even though it is MRU.
 27202                                          ; MSDOS 6.0
 27203 00004DCA 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27204                                  ;M039					; chucking even though it is MRU.
 27205                                  
 27206                                  RBUFPLACEDC:
 27207 00004DCF F8                              CLC
 27208                                  RBUFPLACED:
 27209 00004DD0 16                      	push	ss
 27210 00004DD1 1F                      	pop	ds
 27211 00004DD2 C3                              retn
 27212                                  
 27213                                  ;----------------------------------------------------------------------------
 27214                                  ;
 27215                                  ; Procedure : BUFWRT
 27216                                  ;
 27217                                  ; Do a partial sector write via one of the system buffers
 27218                                  ; ES:BP Points to DPB
 27219                                  ; Carry set if error (currently user FAILed to I 24)
 27220                                  ;
 27221                                  ; DS - set to DOSDATA
 27222                                  ;
 27223                                  ;----------------------------------------------------------------------------
 27224                                  
 27225                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27226                                  	; 20/05/2019 - Retro DOS v4.0
 27227                                  BUFWRT:
 27228 00004DD3 A1[C405]                        MOV     AX,[SECPOS]
 27229                                          ; MSDOS 6.0
 27230 00004DD6 83C001                  	ADD	AX,1            	; Set for next sector
 27231 00004DD9 A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27232 00004DDC 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27233 00004DE1 A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27234 00004DE4 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27235 00004DE8 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27236 00004DEA 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27237 00004DEC 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27238 00004DEE A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27239                                  
 27240                                  	; MSDOS 3.3
 27241                                  	;INC	AX
 27242                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27243                                  
 27244                                  	; 20/05/2019
 27245                                  	; MSDOS 3.3 & MSDOS 6.0
 27246 00004DF1 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27247 00004DF5 B001                            MOV     AL,1
 27248 00004DF7 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27249                                  _doread:
 27250 00004DF9 30C0                            XOR     AL,AL
 27251                                  NOREAD:
 27252 00004DFB 06                              PUSH	ES
 27253 00004DFC E85FFF                          CALL    BUFSEC
 27254 00004DFF 72A1                    	JC	short BUF_IO_FAIL
 27255 00004E01 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27256 00004E05 D1E9                            SHR     CX,1
 27257                                  ;M039
 27258                                  	; MSDOS 3.3
 27259                                  	;JNC	short EVENWRT ; 09/09/2018
 27260                                  	;MOVSB
 27261                                  ;EVENWRT:
 27262                                  	;REP	MOVSW
 27263                                  
 27264                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27265                                  ;       DS:SI-> Source within Transfer memory block.
 27266                                  ;       ES:DI-> Destination within Buffer.
 27267                                  
 27268                                  	; MSDOS 6.0
 27269 00004E07 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27270                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27271                                  	;rep	movsb                   ;Copy last byte.
 27272                                  	; 16/12/2022
 27273 00004E09 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27274 00004E0B A4                      	movsb ; ****
 27275                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27276                                  	;adc	cx,0
 27277                                  	;rep	movsb
 27278                                  ;M039
 27279                                  EVENWRT: ; ****
 27280 00004E0C 07                              POP	ES
 27281                                  
 27282                                  ;hkn; SS override
 27283 00004E0D 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27284                                  
 27285                                  	; MSDOS 6.0
 27286 00004E12 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27287                                  					;LB. if already dirty		  ;AN000;
 27288 00004E16 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27289 00004E18 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27290                                  	
 27291                                  	;or	byte [bx+5],40h
 27292 00004E1B 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27293                                  yesdirty10:
 27294                                  	;;lea	si,[bx+16]
 27295                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27296 00004E1F 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27297 00004E22 29F7                            SUB     DI,SI                   ; Position in buffer
 27298                                  ;M039
 27299                                  	; MSDOS 3.3
 27300                                  	;MOV	SI,DI
 27301                                  	;MOV	DI,BX
 27302                                  	;call	PLACEBUF
 27303                                  	;;cmp	si,[es:bp+2]
 27304                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27305                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27306                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27307                                                                          ;  even though it is MRU.
 27308                                  	; MSDOS 6.0
 27309                                  	;cmp	di,[es:bp+2]
 27310 00004E24 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27311 00004E28 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27312 00004E2A 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27313                                  					; chucking even though it is MRU.
 27314                                  ;M039
 27315                                  
 27316                                  WBUFPLACED:
 27317 00004E2F F8                              CLC
 27318 00004E30 16                      	push	ss
 27319 00004E31 1F                      	pop	ds
 27320 00004E32 C3                              retn
 27321                                  
 27322                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27323                                  ;---------------------------------------------------------------------------
 27324                                  ;
 27325                                  ; Procedure Name : NEXTSEC
 27326                                  ;
 27327                                  ; Compute the next sector to read or write
 27328                                  ; ES:BP Points to DPB
 27329                                  ;
 27330                                  ;---------------------------------------------------------------------------
 27331                                  
 27332                                  NEXTSEC:
 27333 00004E33 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27334 00004E38 7426                            JZ	short CLRET
 27335                                  
 27336 00004E3A A0[7305]                        MOV     AL,[SECCLUSPOS]
 27337 00004E3D FEC0                            INC     AL
 27338                                  	;cmp	al,[es:bp+4]
 27339 00004E3F 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27340 00004E43 7618                            JBE	short SAVPOS
 27341                                  
 27342 00004E45 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27343 00004E49 E8BC07                          call	IsEOF
 27344 00004E4C 7314                            JAE	short NONEXT
 27345                                  
 27346 00004E4E E8CE07                          call	UNPACK
 27347 00004E51 720F                            JC	short NONEXT
 27348                                  clusgot:
 27349 00004E53 893E[BC05]                      MOV     [CLUSNUM],DI
 27350 00004E57 FF06[BA05]                      INC     word [LASTPOS]
 27351 00004E5B B000                            MOV     AL,0
 27352                                  SAVPOS:
 27353 00004E5D A2[7305]                        MOV     [SECCLUSPOS],AL
 27354                                  CLRET:
 27355 00004E60 F8                              CLC
 27356 00004E61 C3                              retn
 27357                                  NONEXT:
 27358 00004E62 F9                              STC
 27359 00004E63 C3                              retn
 27360                                  
 27361                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27362                                  ;----------------------------------------------------------------------------
 27363                                  ;
 27364                                  ; Procedure Name : OPTIMIZE
 27365                                  ;
 27366                                  ; Inputs:
 27367                                  ;       BX = Physical cluster
 27368                                  ;       CX = No. of records
 27369                                  ;       DL = sector within cluster
 27370                                  ;       ES:BP = Base of drive parameters
 27371                                  ;       [NEXTADD] = transfer address
 27372                                  ; Outputs:
 27373                                  ;       AX = No. of records remaining
 27374                                  ;       BX = Transfer address
 27375                                  ;       CX = No. or records to be transferred
 27376                                  ;       DX = Physical sector address            (LOW)
 27377                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27378                                  ;       DI = Next cluster
 27379                                  ;       [CLUSNUM] = Last cluster accessed
 27380                                  ;       [NEXTADD] updated
 27381                                  ;       Carry set if error (currently user FAILed to I 24)
 27382                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27383                                  ;
 27384                                  ;---------------------------------------------------------------------------
 27385                                  
 27386                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27387                                  OPTIMIZE:
 27388 00004E64 52                      	PUSH    DX
 27389 00004E65 53                              PUSH    BX
 27390                                  	;mov	al,[es:bp+4]
 27391 00004E66 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27392 00004E6A FEC0                            INC     AL              ; Number of sectors per cluster
 27393 00004E6C 88C4                            MOV     AH,AL
 27394 00004E6E 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27395 00004E70 89CA                            MOV     DX,CX
 27396                                  	;MOV	CX,0
 27397                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27398                                  	; 16/12/2022
 27399 00004E72 31C9                    	xor	cx,cx	; sub cx,cx
 27400                                  OPTCLUS:
 27401                                  ; AL has number of sectors available in current cluster
 27402                                  ; AH has number of sectors available in next cluster
 27403                                  ; BX has current physical cluster
 27404                                  ; CX has number of sequential sectors found so far
 27405                                  ; DX has number of sectors left to transfer
 27406                                  ; ES:BP Points to DPB
 27407                                  ; ES:SI has FAT pointer
 27408                                  
 27409                                  do_norm3:
 27410 00004E74 E8A807                          call	UNPACK
 27411 00004E77 7237                            JC	short OP_ERR
 27412                                  clusgot2:
 27413 00004E79 00C1                    	ADD	CL,AL
 27414 00004E7B 80D500                          ADC     CH,0
 27415 00004E7E 39D1                            CMP     CX,DX
 27416 00004E80 7333                            JAE	short BLKDON
 27417 00004E82 88E0                            MOV     AL,AH
 27418 00004E84 43                              INC     BX
 27419 00004E85 39DF                            CMP     DI,BX
 27420 00004E87 74EB                            JZ	short OPTCLUS
 27421 00004E89 4B                              DEC     BX
 27422                                  FINCLUS:
 27423 00004E8A 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27424 00004E8E 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27425 00004E90 52                              PUSH    DX
 27426 00004E91 89C8                            MOV     AX,CX
 27427                                  	;mul	word[ES:BP+2]
 27428 00004E93 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27429                                  				; Number of sectors times sector size
 27430 00004E97 8B36[B805]                      MOV     SI,[NEXTADD]
 27431 00004E9B 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27432 00004E9D A3[B805]                        MOV     [NEXTADD],AX
 27433 00004EA0 58                              POP     AX              ; Number of sectors still needed
 27434 00004EA1 5A                              POP     DX              ; Starting cluster
 27435 00004EA2 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27436 00004EA4 011E[BA05]                      ADD     [LASTPOS],BX
 27437 00004EA8 5B                              POP     BX              ; BL = sector position within cluster
 27438 00004EA9 E81700                  	call	FIGREC
 27439 00004EAC 89F3                            MOV     BX,SI
 27440 00004EAE F8                      	CLC
 27441 00004EAF C3                              retn
 27442                                  OP_ERR:
 27443 00004EB0 83C404                          ADD     SP,4
 27444 00004EB3 F9                      	STC
 27445 00004EB4 C3                              retn
 27446                                  BLKDON:
 27447 00004EB5 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27448 00004EB7 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27449 00004EB9 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27450 00004EBB 8826[7305]                      MOV     [SECCLUSPOS],AH
 27451 00004EBF 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27452 00004EC1 EBC7                            JMP     SHORT FINCLUS
 27453                                  
 27454                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27455                                  ;---------------------------------------------------------------------------
 27456                                  ;
 27457                                  ; Procedure Name : FIGREC
 27458                                  ;
 27459                                  ; Inputs:
 27460                                  ;       DX = Physical cluster number
 27461                                  ;       BL = Sector position within cluster
 27462                                  ;       ES:BP = Base of drive parameters
 27463                                  ; Outputs:
 27464                                  ;       DX = physical sector number           (LOW)
 27465                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27466                                  ; No other registers affected.
 27467                                  ;
 27468                                  ;---------------------------------------------------------------------------
 27469                                  
 27470                                  	; 10/06/2019
 27471                                  	; 20/05/2019 - Retro DOS v4.0
 27472                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27473                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27474                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27475                                  FIGREC:
 27476 00004EC3 51                              PUSH    CX
 27477                                  	;mov	cl,[es:bp+5]
 27478 00004EC4 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27479 00004EC8 4A                              DEC     DX
 27480 00004EC9 4A                              DEC     DX
 27481                                  
 27482                                  	; MSDOS 3.3
 27483                                  	;SHL	DX,CL
 27484                                  
 27485                                  ;hkn; SS override HIGH_SECTOR
 27486                                  	; MSDOS 6.0
 27487 00004ECA 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27488 00004ED1 08C9                    	OR	CL,CL				;F.C. >32mb
 27489 00004ED3 740C                    	JZ	short noshift			;F.C. >32mb
 27490 00004ED5 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27491                                  rotleft:					;F.C. >32mb
 27492 00004ED7 F8                      	CLC					;F.C. >32mb
 27493 00004ED8 D1D2                    	RCL	DX,1				;F.C. >32mb
 27494                                  	; 10/06/2019
 27495 00004EDA 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27496 00004EDF E2F6                    	LOOP	rotleft				;F.C. >32mb
 27497                                  noshift:
 27498                                  	; MSDOS 3.3 & MSDOS 6.0
 27499 00004EE1 08DA                            OR      DL,BL
 27500                                  	;add	dx,[es:bp+0Bh]
 27501 00004EE3 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27502                                  	; MSDOS 6.0
 27503                                  	; 10/06/2019
 27504 00004EE7 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27505                                  	; MSDOS 3.3 & MSDOS 6.0        
 27506 00004EED 59                      	POP     CX
 27507                                  figrec_retn:
 27508 00004EEE C3                              retn
 27509                                  
 27510                                  ; 20/05/2019 - Retro DOS v4.0
 27511                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27512                                  
 27513                                  ; 30/07/2018 - Retro DOS v3.0
 27514                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27515                                  
 27516                                  ;Break   <ALLOCATE -- Assign disk space>
 27517                                  ;---------------------------------------------------------------------------
 27518                                  ;
 27519                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27520                                  ;
 27521                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27522                                  ;   FAT-chained onto the end of the existing file.
 27523                                  ;
 27524                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27525                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27526                                  ;   numbered clusters, looking for the necessary free blocks.
 27527                                  ;
 27528                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27529                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27530                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27531                                  ;
 27532                                  ;       If we get to the end of the disk without satisfaction:
 27533                                  ;
 27534                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27535                                  ;               return (insufficient_disk_space)
 27536                                  ;           ELSE
 27537                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27538                                  ;
 27539                                  ;   Note that there is no multitasking interlock. There is no race when
 27540                                  ;   examining the entrys in an in-core FAT block since there will be no
 27541                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27542                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27543                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27544                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27545                                  ;   satisfied. We can't allow another activation to think this cluster is
 27546                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27547                                  ;   allocated.
 27548                                  ;
 27549                                  ;   Note that when we run out of space this algorithem will scan from
 27550                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27551                                  ;   redundantly scanning the later part of the disk. This only happens when
 27552                                  ;   we run out of space, so sue me.
 27553                                  ;
 27554                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27555                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27556                                  ;                                                                          ;
 27557                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27558                                  ;   explanation:
 27559                                  ;
 27560                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27561                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27562                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27563                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27564                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27565                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27566                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27567                                  ;   the
 27568                                  ;           LOOP   findfre         ; alloc more if needed
 27569                                  ;   instruction when the first cluster is allocated to the nul file. The
 27570                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27571                                  ;
 27572                                  ;   This method is obviously useless (because it is non-reentrant) for
 27573                                  ;   multitasking, and will have to be changed. Storing the required value on
 27574                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27575                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27576                                  ;   problems with INT 24 well.
 27577                                  ;
 27578                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27579                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27580                                  ;                                                                          ;
 27581                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27582                                  ;               CX = No. of clusters to allocate
 27583                                  ;               ES:BP = Base of drive parameters
 27584                                  ;               [THISSFT] = Points to SFT
 27585                                  ;
 27586                                  ;       EXIT    'C' set if insufficient space
 27587                                  ;                 [FAILERR] can be tested to see the reason for failure
 27588                                  ;                 CX = max. no. of clusters that could be added to file
 27589                                  ;               'C' clear if space allocated
 27590                                  ;                 BX = First cluster allocated
 27591                                  ;                 FAT is fully updated
 27592                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27593                                  ;
 27594                                  ;       USES    ALL but SI, BP
 27595                                  
 27596                                  ;callmagic  proc near
 27597                                  ;       push    ds                             ;push segment of routine 
 27598                                  ;       push    Offset MagicPatch              ;push offset for routine
 27599                                  ;       retf                                   ;simulate jmp far
 27600                                  ;                                              ;far return address is on
 27601                                  ;                                              ;stack, so far return from
 27602                                  ;                                              ;call will return this routine
 27603                                  ;callmagic  endp
 27604                                  
 27605                                  ALLOCATE:
 27606                                  	; 10/09/2018
 27607                                  ;BEGIN MAGICDRV MODIFICATIONS
 27608                                  ;
 27609                                  ;7/5/92 scottq
 27610                                  ;
 27611                                  ;This is the disk compression patch location which allows
 27612                                  ;the disk compression software to fail allocations if the
 27613                                  ;FAT would allows allocation, but the free space for compressed
 27614                                  ;data would not.
 27615                                  ;        
 27616                                  ;;;	call    far ptr MAGICPATCH
 27617                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27618                                  ;;; but we do know the segment and offset of the routine
 27619                                  ;;; so simulate a far call to dosdata:magicpatch
 27620                                  ;;; note dosassume above, so DS -> dosdata
 27621                                  
 27622                                  	; MSDOS 6.0
 27623                                          ;clc				;clear carry so we fall through
 27624                                  	;				;if no patch is present
 27625                                  	;push	cs			;push segment for far return
 27626                                          ;call	callmagic		;this is a near call
 27627                                          ;jnc	short Regular_Allocate_Path
 27628                                  	;jmp	Disk_Full_Return
 27629                                  
 27630                                  ;Regular_Allocate_Path:
 27631                                  	; 20/05/2019 - Retro DOS v4.0
 27632                                  ;END MAGICDRV MODIFICATIONS
 27633                                  
 27634                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27635                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27636                                  
 27637 00004EEF 53                              PUSH    BX                      ; save (bx)
 27638 00004EF0 31DB                            XOR     BX,BX
 27639 00004EF2 E82A07                  	call	UNPACK
 27640 00004EF5 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27641 00004EF9 5B                              POP     BX
 27642 00004EFA 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27643                                  
 27644 00004EFC 51                              PUSH    CX
 27645 00004EFD 53                              PUSH    BX
 27646                                  
 27647 00004EFE 89DA                            MOV     DX,BX
 27648                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27649                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27650 00004F00 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27651 00004F04 83FB02                          cmp     bx,2
 27652 00004F07 7709                            ja	short FINDFRE
 27653                                  
 27654                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27655                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27656                                  
 27657                                  ads1:
 27658                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27659                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27660 00004F09 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27661 00004F0F BB0100                          mov     bx,1                    ; Counter next instruction so first
 27662                                                                          ;       cluster examined is 2
 27663                                  
 27664                                  ;   Scanning both forwards and backwards for a free cluster
 27665                                  ;
 27666                                  ;       (BX) = forwards scan pointer
 27667                                  ;       (CX) = clusters remaining to be allocated
 27668                                  ;       (DX) = current last cluster in file
 27669                                  ;       (TOS) = last cluster of file
 27670                                  
 27671                                  FINDFRE:
 27672 00004F12 43                              INC     BX
 27673                                  	;cmp	bx,[es:bp+0Dh]
 27674 00004F13 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27675 00004F17 7757                    	ja	short ads7	; at end of disk
 27676 00004F19 E80307                          call	UNPACK          ; check out this cluster
 27677 00004F1C 722F                            jc	short ads4	; FAT error             [INTERR?]
 27678 00004F1E 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27679                                  
 27680                                  ;   Have found a free cluster. Chain it to the file
 27681                                  ;
 27682                                  ;       (BX) = found free cluster #
 27683                                  ;       (DX) = current last cluster in file
 27684                                  
 27685                                  	;;mov	[es:bp+1Ch],bx
 27686                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27687 00004F20 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27688 00004F24 92                              xchg    ax,dx           ; save (dx) in ax
 27689 00004F25 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27690 00004F28 E84807                  	call	PACK            ; set special "temporary" mark
 27691 00004F2B 7220                            jc	short ads4	; FAT error             [INTERR?]
 27692                                  	;;cmp	word [es:bp+1Eh],-1
 27693                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27694 00004F2D 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27695 00004F32 7404                            JZ	short NO_ALLOC	; No
 27696                                  	;;dec	word [es:bp+1Eh]
 27697                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27698 00004F34 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27699                                  NO_ALLOC:
 27700 00004F38 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27701 00004F39 87DA                            XCHG    BX,DX
 27702 00004F3B 89D0                            MOV     AX,DX
 27703 00004F3D E83307                  	call	PACK            ; link free cluster onto file
 27704                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27705                                                                  ;    cluster 0 with FIRCLUS value.
 27706 00004F40 720B                            jc	short ads4	; FAT error [INTERR?]
 27707 00004F42 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27708 00004F43 89DA                            mov     dx,bx           ; (dx) = current end of file
 27709 00004F45 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27710                                  
 27711                                  ;   We've successfully extended the file. Clean up and exit
 27712                                  ;
 27713                                  ;       (BX) = last cluster in file
 27714                                  
 27715 00004F47 BAFFFF                          MOV     DX,0FFFFH
 27716 00004F4A E82607                  	call	PACK            ; mark last cluster EOF
 27717                                  
 27718                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27719                                  ;   2 whole bytes. Hope its worth it...
 27720                                  ;
 27721                                  ;       'C' set if error
 27722                                  ;       calling (BX) and (CX) pushed on stack
 27723                                  
 27724                                  ads4:   
 27725 00004F4D 5B                      	POP     BX
 27726 00004F4E 59                              POP     CX              ; Don't need this stuff since we're successful
 27727 00004F4F 729D                            jc	short figrec_retn
 27728 00004F51 E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27729                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27730 00004F54 7298                            jc	short figrec_retn
 27731 00004F56 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27732 00004F59 7293                            jc	short figrec_retn
 27733 00004F5B 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27734 00004F5D 09FF                            OR      DI,DI           ; clear 'C'
 27735 00004F5F 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27736                                  
 27737                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27738                                  ;   info
 27739                                  dofastk:
 27740                                  	; 20/05/2019
 27741                                  	; MSDOS 6.0
 27742                                  	;push	dx ; * MSDOS 6.0
 27743                                  	;;mov	dl,[es:bp+0]
 27744                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27745                                  	;mov	dl,[es:bp]
 27746                                  
 27747                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27748                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27749                                  	
 27750                                  	; 16/12/2022
 27751                                  	;push	dx ; *
 27752                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27753                                  	; 15/12/2022
 27754                                  	;mov	dl,[es:bp]
 27755                                  	
 27756                                  	; MSDOS 3.3 & MSDOS 6.0
 27757 00004F61 06                      	PUSH	ES
 27758 00004F62 C43E[9E05]              	LES     DI,[THISSFT]
 27759                                  	;mov	[es:di+0Bh],bx
 27760 00004F66 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27761                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27762                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27763 00004F6A 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27764 00004F6E 07                      	POP	ES
 27765                                  	;retn
 27766                                  
 27767                                  	;pop	dx ; * MSDOS 6.0
 27768                                  
 27769                                  	; 16/12/2022
 27770                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27771                                  	;pop	dx ; *
 27772                                  
 27773 00004F6F C3                      	retn	
 27774                                  
 27775                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27776                                  ;   of the disk...
 27777                                  
 27778                                  ads7:   
 27779 00004F70 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27780 00004F75 7592                    	jnz	short ads1	; start scan from front of disk
 27781                                  
 27782                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27783                                  ;   the space back to the free list and tell the caller how much he could have
 27784                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27785                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27786                                  ;
 27787                                  ;       (CX) = clusters remaining to be allocated
 27788                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27789                                  ;       (TOS+1) = # of clusters wanted to allocate
 27790                                  
 27791 00004F77 5B                              POP     BX              ; (BX) = last cluster of file
 27792 00004F78 BAFFFF                          MOV     DX,0FFFFH
 27793 00004F7B E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27794 00004F7E 58                              POP     AX              ; No. of clusters requested
 27795                                                                  ; Don't "retc". We are setting Carry anyway,
 27796                                                                  ;   Alloc failed, so proceed with return CX
 27797                                                                  ;   setup.
 27798 00004F7F 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27799 00004F81 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27800                                                                  ;   Alloc failed.
 27801                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27802                                          ; MSDOS 6.0
 27803 00004F84 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27804 00004F89 F9                              STC
 27805 00004F8A C3                              retn
 27806                                  
 27807                                  ;-----------------------------------------------------------------------
 27808                                  ;
 27809                                  ; Procedure Name : RESTFATBYT
 27810                                  ;
 27811                                  ; SEE ALLOCATE CAVEAT
 27812                                  ;       Carry set if error (currently user FAILed to I 24)
 27813                                  ;-----------------------------------------------------------------------
 27814                                  
 27815                                  RESTFATBYT:
 27816 00004F8B 53                              PUSH    BX
 27817 00004F8C 52                              PUSH    DX
 27818 00004F8D 57                              PUSH    DI
 27819 00004F8E 31DB                            XOR     BX,BX
 27820 00004F90 8B16[9605]                      MOV     DX,[FATBYT]
 27821 00004F94 E8DC06                  	call	PACK
 27822 00004F97 5F                              POP     DI
 27823 00004F98 5A                              POP     DX
 27824 00004F99 5B                              POP     BX
 27825                                  ; 16/12/2022
 27826                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27827                                  ;RELEASE_flush:
 27828 00004F9A C3                      	retn
 27829                                  
 27830                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27831                                  ;---------------------------------------------------------------------------
 27832                                  ;
 27833                                  ; Procedure Name : RELEASE
 27834                                  ;
 27835                                  ; Inputs:
 27836                                  ;       BX = Cluster in file
 27837                                  ;       ES:BP = Base of drive parameters
 27838                                  ; Function:
 27839                                  ;       Frees cluster chain starting with [BX]
 27840                                  ;       Carry set if error (currently user FAILed to I 24)
 27841                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27842                                  ;
 27843                                  ;-----------------------------------------------------------------------------
 27844                                  
 27845                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27846                                  	; 20/05/2019 - Retro DOS v4.0
 27847                                  RELEASE:
 27848 00004F9B 31D2                            XOR     DX,DX
 27849                                  
 27850                                  	;entry	RELBLKS
 27851                                  RELBLKS:
 27852                                  
 27853                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27854                                  ;   and free the rest in the chain.
 27855                                  
 27856 00004F9D E87F06                  	call	UNPACK
 27857 00004FA0 7224                    	jc	short RELEASE_flush
 27858 00004FA2 7422                    	jz	short RELEASE_flush
 27859 00004FA4 89F8                            MOV     AX,DI
 27860 00004FA6 52                              PUSH    DX
 27861 00004FA7 E8C906                  	call	PACK
 27862 00004FAA 5A                              POP     DX
 27863 00004FAB 7219                    	jc	short RELEASE_flush
 27864 00004FAD 09D2                            OR      DX,DX
 27865 00004FAF 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27866                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27867                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27868 00004FB1 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27869 00004FB6 7404                            JZ	short NO_DEALLOC	; No
 27870 00004FB8 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27871                                  NO_DEALLOC:
 27872 00004FBC 89C3                            MOV     BX,AX
 27873 00004FBE 48                              dec     ax              ; check for "1"
 27874 00004FBF 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27875 00004FC1 E84406                  	call	IsEOF
 27876 00004FC4 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27877                                  
 27878                                  	; 16/12/2022
 27879                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27880                                  ;%if 0
 27881                                  RELEASE_flush:
 27882                                  	; MSDOS 6.0
 27883 00004FC6 268A4600                	mov	al,[es:bp]
 27884                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27885 00004FCA 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27886 00004FCB 51                      	push	cx		;  them to be preserved.
 27887 00004FCC 06                      	push	es
 27888 00004FCD 55                      	push	bp
 27889 00004FCE E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27890 00004FD1 5D                      	pop	bp
 27891 00004FD2 07                      	pop	es
 27892 00004FD3 59                      	pop	cx
 27893 00004FD4 5E                      	pop	si
 27894                                  ;%endif
 27895                                  RET12:
 27896 00004FD5 C3                      	retn
 27897                                  
 27898                                  ;Break	<GETEOF -- Find the end of a file>
 27899                                  ;------------------------------------------------------------------------
 27900                                  ;
 27901                                  ; Procedure Name : GETEOF
 27902                                  ;
 27903                                  ; Inputs:
 27904                                  ;       ES:BP Points to DPB
 27905                                  ;       BX = Cluster in a file
 27906                                  ;       DS = CS
 27907                                  ; Outputs:
 27908                                  ;       BX = Last cluster in the file
 27909                                  ;       Carry set if error (currently user FAILed to I 24)
 27910                                  ; DI destroyed. No other registers affected.
 27911                                  ;
 27912                                  ;--------------------------------------------------------------------------
 27913                                  
 27914                                  GETEOF:
 27915 00004FD6 E84606                  	call	UNPACK
 27916 00004FD9 72FA                            jc	short RET12
 27917 00004FDB 53                              PUSH    BX
 27918 00004FDC 89FB                            MOV     BX,DI
 27919 00004FDE E82706                  	call	IsEOF
 27920 00004FE1 5B                              POP     BX
 27921 00004FE2 73F1                            JAE     short RET12
 27922 00004FE4 89FB                            MOV     BX,DI
 27923 00004FE6 EBEE                            JMP     short GETEOF
 27924                                  
 27925                                  ;============================================================================
 27926                                  ; FCB.ASM, MSDOS 6.0, 1991
 27927                                  ;============================================================================
 27928                                  ; 30/07/2018 - Retro DOS v3.0
 27929                                  ; 20/05/2019 - Retro DOS v4.0
 27930                                  
 27931                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27932                                  ;	NAME	FCB
 27933                                  
 27934                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27935                                  ;		  filename characters
 27936                                  ;
 27937                                  ;	MakeFcb
 27938                                  ;	NameTrans
 27939                                  ;	PATHCHRCMP
 27940                                  ;	GetLet
 27941                                  ;	UCase
 27942                                  ;	GetLet3
 27943                                  ;	GetCharType
 27944                                  ;	TESTKANJ
 27945                                  ;	NORMSCAN
 27946                                  ;	DELIM
 27947                                  ;
 27948                                  ;	Revision history:
 27949                                  ;
 27950                                  ;		A000  version 4.00  Jan. 1988
 27951                                  ;	
 27952                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27953                                  
 27954                                  TableLook	EQU	-1
 27955                                  
 27956                                  SCANSEPARATOR	EQU	1
 27957                                  DRVBIT		EQU	2
 27958                                  NAMBIT		EQU	4
 27959                                  EXTBIT		EQU	8
 27960                                  
 27961                                  ;----------------------------------------------------------------------------
 27962                                  ;
 27963                                  ; Procedure : MakeFcb
 27964                                  ;
 27965                                  ;----------------------------------------------------------------------------
 27966                                  
 27967                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27968                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27969                                  MAKEFCB:
 27970                                  ;hkn; SS override
 27971 00004FE8 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27972 00004FEE 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27973                                  	;test	al,2
 27974 00004FF0 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27975 00004FF2 7504                    	JNZ	short DEFDRV
 27976 00004FF4 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27977                                  DEFDRV:
 27978 00004FF8 47                      	INC	DI
 27979 00004FF9 B90800                  	MOV	CX,8
 27980                                  	;test	al,4
 27981 00004FFC A804                    	test	AL,NAMBIT	; Use current name fields as default?
 27982 00004FFE 93                      	XCHG	AX,BX		; Save bits in BX
 27983 00004FFF B020                    	MOV	AL," "
 27984 00005001 7404                    	JZ	short FILLB	; If not, go fill with blanks
 27985 00005003 01CF                    	ADD	DI,CX
 27986 00005005 31C9                    	XOR	CX,CX		; Don't fill any
 27987                                  FILLB:
 27988 00005007 F3AA                    	REP	STOSB
 27989 00005009 B103                    	MOV	CL,3
 27990 0000500B F6C308                  	test	BL,EXTBIT	; Use current extension as default
 27991 0000500E 7404                    	JZ	short FILLB2
 27992 00005010 01CF                    	ADD	DI,CX
 27993 00005012 31C9                    	XOR	CX,CX
 27994                                  FILLB2:
 27995 00005014 F3AA                    	REP	STOSB
 27996 00005016 91                      	XCHG	AX,CX		; Put zero in AX
 27997 00005017 AB                      	STOSW
 27998 00005018 AB                      	STOSW			; Initialize two words after to zero
 27999 00005019 83EF10                  	SUB	DI,16		; Point back at start
 28000                                  	;test	bl,1
 28001 0000501C F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28002 0000501F 7409                    	JZ	short SKPSPC
 28003 00005021 E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 28004 00005024 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28005 00005027 7504                    	JNZ	short NOSCAN
 28006 00005029 46                      	INC	SI		; Skip over the delimiter
 28007                                  SKPSPC:
 28008 0000502A E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28009                                  NOSCAN:
 28010 0000502D E8F500                  	CALL	GETLET
 28011 00005030 761E                    	JBE	short NODRV	; Quit if termination character
 28012 00005032 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28013 00005035 7519                    	JNZ	short NODRV
 28014 00005037 46                      	INC	SI		; Skip over colon
 28015 00005038 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28016 0000503A 760F                    	JBE	short BADDRV	; Drive letter out of range
 28017                                  
 28018 0000503C 50                      	PUSH	AX
 28019 0000503D E8371B                  	call	GetVisDrv
 28020 00005040 58                      	POP	AX
 28021 00005041 730A                    	JNC	short HAVDRV
 28022                                  
 28023                                  	; 20/05/2019 - Retro DOS v4.0
 28024                                  	; MSDOS 6.0
 28025                                  ;hkn; SS override
 28026 00005043 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28027                                  					; if not FAT drive ;AN000;
 28028 00005049 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28029                                  BADDRV:
 28030 0000504B B2FF                    	MOV	DL,-1
 28031                                  HAVDRV:
 28032 0000504D AA                      	STOSB			; Put drive specifier in first byte
 28033 0000504E 46                      	INC	SI
 28034 0000504F 4F                      	DEC	DI		; Counteract next two instructions
 28035                                  NODRV:
 28036 00005050 4E                      	DEC	SI		; Back up
 28037 00005051 47                      	INC	DI		; Skip drive byte
 28038                                  
 28039                                  	;entry	NORMSCAN
 28040                                  NORMSCAN:
 28041 00005052 B90800                  	MOV	CX,8
 28042 00005055 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28043 00005058 803C2E                  	CMP	BYTE [SI],"."
 28044 0000505B 7515                    	JNZ	short NODOT
 28045 0000505D 46                      	INC	SI		; Skip over dot if present
 28046                                  
 28047                                  	; MSDOS 6.0
 28048                                  ;hkn; SS override
 28049                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28050                                  	; 10/06/2019
 28051 0000505E 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28052 00005064 7406                    	JZ	short VOLOK				;AN000;
 28053 00005066 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28054 00005067 B90200                  	MOV	CX,2					;AN000;
 28055 0000506A EB03                    	JMP	SHORT contvol				;AN000;
 28056                                  VOLOK:
 28057 0000506C B90300                  	MOV	CX,3		; Get 3-letter extension
 28058                                  contvol:
 28059 0000506F E81300                  	CALL	MUSTGETWORD
 28060                                  NODOT:
 28061 00005072 88D0                    	MOV	AL,DL
 28062                                  
 28063                                  	; MSDOS 6.0
 28064                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28065                                  	; 18/12/2022
 28066 00005074 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28067                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28068                                  
 28069 0000507A C3                      	retn
 28070                                  
 28071                                  NONAM:
 28072 0000507B 01CF                    	ADD	DI,CX
 28073 0000507D 4E                      	DEC	SI
 28074 0000507E C3                      	retn
 28075                                  
 28076                                  GETWORD:
 28077 0000507F E8A300                  	CALL	GETLET		
 28078 00005082 76F7                    	JBE	short NONAM	; Exit if invalid character
 28079 00005084 4E                      	DEC	SI
 28080                                  
 28081                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28082                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28083                                  
 28084                                  MUSTGETWORD:
 28085 00005085 E89D00                  	CALL	GETLET
 28086                                  
 28087                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28088                                  
 28089                                  ;IF NOT TABLELOOK
 28090                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28091                                  ;ENDIF
 28092 00005088 750C                    	JNZ	short MustCheckCX
 28093                                  
 28094                                  ;hkn; SS override
 28095 0000508A 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28096 00005090 7419                    	JZ	short FILLNAM
 28097 00005092 3C20                    	CMP	AL," "
 28098 00005094 7515                    	JNZ	short FILLNAM
 28099                                  
 28100                                  MustCheckCX:
 28101 00005096 E3ED                    	JCXZ	MUSTGETWORD
 28102 00005098 49                      	DEC	CX
 28103 00005099 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28104 0000509B 7504                    	JNZ	short NOSTAR
 28105 0000509D B03F                    	MOV	AL,"?"
 28106 0000509F F3AA                    	REP	STOSB
 28107                                  NOSTAR:
 28108 000050A1 AA                      	STOSB
 28109 000050A2 3C3F                    	CMP	AL,"?"
 28110 000050A4 75DF                    	JNZ	short MUSTGETWORD
 28111 000050A6 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28112 000050A9 EBDA                    	JMP	short MUSTGETWORD
 28113                                  FILLNAM:
 28114 000050AB B020                    	MOV	AL," "
 28115 000050AD F3AA                    	REP	STOSB
 28116 000050AF 4E                      	DEC	SI
 28117 000050B0 C3                      	retn
 28118                                  
 28119                                  SCANB:
 28120 000050B1 AC                      	LODSB
 28121 000050B2 E8A100                  	CALL	SPCHK
 28122 000050B5 74FA                    	JZ	short SCANB
 28123 000050B7 4E                      	DEC	SI
 28124                                  scanb_retn:
 28125 000050B8 C3                      	retn
 28126                                  
 28127                                  ;----------------------------------------------------------------------------
 28128                                  ;
 28129                                  ; Procedure Name : NameTrans
 28130                                  ;
 28131                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28132                                  ; allow spaces in pathnames
 28133                                  ;
 28134                                  ;   Inputs:	DS:SI points to start of path element
 28135                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28136                                  ;		ES = DOSGroup
 28137                                  ;		DS:SI advanced after name
 28138                                  ;   Registers modified: DI,AX,DX,CX
 28139                                  ;
 28140                                  ;----------------------------------------------------------------------------
 28141                                  
 28142                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28143                                  	; 20/05/2019 - Retro DOS v4.0
 28144                                  NameTrans:
 28145                                  ;hkn; SS override
 28146 000050B9 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28147 000050BF 16                      	push	ss
 28148 000050C0 07                      	pop	es
 28149                                  
 28150                                  ;hkn; NAME1 is in DOSDATA
 28151 000050C1 BF[4B05]                	MOV	DI,NAME1
 28152 000050C4 57                      	PUSH	DI
 28153 000050C5 B82020                  	MOV	AX,'  '
 28154 000050C8 B90500                  	MOV	CX,5
 28155 000050CB AA                      	STOSB
 28156 000050CC F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28157 000050CE 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28158 000050D0 88C2                    	MOV	DL,AL
 28159 000050D2 AA                      	STOSB
 28160 000050D3 5F                      	POP	DI
 28161                                  
 28162 000050D4 E87BFF                  	CALL	NORMSCAN
 28163                                  
 28164                                  ;hkn; SS override for NAME1
 28165 000050D7 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28166 000050DD 75D9                    	jnz	short scanb_retn
 28167 000050DF 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28168 000050E5 C3                      	retn
 28169                                  
 28170                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28171                                  ;============================================================================
 28172                                  
 28173                                  ; 20/05/2019 - Retro DOS v4.0
 28174                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28175                                  
 28176                                  ;If TableLook
 28177                                  
 28178                                  ;hkn; Table	SEGMENT
 28179                                  ;	PUBLIC	CharType
 28180                                  ;----------------------------------------------------------------------------
 28181                                  
 28182                                  ; Character type table for file name scanning
 28183                                  ; Table provides a mapping of characters to validity bits.
 28184                                  ; Four bits are provided for each character. Values 7Dh and above
 28185                                  ; have all bits set, so that part of the table is chopped off, and
 28186                                  ; the translation routine is responsible for screening these values.
 28187                                  ; The bit values are defined in DOSSYM.INC
 28188                                  
 28189                                  ;	      ; ^A and NUL
 28190                                  ;CharType:
 28191                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28192                                  ;	      ; ^C and ^B
 28193                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28194                                  ;	      ; ^E and ^D
 28195                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28196                                  ;	      ; ^G and ^F
 28197                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28198                                  ;	      ; TAB and BS
 28199                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28200                                  ;	      ; ^K and ^J
 28201                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28202                                  ;	      ; ^M and ^L
 28203                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28204                                  ;	      ; ^O and ^N
 28205                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28206                                  ;	      ; ^Q and ^P
 28207                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28208                                  ;	      ; ^S and ^R
 28209                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28210                                  ;	      ; ^U and ^T
 28211                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28212                                  ;	      ; ^W and ^V
 28213                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28214                                  ;	      ; ^Y and ^X
 28215                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28216                                  ;	      ; ESC and ^Z
 28217                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28218                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28220                                  ;	      ; ^_ and ^^
 28221                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28222                                  ;	      ; ! and SPACE
 28223                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28224                                  ;	      ; # and "
 28225                                  ;	 db   LOW (NOT FFCB+FCHK)
 28226                                  ;	      ; $ - )
 28227                                  ;	 db   3 dup (0FFh)
 28228                                  ;	      ; + and *
 28229                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28230                                  ;	      ; - and '
 28231                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28232                                  ;	      ; / and .
 28233                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28234                                  ;	      ; 0 - 9
 28235                                  ;	 db   5 dup (0FFh)
 28236                                  ;	      ; ; and :
 28237                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28238                                  ;	      ; = and <
 28239                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28240                                  ;	      ; ? and >
 28241                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28242                                  ;	      ; A - Z
 28243                                  ;	 db   13 dup (0FFh)
 28244                                  ;	      ; \ and [
 28245                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28246                                  ;	      ; ^ and ]
 28247                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28248                                  ;	      ; _ - {
 28249                                  ;	 db   15 dup (0FFh)
 28250                                  ;	      ; } and |
 28251                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28252                                  
 28253                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28254                                  ;					; character in the table
 28255                                  
 28256                                  ;FCHK	equ 1		; normal name char, no chks needed
 28257                                  ;FDELIM	equ 2		; is a delimiter
 28258                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28259                                  ;FFCB	equ 8		; is valid in an FCB
 28260                                  
 28261                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28262                                  ;----------------------------------------------------------------------------
 28263                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28264                                  
 28265                                  CharType: ; 63 bytes
 28266 000050E6 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28267 000050EE 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28268 000050F6 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28269 000050FE FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28270 00005106 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28271 0000510E FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28272 00005116 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28273 0000511E FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28274                                  
 28275                                  CharType_last equ ($ - CharType) * 2
 28276                                  
 28277                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28278                                  ;----------------------------------------------------------------------------
 28279                                  ;CharType:
 28280                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28281                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28282                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28283                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28284                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28285                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28286                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28287                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28288                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28289                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28290                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28291                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28292                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28293                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28294                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28295                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28296                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28297                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28298                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28299                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28300                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28301                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28302                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28303                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28304                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28305                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28306                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28307                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28308                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28309                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28310                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28311                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28312                                  
 28313                                  ;hkn; Table	ENDS
 28314                                  
 28315                                  ;ENDIF
 28316                                  
 28317                                  ; 20/05/2019 - Retro DOS v4.0
 28318                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28319                                  
 28320                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28321                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28322                                  
 28323                                  ;----------------------------------------------------------------------------
 28324                                  ;
 28325                                  ; Procedure Names : GetLet, UCase, GetLet3
 28326                                  ;
 28327                                  ; These routines take a character, convert it to upper case, and check
 28328                                  ; for delimiters.  Three different entry points:
 28329                                  ;	GetLet -  DS:[SI] = character to convert
 28330                                  ;	UCase  -  AL = character to convert
 28331                                  ;	GetLet3 - AL = character
 28332                                  ;		  [BX] = translation table to use
 28333                                  ;
 28334                                  ;	Exit (in all cases) : AL = upper case character
 28335                                  ;			      CY set if char is control char other than TAB
 28336                                  ;			      ZF set if char is a delimiter
 28337                                  ;	Uses : AX, flags
 28338                                  ;
 28339                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28340                                  ; inline version.  Return with carry set is only possible in the inline
 28341                                  ; version. The table lookup version is the one in use.
 28342                                  ;
 28343                                  ;----------------------------------------------------------------------------
 28344                                  
 28345                                  ; This entry point has character at [SI]
 28346                                  
 28347                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28348                                  GETLET:	
 28349 00005125 AC                      	LODSB
 28350                                  
 28351                                  ; This entry point has character in AL
 28352                                  
 28353                                  	;entry	UCase
 28354                                  UCase:	
 28355                                  	; 09/08/2018
 28356                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28357                                  _UCase:
 28358 00005126 53                      	PUSH	BX
 28359 00005127 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28360                                  
 28361                                  ; Convert the character in AL to upper case
 28362                                  
 28363                                  gl_0:
 28364 0000512A 3C61                    	CMP	AL,"a"
 28365 0000512C 7214                    	JB	short gl_2	; Already upper case, go check type
 28366 0000512E 3C7A                    	CMP	AL,"z"
 28367 00005130 7702                    	JA	short gl_1
 28368 00005132 2C20                    	SUB	AL,20H		; Convert to upper case
 28369                                  
 28370                                  ; Map European character to upper case
 28371                                  
 28372                                  gl_1:
 28373 00005134 3C80                    	CMP	AL,80H
 28374 00005136 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28375 00005138 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28376                                  
 28377                                  	; M048 - Start 
 28378                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28379                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28380                                  	; preserve it.
 28381                                  
 28382                                  	; 09/08/2018 - Retro DOS v3.0
 28383                                  	; MSDOS 3.3
 28384                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28385                                  	;CS	XLAT
 28386                                  
 28387                                  	; 20/05/2019 - Retro DOS v4.0
 28388                                  
 28389                                  	; MSDOS 6.0
 28390 0000513A 1E                      	push	ds
 28391                                  	;getdseg <ds>
 28392 0000513B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28393 00005140 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28394 00005141 1F                      	pop	ds
 28395                                  
 28396                                  	; M048 - End
 28397                                  
 28398                                  ; Now check the type
 28399                                  
 28400                                  ;If TableLook
 28401                                  gl_2:
 28402                                  	; 20/05/2019 - Retro DOS v4.0
 28403 00005142 50                      	PUSH	AX
 28404                                  
 28405                                  	; MSDOS 3.3
 28406                                  	;mov	bx,CharType
 28407                                  	;; 09/08/2018
 28408                                  	;;xlat	byte [cs:bx]
 28409                                  	;cs	xlat	
 28410                                  	
 28411                                  	; MSDOS 6.0
 28412 00005143 E81800                  	CALL	GetCharType	; returns type flags in AL
 28413                                  	
 28414                                  	;test	al,1	
 28415 00005146 A801                    	TEST	AL,FCHK 	; test for normal character
 28416 00005148 58                      	POP	AX
 28417 00005149 5B                      	POP	BX
 28418 0000514A C3                      	RETN
 28419                                  
 28420                                  ; This entry has character in AL and lookup table in BX
 28421                                  
 28422                                  	; MSDOS 6.0
 28423                                  ;	;entry GetLet3
 28424                                  GETLET3: ; 10/08/2018
 28425 0000514B 53                      	PUSH	BX
 28426 0000514C EBDC                    	JMP	short gl_0
 28427                                  ;ELSE
 28428                                  ;
 28429                                  ;gl_2:
 28430                                  ;	POP	BX
 28431                                  ;	CMP	AL,"."
 28432                                  ;	retz
 28433                                  ;	CMP	AL,'"'
 28434                                  ;	retz
 28435                                  ;	CALL	PATHCHRCMP
 28436                                  ;	retz
 28437                                  ;	CMP	AL,"["
 28438                                  ;	retz
 28439                                  ;	CMP	AL,"]"
 28440                                  ;	retz
 28441                                  ;ENDIF
 28442                                  
 28443                                  ;---------------------------------------------------------------------
 28444                                  ;
 28445                                  ; DELIM - check if character is a delimiter
 28446                                  ;	Entry : AX = character to check
 28447                                  ;	Exit  : ZF set if character is not a delimiter
 28448                                  ;	Uses  : Flags
 28449                                  ;
 28450                                  ;--------------------------------------------------------------------
 28451                                  
 28452                                  	;entry	DELIM
 28453                                  DELIM:
 28454                                  ;IF TableLook
 28455                                  	; 20/05/2019 - Retro DOS v4.0
 28456 0000514E 50                      	PUSH	AX
 28457                                  
 28458                                  	; MSDOS 3.3
 28459                                  	;push	bx
 28460                                  	;mov	bx,CharType
 28461                                  	;;09/08/2018
 28462                                  	;;xlat	byte [cs:bx]
 28463                                  	;cs	xlat
 28464                                  	;pop	bx
 28465                                  
 28466                                  	; MSDOS 6.0
 28467 0000514F E80C00                  	CALL	GetCharType
 28468                                  	
 28469                                  	;test	al,2
 28470 00005152 A802                    	TEST	AL,FDELIM
 28471 00005154 58                      	POP	AX
 28472 00005155 C3                      	RETN
 28473                                  ;ELSE
 28474                                  ;	CMP	AL,":"
 28475                                  ;	retz
 28476                                  ;
 28477                                  ;	CMP	AL,"<"
 28478                                  ;	retz
 28479                                  ;	CMP	AL,"|"
 28480                                  ;	retz
 28481                                  ;	CMP	AL,">"
 28482                                  ;	retz
 28483                                  ;
 28484                                  ;	CMP	AL,"+"
 28485                                  ;	retz
 28486                                  ;	CMP	AL,"="
 28487                                  ;	retz
 28488                                  ;	CMP	AL,";"
 28489                                  ;	retz
 28490                                  ;	CMP	AL,","
 28491                                  ;	retz
 28492                                  ;ENDIF
 28493                                  
 28494                                  ;-------------------------------------------------------------------------
 28495                                  ;
 28496                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28497                                  ;	Entry : AL = character to check
 28498                                  ;	Exit  : ZF set if character is a space
 28499                                  ;	Uses  : flags
 28500                                  ;
 28501                                  ;-------------------------------------------------------------------------
 28502                                  
 28503                                  	;entry SPCHK
 28504                                  SPCHK:
 28505                                  ;IF TableLook
 28506                                  	; 20/05/2019 - Retro DOS v4.0
 28507 00005156 50                      	PUSH	AX
 28508                                  
 28509                                  	; MSDOS 3.3
 28510                                  	;push	bx
 28511                                  	;mov	bx,CharType
 28512                                  	;; 09/08/2018
 28513                                  	;;xlat	byte [cs:bx]
 28514                                  	;cs	xlat
 28515                                  	;pop	bx
 28516                                  
 28517                                  	; MSDOS 6.0
 28518 00005157 E80400                  	CALL	GetCharType
 28519                                  	
 28520                                  	;test	al,4
 28521 0000515A A804                    	TEST	AL,FSPCHK
 28522 0000515C 58                      	POP	AX
 28523 0000515D C3                      	RETN
 28524                                  ;ELSE
 28525                                  ;	CMP	AL,9		; Filter out tabs too
 28526                                  ;	retz
 28527                                  ;; WARNING! " " MUST be the last compare
 28528                                  ;	CMP	AL," "
 28529                                  ;	return
 28530                                  ;ENDIF
 28531                                  
 28532                                  ;-------------------------------------------------------------------------
 28533                                  ;
 28534                                  ;  GetCharType - return flag bits indicating character type
 28535                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28536                                  ;	defined above at label CharType.
 28537                                  ;
 28538                                  ;	Entry : AL = character to return type flags for
 28539                                  ;	Exit  : AL = type flags
 28540                                  ;	Uses  : AL, flags
 28541                                  ;
 28542                                  ;-------------------------------------------------------------------------
 28543                                  
 28544                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28545                                  
 28546                                  	; 20/05/2019 - Retro DOS v4.0
 28547                                  	; MSDOS 6.0
 28548                                  GetCharType:
 28549                                  	;cmp	al,7Eh
 28550 0000515E 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28551 00005160 7316                    	jae	short gct_90		; return standard value
 28552                                  
 28553 00005162 53                      	push	bx
 28554 00005163 BB[E650]                	mov	bx,CharType		; load lookup table
 28555 00005166 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28556                                  	;xlat	cs:[bx] 		; get flags
 28557 00005168 2ED7                    	cs	xlat	
 28558 0000516A 5B                      	pop	bx
 28559                                  
 28560                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28561                                  ; we have to shift the flags down to the low nibble
 28562                                  
 28563 0000516B 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28564                                  
 28565 0000516D D0E8                    	shr	al,1			; we want high nibble, shift it down
 28566 0000516F D0E8                    	shr	al,1
 28567 00005171 D0E8                    	shr	al,1
 28568 00005173 D0E8                    	shr	al,1
 28569                                  gct_80:
 28570 00005175 240F                    	and	al,0Fh			; clear the unused nibble
 28571 00005177 C3                      	retn
 28572                                  gct_90:
 28573 00005178 B00F                    	mov	al,0Fh			; set all flags
 28574 0000517A C3                      	retn
 28575                                  
 28576                                  ;----------------------------------------------------------------------------
 28577                                  ;
 28578                                  ; Procedure : PATHCHRCMP
 28579                                  ;
 28580                                  ;----------------------------------------------------------------------------
 28581                                  
 28582                                  PATHCHRCMP:
 28583 0000517B 3C2F                    	CMP	AL,'/'
 28584 0000517D 7606                    	JBE	short PathRet
 28585 0000517F 3C5C                    	CMP	AL,'\'
 28586 00005181 C3                      	retn
 28587                                  GotFor:
 28588 00005182 B05C                    	MOV	AL,'\'
 28589 00005184 C3                      	retn
 28590                                  PathRet:
 28591 00005185 74FB                    	JZ	short GotFor
 28592 00005187 C3                      	retn
 28593                                  
 28594                                  ;============================================================================
 28595                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28596                                  ;============================================================================
 28597                                  ; 30/07/2018 - Retro DOS v3.0
 28598                                  ; 29/04/2019 - Retro DOS v4.0
 28599                                  
 28600                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28601                                  
 28602                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28603                                  
 28604                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28605                                  ;	NAME	IBMCTRLC
 28606                                  
 28607                                  ;**	Low level routines for detecting special characters on CON input,
 28608                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28609                                  ;	process termination code, and the INT 0 divide overflow handler.
 28610                                  ;
 28611                                  ;	FATAL
 28612                                  ;	FATAL1
 28613                                  ;	reset_environment
 28614                                  ;	DSKSTATCHK
 28615                                  ;	SPOOLINT
 28616                                  ;	STATCHK
 28617                                  ;	CNTCHAND
 28618                                  ;	DIVOV
 28619                                  ;	CHARHARD
 28620                                  ;	HardErr
 28621                                  ;
 28622                                  ;	Revision history:
 28623                                  ;
 28624                                  ;	    AN000	version 4.0   Jan 1988
 28625                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28626                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28627                                  ;
 28628                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28629                                  ;	      flags register. In order to return to user normally DOS used to
 28630                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28631                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28632                                  ;
 28633                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28634                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28635                                  ;	      charhard.
 28636                                  
 28637                                  ; 29/04/2019 - Retro DOS v4.0
 28638                                  	; MSDOS 6.0
 28639                                  ;		public	LowInt23Addr		
 28640                                  LowInt23Addr: ;	LABEL	DWORD
 28641 00005188 [CD10]0000              	DW	LowInt23, 0
 28642                                  
 28643                                  ;		public	LowInt24Addr
 28644                                  LowInt24Addr: ;	LABEL	DWORD
 28645 0000518C [E110]0000              	DW	LowInt24, 0
 28646                                  
 28647                                  ;		public	LowInt28Addr
 28648                                  LowInt28Addr: ;	LABEL	DWORD
 28649 00005190 [F510]0000              	DW	LowInt28, 0
 28650                                  
 28651                                  ;Break	<Checks for ^C in CON I/O>
 28652                                  
 28653                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28654                                  ; 05/05/2019 - Retro DOS v4.0
 28655                                  
 28656                                  ;---------------------------------------------------------------------------
 28657                                  ;
 28658                                  ; Procedure Name : DSKSTATCHK
 28659                                  ;
 28660                                  ; Check for ^C if only one level in
 28661                                  ;
 28662                                  ;---------------------------------------------------------------------------
 28663                                  
 28664                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28665                                  
 28666                                  DSKSTATCHK:        
 28667                                  	;CMP	BYTE [INDOS],1
 28668 00005194 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28669                                  	;retnz			; Do NOTHING
 28670                                  	; 16/12/2022
 28671 0000519A 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28672                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28673                                  	;jz	short _RET37 ; dskstatchk1
 28674                                  	;retn
 28675                                  ;_RET37:
 28676                                  ;dskstatchk1:
 28677 0000519C 51                      	PUSH    CX
 28678 0000519D 06                              PUSH    ES
 28679 0000519E 53                              PUSH    BX
 28680 0000519F 1E                              PUSH    DS
 28681 000051A0 56                              PUSH    SI
 28682                                          
 28683                                  	;PUSH	CS
 28684                                          ;POP	ES
 28685                                          ;PUSH	CS
 28686                                          ;POP	DS
 28687                                  
 28688 000051A1 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28689 000051A3 8EC3                    	MOV	ES,BX		; for deviocall2
 28690 000051A5 8EDB                    	MOV	DS,BX
 28691                                  
 28692                                  	; 16/12/2022
 28693                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28694                                  
 28695                                  	; 05/05/2019
 28696                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28697                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28698                                  	;mov	word [ss:DSKSTST],0
 28699                                  
 28700                                  	; 16/12/2022
 28701                                  	; 25/06/2019
 28702 000051A7 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28703 000051AC C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28704 000051B1 C706[9503]0000          	mov	word [DSKSTST],0
 28705                                  
 28706 000051B7 BB[9203]                        MOV     BX,DSKSTCALL
 28707                                  
 28708                                  	;LDS	SI,[ss:BCON]
 28709                                          ; 25/062019
 28710 000051BA C536[3200]              	lds	si,[BCON]
 28711                                  
 28712                                  ; 16/12/2022
 28713                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28714                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28715                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28716                                  ;	mov	word [ss:DSKSTST],0
 28717                                  ;	mov	bx,DSKSTCALL
 28718                                  ;	lds	si,[ss:BCON]
 28719                                  
 28720 000051BE E866F5                  	CALL	DEVIOCALL2
 28721                                   	; 15/03/2018
 28722                                  	;;test	word [ss:DSKSTST],200h
 28723                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28724                                  	; 05/05/2019
 28725 000051C1 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28726 000051C7 7408                    	jz	short _GotCh		; No characters available
 28727                                  
 28728 000051C9 30C0                            XOR     AL,AL                   ; Set zero
 28729                                  RET36:
 28730 000051CB 5E                              POP     SI
 28731 000051CC 1F                              POP     DS
 28732 000051CD 5B                              POP     BX
 28733 000051CE 07                              POP     ES
 28734 000051CF 59                              POP     CX
 28735                                  	; 16/12/2022
 28736                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28737                                  _RET37:
 28738 000051D0 C3                              RETN
 28739                                  
 28740                                  _GotCh:
 28741 000051D1 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28742                                  
 28743 000051D5 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28744 000051D7 75F2                            JNZ     SHORT RET36
 28745 000051D9 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28746 000051DF 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28747 000051E5 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28748                                  	; 09/09/2018
 28749 000051EA 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28750 000051F1 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28751 000051F8 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28752 000051FB 5E                              POP     SI
 28753 000051FC 1F                              POP     DS
 28754 000051FD 5B                              POP     BX                      ; Clean stack
 28755 000051FE 07                              POP     ES
 28756 000051FF 59                              POP     CX
 28757 00005200 E9D000                          JMP	CNTCHAND ; 10/08/2018
 28758                                  
 28759                                  	; 05/05/2019
 28760                                  NOSTOP:
 28761                                  	; MSDOS 6.0
 28762 00005203 3C10                    	CMP	AL,"P"-"@"
 28763 00005205 7509                    	JNZ	short check_next
 28764                                  				    	; SS override
 28765 00005207 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28766 0000520D 7406                    	JZ	short INCHKJ		; no
 28767 0000520F C3                      	retn
 28768                                  check_next:
 28769                                  	;IF	NOT TOGLPRN
 28770                                  	;CMP	AL,"N"-"@"
 28771                                  	;JZ	short INCHKJ
 28772                                  	;ENDIF
 28773                                  
 28774 00005210 3C03                    	CMP	AL,"C"-"@"
 28775 00005212 7401                    	JZ	short INCHKJ
 28776                                  check_end:
 28777 00005214 C3                      	retn
 28778                                  
 28779                                  	; MSDOS 3.3
 28780                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28781                                          ;JZ	short INCHKJ
 28782                                  
 28783                                  	; 15/04/2018
 28784                                          ;;IF	NOT TOGLPRN
 28785                                          ;CMP	AL,"N"-"@"
 28786                                          ;JZ	SHORT INCHKJ
 28787                                          ;;ENDIF
 28788                                  	
 28789                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28790                                          ;JZ	short INCHKJ
 28791                                  	;RETN
 28792                                  
 28793                                  	; 08/09/2018
 28794                                  INCHKJ:	; 10/08/2018
 28795 00005215 E9A500                  	JMP	INCHK
 28796                                  
 28797                                  ;----------------------------------------------------------------------------
 28798                                  ;
 28799                                  ; Procedure Name : SpoolInt
 28800                                  ;
 28801                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28802                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28803                                  ; the middle of an INT 24.
 28804                                  ;
 28805                                  ;----------------------------------------------------------------------------
 28806                                  
 28807                                  SPOOLINT:
 28808 00005218 9C                              PUSHF
 28809                                  	; 15/03/2018
 28810 00005219 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28811 0000521F 7423                            JZ      SHORT POPFRET
 28812 00005221 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28813 00005227 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28814                                  
 28815                                  	; 30/07/2018
 28816                                  
 28817                                  	; Note that we are going to allow an external program to issue system 
 28818                                  	; calls at this time. We MUST preserve IdleInt across this.
 28819                                  
 28820 00005229 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28821                                  
 28822                                  	; 05/05/2019 - Retro DOS v4.0
 28823                                   
 28824                                  	; MSDOS 6.0
 28825 0000522E 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28826 00005234 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28827 00005236 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28828 00005238 EB05                    	jmp	short spool_ret_addr
 28829                                  
 28830                                  do_low_int28:
 28831                                  	;call	far [ss:LowInt28Addr]
 28832 0000523A 2EFF1E[9051]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28833                                  
 28834                                  spool_ret_addr:
 28835                                  	;INT	int_spooler		; INT 28h
 28836                                  
 28837 0000523F 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28838                                  POPFRET:
 28839 00005244 9D                              POPF
 28840                                  _RET18:  
 28841 00005245 C3                      	RETN
 28842                                  
 28843                                  ; 05/05/2019 - Retro DOS v4.0
 28844                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28845                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28846                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28847                                  
 28848                                  ;----------------------------------------------------------------------------
 28849                                  ;
 28850                                  ; Procedure Name : STATCHK
 28851                                  ;
 28852                                  ;----------------------------------------------------------------------------
 28853                                  
 28854                                  STATCHK:
 28855 00005246 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28856                                                                          ; input redirection
 28857 00005249 53                              PUSH    BX
 28858 0000524A 31DB                            XOR     BX,BX
 28859 0000524C E890E4                          CALL	GET_IO_SFT
 28860 0000524F 5B                              POP     BX
 28861 00005250 72F3                            JC      SHORT _RET18
 28862                                  
 28863 00005252 B401                            MOV     AH,1
 28864 00005254 E8F9F2                          CALL	IOFUNC
 28865 00005257 74BF                            JZ      SHORT SPOOLINT
 28866 00005259 3C13                            CMP     AL,'S'-'@'
 28867 0000525B 75A6                            JNZ     SHORT NOSTOP
 28868                                  
 28869                                  	; 05/05/2019
 28870                                  	; MSDOS 6.0			; SS override
 28871 0000525D 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28872 00005263 75AF                    	JNZ	short check_end		; AN000; yes
 28873                                  
 28874 00005265 30E4                            XOR     AH,AH
 28875 00005267 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28876 0000526A EB4A                            JMP     SHORT PAUSOSTRT
 28877                                  PRINTOFF:
 28878                                  PRINTON:
 28879 0000526C 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28880                                  
 28881                                  	; 30/07/2018 - Retro DOS v3.0
 28882 00005271 53                      	PUSH	BX
 28883 00005272 BB0400                  	MOV	BX,4
 28884 00005275 E867E4                  	call	GET_IO_SFT
 28885 00005278 5B                      	POP	BX
 28886 00005279 72CA                    	jc	short _RET18
 28887 0000527B 06                      	PUSH	ES
 28888 0000527C 57                      	PUSH	DI
 28889 0000527D 1E                      	PUSH	DS
 28890 0000527E 07                      	POP	ES
 28891 0000527F 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28892                                  	;test	word [es:di+5],800h
 28893                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28894                                  	; 05/05/2019
 28895 00005281 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28896 00005286 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28897                                  
 28898                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28899                                  					; See if allowed
 28900 00005288 50                      	push	ax
 28901 00005289 B82611                  	mov	ax,1126h
 28902 0000528C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28903                                  			; Return: CF set on error, AX = error code
 28904                                  			; STACK unchanged
 28905 0000528E 58                      	pop	ax
 28906                                  
 28907 0000528F 730F                    	JNC	short NORM_PR 		; Echo is OK
 28908                                  
 28909                                  					; SS override
 28910 00005291 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28911                                  
 28912                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28913                                  
 28914 00005297 50                      	push    ax
 28915 00005298 B82411                  	mov     ax,1124h
 28916 0000529B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28917                                  			; ES:DI -> SFT, SS = DOS CS
 28918 0000529D 58                      	pop     ax
 28919                                  
 28920 0000529E EB10                    	JMP	SHORT RETP6
 28921                                  NORM_PR:
 28922 000052A0 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28923 000052A6 7505                    	JNZ	short PRNOPN
 28924 000052A8 E800F4                  	call	DEV_CLOSE_SFT
 28925 000052AB EB03                    	JMP	SHORT RETP6
 28926                                  PRNOPN:
 28927 000052AD E8F3F3                  	call	DEV_OPEN_SFT
 28928                                  RETP6:
 28929 000052B0 5F                      	POP	DI
 28930 000052B1 07                      	POP	ES
 28931                                  STATCHK_RETN:
 28932 000052B2 C3                              RETN
 28933                                  PAUSOLP:
 28934 000052B3 E862FF                          CALL    SPOOLINT
 28935                                  PAUSOSTRT:
 28936 000052B6 B401                            MOV     AH,1
 28937 000052B8 E895F2                          CALL	IOFUNC
 28938 000052BB 74F6                            JZ      SHORT PAUSOLP
 28939                                  INCHK:
 28940 000052BD 53                              PUSH    BX
 28941 000052BE 31DB                            XOR     BX,BX
 28942 000052C0 E81CE4                          CALL	GET_IO_SFT
 28943 000052C3 5B                              POP     BX
 28944 000052C4 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28945 000052C6 30E4                            XOR     AH,AH
 28946 000052C8 E885F2                          CALL	IOFUNC
 28947                                  	; 30/07/2018
 28948                                  	; MSDOS 3.3
 28949                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28950                                          ;JNZ	SHORT NOPRINT
 28951                                  
 28952                                  	;cmp	byte [SS:SCAN_FLAG],0
 28953                                  	;JZ	SHORT PRINTON	
 28954                                  	;mov	byte [ss:SCAN_FLAG],0
 28955                                  
 28956                                  	; 05/05/2019
 28957                                  	; MSDOS 6.0
 28958 000052CB 3C10                    	CMP	AL,"P"-"@"
 28959                                  	;;;;  7/14/86	ALT_Q key fix
 28960 000052CD 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28961                                  ;NOPRINT:	
 28962                                  	;IF	NOT TOGLPRN
 28963                                  	;CMP	AL,"N"-"@"
 28964                                  	;JZ	short PRINTOFF
 28965                                  	;ENDIF
 28966 000052CF 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28967                                  	;retnz
 28968 000052D1 75DF                    	jnz	short STATCHK_RETN
 28969                                  
 28970                                  	; !! NOTE: FALL THROUGH !!
 28971                                  
 28972                                  ;---------------------------------------------------------------------------
 28973                                  ;
 28974                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28975                                  ;
 28976                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28977                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28978                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 28979                                  ; processing to continue; 2) the original interrupt return address to the code
 28980                                  ; that performed the function call in the first place. If the user CTRL-C
 28981                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 28982                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 28983                                  ; is simulated.
 28984                                  ;
 28985                                  ;---------------------------------------------------------------------------
 28986                                  
 28987                                  CNTCHAND:
 28988                                  	; MSDOS 6.0			; SS override
 28989                                  					; AN002; from RAWOUT
 28990                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 28991                                  	;JNZ	short around_deadlock 	; AN002;
 28992                                  
 28993                                  	; 05/05/2019 - Retro DOS v4.0
 28994                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 28995 000052D3 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 28996 000052D9 7508                    	JNZ	short around_deadlock 	; AN002;
 28997                                  
 28998 000052DB B003                            MOV     AL,3			; Display "^C"
 28999 000052DD E86AC4                          CALL	BUFOUT
 29000 000052E0 E805C3                          CALL	CRLF
 29001                                  around_deadlock:
 29002 000052E3 16                              PUSH    SS
 29003 000052E4 1F                              POP     DS
 29004 000052E5 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29005 000052EA 7403                            JZ      SHORT NOSWAP
 29006 000052EC E85AE0                          CALL	SWAPBACK
 29007                                  NOSWAP:
 29008 000052EF FA                      	CLI				; Prepare to play with stack
 29009 000052F0 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29010 000052F4 8B26[8405]              	MOV	SP,[USER_SP]
 29011 000052F8 E85EB1                          CALL	restore_world       ; User registers now restored
 29012                                  
 29013                                  	; 30/07/2018 - Retro DOS v3.0 
 29014                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29015                                          ; 14/03/2018 - Retro DOS v2.0
 29016                                  	;MOV	BYTE [CS:INDOS],0	
 29017                                          ;MOV	BYTE [CS:ERRORMODE],0
 29018                                          ;MOV	[CS:ConC_Spsave],SP
 29019                                  	;clc	;30/07/2018
 29020                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29021                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29022                                  			; Return: return via RETF 2 with CF set
 29023                                  			; DOS will abort program with errorlevel 0
 29024                                  			; else
 29025                                  			; interrupted DOS call continues
 29026                                  
 29027                                  	; 05/05/2019 - Retro DOS v4.0
 29028                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29029                                  
 29030                                  	; CS was used to address these variables. We have to use DOSDATA
 29031                                  	
 29032 000052FB 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29033                                  			; (pop es, after 'call restore_world')	
 29034 000052FC 1E                      	push	ds
 29035                                  	;getdseg <ds>			; ds -> dosdata
 29036 000052FD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29037 00005302 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29038 00005307 C606[2003]00            	mov	byte [ERRORMODE],0
 29039 0000530C 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29040                                  	; User SP has changed because of push. Adjust for it
 29041 00005310 8306[3203]02            	add	word [ConC_Spsave],2
 29042                                  
 29043 00005315 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29044 0000531A 1F                       	pop	ds	; restore ds
 29045 0000531B 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29046 0000531D F8                      	CLC				
 29047 0000531E CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29048 00005320 EB06                    	jmp	short ctrlc_ret_addr
 29049                                  
 29050                                  	; 05/05/2019
 29051                                  do_low_int23:
 29052 00005322 F8                      	clc
 29053 00005323 2EFF1E[8851]            	call	far [cs:LowInt23Addr]	
 29054                                  
 29055                                  	; 30/07/2018 
 29056                                  
 29057                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29058                                  
 29059                                  ; The user has returned to us. The circumstances we allow are:
 29060                                  ;
 29061                                  ;   IRET	We retry the operation by redispatching the system call
 29062                                  ;   CLC/RETF	POP the stack and retry
 29063                                  ;   ... 	Exit the current process with ^C exit
 29064                                  ;
 29065                                  ; User's may RETURN to us and leave interrupts on. 
 29066                                  ; Turn 'em off just to be sure
 29067                                  
 29068                                  ctrlc_ret_addr: ; 05/05/2019
 29069                                  
 29070 00005328 FA                      	CLI
 29071                                  
 29072                                  	; MSDOS 3.3 
 29073                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29074                                  	;PUSHF				; and the flags (maybe new call)
 29075                                  	;POP	AX
 29076                                  
 29077                                  	; 05/05/2019
 29078                                  	; MSDOS 6.0
 29079                                  
 29080                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29081                                  
 29082 00005329 50                      	push	ax
 29083 0000532A 8CD8                    	mov	ax,ds
 29084                                  	;getdseg <ds>			; ds -> dosdata
 29085 0000532C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29086 00005331 A3[0A0D]                	mov	[TEMPSEG],ax
 29087 00005334 58                      	pop	ax
 29088 00005335 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29089 00005338 9C                      	pushf				; and the flags (maybe new call)
 29090 00005339 58                      	pop	ax
 29091                                  
 29092                                  ; See if the input stack is identical to the output stack
 29093                                  
 29094                                  	; MSDOS 3.3
 29095                                  	;CMP	SP,[CS:ConC_Spsave]
 29096                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29097                                  
 29098                                  	; MSDOS 6.0
 29099 0000533A 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29100 0000533E 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29101                                  
 29102                                  ; Repeat the operation by redispatching the system call.
 29103                                  
 29104                                  ctrlc_repeat:
 29105                                  	; MSDOS 3.3
 29106                                  	;MOV	AX,[CS:USER_IN_AX]
 29107                                  	; 05/05/2019
 29108                                  	; MSDOS 6.0
 29109 00005340 A1[3A03]                	mov	ax,[USER_IN_AX]
 29110 00005343 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29111                                  	; MSDOS 3.3 & MSDOS 6.0 
 29112                                  	;transfer COMMAND
 29113                                  COMMANDJ:
 29114 00005347 E9C2AF                  	JMP	COMMAND
 29115                                  
 29116                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29117                                  ; RETF'd leaving some flags on the stack and examine the input
 29118                                  
 29119                                  ctrlc_try_new:
 29120 0000534A 83C402                  	ADD	SP,2			; pop those flags
 29121                                  	;;test	ax,1
 29122                                  	;TEST	AX,f_Carry		; did he return with carry?
 29123 0000534D A801                    	test	al,f_Carry ; test al,1
 29124 0000534F 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29125                                  
 29126                                  	; MSDOS 6.0
 29127 00005351 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29128                                  
 29129                                  	; Well...  time to abort the user.  
 29130                                  	; Signal a ^C exit and use the EXIT system call..
 29131                                  
 29132                                  ctrlc_abort:
 29133                                  	; MSDOS 3.3
 29134                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29135                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29136                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29137                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29138                                  	;;JMP	SHORT COMMANDJ
 29139                                  	;JMP	COMMAND
 29140                                  
 29141                                  	; 05/05/2019 - Retro DOS v4.0
 29142                                  	; MSDOS 6.0
 29143 00005355 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29144 00005358 1E                      	push	ds
 29145                                  	;getdseg <ds>			; ds -> dosdata
 29146 00005359 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29147 0000535E C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29148 00005363 1F                      	pop	ds
 29149                                  	;transfer COMMAND		; give up by faking $EXIT
 29150 00005364 EBE1                    	JMP	SHORT COMMANDJ
 29151                                  	;JMP	COMMAND
 29152                                  
 29153                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29154                                  ;----------------------------------------------------------------------------
 29155                                  ;
 29156                                  ; Procedure Name : DIVOV
 29157                                  ;
 29158                                  ; Default handler for division overflow trap
 29159                                  ;
 29160                                  ;----------------------------------------------------------------------------
 29161                                  
 29162                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29163                                  DIVOV: 
 29164                                  	; 05/05/2019 - Retro DOS v4.0
 29165                                  	; 30/07/2018
 29166                                  	; 07/07/2018 - Retro DOS v3.0
 29167 00005366 BE[BA09]                	mov	si,DIVMES
 29168 00005369 2E8B1E[CD09]            	mov	bx,[cs:DivMesLen]
 29169                                  	;mov	ax,cs
 29170                                  	;mov	ss,ax
 29171                                  	; 05/05/2019
 29172                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29173 0000536E 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29174 00005373 BC[A007]                	mov     sp,AUXSTACK
 29175                                  	;call	RealDivOv ; MSDOS 3.3
 29176 00005376 E80200                  	call	_OUTMES ; MSDOS 6.0
 29177 00005379 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29178                                  
 29179                                  ; 30/07/2018
 29180                                  
 29181                                  ; MSDOS 6.0
 29182                                  ;---------------------------------------------------------------------------
 29183                                  ;
 29184                                  ; Procedure Name : OutMes
 29185                                  ;
 29186                                  ;
 29187                                  ; OutMes: perform message output
 29188                                  ; Inputs:   SS:SI points to message
 29189                                  ;	    BX has message length
 29190                                  ; Outputs:  message to BCON
 29191                                  ;
 29192                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29193                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29194                                  ;NB. This procedure is called only from DIVOV. -SR
 29195                                  ;
 29196                                  ;---------------------------------------------------------------------------
 29197                                  
 29198                                  ;MSDOS 3.3
 29199                                  ;---------------------------------------------------------------------------
 29200                                  ; RealDivOv: perform actual divide overflow stuff.
 29201                                  ; Inputs:   none
 29202                                  ; Outputs:  message to BCON
 29203                                  ;---------------------------------------------------------------------------
 29204                                  
 29205                                  	; 05/05/2019 - Retro DOS v4.0
 29206                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29207                                  
 29208                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29209                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29210                                  
 29211                                  ;---------------------------------------------------------------------------
 29212                                  ;
 29213                                  ; Procedure Name : OutMes
 29214                                  ;
 29215                                  ; OutMes: perform message output
 29216                                  ; Inputs:   SS:SI points to message
 29217                                  ;	    BX has message length
 29218                                  ; Outputs:  message to BCON
 29219                                  ;
 29220                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29221                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29222                                  ;NB. This procedure is called only from DIVOV. -SR
 29223                                  ;
 29224                                  ;---------------------------------------------------------------------------
 29225                                  
 29226                                  	; 30/07/2018
 29227                                  	; MSDOS 6.0
 29228                                  _OUTMES:
 29229                                  	; MSDOS 3.3
 29230                                  ;RealDivOv:
 29231                                  	; 07/07/2018 - Retro DOS v3.0
 29232                                          ;Context ES
 29233 0000537B 16                      	push	ss ; 05/05/2019
 29234                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29235 0000537C 07                      	POP	ES
 29236                                          ;Context DS
 29237 0000537D 16                      	push	ss ; 05/05/2019	
 29238                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29239 0000537E 1F                      	POP	DS
 29240 0000537F C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29241 00005384 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29242 00005389 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29243                                  	; BX = [DivMesLen] = 19
 29244 0000538F 891E[A403]                      MOV     [DSKSTCNT],BX
 29245 00005393 BB[9203]                        MOV     BX,DSKSTCALL
 29246 00005396 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29247                                  	; 08/09/2018
 29248                                  	;mov	[DEVIOBUF_PTR],si
 29249                                  	; MSDOS 6.0
 29250                                  					; CS is used for string, fill in 
 29251                                  					; segment address 
 29252 0000539A 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29253                                  
 29254 0000539E C536[3200]                      LDS     SI,[BCON]
 29255 000053A2 E882F3                          CALL	DEVIOCALL2
 29256                                  
 29257                                  	;; 14/03/2018
 29258                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29259                                  	;; 08/09/2018
 29260                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29261                                          ;MOV	WORD [CS:DSKSTCNT],1
 29262                                          
 29263                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29264                                  
 29265                                  	; ES still points to DOSDATA. ES is
 29266                                  					; not destroyed by deviocall2. So use
 29267                                  					; ES override.
 29268                                  
 29269 000053A5 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29270 000053AC 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29271                                  
 29272 000053B3 C3                      	RETN
 29273                                  
 29274                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29275                                  ;---------------------------------------------------------------------------
 29276                                  ;
 29277                                  ; Procedure Name : CHARHARD
 29278                                  ;
 29279                                  ;
 29280                                  ; Character device error handler
 29281                                  ; Same function as HARDERR
 29282                                  ;
 29283                                  ;---------------------------------------------------------------------------
 29284                                  
 29285                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29286                                  CHARHARD:
 29287                                  	; 05/05/2019 - Retro DOS v4.0
 29288                                  	; 30/07/2018
 29289                                  	; 08/07/2018 - Retro DOS v3.0
 29290                                  
 29291                                  	; MSDOS 6.0
 29292                                  		   			; M024 - start
 29293 000053B4 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29294                                  	;jne	short @f		; Y: allow fail
 29295 000053BA 750B                    	jne	short chard1
 29296                                  
 29297 000053BC 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29298                                  
 29299 000053BF 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29300 000053C5 7503                    	jnz	short ctrlp		; Y: 
 29301                                  ;@@:
 29302                                  chard1:					; M024 - end
 29303                                  	; MSDOS 6.0 & MSDOS 3.3
 29304                                  
 29305                                  ; Character device error handler
 29306                                  ; Same function as HARDERR
 29307                                  
 29308                                  	;or	ah,38h
 29309 000053C7 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29310                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29311 000053CA 368826[4B03]            	mov	[SS:ALLOWED],ah
 29312                                  
 29313                                  	; 15/03/2018
 29314 000053CF 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29315 000053D4 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29316 000053D9 56                              PUSH    SI
 29317                                  	;and	di,0FFh
 29318 000053DA 81E7FF00                        AND     DI,STECODE
 29319 000053DE 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29320 000053E0 E86400                          CALL    FATALC
 29321 000053E3 5E                              POP     SI
 29322                                  	;return
 29323 000053E4 C3                              RETN
 29324                                  
 29325                                  ;---------------------------------------------------------------------------
 29326                                  ;
 29327                                  ; Procedure Name : HardErr
 29328                                  ;
 29329                                  ; Hard disk error handler. Entry conditions:
 29330                                  ;	DS:BX = Original disk transfer address
 29331                                  ;	DX = Original logical sector number
 29332                                  ;	CX = Number of sectors to go (first one gave the error)
 29333                                  ;	AX = Hardware error code
 29334                                  ;	DI = Original sector transfer count	
 29335                                  ;	ES:BP = Base of drive parameters
 29336                                  ;	[READOP] = 0 for read, 1 for write
 29337                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29338                                  ; Output:
 29339                                  ;	[FAILERR] will be set if user responded FAIL
 29340                                  ;
 29341                                  ;--------------------------------------------------------------------------
 29342                                  
 29343                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29344                                  HARDERR:
 29345                                  	; 05/05/2019 - Retro DOS v4.0
 29346                                  	; 30/07/2018
 29347                                  	; 08/07/2018 - Retro DOS v3.0
 29348 000053E5 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29349                                          ;and	di,0FFh
 29350 000053E6 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29351                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29352                                  	;cmp	di,0
 29353 000053EA 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29354 000053ED 750A                            JNZ     short NOSETWRPERR
 29355 000053EF 50                              PUSH    AX
 29356                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29357                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29358                                          ;;MOV	AL,[ES:BP+0]
 29359                                  	; 15/12/2022
 29360 000053F0 268A4600                	mov	al,[ES:BP]
 29361                                          	; 15/03/2018
 29362 000053F4 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29363 000053F8 58                              POP     AX
 29364                                  NOSETWRPERR:
 29365 000053F9 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29366 000053FB 01C2                            ADD     DX,AX                   ; First sector number to retry
 29367 000053FD 52                              PUSH    DX
 29368                                  	; 08/07/2018
 29369                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29370 000053FE 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29371 00005402 5A                              POP     DX
 29372 00005403 01C3                            ADD     BX,AX                   ; First address for retry
 29373 00005405 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29374                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29375 00005407 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29376 0000540B 721A                            JB      SHORT ERRINT
 29377 0000540D FEC4                            INC     AH                      ; Flag for FAT
 29378                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29379                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29380 0000540F 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29381 00005413 7308                    	JAE	short TESTDIR 		; No
 29382                                  		 ; Err in FAT must force recomp of freespace
 29383                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29384                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29385 00005415 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29386 0000541B EB0A                    	JMP	SHORT ERRINT
 29387                                  TESTDIR:
 29388 0000541D FEC4                            INC     AH
 29389                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29390 0000541F 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29391 00005423 7202                            JB      SHORT ERRINT
 29392 00005425 FEC4                            INC     AH                      ; Must be in data area
 29393                                  ERRINT:
 29394 00005427 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29395 00005429 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29396                                  
 29397                                  	; 15/08/2018
 29398                                  					; SS override for allowed and EXITHOLD
 29399 0000542E 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29400                                  
 29401                                          ;entry   FATAL
 29402                                  FATAL:
 29403                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29404                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29405                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29406                                  	; 15/12/2022
 29407 00005433 268A4600                	MOV	AL,[ES:BP]        
 29408                                  
 29409                                  	;entry   FATAL1
 29410                                  FATAL1:  
 29411                                  	; 15/03/2018      
 29412 00005437 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29413 0000543C 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29414                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29415                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29416 00005441 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29417 00005445 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29418                                  
 29419                                  	; DI has the INT-24-style extended error. We now map the error code 
 29420                                  	; for this into the normalized get extended error set by using the 
 29421                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29422                                  	; the device returned codes and leave all others beyond the look up 
 29423                                  	; table alone.
 29424                                  
 29425                                  	; 08/07/2018 - Retro DOS v3.0
 29426                                  FATALC:
 29427 00005447 E89701                  	call	SET_I24_EXTENDED_ERROR
 29428                                  	;cmp	di,0Ch
 29429 0000544A 83FF0C                  	CMP	DI,error_I24_gen_failure
 29430 0000544D 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29431 0000544F BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29432                                  					;  Only come via GetExtendedError
 29433                                  ;** ----------------------------------------------------------------
 29434                                  ;
 29435                                  ; Entry point used by REDIRector on Network I 24 errors.
 29436                                  ;
 29437                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29438                                  ;
 29439                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29440                                  ;     EXITHOLD set for restore of ES:BP.
 29441                                  ; ------------------------------------------------------------------
 29442                                  	;entry	NET_I24_ENTRY
 29443                                  NET_I24_ENTRY:
 29444                                  GOT_RIGHT_CODE:
 29445 00005452 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29446 00005458 7404                            JZ	SHORT NoSetFail
 29447 0000545A B003                    	MOV	AL,3
 29448 0000545C EB6C                    	JMP	short FailRet
 29449                                  NoSetFail:
 29450 0000545E 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29451 00005463 16                              PUSH	SS
 29452 00005464 07                              POP	ES
 29453                                      
 29454                                  	; Wango!!! We may need to free some user state info... In 
 29455                                  	; particular, we may have locked down a JFN for a user and he may 
 29456                                  	; NEVER return to us. Thus,we need to free it here and then 
 29457                                  	; reallocate it when we come back.
 29458                                  
 29459 00005465 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29460 0000546B 740C                    	JZ	short _NoFree
 29461 0000546D 1E                      	push	ds
 29462 0000546E 56                      	push	si
 29463 0000546F 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29464 00005474 C604FF                  	MOV	BYTE [SI],0FFH
 29465 00005477 5E                      	pop	si
 29466 00005478 1F                      	pop	ds
 29467                                  
 29468                                  _NoFree:
 29469 00005479 FA                      	CLI
 29470                                  					; Prepare to play with stack
 29471 0000547A 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29472 0000547F 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29473                                  
 29474                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29475                                  
 29476                                  	;; Extended Open hooks
 29477                                  					; AN000;IFS.I24 error disabled
 29478                                  	;test	byte [ss:EXTOPEN_ON],2
 29479 00005484 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29480 0000548A 7404                    	JZ	short i24yes		; AN000;IFS.no
 29481                                  faili24:				; AN000;
 29482 0000548C B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29483 0000548E EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29484                                  i24yes: 				; AN000;
 29485                                  	;; Extended Open hooks
 29486                                  
 29487 00005490 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29488 00005495 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29489                                  
 29490                                  	;;int	24h	
 29491                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29492                                  					; must preserve ES
 29493                                  	; 05/05/2019
 29494 0000549A 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29495 000054A0 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29496 000054A2 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29497                                  					; must preserve ES
 29498 000054A4 EB05                    	jmp	short criterr_ret_addr
 29499                                  
 29500                                  do_low_int24:
 29501                                  	; 05/05/2019
 29502                                  	; MSDOS 6.0
 29503 000054A6 2EFF1E[8C51]            	call    far [cs:LowInt24Addr]
 29504                                  criterr_ret_addr:
 29505 000054AB 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29506 000054B0 268C16[8605]                    MOV     [ES:USER_SS],SS
 29507 000054B5 8CC5                            MOV     BP,ES
 29508 000054B7 8ED5                            MOV     SS,BP
 29509                                  passi24:
 29510 000054B9 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29511 000054BE 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29512 000054C3 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29513 000054C9 FB                              STI
 29514                                  FailRet:
 29515 000054CA 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29516                                  	
 29517                                  	; 08/07/2018
 29518                                  
 29519                                  	; Triage the user's reply.
 29520                                  
 29521 000054CF 3C01                    	CMP	AL,1
 29522 000054D1 723D                    	JB	short CheckIgnore	; 0 => ignore
 29523 000054D3 7445                    	JZ	short CheckRetry	; 1 => retry
 29524 000054D5 3C03                    	CMP	AL,3			; 3 => fail
 29525 000054D7 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29526                                  
 29527                                  	; The reply was fail. See if we are allowed to fail.
 29528                                  
 29529                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29530                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29531                                  	;test	byte [ss:ALLOWED],8
 29532 000054D9 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29533 000054DF 7443                    	jz	short DoAbort	; No, do abort
 29534                                  DoFail:
 29535 000054E1 B003                    	MOV	AL,3		; just in case...
 29536                                  				; AN000;EO. I24 error disabled
 29537                                  	; 05/05/2019
 29538                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29539 000054E3 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29540 000054E9 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29541                                  	
 29542 000054EB 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29543                                  CleanUp:
 29544 000054F0 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29545 000054F6 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29546                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29547                                  	;jnz	short CleanUp2
 29548                                  	;retn
 29549                                  	; 17/12/2022
 29550 000054FC 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29551                                  CleanUp2:
 29552 000054FE 1E                      	push	ds
 29553 000054FF 56                      	push	si
 29554 00005500 50                      	push	ax
 29555 00005501 36A1[AA05]              	MOV	AX,[ss:SFN]
 29556 00005505 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29557 0000550A 8804                    	MOV	[SI],AL
 29558 0000550C 58                      	pop	ax
 29559 0000550D 5E                      	pop	si
 29560 0000550E 1F                      	pop	ds
 29561                                  Cleanup_retn:
 29562 0000550F C3                      	retn
 29563                                  
 29564                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29565                                  
 29566                                  CheckIgnore:
 29567                                  	;test	byte [ss:ALLOWED],20h
 29568 00005510 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29569 00005516 74C9                    	jz	short DoFail			 ; No, do fail
 29570 00005518 EBD6                    	jmp	short CleanUp
 29571                                  
 29572                                  	; The reply was RETRY. See if we are allowed to retry.
 29573                                  
 29574                                  CheckRetry:
 29575                                  	;test	byte [ss:ALLOWED],10h
 29576 0000551A 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29577 00005520 74BF                    	jz	short DoFail			; No, do fail
 29578 00005522 EBCC                    	JMP	short CleanUp
 29579                                  
 29580                                  	; The reply was ABORT.
 29581                                  DoAbort:
 29582 00005524 16                      	push	ss
 29583 00005525 1F                      	pop	ds
 29584                                  
 29585 00005526 803E[5703]00            	CMP	byte [CONSWAP],0
 29586 0000552B 7403                    	JZ	short NOSWAP2
 29587 0000552D E819DE                  	call	SWAPBACK
 29588                                  NOSWAP2:
 29589                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29590                                  	; turn this abort into a fail.
 29591                                  
 29592                                  	;test	[fAborting],0FFh
 29593                                  	;jnz	short DoFail
 29594                                  
 29595 00005530 803E[5903]00            	cmp	byte [fAborting],0
 29596 00005535 75AA                    	JNZ	short DoFail
 29597                                  
 29598                                  	; Set return code
 29599                                  
 29600 00005537 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29601 0000553C 30C0                    	XOR	AL,AL
 29602                                  
 29603                                  	; we are truly aborting the process. Go restore information from 
 29604                                  	; the PDB as necessary.
 29605                                  
 29606 0000553E E99F0D                  	jmp	exit_inner
 29607                                  
 29608                                  ;** --------------------------------------------------------------------------
 29609                                  ;
 29610                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29611                                  ; different, then an old-style return is performed. If they are the same,
 29612                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29613                                  ; the source of the terminate addresses.
 29614                                  ;
 29615                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29616                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29617                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29618                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29619                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29620                                  ; operation. In essence, we dis-allow the abort response.
 29621                                  ;
 29622                                  ; output:   none.
 29623                                  ; ----------------------------------------------------------------------------
 29624                                  
 29625                                  	;entry	reset_environment
 29626                                  	
 29627                                  reset_environment:
 29628                                  	; 30/07/2018 - Retro DOS v3.0
 29629                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29630                                  
 29631                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29632                                  
 29633 00005541 1E                      	PUSH	DS			; save PDB of process
 29634                                  
 29635                                  	; There are no critical sections in force. Although we may enter 
 29636                                  	; here with critical sections locked down, they are no longer 
 29637                                  	; relevant. We may safely free all allocated resources.
 29638                                  
 29639 00005542 B482                    	MOV	AH,82h
 29640                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29641                                  	;int	2Ah 	
 29642 00005544 CD2A                    	INT	int_IBM
 29643                                  
 29644                                  					; SS override
 29645 00005546 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29646                                  
 29647                                  					; DOS 4.00 doesn't need it
 29648                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29649                                  					; Allow REDIR to clear some stuff
 29650                                  					; On process exit.
 29651 0000554C B82211                  	mov     ax, 1122h
 29652 0000554F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29653                                  			; SS = DOS CS
 29654                                  	;mov	al,22h	
 29655 00005551 B022                    	MOV	AL,int_terminate
 29656 00005553 E875B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29657                                  
 29658 00005556 59                      	POP	CX			; get ThisPDB
 29659 00005557 06                      	push	es
 29660 00005558 53                      	push	bx			; save return address
 29661                                  
 29662 00005559 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29663 0000555E 8EDB                    	MOV	DS,BX
 29664 00005560 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29665                                  
 29666                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29667                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29668                                  	; is not Exit_keep_process
 29669                                  	
 29670 00005563 39D8                    	CMP	AX,BX
 29671 00005565 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29672 00005567 39CB                    	CMP	BX,CX
 29673 00005569 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29674 0000556B 50                      	PUSH	AX			; save parent
 29675                                  
 29676                                  					; SS override
 29677                                  	;cmp	byte [SS:EXIT_TYPE],3
 29678 0000556C 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29679 00005572 7406                    	JZ	short reset_to_parent 	; keeping this process
 29680                                  
 29681                                  	; We are truly removing a process. Free all allocation blocks 
 29682                                  	; belonging to this PDB
 29683                                  
 29684                                  	;invoke	arena_free_process
 29685 00005574 E8A10D                  	call	arena_free_process
 29686                                  
 29687                                  	; Kill off remainder of this process. Close file handles and signal 
 29688                                  	; to relevant network folks that this process is dead. Remember that 
 29689                                  	; CurrentPDB is STILL the current process!
 29690                                  
 29691                                  	;invoke	DOS_ABORT
 29692 00005577 E8BAD9                  	call	DOS_ABORT
 29693                                  
 29694                                  reset_to_parent:
 29695                                  					; SS override
 29696 0000557A 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29697                                  
 29698                                  reset_return:				; come here for normal return
 29699                                  	;Context DS			; DS is used to refer to DOSDATA  
 29700 0000557F 16                      	push	ss
 29701 00005580 1F                      	pop	ds	
 29702                                  
 29703 00005581 B0FF                    	MOV	AL,-1
 29704                                  
 29705                                  	; make sure that everything is clean In this case ignore any errors, 
 29706                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29707                                  
 29708                                  	;EnterCrit critDisk
 29709 00005583 E8D2BD                  	call	ECritDisk
 29710                                  	;invoke	FLUSHBUF
 29711 00005586 E8B605                  	call	FLUSHBUF
 29712                                  	;LeaveCrit critDisk
 29713 00005589 E8E7BD                  	call	LCritDisk
 29714                                  
 29715                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29716                                  
 29717 0000558C E879F7                  	call	CHECK_VIRT_OPEN
 29718 0000558F FA                      	CLI
 29719 00005590 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29720 00005595 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29721 0000559A C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29722 0000559F 8F06[8005]              	POP	WORD [EXITHOLD]
 29723 000055A3 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29724                                  
 29725                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29726                                  
 29727 000055A7 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29728 000055AB 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29729 000055AF 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29730                                  
 29731 000055B3 E8A3AE                  	call	restore_world
 29732                                  
 29733                                  	; 05/05/2019
 29734 000055B6 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29735                                  
 29736                                  	; MSDOS 6.0
 29737 000055B7 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29738 000055B8 8CD8                    	mov	ax,ds			; and not on stack.
 29739                                  	;getdseg <ds>			; ds -> dosdata
 29740 000055BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29741 000055BF A3[0A0D]                	mov	[TEMPSEG],ax
 29742 000055C2 58                      	pop	ax
 29743                                  					; set up ds to DOSDATA
 29744                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29745 000055C3 A3[8405]                	mov	[USER_SP],ax
 29746                                  
 29747 000055C6 58                      	POP	AX			; suck off CS:IP of interrupt...
 29748 000055C7 58                      	POP	AX
 29749 000055C8 58                      	POP	AX
 29750                                  
 29751                                  ; M011 : BEGIN
 29752                                  
 29753                                  	; MSDOS 3.3
 29754                                  ;	MOV	AX,0F202h	; STI
 29755                                  
 29756                                  	; MSDOS 6.0
 29757 000055C9 9F                      	LAHF
 29758 000055CA 86E0                    	XCHG	AH,AL
 29759 000055CC 2402                    	AND	AL,2
 29760 000055CE B4F2                    	MOV	AH,0F2h
 29761                                  
 29762                                  ; M011 : END
 29763                                  
 29764                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29765 000055D0 50                      	PUSH	AX
 29766                                   
 29767                                  	;PUSH	word [CS:EXITHOLD+2]
 29768                                  	;PUSH	word [CS:EXITHOLD]
 29769                                  	
 29770                                  	; MSDOS 6.0
 29771 000055D1 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29772 000055D5 FF36[8005]              	PUSH	word [EXITHOLD]
 29773                                  
 29774                                  	;MOV	AX,[CS:USER_SP]
 29775                                  
 29776                                  	; MSDOS 6.0
 29777 000055D9 A1[8405]                	MOV	AX,[USER_SP]
 29778 000055DC 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29779                                  
 29780 000055E0 CF                      	IRET			; Long return back to user terminate address
 29781                                  
 29782                                  ;---------------------------------------------------------------------------
 29783                                  ;
 29784                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29785                                  ;
 29786                                  ; This routine handles extended error codes.
 29787                                  ; Input : DI = error code from device
 29788                                  ; Output: All EXTERR fields are set
 29789                                  ;
 29790                                  ;--------------------------------------------------------------------------
 29791                                  
 29792                                  SET_I24_EXTENDED_ERROR:
 29793 000055E1 50                      	PUSH	AX
 29794                                  					; ErrMap24End is in DOSDATA
 29795 000055E2 B8[BA0E]                	MOV	AX,ErrMap24End
 29796 000055E5 2D[AA0E]                	SUB	AX,ErrMap24
 29797                                  					; Change to dosdata to access 
 29798                                  					; ErrMap24 and EXTERR -SR
 29799                                  	; 05/05/2019 - Retro DOS v4.0
 29800                                  	
 29801                                  	; MSDOS 6.0
 29802 000055E8 1E                      	push	ds
 29803                                  	;getdseg <ds>			; ds ->dosdata
 29804 000055E9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29805                                  
 29806                                  	; AX is the index of the first unavailable error. Do not translate 
 29807                                  	; if greater or equal to AX.
 29808                                  
 29809 000055EE 39C7                    	CMP	DI,AX
 29810 000055F0 89F8                    	MOV	AX,DI
 29811 000055F2 7306                    	JAE	short NoTrans
 29812                                  
 29813                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29814 000055F4 8A85[AA0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29815 000055F8 30E4                    	XOR	AH,AH
 29816                                  NoTrans:
 29817                                  	;MOV	[CS:EXTERR],AX
 29818 000055FA A3[2403]                	mov	[EXTERR],AX
 29819 000055FD 1F                      	pop	ds
 29820                                  	;assume	ds:nothing
 29821 000055FE 58                      	POP	AX
 29822                                  
 29823                                  	; Now Extended error is set correctly. Translate it to get correct 
 29824                                  	; error locus class and recommended action.
 29825                                  
 29826 000055FF 56                      	PUSH	SI
 29827                                  					; ERR_TABLE_24 is in DOSCODE 
 29828 00005600 BE[5A0E]                	MOV	SI,ERR_TABLE_24
 29829 00005603 E886B0                  	call	CAL_LK			; Set other extended error fields
 29830 00005606 5E                      	POP	SI
 29831 00005607 C3                      	retn
 29832                                  
 29833                                  ;============================================================================
 29834                                  ; FAT.ASM, MSDOS 6.0, 1991
 29835                                  ;============================================================================
 29836                                  ; 30/07/2018 - Retro DOS v3.0
 29837                                  ; 20/05/2019 - Retro DOS v4.0
 29838                                  
 29839                                  ;	TITLE	FAT - FAT maintenance routines
 29840                                  ;	NAME	FAT
 29841                                  
 29842                                  ;**	FAT.ASM
 29843                                  ;----------------------------------------------------------------------------
 29844                                  ;	Low level local device routines for performing disk change sequence,
 29845                                  ;	setting cluster validity, and manipulating the FAT
 29846                                  ;
 29847                                  ;	IsEof
 29848                                  ;	UNPACK
 29849                                  ;	PACK
 29850                                  ;	MAPCLUSTER
 29851                                  ;	FATREAD_SFT
 29852                                  ;	FATREAD_CDS
 29853                                  ;	FAT_operation
 29854                                  ;
 29855                                  ;	Revision history:
 29856                                  ;
 29857                                  ;	  AN000  version Jan. 1988
 29858                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29859                                  ;
 29860                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29861                                  ;	       from CL0FATENTRY rather than disk.
 29862                                  
 29863                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29864                                  
 29865                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29866                                  ;----------------------------------------------------------------------------
 29867                                  ;
 29868                                  ; Procedure Name : IsEOF
 29869                                  ;
 29870                                  ; IsEOF - check the fat value in BX for eof.
 29871                                  ;
 29872                                  ;   Inputs:	ES:BP point to DPB
 29873                                  ;		BX has fat value
 29874                                  ;   Outputs:	JAE eof
 29875                                  ;   Registers modified: none
 29876                                  ;
 29877                                  ;---------------------------------------------------------------------------
 29878                                  
 29879                                  IsEOF:
 29880                                  	;cmp	word [es:bp+0Dh],0FF6h
 29881 00005608 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29882 0000560E 730B                    	JAE	short EOF16			; yes, check for eof there
 29883                                  
 29884                                  ;J.K. 8/27/86
 29885                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29886                                  ;of any media that has "F0"(Other) as a MediaByte.
 29887                                  ;Hopely, this does not create any side effect for those who may use any value
 29888                                  ;other than "FF8-FFF" as an EOF for their own file.
 29889                                  
 29890 00005610 81FBF00F                	cmp	bx,0FF0h
 29891 00005614 7404                    	je	short IsEOF_other
 29892                                  
 29893 00005616 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29894                                  IsEOF_other:
 29895 0000561A C3                      	retn
 29896                                  EOF16:
 29897 0000561B 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29898 0000561E C3                      	retn
 29899                                  
 29900                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29901                                  
 29902                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29903                                  ;---------------------------------------------------------------------------
 29904                                  ;
 29905                                  ; Procedur Name : UNPACK
 29906                                  ;
 29907                                  ; Inputs:
 29908                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29909                                  ;	ES:BP = Base of drive parameters
 29910                                  ; Outputs:
 29911                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29912                                  ;	Zero set means DI=0 (free cluster)
 29913                                  ;	Carry set means error (currently user FAILed to I 24)
 29914                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29915                                  ;
 29916                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29917                                  ;
 29918                                  ;----------------------------------------------------------------------------
 29919                                  	
 29920                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29921                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29922                                  
 29923                                  	; 20/05/2019 - Retro DOS v4.0
 29924                                  UNPACK:
 29925                                  	; MSDOS 6.0			; M014 - Start
 29926 0000561F 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29927 00005621 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29928 00005623 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29929 00005627 09FF                    	or	di,di 			; return z if di=0
 29930 00005629 C3                      	retn				; done
 29931                                  up_cont:				; M014 - End
 29932                                  	; MSDOS 3.3 & MSDOS 6.0
 29933                                  	;cmp	bx,[es:bp+0Dh]
 29934 0000562A 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29935 0000562E 7726                    	JA	short HURTFAT
 29936 00005630 E8DC00                  	CALL	MAPCLUSTER
 29937 00005633 721E                    	jc	short _DoContext
 29938 00005635 8B3D                    	MOV	DI,[DI]
 29939 00005637 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29940 00005639 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29941 0000563D 81FEF60F                	CMP	SI,4096-10
 29942 00005641 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29943 00005643 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29944 00005645 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29945                                  High12:
 29946 00005647 D1EF                    	SHR	DI,1
 29947 00005649 D1EF                    	SHR	DI,1
 29948 0000564B D1EF                    	SHR	DI,1
 29949 0000564D D1EF                    	SHR	DI,1
 29950                                  Unpack12:
 29951 0000564F 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29952                                  _DoContext:
 29953 00005653 16                      	PUSH	SS
 29954 00005654 1F                      	POP	DS
 29955 00005655 C3                      	retn
 29956                                  HURTFAT:
 29957                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29958                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29959 00005656 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29960 0000565C 50                      	PUSH	AX
 29961 0000565D B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29962                                  
 29963                                  ;hkn; SS override
 29964 0000565F 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29965                                  ;
 29966                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29967                                  ;
 29968 00005665 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29969 00005668 E8C8FD                  	call	FATAL
 29970 0000566B 3C03                    	CMP	AL,3
 29971 0000566D F8                      	CLC
 29972 0000566E 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29973 00005670 F9                      	STC				; User said FAIL
 29974                                  OKU_RET:
 29975 00005671 58                      	POP	AX
 29976                                  hurtfat_retn:
 29977 00005672 C3                      	retn
 29978                                  
 29979                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 29980                                  
 29981                                  ;Break	<PACK -- PACK FAT ENTRIES>
 29982                                  ;----------------------------------------------------------------------------
 29983                                  ;
 29984                                  ; Procedure Name : PACK
 29985                                  ;
 29986                                  ; Inputs:
 29987                                  ;	BX = Cluster number
 29988                                  ;	DX = Data
 29989                                  ;	ES:BP = Pointer to drive DPB
 29990                                  ; Outputs:
 29991                                  ;	The data is stored in the FAT at the given cluster.
 29992                                  ;	SI,DX,DI all destroyed
 29993                                  ;	Carry set means error (currently user FAILed to I 24)
 29994                                  ;	No other registers affected
 29995                                  ;
 29996                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 29997                                  ;
 29998                                  ;---------------------------------------------------------------------------
 29999                                  
 30000                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30001                                  	; 20/05/2019 - Retro DOS v4.0
 30002                                  PACK:
 30003                                  	; MSDOS 6.0			; M014 - start
 30004 00005673 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30005 00005675 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30006 00005677 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30007 0000567B C3                      	retn				; done
 30008                                  p_cont:					; M014 - end
 30009                                  	; MSDOS 3.3 & MSDOS 6.0
 30010 0000567C E89000                  	CALL	MAPCLUSTER
 30011 0000567F 72D2                    	JC	short _DoContext
 30012 00005681 8B35                    	MOV	SI,[DI]
 30013 00005683 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30014 00005685 51                      	PUSH	CX			; move data to upper 12 bits
 30015 00005686 B104                    	MOV	CL,4
 30016 00005688 D3E2                    	SHL	DX,CL
 30017 0000568A 59                      	POP	CX
 30018 0000568B 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30019 0000568E EB14                    	JMP	SHORT PACKIN
 30020                                  ALIGNED:
 30021                                  	;cmp	word [es:bp+0Dh],0FF6h
 30022 00005690 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30023 00005696 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30024 00005698 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30025 0000569C 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30026 000056A0 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30027                                  Pack16:
 30028 000056A2 31F6                    	XOR	SI,SI			; MZ no original data
 30029                                  PACKIN:
 30030 000056A4 09D6                    	OR	SI,DX
 30031 000056A6 8935                    	MOV	[DI],SI
 30032                                  
 30033                                  ;hkn; SS override
 30034 000056A8 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30035                                  	; MSDOS 6.0
 30036 000056AD F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30037                                  					;LB. if already dirty		  ;AN000;
 30038 000056B1 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30039                                  	; 10/06/2019
 30040 000056B3 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30041                                  	
 30042                                  	;or	byte [si+5],40h
 30043 000056B6 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30044                                  yesdirty11:				;LB.				;AN000;
 30045                                  ;hkn; SS override
 30046 000056BA 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30047                                  ;hkn; SS is DOSDATA
 30048 000056C0 16                      	push	ss
 30049 000056C1 1F                      	pop	ds
 30050 000056C2 74AE                    	jz	short hurtfat_retn	; Carry clear
 30051 000056C4 50                      	PUSH	AX
 30052 000056C5 53                      	PUSH	BX
 30053 000056C6 51                      	PUSH	CX
 30054 000056C7 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30055 000056CA 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30056                                  	;;add	si,16 ; MSDOS 3.3
 30057                                  	;add	si,20 ; MSDOS 6.0
 30058 000056CE 83C614                  	ADD	SI,BUFINSIZ
 30059 000056D1 8824                    	MOV	[SI],AH
 30060                                  ;hkn; SS is DOSDATA
 30061                                  	;Context DS
 30062 000056D3 16                      	push	ss
 30063 000056D4 1F                      	pop	ds
 30064                                  	
 30065 000056D5 50                      	PUSH	AX
 30066                                  	
 30067                                  	; MSDOS 6.0
 30068 000056D6 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30069 000056DA 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30070                                  
 30071                                  	; MSDOS 3.3 & MSDOS 6.0
 30072 000056DE 8B16[9005]              	MOV	DX,[CLUSSEC]
 30073 000056E2 BE0100                  	MOV	SI,1
 30074 000056E5 30C0                    	XOR	AL,AL
 30075 000056E7 E85903                  	call	GETBUFFRB
 30076 000056EA 58                      	POP	AX
 30077 000056EB 721C                    	JC	short POPP_RET
 30078 000056ED C53E[E205]              	LDS	DI,[CURBUF]
 30079                                  	
 30080                                  	; MSDOS 6.0
 30081 000056F1 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30082                                  					;LB. if already dirty		  ;AN000;
 30083 000056F5 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30084 000056F7 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30085                                  	
 30086                                  	;or	byte [di+5],40h
 30087 000056FA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30088                                  yesdirty12:
 30089                                  	;;add	di,16
 30090                                  	;add	di,20 ; MSDOS 6.0
 30091 000056FE 83C714                  	ADD	DI,BUFINSIZ
 30092 00005701 4F                      	DEC	DI
 30093                                  	;add	di,[es:bp+2]
 30094 00005702 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30095 00005706 8805                    	MOV	[DI],AL
 30096 00005708 F8                      	CLC
 30097                                  POPP_RET:
 30098 00005709 16                      	PUSH	SS
 30099 0000570A 1F                      	POP	DS
 30100 0000570B 59                      	POP	CX
 30101 0000570C 5B                      	POP	BX
 30102 0000570D 58                      	POP	AX
 30103 0000570E C3                      	retn
 30104                                  
 30105                                  ; 31/07/2018 - Retro DOS v3.0
 30106                                  
 30107                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30108                                  ;---------------------------------------------------------------------------
 30109                                  ;
 30110                                  ; Procedure Name : MAPCLUSTER
 30111                                  ;
 30112                                  ; Inputs:
 30113                                  ;	ES:BP Points to DPB
 30114                                  ;	BX Is cluster number
 30115                                  ; Function:
 30116                                  ;	Get a pointer to the cluster
 30117                                  ; Outputs:
 30118                                  ;	DS:DI Points to contents of FAT for given cluster
 30119                                  ;	DS:SI Points to start of buffer
 30120                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30121                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30122                                  ;	Carry set if failed.
 30123                                  ; SI is destroyed.
 30124                                  ;
 30125                                  ;---------------------------------------------------------------------------
 30126                                  
 30127                                  	; 20/05/2019 - Retro DOS v4.0
 30128                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30129                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30130                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30131                                  
 30132                                  MAPCLUSTER:
 30133                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30134 0000570F C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30135                                  	;SAVE	<AX,BX,CX,DX>
 30136 00005714 50                      	push	ax
 30137 00005715 53                      	push	bx
 30138 00005716 51                      	push	cx
 30139 00005717 52                      	push	dx
 30140 00005718 89D8                    	MOV	AX,BX			; AX = BX
 30141 0000571A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30142 00005720 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30143 00005722 D1E8                    	SHR	AX,1			; AX = BX/2
 30144                                  Map16:	
 30145                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30146 00005724 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30147                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30148 00005726 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30149 00005728 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30150 0000572A 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30151                                  
 30152                                  ;IF FastDiv
 30153                                  ;
 30154                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30155                                  ; case and apply a really fast algorithm to get the desired results
 30156                                  ;
 30157                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30158                                  ; Fast method takes 39+20*4=119
 30159                                  ;
 30160                                  ; This saves a bunch.
 30161                                  
 30162 0000572E 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30163 00005732 7510                    	jne	short _DoDiv		; 4  for no jump
 30164 00005734 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30165 00005736 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30166 0000573A 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30167                                  	; MDOS 3.3
 30168                                  	;shr	al,1	
 30169                                  	; MDOS 6.0
 30170 0000573C D1EF                    	shr	di,1			; 2
 30171 0000573E D0D8                    	rcr	al,1			; 2
 30172                                  	; MDOS 3.3 (& MSDOS 6.0)
 30173 00005740 30E4                    	xor	ah,ah			; 3
 30174 00005742 EB04                    	jmp	short DivDone		; 16
 30175                                  _DoDiv:
 30176                                  ;ENDIF
 30177                                  	; MSDOS 3.3
 30178                                  	;xor	dx,dx
 30179                                  	; MSDOS 6.0
 30180 00005744 89FA                    	mov	dx,di			; 2
 30181                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30182 00005746 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30183                                  ;IF FastDiv
 30184                                  DivDone:
 30185                                  ;ENDIF
 30186                                  	;add	ax,[es:bp+6]
 30187 00005748 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30188 0000574C 49                      	DEC	CX			; CX is sector size - 1
 30189                                  	;SAVE	<AX,DX,CX>
 30190 0000574D 50                      	push	ax
 30191 0000574E 52                      	push	dx
 30192 0000574F 51                      	push	cx
 30193 00005750 89C2                    	MOV	DX,AX
 30194                                  
 30195                                  	; MSDOS 6.0
 30196 00005752 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30197                                  	; MDOS 3.3 (& MSDOS 6.0)
 30198 00005758 30C0                    	XOR	AL,AL
 30199 0000575A BE0100                  	MOV	SI,1
 30200                                  	;invoke	GETBUFFRB
 30201 0000575D E8E302                  	call	GETBUFFRB
 30202                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30203 00005760 59                      	pop	cx
 30204 00005761 58                      	pop	ax
 30205 00005762 5A                      	pop	dx
 30206 00005763 7257                    	JC	short MAP_POP
 30207                                  
 30208 00005765 C536[E205]              	LDS	SI,[CURBUF]
 30209                                  	;;lea	di,[si+16]
 30210                                  	;lea	di,[si+20] ; MSDOS 6.0
 30211 00005769 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30212 0000576C 01C7                    	ADD	DI,AX
 30213 0000576E 39C8                    	CMP	AX,CX
 30214 00005770 7537                    	JNZ	short MAPRET
 30215 00005772 8A05                    	MOV	AL,[DI]
 30216                                  	;Context DS		 	;hkn; SS is DOSDATA
 30217 00005774 16                      	push	ss
 30218 00005775 1F                      	pop	ds	
 30219 00005776 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30220 0000577A A2[8E05]                	MOV	[CLUSSAVE],AL
 30221 0000577D 8916[9005]              	MOV	[CLUSSEC],DX
 30222                                  	; MSDOS 6.0
 30223 00005781 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30224 00005787 42                      	INC	DX
 30225 00005788 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30226                                  	; MDOS 3.3 (& MSDOS 6.0)
 30227 0000578E 30C0                    	XOR	AL,AL
 30228 00005790 BE0100                  	MOV	SI,1
 30229                                  	;invoke	GETBUFFRB
 30230 00005793 E8AD02                  	call	GETBUFFRB
 30231 00005796 7224                    	JC	short MAP_POP
 30232 00005798 C536[E205]              	LDS	SI,[CURBUF]
 30233 0000579C 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30234 0000579F 8A05                    	MOV	AL,[DI]
 30235                                  	;Context DS			;hkn; SS is DOSDATA
 30236 000057A1 16                      	push	ss
 30237 000057A2 1F                      	pop	ds
 30238 000057A3 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30239                                  
 30240                                  ;hkn; CLUSSAVE is in DOSDATA
 30241 000057A6 BF[8E05]                	MOV	DI,CLUSSAVE
 30242                                  MAPRET:
 30243                                  	;RESTORE <DX,CX,BX>
 30244 000057A9 5A                      	pop	dx
 30245 000057AA 59                      	pop	cx
 30246 000057AB 5B                      	pop	bx
 30247 000057AC 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30248 000057AE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30249 000057B4 7302                    	JAE	short MapSet		; MZ no, set flags
 30250 000057B6 89D8                    	MOV	AX,BX
 30251                                  MapSet:
 30252 000057B8 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30253                                  	;RESTORE <AX>
 30254 000057BA 58                      	pop	ax
 30255 000057BB C3                      	retn
 30256                                  
 30257                                  MAP_POP:
 30258                                  	;RESTORE <DX,CX,BX,AX>
 30259 000057BC 5A                      	pop	dx
 30260 000057BD 59                      	pop	cx
 30261 000057BE 5B                      	pop	bx
 30262 000057BF 58                      	pop	ax
 30263                                  fatread_sft_retn: ; 17/12/2022
 30264 000057C0 C3                      	retn
 30265                                  
 30266                                  ; 20/05/2019 - Retro DOS v4.0
 30267                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30268                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30269                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30270                                  
 30271                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30272                                  ;----------------------------------------------------------------------------
 30273                                  ;
 30274                                  ; Procedure Name : FATREAD_SFT
 30275                                  ;
 30276                                  ; Inputs:
 30277                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30278                                  ;		giving a NET SFT will produce system crashing results).
 30279                                  ;	DS DOSDATA
 30280                                  ; Function:
 30281                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30282                                  ;	if disk changed.
 30283                                  ;	In other respects, same as FATREAD_CDS.
 30284                                  ;	(note ES:DI destroyed!)
 30285                                  ; Outputs:
 30286                                  ;	Carry set if error (currently user FAILed to I 24)
 30287                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30288                                  ;	as far as invalidating curdir_ID is concerned.
 30289                                  ;	Since getting a true disk changed on this call is a screw up
 30290                                  ;	anyway, that's the way it goes.
 30291                                  ;
 30292                                  ;---------------------------------------------------------------------------
 30293                                  
 30294                                  FATREAD_SFT:
 30295 000057C1 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30296                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30297                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30298                                  	; 15/12/2022
 30299 000057C5 268A4600                	mov	AL,[ES:BP]
 30300 000057C9 A2[7605]                	MOV	[THISDRV],AL
 30301 000057CC E871AE                  	call	GOTDPB			;Set THISDPB
 30302                                  	;CALL	FAT_GOT_DPB
 30303                                  	; 17/12/2022
 30304 000057CF EB78                    	jmp	FAT_GOT_DPB
 30305                                  ;fatread_sft_retn:
 30306                                  	;retn
 30307                                  
 30308                                  ;----------------------------------------------------------------------------
 30309                                  ;
 30310                                  ; Procedure Name : FATREAD_CDS
 30311                                  ;
 30312                                  ; Inputs:
 30313                                  ;	DS:DOSDATA
 30314                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30315                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30316                                  ; Function:
 30317                                  ;	If disk may have been changed, media is determined and buffers are
 30318                                  ;	flagged invalid. If not, no action is taken.
 30319                                  ; Outputs:
 30320                                  ;	ES:BP = Drive parameter block
 30321                                  ;	THISDPB = ES:BP
 30322                                  ;	THISDRV set
 30323                                  ;	Carry set if error (currently user FAILed to I 24)
 30324                                  ; DS preserved , all other registers destroyed
 30325                                  ;
 30326                                  ;---------------------------------------------------------------------------
 30327                                  
 30328                                  	; 20/05/2019 - Retro DOS v4.0
 30329                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30330                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30331                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30332                                  
 30333                                  FATREAD_CDS:
 30334 000057D1 06                      	PUSH	ES
 30335 000057D2 57                      	PUSH	DI
 30336                                  	;les	bp,[es:di+45h]
 30337 000057D3 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30338                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30339                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30340                                  	; 15/12/2022
 30341 000057D7 268A4600                	mov	AL,[ES:BP]
 30342 000057DB A2[7605]                	MOV	[THISDRV],AL
 30343 000057DE E85FAE                  	call	GOTDPB			;Set THISDPB
 30344 000057E1 E86500                  	CALL	FAT_GOT_DPB
 30345 000057E4 5F                      	POP	DI			;Get back CDS pointer
 30346 000057E5 07                      	POP	ES
 30347 000057E6 72D8                    	jc	short fatread_sft_retn
 30348 000057E8 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30349                                  
 30350                                  ;	Media changed. We now need to find all CDS structures which use this
 30351                                  ;	DPB and invalidate their ID pointers.
 30352                                  
 30353                                  MED_CHANGE:
 30354 000057EA 31C0                    	XOR	AX,AX
 30355 000057EC 48                      	DEC	AX			; AX = -1
 30356 000057ED 1E                      	PUSH	DS
 30357 000057EE 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30358 000057F2 30ED                    	XOR	CH,CH			; CX is number of structures
 30359                                  	;lds	si,[es:di+45h]
 30360 000057F4 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30361                                  
 30362                                  ;hkn; SS override
 30363                                  
 30364                                  ;	Find all CDSs with this DevPtr
 30365                                  ;
 30366                                  ;	(ax) = -1
 30367                                  ;	(ds:si) = DevPtr
 30368                                  
 30369 000057F8 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30370                                  frcd20: 
 30371                                  	;;test	word [es:di+43h],8000h
 30372                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30373 000057FD 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30374 00005802 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30375                                  
 30376                                  	; MSDOS 3.3
 30377                                  	;push	es
 30378                                  	;push	di
 30379                                  	;les	di,[es:di+45h]
 30380                                  	;;les	di,[ES:DI+curdir.devptr]
 30381                                  	;call	POINTCOMP
 30382                                  	;pop	di
 30383                                  	;pop	es
 30384                                  	;jnz	short frcd25
 30385                                  
 30386                                  	; MSDOS 6.0
 30387 00005804 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30388 00005808 7512                    	jne	short frcd25		; no match
 30389 0000580A 8CDB                    	mov	bx,ds
 30390 0000580C 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30391 00005810 750A                    	jne	short frcd25		; CDS not for this drive
 30392                                  
 30393                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30394                                  	;test	[es:di+49h],ax
 30395 00005812 26854549                	test	[ES:DI+curdir.ID],AX
 30396 00005816 7404                    	JZ	short frcd25		; If root (0), leave root
 30397                                  	;mov	[es:di+49h],ax
 30398 00005818 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30399                                  frcd25:	
 30400                                  	;;add	di,81  ; MSDOS 3.3
 30401                                  	;add	di,88  ; MSDOS 6.0	 
 30402 0000581C 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30403 0000581F E2DC                    	LOOP	frcd20
 30404 00005821 1F                      	POP	DS
 30405                                  NO_CHANGE:
 30406 00005822 C42E[8A05]              	LES	BP,[THISDPB]
 30407 00005826 F8                      	CLC
 30408 00005827 C3                      	retn
 30409                                  
 30410                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30411                                  ;----------------------------------------------------------------------------
 30412                                  ;
 30413                                  ; Procedure Name : FAT_operation
 30414                                  ;
 30415                                  ;----------------------------------------------------------------------------
 30416                                  
 30417                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30418                                  
 30419                                  FAT_operation:
 30420                                  	; 31/07/2018 - Retro DOS v3.0
 30421                                  FATERR:
 30422                                  	;mov	word [es:bp+1Eh],-1
 30423                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30424 00005828 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30425                                  					; Err in FAT must force recomp of freespace
 30426                                  	;and	di,0FFh
 30427 0000582E 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30428                                  	;mov	byte [ALLOWED],18h
 30429 00005832 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30430                                  	;mov	ah,1Ah
 30431 00005837 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30432 00005839 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30433 0000583C E8F8FB                  	call	FATAL1
 30434 0000583F C42E[8A05]              	LES	BP,[THISDPB]
 30435 00005843 3C03                    	CMP	AL,3
 30436 00005845 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30437 00005847 F9                      	STC				; User said FAIL
 30438 00005848 C3                      	retn
 30439                                  
 30440                                  FAT_GOT_DPB:
 30441                                  	;Context DS			;hkn; SS is DOSDATA
 30442 00005849 16                      	push	ss			
 30443 0000584A 1F                      	pop	ds
 30444                                  	;mov	al,0Fh
 30445 0000584B B00F                    	MOV	AL,DMEDHL
 30446                                  	;mov	ah,[es:bp+1]
 30447 0000584D 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30448 00005851 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30449 00005854 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30450 00005859 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30451                                  	;;mov	al,[es:bp+16h]
 30452                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30453 0000585F 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30454 00005863 A2[6703]                	MOV	[CALLMED],AL
 30455 00005866 06                      	PUSH	ES
 30456 00005867 1E                      	PUSH	DS
 30457                                  
 30458                                  ;hkn; DEVCALL is in DOSDATA
 30459 00005868 BB[5A03]                	MOV	BX,DEVCALL
 30460                                  	;;lds	si,[es:bp+12h]
 30461                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30462 0000586B 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30463 0000586F 07                      	POP	ES			; ES:BX Points to call header
 30464 00005870 E8B4EE                  	call	DEVIOCALL2
 30465                                  	;Context DS		 	;hkn; SS is DOSDATA
 30466 00005873 16                      	push	ss
 30467 00005874 1F                      	pop	ds
 30468 00005875 07                      	POP	ES			; Restore ES:BP
 30469 00005876 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30470                                  	;test	di,8000h
 30471                                  	;jnz	short FATERR
 30472 0000587A 09FF                    	or	di,di
 30473 0000587C 78AA                    	js	short FATERR		; have error
 30474 0000587E 30E4                    	XOR	AH,AH
 30475                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30476                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30477 00005880 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30478 00005884 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30479                                  ; See if we had changed volume id by creating one on the diskette
 30480 00005887 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30481 0000588B 7508                    	jnz	short CHECK_BYT
 30482 0000588D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30483 00005892 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30484                                  					; new volume label.
 30485                                  CHECK_BYT:
 30486 00005895 0A26[6803]              	OR	AH,[CALLRBYT]
 30487                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30488                                  	;JMP	short NEWDSK
 30489                                  	; 17/12/2022
 30490 00005899 7865                    	js	short NEWDSK
 30491                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30492                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30493                                  	;JMP	short NEWDSK
 30494                                  
 30495                                  CHECK_ZR:
 30496 0000589B 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30497 0000589D F8                      	CLC
 30498 0000589E C3                      	retn				; If Media not changed (NZ)
 30499                                  
 30500                                  DISK_CHNG_ERR:
 30501 0000589F 06                      	PUSH	ES
 30502 000058A0 55                      	PUSH	BP
 30503                                  	;;les	bp,[es:bp+12h]
 30504                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30505 000058A1 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30506                                  	;;test	word [es:bp+4],800h
 30507                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30508 000058A5 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30509 000058AA 5D                      	POP	BP
 30510 000058AB 07                      	POP	ES
 30511 000058AC 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30512 000058AE 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30513 000058AF 57                      	PUSH	DI
 30514 000058B0 16                      	push	ss			;hkn; SS is DOSDATA
 30515 000058B1 1F                      	pop	ds
 30516                                  	;mov	byte [ALLOWED],18h
 30517 000058B2 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30518 000058B7 06                      	PUSH	ES
 30519 000058B8 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30520 000058BC 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30521 000058C0 07                      	POP	ES
 30522 000058C1 893E[2803]              	MOV	[EXTERRPT],DI
 30523                                  	;mov	ax,0Fh
 30524 000058C5 B80F00                  	MOV	AX,error_I24_wrong_disk
 30525 000058C8 C606[7505]01            	MOV	byte [READOP],1		; Write
 30526                                  	;invoke	HARDERR
 30527 000058CD E815FB                  	call	HARDERR
 30528 000058D0 5F                      	POP	DI			; Get back buffer for ignore
 30529 000058D1 1F                      	POP	DS
 30530 000058D2 3C03                    	CMP	AL,3
 30531                                  FAIL_OPJ2:
 30532 000058D4 741D                    	JZ	short FAIL_OP
 30533 000058D6 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30534                                  
 30535                                  CHKBUFFDIRT:
 30536                                  	; 20/05/2019 - Retro DOS v4.0
 30537                                  
 30538                                  	; MSDOS 3.3
 30539                                  	;lds	di,[BUFFHEAD]
 30540                                  
 30541                                  	; MSDOS 6.0
 30542 000058D9 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30543 000058DF 741F                    	je	short NEWDSK			; no, skip the check
 30544 000058E1 E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30545                                  nbuffer:
 30546                                  	;cmp	al,[di+4]
 30547 000058E4 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30548 000058E7 750E                    	jne	short lfnxt			; no, go for next buffer
 30549                                  	;test   byte [di+5],40h
 30550 000058E9 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30551 000058ED 7408                    	jz	short lfnxt			; no, go for next buffer
 30552                                  	;Context DS
 30553 000058EF 16                      	push	ss
 30554 000058F0 1F                      	pop	ds
 30555 000058F1 F8                      	clc
 30556 000058F2 C3                      	retn
 30557                                  
 30558                                  FAIL_OP:					; This label & code is here
 30559                                  	;Context DS				;  for reachability
 30560 000058F3 16                      	push	ss
 30561 000058F4 1F                      	pop	ds
 30562 000058F5 F9                      	STC
 30563 000058F6 C3                      	retn
 30564                                  
 30565                                  lfnxt:
 30566                                  	; 15/08/2018 - Retro DOS v3.0
 30567                                  	; MSDOS 3.3
 30568                                  	;lds	di,[di]
 30569                                  
 30570                                  	; 20/05/2019 - Retro DOS v4.0
 30571 000058F7 8B3D                    	mov	di,[di]
 30572                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30573                                  	
 30574                                  	; MSDOS 3.3
 30575                                  	;cmp	di,-1
 30576                                  	;jne	short nbuffer
 30577                                  	
 30578                                  	; MSDOS 6.0
 30579 000058F9 36393E[BA0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30580 000058FE 75E4                    	jne	short nbuffer			; no, check this guy also
 30581                                  
 30582                                  ; If no dirty buffers, assume Media changed
 30583                                  NEWDSK:
 30584                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30585                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30586 00005900 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30587                                  						;  recompute
 30588                                  	; MSDOS 3.3
 30589                                  	;call	SETVISIT
 30590                                  	; MSDOS 6.0
 30591 00005906 E8D300                  	call	 GETCURHEAD
 30592                                  nxbuffer:
 30593                                  	; MSDOS 3.3
 30594                                  	;or 	byte [di+5],20h
 30595                                  	; MSDOS 3.3 & MSDOS 6.0
 30596                                  	;cmp	[di+4],al
 30597 00005909 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30598 0000590C 7510                    	jne	short lfnxt2
 30599                                  	;test	byte [di+5],40h
 30600 0000590E F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30601 00005912 758B                    	jnz	short DISK_CHNG_ERR
 30602                                  	;mov	word [di+4],20FFh
 30603 00005914 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30604 00005919 E8D200                  	call	SCANPLACE
 30605                                  	; MSDOS 6.0
 30606 0000591C EB02                    	jmp	short skpbuff
 30607                                  lfnxt2:
 30608 0000591E 8B3D                    	mov	di,[di]
 30609                                  	;mov	di,[di+BUFFINFO.buf_next]
 30610                                  skpbuff:
 30611                                  	; MSDOS 6.0
 30612 00005920 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30613 00005925 75E2                    	jne	short nxbuffer
 30614                                  
 30615 00005927 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30616 0000592D 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30617 0000592F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30618 00005934 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30619 00005936 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30620                                  ;lfnxt2:
 30621                                  	; MSDOS 3.3
 30622                                  	;call	SKIPVISIT
 30623                                  	;jnz	short nxbuffer
 30624                                  GOGETBPB:
 30625                                  	; MSDOS 3.3 & MSDOS 6.0
 30626                                  	;;lds	di,[es:bp+12h]
 30627                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30628 0000593C 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30629                                  	; 20/05/2019
 30630                                  	;test	word [di+4],2000h
 30631                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30632 00005940 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30633 00005944 7510                    	JNZ	short GETFREEBUF
 30634                                  	;context DS	    		;hkn; SS is DOSDATA
 30635 00005946 16                      	push	ss
 30636 00005947 1F                      	pop	ds
 30637 00005948 BB0200                  	MOV	BX,2
 30638 0000594B E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30639                                  FAIL_OPJ:
 30640 0000594E 72A3                    	JC	short FAIL_OP
 30641 00005950 C53E[E205]              	LDS	DI,[CURBUF]
 30642 00005954 EB13                    	JMP	SHORT GOTGETBUF
 30643                                  
 30644                                  GETFREEBUF:
 30645 00005956 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30646 00005957 55                      	PUSH	BP
 30647                                  	; MSDOS 3.3
 30648                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30649                                  	; MSDOS 6.0
 30650 00005958 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30651                                  ;hkn; SS override
 30652 0000595A 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30653 0000595F E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30654                                  	; MSDOS 3.3 & MSDOS 6.0
 30655 00005962 E84202                  	call	BUFWRITE
 30656 00005965 5D                      	POP	BP
 30657 00005966 07                      	POP	ES
 30658                                  	;JC	short FAIL_OPJ
 30659 00005967 728A                    	jc	short FAIL_OP
 30660                                  GOTGETBUF:
 30661                                  	;;add	di,16
 30662                                  	;add	di,20 ; MSDOS 6.0
 30663 00005969 83C714                  	ADD	DI,BUFINSIZ
 30664                                  
 30665                                  ;hkn; SS override
 30666 0000596C 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30667                                  	;Context DS			;hkn; SS is DOSDATA
 30668 00005971 16                      	push	ss
 30669 00005972 1F                      	pop	ds
 30670 00005973 893E[6803]              	MOV	[CALLXAD],DI
 30671                                  	;mov	al,16h
 30672 00005977 B016                    	MOV	AL,DBPBHL
 30673                                  	;mov	ah,[es:bp+1]
 30674 00005979 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30675 0000597D A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30676 00005980 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30677 00005985 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30678                                  	;;mov	al,[es:bp+16h]
 30679                                  	;mov	al,[es:bp+17h]
 30680 0000598B 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30681 0000598F A2[6703]                	MOV	[CALLMED],AL
 30682 00005992 06                      	PUSH	ES
 30683 00005993 1E                      	PUSH	DS
 30684                                  	;;push	word [es:bp+14h]
 30685                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30686 00005994 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30687                                  	;;push	word [es:bp+12h]
 30688                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30689 00005998 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30690                                  
 30691                                  ;hkn; DEVCALL is in DOSDATA
 30692 0000599C BB[5A03]                	MOV	BX,DEVCALL
 30693 0000599F 5E                      	POP	SI
 30694 000059A0 1F                      	POP	DS			; DS:SI Points to device header
 30695 000059A1 07                      	POP	ES			; ES:BX Points to call header
 30696                                  	;invoke	DEVIOCALL2
 30697 000059A2 E882ED                  	call	DEVIOCALL2
 30698 000059A5 07                      	POP	ES			; Restore ES:BP
 30699                                  	;Context DS
 30700 000059A6 16                      	push	ss		 	;hkn; SS is DOSDATA
 30701 000059A7 1F                      	pop	ds
 30702 000059A8 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30703                                  	; MSDOS 3.3
 30704                                  	;test	di,8000h
 30705                                  	;jnz	short FATERRJ
 30706                                  	; MSDOS 6.0
 30707 000059AC 09FF                    	or	di,di
 30708 000059AE 7829                    	js	short FATERRJ 		; have error
 30709                                  	;;mov	al,[es:bp+16h]
 30710                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30711 000059B0 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30712 000059B4 C536[6C03]              	LDS	SI,[CALLBPB]
 30713                                  	;;mov	word [es:bp+1Ch],0
 30714                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30715 000059B8 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30716                                  	;invoke	$SETDPB
 30717 000059BE E858B6                  	call	_$SETDPB
 30718                                  
 30719                                  ;hkn; SS override
 30720 000059C1 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30721                                  	;mov	al,[es:bp+8]
 30722 000059C6 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30723                                  
 30724                                  	; MSDOS 3.3
 30725                                  	;;mov	ah,[es:bp+0Fh]
 30726                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30727                                  	;;mov	[DI-8],ax
 30728                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30729                                  
 30730                                  	; MSDOS 6.0
 30731                                  	;mov	[di-0Ah],al
 30732 000059CA 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30733                                  						;>32mb		  ;AN000;
 30734                                  	;mov	ax,[es:bp+0Fh]
 30735 000059CD 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30736                                  	;mov	[di-9h],ax			  ;AC000;
 30737 000059D1 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30738                                  					;>32mb Correct buffer info ;AC000;
 30739                                  	;Context DS			;hkn; SS is DOSDATA
 30740 000059D4 16                      	push	ss
 30741 000059D5 1F                      	pop	ds
 30742 000059D6 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30743 000059D8 C3                      	retn
 30744                                  
 30745                                  FATERRJ: 
 30746 000059D9 E94CFE                  	JMP	FATERR
 30747                                  
 30748                                  ;============================================================================
 30749                                  ; STDBUF.ASM
 30750                                  ;============================================================================
 30751                                  ; Retro DOS v2.0 - 12/03/2018
 30752                                  
 30753                                  ;
 30754                                  ; Standard buffer management for MSDOS
 30755                                  ;
 30756                                  
 30757                                  ;.xlist
 30758                                  ;.xcref
 30759                                  ;INCLUDE STDSW.ASM
 30760                                  ;.cref
 30761                                  ;.list
 30762                                  
 30763                                  ;TITLE	STDBUF - MSDOS buffer management
 30764                                  ;NAME	STDBUF
 30765                                  
 30766                                  ;INCLUDE BUF.ASM
 30767                                  
 30768                                  ;============================================================================
 30769                                  ; BUF.ASM
 30770                                  ;============================================================================
 30771                                  ; 31/07/2018 - Retro DOS v3.0
 30772                                  ; Retro DOS v2.0 - 12/03/2018
 30773                                  ;
 30774                                  ; buffer management for MSDOS
 30775                                  ;
 30776                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30777                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30778                                  ;
 30779                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30780                                  ;
 30781                                  ;SETVISIT:
 30782                                  ;	; 31/07/2018 - Retro DOS v3.0
 30783                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30784                                  ;; Inputs:
 30785                                  ;;      None
 30786                                  ;; Function:
 30787                                  ;;      Set up a scan of I/O buffers
 30788                                  ;; Outputs:
 30789                                  ;;      All visit flags = 0
 30790                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30791                                  ;;                    may cause a scan to stop in the middle leaving some
 30792                                  ;;                    visit flags set, and some not set.
 30793                                  ;;      DS:DI Points to [BUFFHEAD]
 30794                                  ;; No other registers altered
 30795                                  ;
 30796                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30797                                  ;	PUSH    AX
 30798                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30799                                  ;	;mov	al,0DFh
 30800                                  ;	mov	al,~buf_visit
 30801                                  ;SETLOOP:
 30802                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30803                                  ;	;and	[DI+5],al
 30804                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30805                                  ;       LDS     DI,[DI]
 30806                                  ;       CMP     DI,-1
 30807                                  ;       JNZ     SHORT SETLOOP
 30808                                  ;       POP     AX ; 09/09/2018
 30809                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30810                                  ;SVISIT_RETN:
 30811                                  ;       RETN
 30812                                  ;
 30813                                  ;SKIPVISIT:
 30814                                  ;	; 31/07/2018 - Retro DOS v3.0
 30815                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30816                                  ;
 30817                                  ;; Inputs:
 30818                                  ;;      DS:DI Points to a buffer
 30819                                  ;; Function:
 30820                                  ;;      Skip visited buffers
 30821                                  ;; Outputs:
 30822                                  ;;      DS:DI Points to next unvisited buffer
 30823                                  ;;      Zero is set if skip to LAST buffer
 30824                                  ;; No other registers altered
 30825                                  ;
 30826                                  ;       CMP     DI,-1
 30827                                  ;       ;retz
 30828                                  ;       JZ	SHORT SVISIT_RETN
 30829                                  ;
 30830                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30831                                  ;       ;;;retnz
 30832                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30833                                  ;
 30834                                  ;	;test	byte [di+5],20h
 30835                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30836                                  ;	JNZ	short SKIPLOOP
 30837                                  ;	
 30838                                  ;	push	ax
 30839                                  ;	or	al,1
 30840                                  ;	pop	ax
 30841                                  ;	retn	
 30842                                  ;
 30843                                  ;SKIPLOOP:
 30844                                  ;	LDS     DI,[DI]
 30845                                  ;       JMP     SHORT SKIPVISIT
 30846                                  
 30847                                  ;============================================================================
 30848                                  ; BUF.ASM, MSDOS 6.0, 1991
 30849                                  ;============================================================================
 30850                                  ; 31/07/2018 - Retro DOS v3.0
 30851                                  ; 04/05/2019 - Retro DOS v4.0
 30852                                  
 30853                                  ;	TITLE	BUF - MSDOS buffer management
 30854                                  ;	NAME	BUF
 30855                                  
 30856                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30857                                  ;
 30858                                  ;	GETCURHEAD
 30859                                  ;	ScanPlace
 30860                                  ;	PLACEBUF
 30861                                  ;	PLACEHEAD
 30862                                  ;	PointComp
 30863                                  ;	GETBUFFR
 30864                                  ;	GETBUFFRB
 30865                                  ;	FlushBuf
 30866                                  ;	BufWrite
 30867                                  ;	SET_RQ_SC_PARMS
 30868                                  ;
 30869                                  ;	Revision history:
 30870                                  ;
 30871                                  ;		AN000  version 4.00  Jan. 1988
 30872                                  ;		A004   PTM 3765 -- Disk reset failed
 30873                                  ;		M039 DB 10/17/90 - Disk write optimization
 30874                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30875                                  
 30876                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30877                                  ;----------------------------------------------------------------------------
 30878                                  ; Procedure Name : GetCurHead
 30879                                  ; Inputs:
 30880                                  ;	 No Inputs
 30881                                  ; Function:
 30882                                  ;	Returns the pointer to the first buffer in Queue
 30883                                  ;	and updates FIRST_BUFF_ADDR
 30884                                  ;       and invalidates LASTBUFFER (recency pointer)
 30885                                  ; Outputs:
 30886                                  ;	DS:DI = pointer to the first buffer in Queue
 30887                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30888                                  ;       LASTBUFFER = -1
 30889                                  ; No other registers altered
 30890                                  ;----------------------------------------------------------------------------
 30891                                  
 30892                                  ; 04/05/2019 - Retro DOS v4.0
 30893                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30894                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30895                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30896                                  
 30897                                  GETCURHEAD:
 30898 000059DC 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30899 000059E1 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30900 000059E8 36893E[BA0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30901 000059ED C3                      	retn
 30902                                  
 30903                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30904                                  ;----------------------------------------------------------------------------
 30905                                  ; Procedure Name : ScanPlace
 30906                                  ; Inputs:
 30907                                  ;	Same as PLACEBUF
 30908                                  ; Function:
 30909                                  ;	Save scan location and call PLACEBUF
 30910                                  ; Outputs:
 30911                                  ;	DS:DI Points to saved scan location
 30912                                  ; All registers, except DS:DI, preserved.
 30913                                  ;----------------------------------------------------------------------------
 30914                                  ;M039: Rewritten to preserve registers.
 30915                                  
 30916                                  ;SCANPLACE:
 30917                                  ;	; 31/07/2018 - Retro DOS v3.0
 30918                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30919                                  ;	push	es
 30920                                  ;	les	si,[di]
 30921                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30922                                  ;	call	PLACEBUF
 30923                                  ;	push	es
 30924                                  ;	pop	ds
 30925                                  ;	mov	di,si
 30926                                  ;	pop	es
 30927                                  ;scanplace_retn:
 30928                                  ;	retn	
 30929                                  	
 30930                                  	; MSDOS 6.0
 30931                                  SCANPLACE:
 30932 000059EE FF35                    	push	word [di]
 30933                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30934 000059F0 E80200                  	call	PLACEBUF
 30935 000059F3 5F                      	pop	di
 30936 000059F4 C3                      	retn
 30937                                  
 30938                                  ;----------------------------------------------------------------------------
 30939                                  ; Procedure Name : PlaceBuf
 30940                                  ; Input:
 30941                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30942                                  ; Function:
 30943                                  ;	Remove buffer from queue and re-insert it in proper place.
 30944                                  ; NO registers altered
 30945                                  ;----------------------------------------------------------------------------
 30946                                  
 30947                                  ;procedure PLACEBUF,NEAR
 30948                                  
 30949                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30950                                  	; 20/05/2019 - Retro DOS v4.0
 30951                                  PLACEBUF:
 30952                                  	; 31/07/2018 - Retro DOS v3.0
 30953                                  
 30954                                  	; MSDOS 6.0
 30955 000059F5 50                      	push	AX			;Save only regs we modify	;AN000;
 30956 000059F6 53                      	push	BX							;AN000;
 30957 000059F7 56                      	push	SI							;AN000;
 30958                                  	
 30959 000059F8 8B05                    	mov	ax,[di]
 30960                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30961 000059FA 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30962                                  	
 30963 000059FF 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30964 00005A01 7420                    	je	short nret			;Yes, special case	;AN000;
 30965 00005A03 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30966 00005A05 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30967 00005A07 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30968 00005A0B EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30969                                  not_first:
 30970                                  	;mov	si,[di+2]
 30971 00005A0D 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30972 00005A10 8904                    	mov	[si],ax
 30973                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30974 00005A12 96                      	xchg	si,ax
 30975                                  	;mov	[si+2],ax
 30976 00005A13 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30977                                  	
 30978 00005A16 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30979 00005A19 893C                    	mov	[si],di
 30980                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 30981 00005A1B 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 30982 00005A1E 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 30983 00005A21 891D                    	mov	[di],bx
 30984                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 30985                                  nret:									;AN000;
 30986 00005A23 5E                      	pop	SI							;AN000;
 30987 00005A24 5B                      	pop	BX							;AN000;
 30988 00005A25 58                      	pop	AX							;AN000;
 30989                                  									;AN000;
 30990                                  	;cmp	byte [di+4],0FFh
 30991 00005A26 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 30992 00005A2A 7505                            jne	short pbx			; M039: -no, jump.
 30993 00005A2C 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 30994                                  pbx:	
 30995 00005A31 C3                      	retn								;AN000;
 30996                                  
 30997                                  	; 31/07/2018 - Retro DOS v3.0
 30998                                  
 30999                                  	; MSDOS 3.3
 31000                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31001                                  
 31002                                  ;PLACEBUF:
 31003                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31004                                  ;	
 31005                                  ;       CALL	save_world
 31006                                  ;       LES     CX,[DI]
 31007                                  ;       CMP     CX,-1           	; Buf is LAST?
 31008                                  ;       JZ      SHORT NRET		; Buffer already last
 31009                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31010                                  ;       PUSH    DS
 31011                                  ;       POP     ES              	; Buf is ES:DI
 31012                                  ;	; 15/03/2018
 31013                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31014                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31015                                  ;       JNZ     SHORT BUFLOOP
 31016                                  ;       MOV     [SS:BUFFHEAD],CX
 31017                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31018                                  ;       JMP     SHORT LOOKEND
 31019                                  ;BUFLOOP:
 31020                                  ;	; 31/07/2018
 31021                                  ;	mov	ax,ds
 31022                                  ;	mov	bx,si
 31023                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31024                                  ;       LDS     SI,[SI]
 31025                                  ;       CALL    POINTCOMP
 31026                                  ;       jnz	short BUFLOOP
 31027                                  ;	;
 31028                                  ;	mov	ds,ax
 31029                                  ;	mov	si,bx
 31030                                  ;	mov	[SI],cx
 31031                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31032                                  ;	mov	[SI+2],bp
 31033                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31034                                  ;LOOKEND:
 31035                                  ;	mov	ax,ds
 31036                                  ;	mov	bx,si
 31037                                  ;       LDS     SI,[SI]
 31038                                  ;       CMP     SI,-1
 31039                                  ;       jnz     short LOOKEND
 31040                                  ;GOTHEEND:
 31041                                  ;       mov	ds,ax
 31042                                  ;	mov	[BX],di
 31043                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31044                                  ;       MOV     WORD [ES:DI],-1
 31045                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31046                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31047                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31048                                  ;NRET:
 31049                                  ;       CALL	restore_world
 31050                                  ;	
 31051                                  ;	;cmp	byte [di+4],-1
 31052                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31053                                  ;	jnz     short scanplace_retn
 31054                                  ;	call    PLACEHEAD
 31055                                  ;	retn
 31056                                  
 31057                                  ;EndProc PLACEBUF
 31058                                  
 31059                                  ;M039 - Removed PLACEHEAD.
 31060                                  ;----------------------------------------------------------------------------
 31061                                  ; places buffer at head
 31062                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31063                                  ;	ONE IN THE LIST!!!!!!!
 31064                                  ; BUGBUG ---- this routine can be removed because it has only
 31065                                  ; BUGBUG ---- one instruction. This routine is called from
 31066                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31067                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31068                                  ; BUGBUG ---- But kept as it is for modularity
 31069                                  ;----------------------------------------------------------------------------
 31070                                  ;procedure   PLACEHEAD,NEAR
 31071                                  ;	mov	word ptr [BufferQueue], di
 31072                                  ;	ret
 31073                                  ;EndProc PLACEHEAD
 31074                                  ;M039
 31075                                  
 31076                                  ;----------------------------------------------------------------------------
 31077                                  ; Procedure Name : PLACEHEAD
 31078                                  ;
 31079                                  ; SAME AS PLACEBUF except places buffer at head
 31080                                  ;----------------------------------------------------------------------------
 31081                                  
 31082                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31083                                  	; 05/09/2018
 31084                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31085                                  ;PLACEHEAD:
 31086                                  ;	; 31/07/2018 - Retro DOS v3.0
 31087                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31088                                  ;
 31089                                  ;       CALL	save_world
 31090                                  ;       PUSH	DS
 31091                                  ;       POP	ES
 31092                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31093                                  ;       LDS     SI,[SS:BUFFHEAD]
 31094                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31095                                  ;	CALL    POINTCOMP
 31096                                  ;       JZ      SHORT GOTHEEND2
 31097                                  ;	MOV	[ES:DI],SI
 31098                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31099                                  ;       MOV	[ES:DI+2],DS
 31100                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31101                                  ;       MOV	[SS:BUFFHEAD],DI
 31102                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31103                                  ;LOOKEND2:
 31104                                  ;       mov	ax,ds
 31105                                  ;	mov	bx,si
 31106                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31107                                  ;       LDS     SI,[SI]
 31108                                  ;       CALL    POINTCOMP
 31109                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31110                                  ;       mov	ds,ax
 31111                                  ;	mov	word [bx],-1
 31112                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31113                                  ;	mov	word [bx+2],-1
 31114                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31115                                  ;GOTHEEND2:
 31116                                  ;      	call	restore_world
 31117                                  ;placehead_retn:
 31118                                  ;	retn
 31119                                  
 31120                                  ; 20/05/2019 - Retro DOS v4.0
 31121                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31122                                  
 31123                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31124                                  ;----------------------------------------------------------------------------
 31125                                  ;
 31126                                  ; Procedure Name : PointComp
 31127                                  ; Inputs:
 31128                                  ;         DS:SI & ES:DI
 31129                                  ; Function:
 31130                                  ;          Checks for ((SI==DI) && (ES==DS))
 31131                                  ;	   Assumes that pointers are normalized for the
 31132                                  ;	   same segment
 31133                                  ;
 31134                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31135                                  ; DO NOT USE FOR < or >
 31136                                  ; No Registers altered
 31137                                  ;
 31138                                  ;----------------------------------------------------------------------------
 31139                                  
 31140                                  POINTCOMP:
 31141                                  	; 31/07/2018 - Retro DOS v3.0
 31142                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31143 00005A32 39FE                    	CMP	SI,DI
 31144 00005A34 750A                    	jnz	short _ret_label	; return if nz
 31145                                  	;jnz	short placehead_retn 
 31146 00005A36 51                      	PUSH	CX
 31147 00005A37 52                      	PUSH	DX
 31148 00005A38 8CD9                    	MOV	CX,DS
 31149 00005A3A 8CC2                    	MOV	DX,ES
 31150 00005A3C 39D1                    	CMP	CX,DX
 31151 00005A3E 5A                      	POP	DX
 31152 00005A3F 59                      	POP	CX
 31153                                  _ret_label:
 31154 00005A40 C3                      	retn
 31155                                  
 31156                                  ; 01/08/2018 - Retro DOS v3.0
 31157                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31158                                  
 31159                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31160                                  
 31161                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31162                                  ;----------------------------------------------------------------------------
 31163                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31164                                  ;	It gets the specified local sector into one of the I/O buffers
 31165                                  ;	and shuffles the queue
 31166                                  ; 
 31167                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31168                                  ;		       ELSE no pre-read
 31169                                  ;		(DX) = Desired physical sector number	      (LOW)
 31170                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31171                                  ;		(ES:BP) = Pointer to drive parameters
 31172                                  ;		ALLOWED set in case of INT 24
 31173                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31174                                  ;		'C' clear if OK
 31175                                  ;		CURBUF Points to the Buffer for the sector
 31176                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31177                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31178                                  ;----------------------------------------------------------------------------
 31179                                  
 31180                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31181                                  ;----------------------------------------------------------------------------
 31182                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31183                                  ;	It gets the specified sector into one of the I/O buffers
 31184                                  ;	and shuffles the queue. We need a special entry point so that
 31185                                  ;	we can read the alternate FAT sector if the first read fails, also
 31186                                  ;	so we can mark the buffer as a FAT sector.
 31187                                  ; 
 31188                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31189                                  ;		       ELSE no pre-read
 31190                                  ;		(DX) = Desired physical sector number	     (LOW)
 31191                                  ;		(SI) != 0
 31192                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31193                                  ;		(ES:BP) = Pointer to drive parameters
 31194                                  ;		ALLOWED set in case of INT 24
 31195                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31196                                  ;		'C' clear if OK
 31197                                  ;		CUR ddBUF Points to the Buffer for the sector
 31198                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31199                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31200                                  ;----------------------------------------------------------------------------
 31201                                  
 31202                                  	; 20/05/2019 - Retro DOS v4.0
 31203                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31204                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31205                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31206                                  GETBUFFR:
 31207 00005A41 31F6                    	XOR	SI,SI
 31208                                  
 31209                                  ;	This entry point is called for FAT buffering with SI != 0
 31210                                  
 31211                                  GETBUFFRB:
 31212 00005A43 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31213                                  	; 15/12/2022
 31214 00005A46 268A4600                	mov	al,[ES:BP]
 31215                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31216                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31217 00005A4A C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31218                                  	; MSDOS 6.0
 31219                                  ;hkn; SS override
 31220 00005A4E 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31221                                  
 31222                                  ;	See if this is the buffer that was most recently returned.
 31223                                  ;	A big performance win if it is.
 31224                                  
 31225 00005A53 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31226 00005A56 7412                    	je	short getb5			; No
 31227                                  	;cmp	dx,[di+6]
 31228 00005A58 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31229 00005A5B 750D                    	JNZ	short getb5			; Wrong sector
 31230                                  	
 31231                                  	; MSDOS 6.0
 31232                                  	;cmp	cx,[di+8]
 31233 00005A5D 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31234 00005A60 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31235                                  	
 31236                                  	;cmp	al,[di+4]
 31237 00005A62 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31238                                  	;JZ	getb35				; Just asked for same buffer
 31239 00005A65 7503                    	jnz	short getb5
 31240                                  	;jmp	getb35
 31241                                  	; 17/12/2022
 31242                                  	; 28/07/2019
 31243 00005A67 E9C800                  	jmp	getb35x
 31244                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31245                                  	;jmp	getb35
 31246                                  
 31247                                  ;	It's not the buffer most recently returned. See if it's in the
 31248                                  ;	cache.
 31249                                  ;
 31250                                  ;	(cx:dx) = sector #
 31251                                  ;	(al) = drive #
 31252                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31253                                  ;	??? list may be incomplete ???
 31254                                  
 31255                                  getb5:	
 31256                                  	; MSDOS 3.3
 31257                                  	;lds	di,[SS:BUFFHEAD]
 31258                                  	; MSDOS 6.0
 31259 00005A6A E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31260                                  getb10:	
 31261                                  	;cmp	dx,[di+6]
 31262 00005A6D 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31263 00005A70 750D                    	jne	short getb12			; wrong sector lo
 31264                                  	
 31265                                  	; MSDOS 6.0
 31266                                  	;cmp	cx,[di+8]
 31267 00005A72 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31268 00005A75 7508                    	jne	short getb12			; wrong sector hi
 31269                                  	
 31270                                  	;cmp	al,[di+4]
 31271 00005A77 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31272                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31273 00005A7A 7503                    	jne	short getb12
 31274 00005A7C E98D00                  	jmp	getb25
 31275                                  getb12:	
 31276                                  	; MSDOS 3.3
 31277                                  	;;mov	di,[DI]
 31278                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31279                                  	;
 31280                                  	; 15/08/2018
 31281                                  	;lds	di,[di]
 31282                                  
 31283                                  	;cmp	di,-1 ; 0FFFFh
 31284                                  	;jne	short getb10
 31285                                  	;lds	di,[SS:BUFFHEAD]
 31286                                  
 31287                                  	; MSDOS 6.0
 31288 00005A7F 8B3D                    	mov	di,[di]
 31289                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31290 00005A81 363B3E[BA0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31291 00005A86 75E5                    	jne	short getb10			; no, continue looking
 31292                                  
 31293                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31294                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31295                                  ;	new sector into it.
 31296                                  ;
 31297                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31298                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31299                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31300                                  ;	down a chain, but should be hashed.
 31301                                  ;
 31302                                  ;	(DS:DI) = first buffer in the queue
 31303                                  ;	(CX:DX) = sector # we want
 31304                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31305                                  
 31306                                  	; MSDOS 3.3 & MSDOS 6.0
 31307                                  ;hkn; SS override
 31308 00005A88 51                      	PUSH	CX  ; MSDOS 6.0
 31309 00005A89 56                      	push	si
 31310 00005A8A 52                      	push	dx
 31311 00005A8B 55                      	push	bp
 31312 00005A8C 06                      	push	es
 31313 00005A8D E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31314 00005A90 07                      	pop	es
 31315 00005A91 5D                      	pop	bp
 31316 00005A92 5A                      	pop	dx
 31317 00005A93 5E                      	pop	si
 31318 00005A94 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31319                                  	;jc	short getbx			; if got hard error
 31320 00005A99 7303                    	jnc	short getb13
 31321 00005A9B E99E00                  	jmp	getbx
 31322                                  
 31323                                  getb13:
 31324                                  	; MSDOS 6.0
 31325 00005A9E E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31326                                  
 31327                                  ;	We're ready to read in the buffer, if need be. If the caller
 31328                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31329                                  
 31330 00005AA1 30E4                    	XOR	AH,AH				; initial flags
 31331                                  ;hkn; SS override
 31332                                  	;test	byte [ss:PREREAD],0FFh
 31333                                  	;jnz	short getb20
 31334 00005AA3 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31335 00005AA8 754A                    	JNZ	short getb20			; no, we're done
 31336                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31337                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31338 00005AAA 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31339 00005AAD B90100                  	MOV	CX,1
 31340 00005AB0 56                      	push	si
 31341 00005AB1 57                      	push	di
 31342 00005AB2 52                      	push	dx
 31343                                  	; MSDOS 6.0
 31344 00005AB3 06                      	push	es ; ***
 31345                                  
 31346                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31347                                  ;	this point. -mrw 10/88
 31348                                  	
 31349 00005AB4 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31350 00005ABA 7407                    	jz	short getb14
 31351 00005ABC 1E                      	push	ds ; **
 31352 00005ABD 53                      	push	bx ; *
 31353 00005ABE 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31354                                  getb14:
 31355                                  ;M039: Eliminated redundant HMA code.
 31356                                  
 31357                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31358 00005AC3 09F6                    	OR	SI,SI			; FAT sector ?
 31359 00005AC5 7407                    	JZ	short getb15		
 31360                                  
 31361 00005AC7 E8ADDC                  	call	FATSECRD
 31362                                  	;mov	ah,2
 31363 00005ACA B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31364                                  
 31365 00005ACC EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31366                                  
 31367                                  getb15:
 31368 00005ACE E8D2DC                  	call	DREAD			; Buffer is marked free if read barfs
 31369 00005AD1 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31370                                  getb17:
 31371                                  	; 17/12/2022	
 31372                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31373                                  ;%if 0
 31374                                  	; MSDOS 6.0							  ;I001
 31375 00005AD3 9C                      	pushf								  ;I001
 31376 00005AD4 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31377 00005ADA 7411                    	jz	short not_in_hma	; no				  ;I001
 31378                                  	;mov	cx,[es:bp+2]
 31379 00005ADC 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31380 00005AE0 D1E9                    	shr	cx,1							  ;I001
 31381 00005AE2 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31382 00005AE3 89DE                    	mov	si,bx							  ;I001
 31383 00005AE5 5F                      	pop	di ; *							  ;I001
 31384 00005AE6 07                      	pop	es ; **							  ;I001
 31385 00005AE7 FC                      	cld								  ;I001
 31386 00005AE8 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31387 00005AE9 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31388 00005AEB 06                      	push	es							  ;I001
 31389 00005AEC 1F                      	pop	ds							  ;I001
 31390                                  ;%endif
 31391                                  
 31392                                  ; 17/12/2022
 31393                                  %if 0
 31394                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31395                                  	; MSDOS 5.0
 31396                                  	pushf
 31397                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31398                                  	jz	short not_in_hma	; no
 31399                                  	popf
 31400                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31401                                  	shr	cx,1
 31402                                  	mov	si,bx
 31403                                  	pop	di ; *
 31404                                  	pop	es ; **
 31405                                  	cld
 31406                                  	rep	movsw
 31407                                  	push	es
 31408                                  	pop	ds
 31409                                  	jmp	short getb19 ; 27/11/2022
 31410                                  %endif
 31411                                  
 31412                                  not_in_hma:								  ;I001
 31413 00005AED 9D                      	popf							 	  ;I001
 31414                                  getb19:
 31415 00005AEE 07                      	pop	es ; ***
 31416 00005AEF 5A                      	pop	dx
 31417 00005AF0 5F                      	pop	di
 31418 00005AF1 5E                      	pop	si
 31419 00005AF2 7248                    	JC	short getbx
 31420                                  
 31421                                  ;	The buffer has the data setup in it (if we were to read)
 31422                                  ;	Setup the various buffer fields
 31423                                  ;
 31424                                  ;	(ds:di) = buffer address
 31425                                  ;	(es:bp) = DPB address
 31426                                  ;	(HIGH_SECTOR:DX) = sector #
 31427                                  ;	(ah) = BUF_FLAGS value
 31428                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31429                                  
 31430                                  ;hkn; SS override
 31431                                  getb20:	; MSDOS 6.0
 31432 00005AF4 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31433                                  	;mov	[di+8],cx
 31434 00005AF9 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31435                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31436                                   	;mov	[di+6],dx
 31437 00005AFC 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31438                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31439                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31440 00005AFF 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31441                                  	;;mov	[di+0Ch],es
 31442                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31443 00005B02 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31444                                  	; 15/12/2022
 31445 00005B05 268A4600                	mov	al,[es:bp]
 31446                                  	;mov	al,[es:bp+0]
 31447                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31448                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31449                                  	;mov	[di+4],ax
 31450 00005B09 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31451                                  getb25:	
 31452                                  	; MSDOS 3.3
 31453                                  	;mov     ax,1
 31454                                  
 31455                                  	; MSDOS 6.0
 31456                                  	;mov	byte [di+0Ah],1
 31457 00005B0C C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31458 00005B10 31C0                    	XOR	AX,AX
 31459                                  
 31460                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31461 00005B12 09F6                    	OR	SI,SI				; FAT sector ?
 31462 00005B14 740B                    	JZ	short getb30
 31463                                  
 31464                                  	;mov	al,[es:bp+8]
 31465 00005B16 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31466                                  	
 31467                                  	; MSDOS 6.0
 31468 00005B1A 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31469                                  	;mov	ax,[es:bp+0Fh]
 31470 00005B1D 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31471                                  						;  sectors
 31472                                  	; MSDOS 3.3
 31473                                  	;;mov	ah,[es:bp+0Fh]
 31474                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31475                                  
 31476                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31477                                  ;		is set
 31478                                  
 31479                                  getb30:	
 31480                                  	; MSDOS 6.0
 31481                                  	;mov	[di+0Bh],ax
 31482 00005B21 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31483                                  
 31484                                  	; MSDOS 3.3
 31485                                  	;;mov	[di+8],ax ; 15/08/2018	
 31486                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31487                                  
 31488 00005B24 E8CEFE                  	CALL	PLACEBUF
 31489                                  
 31490                                  ;hkn; SS override for next 4
 31491                                  getb35: 
 31492                                  	; 17/12/2022
 31493                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31494                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31495                                  	;MOV	[SS:CURBUF+2],DS
 31496                                  	;MOV	[SS:LastBuffer+2],DS
 31497                                  	;MOV	[SS:CURBUF],DI
 31498                                  	;MOV	[SS:LastBuffer],DI
 31499                                  	;CLC
 31500                                  
 31501                                  	; 17/12/2022
 31502                                  	; 07/12/2022
 31503                                  	; Retro DOS v4.0
 31504 00005B27 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31505 00005B2C 36893E[1E00]            	mov	[ss:LastBuffer],di
 31506 00005B31 F8                      	clc
 31507                                  getb35x: ; 28/07/2019
 31508 00005B32 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31509 00005B37 36893E[E205]            	MOV	[ss:CURBUF],di
 31510                                  
 31511                                  ;	Return with 'C' set appropriately
 31512                                  ;	(dx) = caller's original value
 31513                                  
 31514                                  getbx:	
 31515 00005B3C 16                      	push	ss
 31516 00005B3D 1F                      	pop	ds
 31517                                  	;retn
 31518                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31519                                  getbuffrb_retn:
 31520                                  ;flushbuf_retn:	; 17/12/2022
 31521 00005B3E C3                      	retn
 31522                                  
 31523                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31524                                  ;----------------------------------------------------------------------------
 31525                                  ; Input:
 31526                                  ;	DS = DOSGROUP
 31527                                  ;	AL = Physical unit number local buffers only
 31528                                  ;	   = -1 for all units and all remote buffers
 31529                                  ; Function:
 31530                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31531                                  ;	Carry set if error (user FAILed to I 24)
 31532                                  ;	    Flush operation completed.
 31533                                  ; DS Preserved, all others destroyed (ES too)
 31534                                  ;----------------------------------------------------------------------------
 31535                                  
 31536                                  	; 20/05/2019 - Retro DOS v4.0
 31537                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31538                                  
 31539                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31540                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31541                                  FLUSHBUF:
 31542                                  	; MSDOS 3.3
 31543                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31544                                  	;lds	di,[BUFFHEAD]
 31545                                  
 31546                                  	; MSDOS 6.0
 31547 00005B3F E89AFE                  	call	GETCURHEAD
 31548                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31549 00005B42 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31550 00005B48 7508                    	jnz	short scan_buf_queue
 31551 00005B4A 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31552 00005B50 7423                    	je	short end_scan
 31553                                  	
 31554                                  scan_buf_queue:
 31555 00005B52 E82900                  	call	CHECKFLUSH
 31556                                  	;push	ax  ; MSDOS 3.3
 31557                                  	; MSDOS 6.0
 31558                                  	;mov	ah,[di+4]
 31559 00005B55 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31560 00005B58 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31561 00005B5D 7408                    	je	short free_the_buf
 31562                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31563 00005B5F 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31564 00005B65 7405                    	jz	short dont_free_the_buf
 31565                                  	; MSDOS 3.3
 31566                                  	;;mov	al,[di+4]
 31567                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31568                                  	;cmp	[SS:WPERR],al					;hkn;
 31569                                  	; 15/08/2018
 31570                                  	;jne	short dont_free_the_buf	
 31571                                  free_the_buf:
 31572                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31573 00005B67 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31574                                  dont_free_the_buf:
 31575                                  	;pop	ax  ; MSDOS 3.3 	   	
 31576                                  
 31577                                  	; MSDOS 3.3
 31578                                  	;mov	di,[DI]
 31579                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31580                                  	;
 31581                                  	; 15/08/2018
 31582                                  	;lds	di,[di]
 31583                                  	;
 31584                                  	;cmp	di,-1 ; 0FFFFh
 31585                                  	;jnz	short scan_buf_queue 
 31586                                  	
 31587                                  	; MSDOS 6.0
 31588 00005B6C 8B3D                    	mov	di,[di]
 31589                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31590 00005B6E 363B3E[BA0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31591 00005B73 75DD                    	jne	short scan_buf_queue
 31592                                  
 31593                                  end_scan:
 31594 00005B75 16                      	push	ss
 31595 00005B76 1F                      	pop	ds
 31596                                  	; 01/08/2018 - Retro DOS v3.0
 31597                                  	;cmp	byte [FAILERR],0
 31598                                  	;jne	short bad_flush
 31599                                  	;retn
 31600                                  ;bad_flush:
 31601                                  	;stc
 31602                                  	;retn
 31603                                  
 31604                                  	; 17/12/2022
 31605                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31606                                  	; 01/08/2018 - Retro DOS v3.0
 31607 00005B77 803E[4A03]01            	cmp	byte [FAILERR],1
 31608 00005B7C F5                      	cmc
 31609                                  flushbuf_retn:
 31610 00005B7D C3                      	retn
 31611                                  	
 31612                                  	; 17/12/2022
 31613                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31614                                  	;cmp	byte [FAILERR],0
 31615                                  	;jne	short bad_flush
 31616                                  	;retn
 31617                                  ;bad_flush:
 31618                                  	;stc
 31619                                  	;retn
 31620                                  
 31621                                  ;----------------------------------------------------------------------------
 31622                                  ;
 31623                                  ; Procedure Name : CHECKFLUSH
 31624                                  ;
 31625                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31626                                  ;	   DS:DI - pointer to buffer
 31627                                  ;
 31628                                  ; Function : Write out a buffer if it is dirty
 31629                                  ;
 31630                                  ; Carry set if problem (currently user FAILed to I 24)
 31631                                  ;
 31632                                  ;----------------------------------------------------------------------------
 31633                                  
 31634                                  CHECKFLUSH:
 31635                                  	; MSDOS 6.0
 31636 00005B7E B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31637                                  	;cmp	[di+4],ah
 31638 00005B80 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31639 00005B83 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31640 00005B85 38C4                    	CMP	AH,AL			; 
 31641 00005B87 7406                    	JZ	short DOBUFFER		; do this buffer
 31642                                  	;cmp	al,[di+4]
 31643 00005B89 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31644 00005B8C F8                      	CLC
 31645 00005B8D 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31646                                  DOBUFFER:
 31647                                  	;test	byte [di+5],40h
 31648 00005B8F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31649 00005B93 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31650 00005B95 50                      	PUSH	AX
 31651                                  	;push	word [di+4]
 31652 00005B96 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31653 00005B99 E80B00                  	CALL	BUFWRITE
 31654 00005B9C 58                      	POP	AX
 31655 00005B9D 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31656                                  	;and	ah,0BFh
 31657 00005B9F 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31658                                  	;mov	[di+4],ax
 31659 00005BA2 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31660                                  LEAVE_BUF:
 31661 00005BA5 58                      	POP	AX			; Search info
 31662                                  checkflush_retn:
 31663 00005BA6 C3                      	retn
 31664                                  
 31665                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31666                                  ;----------------------------------------------------------------------------
 31667                                  ;
 31668                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31669                                  ;
 31670                                  ;	ENTRY	DS:DI Points to the buffer
 31671                                  ;
 31672                                  ;	EXIT	Buffer marked free
 31673                                  ;		Carry set if error (currently user FAILed to I 24)
 31674                                  ;
 31675                                  ;	USES	All buf DS:DI
 31676                                  ;		HIGH_SECTOR
 31677                                  ;----------------------------------------------------------------------------
 31678                                  
 31679                                  	; 20/05/2019 - Retro DOS v4.0
 31680                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31681                                  
 31682                                  
 31683                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31684                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31685                                  
 31686                                  BUFWRITE:
 31687                                  	; 10/09/2018
 31688                                  	; 01/08/2018 - Retro DOS v3.0
 31689                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31690 00005BA7 B8FF00                  	MOV	AX,00FFH
 31691                                  	;xchg	ax,[di+4]
 31692 00005BAA 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31693 00005BAD 3CFF                    	CMP	AL,0FFH
 31694 00005BAF 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31695                                  	;test	ah,40h
 31696 00005BB1 F6C440                  	test	AH,buf_dirty
 31697 00005BB4 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31698                                  	; MSDOS 6.0
 31699 00005BB6 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31700                                  
 31701                                  ;hkn; SS override
 31702 00005BB9 363A06[2203]            	CMP	AL,[SS:WPERR]
 31703 00005BBE 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31704                                  
 31705                                  ;hkn; SS override
 31706                                  	; MSDOS 6.0
 31707 00005BC0 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31708                                  	
 31709                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31710                                  	;les	bp,[di+13] ; MSDOS 6.0
 31711 00005BC4 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31712                                  	;;lea	bx,[di+16]
 31713                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31714 00005BC7 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31715                                  	;mov	dx,[di+6]
 31716 00005BCA 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31717                                  	
 31718                                  	; MSDOS 6.0
 31719                                  	;mov	cx,[di+8]
 31720 00005BCD 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31721                                  
 31722                                  ;hkn; SS override
 31723 00005BD0 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31724 00005BD5 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31725                                  	; MSDOS 3.3
 31726                                  	;; mov	cx,[DI+8]
 31727                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31728                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31729 00005BD8 30ED                    	XOR	CH,CH
 31730                                  	;;mov	ah,ch ; MSDOS 3.3
 31731                                  
 31732                                  ;hkn; SS override for ALLOWED
 31733                                  	;mov	byte [SS:ALLOWED],18h
 31734 00005BDA 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31735                                  	;test	byte [di+5],8
 31736                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31737                                  	;test	ah,8
 31738 00005BE0 F6C408                  	test	AH,buf_isDATA
 31739 00005BE3 7406                    	JZ	short NO_IGNORE
 31740                                  	;or	byte [SS:ALLOWED],20h
 31741 00005BE5 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31742                                  NO_IGNORE:
 31743                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31744                                  	; MSDOS 6.0
 31745                                  	;mov	ax,[di+11]
 31746 00005BEB 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31747                                  
 31748 00005BEE 57                      	PUSH	DI		; Save buffer pointer
 31749 00005BEF 31FF                    	XOR	DI,DI		; Indicate failure
 31750                                  
 31751 00005BF1 1E                      	push	ds ; *
 31752 00005BF2 53                      	push	bx ; **
 31753                                  WRTAGAIN:
 31754 00005BF3 57                      	push	di ; ***
 31755 00005BF4 51                      	push	cx ; ****
 31756 00005BF5 50                      	push	ax ; *****
 31757                                  	;MOV	CX,1
 31758                                  	; 17/12/2022
 31759                                  	; ch = 0
 31760 00005BF6 B101                    	mov	cl,1 ; 24/07/2019
 31761                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31762                                  	;mov	cx,1
 31763 00005BF8 53                      	push	bx ; ******
 31764 00005BF9 52                      	push	dx ; *******
 31765 00005BFA 1E                      	push	ds ; ********
 31766                                  
 31767                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31768                                  
 31769                                  	; MSDOS 6.0
 31770 00005BFB 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31771 00005C01 7418                    	jz	short NBUFFINHMA
 31772 00005C03 51                      	push	cx
 31773 00005C04 06                      	push	es
 31774 00005C05 89DE                    	mov	si,bx
 31775 00005C07 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31776 00005C0B D1E9                    	shr	cx,1
 31777 00005C0D 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31778 00005C12 89FB                    	mov	bx,di
 31779 00005C14 FC                      	cld
 31780 00005C15 F3A5                    	rep	movsw
 31781 00005C17 06                      	push	es
 31782 00005C18 1F                      	pop	ds
 31783 00005C19 07                      	pop	es
 31784 00005C1A 59                      	pop	cx
 31785                                  NBUFFINHMA:
 31786 00005C1B E8E5DB                  	call	DWRITE		; Write out the dirty buffer
 31787 00005C1E 1F                      	pop	ds ; ********
 31788 00005C1F 5A                      	pop	dx ; *******
 31789 00005C20 5B                      	pop	bx ; ******
 31790 00005C21 58                      	pop	ax ; *****
 31791 00005C22 59                      	pop	cx ; ****
 31792 00005C23 5F                      	pop	di ; ***
 31793 00005C24 7201                    	JC	short NOSET
 31794 00005C26 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31795                                  NOSET:				;	succeedes.
 31796 00005C27 01C2                    	ADD	DX,AX
 31797 00005C29 E2C8                    	LOOP	WRTAGAIN
 31798 00005C2B 5B                      	pop	bx ; **
 31799 00005C2C 1F                      	pop	ds ; *
 31800 00005C2D 09FF                    	OR	DI,DI		; Clears carry
 31801 00005C2F 7501                    	JNZ	short BWROK	; At least one write worked
 31802 00005C31 F9                      	STC			; DI never got INCed, all writes failed.
 31803                                  BWROK:	
 31804 00005C32 5F                      	POP	DI
 31805 00005C33 C3                      	retn
 31806                                  
 31807                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31808                                  ;----------------------------------------------------------------------------
 31809                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31810                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31811                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31812                                  ;	code and time
 31813                                  ;
 31814                                  ;	ENTRY	ES:BP = drive parameter block
 31815                                  ;
 31816                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31817                                  ;		[SC_DRIVE]= drive #
 31818                                  ;
 31819                                  ;	USES	Flags
 31820                                  ;----------------------------------------------------------------------------
 31821                                  
 31822                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31823                                  ; 04/05/2019 - Retro DOS v4.0
 31824                                  
 31825                                  SET_RQ_SC_PARMS:
 31826                                  ;hkn; SS override for all variables used in this procedure.
 31827 00005C34 50                      	push	ax
 31828                                  	;mov	ax,[es:bp+2]
 31829 00005C35 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31830 00005C39 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31831                                  	;;mov	al,[es:bp+0]
 31832                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31833                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31834                                  	; 15/12/2022
 31835 00005C3D 268A4600                	mov	al,[ES:BP]
 31836 00005C41 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31837 00005C45 58                      	pop	ax
 31838                                  srspx:	
 31839 00005C46 C3                      	retn					;LB. return
 31840                                  
 31841                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31842                                  ;----------------------------------------------------------------------------
 31843                                  ; Input:
 31844                                  ;	none
 31845                                  ; Function:
 31846                                  ;	increment dirty buffers count
 31847                                  ; Output:
 31848                                  ;	dirty buffers count is incremented
 31849                                  ;
 31850                                  ; All registers preserved
 31851                                  ;----------------------------------------------------------------------------
 31852                                  
 31853                                  INC_DIRTY_COUNT:
 31854                                  ;; BUGBUG  ---- remove this routine
 31855                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31856 00005C47 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31857 00005C4C C3                      	retn
 31858                                  
 31859                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31860                                  ;----------------------------------------------------------------------------
 31861                                  ; Input:
 31862                                  ;	none
 31863                                  ; Function:
 31864                                  ;	decrement dirty buffers count
 31865                                  ; Output:
 31866                                  ;	dirty buffers count is decremented
 31867                                  ;
 31868                                  ; All registers preserved
 31869                                  ;----------------------------------------------------------------------------
 31870                                  
 31871                                  DEC_DIRTY_COUNT:
 31872 00005C4D 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31873 00005C53 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31874 00005C55 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31875                                  					; error condition to underflow here? ;hkn;
 31876                                  ddcx:	
 31877 00005C5A C3                      	retn
 31878                                  
 31879                                  ;============================================================================
 31880                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31881                                  ;============================================================================
 31882                                  ; 02/08/2018 - Retro DOS v3.0
 31883                                  ; 29/04/2019 - Retro DOS v4.0
 31884                                  
 31885                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31886                                  
 31887                                  ; Pseudo EXEC system call for DOS
 31888                                  
 31889                                  ;	TITLE	MSPROC - process maintenance
 31890                                  ;	NAME	MSPROC
 31891                                  
 31892                                  ; =========================================================================
 31893                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31894                                  ;	I/O specs are defined in DISPATCH.
 31895                                  ;
 31896                                  ;	$WAIT
 31897                                  ;	$EXEC
 31898                                  ;	$Keep_process
 31899                                  ;	Stay_resident
 31900                                  ;	$EXIT
 31901                                  ;	$ABORT
 31902                                  ;	abort_inner
 31903                                  ;
 31904                                  ;	Modification history:
 31905                                  ;
 31906                                  ;		Created: ARR 30 March 1983
 31907                                  ;		AN000	version 4.0 jan. 1988
 31908                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31909                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31910                                  ;
 31911                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31912                                  ;
 31913                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31914                                  ;		       dossym.inc. 7/30/90
 31915                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31916                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31917                                  ;		       stack is provided at the end of the program. Note that
 31918                                  ;		       only SP is changed.
 31919                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31920                                  ;
 31921                                  ;		M028 - 4b04 implementation
 31922                                  ;
 31923                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31924                                  ;			in memory block >= 64K, sp = 0. If memory block
 31925                                  ;			obtained is <64K, point sp at the end of the memory
 31926                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31927                                  ;			added for a stack segment which may be needed if it
 31928                                  ;			is loaded in low memory situations.
 31929                                  ;
 31930                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31931                                  ;
 31932                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31933                                  ;			a bad environment if it reached 32767 bytes. Changed
 31934                                  ;			to allow 32768 bytes of environment.
 31935                                  ;
 31936                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31937                                  ;		       COM file high. Also ensure that if the biggest block
 31938                                  ;		       into which we load the com file is less than 64K then
 31939                                  ;		       we provide atleast 256 bytes of stack to the user.
 31940                                  ;
 31941                                  ;		M050 - Made Lie table search CASE insensitive
 31942                                  ;
 31943                                  ;		M060 - Removed special version table from the kernal and
 31944                                  ;                      put it in a device drive which puts the address
 31945                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31946                                  ;		       as a DWORD.
 31947                                  ;
 31948                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31949                                  ;		       entry do not try to load low if there is no space in
 31950                                  ;		       UMBs.
 31951                                  ;
 31952                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31953                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31954                                  ;		       change return address to LeaveDos if AL=5.
 31955                                  ;
 31956                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31957                                  ;                      controls building a version of MSDOS.SYS that only
 31958                                  ;                      runs programs from a fixed list (defined in the
 31959                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31960                                  ;                      for details.  This feature is used to build a
 31961                                  ;                      "special" version of DOS that can be handed out to
 31962                                  ;                      OEM/ISV customers as part of a "service" disk.
 31963                                  ;
 31964                                  ; =========================================================================
 31965                                  
 31966                                  ;SAVEXIT  EQU  10
 31967                                  
 31968                                  ;BREAK	<$WAIT - return previous process error code>
 31969                                  ; =========================================================================
 31970                                  ;	$WAIT - Return previous process error code.
 31971                                  ;
 31972                                  ;	Assembler usage:
 31973                                  ;
 31974                                  ;	    MOV     AH, WaitProcess
 31975                                  ;	    INT     int_command
 31976                                  ;
 31977                                  ;	ENTRY	none
 31978                                  ;	EXIT	(ax) = exit code
 31979                                  ;	USES	all
 31980                                  ; =========================================================================
 31981                                  
 31982                                  	; 20/05/2019 - Retro DOS v4.0
 31983                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 31984                                  
 31985                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31986                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 31987                                  _$WAIT:
 31988                                  	; 02/08/2018 - Retro DOS v3.0
 31989                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 31990                                  
 31991 00005C5B 31C0                    	xor	AX,AX
 31992 00005C5D 368706[3403]            	xchg	AX,[ss:exit_code]
 31993 00005C62 E9E4A9                  	jmp	SYS_RET_OK
 31994                                  
 31995                                  ; =========================================================================
 31996                                  ;BREAK <$exec - load/go a program>
 31997                                  ;	EXEC.ASM - EXEC System Call
 31998                                  ;
 31999                                  ;
 32000                                  ; Assembler usage:
 32001                                  ;	    lds     DX, Name
 32002                                  ;	    les     BX, Blk
 32003                                  ;	    mov     AH, Exec
 32004                                  ;	    mov     AL, FUNC
 32005                                  ;	    int     INT_COMMAND
 32006                                  ;
 32007                                  ;	AL  Function
 32008                                  ;	--  --------
 32009                                  ;	 0  Load and execute the program.
 32010                                  ;	 1  Load, create the program header but do not
 32011                                  ;	    begin execution.
 32012                                  ;	 3  Load overlay. No header created.
 32013                                  ;
 32014                                  ;	    AL = 0 -> load/execute program
 32015                                  ;
 32016                                  ;	    +---------------------------+
 32017                                  ;	    | WORD segment address of	|
 32018                                  ;	    | environment.		|
 32019                                  ;	    +---------------------------+
 32020                                  ;	    | DWORD pointer to ASCIZ	|
 32021                                  ;	    | command line at 80h	|
 32022                                  ;	    +---------------------------+
 32023                                  ;	    | DWORD pointer to default	|
 32024                                  ;	    | FCB to be passed at 5Ch	|
 32025                                  ;	    +---------------------------+
 32026                                  ;	    | DWORD pointer to default	|
 32027                                  ;	    | FCB to be passed at 6Ch	|
 32028                                  ;	    +---------------------------+
 32029                                  ;
 32030                                  ;	    AL = 1 -> load program
 32031                                  ;
 32032                                  ;	    +---------------------------+
 32033                                  ;	    | WORD segment address of	|
 32034                                  ;	    | environment.		|
 32035                                  ;	    +---------------------------+
 32036                                  ;	    | DWORD pointer to ASCIZ	|
 32037                                  ;	    | command line at 80h	|
 32038                                  ;	    +---------------------------+
 32039                                  ;	    | DWORD pointer to default	|
 32040                                  ;	    | FCB to be passed at 5Ch	|
 32041                                  ;	    +---------------------------+
 32042                                  ;	    | DWORD pointer to default	|
 32043                                  ;	    | FCB to be passed at 6Ch	|
 32044                                  ;	    +---------------------------+
 32045                                  ;	    | DWORD returned value of	|
 32046                                  ;	    | CS:IP			|
 32047                                  ;	    +---------------------------+
 32048                                  ;	    | DWORD returned value of	|
 32049                                  ;	    | SS:IP			|
 32050                                  ;	    +---------------------------+
 32051                                  ;
 32052                                  ;	    AL = 3 -> load overlay
 32053                                  ;
 32054                                  ;	    +---------------------------+
 32055                                  ;	    | WORD segment address where|
 32056                                  ;	    | file will be loaded.	|
 32057                                  ;	    +---------------------------+
 32058                                  ;	    | WORD relocation factor to |
 32059                                  ;	    | be applied to the image.	|
 32060                                  ;	    +---------------------------+
 32061                                  ;
 32062                                  ; Returns:
 32063                                  ;	    AX = error_invalid_function
 32064                                  ;	       = error_bad_format
 32065                                  ;	       = error_bad_environment
 32066                                  ;	       = error_not_enough_memory
 32067                                  ;	       = error_file_not_found
 32068                                  ; =========================================================================
 32069                                  ;
 32070                                  ;   Revision history:
 32071                                  ;
 32072                                  ;	 A000	version 4.00  Jan. 1988
 32073                                  ;
 32074                                  ; =========================================================================
 32075                                  
 32076                                  Exec_Internal_Buffer		EQU	OPENBUF
 32077                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32078                                  
 32079                                  ; =========================================================================
 32080                                  
 32081                                  ;IF1		; warning message on buffers
 32082                                  ;%out	Please make sure that the following are contiguous and of the
 32083                                  ;%out	following sizes:
 32084                                  ;%out
 32085                                  ;%out	OpenBuf     128
 32086                                  ;%out	RenBuf	    128
 32087                                  ;%out	SearchBuf    53
 32088                                  ;%out	DummyCDS    curdirLen
 32089                                  ;ENDIF
 32090                                  
 32091                                  ; =========================================================================
 32092                                  
 32093                                  ; =========================================================================
 32094                                  ;
 32095                                  ; =========================================================================
 32096                                  
 32097                                  	; 20/05/2019 - Retro DOS v4.0
 32098                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32099                                  
 32100                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32101                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32102                                  	
 32103                                  _$EXEC:
 32104                                  	; 02/08/2018 - Retro DOS v3.0
 32105                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32106                                  
 32107                                  EXEC001S:
 32108                                  	;LocalVar    Exec_Blk		,DWORD
 32109                                  	;LocalVar    Exec_Func		,BYTE
 32110                                  	;LocalVar    Exec_Load_High	,BYTE
 32111                                  	;LocalVar    Exec_FH		,WORD
 32112                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32113                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32114                                  	;LocalVar    Exec_Environ	,WORD
 32115                                  	;LocalVar    Exec_Size		,WORD
 32116                                  	;LocalVar    Exec_Load_Block	,WORD
 32117                                  	;LocalVar    Exec_DMA		,WORD
 32118                                  	;LocalVar    ExecNameLen 	,WORD
 32119                                  	;LocalVar    ExecName		,DWORD
 32120                                  	;
 32121                                  	;LocalVar    Exec_DMA_Save	,WORD
 32122                                  	;LocalVar    Exec_NoStack	,BYTE
 32123                                  
 32124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32125                                  	;%define	Exec_Blk	dword [bp-4]
 32126                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32127                                  	%define		Exec_BlkL	word [bp-4]	
 32128                                  	%define		Exec_BlkH	word [bp-2]
 32129                                  	%define		Exec_Func	byte [bp-5]
 32130                                  	%define		Exec_Load_High	byte [bp-6]
 32131                                  	%define		Exec_FH		word [bp-8]
 32132                                  	%define		Exec_Rel_Fac	word [bp-10]
 32133                                  	%define		Exec_Res_Len_Para word [bp-12]
 32134                                  	%define		Exec_Environ	word [bp-14]
 32135                                  	%define		Exec_Size	word [bp-16]
 32136                                  	%define		Exec_Load_Block	word [bp-18]
 32137                                  	%define		Exec_DMA	word [bp-20]
 32138                                  	%define		ExecNameLen	word [bp-22]
 32139                                  	;%define	ExecName	dword [bp-26]
 32140                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32141                                  	%define		ExecNameL	word [bp-26]	
 32142                                  	%define		ExecNameH	word [bp-24]
 32143                                  	; MSDOS 6.0
 32144                                  	%define		Exec_DMA_Save	word [bp-28]
 32145                                  	%define		Exec_NoStack	byte [bp-29]
 32146                                  	
 32147                                  	; ==================================================================
 32148                                  	; validate function
 32149                                  	; ==================================================================
 32150                                  		      	
 32151                                  	; M068 - Start
 32152                                  	;
 32153                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32154                                  	; possibility that the count may not be decremented all the way to
 32155                                  	; 0. A typical case is if the program for which we intended to keep 
 32156                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32157                                  	; calls), exits pre-maturely due to error conditions.
 32158                                  
 32159                                  	; MSDOS 6.0
 32160 00005C65 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32161                                  
 32162                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32163                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32164                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32165                                  
 32166 00005C6B 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32167                                  	;jne	short @f
 32168 00005C6D 7505                    	jne	short Exec_@f		; N: continue
 32169                                  					; Y: change ret addr. to LeaveDos.
 32170 00005C6F 59                      	pop	cx			; Note CX is not input to ExecReady
 32171 00005C70 B9[1104]                	mov	cx,LeaveDOS
 32172 00005C73 51                      	push	cx
 32173                                  ;@@:
 32174                                  Exec_@f:
 32175                                  	; M068 - End
 32176                                  	
 32177                                  	;Enter
 32178                                  
 32179 00005C74 55                      	push	bp
 32180 00005C75 89E5                    	mov	bp,sp
 32181                                  	;;sub	sp,26	; MSDOS 3.3
 32182                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32183                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32184                                  	; 17/12/2022
 32185                                  	; 20/05/2019
 32186 00005C77 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32187                                  
 32188                                  	; MSDOS 6.0
 32189 00005C7A 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32190                                  					; M030
 32191 00005C7C 7614                    	jna	short Exec_Check_2
 32192                                  
 32193                                  	; MSDOS 3.3
 32194                                  	;cmp	AL,3
 32195                                  	;jna	short Exec_Check_2
 32196                                  
 32197                                  Exec_Bad_Fun:
 32198 00005C7E 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32199                                  					; Extended Error Locus	;smr;SS Override
 32200                                  	;mov	al,1
 32201 00005C84 B001                    	mov	al,error_invalid_function
 32202                                  
 32203                                  Exec_Ret_Err:
 32204                                  	;Leave
 32205 00005C86 89EC                    	mov	sp,bp
 32206 00005C88 5D                      	pop	bp
 32207                                  	;transfer SYS_RET_ERR
 32208 00005C89 E9C6A9                  	jmp	SYS_RET_ERR
 32209                                  
 32210                                  	; MSDOS 6.0
 32211                                  ExecReadyJ:
 32212 00005C8C E80918                  	call	ExecReady		; M028
 32213 00005C8F E90B04                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32214                                  
 32215                                  Exec_Check_2:
 32216 00005C92 3C02                    	cmp	AL,2			
 32217 00005C94 74E8                    	je	short Exec_Bad_Fun
 32218                                  
 32219                                  	; MSDOS 6.0
 32220 00005C96 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32221 00005C98 74E4                    	je	short Exec_Bad_Fun
 32222                                  	
 32223 00005C9A 3C05                    	cmp	al,5			; M028 ; M030
 32224 00005C9C 74EE                    	je	short ExecReadyJ	; M028
 32225                                  
 32226                                  	;mov	[bp-4],bx
 32227 00005C9E 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32228                                  	;mov	[bp-2],es
 32229 00005CA1 8C46FE                  	mov	Exec_BlkH,ES
 32230                                  	;mov	[bp-5],al
 32231 00005CA4 8846FB                  	mov	Exec_Func,AL
 32232                                  	;mov	byte [bp-6],0
 32233 00005CA7 C646FA00                	mov	Exec_Load_High,0
 32234                                  
 32235                                  	;mov	[bp-26],dx
 32236 00005CAB 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32237                                  	;mov	[bp-24],ds
 32238 00005CAE 8C5EE8                  	mov	ExecNameH,DS
 32239 00005CB1 89D6                    	mov	SI,DX			; move pointer to convenient place
 32240                                  	;invoke	DStrLen
 32241 00005CB3 E88BB5                  	call	DStrLen
 32242                                  	;mov	[bp-22],cx
 32243 00005CB6 894EEA                  	mov	ExecNameLen,CX		; save length
 32244                                  
 32245                                  	; MSDOS 6.0
 32246 00005CB9 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32247 00005CBD 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32248                                  
 32249 00005CC1 30C0                    	xor	AL,AL			; open for reading
 32250 00005CC3 55                      	push	BP
 32251                                  
 32252                                  	; MSDOS 6.0
 32253                                  	;or	byte [ss:DOS_FLAG],1
 32254 00005CC4 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32255                                  					; the redir that this open call is
 32256                                  					; due to an exec.
 32257                                  
 32258                                  	;invoke	$OPEN			; is the file there?
 32259 00005CCA E81113                  	call	_$OPEN
 32260                                  
 32261                                  	; MSDOS 6.0
 32262 00005CCD 9C                      	pushf
 32263                                  	; 02/06/2019
 32264                                  	;and	byte [ss:DOS_FLAG],0FEh
 32265 00005CCE 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32266 00005CD4 9D                      	popf
 32267                                  
 32268 00005CD5 5D                      	pop	BP
 32269                                  
 32270                                  	; MSDOS 3.3 & MSDOS 6.0
 32271 00005CD6 72AE                    	jc	short Exec_Ret_Err
 32272                                  
 32273                                  	;mov	[bp-8],ax
 32274 00005CD8 8946F8                  	mov	Exec_FH,AX
 32275 00005CDB 89C3                    	mov	BX,AX
 32276 00005CDD 30C0                    	xor	AL,AL
 32277                                  	;invoke	$Ioctl
 32278 00005CDF E8FEC5                  	call	_$IOCTL
 32279 00005CE2 7207                    	jc	short Exec_BombJ
 32280                                  
 32281                                  	;test	dl,80h
 32282 00005CE4 F6C280                  	test	DL,devid_ISDEV
 32283 00005CE7 740A                    	jz	short Exec_Check_Environ
 32284                                  
 32285                                  	;mov	al,2
 32286 00005CE9 B002                    	mov	AL,error_file_not_found
 32287                                  Exec_BombJ:
 32288 00005CEB E9D000                  	jmp	Exec_Bomb
 32289                                  
 32290                                  BadEnv:
 32291                                  	;mov	al,0Ah
 32292 00005CEE B00A                    	mov	AL,error_bad_environment
 32293 00005CF0 E9CB00                  	jmp	Exec_Bomb
 32294                                  
 32295                                  Exec_Check_Environ:
 32296                                  	;mov	word [bp-18],0
 32297 00005CF3 C746EE0000              	mov	Exec_Load_Block,0
 32298                                  	;mov	word [bp-14],0
 32299 00005CF8 C746F20000              	mov	Exec_Environ,0
 32300                                  					; overlays... no environment
 32301                                  	;test	byte [bp-5],2
 32302 00005CFD F646FB02                	test	Exec_Func,exec_func_overlay
 32303 00005D01 7552                    	jnz	short Exec_Read_Header
 32304                                  
 32305                                  	;lds	si,[bp-4]
 32306 00005D03 C576FC                  	lds	SI,Exec_Blk		; get block
 32307 00005D06 8B04                    	mov	ax,[SI]
 32308                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32309 00005D08 09C0                    	or	AX,AX
 32310 00005D0A 750C                    	jnz	short Exec_Scan_Env
 32311                                  
 32312 00005D0C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32313                                  	;mov	ax,[44]
 32314 00005D11 A12C00                  	mov	AX,[PDB.ENVIRON]
 32315                                  
 32316                                  ; MSDOS 6.0
 32317                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32318                                  ;
 32319                                  ; Exec_environ is being correctly initialized after the environment has been
 32320                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32321                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32322                                  ; parent's environment.
 32323                                  ;	mov	Exec_Environ,AX
 32324                                  ;
 32325                                  ;----------------------------------------------------------------------------
 32326                                  
 32327                                  	;mov	[bp-14],ax
 32328                                  	;mov	Exec_Environ,ax
 32329                                  
 32330 00005D14 09C0                    	or	AX,AX
 32331 00005D16 743D                    	jz	short Exec_Read_Header
 32332                                  
 32333                                  Exec_Scan_Env:
 32334 00005D18 8EC0                    	mov	ES,AX
 32335 00005D1A 31FF                    	xor	DI,DI
 32336                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32337 00005D1C B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32338 00005D1F 30C0                    	xor	AL,AL
 32339                                  
 32340                                  Exec_Get_Environ_Len:
 32341 00005D21 F2AE                    	repnz	scasb			; find that nul byte
 32342 00005D23 75C9                    	jnz	short BadEnv
 32343                                  
 32344 00005D25 49                      	dec	CX			; Dec CX for the next nul byte test
 32345 00005D26 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32346                                  
 32347 00005D28 AE                      	scasb				; is there another nul byte?
 32348 00005D29 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32349                                  
 32350 00005D2B 57                      	push	DI
 32351                                  	;lea	bx,[DI+11h]
 32352 00005D2C 8D5D11                  	lea	BX,[DI+0Fh+2]
 32353                                  	;add	bx,[bp-22]
 32354 00005D2F 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32355                                  					; remember argv[0] length
 32356                                  					; round up and remember argc
 32357 00005D32 B104                    	mov	CL,4
 32358 00005D34 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32359 00005D36 06                      	push	ES
 32360                                  	;invoke	$Alloc			; can we get the space?
 32361 00005D37 E84A06                  	call	_$ALLOC
 32362 00005D3A 1F                      	pop	DS
 32363 00005D3B 59                      	pop	CX
 32364                                  
 32365                                  	;jnc	short Exec_Save_Environ
 32366                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32367                                  	; 17/12/2022
 32368 00005D3C 727A                    	jc	short Exec_No_Mem ; 02/06/2019
 32369                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32370                                  	;jnc	short Exec_Save_Environ
 32371                                  	;jmp	SHORT Exec_No_Mem
 32372                                  
 32373                                  Exec_Save_Environ:
 32374 00005D3E 8EC0                    	mov	ES,AX
 32375                                  	;mov	[bp-14],ax
 32376 00005D40 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32377 00005D43 31F6                    	xor	SI,SI
 32378 00005D45 89F7                    	mov	DI,SI
 32379 00005D47 F3A4                    	rep	movsb			; copy the environment
 32380 00005D49 B80100                  	mov	AX,1
 32381 00005D4C AB                      	stosw
 32382                                  	;lds	si,[bp-26]
 32383 00005D4D C576E6                  	lds	SI,ExecName
 32384                                  	;mov	cx,[bp-22]
 32385 00005D50 8B4EEA                  	mov	CX,ExecNameLen
 32386 00005D53 F3A4                    	rep	movsb
 32387                                  
 32388                                  Exec_Read_Header:
 32389                                  	; We read in the program header into the above data area and
 32390                                  	; determine where in this memory the image will be located.
 32391                                  
 32392                                  	;Context DS
 32393 00005D55 16                      	push	ss
 32394 00005D56 1F                      	pop	ds
 32395                                  	;mov	cx,26
 32396 00005D57 B91A00                  	mov	CX,exec_header_len	; header size
 32397 00005D5A BA[C70F]                	mov	DX,exec_signature
 32398 00005D5D 06                      	push	ES
 32399 00005D5E 1E                      	push	DS
 32400 00005D5F E88904                  	call	ExecRead
 32401 00005D62 1F                      	pop	DS
 32402 00005D63 07                      	pop	ES
 32403 00005D64 7256                    	jc	short Exec_Bad_File
 32404                                  
 32405 00005D66 09C0                    	or	AX,AX
 32406 00005D68 7452                    	jz	short Exec_Bad_File
 32407                                  	;cmp	ax,26
 32408 00005D6A 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32409 00005D6D 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32410                                  
 32411 00005D6F F706[D30F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32412 00005D75 7504                    	jnz	short Exec_Check_Sig
 32413                                  
 32414                                  	;mov	byte [bp-6],0FFh
 32415 00005D77 C646FAFF                	mov	Exec_Load_High,-1
 32416                                  
 32417                                  Exec_Check_Sig:
 32418 00005D7B A1[C70F]                	mov	AX,[exec_signature]	; rms;NSS
 32419                                  	;cmp	ax,5A4Dh ; 'MZ'
 32420 00005D7E 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32421 00005D81 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32422                                  
 32423                                  	;cmp	ax,4D5Ah ; 'ZM'
 32424 00005D83 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32425 00005D86 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32426                                  
 32427                                  Exec_Com_Filej:
 32428 00005D88 E9EF01                  	jmp	Exec_Com_File
 32429                                  
 32430                                  	; We have the program header... determine memory requirements
 32431                                  
 32432                                  Exec_Save_Start:
 32433 00005D8B A1[CB0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32434 00005D8E B105                    	mov	CL,5			; convert to paragraphs
 32435 00005D90 D3E0                    	shl	AX,CL
 32436 00005D92 2B06[CF0F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32437                                  	;mov	[bp-12],ax
 32438 00005D96 8946F4                  	mov	Exec_Res_Len_Para,AX
 32439                                  
 32440                                  		; Do we need to allocate memory?
 32441                                  		; Yes if function is not load-overlay
 32442                                  
 32443                                  	;test	byte [bp-5],2
 32444 00005D99 F646FB02                	test	Exec_Func,exec_func_overlay
 32445 00005D9D 744B                    	jz	short Exec_Allocate	; allocation of space
 32446                                  
 32447                                  		; get load address from block
 32448                                  
 32449                                  	;les	di,[bp-4]
 32450 00005D9F C47EFC                  	les	DI,Exec_Blk
 32451 00005DA2 268B05                  	mov	ax,[es:di]
 32452                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32453                                  	;mov	[bp-20],ax
 32454 00005DA5 8946EC                  	mov	Exec_DMA,AX
 32455                                  
 32456                                  	; 17/12/2022
 32457                                  	;;mov	ax,[es:di+2]
 32458                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32459                                  	;;mov	[bp-10],ax
 32460                                  	;mov	Exec_Rel_Fac,AX
 32461                                  
 32462                                  	; 17/12/2022
 32463                                  	; 30/11/2022 (!most proper code!)
 32464                                  	;mov	dx,[es:di+2]
 32465 00005DA8 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32466                                  	;mov	[bp-10],dx
 32467 00005DAC 8956F6                  	mov	Exec_Rel_Fac,dx
 32468                                  	; ax = Exec_DMA
 32469 00005DAF E9E400                  	jmp	Exec_Find_Res
 32470                                  
 32471                                  ; 17/12/2022
 32472                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32473                                  ;%if 0
 32474                                  	; 02/06/2019 - Retro DOS v4.0
 32475                                  	;mov	ax,[bp-20]  ; *+*
 32476 00005DB2 8B46EC                  	mov	AX,Exec_DMA ; *+*
 32477                                  	; 10/08/2018
 32478 00005DB5 E9DE00                  	jmp	Exec_Find_Res		; M000
 32479                                  ;%endif
 32480                                  
 32481                                  Exec_No_Mem:
 32482                                  	;mov	al,8
 32483 00005DB8 B008                    	mov	AL,error_not_enough_memory
 32484 00005DBA EB02                    	jmp	short Exec_Bomb
 32485                                  
 32486                                  Exec_Bad_File:
 32487                                  	;mov	al,0Bh
 32488 00005DBC B00B                    	mov	AL,error_bad_format
 32489                                  
 32490                                  Exec_Bomb:
 32491                                  	;mov	bx,[bp-8]
 32492 00005DBE 8B5EF8                  	mov	BX,Exec_FH
 32493 00005DC1 E84004                  	call	Exec_Dealloc
 32494                                  	;LeaveCrit CritMem
 32495 00005DC4 E8ACB5                  	call	LCritMEM
 32496                                  	;save	<AX,BP>
 32497 00005DC7 50                      	push	ax
 32498 00005DC8 55                      	push	bp
 32499                                  	;invoke	$CLOSE
 32500 00005DC9 E83E0A                  	call	_$CLOSE
 32501                                  	;restore <BP,AX>
 32502 00005DCC 5D                      	pop	bp
 32503 00005DCD 58                      	pop	ax
 32504 00005DCE E9B5FE                  	jmp	Exec_Ret_Err
 32505                                  
 32506                                  Exec_Chk_Mem: 
 32507                                  
 32508                                  ; 17/12/2022
 32509                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32510                                  ;%if 0
 32511                                  	; MSDOS 6.0    			; M063 - Start
 32512                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32513                                  	; 10/06/2019
 32514 00005DD1 A0[0203]                	mov	al,[AllocMethod]
 32515                                  	;mov	bl,[ss:ALLOCMSAVE]
 32516 00005DD4 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32517                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32518 00005DD8 881E[0203]              	mov	[AllocMethod],bl
 32519                                  	
 32520 00005DDC F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32521 00005DDF 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32522                                  	;				; N: continue
 32523                                  	;
 32524 00005DE1 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32525 00005DE3 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32526                                  	; 02/06/2019
 32527                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32528 00005DE5 A1[8A00]                	mov	ax,[SAVE_AX]
 32529                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32530                                  					; M063 - End
 32531 00005DE8 EB2B                    	jmp	short Exec_Norm_Alloc1
 32532                                  ;%endif
 32533                                  
 32534                                  ; 17/12/2022
 32535                                  %if 0
 32536                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32537                                  	; MSDOS 6.0    			; M063 - Start
 32538                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32539                                  	mov	bl,[ss:ALLOCMSAVE]
 32540                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32541                                  
 32542                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32543                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32544                                  	;				; N: continue
 32545                                  	;
 32546                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32547                                  	jz	short Exec_No_Mem	; N: no memory 
 32548                                  
 32549                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32550                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32551                                  					; M063 - End
 32552                                  %endif
 32553                                  
 32554                                  Exec_Allocate:
 32555                                  	; 09/09/2018
 32556                                  
 32557                                  	; M005 - START
 32558                                  	; If there is no STACK segment for this exe file and if this
 32559                                  	; not an overlay and the resident size is less than 64K - 
 32560                                  	; 256 bytes we shall add 256 bytes to the programs 
 32561                                  	; resident memory requirement and set Exec_SP to this value.
 32562                                  	
 32563                                  	; 17/12/2022
 32564 00005DEA 29DB                    	sub	bx,bx ; 0	
 32565                                  
 32566                                  	; MSDOS 6.0
 32567                                  	;;mov	byte [bp-29],0
 32568                                  	;mov	Exec_NoStack,0
 32569                                  	; 17/12/2022
 32570 00005DEC 885EE3                  	mov	Exec_NoStack,bl ; 0
 32571 00005DEF 391E[D50F]              	cmp	[exec_SS],bx ; 0
 32572                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32573 00005DF3 7511                    	jne	short ea1		; Y: continue normal processing
 32574 00005DF5 391E[D70F]              	cmp	[exec_SP],bx ; 0
 32575                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32576 00005DF9 750B                    	jne	short ea1		; Y: continue normal processing
 32577                                  
 32578                                  	;inc	byte [bp-29]
 32579 00005DFB FE46E3                  	inc	Exec_NoStack
 32580 00005DFE 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32581 00005E01 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32582                                  
 32583 00005E03 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32584                                  ea1:
 32585                                  	; M005 - END
 32586                                  
 32587                                  	; MSDOS 6.0			; M000 - start
 32588                                  	; 20/05/2019
 32589                                  	; (ds = ss = DOSDATA)
 32590 00005E06 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32591                                  					; Q: is the alloc strat high_first
 32592 00005E0B 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32593                                  					; Y: set high_only bit
 32594 00005E0D 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32595                                  					; M000 - end
 32596                                  Exec_Norm_Alloc:
 32597 00005E12 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32598                                  Exec_Norm_Alloc1:	; 02/06/2019
 32599                                  					; M000: attempt at allocating memory
 32600                                  	; MSDOS 3.3
 32601                                  	;push	ax			; M000
 32602                                  
 32603 00005E15 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32604 00005E18 1E                      	push	DS
 32605                                  	;invoke	$Alloc			; should have carry set and BX has max
 32606 00005E19 E86805                  	call	_$ALLOC
 32607 00005E1C 1F                      	pop	DS
 32608                                  
 32609                                  	; MSDOS 6.0
 32610 00005E1D A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32611                                  	; MSDOS 3.3
 32612                                  	;pop	ax			; M000
 32613                                  
 32614 00005E20 83C010                  	add	AX,10h			; room for header
 32615 00005E23 83FB11                  	cmp	BX,11h			; enough room for a header
 32616                                  	; MSDOS 6.0
 32617 00005E26 72A9                    	jb	short Exec_Chk_Mem	; M000
 32618                                  	; MSDOS 3.3	
 32619                                  	;jb	short Exec_No_Mem
 32620                                  
 32621 00005E28 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32622                                  	; MSDOS 6.0
 32623 00005E2A 77A5                    	ja	short Exec_Chk_Mem	; M000
 32624                                  	; MSDOS 3.3
 32625                                  	;ja	short Exec_No_Mem
 32626                                  
 32627                                  	;test	byte [bp-6],0FFh
 32628 00005E2C F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32629 00005E30 7518                    	jnz	short Exec_BX_Max	; use max
 32630                                  
 32631                                  	; 09/09/2018
 32632                                  
 32633 00005E32 0306[D10F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32634                                  	; MSDOS 6.0
 32635 00005E36 7299                    	jc	short Exec_Chk_Mem		; M000
 32636                                  	; MSDOS 3.3
 32637                                  	;jc	short Exec_No_Mem
 32638                                  
 32639 00005E38 39D8                    	cmp	AX,BX			; enough space?
 32640                                  	; MSDOS 6.0
 32641 00005E3A 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32642                                  	; MSDOS 3.3
 32643                                  	;ja	short Exec_No_Mem
 32644                                  
 32645 00005E3C 2B06[D10F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32646 00005E40 0306[D30F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32647 00005E44 7204                    	jc	short Exec_BX_Max
 32648                                  
 32649 00005E46 39D8                    	cmp	AX,BX
 32650 00005E48 7602                    	jbe	short Exec_Got_Block
 32651                                  
 32652                                  Exec_BX_Max:
 32653 00005E4A 89D8                    	mov	AX,BX
 32654                                  
 32655                                  Exec_Got_Block:
 32656                                  	; 03/08/2018 - Retro DOS v3.0
 32657                                  
 32658 00005E4C 1E                      	push	DS
 32659 00005E4D 89C3                    	mov	BX,AX
 32660                                  	;mov	[bp-16],bx
 32661 00005E4F 895EF0                  	mov	Exec_Size,BX
 32662                                  	;invoke	$Alloc			; get the space
 32663 00005E52 E82F05                  	call	_$ALLOC
 32664 00005E55 1F                      	pop	DS
 32665                                  	; MSDOS 6.0
 32666                                  	;jc	short Exec_Chk_Mem	; M000
 32667                                  	; MSDOS 3.3
 32668                                  	;;jc	short Exec_No_Mem
 32669                                  	; 20/05/2019
 32670 00005E56 7303                    	jnc	short ea0
 32671 00005E58 E976FF                  	jmp	Exec_Chk_Mem
 32672                                  ea0:
 32673                                  	; MSDOS 6.0
 32674 00005E5B 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32675 00005E5F 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32676                                  
 32677                                  ;M029; Begin changes
 32678                                  ; This code does special handling for programs with no stack segment. If so,
 32679                                  ;check if the current block is larger than 64K. If so, we do not modify
 32680                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32681                                  ;case Exec_SS is not changed.
 32682                                  
 32683                                  	; MSDOS 6.0
 32684                                  	;cmp	byte [bp-29],0
 32685 00005E63 807EE300                	cmp	Exec_NoStack,0
 32686                                  	;je	@f
 32687 00005E67 7412                    	je	short ea2
 32688                                  
 32689 00005E69 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32690                                  	;jae	@f			; Y: Exec_SP = 0
 32691 00005E6D 730C                    	jae	short ea2
 32692                                  
 32693                                  ;Make Exec_SP point at the top of the memory block
 32694                                  
 32695 00005E6F B104                    	mov	cl,4
 32696 00005E71 D3E3                    	shl	bx,cl			; get byte offset
 32697 00005E73 81EB0001                	sub	bx,100h			; take care of PSP
 32698 00005E77 891E[D70F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32699                                  ea2:
 32700                                  ;@@:
 32701                                  ;M029; end changes
 32702                                  
 32703                                  	;mov	[bp-18],ax
 32704 00005E7B 8946EE                  	mov	Exec_Load_Block,AX
 32705 00005E7E 83C010                  	add	AX,10h
 32706                                  	;test	byte [bp-6],0FFh
 32707 00005E81 F646FAFF                	test	Exec_Load_High,-1
 32708 00005E85 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32709                                  
 32710                                  	;add	ax,[bp-16]
 32711 00005E87 0346F0                  	add	AX,Exec_Size		; go to end
 32712                                  	;sub	ax,[bp-12]
 32713 00005E8A 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32714 00005E8D 83E810                  	sub	AX,10h			; drop off pdb
 32715                                  
 32716                                  Exec_Use_AX:
 32717                                  	;mov	[bp-10],ax
 32718 00005E90 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32719                                  	;mov	[bp-20],ax
 32720 00005E93 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32721                                  
 32722                                  	; Determine the location in the file of the beginning of
 32723                                  	; the resident
 32724                                  
 32725                                  ; 17/12/2022
 32726                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32727                                  ;%if 0
 32728                                  
 32729                                  Exec_Find_Res:
 32730                                  	; MSDOS 6.0
 32731                                  	;;mov	dx,[bp-20]
 32732                                  	;mov	DX,Exec_DMA ; *+*
 32733                                  	;;mov	[bp-28],dx
 32734                                  	;mov	Exec_DMA_Save,DX
 32735                                  
 32736                                  	; 17/12/2022
 32737                                  	; AX = Exec_DMA
 32738                                  
 32739                                  	; 02/06/2019 - Retro DOS v4.0
 32740                                  	;mov	[bp-28],ax ; *+*
 32741 00005E96 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32742                                  
 32743                                  ;%endif
 32744                                  
 32745                                  ; 17/12/2022
 32746                                  %if 0
 32747                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32748                                  Exec_Find_Res:
 32749                                  	;mov	dx,[bp-20]
 32750                                  	mov	DX,Exec_DMA ; *+*
 32751                                  	;mov	[bp-28],dx
 32752                                  	mov	Exec_DMA_Save,DX
 32753                                  %endif
 32754                                  
 32755                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32756 00005E99 8B16[CF0F]              	mov	DX,[exec_par_dir]
 32757 00005E9D 52                      	push	DX
 32758 00005E9E B104                    	mov	CL,4
 32759 00005EA0 D3E2                    	shl	DX,CL			; low word of location
 32760 00005EA2 58                      	pop	AX
 32761 00005EA3 B10C                    	mov	CL,12
 32762 00005EA5 D3E8                    	shr	AX,CL			; high word of location
 32763 00005EA7 89C1                    	mov	CX,AX			; CX <- high
 32764                                  
 32765                                  		; Read in the resident image (first, seek to it)
 32766                                  	;mov	bx,[bp-8]
 32767 00005EA9 8B5EF8                  	mov	BX,Exec_FH
 32768 00005EAC 1E                      	push	DS
 32769 00005EAD 30C0                    	xor	AL,AL
 32770                                  	;invoke	$Lseek			; Seek to resident
 32771 00005EAF E8D40A                  	call	_$LSEEK
 32772 00005EB2 1F                      	pop	DS
 32773 00005EB3 7303                    	jnc	short Exec_Big_Read
 32774                                  
 32775 00005EB5 E906FF                  	jmp	Exec_Bomb
 32776                                  
 32777                                  Exec_Big_Read:				; Read resident into memory
 32778                                  	;mov	bx,[bp-12]
 32779 00005EB8 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32780 00005EBB 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32781 00005EBF 7203                    	jb	short Exec_Read_OK
 32782                                  
 32783 00005EC1 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32784                                  
 32785                                  Exec_Read_OK:
 32786                                  	;sub	[bp-12],bx
 32787 00005EC4 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32788 00005EC7 53                      	push	BX
 32789 00005EC8 B104                    	mov	CL,4
 32790 00005ECA D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32791 00005ECC 89D9                    	mov	CX,BX			; Count in correct register
 32792 00005ECE 1E                      	push	DS
 32793                                  	;mov	ds,[bp-20]
 32794 00005ECF 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32795                                  
 32796 00005ED2 31D2                    	xor	DX,DX
 32797 00005ED4 51                      	push	CX			; Save our count
 32798 00005ED5 E81303                  	call	ExecRead
 32799 00005ED8 59                      	pop	CX			; Get old count to verify
 32800 00005ED9 1F                      	pop	DS
 32801 00005EDA 7248                    	jc	short Exec_Bad_FileJ
 32802                                  
 32803 00005EDC 39C1                    	cmp	CX,AX			; Did we read enough?
 32804 00005EDE 5B                      	pop	BX			; Get paragraph count back
 32805 00005EDF 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32806                                  
 32807                                  	; The read did not match the request. If we are off by 512
 32808                                  	; bytes or more then the header lied and we have an error.
 32809                                  
 32810 00005EE1 29C1                    	sub	CX,AX
 32811 00005EE3 81F90002                	cmp	CX,512
 32812 00005EE7 733B                    	jae	short Exec_Bad_FileJ
 32813                                  
 32814                                  	; We've read in CX bytes... bump DTA location
 32815                                  
 32816                                  ExecCheckEnd:
 32817                                  	;add	[bp-20],bx
 32818 00005EE9 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32819                                  	;test	word [bp-12],0FFFFh
 32820 00005EEC F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32821 00005EF1 75C5                    	jnz	short Exec_Big_Read
 32822                                  
 32823                                  	; The image has now been read in. We must perform relocation
 32824                                  	; to the current location.
 32825                                  
 32826                                  exec_do_reloc:
 32827                                  	;mov	cx,[bp-10]
 32828 00005EF3 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32829 00005EF6 A1[D50F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32830 00005EF9 01C8                    	add	AX,CX			; and relocate him
 32831 00005EFB A3[C10F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32832                                  
 32833 00005EFE A1[D70F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32834 00005F01 A3[BF0F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32835                                  
 32836 00005F04 C406[DB0F]              	les	AX,[exec_IP]		; rms;NSS
 32837 00005F08 A3[C30F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32838 00005F0B 8CC0                    	mov	AX,ES			; rms;NSS
 32839 00005F0D 01C8                    	add	AX,CX			; relocated...
 32840 00005F0F A3[C50F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32841                                  
 32842 00005F12 31C9                    	xor	CX,CX
 32843 00005F14 8B16[DF0F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32844                                  	;mov	bx,[bp-8]
 32845 00005F18 8B5EF8                  	mov	BX,Exec_FH
 32846 00005F1B 1E                      	push	DS
 32847 00005F1C 31C0                    	xor	AX,AX
 32848                                  	;invoke	$Lseek
 32849 00005F1E E8650A                  	call	_$LSEEK
 32850 00005F21 1F                      	pop	DS
 32851 00005F22 7303                    	jnc	short exec_get_entries
 32852                                  
 32853                                  Exec_Bad_FileJ:
 32854 00005F24 E995FE                  	jmp	Exec_Bad_File
 32855                                  
 32856                                  exec_get_entries:
 32857 00005F27 8B16[CD0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32858                                  
 32859                                  exec_read_reloc:
 32860 00005F2B 52                      	push	DX
 32861                                  	;mov	dx,OPENBUF
 32862 00005F2C BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32863                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32864                                  	;mov	cx,396 ; MSDOS 6.0
 32865 00005F2F B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32866 00005F32 1E                      	push	DS
 32867 00005F33 E8B502                  	call	ExecRead
 32868 00005F36 07                      	pop	ES
 32869 00005F37 5A                      	pop	DX
 32870 00005F38 72EA                    	jc	short Exec_Bad_FileJ
 32871                                  
 32872                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32873                                  	;mov	cx,99 ;  MSDOS 6.0
 32874 00005F3A B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32875                                  					; Pointer to byte location in header
 32876                                  	;mov	di,OPENBUF
 32877 00005F3D BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32878                                  	;mov	si,[bp-10]
 32879 00005F40 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32880                                  
 32881                                  exec_reloc_one:
 32882 00005F43 09D2                    	or	DX,DX			; Any more entries?
 32883 00005F45 7416                    	jz	short Exec_Set_PDBJ
 32884                                  
 32885                                  exec_get_addr:
 32886 00005F47 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32887 00005F4A 8CD8                    	mov	AX,DS			; Relocate address of item
 32888                                  
 32889                                  	; MSDOS 6.0
 32890                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32891                                  	;add	ax,[bp-28]
 32892 00005F4C 0346E4                  	add	AX,Exec_DMA_Save
 32893                                  
 32894 00005F4F 8ED8                    	mov	DS,AX
 32895 00005F51 0137                    	add	[BX],SI
 32896 00005F53 83C704                  	add	DI,4
 32897 00005F56 4A                      	dec	DX
 32898 00005F57 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32899                                  
 32900                                  	; We've exhausted a single buffer's worth. Read in the next
 32901                                  	; piece of the relocation table.
 32902                                  
 32903 00005F59 06                      	push	ES
 32904 00005F5A 1F                      	pop	DS
 32905 00005F5B EBCE                    	jmp	short exec_read_reloc
 32906                                  
 32907                                  Exec_Set_PDBJ:
 32908                                  	; MSDOS 6.0
 32909                                  	
 32910                                  	; We now determine if this is a buggy exe packed file and if 
 32911                                  	; so we patch in the right code. Note that fixexepatch will
 32912                                  	; point to a ret if dos loads low. The load segment as 
 32913                                  	; determined above will be in exec_dma_save
 32914                                  	
 32915 00005F5D 06                      	push	es
 32916 00005F5E 50                      	push	ax			; M030
 32917 00005F5F 51                      	push	cx			; M030
 32918                                  	;mov	es,[bp-28]
 32919 00005F60 8E46E4                  	mov	es,Exec_DMA_Save
 32920 00005F63 36A1[C50F]              	mov	ax,[ss:exec_init_CS]	; M030
 32921 00005F67 368B0E[C30F]            	mov	cx,[ss:exec_init_IP]	; M030
 32922 00005F6C 36FF16[F811]            	call	word [ss:FixExePatch]
 32923                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32924                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32925                                  	;call	word [ss:Rational386PatchPtr]
 32926 00005F71 59                      	pop	cx			; M030
 32927 00005F72 58                      	pop	ax			; M030
 32928 00005F73 07                      	pop	es
 32929                                  
 32930 00005F74 E9DE00                  	jmp	Exec_Set_PDB
 32931                                  
 32932                                  Exec_No_Memj:
 32933 00005F77 E93EFE                  	jmp	Exec_No_Mem
 32934                                  
 32935                                  	; we have a .COM file. First, determine if we are merely
 32936                                  	; loading an overlay.
 32937                                  
 32938                                  Exec_Com_File:
 32939                                  	;test	byte [bp-5],2
 32940 00005F7A F646FB02                	test	Exec_Func,exec_func_overlay
 32941 00005F7E 742D                    	jz	short Exec_Alloc_Com_File
 32942                                  	;lds	si,[bp-4]
 32943 00005F80 C576FC                  	lds	SI,Exec_Blk		; get arg block
 32944 00005F83 AD                      	lodsw				; get load address
 32945                                  	;mov	[bp-20],ax
 32946 00005F84 8946EC                  	mov	Exec_DMA,AX
 32947 00005F87 B8FFFF                  	mov	AX,0FFFFh
 32948 00005F8A EB63                    	jmp	short Exec_Read_Block	; read it all!
 32949                                  
 32950                                  Exec_Chk_Com_Mem:			
 32951                                  	; MSDOS 6.0	     		; M063 - Start
 32952 00005F8C 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32953 00005F90 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32954 00005F95 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32955 00005F9A F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32956 00005F9D 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32957                                  					; N: continue
 32958                                  	
 32959 00005F9F A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32960 00005FA1 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32961                                  	
 32962                                  	;mov	ax,[bp-18]
 32963 00005FA3 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32964 00005FA6 31DB                    	xor	bx,bx			; M047: bx => free arena
 32965 00005FA8 E87502                  	call	ChangeOwner		; M047: free this block
 32966                                  	
 32967 00005FAB EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32968                                  					; M063 - End
 32969                                  	
 32970                                  	; We must allocate the max possible size block (ick!)
 32971                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32972                                  	; size of block.
 32973                                  
 32974                                  Exec_Alloc_Com_File:
 32975                                  	; MSDOS 6.0			; M000 -start
 32976 00005FAD 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32977                                  					; Q: is the alloc strat high_first
 32978 00005FB3 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 32979                                  					; Y: set high_only bit
 32980 00005FB5 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 32981                                  					; M000 - end
 32982                                  Exec_Norm_Com_Alloc:			; M000
 32983                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32984 00005FBB BBFFFF                  	mov	BX,0FFFFh
 32985                                  	;invoke	$Alloc			; largest piece available as error
 32986 00005FBE E8C303                  	call	_$ALLOC
 32987 00005FC1 09DB                    	or	BX,BX
 32988                                  	; MSDOS 6.0
 32989 00005FC3 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 32990                                  	; MSDOS 3.3
 32991                                  	;jz	short Exec_No_Memj
 32992                                  
 32993                                  	;mov	[bp-16],bx
 32994 00005FC5 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 32995 00005FC8 53                      	push	BX
 32996                                  	;invoke	$ALLOC			; largest piece available
 32997 00005FC9 E8B803                  	call	_$ALLOC
 32998 00005FCC 5B                      	pop	BX			; get size of block...
 32999                                  	;mov	[bp-18],ax
 33000 00005FCD 8946EE                  	mov	Exec_Load_Block,AX
 33001                                  
 33002 00005FD0 83C010                  	add	AX,10h			; increment for header
 33003                                  	;mov	[bp-20],ax
 33004 00005FD3 8946EC                  	mov	Exec_DMA,AX
 33005                                  
 33006 00005FD6 31C0                    	xor	AX,AX			; presume 64K read...
 33007 00005FD8 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33008 00005FDC 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33009                                  
 33010 00005FDE 89D8                    	mov	AX,BX			; convert size to bytes
 33011 00005FE0 B104                    	mov	CL,4
 33012 00005FE2 D3E0                    	shl	AX,CL
 33013                                  	; 17/12/2022
 33014                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33015                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33016                                  	; MSDOS 5.0
 33017                                  	;cmp	AX,100h   
 33018                                  	; 02/06/2019 - Retro DOS v4.0
 33019                                  	; MSDOS 6.0
 33020                                          ; 17/12/2022
 33021 00005FE4 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33022 00005FE7 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33023                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33024                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33025                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33026                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33027                                  
 33028                                  					; M047: size of the block is < 64K
 33029 00005FE9 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33030                                  
 33031                                  Exec_Read_Com:
 33032                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33033 00005FEC 2D0001                  	sub	AX,100h 		; remember size of psp
 33034                                  Exec_Read_Block:
 33035 00005FEF 50                      	push	AX			; save number to read
 33036                                  	;mov	bx,[bp-8]
 33037 00005FF0 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33038 00005FF3 31C9                    	xor	CX,CX			; but seek to 0:0
 33039 00005FF5 89CA                    	mov	DX,CX
 33040 00005FF7 31C0                    	xor	AX,AX			; seek relative to beginning
 33041                                  	;invoke	$Lseek			; back to beginning of file
 33042 00005FF9 E88A09                  	call	_$LSEEK
 33043 00005FFC 59                      	pop	CX			; number to read
 33044                                  	;mov	ds,[bp-20]
 33045 00005FFD 8E5EEC                  	mov	DS,Exec_DMA
 33046 00006000 31D2                    	xor	DX,DX
 33047 00006002 51                      	push	CX
 33048 00006003 E8E501                  	call	ExecRead
 33049 00006006 5E                      	pop	SI			; get number of bytes to read
 33050 00006007 7303                    	jnc	short OkRead
 33051 00006009 E9B0FD                  	jmp	Exec_Bad_File
 33052                                  
 33053                                  	; 10/09/2018
 33054                                  OkRead:
 33055 0000600C 39F0                    	cmp	AX,SI			; did we read them all?
 33056                                  	; MSDOS 6.0
 33057                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33058                                  	; MSDOS 3.3
 33059                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33060 0000600E 7503                    	jne	short OkRead2
 33061 00006010 E979FF                  	jmp	Exec_Chk_Com_Mem
 33062                                  OkRead2:
 33063                                  	; MSDOS 6.0
 33064 00006013 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33065 00006018 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33066                                  
 33067                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33068                                  	;test	byte [bp-5],2
 33069 0000601D F646FB02                	test	Exec_Func,exec_func_overlay
 33070 00006021 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33071                                  
 33072                                  	;mov	ax,[bp-20]
 33073 00006023 8B46EC                  	mov	AX,Exec_DMA
 33074 00006026 83E810                  	sub	AX,10h
 33075 00006029 36A3[C50F]              	mov	[SS:exec_init_CS],AX
 33076 0000602D 36C706[C30F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33077                                  
 33078                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33079                                  	; of 0 on stack.
 33080                                  
 33081 00006034 81C6FE00                	add	SI,0FEh 		; make room for stack
 33082                                  
 33083                                  	; MSDOS 6.0
 33084 00006038 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33085 0000603B 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33086 0000603D 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33087                                  
 33088                                  Exec_St_Ok:
 33089                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33090 00006041 368936[BF0F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33091 00006046 36A3[C10F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33092 0000604A 8ED8                    	mov	DS,AX
 33093 0000604C C7040000                	mov	WORD [SI],0		; 0 for return
 33094                                  
 33095                                  	; MSDOS 6.0
 33096                                  
 33097                                  	; M068
 33098                                  	;
 33099                                  	; We now determine if this is a Copy Protected App. If so the 
 33100                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33101                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33102                                  
 33103 00006050 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33104                                  
 33105                                  Exec_Set_PDB:
 33106                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33107                                  	;mov	bx,[bp-8]
 33108 00006055 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33109 00006058 E8A901                  	call	Exec_Dealloc
 33110 0000605B 55                      	push	BP
 33111                                  	;invoke	$Close			; release the jfn
 33112 0000605C E8AB07                  	call	_$CLOSE
 33113 0000605F 5D                      	pop	BP
 33114 00006060 E89301                  	call	Exec_Alloc
 33115                                  	;test	byte [bp-5],2
 33116 00006063 F646FB02                	test	Exec_Func,exec_func_overlay
 33117 00006067 743A                    	jz	short Exec_Build_Header
 33118                                  
 33119                                  	; MSDOS 6.0
 33120 00006069 E8C201                  	call	Scan_Execname
 33121 0000606C E8D601                  	call	Scan_Special_Entries
 33122                                  ;SR;
 33123                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33124                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33125                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33126                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33127                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33128                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33129                                  ;issues the version check, it gets the lie version until the next overlay
 33130                                  ;call is issued.
 33131                                  
 33132 0000606F 36803E[3E10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33133 00006075 7426                    	je	short norm_ovl		;yes, no special handling
 33134 00006077 56                      	push	si
 33135 00006078 06                      	push	es
 33136 00006079 36C436[3F10]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33137                                  	 
 33138                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33139 0000607E 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33140 00006082 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33141                                  	
 33142 00006084 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33143 00006089 36FF36[BC0E]            	push	word [ss:SPECIAL_VERSION]
 33144 0000608E 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33145                                  		;;; PDB.VERSION
 33146 00006093 EB06                    	jmp	short setver_done
 33147                                  sysinit_done:
 33148 00006095 36C606[3E10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33149                                  setver_done:
 33150 0000609B 07                      	pop	es
 33151 0000609C 5E                      	pop	si
 33152                                  norm_ovl:
 33153                                  	;leave
 33154 0000609D 89EC                    	mov	sp,bp		
 33155 0000609F 5D                      	pop	bp
 33156                                  
 33157                                  	;transfer SYS_RET_OK		; overlay load -> done
 33158 000060A0 E9A6A5                  	jmp	SYS_RET_OK
 33159                                  
 33160                                  Exec_Build_Header:
 33161                                  	;mov	dx,[bp-18]
 33162 000060A3 8B56EE                  	mov	DX,Exec_Load_Block
 33163                                  					; assign the space to the process
 33164                                  	;mov	si,1
 33165 000060A6 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33166                                  	;mov	ax,[bp-14]
 33167 000060A9 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33168 000060AC 09C0                    	or	AX,AX
 33169 000060AE 7405                    	jz	short No_Owner		; no environment
 33170                                  
 33171 000060B0 48                      	dec	AX			; point to header
 33172 000060B1 8ED8                    	mov	DS,AX
 33173 000060B3 8914                    	mov	[SI],DX 		; assign ownership
 33174                                  No_Owner:
 33175                                  	;mov	ax,[bp-18]
 33176                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33177                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33178                                  	; 17/12/2022
 33179 000060B5 89D0                    	mov	ax,dx ; 06/06/2019
 33180                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33181                                  	
 33182 000060B7 48                      	dec	AX
 33183 000060B8 8ED8                    	mov	DS,AX			; point to header
 33184 000060BA 8914                    	mov	[SI],DX 		; assign ownership
 33185                                  
 33186                                  	; MSDOS 6.0
 33187 000060BC 1E                      	push	DS			;AN000;MS. make ES=DS
 33188 000060BD 07                      	pop	ES			;AN000;MS.
 33189                                  	;mov	di,8
 33190 000060BE BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33191 000060C1 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33192                                  					;	   ds:si->name, cx=name length
 33193 000060C4 51                      	push	CX			;AN007;;MS. save for fake version
 33194 000060C5 56                      	push	SI			;AN007;;MS. save for fake version
 33195                                  
 33196                                  MoveName:				;AN000;
 33197 000060C6 AC                      	lodsb				;AN000;;MS. get char
 33198 000060C7 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33199 000060C9 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33200                                  					;AN000;
 33201 000060CB AA                      	stosb				;AN000;;MS. move char
 33202                                  					; MSKK bug fix - limit length copied
 33203 000060CC 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33204 000060CF 7302                    	jae	short Mem_Done		; jump if so
 33205                                  	;
 33206 000060D1 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33207                                  Mem_Done:				;AN000;
 33208 000060D3 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33209                                  	;cmp	di,16
 33210 000060D5 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33211 000060D8 7301                    	jae	short Fill8		;AN000;MS.
 33212                                  	
 33213 000060DA AA                      	stosb				;AN000;MS.
 33214                                  	
 33215                                  Fill8:					;AN000;
 33216 000060DB 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33217 000060DC 59                      	pop	CX			;AN007;MS.
 33218                                  	
 33219 000060DD E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33220                                  
 33221                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33222 000060E0 52                      	push	DX
 33223                                  	;mov	si,[bp-16]
 33224 000060E1 8B76F0                  	mov	SI,Exec_Size
 33225 000060E4 01D6                    	add	SI,DX
 33226                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33227 000060E6 E8F6AF                  	call	_$DUP_PDB
 33228 000060E9 5A                      	pop	DX
 33229                                  
 33230                                  	;push	word [bp-14]
 33231 000060EA FF76F2                  	push	Exec_Environ
 33232                                  	;pop	WORD [ES:2Ch]
 33233 000060ED 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33234                                  
 33235                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33236                                  					; version number in PSP
 33237 000060F2 36FF36[BC0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33238 000060F7 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33239                                  		; PDB.VERSION
 33240                                  
 33241                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33242                                  	;lds	si,[bp-4]
 33243 000060FC C576FC                  	lds	SI,Exec_Blk		; get the block
 33244 000060FF 1E                      	push	DS			; save its location
 33245 00006100 56                      	push	SI
 33246                                  	;lds	si,[si+6]
 33247 00006101 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33248                                  
 33249                                  	; DS points to user space 5C FCB
 33250                                  
 33251 00006104 B90C00                  	mov	CX,12			; copy drive, name and ext
 33252 00006107 51                      	push	CX
 33253 00006108 BF5C00                  	mov	DI,5Ch
 33254 0000610B 8A1C                    	mov	BL,[SI]
 33255 0000610D F3A4                    	rep	movsb
 33256                                  
 33257                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33258                                  
 33259 0000610F 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33260 00006111 AB                      	stosw
 33261 00006112 AB                      	stosw
 33262                                  
 33263                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33264                                  
 33265 00006113 59                      	pop	CX
 33266 00006114 5E                      	pop	SI			; get block
 33267 00006115 1F                      	pop	DS
 33268 00006116 1E                      	push	DS			; save (again)
 33269 00006117 56                      	push	SI
 33270                                  	;lds	si,[si+0Ah]
 33271 00006118 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33272                                  
 33273                                  	; DS points to user space 6C FCB
 33274                                  
 33275 0000611B 8A3C                    	mov	BH,[SI] 		; do same as above
 33276 0000611D F3A4                    	rep	movsb
 33277 0000611F AB                      	stosw
 33278 00006120 AB                      	stosw
 33279 00006121 5E                      	pop	SI			; get block (last time)
 33280 00006122 1F                      	pop	DS
 33281                                  	;ld	si,[si+2]
 33282 00006123 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33283                                  
 33284                                  	; DS points to user space 80 command line
 33285                                  
 33286 00006126 80C980                  	or	CL,80h
 33287 00006129 89CF                    	mov	DI,CX
 33288 0000612B F3A4                    	rep	movsb			; Wham!
 33289                                  
 33290                                  	; Process BX into default AX (validity of drive specs on args).
 33291                                  	; We no longer care about DS:SI.
 33292                                  
 33293 0000612D FEC9                    	dec	CL			; get 0FFh in CL
 33294 0000612F 88F8                    	mov	AL,BH
 33295 00006131 30FF                    	xor	BH,BH
 33296                                  	;invoke	GetVisDrv
 33297 00006133 E8410A                  	call	GetVisDrv
 33298 00006136 7302                    	jnc	short Exec_BL
 33299                                  
 33300 00006138 88CF                    	mov	BH,CL
 33301                                  
 33302                                  Exec_BL:
 33303 0000613A 88D8                    	mov	AL,BL
 33304 0000613C 30DB                    	xor	BL,BL
 33305                                  	;invoke	GetVisDrv
 33306 0000613E E8360A                  	call	GetVisDrv
 33307 00006141 7302                    	jnc	short Exec_Set_Return
 33308                                  
 33309 00006143 88CB                    	mov	BL,CL
 33310                                  
 33311                                  Exec_Set_Return:
 33312                                  	;invoke	Get_User_Stack			; get his return address
 33313 00006145 E847A3                  	call	Get_User_Stack
 33314                                  
 33315                                  	;push	word [si+14h]
 33316 00006148 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33317                                  	;push	word [si+12h]
 33318 0000614B FF7412                  	push	word [SI+user_env.user_IP]
 33319                                  	;push	word [si+14h]
 33320 0000614E FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33321                                  	;push	word [si+12h]
 33322 00006151 FF7412                  	push	word [SI+user_env.user_IP]
 33323                                  	;pop	word [ES:0Ah]
 33324 00006154 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33325                                  	;pop	word [ES:0Ch]
 33326 00006159 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33327                                  
 33328 0000615E 31C0                    	xor	AX,AX
 33329 00006160 8ED8                    	mov	DS,AX
 33330                                  					; save them where we can get them
 33331                                  					; later when the child exits.
 33332                                  	;pop	word [88h]
 33333 00006162 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33334                                  	;pop	word [90h]
 33335 00006166 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33336                                  
 33337 0000616A 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33338 00006171 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33339 00006176 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33340                                  
 33341                                  	;test	byte [bp-5],1
 33342 0000617B F646FB01                	test	Exec_Func,exec_func_no_execute
 33343 0000617F 7427                    	jz	short exec_go
 33344                                  
 33345 00006181 36C536[BF0F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33346                                  	;les	di,[bp-4]
 33347 00006186 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33348                                  	;mov	[es:di+10h],ds
 33349 00006189 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33350                                  
 33351 0000618D 4E                      	dec	SI			; 'push' default AX
 33352 0000618E 4E                      	dec	SI
 33353 0000618F 891C                    	mov	[SI],BX 		; save default AX reg
 33354                                  	;mov	[es:di+0Eh], si
 33355 00006191 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33356                                  
 33357 00006195 36C506[C30F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33358                                  	;mov	[es:di+14h],ds
 33359 0000619A 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33360                                  	;mov	[es:di+12h],ax
 33361 0000619E 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33362                                  	
 33363                                  	;leave
 33364 000061A2 89EC                    	mov	sp,bp
 33365 000061A4 5D                      	pop	bp	
 33366                                  
 33367                                  	;transfer SYS_RET_OK
 33368 000061A5 E9A1A4                  	jmp	SYS_RET_OK
 33369                                  
 33370                                  exec_go:
 33371 000061A8 36C536[C30F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33372 000061AD 36C43E[BF0F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33373 000061B2 8CC0                    	mov	AX,ES
 33374                                  
 33375                                  	; MSDOS 6.0
 33376 000061B4 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33377 000061BA 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33378                                  
 33379 000061BC 1E                      	push	ds			; Y: control must go to low mem stub
 33380                                  		
 33381 000061BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33382                                  					;    control to user 
 33383 000061C2 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33384                                  					; M004: Set bit to signal int 21
 33385                                  					; ah = 25 & ah= 49. See dossym.inc 
 33386                                  					; under TAG M003 & M009 for 
 33387                                  					; explanation
 33388 000061C7 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33389                                  					; M068: going to be turned OFF.
 33390                                  	
 33391 000061CB 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33392 000061CD 1F                      	pop	ds
 33393                                  	
 33394 000061CE 50                      	push	ax			; ret far into the low mem stub
 33395 000061CF B8[FB10]                	mov	ax,disa20_xfer
 33396 000061D2 50                      	push	ax
 33397 000061D3 8CC0                    	mov	AX,ES			; restore ax
 33398 000061D5 CB                      	retf
 33399                                  
 33400                                  Xfer_To_User:
 33401                                  	; DS:SI points to entry point
 33402                                  	; AX:DI points to initial stack
 33403                                  	; DX has PDB pointer
 33404                                  	; BX has initial AX value
 33405                                  
 33406 000061D6 FA                      	cli
 33407                                  	; 15/08/2018
 33408 000061D7 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33409                                  
 33410 000061DD 8ED0                    	mov	SS,AX			; set up user's stack
 33411 000061DF 89FC                    	mov	SP,DI			; and SP
 33412 000061E1 FB                      	sti
 33413                                  
 33414 000061E2 1E                      	push	DS			; fake long call to entry
 33415 000061E3 56                      	push	SI
 33416 000061E4 8EC2                    	mov	ES,DX			; set up proper seg registers
 33417 000061E6 8EDA                    	mov	DS,DX
 33418 000061E8 89D8                    	mov	AX,BX			; set up proper AX
 33419                                  
 33420 000061EA CB                      	retf
 33421                                  
 33422                                  ; 04/08/2018 - Retro DOS v3.0
 33423                                  
 33424                                  ;----------------------------------------------------------------------------
 33425                                  ;
 33426                                  ;----------------------------------------------------------------------------
 33427                                  
 33428                                  ExecRead:
 33429 000061EB E81600                  	CALL	Exec_Dealloc
 33430                                  	;mov	bx,[bp-8]
 33431 000061EE 8B5EF8                  	MOV	bx,Exec_FH
 33432                                  
 33433 000061F1 55                      	PUSH	BP
 33434 000061F2 E82607                  	call	_$READ
 33435 000061F5 5D                      	POP	BP
 33436                                  
 33437                                  	;CALL	Exec_Alloc
 33438                                  	;retn
 33439                                  	; 18/12/2022
 33440                                  	;jmp	short Exec_Alloc
 33441                                  
 33442                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33443                                  
 33444                                  ;----------------------------------------------------------------------------
 33445                                  ;
 33446                                  ;----------------------------------------------------------------------------
 33447                                  
 33448                                  Exec_Alloc:
 33449 000061F6 53                      	push	BX
 33450                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33451                                  	; 20/05/2019 - Retro DOS v4.0
 33452                                  	; MSDOS 6.0
 33453 000061F7 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33454 000061FC E81000                  	call	ChangeOwners
 33455 000061FF E871B1                  	call	LCritMEM
 33456 00006202 5B                      	pop	BX
 33457 00006203 C3                      	retn
 33458                                  
 33459                                  ;----------------------------------------------------------------------------
 33460                                  ;
 33461                                  ;----------------------------------------------------------------------------
 33462                                  
 33463                                  Exec_Dealloc:
 33464 00006204 53                      	push	BX
 33465                                  	;mov	bx,0
 33466 00006205 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33467 00006207 E84EB1                  	call	ECritMEM
 33468 0000620A E80200                  	call	ChangeOwners
 33469 0000620D 5B                      	pop	BX
 33470 0000620E C3                      	retn
 33471                                  
 33472                                  ; 18/12/2022
 33473                                  %if 0
 33474                                  ;----------------------------------------------------------------------------
 33475                                  ;
 33476                                  ;----------------------------------------------------------------------------
 33477                                  
 33478                                  Exec_Alloc:
 33479                                  	push	BX
 33480                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33481                                  	; 20/05/2019 - Retro DOS v4.0
 33482                                  	; MSDOS 6.0
 33483                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33484                                  	call	ChangeOwners
 33485                                  	call	LCritMEM
 33486                                  	pop	BX
 33487                                  	retn
 33488                                  
 33489                                  %endif
 33490                                  
 33491                                  ;----------------------------------------------------------------------------
 33492                                  ;
 33493                                  ;----------------------------------------------------------------------------
 33494                                  
 33495                                  ChangeOwners:
 33496 0000620F 9C                      	pushf
 33497 00006210 50                      	push	AX
 33498                                  	;mov	ax,[bp-14]
 33499 00006211 8B46F2                  	mov	AX,Exec_Environ
 33500 00006214 E80900                  	call	ChangeOwner
 33501                                  	;mov	ax,[bp-18]
 33502 00006217 8B46EE                  	mov	AX,Exec_Load_Block
 33503 0000621A E80300                  	call	ChangeOwner
 33504 0000621D 58                      	pop	AX
 33505 0000621E 9D                      	popf
 33506                                  chgown_retn:
 33507 0000621F C3                      	retn
 33508                                  
 33509                                  ;----------------------------------------------------------------------------
 33510                                  ;
 33511                                  ;----------------------------------------------------------------------------
 33512                                  
 33513                                  ChangeOwner:
 33514 00006220 09C0                    	or	AX,AX			; is area allocated?
 33515 00006222 74FB                    	jz	short chgown_retn	; no, do nothing
 33516 00006224 48                      	dec	AX
 33517 00006225 1E                      	push	DS
 33518 00006226 8ED8                    	mov	DS,AX
 33519 00006228 891E0100                	mov	[ARENA.OWNER],BX
 33520 0000622C 1F                      	pop	DS
 33521 0000622D C3                      	retn
 33522                                  
 33523                                  ;----------------------------------------------------------------------------
 33524                                  ;
 33525                                  ;----------------------------------------------------------------------------
 33526                                  
 33527                                  ; 20/05/2019 - Retro DOS v4.0
 33528                                  
 33529                                  	; MSDOS 6.0
 33530                                  Scan_Execname:
 33531 0000622E C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33532                                  Scan_Execname1:				; M028
 33533                                  Save_Begin:				;
 33534 00006231 89F1                    	mov	CX,SI			; CX= starting addr
 33535                                  Scan0:					;
 33536 00006233 AC                      	lodsb				; get char
 33537                                  
 33538 00006234 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33539 00006236 74F9                    	jz	short Save_Begin	; yes, save si
 33540 00006238 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33541 0000623A 74F5                    	jz	short Save_Begin	; yes, save si
 33542 0000623C 3C00                    	cmp	AL,0			; is end of name
 33543 0000623E 75F3                    	jnz	short Scan0		; no, continue scanning
 33544 00006240 29CE                    	sub	SI,CX			; get name's length
 33545 00006242 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33546                                  
 33547 00006244 C3                      	retn
 33548                                  
 33549                                  ;----------------------------------------------------------------------------
 33550                                  ;
 33551                                  ;----------------------------------------------------------------------------
 33552                                  
 33553                                  ; 20/05/2019 - Retro DOS v4.0
 33554                                  
 33555                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33556                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33557                                  
 33558                                  	; MSDOS 6.0
 33559                                  
 33560                                  Scan_Special_Entries:
 33561                                  
 33562 00006245 49                      	dec	CX			; cx= name length
 33563                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33564                                  					;reset to current version
 33565                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33566                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33567                                  	;mov	word [ss:SPECIAL_VERSION],5
 33568                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33569                                  
 33570                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33571 00006246 36C706[BC0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33572                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33573                                  ;***	call	Reset_Version
 33574                                  
 33575                                  ;M060	push	SS
 33576                                  ;M060	pop	ES
 33577                                  
 33578 0000624D 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33579 00006252 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33580 00006254 09F8                    	or	AX,DI			;M060; be sure the table exists
 33581 00006256 7427                    	jz	short End_List		;M060; If ZR then no table
 33582                                  
 33583                                  GetEntries:
 33584 00006258 268A05                  	mov	AL,[ES:DI]		; end of list
 33585 0000625B 08C0                    	or	AL,AL
 33586 0000625D 7420                    	jz	short End_List		; yes
 33587                                  
 33588 0000625F 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33589 00006264 38C8                    	cmp	AL,CL			; same length ?
 33590 00006266 751B                    	jnz	short SkipOne 		; no
 33591                                  
 33592 00006268 47                      	inc	DI			; es:di -> special name
 33593 00006269 51                      	push	CX			; save length and name addr
 33594 0000626A 56                      	push	SI
 33595                                  
 33596                                  ; M050 - BEGIN
 33597                                  
 33598 0000626B 50                      	push	ax			; save len
 33599                                  sse_next_char:
 33600 0000626C AC                      	lodsb
 33601 0000626D E8B6EE                  	call	UCase
 33602 00006270 AE                      	scasb
 33603 00006271 750D                    	jne	short Not_Matched
 33604 00006273 E2F7                    	loop	sse_next_char
 33605                                  	
 33606                                  ;	repz	cmpsb			; same name ?
 33607                                  ;	jnz	short Not_Matched	; no
 33608                                  
 33609 00006275 58                      	pop	ax			; take len off the stack
 33610                                  
 33611                                  ; M050 - END
 33612                                  
 33613 00006276 268B05                  	mov	AX,[ES:DI]		; get special version
 33614 00006279 36A3[BC0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33615                                  
 33616                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33617                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33618                                  
 33619 0000627D 5E                      	pop	SI
 33620 0000627E 59                      	pop	CX
 33621                                  	; 18/12/2022
 33622                                  	;jmp	SHORT End_List
 33623                                  
 33624                                  	; 18/12/2022
 33625                                  End_List:
 33626 0000627F C3                      	retn
 33627                                  
 33628                                  Not_Matched:
 33629 00006280 58                      	pop	ax			; get len from stack ; M050
 33630 00006281 5E                      	pop	SI			; restore si,cx
 33631 00006282 59                      	pop	CX
 33632                                  
 33633                                  SkipOne:
 33634 00006283 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33635 00006288 30E4                    	xor	AH,AH			; position to next entry
 33636 0000628A 01C7                    	add	DI,AX
 33637                                  
 33638 0000628C 83C703                  	add	DI,3			; DI -> next entry length
 33639                                  ;***	add	DI,4			; DI -> next entry length
 33640                                  
 33641 0000628F EBC7                    	jmp	short GetEntries
 33642                                  
 33643                                  	; 18/12/2022
 33644                                  ;End_List:
 33645                                  	;retn
 33646                                  
 33647                                  ; 04/08/2018 - Retro DOS v3.0
 33648                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33649                                  
 33650                                  ;----------------------------------------------------------------------------
 33651                                  ;SUBTTL Terminate and stay resident handler
 33652                                  ;
 33653                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33654                                  ;	    truncate the current block.
 33655                                  ;
 33656                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33657                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33658                                  ;	    and restoring the vectors.
 33659                                  ;
 33660                                  ;----------------------------------------------------------------------------
 33661                                  
 33662                                  	; 20/05/2019 - Retro DOS v4.0
 33663                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33664                                  
 33665                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33666                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33667                                  
 33668                                  _$KEEP_PROCESS:
 33669 00006291 50                      	push	AX			; keep exit code around
 33670                                  	;mov	byte [SS:EXIT_TYPE],3
 33671 00006292 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33672 00006298 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33673 0000629D 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33674 000062A0 7303                    	jae	short Keep_Shrink	; info
 33675                                  
 33676 000062A2 BA0600                  	mov	DX,6h
 33677                                  
 33678                                  Keep_Shrink:
 33679 000062A5 89D3                    	mov	BX,DX
 33680 000062A7 53                      	push	BX
 33681 000062A8 06                      	push	ES
 33682 000062A9 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33683 000062AC 1F                      	pop	DS
 33684 000062AD 5B                      	pop	BX
 33685 000062AE 7207                    	jc	short Keep_Done		; failed on modification
 33686                                  
 33687 000062B0 8CD8                    	mov	AX,DS
 33688 000062B2 01D8                    	add	AX,BX
 33689                                  	;mov	[2],ax
 33690 000062B4 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33691                                  
 33692                                  Keep_Done:
 33693 000062B7 58                      	pop	AX
 33694 000062B8 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33695                                  
 33696                                  ;----------------------------------------------------------------------------
 33697                                  ;
 33698                                  ;----------------------------------------------------------------------------
 33699                                  
 33700                                  STAY_RESIDENT:
 33701                                  	;mov	ax,3100h
 33702 000062BA B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33703 000062BD 83C20F                  	add	DX,15
 33704 000062C0 D1DA                    	rcr	DX,1
 33705 000062C2 B103                    	mov	CL,3
 33706 000062C4 D3EA                    	shr	DX,CL
 33707                                  
 33708 000062C6 E943A0                  	jmp	COMMAND
 33709                                  
 33710                                  ;----------------------------------------------------------------------------
 33711                                  ;SUBTTL $EXIT - return to parent process
 33712                                  ;   Assembler usage:
 33713                                  ;	    MOV     AL, code
 33714                                  ;	    MOV     AH, Exit
 33715                                  ;	    INT     int_command
 33716                                  ;   Error return:
 33717                                  ;	    None.
 33718                                  ;
 33719                                  ;----------------------------------------------------------------------------
 33720                                  
 33721                                  	; 20/05/2019 - Retro DOS v4.0
 33722                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33723                                  
 33724                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33725                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33726                                  _$EXIT:
 33727                                  	; 04/08/2018 - Retro DOS v3.0
 33728                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33729 000062C9 30E4                    	xor	AH,AH
 33730 000062CB 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33731 000062D0 08E4                    	or	AH,AH
 33732                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33733 000062D2 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33734 000062D8 7406                    	jz	short exit_inner
 33735                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33736 000062DA 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33737                                  
 33738                                  	;entry	Exit_inner
 33739                                  exit_inner:
 33740 000062E0 E8ACA1                  	call	Get_User_Stack		;PBUGBUG
 33741                                  
 33742 000062E3 36FF36[3003]            	push	word [ss:CurrentPDB]
 33743                                  	;pop	word [si+14h]
 33744 000062E8 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33745 000062EB EB08                    	jmp	short abort_inner
 33746                                  
 33747                                  ;BREAK <$ABORT -- Terminate a process>
 33748                                  ;----------------------------------------------------------------------------
 33749                                  ; Inputs:
 33750                                  ;	user_CS:00 must point to valid program header block
 33751                                  ; Function:
 33752                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33753                                  ;	to the terminate address
 33754                                  ; Returns:
 33755                                  ;	TO THE TERMINATE ADDRESS
 33756                                  ;----------------------------------------------------------------------------
 33757                                  
 33758                                  _$ABORT:
 33759 000062ED 30C0                    	xor	AL,AL
 33760                                  	;mov	byte [SS:EXIT_TYPE],0
 33761                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33762 000062EF 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33763                                  
 33764                                  	; abort_inner must have AL set as the exit code! The exit type
 33765                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33766                                  	; to be correct as the one that is terminating.
 33767                                  
 33768                                  abort_inner:
 33769 000062F5 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33770 000062FA 36A3[3403]              	mov	[SS:exit_code],AX
 33771 000062FE E88EA1                  	call	Get_User_Stack
 33772                                  
 33773                                  	;mov	ds,[si+14h]
 33774 00006301 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33775 00006304 31C0                    	xor	AX,AX
 33776 00006306 8EC0                    	mov	ES,AX
 33777                                  	;mov	si,10
 33778 00006308 BE0A00                  	mov	SI,SAVEXIT
 33779                                  	;mov	di,88h
 33780 0000630B BF8800                  	mov	DI,addr_int_terminate
 33781 0000630E A5                      	movsw
 33782 0000630F A5                      	movsw
 33783 00006310 A5                      	movsw
 33784 00006311 A5                      	movsw
 33785 00006312 A5                      	movsw
 33786 00006313 A5                      	movsw
 33787 00006314 E92AF2                  	jmp	reset_environment
 33788                                  
 33789                                  ;----------------------------------------------------------------------------
 33790                                  ;
 33791                                  ; fixexepatch will point to this is DOS loads low. 
 33792                                  ;
 33793                                  ;----------------------------------------------------------------------------
 33794                                  ; MSDOS 6.0
 33795                                  
 33796                                  ; 29/04/2019 - Retro DOS v4.0
 33797                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33798                                  
 33799                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33800                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33801                                  
 33802                                  RetExePatch: ; proc near
 33803                                  	
 33804 00006317 C3                      	retn
 33805                                  
 33806                                  ;============================================================================
 33807                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33808                                  ;============================================================================
 33809                                  ; 04/08/2018 - Retro DOS v3.0
 33810                                  ; 14/05/2019 - Retro DOS v4.0
 33811                                  
 33812                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33813                                  
 33814                                  ;**
 33815                                  ;	Microsoft Confidential
 33816                                  ;	Copyright (C) Microsoft Corporation 1991
 33817                                  ;	All Rights Reserved.
 33818                                  ;
 33819                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33820                                  ;	I/O specs are defined in DISPATCH.
 33821                                  ;
 33822                                  ;	$ALLOC
 33823                                  ;	$SETBLOCK
 33824                                  ;	$DEALLOC
 33825                                  ;	$AllocOper
 33826                                  ;	arena_free_process
 33827                                  ;	arena_next
 33828                                  ;	check_signature
 33829                                  ;	Coalesce
 33830                                  ;
 33831                                  ;	Modification history:
 33832                                  ;
 33833                                  ;	    Created: ARR 30 March 1983
 33834                                  ;
 33835                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33836                                  ;		      M003 - added support for link/unlink UMBs from
 33837                                  ;			     DOS arena chain. 7/18/90
 33838                                  ;		      M009 - Added error returns invalid function and 
 33839                                  ;			     arena trashed in set link state call.
 33840                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33841                                  ;			     if UMB_HEAD is initialized.
 33842                                  ;
 33843                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33844                                  ;			     support. Please see under M009 in 
 33845                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33846                                  ;
 33847                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33848                                  ;			     sure that umb_head arena is valid and also make
 33849                                  ;			     sure that the previous arena is pointing to 
 33850                                  ;			     umb_head.
 33851                                  ;
 33852                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33853                                  ;			     set allloc strategy.
 33854                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33855                                  ;			     bx in AllocSetStrat.
 33856                                  ;
 33857                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33858                                  ;			     a bit to indicate to dos dispatcher to turn
 33859                                  ;			     a20 off before iret. See M016.
 33860                                  ;
 33861                                  
 33862                                  ;	BREAK	<memory allocation utility routines>
 33863                                  
 33864                                  
 33865                                  ; 15/04/2018 - Retro DOS v2.0
 33866                                  ;----------------------------------------------------------------------------
 33867                                  ; xenix memory calls for MSDOS
 33868                                  ;
 33869                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33870                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33871                                  ;
 33872                                  ;INCLUDE DOSSEG.ASM
 33873                                  
 33874                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33875                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33876                                  
 33877                                  ;.xlist
 33878                                  ;.xcref
 33879                                  ;INCLUDE DOSSYM.ASM
 33880                                  ;INCLUDE DEVSYM.ASM
 33881                                  ;.cref
 33882                                  ;.list
 33883                                  
 33884                                  ;TITLE ALLOC.ASM - memory arena manager
 33885                                  ;NAME Alloc
 33886                                  
 33887                                  ;SUBTTL memory allocation utility routines
 33888                                  ;PAGE
 33889                                  ;
 33890                                  ; arena data
 33891                                  ;
 33892                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33893                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33894                                  ;       i_need  FirstArena,WORD         ; first free block found
 33895                                  ;       i_need  BestArena,WORD          ; best free block found
 33896                                  ;       i_need  LastArena,WORD          ; last free block found
 33897                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33898                                  
 33899                                  ;**	Arena_Free_Process
 33900                                  ;----------------------------------------------------------------------------
 33901                                  ;	Free all arena blocks allocated to a prOcess
 33902                                  ;
 33903                                  ;	ENTRY	(bx) = PID of process
 33904                                  ;	EXIT	none
 33905                                  ;	USES	????? BUGBUG
 33906                                  ;----------------------------------------------------------------------------
 33907                                  
 33908                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33909                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33910                                  
 33911                                  arena_free_process:
 33912                                  	; 14/05/2019 - Retro DOS v4.0
 33913                                  	; 04/08/2018 - Retro DOS v3.0
 33914 00006318 36A1[2400]                      MOV	AX,[SS:arena_head]
 33915                                  arena_free_process_start:
 33916 0000631C BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33917                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33918 0000631F E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33919                                  
 33920                                  arena_free_process_loop:
 33921                                          ;retc
 33922 00006322 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33923 00006324 06                      	PUSH    ES
 33924 00006325 1F                              POP     DS
 33925                                  	;cmp	[1],bx 
 33926 00006326 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33927 0000632A 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33928                                  	;mov	[1],di
 33929 0000632C 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33930                                  
 33931                                  arena_free_next:
 33932                                  	;cmp	byte [di],5Ah ;'Z'
 33933 00006330 803D5A                          CMP     BYTE [DI],arena_signature_end
 33934                                                                          ; end of road, Jack?
 33935                                          ;retz				; never come back no more
 33936                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33937                                  	; 14/05/2019
 33938                                  	; MSDOS 6.0
 33939 00006333 7405                    	jz	short arena_chk_umbs
 33940                                          
 33941 00006335 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33942 00006338 EBE8                            JMP     SHORT arena_free_process_loop
 33943                                  
 33944                                  	; MSDOS 6.0
 33945                                  arena_chk_umbs:				; M010 - Start
 33946                                  	; 20/05/2019
 33947 0000633A 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33948 0000633E 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33949 00006341 741E                    	je	short ret_label		; N: we're done
 33950                                  	
 33951 00006343 8CDF                    	mov	di,ds			; di = last arena
 33952 00006345 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33953 00006347 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33954 00006349 EBD1                    	jmp	short arena_free_process_start
 33955                                  					; M010 - End
 33956                                  ;AFP_RETN:
 33957                                  ;	RETN
 33958                                  
 33959                                  ;	BREAK	<Arena Helper Routines>
 33960                                  
 33961                                  ;**	Arena_Next - Find Next item in Arena
 33962                                  ;----------------------------------------------------------------------------
 33963                                  ;	ENTRY	DS - pointer to block head
 33964                                  ;		(di) = 0
 33965                                  ;	EXIT	AX,ES - pointers to next head
 33966                                  ;		'C' set iff arena damaged
 33967                                  ;----------------------------------------------------------------------------
 33968                                  
 33969                                  arena_next:
 33970 0000634B 8CD8                            MOV     AX,DS                   ; AX <- current block
 33971 0000634D 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33972 00006351 40                              INC     AX                      ; remember that header!
 33973                                  
 33974                                  ;       fall into check_signature and return
 33975                                  ;
 33976                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33977                                  ;       RETN
 33978                                  
 33979                                  ;**	Check_Signature - Check Memory Block Signature
 33980                                  ;----------------------------------------------------------------------------
 33981                                  ;	ENTRY	(AX) = address of block header
 33982                                  ;		(di) = 0
 33983                                  ;	EXIT	 ES = AX
 33984                                  ;		'C' clear if signature good
 33985                                  ;		'C' set if signature bad
 33986                                  ;	USES	ES, Flags
 33987                                  ;----------------------------------------------------------------------------
 33988                                  
 33989                                  check_signature:        
 33990                                  
 33991 00006352 8EC0                    	MOV     ES,AX                   ; ES <- AX
 33992                                  	;cmp	byte [es:di],4Dh ; 'M'
 33993 00006354 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 33994                                                                          ; IF next signature = not_end THEN
 33995 00006358 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 33996                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 33997 0000635A 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 33998                                                                          ; IF next signature = end then
 33999 0000635E 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34000 00006360 F9                              STC                             ; set error
 34001                                  ret_label: ; MSDOS 6.0
 34002                                  AFP_RETN:
 34003                                   	; Retro DOS v2.0 - 05/03/2018
 34004                                  check_signature_ok:
 34005                                  COALESCE_RETN:
 34006 00006361 C3                      	RETN
 34007                                  
 34008                                  ;**	Coalesce - Combine free blocks ahead with current block
 34009                                  ;----------------------------------------------------------------------------
 34010                                  ;	Coalesce adds the block following the argument to the argument block,
 34011                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34012                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34013                                  ;	preceeding allocated block.
 34014                                  ;
 34015                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34016                                  ;		(di) = 0
 34017                                  ;	EXIT	'C' clear if OK
 34018                                  ;		  (ds) unchanged, this block updated
 34019                                  ;		  (ax) = address of next block, IFF not at end
 34020                                  ;		'C' set if arena trashed
 34021                                  ;	USES	(cx)
 34022                                  ;----------------------------------------------------------------------------
 34023                                          
 34024                                  Coalesce:
 34025                                  	;cmp	byte [di],5Ah ; 'Z'
 34026 00006362 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34027                                                                          ; IF current signature = END THEN
 34028                                          ;retz				;   GOTO ok
 34029 00006365 74FA                            jz	short COALESCE_RETN
 34030 00006367 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34031                                          ;retc				; IF no error THEN GOTO check
 34032 0000636A 72F5                    	jc	short COALESCE_RETN
 34033                                  
 34034                                  coalesce_check:
 34035                                  	;cmp	[es:1],di
 34036 0000636C 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34037                                          ;retnz				; IF next block isnt free THEN return
 34038 00006371 75EE                            JNZ	SHORT COALESCE_RETN
 34039                                  	;mov	cx,[ES:3]
 34040 00006373 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34041 00006378 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34042                                          ;ADD	[3],CX
 34043 00006379 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34044 0000637D 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34045 00006380 880D                            MOV     [DI],CL
 34046 00006382 EBDE                            JMP     SHORT Coalesce		; try again
 34047                                  
 34048                                  ; 04/08/2018 - Retro DOS v3.0
 34049                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34050                                  
 34051                                  ;	BREAK  <$Alloc - allocate space in memory>
 34052                                  
 34053                                  ; MSDOS 6.0
 34054                                  ;----------------------------------------------------------------------------
 34055                                  ;**	$Alloc - Allocate Memory Space
 34056                                  ;
 34057                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34058                                  ;	Alloc returns a pointer to a free block of memory that
 34059                                  ;	has the requested size in paragraphs.
 34060                                  ;
 34061                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34062                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34063                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34064                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34065                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34066                                  ;
 34067                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34068                                  ;	starts from arena_head.
 34069                                  ;
 34070                                  ;	Assembler usage:
 34071                                  ;           MOV     BX,size
 34072                                  ;           MOV     AH,Alloc
 34073                                  ;           INT     21h
 34074                                  ;
 34075                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34076                                  ;	so that we start searching the arena at it's first non-trivial free
 34077                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34078                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34079                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34080                                  ;	verify that this is true; if so, this can stay as is
 34081                                  ;
 34082                                  ;	ENTRY	(bx) = requested size, in bytes
 34083                                  ;		(DS) = (ES) = DOSGROUP
 34084                                  ;	EXIT	'C' clear if memory allocated
 34085                                  ;		  (ax:0) = address of requested memory
 34086                                  ;		'C' set if request failed
 34087                                  ;		  (AX) = error_not_enough_memory
 34088                                  ;		    (bx) = max size we could have allocated
 34089                                  ;		  (ax) = error_arena_trashed
 34090                                  ;	USES	All
 34091                                  ;----------------------------------------------------------------------------
 34092                                  
 34093                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34094                                  ;----------------------------------------------------------------------------
 34095                                  ;SUBTTL $Alloc - allocate space in memory
 34096                                  ;
 34097                                  ;   Assembler usage:
 34098                                  ;           MOV     BX,size
 34099                                  ;           MOV     AH,Alloc
 34100                                  ;           INT     21h
 34101                                  ;         AX:0 is pointer to allocated memory
 34102                                  ;         BX is max size if not enough memory
 34103                                  ;
 34104                                  ;   Description:
 34105                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34106                                  ;       memory that has the requested  size  in  paragraphs.
 34107                                  ;
 34108                                  ;   Error return:
 34109                                  ;           AX = error_not_enough_memory
 34110                                  ;              = error_arena_trashed
 34111                                  ;----------------------------------------------------------------------------
 34112                                  
 34113                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34114                                  
 34115                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34116                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34117                                  
 34118                                  _$ALLOC:
 34119                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34120                                  	; 14/05/2019 - Retro DOS v4.0
 34121                                  	; 04/08/2018 - Retro DOS v3.0
 34122                                  	;EnterCrit critMem
 34123 00006384 E8D1AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34124                                  
 34125                                  ; 17/12/2022
 34126                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34127                                  ;%if 0
 34128                                  	; 14/05/2019
 34129 00006387 16                      	push	ss
 34130 00006388 1F                      	pop	ds
 34131                                  
 34132                                  	; MSDOS 6.0
 34133                                  	;mov	ax,[ss:arena_head]
 34134                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34135                                  
 34136 00006389 A1[2400]                	mov	ax,[arena_head]
 34137 0000638C A3[8E00]                	mov	[START_ARENA],ax			
 34138                                  	
 34139                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34140 0000638F F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34141                                  					; Q: should we start scanning from 
 34142                                  					;    UMB's
 34143 00006394 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34144                                  		
 34145                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34146                                  	;cmp	word [UMB_HEAD],-1
 34147                                  	;je	short norm_alloc	; N: scan from arena_head
 34148                                  
 34149                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34150 00006396 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34151 0000639B 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34152                                  	
 34153                                  	;mov	ax,[ss:UMB_HEAD]
 34154                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34155 0000639D A1[8C00]                	mov	ax,[UMB_HEAD]
 34156 000063A0 A3[8E00]                	mov	[START_ARENA],ax
 34157                                  					; M000 - end
 34158                                  norm_alloc:
 34159 000063A3 31C0                            XOR     AX,AX
 34160 000063A5 89C7                            MOV     DI,AX
 34161                                  	; 15/03/2018
 34162                                          ;MOV	[SS:FirstArena],AX	; init the options
 34163                                          ;MOV	[SS:BestArena],AX
 34164                                          ;MOV	[SS:LastArena],AX
 34165                                  	; 14/05/2019
 34166 000063A7 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34167 000063AA A3[4203]                        MOV	[BestArena],AX
 34168 000063AD A3[4403]                        MOV	[LastArena],AX
 34169 000063B0 50                              PUSH    AX                      ; alloc_max <- 0
 34170                                  	; 04/08/2018
 34171                                  start_scan:
 34172                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34173                                  	;MOV	AX,[arena_head]
 34174                                  
 34175                                  	; 14/05/2019	
 34176                                  	; MSDOS 6.0
 34177                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34178 000063B1 A1[8E00]                	mov	ax,[START_ARENA]
 34179                                  
 34180 000063B4 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34181 000063B7 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34182                                  
 34183                                  ;%endif
 34184                                  
 34185                                  ; 17/12/2022
 34186                                  %if 0
 34187                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34188                                  
 34189                                  	; MSDOS 6.0
 34190                                  	mov	ax,[ss:arena_head]
 34191                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34192                                  
 34193                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34194                                  					; Q: should we start scanning from 
 34195                                  					;    UMB's
 34196                                  	jz	short norm_alloc	; N: scan from arena_head
 34197                                  		
 34198                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34199                                  	;je	short norm_alloc	; N: scan from arena_head
 34200                                  
 34201                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34202                                  	jz	short norm_alloc	; N: scan from arena_head
 34203                                  	
 34204                                  	mov	ax,[ss:UMB_HEAD]
 34205                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34206                                  					; M000 - end
 34207                                  norm_alloc:
 34208                                          XOR     AX,AX
 34209                                          MOV     DI,AX
 34210                                  	; 15/03/2018
 34211                                  	MOV	[SS:FirstArena],AX	; init the options
 34212                                  	MOV	[SS:BestArena],AX
 34213                                  	MOV	[SS:LastArena],AX
 34214                                          PUSH    AX                      ; alloc_max <- 0
 34215                                  	; 04/08/2018
 34216                                  start_scan:
 34217                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34218                                  	; 14/05/2019	
 34219                                  	; MSDOS 6.0
 34220                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34221                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34222                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34223                                  %endif
 34224                                  
 34225                                  alloc_scan:
 34226 000063B9 06                              PUSH    ES
 34227 000063BA 1F                              POP     DS                      ; DS <- ES
 34228 000063BB 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34229 000063BF 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34230                                  
 34231                                  alloc_next:
 34232                                  	; MSDOS 6.0			; M000 - start 
 34233 000063C1 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34234 000063C7 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34235                                  	
 34236 000063C9 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34237                                  					; Q: is alloc strategy high_first
 34238 000063CF 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34239 000063D1 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34240 000063D5 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34241                                  					;    arena_head
 34242 000063DA 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34243 000063DC 8CD8                    	mov	ax,ds			; ax = current block
 34244 000063DE 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34245 000063E3 EB03                    	jmp	short alloc_chk_end
 34246                                  
 34247                                  norm_strat:
 34248                                  	;cmp	byte [di],5Ah ; 'Z'
 34249 000063E5 803D5A                          CMP     BYTE [DI],arena_signature_end
 34250                                                                          ; IF current block is last THEN
 34251                                  alloc_chk_end:
 34252 000063E8 740E                            JZ      SHORT alloc_end		;   GOTO end
 34253 000063EA E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34254 000063ED 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34255                                  
 34256                                  alloc_err:
 34257 000063EF 58                              POP     AX
 34258                                  
 34259                                  alloc_trashed:
 34260                                  	;LeaveCrit critMem
 34261 000063F0 E880AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34262                                          ;error	error_arena_trashed
 34263                                  	;mov	al,7
 34264 000063F3 B007                    	MOV	AL,error_arena_trashed
 34265                                  alloc_errj:
 34266 000063F5 E95AA2                  	JMP	SYS_RET_ERR
 34267                                  
 34268                                  alloc_end:
 34269                                  	; 18/05/2019
 34270 000063F8 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34271 000063FE 7403                    	jz	short alloc_chk 
 34272 00006400 E98400                  	jmp	alloc_do_split
 34273                                  
 34274                                  alloc_chk:
 34275                                  	; MSDOS 6.0
 34276 00006403 36A1[2400]              	mov	ax,[ss:arena_head]
 34277 00006407 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34278 0000640C 740E                    	je	short alloc_fail	; Y: not enough memory
 34279                                  					; N:
 34280                                  					; Q: is the alloc strat HIGH_ONLY
 34281 0000640E 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34282 00006414 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34283                                  	
 34284 00006416 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34285 0000641A EB95                    	jmp	short start_scan
 34286                                  					; M000 - end
 34287                                  
 34288                                  alloc_fail:
 34289                                          ;invoke Get_User_Stack
 34290 0000641C E870A0                          CALL	Get_User_Stack
 34291 0000641F 5B                      	POP     BX
 34292                                          ;MOV	[SI].user_BX,BX
 34293                                  	;MOV	[SI+2],BX
 34294 00006420 895C02                  	mov	[SI+user_env.user_BX],bx
 34295                                  	;LeaveCrit critMem
 34296 00006423 E84DAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34297                                  	;error	error_not_enough_memory
 34298                                  	;mov	al,8
 34299 00006426 B008                    	MOV	AL,error_not_enough_memory
 34300                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34301 00006428 EBCB                    	jmp	short alloc_errj
 34302                                  	;JMP	SYS_RET_ERR
 34303                                  
 34304                                  alloc_free:
 34305 0000642A E835FF                          CALL    Coalesce		; add following free block to current
 34306 0000642D 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34307 0000642F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34308 00006433 5A                              POP     DX                      ; check for max found size
 34309 00006434 39D1                            CMP     CX,DX
 34310 00006436 7602                            JNA     SHORT alloc_test
 34311 00006438 89CA                            MOV     DX,CX
 34312                                  
 34313                                  alloc_test:
 34314 0000643A 52                              PUSH    DX
 34315 0000643B 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34316 0000643D 7782                    	JA      SHORT alloc_next	;   GOTO next
 34317                                  
 34318                                  	; 15/03/2018
 34319 0000643F 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34320 00006445 7505                    	JNZ	SHORT alloc_best
 34321 00006447 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34322                                  alloc_best:
 34323 0000644C 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34324 00006452 740E                            JZ      SHORT alloc_make_best	; initial best
 34325 00006454 06                              PUSH	ES
 34326 00006455 368E06[4203]                    MOV     ES,[SS:BestArena]
 34327 0000645A 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34328 0000645F 07                              POP	ES
 34329 00006460 7605                            JBE     SHORT alloc_last
 34330                                  alloc_make_best:
 34331 00006462 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34332                                  alloc_last:
 34333 00006467 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34334 0000646C E952FF                          JMP     alloc_next
 34335                                  ;
 34336                                  ; split the block high
 34337                                  ;
 34338                                  alloc_do_split_high:
 34339 0000646F 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34340 00006474 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34341 00006478 29D9                            SUB     CX,BX
 34342 0000647A 8CDA                            MOV     DX,DS
 34343 0000647C 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34344 0000647E 01CA                            ADD     DX,CX                   ; point to next block
 34345 00006480 8EC2                            MOV     ES,DX                   ; no decrement!
 34346 00006482 49                              DEC     CX
 34347 00006483 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34348 00006485 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34349                                  ;
 34350                                  ; we have scanned memory and have found all appropriate blocks
 34351                                  ; check for the type of allocation desired; first and best are identical
 34352                                  ; last must be split high
 34353                                  ;
 34354                                  alloc_do_split:
 34355                                  
 34356                                  ; 17/12/2022
 34357                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34358                                  ;%if 0
 34359                                  	; 14/05/2019
 34360                                  	; MSDOS 6.0			; M000 - start
 34361                                  	;xor	cx,cx
 34362 00006487 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34363                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34364 0000648C 80E13F                  	and	cl,3Fh
 34365                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34366 0000648F 80F901                  	cmp	cl,BEST_FIT
 34367 00006492 77DB                    	ja	short alloc_do_split_high
 34368                                  ;%endif
 34369                                  
 34370                                  	; 17/12/2022
 34371                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34372                                  	; MSDOS 6.0 & MSDOS 5.0
 34373                                  	;xor	cx,cx
 34374                                  	;mov	cl,[ss:AllocMethod]
 34375                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34376                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34377                                  	;ja	short alloc_do_split_high
 34378                                  
 34379                                  	; 15/03/2018
 34380                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34381                                  	; 04/08/2018
 34382                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34383                                          ;JA	SHORT alloc_do_split_high
 34384                                          
 34385 00006494 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34386 00006499 7205                    	JB      SHORT alloc_get_size
 34387 0000649B 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34388                                  
 34389                                  alloc_get_size:
 34390 000064A0 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34391 000064A4 29D9                            SUB     CX,BX                   ; get room left over
 34392 000064A6 8CD8                            MOV     AX,DS
 34393 000064A8 89C2                            MOV     DX,AX                   ; save for owner setting
 34394 000064AA 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34395 000064AC 01D8                            ADD     AX,BX
 34396 000064AE 40                              INC     AX                      ; remember the header
 34397 000064AF 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34398 000064B1 49                              DEC     CX                      ; CX <- size of split block
 34399                                  alloc_set_sizes:
 34400 000064B2 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34401 000064B6 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34402                                  	;mov	bl,4Dh ; 'M'
 34403 000064BB B34D                            MOV     BL,arena_signature_normal
 34404 000064BD 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34405 000064BF 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34406 000064C2 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34407                                  
 34408                                  alloc_set_owner:
 34409 000064C7 8EDA                            MOV     DS,DX
 34410 000064C9 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34411 000064CD A30100                          MOV     [ARENA.OWNER],AX
 34412 000064D0 8CD8                            MOV     AX,DS
 34413 000064D2 40                              INC     AX
 34414 000064D3 5B                              POP     BX
 34415                                  	;LeaveCrit critMem
 34416 000064D4 E89CAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34417                                  	
 34418                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34419                                  alloc_ok:
 34420                                          ;transfer SYS_RET_OK
 34421 000064D7 E96FA1                  	JMP	SYS_RET_OK
 34422                                  
 34423                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34424                                  
 34425                                  ; MSDOS 6.0
 34426                                  ;----------------------------------------------------------------------------
 34427                                  ;**	$SETBLOCK - Change size of an Alocated Block
 34428                                  ;
 34429                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34430                                  ;	any following free space onto this block; then we try to trim the
 34431                                  ;	block down to the size requested.
 34432                                  ;
 34433                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34434                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34435                                  ;	Thus the maximum-size-possible value that we return has already
 34436                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34437                                  ;
 34438                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34439                                  ;		finish it's work.  FOr this reason we build the allocsf
 34440                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34441                                  ;		code.
 34442                                  ;
 34443                                  ;	ENTRY	(es) = segment of old block
 34444                                  ;		(bx) = newsize
 34445                                  ;		(ah) = SETBLOCK
 34446                                  ;
 34447                                  ;	EXIT	'C' clear if OK
 34448                                  ;		'C' set if error
 34449                                  ;		  (ax) = error_invalid_block
 34450                                  ;		       = error_arena_trashed
 34451                                  ;		       = error_not_enough_memory
 34452                                  ;		       = error_invalid_function
 34453                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34454                                  ;	USES	???? BUGBUG
 34455                                  ;----------------------------------------------------------------------------
 34456                                  
 34457                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34458                                  ;----------------------------------------------------------------------------
 34459                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34460                                  ;
 34461                                  ;   Assembler usage:
 34462                                  ;           MOV     ES,block
 34463                                  ;           MOV     BX,newsize
 34464                                  ;           MOV     AH,setblock
 34465                                  ;           INT     21h
 34466                                  ;         if setblock fails for growing, BX will have the maximum
 34467                                  ;         size possible
 34468                                  ;   Error return:
 34469                                  ;           AX = error_invalid_block
 34470                                  ;              = error_arena_trashed
 34471                                  ;              = error_not_enough_memory
 34472                                  ;              = error_invalid_function
 34473                                  ;----------------------------------------------------------------------------
 34474                                  
 34475                                  _$SETBLOCK:        
 34476                                  	; 04/08/2018 - Retro DOS v3.0
 34477                                  	;EnterCrit   critMem
 34478 000064DA E87BAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34479                                  
 34480 000064DD BF0000                  	MOV     DI,ARENA.SIGNATURE
 34481 000064E0 8CC0                            MOV     AX,ES
 34482 000064E2 48                              DEC     AX
 34483 000064E3 E86CFE                          CALL    check_signature
 34484 000064E6 7303                            JNC     SHORT setblock_grab
 34485                                  
 34486                                  setblock_bad:
 34487 000064E8 E905FF                          JMP     alloc_trashed
 34488                                  
 34489                                  setblock_grab:
 34490 000064EB 8ED8                            MOV     DS,AX
 34491 000064ED E872FE                          CALL    Coalesce
 34492 000064F0 72F6                            JC      SHORT setblock_bad
 34493 000064F2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34494 000064F6 51                              PUSH    CX
 34495 000064F7 39CB                            CMP     BX,CX
 34496 000064F9 76A5                            JBE     SHORT alloc_get_size
 34497 000064FB E91EFF                          JMP     alloc_fail
 34498                                  
 34499                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34500                                  
 34501                                  ; MSDOS 6.0
 34502                                  ;----------------------------------------------------------------------------
 34503                                  ;**	$DEALLOC - Free Heap Memory
 34504                                  ;
 34505                                  ;	ENTRY	(es) = address of item
 34506                                  ;
 34507                                  ;	EXIT	'C' clear of OK
 34508                                  ;		'C' set if error
 34509                                  ;		  (AX) = error_invalid_block
 34510                                  ;	USES	???? BUGBUG
 34511                                  
 34512                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34513                                  ;----------------------------------------------------------------------------
 34514                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34515                                  ;
 34516                                  ;   Assembler usage:
 34517                                  ;           MOV     ES,block
 34518                                  ;           MOV     AH,dealloc
 34519                                  ;           INT     21h
 34520                                  ;
 34521                                  ;   Error return:
 34522                                  ;           AX = error_invalid_block
 34523                                  ;              = error_arena_trashed
 34524                                  ;---------------------------------------------------------------------------- 
 34525                                  
 34526                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34527                                  _$DEALLOC:
 34528                                  	; 14/05/2019 - Retro DOS v4.0    
 34529                                  	; 04/08/2018 - Retro DOS v3.0
 34530                                  	;EnterCrit   critMem
 34531 000064FE E857AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34532                                  
 34533                                  	; MSDOS 6.0			; M016, M068 - Start
 34534 00006501 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34535                                  					; Q: was the previous call an int 21
 34536                                  					;    exec call
 34537 00006507 740E                    	jz	short deallocate	; N: continue
 34538 00006509 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34539 0000650F 7506                    	jne	short deallocate	; N: continue
 34540 00006511 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34541                                  deallocate:				; M016, M068 - End
 34542 00006517 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34543 0000651A 8CC0                            MOV     AX,ES
 34544 0000651C 48                              DEC     AX
 34545 0000651D E832FE                          CALL    check_signature
 34546 00006520 720A                            JC      SHORT dealloc_err
 34547 00006522 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34548                                  	;LeaveCrit critMem
 34549 00006527 E849AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34550                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34551                                          ;transfer SYS_RET_OK
 34552                                  dealloc_ok:
 34553 0000652A EBAB                    	jmp	short alloc_ok
 34554                                  	;JMP	SYS_RET_OK
 34555                                  
 34556                                  dealloc_err:
 34557                                  	;LeaveCrit critMem
 34558 0000652C E844AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34559                                          ;error	error_invalid_block
 34560                                  	;mov	al,9
 34561 0000652F B009                    	MOV	AL,error_invalid_block
 34562                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34563                                  dealloc_errj:
 34564                                  AllocOperErrj:	; 17/12/2022
 34565 00006531 E91EA1                  	JMP	SYS_RET_ERR
 34566                                  
 34567                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34568                                  
 34569                                  ; MSDOS 6.0
 34570                                  ;----------------------------------------------------------------------------
 34571                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34572                                  ;
 34573                                  ;	Assembler usage:
 34574                                  ;           MOV     AH,AllocOper
 34575                                  ;           MOV     BX,method
 34576                                  ;           MOV     AL,func
 34577                                  ;           INT     21h
 34578                                  ;
 34579                                  ;	ENTRY	
 34580                                  ;		(al) = 0
 34581                                  ;		  Get allocation Strategy in (ax)
 34582                                  ;
 34583                                  ;		(al) = 1, (bx) = method = zw0000xy
 34584                                  ;		  Set allocation strategy.
 34585                                  ;		   w  = 1  => HIGH_ONLY
 34586                                  ;		   z  = 1  => HIGH_FIRST
 34587                                  ;		   xy = 00 => FIRST_FIT
 34588                                  ;		      = 01 => BEST_FIT
 34589                                  ;		      = 10 => LAST_FIT
 34590                                  ;
 34591                                  ;		(al) = 2
 34592                                  ;		  Get UMB link state in (al)
 34593                                  ;
 34594                                  ;		(al) = 3
 34595                                  ;		  Set UMB link state
 34596                                  ;		   (bx) = 0 => Unlink UMBs
 34597                                  ;		   (bx) = 1 => Link UMBs
 34598                                  ;
 34599                                  ;
 34600                                  ;	EXIT	'C' clear if OK
 34601                                  ;
 34602                                  ;		 if (al) = 0
 34603                                  ;		  (ax) = existing method
 34604                                  ;		 if (al) = 1
 34605                                  ;		  Sets allocation strategy
 34606                                  ;		 if (al) = 2
 34607                                  ;		  (al) = 0 => UMBs not linked
 34608                                  ;		  (al) = 1 => UMBs linked in
 34609                                  ;		 if (al) = 3
 34610                                  ;		  Links/Unlinks the UMBs into DOS chain
 34611                                  ;
 34612                                  ;		'C' set if error
 34613                                  ;		  AX = error_invalid_function
 34614                                  ;
 34615                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34616                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34617                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34618                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34619                                  ;		    arena' if an arena sig is damaged.
 34620                                  ;----------------------------------------------------------------------------
 34621                                  
 34622                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34623                                  ;----------------------------------------------------------------------------
 34624                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34625                                  ;
 34626                                  ;   Assembler usage:
 34627                                  ;           MOV     AH,AllocOper
 34628                                  ;           MOV     BX,method
 34629                                  ;           MOV     AL,func
 34630                                  ;           INT     21h
 34631                                  ;
 34632                                  ;   Error return:
 34633                                  ;           AX = error_invalid_function
 34634                                  ;----------------------------------------------------------------------------
 34635                                  
 34636                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34637                                  _$ALLOCOPER:
 34638                                  	; 14/05/2019 - Retro DOS v4.0
 34639                                  	; MSDOS 6.0
 34640 00006534 08C0                    	or	al,al ; 0
 34641 00006536 741E                    	jz	short AllocGetStrat
 34642                                  	; 17/12/2022
 34643                                  	;cmp	al,1
 34644                                  	;jz	short AllocSetStrat
 34645                                  
 34646                                  	; 01/12/2022
 34647                                  	;cmp	al, 2
 34648                                  	;jb	short AllocSetStrat
 34649                                  	;ja	short AllocSetLink
 34650                                  	;;jmp	short AllocGetLink
 34651                                  ;AllocGetLink:
 34652                                  	; MSDOS 6.0
 34653                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34654                                  	;and 	al,LINKSTATE		
 34655                                  	;;transfer SYS_RET_OK
 34656                                  	;jmp	SYS_RET_OK
 34657                                  
 34658 00006538 3C02                    	cmp	al,2
 34659                                  	; 17/12/2022
 34660 0000653A 7223                    	jb	short AllocSetStrat ; al = 1
 34661 0000653C 7432                    	je	short AllocGetLink
 34662                                  
 34663                                  	;cmp	al,2
 34664                                  	;jz	short AllocGetLink
 34665 0000653E 3C03                    	cmp	al,3
 34666 00006540 7436                    	jz	short AllocSetLink
 34667                                  
 34668                                  	; 15/04/2018
 34669                                  	;CMP	AL,1
 34670                                          ;JB	SHORT AllocOperGet
 34671                                          ;JZ	SHORT AllocOperSet
 34672                                  
 34673                                  AllocOperError:
 34674                                  	; 04/08/2018 - Retro DOS v3.0
 34675                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34676                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34677 00006542 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34678                                  	;error	error_invalid_function
 34679                                  	;mov	al,1
 34680 00006548 B001                    	MOV	AL,error_invalid_function
 34681                                  	; 17/12/2022
 34682                                  ;AllocOperErrj:
 34683                                  	;JMP	SYS_RET_ERR
 34684                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34685                                  	;jmp	short dealloc_errj
 34686                                  	; 17/12/2022
 34687 0000654A EBE5                    	jmp	short AllocOperErrj
 34688                                  
 34689                                  AllocArenaError:
 34690                                  	; MSDOS 6.0
 34691 0000654C 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34692                                  					; M009: Extended Error Locus
 34693                                  	;error	error_arena_trashed	; M009:
 34694                                  	;mov	al,7
 34695 00006552 B007                    	MOV	AL,error_arena_trashed
 34696                                  	;JMP	SYS_RET_ERR
 34697 00006554 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34698                                  
 34699                                  AllocGetStrat: 
 34700                                  	; MSDOS 6.0
 34701                                  AllocOperGet:
 34702 00006556 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34703 0000655A 30E4                            XOR     AH,AH
 34704                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34705                                  	;transfer SYS_RET_OK
 34706                                  AllocOperOk:
 34707                                  	; 17/12/2022
 34708                                  	;jmp	short dealloc_ok
 34709 0000655C E9EAA0                  	JMP	SYS_RET_OK
 34710                                  
 34711                                  AllocSetStrat: 
 34712                                  	; 14/05/2019
 34713                                  	; MSDOS 6.0
 34714 0000655F 53                      	push	bx			; M000 - start
 34715                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34716                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34717                                  	; 17/12/2022
 34718 00006560 80E33F                  	and	bl,3Fh
 34719 00006563 83FB02                  	cmp	bx,2			; BX must be 0-2
 34720                                  	;cmp	bl,2
 34721 00006566 5B                      	pop	bx			; M000 - end
 34722 00006567 77D9                    	ja	short AllocOperError
 34723                                  
 34724                                  AllocOperSet:
 34725 00006569 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34726                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34727                                  	;transfer SYS_RET_OK
 34728                                  AllocOperOkj:
 34729 0000656E EBEC                    	jmp	short AllocOperOk
 34730                                  	;JMP	SYS_RET_OK
 34731                                  
 34732                                  AllocGetLink:
 34733                                  	; MSDOS 6.0
 34734 00006570 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34735                                  	;and	al,1
 34736 00006574 2401                    	and 	al,LINKSTATE		
 34737                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34738                                  	;transfer SYS_RET_OK
 34739                                  AllocOperOkj2:
 34740                                  	; 17/12/2022
 34741 00006576 EBE4                    	jmp	short AllocOperOk
 34742                                  	;jmp	short AllocOperOkj
 34743                                  	;;JMP	SYS_RET_OK
 34744                                  
 34745                                  AllocSetLink:
 34746                                  	; MSDOS 6.0			; M009 - start
 34747 00006578 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34748 0000657D 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34749 00006580 74C0                    	je	short AllocOperError	; N: error
 34750                                  					; Y: continue
 34751                                  					; M009 - end
 34752 00006582 83FB01                  	cmp	bx,1			
 34753 00006585 7204                    	jb	short UnlinkUmbs
 34754 00006587 741C                    	jz	short LinkUmbs
 34755                                  	
 34756 00006589 EBB7                    	jmp	short AllocOperError
 34757                                  	
 34758                                  UnlinkUmbs:
 34759                                  	;test	byte [ss:UMBFLAG],1
 34760 0000658B 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34761 00006591 7410                    	jz	short unlinked		; Y: return 
 34762                                  	
 34763 00006593 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34764 00006596 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34765                                  	
 34766                                  					; make it last
 34767 00006598 C60600005A              	mov	byte [0],arena_signature_end
 34768                                  	
 34769                                  	;and	byte [ss:UMBFLAG],0FEh
 34770 0000659D 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34771                                  	
 34772                                  unlinked:
 34773                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34774                                  	;transfer SYS_RET_OK
 34775                                  	; 17/12/2022
 34776 000065A3 EBB7                    	jmp	short AllocOperOk
 34777                                  	;jmp	short AllocOperOkj2
 34778                                  	;;JMP	SYS_RET_OK
 34779                                  
 34780                                  LinkUmbs:
 34781 000065A5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34782 000065AB 7510                    	jnz	short linked		; Y: return
 34783                                  	
 34784 000065AD E80F00                  	call	GetLastArena		; get arena before umb_head
 34785 000065B0 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34786                                  	
 34787                                  					; make it normal. M061: ds points to
 34788                                  					; arena before umb_head
 34789 000065B2 C60600004D              	mov	byte [0],arena_signature_normal
 34790                                  	
 34791 000065B7 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34792                                  linked:
 34793                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34794                                  	;transfer SYS_RET_OK
 34795                                  	; 17/12/2022
 34796 000065BD EB9D                    	jmp	short AllocOperOk
 34797                                  	;jmp	short unlinked
 34798                                  	;;JMP	SYS_RET_OK
 34799                                  
 34800                                  ; MSDOS 6.0
 34801                                  ;--------------------------------------------------------------------------
 34802                                  ; Procedure Name : GetLastArena		-  M003
 34803                                  ;
 34804                                  ; Inputs	 : cx = umb_head
 34805                                  ;
 34806                                  ;
 34807                                  ; Outputs	 : If UMBs are linked
 34808                                  ;			ES = umb_head
 34809                                  ;			DS = arena before umb_head
 34810                                  ;		   else
 34811                                  ;			DS = last arena
 34812                                  ;			ES = next arena. will be umb_head if NC.
 34813                                  ;
 34814                                  ;		   CY if error
 34815                                  ;
 34816                                  ; Uses		 : DS, ES, DI, BX
 34817                                  ;--------------------------------------------------------------------------
 34818                                  
 34819                                  ; 14/05/2019 - Retro DOS v4.0
 34820                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34821                                  
 34822                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34823                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34824                                  	
 34825                                  GetLastArena:
 34826 000065BF 50                      	push	ax			; save ax
 34827                                  
 34828 000065C0 36A1[2400]              	mov	ax,[ss:arena_head]
 34829 000065C4 8EC0                    	mov	es,ax			; es = arena_head
 34830 000065C6 31FF                    	xor	di,di
 34831                                  
 34832 000065C8 26803D5A                	cmp     byte [es:di],arena_signature_end
 34833                                  					; Q: is this the last arena
 34834 000065CC 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34835                                  					
 34836                                  GLA_next:
 34837 000065CE 8ED8                    	mov	ds,ax
 34838 000065D0 E878FD                  	call	arena_next		; ax, es -> next arena
 34839                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34840                                  	;jc	short GLA_err
 34841                                  	; 17/12/2022
 34842 000065D3 7228                    	jc	short GLA_err2
 34843                                  
 34844 000065D5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34845 000065DB 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34846                                  					;    umb_head
 34847                                  					; N: terminating condition is 05Ah
 34848                                  
 34849 000065DD 26803D5A                	cmp     byte [es:di],arena_signature_end
 34850                                  					; Q: is this the last arena
 34851 000065E1 EB02                    	jmp	short GLA_@f
 34852                                  GLA_chkumb:
 34853 000065E3 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34854                                  GLA_@f:
 34855 000065E5 75E7                    	jne	short GLA_next		; N: get next arena
 34856                                  
 34857                                  GLA_done:
 34858                                  					; M061 - Start
 34859 000065E7 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34860 000065ED 750B                    	jnz	short GLA_ret		; Y: we're done
 34861                                  					; N: let us confirm that the next 
 34862                                  					;    arena is umb_head
 34863 000065EF 8ED8                    	mov	ds,ax
 34864 000065F1 E857FD                  	call	arena_next		; ax, es -> next arena
 34865                                  	;jc	short GLA_err
 34866 000065F4 7207                    	jc	short GLA_err2
 34867 000065F6 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34868 000065F8 7502                    	jne	short GLA_err		; N: error
 34869                                  					; M061 - End
 34870                                  GLA_ret:
 34871                                  	; 17/12/2022				
 34872                                  	;clc
 34873                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34874                                  	;clc
 34875 000065FA 58                      	pop	ax			; M061
 34876 000065FB C3                      	retn				; M061
 34877                                  
 34878                                  GLA_err:
 34879 000065FC F9                      	stc				; M061
 34880                                  GLA_err2:
 34881 000065FD 58                      	pop	ax
 34882 000065FE C3                      	retn
 34883                                  
 34884                                  ;============================================================================
 34885                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34886                                  ;============================================================================
 34887                                  ; 04/08/2018 - Retro DOS v3.0
 34888                                  
 34889                                  ;	TITLE SRVCALL - Server DOS call
 34890                                  ;	NAME  SRVCALL
 34891                                  
 34892                                  ;**	SRVCALL.ASM - Server DOS call functions
 34893                                  ;
 34894                                  ;
 34895                                  ;	$ServerCall
 34896                                  ;
 34897                                  ;	Modification history:
 34898                                  ;
 34899                                  ;	    Created: ARR 08 August 1983
 34900                                  
 34901                                  ;AsmVars <Installed>
 34902                                  
 34903                                  ;include dpl.asm
 34904                                  
 34905                                  ;Installed = TRUE
 34906                                  
 34907                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34908                                  ; ---------------------------------------------------------------------------
 34909                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34910                                  
 34911                                  ;BREAK <ServerCall -- Server DOS call>
 34912                                  
 34913                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34914                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34915                                  
 34916                                  ;hkn; TABLE	SEGMENT
 34917                                  ;Public SRVC001S,SRVC001E
 34918                                  ;SRVC001S label byte
 34919                                  
 34920                                  SRVC001S:
 34921                                  
 34922 000065FF [0366]                  SERVERTAB:	dw	SERVER_DISP
 34923 00006601 [5566]                  SERVERLEAVE:	dw	SERVERRETURN
 34924 00006603 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34925 00006604 [BD66]                  		dw	SRV_CALL	; 0
 34926 00006606 [5666]                  		dw	COMMIT_ALL	; 1
 34927 00006608 [8C66]                  		dw	CLOSE_NAME	; 2
 34928 0000660A [9766]                  		dw	CLOSE_UID	; 3
 34929 0000660C [9E66]                  		dw	CLOSE_UID_PID	; 4
 34930 0000660E [A566]                  		dw	GET_LIST	; 5
 34931 00006610 [FE66]                  		dw	GET_DOS_DATA	; 6
 34932 00006612 [2267]                  		dw	SPOOL_OPER	; 7
 34933 00006614 [2267]                  		dw	SPOOL_OPER	; 8
 34934 00006616 [2267]                  		dw	SPOOL_OPER	; 9
 34935 00006618 [2E67]                  		dw	_$SetExtendedError  ; 10
 34936                                  
 34937                                  SERVER_DISP_END:  ;  LABEL BYTE
 34938                                  
 34939                                  ;SRVC001E label byte
 34940                                  
 34941                                  SRVC001E:
 34942                                  
 34943                                  ;hkn; TABLE	ENDS
 34944                                  
 34945                                  ;----------------------------------------------------------------------------
 34946                                  ;
 34947                                  ; Procedure Name : $ServerCall
 34948                                  ;
 34949                                  ; Inputs:
 34950                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34951                                  ; Function:
 34952                                  ;	AL=0	Server DOS call
 34953                                  ;	AL=1	Commit All files
 34954                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34955                                  ;	AL=3	Close all files for DPL_UID
 34956                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34957                                  ;	AL=5	Get open file list entry
 34958                                  ;		    IN: BX File Index
 34959                                  ;			CX User Index
 34960                                  ;		    OUT:ES:DI -> Name
 34961                                  ;			BX = UID
 34962                                  ;		    CX = # locked blocks held by this UID
 34963                                  ;	AL=6	Get DOS data area
 34964                                  ;		    OUT: DS:SI -> Start
 34965                                  ;			CX size in bytes of swap if indos
 34966                                  ;			DX size in bytes of swap always
 34967                                  ;	AL=7	Get truncate flag
 34968                                  ;	AL=8	Set truncate flag
 34969                                  ;	AL=9	Close all spool files
 34970                                  ;	AL=10	SetExtendedError
 34971                                  ;
 34972                                  ;----------------------------------------------------------------------------
 34973                                  
 34974                                  _$ServerCall:
 34975                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34976                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 34977                                  	; 10/06/2019
 34978                                  	; 29/04/2019 - Retro DOS v4.0
 34979                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 34980                                  
 34981                                  	; 05/08/2018 - Retro DOS v3.0
 34982                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 34983 0000661A 3C07                    	CMP	AL,7
 34984 0000661C 7204                    	JB	short SET_STUFF
 34985 0000661E 3C09                    	CMP	AL,9
 34986 00006620 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 34987                                  SET_STUFF:
 34988 00006622 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 34989                                  	;mov	bx,[si+12h]
 34990 00006624 8B5C12                  	MOV	BX,[SI+DPL.UID]
 34991                                  
 34992                                  	; MSDOS 6.0
 34993                                  ;SR;
 34994                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 34995                                  ; of USER_ID
 34996                                  
 34997 00006627 36F606[2F10]01          	test	byte [SS:IsWin386],1
 34998 0000662D 7505                    	jnz	short skip_win386
 34999                                  
 35000                                  ;hkn; SS override for user_id and proc_id
 35001                                  	; 15/08/2018
 35002 0000662F 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35003                                  
 35004                                  skip_win386:
 35005 00006634 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35006 00006637 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35007                                  NO_SET_ID:
 35008                                  	; 10/06/2019 - Retro DOS v4.0
 35009 0000663C 2EFF36[0166]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35010 00006641 2EFF36[FF65]            	PUSH	word [cS:SERVERTAB]	; push table address
 35011 00006646 50                      	PUSH	AX
 35012 00006647 E81EAC                  	call	TableDispatch
 35013                                  
 35014                                  ;hkn; SS override
 35015                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35016 0000664A 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35017                                  	;error	error_invalid_function
 35018                                  	;mov	al,1
 35019 00006650 B001                    	MOV	AL,error_invalid_function
 35020                                  servercall_error:
 35021 00006652 E9FD9F                  	JMP	SYS_RET_ERR
 35022                                  
 35023                                  SERVERRETURN:
 35024 00006655 C3                      	retn
 35025                                  
 35026                                  ; Commit - iterate through the open file list and make sure that the
 35027                                  ; directory entries are correctly updated.
 35028                                  
 35029                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35030                                  COMMIT_ALL:
 35031 00006656 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35032 00006658 16                      	push	ss
 35033 00006659 1F                      	pop	ds
 35034 0000665A E8FBAC                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35035                                  CommitLoop:
 35036 0000665D 53                      	push	bx
 35037 0000665E E82401                  	call	SFFromSFN
 35038 00006661 7222                    	JC	short CommitDone
 35039 00006663 26833D00                	cmp	word [es:di],0
 35040                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35041                                  					; if (ThisSFT->refcount != 0)
 35042 00006667 7418                    	JZ	short CommitNext
 35043                                  	;cmp	word [es:di],0FFFFh ; -1
 35044 00006669 26833DFF                	cmp	word [ES:DI],sf_busy
 35045                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35046                                  					; BUSY SFTs have god knows what
 35047 0000666D 7412                    	JZ	short CommitNext	;   in them.
 35048                                  	; 17/12/2022
 35049 0000666F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35050                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35051 00006674 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35052                                  					;	doesn't deadlock
 35053 00006676 893E[9E05]              	MOV	[THISSFT],DI
 35054 0000667A 8C06[A005]              	MOV	[THISSFT+2],ES
 35055 0000667E E874CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35056                                  CommitNext:
 35057 00006681 5B                      	pop	bx
 35058 00006682 43                      	INC	BX
 35059 00006683 EBD8                    	JMP	short CommitLoop
 35060                                  CommitDone:
 35061 00006685 E8EBAC                  	call	LCritSFT
 35062 00006688 5B                      	pop	bx
 35063                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35064                                  Commit_Ok:
 35065 00006689 E9BD9F                  	jmp	SYS_RET_OK
 35066                                  	
 35067                                  
 35068                                  CLOSE_NAME:
 35069                                  
 35070                                  ;if installed
 35071                                  
 35072                                  ;hkn; SS override
 35073                                  	;call	far [ss:MFTcloN]
 35074 0000668C 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35075                                  ;else
 35076                                  ;	Call	MFTcloN
 35077                                  ;endif
 35078                                  
 35079                                  CheckReturns:
 35080 00006691 7202                    	JC	short func_err
 35081                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35082                                  	;transfer SYS_RET_OK
 35083                                  Commit_Okj:
 35084 00006693 EBF4                    	jmp	short Commit_Ok
 35085                                  	;jmp	SYS_RET_OK
 35086                                  
 35087                                  func_err:
 35088                                  	;transfer SYS_RET_ERR
 35089                                  	;jmp	SYS_RET_ERR
 35090 00006695 EBBB                    	jmp	short servercall_error
 35091                                  
 35092                                  CLOSE_UID:
 35093                                  
 35094                                  ;if installed
 35095                                  ;hkn; SS override
 35096                                  	;call	far [ss:MFTclU]
 35097 00006697 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35098                                  ;else
 35099                                  ;	Call	MFTclU
 35100                                  ;endif
 35101 0000669C EBF3                    	JMP	short CheckReturns
 35102                                  
 35103                                  CLOSE_UID_PID:
 35104                                  
 35105                                  ;if installed
 35106                                  ;hkn; SS override
 35107                                  	;call	far [ss:MFTCloseP]
 35108 0000669E 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35109                                  ;else
 35110                                  ;	Call	MFTCloseP
 35111                                  ;endif
 35112 000066A3 EBEC                    	JMP	short CheckReturns
 35113                                  
 35114                                  GET_LIST:
 35115                                  
 35116                                  ;if installed
 35117                                  ;hkn; SS override
 35118                                  	;call	far [ss:MFT_get]
 35119 000066A5 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35120                                  ;else
 35121                                  ;	Call	MFT_get
 35122                                  ;endif
 35123 000066AA 72E9                    	JC	short func_err
 35124 000066AC E8E09D                  	call	Get_User_Stack
 35125                                  	;mov	[si+2],bx
 35126 000066AF 895C02                  	MOV	[SI+user_env.user_BX],BX
 35127                                  	;mov	[si+10],di
 35128 000066B2 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35129                                  	;mov	[si+16],es
 35130 000066B5 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35131                                  SetCXOK:
 35132                                  	;mov	[si+4],cx
 35133 000066B8 894C04                  	MOV	[SI+user_env.user_CX],CX
 35134                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35135                                  	;transfer SYS_RET_OK
 35136                                  Commit_Okj2:
 35137                                  	; 17/12/2022
 35138 000066BB EBCC                    	jmp	short Commit_Ok
 35139                                  	;jmp	short Commit_Okj
 35140                                  	;;jmp	SYS_RET_OK
 35141                                  
 35142                                  SRV_CALL:
 35143 000066BD 58                      	POP	AX			; get rid of call to $srvcall
 35144 000066BE 1E                      	push	ds
 35145 000066BF 56                      	push	si
 35146 000066C0 E8CC9D                  	call	Get_User_Stack
 35147 000066C3 5F                      	pop	di
 35148 000066C4 07                      	pop	es
 35149                                  
 35150                                  ; DS:SI point to stack
 35151                                  ; ES:DI point to DPL
 35152                                  
 35153 000066C5 E87FAB                  	call	XCHGP
 35154                                  
 35155                                  ; DS:SI point to DPL
 35156                                  ; ES:DI point to stack
 35157                                  ;
 35158                                  ; We now copy the registers from DPL to save stack
 35159                                  
 35160 000066C8 56                      	push	si
 35161 000066C9 B90600                  	MOV	CX,6
 35162 000066CC F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35163 000066CE 47                      	INC	DI
 35164 000066CF 47                      	INC	DI			; Skip user_BP
 35165 000066D0 A5                      	MOVSW				; DS
 35166 000066D1 A5                      	MOVSW				; ES
 35167 000066D2 5E                      	pop	si			; DS:SI -> DPL
 35168 000066D3 8B04                    	mov	ax,[SI]
 35169                                  	;MOV	AX,[SI+DPL.AX]
 35170                                  	;mov	bx,[si+2]
 35171 000066D5 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35172                                  	;mov	cx,[si+4]
 35173 000066D8 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35174                                  	;mov	dx,[si+6]
 35175 000066DB 8B5406                  	MOV	DX,[SI+DPL.DX]
 35176                                  	;mov	di,[si+10]
 35177 000066DE 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35178                                  	;mov	es,[si+14]
 35179 000066E1 8E440E                  	MOV	ES,[SI+DPL.ES]
 35180                                  	;push	word [si+8]
 35181 000066E4 FF7408                  	PUSH	word [SI+DPL.SI]
 35182                                  	;mov	ds,[si+12]
 35183 000066E7 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35184 000066EA 5E                      	POP	SI
 35185                                  
 35186                                  ;hkn; SS override for next 3
 35187 000066EB 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35188 000066F0 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35189 000066F5 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35190 000066FB E98E9C                  	jmp	REDISP
 35191                                  
 35192                                  GET_DOS_DATA:
 35193 000066FE 16                      	push	ss
 35194 000066FF 07                      	pop	es
 35195 00006700 BF[2003]                	MOV     DI,SWAP_START
 35196 00006703 B9[AC0A]                	MOV     CX,SWAP_END
 35197 00006706 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35198 00006709 29F9                    	SUB     CX,DI
 35199 0000670B 29FA                    	SUB     DX,DI
 35200 0000670D D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35201 0000670F 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35202 00006712 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35203 00006714 E8789D                  	call	Get_User_Stack
 35204                                  	;mov	[si+14],es
 35205 00006717 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35206                                  	;mov	[si+8],di
 35207 0000671A 897C08                  	MOV     [SI+user_env.user_SI],DI
 35208                                  	;mov	[si+6],dx
 35209 0000671D 895406                  	MOV     [SI+user_env.user_DX],DX
 35210 00006720 EB96                    	JMP	short SetCXOK
 35211                                  
 35212                                  SPOOL_OPER:
 35213                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35214                                  
 35215 00006722 50                      	push    ax
 35216 00006723 B82511                  	mov     ax,1125h
 35217 00006726 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35218                                  			; STACK: WORD subfunction
 35219                                  			; Return: CF set on error, AX = error code
 35220                                  			; STACK unchanged
 35221 00006728 5B                      	pop	bx
 35222                                  	; 17/12/2022
 35223                                  	;JC	short func_err2
 35224 00006729 7390                    	jnc	short Commit_Okj2
 35225                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35226                                  	;;jmp	SYS_RET_OK
 35227                                  	;jmp	short Commit_Okj2
 35228                                  	
 35229                                  func_err2:
 35230 0000672B E9249F                  	jmp	SYS_RET_ERR
 35231                                  
 35232                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35233                                  ;--------------------------------------------------------------------------
 35234                                  ;
 35235                                  ; Procedure Name : $SetExtendedError
 35236                                  ;
 35237                                  ; $SetExtendedError takes extended error information and loads it up for the
 35238                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35239                                  ; mask their actions.
 35240                                  ;
 35241                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35242                                  ;   Outputs: none
 35243                                  ;
 35244                                  ;---------------------------------------------------------------------------
 35245                                  
 35246                                  _$SetExtendedError:
 35247                                  
 35248                                  ;hkn; SS override for all variables used
 35249                                  
 35250 0000672E 8B04                    	mov	ax,[si]
 35251                                  	;MOV	AX,[SI+DPL.AX]
 35252 00006730 36A3[2403]              	MOV	[SS:EXTERR],AX
 35253                                  	;mov	ax,[si+10]
 35254 00006734 8B440A                  	MOV	AX,[SI+DPL.DI]
 35255 00006737 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35256                                  	;mov	ax,[si+14]
 35257 0000673B 8B440E                  	MOV	AX,[SI+DPL.ES]
 35258 0000673E 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35259                                  	;mov	ax,[si+2]
 35260 00006742 8B4402                  	MOV	AX,[SI+DPL.BX]
 35261 00006745 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35262                                  	;mov	ax,[si+4]
 35263 00006749 8B4404                  	MOV	AX,[SI+DPL.CX]
 35264 0000674C 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35265 00006751 C3                      	retn
 35266                                  
 35267                                  ;============================================================================
 35268                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35269                                  ;============================================================================
 35270                                  ; 05/08/2018 - Retro DOS v3.0
 35271                                  ; 05/05/2019 - Retro DOS v4.0
 35272                                  
 35273                                  ;**	Handle related utilities for MSDOS 2.X.
 35274                                  ;----------------------------------------------------------------------------
 35275                                  ;	pJFNFromHandle	written
 35276                                  ;	SFFromHandle	written
 35277                                  ;	SFFromSFN	written
 35278                                  ;	JFNFree 	written
 35279                                  ;	SFNFree 	written
 35280                                  ;
 35281                                  ;	Modification history:
 35282                                  ;
 35283                                  ;	    Created: MZ 1 April 1983
 35284                                  ;----------------------------------------------------------------------------
 35285                                  
 35286                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35287                                  
 35288                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35289                                  ;----------------------------------------------------------------------------
 35290                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35291                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35292                                  ;
 35293                                  ;	NOTE:
 35294                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35295                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35296                                  ;
 35297                                  ;	ENTRY	(bx) = handle
 35298                                  ;	EXIT	'C' clear if ok
 35299                                  ;		  (es:di) = address of JFN value
 35300                                  ;		'C' set if error
 35301                                  ;		  (ax) = error code
 35302                                  ;	USES	AX, DI, ES, Flags
 35303                                  ;----------------------------------------------------------------------------
 35304                                  
 35305                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35306                                  
 35307                                  pJFNFromHandle:
 35308                                  	; 05/05/2019 - Retro DOS v4.0
 35309                                  	;getdseg <es>			; es -> dosdata
 35310 00006752 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35311                                  	
 35312                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35313 00006757 268E06[3003]            	mov	es,[es:CurrentPDB]
 35314                                  
 35315                                  	;cmp	bx,[ES:32h]
 35316 0000675C 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35317 00006761 7204                    	JB	short pjfn10		; no, get offset
 35318                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35319                                  	;mov	al,6
 35320 00006763 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35321                                  ReturnCarry:
 35322 00006765 F9                      	STC                             ; signal error
 35323 00006766 C3                      	retn				; go back
 35324                                  pjfn10: 
 35325                                  	;les	di,[es:34h]
 35326 00006767 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35327 0000676C 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35328                                  	;clc
 35329                                  pJFNFromHandle_error:
 35330 0000676E C3                      	retn
 35331                                  
 35332                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35333                                  ;----------------------------------------------------------------------------
 35334                                  ;
 35335                                  ; Procedure Name : SFFromHandle
 35336                                  ;
 35337                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35338                                  ;
 35339                                  ;   Input:      BX has handle
 35340                                  ;   Output:     Carry Set
 35341                                  ;                   AX has error code
 35342                                  ;               Carry Reset
 35343                                  ;                   ES:DI has pointer to SF entry
 35344                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35345                                  ; NOTE:
 35346                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35347                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35348                                  ;
 35349                                  ;----------------------------------------------------------------------------
 35350                                  
 35351                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35352                                  
 35353                                  SFFromHandle:
 35354 0000676F E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35355                                  	;retc				; return if error
 35356 00006772 72FA                    	jc	short pJFNFromHandle_error
 35357 00006774 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35358                                  	;JNZ	short GetSF		; nope, suck out SF
 35359                                  	;;mov	al,6
 35360                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35361                                  	;jmp	short ReturnCarry	; signal it
 35362                                  	; 17/12/2022
 35363                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35364 00006778 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35365                                  	;JNZ	short GetSF		; nope, suck out SF
 35366                                  	;;mov	al,6
 35367                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35368                                  	;jmp	short ReturnCarry	; signal it
 35369                                  GetSF:
 35370 0000677A 53                      	push	bx			; save handle
 35371 0000677B 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35372 0000677E 30FF                    	XOR     BH,BH                   ; ignore upper half
 35373 00006780 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35374 00006783 5B                      	pop	bx			; restore
 35375 00006784 C3                      	retn                        	; say goodbye
 35376                                  
 35377                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35378                                  
 35379                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35380                                  ;----------------------------------------------------------------------------
 35381                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35382                                  ;	is more than just a simple index instruction because the SF table
 35383                                  ;	can be made up of multiple pieces chained together. We follow the
 35384                                  ;	chain to the right piece and then do the index operation.
 35385                                  ;
 35386                                  ;   NOTE:
 35387                                  ;	This routine is called from SFFromHandle which is called
 35388                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35389                                  ;
 35390                                  ;	ENTRY	BX has SF index
 35391                                  ;	EXIT	'C' clear if OK
 35392                                  ;		  ES:DI points to SF entry
 35393                                  ;		'C' set if index too large
 35394                                  ;	USES	BX, DI, ES
 35395                                  ;----------------------------------------------------------------------------
 35396                                  
 35397                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35398                                  
 35399                                  SFFromSFN:
 35400                                  	; 05/05/2019 - Retro DOS v4.0
 35401                                  	;getdseg <es>			; es -> dosdata
 35402 00006785 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35403                                  
 35404                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35405 0000678A 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35406                                  sfsfn5:	
 35407                                  	;cmp	bx,[es:di+4]
 35408 0000678F 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35409 00006793 720E                    	JB	short sfsfn7		; yes, go grab it
 35410                                  	;sub	bx,[es:di+4]
 35411 00006795 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35412 00006799 26C43D                  	les	di,[es:di] ; 14/08/2018
 35413                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35414 0000679C 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35415 0000679F 75EE                    	JNZ	short sfsfn5		; no, try again
 35416 000067A1 F9                      	STC
 35417 000067A2 C3                      	retn				; return with error, not found
 35418                                  sfsfn7:
 35419 000067A3 50                      	push	ax
 35420                                  	;mov	ax,53 ; MSDOS 3.3
 35421                                  	;mov	ax,59 ; MSDOS 6.0
 35422                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35423                                  	
 35424                                  	; 17/12/2022
 35425 000067A4 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35426                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35427                                  	;mov	ax,SF_ENTRY.size ; 59
 35428                                  	
 35429 000067A6 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35430 000067A8 01C7                    	ADD	DI,AX			; add base of SF block
 35431 000067AA 58                      	pop	ax
 35432                                  	;add	di,6
 35433 000067AB 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35434 000067AE C3                      	retn				; return with 'C' clear
 35435                                  
 35436                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35437                                  
 35438                                  ;**	JFNFree - Find a Free JFN Slot
 35439                                  ;----------------------------------------------------------------------------
 35440                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35441                                  ;
 35442                                  ;	ENTRY	(ss) = DOSDATA
 35443                                  ;	EXIT	'C' clear if OK
 35444                                  ;		  (bx) = new handle
 35445                                  ;		  (es:di) = pointer to JFN slot
 35446                                  ;		'C' set if error
 35447                                  ;		  (al) = error code
 35448                                  ;	USES	bx, di, es, flags
 35449                                  ;----------------------------------------------------------------------------
 35450                                  
 35451                                  JFNFree:
 35452 000067AF 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35453                                  jfnf1:	
 35454 000067B1 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35455 000067B4 7209                    	JC	short jfnf5		; no more handles
 35456 000067B6 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35457 000067BA 7405                    	je	short jfnfx		; yes, carry is clear
 35458 000067BC 43                      	INC     BX                      ; no, next handle
 35459 000067BD EBF2                    	JMP	short jfnf1		; and try again
 35460                                  
 35461                                  	; Error. 'C' set
 35462                                  jfnf5:	
 35463                                  	;mov	al,4
 35464 000067BF B004                    	MOV	AL,error_too_many_open_files
 35465                                  jfnfx:	
 35466 000067C1 C3                      	retn				; bye
 35467                                  
 35468                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35469                                  
 35470                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35471                                  ;----------------------------------------------------------------------------
 35472                                  ;	SFNFree scans through the sf table looking for a free entry
 35473                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35474                                  ;
 35475                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35476                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35477                                  ;	we can't just mark it busy because we may get blown out of our open
 35478                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35479                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35480                                  ;	an SFT with this value we look to see if it belongs to this user
 35481                                  ;	and process.  If it does belong to us then it must be an orphan
 35482                                  ;	and we reclaim it.
 35483                                  ;
 35484                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35485                                  ;		over and over, but we could at least set a high water mark...
 35486                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35487                                  ;		even though this is not a frequently called routine - jgl
 35488                                  ;
 35489                                  ;	ENTRY	(ss) = DOSDATA
 35490                                  ;	EXIT	'C' clear if no error
 35491                                  ;		  (bx) = SFN
 35492                                  ;		  (es:di) = pointer to SFT
 35493                                  ;		  es:[di].SFT_REF_COUNT = -1
 35494                                  ;		'C' set if error
 35495                                  ;		  (al) = error code
 35496                                  ;	USES	bx, di, es, Flags
 35497                                  ;----------------------------------------------------------------------------
 35498                                  
 35499                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35500                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35501                                  
 35502                                  SFNFree:
 35503                                  	; 12/08/2018
 35504                                  	; 05/08/2018 - Retro DOS v3.0
 35505                                  	;
 35506                                  	; MSDOS 6.0
 35507 000067C2 50                      	push	ax
 35508 000067C3 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35509                                  sfnf5:	
 35510 000067C5 53                      	push	bx
 35511 000067C6 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35512 000067C9 5B                      	pop	bx
 35513 000067CA 723A                    	jc	short sfnf95		; no more free SFNs
 35514 000067CC 26833D00                	cmp	word [ES:DI],0
 35515                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35516 000067D0 741D                    	je	short sfnf20			; yep, got one
 35517                                  	
 35518                                  	;cmp	word [es:di],0FFFFh ; -1
 35519 000067D2 26833DFF                	cmp	word [ES:DI],sf_busy
 35520                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35521 000067D6 7403                    	je	short sfnf10		; special busy mark
 35522                                  sfnf7:	
 35523 000067D8 43                      	inc	bx			; try the next one
 35524 000067D9 EBEA                    	jmp	short sfnf5
 35525                                  
 35526                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35527                                  ;	it was abandoned during a earlier call and we can use it.
 35528                                  ;
 35529                                  ;	(bx)	= SFN
 35530                                  ;	(es:di) = pointer to SFT
 35531                                  ;	(TOS)	= caller's (ax)
 35532                                  
 35533                                  sfnf10:	
 35534 000067DB 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35535                                  	;cmp	[es:di+2Fh],ax
 35536 000067DF 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35537 000067E3 75F3                    	jnz	short sfnf7		; not ours
 35538 000067E5 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35539                                  	;cmp	[es:di+31h],ax
 35540 000067E9 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35541 000067ED 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35542                                  
 35543                                  ;	We have an SFT to allocate
 35544                                  ;
 35545                                  ;	(bx)	= SFN
 35546                                  ;	(es:di) = pointer to SFT
 35547                                  ;	(TOS)	= caller's (ax)
 35548                                  
 35549                                  sfnf20:
 35550                                  	; cf = 0 ;; Retro DOS v3.0
 35551                                  
 35552                                  	;mov	word [es:di],0FFFFh
 35553 000067EF 26C705FFFF              	mov	word [ES:DI],sf_busy
 35554                                  					; make sure that this is allocated
 35555                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35556                                  
 35557 000067F4 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35558                                  	;mov	[es:di+2Fh],ax
 35559 000067F8 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35560 000067FC 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35561                                  	;mov	[es:di+31h],ax
 35562 00006800 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35563                                  sfnf21: ;; Retro DOS v3.0
 35564                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35565                                  	;pop	ax
 35566                                  	;;clc
 35567                                  	;retn				; return with no error
 35568                                  	; 17/12/2022
 35569 00006804 58                      	pop	ax
 35570                                  	;clc
 35571 00006805 C3                      	retn
 35572                                  
 35573                                  ;**	Error - no more free SFNs
 35574                                  ;
 35575                                  ;	'C' set
 35576                                  ;	(TOS) = saved ax
 35577                                  
 35578                                  sfnf95: 
 35579 00006806 58                      	pop	ax
 35580                                  	;mov	al,4
 35581 00006807 B004                    	mov	al,error_too_many_open_files
 35582 00006809 C3                      	retn				; return with 'C' and error
 35583                                  
 35584                                  ;============================================================================
 35585                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35586                                  ;============================================================================
 35587                                  ; 13/07/2018 - Retro DOS v3.0
 35588                                  ; 20/05/2019 - Retro DOS v4.0
 35589                                  
 35590                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35591                                  
 35592                                  ;	BREAK <$Close - return a handle to the system>
 35593                                  ;----------------------------------------------------------------------------
 35594                                  ;
 35595                                  ;**	$Close - Close a file Handle
 35596                                  ;
 35597                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35598                                  ;		path
 35599                                  ;
 35600                                  ;	Assembler usage:
 35601                                  ;	    MOV     BX, handle
 35602                                  ;	    MOV     AH, Close
 35603                                  ;	    INT     int_command
 35604                                  ;
 35605                                  ;	ENTRY	(bx) = handle
 35606                                  ;	EXIT	<normal INT21 return convention>
 35607                                  ;	USES	all
 35608                                  ;
 35609                                  ;----------------------------------------------------------------------------
 35610                                  
 35611                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35612                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35613                                  
 35614                                  _$CLOSE:
 35615                                  ;	Grab the SFT pointer from the JFN.
 35616                                  
 35617 0000680A E85A02                  	call	CheckOwner		; get system file entry
 35618 0000680D 722B                    	jc	short CloseError	; error return
 35619 0000680F 16                      	push	ss
 35620 00006810 1F                      	pop	ds			; For DOS_CLOSE
 35621 00006811 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35622 00006815 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35623                                  
 35624                                  ; DS:SI point to JFN table entry.
 35625                                  ; ES:DI point to SFT
 35626                                  ;
 35627                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35628                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35629                                  ; If the file was not a net FCB, we free the JFN too.
 35630                                  
 35631                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35632 00006819 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35633 0000681D 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35634                                  	;mov	al,[ES:DI+2]
 35635 0000681F 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35636                                  	;and	al,0F0h
 35637 00006823 24F0                    	AND	AL,SHARING_MASK
 35638                                  	;cmp	al,70h
 35639 00006825 3C70                    	CMP	AL,SHARING_NET_FCB
 35640 00006827 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35641                                  
 35642                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35643                                  ; -1.
 35644                                  
 35645                                  FreeJFN:
 35646 00006829 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35647 0000682C 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35648                                  PostFree:
 35649                                  
 35650                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35651                                  
 35652 00006830 E86DC7                  	call	DOS_CLOSE
 35653                                  
 35654                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35655                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35656                                  
 35657 00006833 7205                    	JC	short CloseError
 35658                                  	;mov	ah,3Eh
 35659 00006835 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35660                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35661                                  CloseOk:
 35662 00006837 E90F9E                  	jmp	SYS_RET_OK
 35663                                  CloseError:
 35664 0000683A E9159E                  	jmp	SYS_RET_ERR
 35665                                  
 35666                                  ;	BREAK <$Commit - commit the file>
 35667                                  ;----------------------------------------------------------------------------
 35668                                  ;
 35669                                  ;**	$Commit - Commit a File
 35670                                  ;
 35671                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35672                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35673                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35674                                  ;	and fix this!! jgl
 35675                                  ;
 35676                                  ;	Assembler usage:
 35677                                  ;	    MOV     BX, handle
 35678                                  ;	    MOV     AH, Commit
 35679                                  ;	    INT     int_command
 35680                                  ;
 35681                                  ;	ENTRY	(bx) = handle
 35682                                  ;	EXIT	none
 35683                                  ;	USES	all
 35684                                  ;;----------------------------------------------------------------------------
 35685                                  
 35686                                  _$COMMIT:
 35687                                  ;	Grab the SFT pointer from the JFN.
 35688                                  
 35689 0000683D E82702                  	call	CheckOwner		; get system file entry
 35690 00006840 7213                    	JC	short CommitError	; error return
 35691 00006842 16                      	push	ss
 35692 00006843 1F                      	pop	ds			; For DOS_COMMIT
 35693 00006844 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35694 00006848 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35695                                  
 35696                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35697                                  ;
 35698                                  ;	ES:DI point to SFT
 35699                                  
 35700 0000684C E8A6C8                  	call	DOS_COMMIT
 35701 0000684F 7204                    	JC	short CommitError
 35702                                  	; 07/12/2022
 35703                                  	;jc	short CloseError
 35704                                  	;mov	ah,68h
 35705 00006851 B468                    	MOV	AH,COMMIT
 35706                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35707                                  	;jmp	SYS_RET_OK
 35708                                  CommitOk:
 35709 00006853 EBE2                    	jmp	short CloseOk	
 35710                                  
 35711                                  CommitError:
 35712                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35713                                  	;jmp	SYS_RET_ERR
 35714 00006855 EBE3                    	jmp	short CloseError
 35715                                  
 35716                                  ;	BREAK <$ExtHandle - extend handle count>
 35717                                  
 35718                                  ;**	$ExtHandle - Extend Handle Count
 35719                                  ;----------------------------------------------------------------------------
 35720                                  ;	Assembler usage:
 35721                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35722                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35723                                  ;	    INT     int_command 		 busy )
 35724                                  ;
 35725                                  ;	ENTRY	(bx) = new number of handles
 35726                                  ;	EXIT	'C' clear if OK
 35727                                  ;		'C' set iff err
 35728                                  ;		  (ax) = error code
 35729                                  ;			 AX = error_not_enough_memory
 35730                                  ;			      error_too_many_open_files
 35731                                  ;	USES	all
 35732                                  ;----------------------------------------------------------------------------
 35733                                  
 35734                                  _$ExtHandle:
 35735 00006857 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35736                                  	;cmp	bx,20
 35737 00006859 83FB14                  	CMP	BX,FILPERPROC
 35738 0000685C 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35739 0000685E BB1400                  	MOV	BX,FILPERPROC
 35740                                  exth2:	
 35741 00006861 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35742                                  	;mov	cx,[ES:32h]
 35743 00006866 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35744 0000686B 39CB                    	CMP	BX,CX			; the requested == current
 35745 0000686D 7455                    	JE	short ok_done 		; yes and exit
 35746 0000686F 7722                    	JA	short larger		; go allocate new table
 35747                                  
 35748                                  ;	We're going to shrink the # of handles available
 35749                                  
 35750 00006871 BD0100                  	MOV	BP,1			; shrink
 35751                                  	;mov	ds,[ES:36h]
 35752 00006874 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35753 00006879 89DE                    	MOV	SI,BX			;
 35754 0000687B 29D9                    	SUB	CX,BX			; get difference
 35755                                  
 35756                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35757                                  chck_handles:
 35758 0000687D 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35759 00006880 753D                    	JNZ	short too_many_files	; status
 35760 00006882 46                      	INC	SI
 35761 00006883 E2F8                    	LOOP	chck_handles
 35762 00006885 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35763 00006888 7709                    	JA	short larger		; no
 35764                                  
 35765 0000688A BD0200                  	MOV	BP,2			; psp
 35766                                  	;mov	di,24
 35767 0000688D BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35768 00006890 53                      	PUSH	BX
 35769 00006891 EB1D                    	JMP	short movhandl
 35770                                  
 35771                                  larger:
 35772 00006893 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35773 00006896 747F                    	JZ	short invalid_func	; 10/08/2018
 35774 00006898 F8                      	CLC
 35775 00006899 53                      	PUSH	BX			; save requested number
 35776 0000689A 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35777 0000689D B104                    	MOV	CL,4
 35778                                  	;ror	bx,cl			; MSDOS 3.3
 35779 0000689F D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35780 000068A1 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35781                                  
 35782 000068A5 55                      	PUSH	BP
 35783 000068A6 E8DBFA                  	call	_$ALLOC			; allocate memory
 35784 000068A9 5D                      	POP	BP
 35785 000068AA 7266                    	JC	short no_memory		; not enough meory
 35786                                  
 35787 000068AC 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35788 000068AE 31FF                    	XOR	DI,DI
 35789                                  movhandl:
 35790 000068B0 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35791                                  
 35792 000068B5 F7C50300                	test	BP,3			; enlarge ?
 35793 000068B9 740C                    	JZ	short enlarge 		; yes
 35794 000068BB 59                      	POP	CX			; cx = the amount you shrink
 35795 000068BC 51                      	PUSH	CX
 35796 000068BD EB0C                    	JMP	short copy_hand
 35797                                  
 35798                                  ;	Done.  'C' clear
 35799                                  
 35800                                  ; 17/12/2022
 35801                                  ;ok_done:
 35802                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35803                                  ;	;jmp	short CommitOk
 35804                                  ;	; 17/12/2022
 35805                                  ;	jmp	SYS_RET_OK
 35806                                  
 35807                                  too_many_files:
 35808                                  	;mov	al,4
 35809 000068BF B004                    	MOV	AL,error_too_many_open_files
 35810                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35811                                  	;jmp	SYS_RET_ERR
 35812                                  CommitErrorj:
 35813                                  	;jmp	short CommitError
 35814                                  	; 17/12/2022
 35815 000068C1 E98E9D                  	jmp	SYS_RET_ERR
 35816                                  
 35817                                  ; 17/12/2022 
 35818                                  ok_done:
 35819                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35820                                  	;jmp	short CommitOk
 35821                                  	; 17/12/2022
 35822 000068C4 E9829D                  	jmp	SYS_RET_OK
 35823                                  
 35824                                  enlarge:
 35825                                  	;mov	cx,[32h]
 35826 000068C7 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35827                                  copy_hand:
 35828 000068CB 89CA                    	MOV	DX,CX
 35829                                  	;lds	si,[34h]
 35830 000068CD C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35831 000068D1 F3A4                    	REP	MOVSB			; copy infomation to new table
 35832 000068D3 59                      	POP	CX			; get new number of handles
 35833 000068D4 51                      	PUSH	CX			; save it again
 35834 000068D5 29D1                    	SUB	CX,DX			; get the difference
 35835 000068D7 B0FF                    	MOV	AL,-1			; set availability to handles
 35836 000068D9 F3AA                    	REP	STOSB
 35837 000068DB 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35838                                  	;cmp	word [34h],0
 35839 000068E0 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35840 000068E5 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35841 000068E7 55                      	PUSH	BP
 35842 000068E8 1E                      	PUSH	DS			; save old table segment
 35843 000068E9 06                      	PUSH	ES			; save new table segment
 35844 000068EA 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35845 000068EE E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35846 000068F1 07                      	POP	ES			; restore new table segment
 35847 000068F2 1F                      	POP	DS			; restore old table segment
 35848 000068F3 5D                      	POP	BP
 35849                                  
 35850                                  update_info:
 35851 000068F4 F7C50200                	test	BP,2			; psp?
 35852 000068F8 7408                    	JZ	short non_psp 		; no
 35853                                  	;mov	word [34h],18h ; 24
 35854 000068FA C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35855 00006900 EB06                    	JMP	short final
 35856                                  non_psp:
 35857                                  	;mov	word [34h],0
 35858 00006902 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35859                                  final:
 35860                                  	;mov	[36h],es	
 35861 00006908 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35862                                  	;pop	word [32h]
 35863 0000690C 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35864                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35865                                  	;jmp	SYS_RET_OK
 35866                                  ok_done_j:
 35867 00006910 EBB2                    	jmp	short ok_done
 35868                                  
 35869                                  no_memory:
 35870 00006912 5B                      	POP	BX			; clean stack
 35871                                  	;mov	al,8
 35872 00006913 B008                    	MOV	AL,error_not_enough_memory
 35873                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35874                                  	;jmp	SYS_RET_ERR
 35875                                  CommitErrorj2:
 35876 00006915 EBAA                    	jmp	short CommitErrorj
 35877                                  
 35878                                  invalid_func:
 35879                                  	;mov	al,1
 35880 00006917 B001                    	MOV	AL,error_invalid_function
 35881                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35882                                  	;jmp	SYS_RET_ERR
 35883                                  CommitErrorj3:
 35884                                  	;jmp	short CommitErrorj2
 35885                                  	; 17/12/2022
 35886 00006919 EBA6                    	jmp	short CommitErrorj
 35887                                  
 35888                                  ; 20/05/2019 - Retro DOS v4.0
 35889                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35890                                  
 35891                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35892                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35893                                  
 35894                                  ;	BREAK <$READ - Read from a file handle>
 35895                                  ;----------------------------------------------------------------------------
 35896                                  ;
 35897                                  ;**	$Read - Read from a File Handle
 35898                                  ;
 35899                                  ;   Assembler usage:
 35900                                  ;
 35901                                  ;	LDS	DX, buf
 35902                                  ;	MOV	CX, count
 35903                                  ;	MOV	BX, handle
 35904                                  ;	MOV	AH, Read
 35905                                  ;	INT	int_command
 35906                                  ;	  AX has number of bytes read
 35907                                  ;
 35908                                  ;	ENTRY	(bx) = file handle
 35909                                  ;		(cx) = byte count
 35910                                  ;		(ds:dx) = buffer address
 35911                                  ;	EXIT	Through system call return so that to user:
 35912                                  ;		  'C' clear if OK
 35913                                  ;		    (ax) = bytes read
 35914                                  ;		  'C' set if error
 35915                                  ;		    (ax) = error code
 35916                                  ;
 35917                                  ;----------------------------------------------------------------------------
 35918                                  
 35919                                  _$READ:
 35920 0000691B BE[6333]                	MOV	SI,DOS_READ
 35921                                  ReadDo:
 35922 0000691E E831FE                  	call	pJFNFromHandle
 35923 00006921 7208                    	JC	short ReadError
 35924                                  
 35925 00006923 268A05                  	MOV	AL,[ES:DI]
 35926 00006926 E83E01                  	call	CheckOwner		; get the handle
 35927 00006929 7303                    	JNC	short ReadSetup		; no errors do the operation
 35928                                  
 35929                                  ;	Have an error. 'C' set
 35930                                  
 35931                                  ReadError:
 35932                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35933                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35934                                  	;jmp	short CommitErrorj3
 35935                                  	; 17/12/2022
 35936 0000692B E9249D                  	jmp	SYS_RET_ERR
 35937                                  
 35938                                  ReadSetup:
 35939 0000692E 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35940 00006933 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35941                                  	; 20/05/2019 - Retro DOS v4.0
 35942                                  	; MSDOS 6.0 
 35943                                  ;; Extended Open
 35944                                  	;test	byte [es:di+3],20h
 35945 00006938 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35946                                  						 ;AN000;;EO. need i24
 35947 0000693D 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35948 0000693F 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35949                                  					;AN000;;EO. set it off;smr;SS Override
 35950                                  needi24:				;AN000;
 35951                                  ;; Extended Open
 35952 00006945 36FF36[2C03]            	push	word [SS:DMAADD]
 35953 0000694A 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35954                                  
 35955                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35956                                  
 35957                                  	; 26/07/2019
 35958                                  
 35959                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35960                                  	;
 35961                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35962                                  	; there is not another caller; it is better to put the code in this proc
 35963                                   	; here instead of calling it as a subroutine; but I have modified code
 35964                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35965                                  
 35966                                  	; MSDOS 6.0
 35967 0000694F E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35968                                  	
 35969                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35970                                  	; MSDOS 3.3
 35971                                  	;MOV	BX,DX			; copy offset
 35972                                  	;push	cx			; don't stomp on count
 35973                                  	;MOV	CL,4			; bits to shift bytes->para
 35974                                  	;SHR	BX,CL			; get number of paragraphs
 35975                                  	;pop	cx			; get count back
 35976                                  	;MOV	AX,DS			; get original segment
 35977                                  	;ADD	AX,BX			; get new segment
 35978                                  	;MOV	DS,AX			; in seg register
 35979                                  	;AND	DX,0Fh			; normalize offset
 35980                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 35981                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 35982                                  						;smr;SS Override
 35983                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35984                                  	
 35985 00006952 16                      	push	ss			; go for DOS addressability
 35986 00006953 1F                      	pop	ds
 35987                                  
 35988 00006954 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 35989                                  
 35990 00006956 8F06[2E03]              	pop	word [DMAADD+2]
 35991 0000695A 8F06[2C03]              	pop	word [DMAADD]
 35992                                  	;JNC	short READ_OK		;AN002;
 35993                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 35994                                  	; 17/12/2022
 35995 0000695E 72CB                    	jc	short ReadError
 35996                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35997                                  	;jnc	short READ_OK		;AN002;
 35998                                  	;jmp	short ReadError
 35999                                  
 36000                                  READ_OK:
 36001 00006960 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36002                                  Read_Okj:
 36003                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36004                                  	;;jmp	SYS_RET_OK		; successful return
 36005                                  	;jmp	short ok_done_j
 36006                                  	; 17/12/2022
 36007 00006962 E9E49C                  	jmp	SYS_RET_OK
 36008                                  
 36009                                  ; 13/07/2018 - Retro DOS v3.0
 36010                                  
 36011                                  ;----------------------------------------------------------------------------
 36012                                  
 36013                                  ;   Input: DS:DX points to user's buffer addr
 36014                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36015                                  ;   Output: [DMAADD] set
 36016                                  
 36017                                  ; 20/05/2019 - Retro DOS v4.0
 36018                                  ; 26/07/2019
 36019                                  ;	; MSDOS 6.0
 36020                                  ;Align_Buffer:
 36021                                  ;	MOV	BX,DX			; copy offset
 36022                                  ;	push	cx			; don't stomp on count
 36023                                  ;	MOV	CL,4			; bits to shift bytes->para
 36024                                  ;	SHR	BX,CL			; get number of paragraphs
 36025                                  ;	pop	cx			; get count back
 36026                                  ;	MOV	AX,DS			; get original segment
 36027                                  ;	ADD	AX,BX			; get new segment
 36028                                  ;	MOV	DS,AX			; in seg register
 36029                                  ;	AND	DX,0Fh			; normalize offset
 36030                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36031                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36032                                  ;						;smr;SS Override
 36033                                  ;	retn
 36034                                  
 36035                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36036                                  Align_Buffer:
 36037 00006965 89D3                    	MOV	BX,DX			; copy offset
 36038 00006967 51                      	push	cx			; don't stomp on count
 36039 00006968 B104                    	MOV	CL,4			; bits to shift bytes->para
 36040 0000696A D3EB                    	SHR	BX,CL			; get number of paragraphs
 36041 0000696C 59                      	pop	cx			; get count back
 36042 0000696D 8CD8                    	MOV	AX,DS			; get original segment
 36043 0000696F 01D8                    	ADD	AX,BX			; get new segment
 36044 00006971 8ED8                    	MOV	DS,AX			; in seg register
 36045 00006973 83E20F                  	AND	DX,0Fh			; normalize offset
 36046 00006976 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36047 0000697B 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36048                                  						;smr;SS Override
 36049 00006980 C3                      	retn
 36050                                  
 36051                                  ; 20/05/2019 - Retro DOS v4.0
 36052                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36053                                  
 36054                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36055                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36056                                  
 36057                                  ;BREAK <$WRITE - write to a file handle>
 36058                                  ;----------------------------------------------------------------------------
 36059                                  ;
 36060                                  ;   Assembler usage:
 36061                                  ;	    LDS     DX, buf
 36062                                  ;	    MOV     CX, count
 36063                                  ;	    MOV     BX, handle
 36064                                  ;	    MOV     AH, Write
 36065                                  ;	    INT     int_command
 36066                                  ;	  AX has number of bytes written
 36067                                  ;   Errors:
 36068                                  ;	    AX = write_invalid_handle
 36069                                  ;	       = write_access_denied
 36070                                  ;
 36071                                  ;   Returns in register AX
 36072                                  ;
 36073                                  ;----------------------------------------------------------------------------
 36074                                  
 36075                                  _$WRITE:
 36076 00006981 BE[8C35]                	MOV	SI,DOS_WRITE
 36077 00006984 EB98                    	JMP	short ReadDo
 36078                                  
 36079                                  ;BREAK <$LSEEK - move r/w pointer>
 36080                                  ;----------------------------------------------------------------------------
 36081                                  ;
 36082                                  ;   Assembler usage:
 36083                                  ;	    MOV     DX, offsetlow
 36084                                  ;	    MOV     CX, offsethigh
 36085                                  ;	    MOV     BX, handle
 36086                                  ;	    MOV     AL, method
 36087                                  ;	    MOV     AH, LSeek
 36088                                  ;	    INT     int_command
 36089                                  ;	  DX:AX has the new location of the pointer
 36090                                  ;   Error returns:
 36091                                  ;	    AX = error_invalid_handle
 36092                                  ;	       = error_invalid_function
 36093                                  ;   Returns in registers DX:AX
 36094                                  ;
 36095                                  ;----------------------------------------------------------------------------
 36096                                  
 36097                                  ; 21/05/2019 - Retro DOS v4.0
 36098                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36099                                  
 36100                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36101                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36102                                  
 36103                                  _$LSEEK:
 36104 00006986 E8DE00                  	call	CheckOwner		; get system file entry
 36105                                  
 36106                                  	; 17/12/2022
 36107                                  ;LSeekError:
 36108                                  	;JNC	short CHKOWN_OK		;AN002;
 36109                                  	;JMP	short ReadError		;AN002; error return
 36110                                  	; 17/12/2022
 36111                                  	; 02/06/2019
 36112 00006989 72A0                    	jc	short ReadError
 36113                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36114                                  	;JNC	short CHKOWN_OK		;AN002;
 36115                                  	;JMP	short ReadError		;AN002; error return
 36116                                  
 36117                                  CHKOWN_OK:
 36118                                  					;AN002;
 36119 0000698B 3C02                    	CMP	AL,2			; is the seek value correct?
 36120 0000698D 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36121                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36122 0000698F 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36123                                  					;smr;SS Override
 36124                                  	;mov	al,1
 36125 00006995 B001                    	mov	al,error_invalid_function ; invalid method
 36126                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36127                                  LSeekError2:
 36128 00006997 EB92                    	jmp	short ReadError
 36129                                  
 36130                                  LSeekDisp:
 36131 00006999 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36132 0000699B 720A                    	JB	short LSeekStore	; just store CX:DX
 36133 0000699D 771B                    	JA	short LSeekEOF		; seek from end of file
 36134                                  	;add	dx,[es:di+21]
 36135 0000699F 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36136                                  	;adc	cx,[es:di+23]
 36137 000069A3 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36138                                  LSeekStore:
 36139 000069A7 89C8                    	MOV	AX,CX			; AX:DX
 36140 000069A9 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36141                                  LSeekSetpos:
 36142                                  	;mov	[es:di+21],ax
 36143 000069AA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36144                                  	;mov	[es:di+23],dx
 36145 000069AE 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36146 000069B2 E8DA9A                  	call	Get_User_Stack
 36147                                  	;mov	[si+6],dx
 36148 000069B5 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36149                                  	;jmp	SYS_RET_OK		; successful return
 36150                                  	; 25/06/2019
 36151                                  	;jmp	SYS_RET_OK_clc
 36152                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36153                                  	;jmp	SYS_RET_OK_clc
 36154                                  LSeekOk:
 36155 000069B8 EBA8                    	jmp     short Read_Okj
 36156                                  
 36157                                  LSeekEOF:
 36158                                  	;;test	word [es:di+5],8000h
 36159                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36160                                  	; 21/05/2019 - Retro DOS v4.0
 36161 000069BA 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36162 000069BF 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36163                                  LOCAL_LSeek:
 36164                                  	;add	dx,[es:di+17]
 36165 000069C1 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36166                                  	;adc	cx,[es:di+19]
 36167 000069C5 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36168 000069C9 EBDC                    	JMP	short LSeekStore	; go and set the position
 36169                                  
 36170                                  Check_LSeek_Mode:
 36171                                  	;;test	word [es:di+2],8000h
 36172                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36173                                  	; 21/05/2019
 36174 000069CB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36175 000069D0 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36176                                  	;mov	ax,[es:di+2]
 36177 000069D2 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36178                                  	;and	ax, 0F0h
 36179 000069D6 25F000                  	AND	AX,SHARING_MASK
 36180                                  	;cmp	ax,40h
 36181 000069D9 83F840                  	CMP	AX,SHARING_DENY_NONE
 36182 000069DC 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36183                                  	;cmp	ax,30h
 36184 000069DE 83F830                  	CMP	AX,SHARING_DENY_READ
 36185 000069E1 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36186                                  NET_LSEEK:
 36187                                  ;	JMP	short LOCAL_LSeek
 36188                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36189                                  	;CallInstall Net_Lseek,MultNET,33
 36190                                  	;JNC	short LSeekSetPos
 36191                                  
 36192 000069E3 B82111                  	mov     ax,1121h
 36193 000069E6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36194                                  			; CX:DX = offset (in bytes) from end
 36195                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36196                                  			; SS = DOS CS
 36197                                  			; Return: CF set on error
 36198                                  			; CF clear if successful, DX:AX = new file position
 36199 000069E8 73C0                    	jnb     short LSeekSetpos
 36200                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36201                                  	;jmp	SYS_RET_ERR
 36202                                  ;LSeekError3:
 36203                                  	; 17/12/2022
 36204                                  LSeekError:
 36205                                  	;jmp	short LSeekError2
 36206                                  DupErr:	; 17/12/2022
 36207 000069EA E9659C                  	jmp	SYS_RET_ERR
 36208                                  
 36209                                  ;BREAK <FileTimes - modify write times on a handle>
 36210                                  ;----------------------------------------------------------------------------
 36211                                  ;
 36212                                  ;   Assembler usage:
 36213                                  ;	    MOV AH, FileTimes (57H)
 36214                                  ;	    MOV AL, func
 36215                                  ;	    MOV BX, handle
 36216                                  ;	; if AL = 1 then then next two are mandatory
 36217                                  ;	    MOV CX, time
 36218                                  ;	    MOV DX, date
 36219                                  ;	    INT 21h
 36220                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36221                                  ;	; for the handle.
 36222                                  ;
 36223                                  ;	AL=02		 get extended attributes
 36224                                  ;	   BX=handle
 36225                                  ;	   CX=size of buffer (0, return max size )
 36226                                  ;	   DS:SI query list (si=-1, selects all EA)
 36227                                  ;	   ES:DI buffer to hold EA list
 36228                                  ;
 36229                                  ;	AL=03		 get EA name list
 36230                                  ;	   BX=handle
 36231                                  ;	   CX=size of buffer (0, return max size )
 36232                                  ;	   ES:DI buffer to hold name list
 36233                                  ;
 36234                                  ;	AL=04		 set extended attributes
 36235                                  ;	   BX=handle
 36236                                  ;	   ES:DI buffer of EA list
 36237                                  ;
 36238                                  ;
 36239                                  ;   Error returns:
 36240                                  ;	    AX = error_invalid_function
 36241                                  ;	       = error_invalid_handle
 36242                                  ;
 36243                                  ;----------------------------------------------------------------------------
 36244                                  
 36245                                  ; 21/05/2019 - Retro DOS v4.0
 36246                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36247                                  
 36248                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36249                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36250                                  
 36251                                  _$FILE_TIMES:
 36252                                  	; 13/07/2018 - Retro DOS v3.0
 36253                                  
 36254                                  	; MSDOS 3.3
 36255                                  	;cmp	al,2			; correct subfunction ?
 36256                                  	;jb	short ft1
 36257                                  
 36258                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36259                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36260                                  						;SS Overr
 36261                                  	;;mov	al,1
 36262                                  	;mov	al,error_invalid_function ; give bad return
 36263                                  	;jmp	SYS_RET_ERR
 36264                                  
 36265                                  	; MSDOS 6.0
 36266 000069ED 3C02                    	cmp	al,2			; correct subfunction ?
 36267 000069EF 7340                    	jae	short inval_func
 36268                                  ;ft1:
 36269 000069F1 E87300                  	call	CheckOwner		; get sft
 36270                                  	; 17/12/2022
 36271 000069F4 72F4                    	jc	short LSeekError	; bad handle
 36272                                  
 36273 000069F6 08C0                    	or	al,al			; get time/date ?
 36274 000069F8 7515                    	jnz	short ft_set_time
 36275                                  
 36276                                  ;------ here we get the time & date from the sft for the user
 36277                                  
 36278 000069FA FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36279                                  	;mov	cx,[es:di+13]
 36280 000069FB 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36281                                  	;mov	dx,[es:di+15]
 36282 000069FF 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36283 00006A03 FB                      	sti
 36284 00006A04 E8889A                  	call	Get_User_Stack
 36285                                  	;mov	[si+4],cx
 36286 00006A07 894C04                  	mov	[si+user_env.user_CX],cx
 36287                                  	;mov	[si+6],dx
 36288 00006A0A 895406                  	mov	[si+user_env.user_DX],dx
 36289 00006A0D EB1F                    	jmp	short ok_ret
 36290                                  
 36291                                  ;------ here we set the time in sft
 36292                                  
 36293                                  ft_set_time:
 36294 00006A0F E846A9                  	call    ECritSFT
 36295                                  	;mov	[es:di+13],cx
 36296 00006A12 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36297                                  	;mov	[es:di+15],dx
 36298 00006A16 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36299                                  
 36300 00006A1A 31C0                    	xor	ax, ax
 36301 00006A1C 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36302                                  
 36303                                  ;------ set the flags in SFT entry
 36304                                  	;and	word [es:di+5],0FFBFh
 36305                                  	; 18/12/2022
 36306                                  	;and	byte [es:di+5],0BFh
 36307 00006A21 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36308                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36309                                  							; mark file as dirty
 36310                                  	;or	word [es:di+5],4000h
 36311                                  	; 17/12/2022
 36312                                  	;or	byte [es:di+6],40h
 36313 00006A26 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36314                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36315                                  							; ask close not to
 36316                                  							;   bother about date
 36317                                  							;   and time
 36318 00006A2B E845A9                  	call	LCritSFT
 36319                                  ok_ret:
 36320                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36321                                  	; 17/12/2022
 36322 00006A2E E9189C                  	jmp	SYS_RET_OK
 36323                                  	;jmp	short LSeekOk
 36324                                  
 36325                                  inval_func:
 36326                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36327 00006A31 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36328                                  						;SS Overr
 36329                                  	;mov	al,1
 36330 00006A37 B001                    	mov	al,error_invalid_function ; give bad return
 36331                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36332                                  ft_error:
 36333                                  	;;jmp	SYS_RET_ERR
 36334                                  	;jmp	short LSeekError3
 36335                                  	; 17/12/2022
 36336 00006A39 EBAF                    	jmp	short LSeekError
 36337                                  
 36338                                  ; 21/05/2019 - Retro DOS v4.0
 36339                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36340                                  
 36341                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36342                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36343                                  
 36344                                  ;BREAK <$DUP - duplicate a jfn>
 36345                                  ;----------------------------------------------------------------------------
 36346                                  ;
 36347                                  ;   Assembler usage:
 36348                                  ;	    MOV     BX, fh
 36349                                  ;	    MOV     AH, Dup
 36350                                  ;	    INT     int_command
 36351                                  ;	  AX has the returned handle
 36352                                  ;   Errors:
 36353                                  ;	    AX = dup_invalid_handle
 36354                                  ;	       = dup_too_many_open_files
 36355                                  ;
 36356                                  ;----------------------------------------------------------------------------
 36357                                  
 36358                                  _$DUP:
 36359 00006A3B 89D8                    	MOV	AX,BX			; save away old handle in AX
 36360 00006A3D E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36361                                  DupErrorCheck:
 36362 00006A40 72A8                    	JC	short DupErr		; nope, bye
 36363 00006A42 06                      	push	es
 36364 00006A43 57                      	push	di			; save away SFT
 36365 00006A44 5E                      	pop	si			; into convenient place DS:SI
 36366 00006A45 1F                      	pop	ds
 36367 00006A46 93                      	XCHG	AX,BX			; get back old handle
 36368 00006A47 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36369 00006A4A 729E                    	JC	short DupErr		; errors go home
 36370 00006A4C E85FC0                  	call	DOS_Dup_Direct
 36371 00006A4F E800FD                  	call	pJFNFromHandle		; get pointer
 36372 00006A52 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36373 00006A55 881C                    	MOV	[SI],BL			; stuff in new SFT
 36374                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36375                                  	;jmp	SYS_RET_OK		; and go home
 36376 00006A57 EBD5                    	jmp	short ok_ret
 36377                                  
 36378                                  	; 17/12/2022
 36379                                  ;DupErr:
 36380                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36381                                  	;;jmp	SYS_RET_ERR
 36382                                  	;jmp	short ft_error
 36383                                  
 36384                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36385                                  ;----------------------------------------------------------------------------
 36386                                  ;
 36387                                  ;   Assembler usage:
 36388                                  ;	    MOV     BX, fh
 36389                                  ;	    MOV     CX, newfh
 36390                                  ;	    MOV     AH, Dup2
 36391                                  ;	    INT     int_command
 36392                                  ;   Error returns:
 36393                                  ;	    AX = error_invalid_handle
 36394                                  ;
 36395                                  ;----------------------------------------------------------------------------
 36396                                  
 36397                                  _$DUP2:
 36398 00006A59 53                      	push	bx
 36399 00006A5A 51                      	push	cx			; save source
 36400 00006A5B 89CB                    	MOV	BX,CX			; get one to close
 36401 00006A5D E8AAFD                  	call	_$CLOSE			; close destination handle
 36402 00006A60 5B                      	pop	bx
 36403 00006A61 58                      	pop	ax			; old in AX, new in BX
 36404 00006A62 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36405 00006A65 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36406                                  
 36407                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36408                                  ;----------------------------------------------------------------------------
 36409                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36410                                  ;   process without the process knowing it (delete/rename of open files, for
 36411                                  ;   example), it is possible for the redirector to issue a call to a handle
 36412                                  ;   that it soes not rightfully own. We check here to make sure that the
 36413                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36414                                  ;   SFFromHandle to really make sure that the SFT is good.
 36415                                  ;
 36416                                  ;	ENTRY	BX has the handle
 36417                                  ;		User_ID is the current user
 36418                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36419                                  ;		Carry Set => AX has error code
 36420                                  ;	USES	none
 36421                                  ;----------------------------------------------------------------------------
 36422                                  
 36423                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36424                                  	; 21/05/2019 - Retro DOS v4.0
 36425                                  CheckOwner:
 36426                                  	; 13/07/2018 - Retro DOS v3.0
 36427                                  
 36428 00006A67 E805FD                  	call	SFFromHandle
 36429 00006A6A 721B                    	jc	short co_ret_label	; retc
 36430                                  
 36431 00006A6C 50                      	push	ax
 36432                                  
 36433                                  	; MSDOS 6.0
 36434                                  
 36435                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36436                                  ;SR; are shared across multiple VMs in win386.
 36437                                  
 36438 00006A6D 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36439 00006A73 7404                    	jz	short no_win386		;win386 is not present
 36440 00006A75 31C0                    	xor	ax,ax			;set the zero flag
 36441 00006A77 EB08                    	jmp	short _skip_win386	
 36442                                  
 36443                                  no_win386:
 36444 00006A79 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36445                                  	;cmp	ax,[es:di+47]
 36446 00006A7D 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36447                                  
 36448                                  _skip_win386:
 36449 00006A81 58                      	pop	ax
 36450                                  	
 36451                                  	; 17/12/2022
 36452 00006A82 7403                    	jz	short co_ret_label
 36453                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36454                                  	;jnz	short CheckOwner_err
 36455                                  	;retn
 36456                                  	
 36457                                  CheckOwner_err:
 36458                                  	;mov	al,6
 36459 00006A84 B006                    	mov	al,error_invalid_handle
 36460 00006A86 F9                      	stc
 36461                                  
 36462                                  co_ret_label:
 36463 00006A87 C3                      	retn
 36464                                  
 36465                                  ;============================================================================
 36466                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36467                                  ;============================================================================
 36468                                  ; Retro	DOS v3.0 - 11/07/2018
 36469                                  ; 21/05/2019 - Retro DOS v4.0
 36470                                  
 36471                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36472                                  ;	NAME	MACRO
 36473                                  
 36474                                  ;	Microsoft Confidential
 36475                                  ;	Copyright (C) Microsoft Corporation 1991
 36476                                  ;	All Rights Reserved.
 36477                                  
 36478                                  ;**	MACRO.ASM
 36479                                  ;
 36480                                  ;	$AssignOper
 36481                                  ;	FIND_DPB
 36482                                  ;	InitCDS
 36483                                  ;	$UserOper
 36484                                  ;	GetVisDrv
 36485                                  ;	GetThisDrv
 36486                                  ;	GetCDSFromDrv
 36487                                  ;
 36488                                  ;   Revision history:
 36489                                  ;
 36490                                  ;	Created: MZ 4 April 1983
 36491                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36492                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36493                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36494                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36495                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36496                                  ;				    aliasing.
 36497                                  ;
 36498                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36499                                  ;   each valid drive letter the text of the current directory on that drive.
 36500                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36501                                  ;   be at the root. A current directory is either the raw local directory
 36502                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36503                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36504                                  ;
 36505                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36506                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36507                                  ;   this and all * are expanded into ?'s.
 36508                                  ;
 36509                                  ;   The second part of name translation involves subtree aliasing. A list of
 36510                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36511                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36512                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36513                                  ;   replaced with the other subtree in the pair.
 36514                                  ;
 36515                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36516                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36517                                  ;   The output of the previous translation is examined to see if any of the
 36518                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36519                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36520                                  ;   'mount' one device under another.
 36521                                  ;
 36522                                  ;   The final form of name translation involves the mapping of a user's
 36523                                  ;   logical drive number into the internal physical drive. This is
 36524                                  ;   accomplished by converting the drive number into letter:CON, performing
 36525                                  ;   the above translation and then converting the character back into a drive
 36526                                  ;   number.
 36527                                  ;
 36528                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36529                                  ;   take a path and form the real text of the pathname with all . and ..
 36530                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36531                                  ;   TransPath.
 36532                                  ;
 36533                                  ;	A000	version 4.00  Jan. 1988
 36534                                  
 36535                                  ;Installed = TRUE
 36536                                  
 36537                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36538                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36539                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36540                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36541                                  ;					; current drive)
 36542                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36543                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36544                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36545                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36546                                  ;	I_need	MYNAME,16		; machine name
 36547                                  ;	I_need	MYNUM,WORD		; machine number
 36548                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36549                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36550                                  ;	I_need	DrvErr,BYTE		; drive error
 36551                                  
 36552                                  ;BREAK <$AssignOper -- Set up a Macro>
 36553                                  ;----------------------------------------------------------------------------
 36554                                  ; Inputs:
 36555                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36556                                  ;	AL = 01 set assign mode 		    (SetMode)
 36557                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36558                                  ;	AL = 03 Define Macro (attch start)
 36559                                  ;	    BL = Macro type
 36560                                  ;	       = 0 alias
 36561                                  ;	       = 1 file/device
 36562                                  ;	       = 2 drive
 36563                                  ;	       = 3 Char device -> network
 36564                                  ;	       = 4 File device -> network
 36565                                  ;	    DS:SI -> ASCIZ source name
 36566                                  ;	    ES:DI -> ASCIZ destination name
 36567                                  ;	AL = 04 Cancel Macro
 36568                                  ;	    DS:SI -> ASCIZ source name
 36569                                  ;	AL = 05 Modified get attach list entry
 36570                                  ;	AL = 06 Get ifsfunc item
 36571                                  ;	AL = 07 set in_use of a drive's CDS
 36572                                  ;	     DL = drive number, 0=default  0=A,,
 36573                                  ;	AL = 08 reset in_use of a drive's CDS
 36574                                  ;	     DL = drive number, 0=A, 1=B,,,
 36575                                  ; Function:
 36576                                  ;	Do macro stuff
 36577                                  ; Returns:
 36578                                  ;	Std Xenix style error return
 36579                                  ;----------------------------------------------------------------------------
 36580                                  
 36581                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36582                                  	; 21/05/2019 - Retro DOS v4.0
 36583                                  _$AssignOper:
 36584                                  	; MSDOS 6.0
 36585 00006A88 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36586 00006A8A 7525                    	JNZ	short chk08		      ; no			;AN000;
 36587                                  srinuse:								;AN000;
 36588 00006A8C 50                      	PUSH	AX			      ; save al 		;AN000;
 36589 00006A8D 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36590 00006A8F E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36591 00006A92 58                      	POP	AX			      ; 			;AN000;
 36592 00006A93 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36593                                  	;cmp	word [si+45h],0
 36594 00006A95 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36595 00006A99 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36596 00006A9B 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36597 00006A9D 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36598                                  	;or	word [si+43h],4000h
 36599                                  	; 17/12/2022
 36600                                  	;or	byte [si+44h],40h
 36601 00006A9F 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36602                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36603 00006AA3 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36604                                  resetdrv:
 36605                                  	;and	word [si+43h],0BFFFh									;AN000;
 36606                                  	; 18/12/2022
 36607 00006AA5 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36608                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36609 00006AA9 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36610                                  
 36611                                  	; 17/12/2022
 36612                                  baddrv: 								;AN000;
 36613 00006AAB B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36614                                  
 36615                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36616                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36617                                  	; 17/12/2022
 36618                                  	; 21/05/2019
 36619                                  ASS_ERR:
 36620 00006AAE E9A19B                  	jmp	SYS_RET_ERR
 36621                                  
 36622                                  chk08:									;AN000;
 36623 00006AB1 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36624 00006AB3 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36625                                  
 36626                                    ;IF	NOT INSTALLED
 36627                                  	;transfer NET_ASSOPER
 36628                                    ;ELSE
 36629                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36630 00006AB5 50                      	PUSH	AX
 36631                                  	;mov	ax,111Eh
 36632                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36633 00006AB6 B81E11                  	mov	ax,(MultNET*256)+30
 36634 00006AB9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36635                                  			; SS = DOS CS
 36636                                  			; STACK: WORD function to execute
 36637                                  			; Return: CF set on error, AX = error code
 36638                                  			; STACK unchanged
 36639 00006ABB 5B                      	POP	BX			; Don't zap error code in AX
 36640 00006ABC 72F0                    	JC	short ASS_ERR
 36641                                  okdone:
 36642 00006ABE E9889B                  	jmp	SYS_RET_OK
 36643                                  
 36644                                  	; 17/12/2022
 36645                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36646                                  ;ASS_ERR:
 36647                                  	;jmp	SYS_RET_ERR
 36648                                  
 36649                                    ;ENDIF
 36650                                  
 36651                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36652                                  ;----------------------------------------------------------------------------
 36653                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36654                                  ;
 36655                                  ;	ENTRY	AL has drive number A = 0
 36656                                  ;	EXIT	'C' set
 36657                                  ;		    No DPB for this drive number
 36658                                  ;		'C' clear
 36659                                  ;		    DS:SI points to DPB for drive
 36660                                  ;	USES	SI, DS, Flags
 36661                                  ;----------------------------------------------------------------------------
 36662                                  
 36663                                  	; 21/05/2019 - Retro DOS v4.0
 36664                                  FIND_DPB:
 36665 00006AC1 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36666                                  fdpb5:	
 36667 00006AC6 83FEFF                  	CMP	SI,-1
 36668 00006AC9 7409                    	JZ	short fdpb10
 36669 00006ACB 3A04                    	cmp	al,[si]
 36670                                  	;CMP	AL,[SI+DPB.DRIVE]
 36671 00006ACD 7406                    	jz	short ret_label15	; Carry clear (retz)
 36672                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36673                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36674 00006ACF C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36675 00006AD2 EBF2                    	JMP	short fdpb5
 36676                                  fdpb10:	
 36677 00006AD4 F9                      	STC
 36678                                  ret_label15:
 36679 00006AD5 C3                      	retn
 36680                                  
 36681                                  ;	Break <InitCDS - set up an empty CDS>
 36682                                  ;----------------------------------------------------------------------------
 36683                                  ;**	InitCDS - Setup an Empty CDS
 36684                                  ;
 36685                                  ;	ENTRY	ThisCDS points to CDS
 36686                                  ;		AL has uppercase drive letter
 36687                                  ;	EXIT	ThisCDS is now empty
 36688                                  ;		(ES:DI) = CDS
 36689                                  ;		'C' set if no DPB associated with drive
 36690                                  ;	USES	AH,ES,DI, Flags
 36691                                  ;----------------------------------------------------------------------------
 36692                                  
 36693                                  ; 21/05/2019 - Retro DOS v4.0
 36694                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36695                                  
 36696                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36697                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36698                                  
 36699                                  InitCDS:
 36700                                  	; 19/08/2018
 36701                                  	; 05/08/2018 - Retro DOS v3.0
 36702                                  	; MSDOS 6.0
 36703 00006AD6 50                      	push	ax			; save (AL) for caller
 36704 00006AD7 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36705                                  	;mov	word [es:di+67],0
 36706 00006ADC 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36707 00006AE2 2C40                    	SUB	AL,"A"-1                ; A = 1
 36708 00006AE4 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36709 00006AE9 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36710 00006AEB 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36711 00006AEC 50                      	PUSH	AX			; save drive number for later
 36712 00006AED 0441                    	add	al,"A"
 36713 00006AEF B43A                    	MOV	AH,':'
 36714 00006AF1 268905                  	mov	[ES:DI],ax
 36715                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36716                                  	;mov	ax,"\"
 36717                                  	;mov	[es:di+2],ax
 36718                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36719 00006AF4 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36720                                  	;or	word [es:di+67],4000h
 36721                                  	;or	byte [es:di+68],40h
 36722 00006AFA 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36723 00006AFF 29C0                    	sub	ax,ax
 36724                                  	;MOV	[es:di+73],ax ; 0
 36725 00006B01 26894549                	MOV	[ES:DI+curdir.ID],ax
 36726                                  	;mov	[es:di+75],ax ; 0
 36727 00006B05 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36728 00006B09 B002                    	mov	al,2
 36729                                  	;mov	[es:di+79],aX ; 2
 36730 00006B0B 2689454F                	MOV	[ES:DI+curdir.end],ax
 36731 00006B0F 58                      	POP	AX			; (al) = drive number
 36732 00006B10 1E                      	push	ds
 36733 00006B11 56                      	push	si
 36734 00006B12 E8ACFF                  	call	FIND_DPB
 36735 00006B15 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36736                                  	;mov	[es:di+69],si
 36737 00006B17 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36738                                  	;mov	[es:di+71],ds
 36739 00006B1B 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36740                                  icds5:	
 36741 00006B1F 5E                      	pop	si
 36742 00006B20 1F                      	pop	ds
 36743                                  icdsx:	
 36744 00006B21 58                      	pop	ax
 36745                                  RET45:
 36746 00006B22 C3                      	retn
 36747                                  
 36748                                  ;Break <$UserOper - get/set current user ID (for net)>
 36749                                  ;----------------------------------------------------------------------------
 36750                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36751                                  ;	maintain this string and do no verifications.
 36752                                  ;
 36753                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36754                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36755                                  ;		DS:DX is user string pointer (calls 1,2)
 36756                                  ;		ES:DI is user buffer (call 3)
 36757                                  ;		BX is assign index (calls 2,3,4,5)
 36758                                  ;		CX is user number (call 1)
 36759                                  ;		DX is flag word (call 4)
 36760                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36761                                  ;			and user CX is set to the user number
 36762                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36763                                  ;		If AL = 5 then DX is flag word
 36764                                  ;----------------------------------------------------------------------------
 36765                                  
 36766                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36767                                  	; 21/05/2019 - Retro DOS v4.0
 36768                                  _$UserOper:
 36769                                  	; 05/08/2018 - Retro DOS v3.0
 36770                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36771 00006B23 50                      	PUSH	AX
 36772 00006B24 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36773 00006B26 58                      	POP	AX
 36774 00006B27 7211                    	JB	short UserGet 		; return to user the string
 36775 00006B29 742E                    	JZ	short UserSet 		; set the current user
 36776 00006B2B 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36777 00006B2D 763D                    	JBE	short UserPrint		; yep
 36778                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36779 00006B2F 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36780                                  					; Extended Error Locus
 36781                                  	;error	error_invalid_function	; not 0,1,2,3
 36782                                  	;mov	al,1
 36783 00006B35 B001                    	MOV	AL,error_invalid_function
 36784                                  useroper_error:
 36785                                  	; 17/12/2022
 36786                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36787 00006B37 E9189B                  	JMP	SYS_RET_ERR
 36788                                  	;jmp	short ASS_ERR
 36789                                  
 36790                                  UserGet:
 36791                                  ; Transfer MYNAME to DS:DX
 36792                                  ; Set Return CX to MYNUM
 36793 00006B3A 1E                      	PUSH	DS			; switch registers
 36794 00006B3B 07                      	POP	ES
 36795 00006B3C 89D7                    	MOV	DI,DX			; destination
 36796 00006B3E 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36797 00006B43 E84999                  	call	Get_User_Stack
 36798                                  	;mov	[si+4],cx
 36799 00006B46 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36800 00006B49 16                      	push	ss			; point to DOSDATA
 36801 00006B4A 1F                      	pop	ds
 36802 00006B4B BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36803                                  UserMove:
 36804 00006B4E B90F00                  	MOV	CX,15
 36805 00006B51 F3A4                    	REP	MOVSB			; blam.
 36806 00006B53 31C0                    	XOR	AX,AX			; 16th byte is 0
 36807 00006B55 AA                      	STOSB
 36808                                  UserBye:
 36809 00006B56 E9F09A                  	jmp	SYS_RET_OK		; no errors here
 36810                                  
 36811                                  UserSet:
 36812                                  ; Transfer DS:DX to MYNAME
 36813                                  ; CX to MYNUM
 36814 00006B59 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36815 00006B5E 89D6                    	MOV	SI,DX			; user space has source
 36816 00006B60 16                      	push	ss
 36817 00006B61 07                      	pop	es
 36818 00006B62 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36819 00006B65 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36820 00006B6A EBE2                    	JMP	short UserMove
 36821                                  
 36822                                  UserPrint:
 36823                                  
 36824                                    ;IF NOT Installed
 36825                                    ;	transfer PRINTER_GETSET_STRING
 36826                                    ;ELSE
 36827 00006B6C 50                      	PUSH	AX
 36828                                  	;mov	ax,111Fh
 36829                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36830 00006B6D B81F11                  	mov	ax,(MultNET<<8)|31
 36831 00006B70 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36832                                  			; STACK: WORD function
 36833                                  			; Return: CF set on error, AX = error code
 36834                                  			; STACK unchanged
 36835 00006B72 5A                      	POP	DX			; Clean stack
 36836                                  	;JNC	short OKPA
 36837 00006B73 73E1                    	jnc	short UserBye ; 21/05/2019
 36838                                  	; 17/12/2022
 36839 00006B75 EBC0                    	jmp	short useroper_error
 36840                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36841                                  	;jnb     short OKPA
 36842                                  	;jmp     short useroper_error
 36843                                  
 36844                                  	; 17/12/2022
 36845                                  ;OKPA:
 36846                                  ;	jmp	short UserBye
 36847                                  
 36848                                    ;ENDIF
 36849                                  
 36850                                  
 36851                                  ;Break	<GetVisDrv - return visible drive>
 36852                                  ;----------------------------------------------------------------------------
 36853                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36854                                  ;
 36855                                  ;   Inputs:	AL has drive identifier (0=default)
 36856                                  ;   Outputs:	Carry Set - invalid drive/macro
 36857                                  ;		Carry Clear - AL has physical drive (0=A)
 36858                                  ;		    ThisCDS points to CDS
 36859                                  ;   Registers modified: AL
 36860                                  ;----------------------------------------------------------------------------
 36861                                  
 36862                                  	; 21/05/2019 - Retro DOS v4.0
 36863                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36864                                  
 36865                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36866                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36867                                  GetVisDrv:
 36868                                  	; 05/08/2018 - Retro DOS v3.0
 36869                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36870 00006B77 E81900                  	CALL	GETTHISDRV		; get inuse drive
 36871 00006B7A 72A6                    	jc	short RET45
 36872 00006B7C 1E                      	push	ds
 36873 00006B7D 56                      	push	si
 36874 00006B7E 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36875                                  	;test	word [si+67],2000h
 36876                                  	; 17/12/2022
 36877                                  	;test	byte [si+68],20h
 36878 00006B83 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36879                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36880 00006B87 5E                      	pop	si
 36881 00006B88 1F                      	pop	ds
 36882 00006B89 7497                    	jz	short RET45		; if not spliced, return OK
 36883                                  	; MSDOS 6.0
 36884                                  	;mov	byte [ss:DrvErr],0Fh
 36885 00006B8B 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36886 00006B91 F9                      	STC				; signal error
 36887 00006B92 C3                      	retn
 36888                                  
 36889                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36890                                  ;----------------------------------------------------------------------------
 36891                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36892                                  ;	macro pointer
 36893                                  ;
 36894                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36895                                  ;   Outputs:
 36896                                  ;		Carry Set - invalid drive/macro
 36897                                  ;		Carry Clear - AL has physical drive (0=A)
 36898                                  ;		   ThisCDS points to macro
 36899                                  ;   Registers modified: AL
 36900                                  ;----------------------------------------------------------------------------
 36901                                  
 36902                                  	; 21/05/2019 - Retro DOS v4.0
 36903                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36904                                  
 36905                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36906                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36907                                  GETTHISDRV:
 36908                                  	; 05/08/2018
 36909                                  	; 12/07/2018 - Retro DOS v3.0
 36910                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36911                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36912 00006B93 08C0                    	OR	AL,AL			; are we using default drive?
 36913 00006B95 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36914 00006B97 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36915                                  	;INC	ax			; Counteract next instruction
 36916                                  	; 04/09/2018
 36917                                  	;inc	al
 36918                                  	; 07/12/2022
 36919 00006B9B 40                      	inc	ax
 36920                                  GTD10:	
 36921                                  	;DEC	AX
 36922                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36923 00006B9C 48                      	dec	ax			; 0 = A
 36924                                  	;dec	al
 36925 00006B9D 1E                      	PUSH	DS			; save world
 36926 00006B9E 56                      	PUSH	SI
 36927                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36928 00006B9F 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36929 00006BA5 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36930 00006BAB 7420                    	JZ	SHORT GTD20		; Logical
 36931 00006BAD 50                      	PUSH	AX
 36932 00006BAE 06                      	PUSH	ES
 36933 00006BAF 57                      	PUSH	DI
 36934 00006BB0 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36935                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36936 00006BB7 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36937 00006BBC 0441                    	ADD	AL,'A'
 36938 00006BBE E815FF                  	CALL	InitCDS			; InitCDS(c);
 36939                                  	;test	word [es:di+67],4000h
 36940                                  	; 17/12/2022
 36941                                  	;test	byte [es:di+68],40h
 36942 00006BC1 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36943                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36944 00006BC6 5F                      	POP	DI
 36945 00006BC7 07                      	POP	ES
 36946 00006BC8 58                      	POP	AX
 36947 00006BC9 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36948 00006BCB EB18                    	JMP	SHORT GTDX		; carry clear
 36949                                  GTD20:
 36950 00006BCD E81800                  	CALL	GetCDSFromDrv
 36951 00006BD0 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36952                                  	;test	word [si+43h],4000h
 36953                                  	; 17/12/2022
 36954                                  	;test	byte [si+44h],40h
 36955 00006BD2 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36956                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36957 00006BD6 750D                    	JNZ	SHORT GTDX		; carry clear
 36958                                  GTD30:	
 36959                                  	; 21/05/2019
 36960                                  	; MSDOS 6.0
 36961 00006BD8 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36962 00006BDA 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36963                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36964 00006BDE 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36965 00006BE4 F9                      	STC
 36966                                  GTDX:	
 36967 00006BE5 5E                      	POP	SI			; restore world
 36968 00006BE6 1F                      	POP	DS
 36969 00006BE7 C3                      	RETN
 36970                                   
 36971                                  
 36972                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 36973                                  ;----------------------------------------------------------------------------
 36974                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 36975                                  ;	pointer, returning an error if the drive number is greater than the
 36976                                  ;	number of CDS's
 36977                                  ;
 36978                                  ;   Inputs:	AL is physical unit # A=0...
 36979                                  ;   Outputs:	Carry Set if Bad Drive
 36980                                  ;		Carry Clear
 36981                                  ;		    DS:SI -> CDS
 36982                                  ;		    [THISCDS] = DS:SI
 36983                                  ;   Registers modified: DS,SI
 36984                                  ;----------------------------------------------------------------------------
 36985                                  
 36986                                  	; 21/05/2019 - Retro DOS v4.0
 36987                                  GetCDSFromDrv:
 36988 00006BE8 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 36989 00006BED 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 36990 00006BEF F9                      	STC				; signal error
 36991 00006BF0 C3                      	RETN				; bye
 36992                                  GetCDS:
 36993 00006BF1 53                      	PUSH	BX
 36994 00006BF2 50                      	PUSH	AX
 36995 00006BF3 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 36996                                  	;mov	bl,81 ; MSDOS 3.3
 36997                                  	;mov	bl,88 ; MSDOS 6.0 
 36998 00006BF8 B358                    	MOV	BL,curdir.size		; size in convenient spot
 36999 00006BFA F6E3                    	MUL	BL			; get net offset
 37000 00006BFC 01C6                    	ADD	SI,AX			; convert to true pointer
 37001 00006BFE 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37002 00006C03 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37003 00006C08 58                      	POP	AX
 37004 00006C09 5B                      	POP	BX
 37005 00006C0A F8                      	CLC				; no error
 37006 00006C0B C3                      	RETN				; bye!
 37007                                  
 37008                                  ;============================================================================
 37009                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37010                                  ;============================================================================
 37011                                  ; Retro	DOS v3.0 - 12/07/2018
 37012                                  ; 22/05/2019 - Retro DOS v4.0
 37013                                  
 37014                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37015                                  ;----------------------------------------------------------------------------
 37016                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37017                                  ;       gritty substitution.
 37018                                  ;
 37019                                  ;   Inputs:     DS:DX - pointer to FCB
 37020                                  ;               ES:DI - point to destination
 37021                                  ;   Outputs:    Carry Set - invalid path in final map
 37022                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37023                                  ;                   Sattrib is set from possibly extended FCB
 37024                                  ;                   ExtFCB set if extended FCB found
 37025                                  ;   Registers modified: most
 37026                                  ;----------------------------------------------------------------------------
 37027                                  
 37028                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37029                                  TransFCB:
 37030                                  	; 22/05/2019 - Retro DOS v4.0
 37031                                  	; 12/07/2018 - Retro DOS v3.0
 37032                                  	;LocalVar FCBTmp,16
 37033                                  	;ENTER
 37034 00006C0C 55                      	push	bp
 37035 00006C0D 89E5                    	mov	bp,sp
 37036                                  	;sub	sp,15	; MSDOS 3.3
 37037 00006C0F 83EC10                  	sub	sp,16	; MSDOS 6.0
 37038 00006C12 16                      	push	ss
 37039 00006C13 07                      	pop	es
 37040 00006C14 06                      	push	es
 37041 00006C15 57                      	push	di
 37042                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37043                                  	;LEA	DI,FCBTmp 
 37044 00006C16 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37045 00006C19 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37046 00006C1F 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37047 00006C25 E89FB0                  	call	GetExtended             ; get FCB, extended or not
 37048                                  	; 06/12/2022
 37049 00006C28 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37050 00006C2A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37051 00006C2D 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37052 00006C31 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37053                                  GetDrive:
 37054 00006C37 AC                      	lodsb				; get drive byte
 37055 00006C38 E858FF                  	call	GETTHISDRV
 37056 00006C3B 722A                    	jc	short BadPack
 37057 00006C3D E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37058                                  
 37059                                  ; Scan the source to see if there are any illegal chars
 37060                                  
 37061                                  	;mov	bx,CharType		; load lookup table
 37062 00006C40 B90B00                  	mov	cx,11
 37063 00006C43 56                      	push	si			; back over name, ext
 37064                                  FCBScan:
 37065 00006C44 AC                      	lodsb				; get a byte
 37066                                  	
 37067                                  	; 09/08/2018
 37068                                  	;;xlat	byte [es:bx]
 37069                                  	;es	xlat
 37070                                  
 37071                                  	; 22/05/2019 - Retro DOS v4.0	
 37072 00006C45 E816E5                  	call	GetCharType		; get flags
 37073                                  
 37074                                  	;test	al,8	
 37075 00006C48 A808                    	test	al,FFCB
 37076 00006C4A 741B                    	jz	short BadPack
 37077                                  NextCh: 
 37078 00006C4C E2F6                    	loop	FCBScan
 37079 00006C4E 5E                      	pop	si
 37080 00006C4F 89FB                    	mov	bx,di
 37081 00006C51 E8CCB4                  	call	PackName                ; crunch the path
 37082 00006C54 5F                      	pop	di			; get original destination
 37083 00006C55 07                      	pop	es
 37084 00006C56 16                      	push	ss			; get DS addressability
 37085 00006C57 1F                      	pop	ds
 37086                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37087                                  	;LEA	SI,FCBTmp		; point at new pathname
 37088 00006C58 8D76F0                  	lea	si,[bp-16]
 37089 00006C5B 803F00                  	cmp	byte [bx],0
 37090 00006C5E 7407                    	jz	short BadPack
 37091 00006C60 55                      	push	bp
 37092 00006C61 E80E00                  	call	TransPathSet            ; convert the path
 37093 00006C64 5D                      	pop	bp
 37094 00006C65 7303                    	jnc	short FCBRet		; bye with transPath error code
 37095                                  BadPack:
 37096 00006C67 F9                      	STC
 37097                                  	;mov	al,3
 37098 00006C68 B003                    	MOV     AL,error_path_not_found
 37099                                  FCBRet: 
 37100                                  	;LEAVE
 37101 00006C6A 89EC                    	mov	sp,bp
 37102 00006C6C 5D                      	pop	bp
 37103                                  TransPath_retn:
 37104 00006C6D C3                      	retn
 37105                                  
 37106                                  ; 12/07/2018 - Retro DOS v3.0
 37107                                  
 37108                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37109                                  ;----------------------------------------------------------------------------
 37110                                  ;
 37111                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37112                                  ;       substitution, insertion of current directory and fixing . and ..
 37113                                  ;       entries. Perform splicing. Allow input string to match splice
 37114                                  ;       exactly.
 37115                                  ;
 37116                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37117                                  ;       matches splice.
 37118                                  ;
 37119                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37120                                  ;
 37121                                  ;   The following anomalous behaviour is required:
 37122                                  ;
 37123                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37124                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37125                                  ;       Raw net I/O sets ThisCDS => NULL.
 37126                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37127                                  ;
 37128                                  ;   Other behaviour:
 37129                                  ;
 37130                                  ;       ThisCDS set up.
 37131                                  ;       FatRead done on local CDS.
 37132                                  ;       ValidateCDS done on local CDS.
 37133                                  ;
 37134                                  ;   Brief flowchart:
 37135                                  ;
 37136                                  ;       if fSharing then
 37137                                  ;           set up DummyCDS (ThisCDS)
 37138                                  ;           canonicalize (sets cMeta)
 37139                                  ;           splice
 37140                                  ;           fatRead
 37141                                  ;           return
 37142                                  ;       if \\ or d:\\ lead then
 37143                                  ;           set up null CDS (ThisCDS)
 37144                                  ;           canonicalize (sets cMeta)
 37145                                  ;           return
 37146                                  ;       if device then
 37147                                  ;           set up dummyCDS (ThisCDS)
 37148                                  ;           canonicalize (sets cMeta)
 37149                                  ;           return
 37150                                  ;       if file then
 37151                                  ;           getCDS (sets (ThisCDS) from name)
 37152                                  ;           validateCDS (may reset current dir)
 37153                                  ;           Copy current dir
 37154                                  ;           canonicalize (set cMeta)
 37155                                  ;           splice
 37156                                  ;           generate correct CDS (ThisCDS)
 37157                                  ;           if local then
 37158                                  ;               fatread
 37159                                  ;           return
 37160                                  ;
 37161                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37162                                  ;               DI - point to buffer in DOSDATA
 37163                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37164                                  ;                   syntax, etc. or user FAILed to I 24.
 37165                                  ;               WFP_Start - points to beginning of buffer
 37166                                  ;               Curr_Dir_End - points to end of current dir in path
 37167                                  ;               DS - DOSDATA
 37168                                  ;   Registers modified: most
 37169                                  ;
 37170                                  ;----------------------------------------------------------------------------
 37171                                  
 37172                                  ; 22/05/2019
 37173                                  ; 13/05/2019 - Retro DOS v4.0
 37174                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37175                                  
 37176                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37177                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37178                                  
 37179                                  TransPath:
 37180 00006C6E 30C0                    	XOR     AL,AL
 37181 00006C70 EB02                    	JMP     SHORT SetSplice
 37182                                  TransPathSet:
 37183 00006C72 B0FF                    	MOV     AL,-1
 37184                                  SetSplice:
 37185 00006C74 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37186 00006C78 B0FF                    	MOV     AL,-1
 37187                                  TransPathNoSet:
 37188 00006C7A 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37189 00006C7E 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37190 00006C84 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37191 00006C89 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37192 00006C90 16                      	push	ss
 37193 00006C91 07                      	pop	es
 37194                                  	;lea	bp,[di+134]
 37195 00006C92 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37196                                  ;
 37197                                  ; if this is through the server dos call, fsharing is set. We set up a
 37198                                  ; dummy cds and let the operation go.
 37199                                  ;
 37200 00006C96 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37201 00006C9C 7435                    	JZ	short CheckUNC		; skip to UNC check
 37202                                  ;
 37203                                  ; ES:DI point to buffer
 37204                                  ;
 37205 00006C9E E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37206 00006CA1 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37207 00006CA4 722A                    	jc	short NoPath
 37208 00006CA6 E80B03                  	CALL	TextFromDrive		; drop in new
 37209 00006CA9 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37210 00006CAC E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37211 00006CAF 72BC                    	jc	short TransPath_retn	; errors
 37212                                  ;
 37213                                  ; Perform splices for net guys.
 37214                                  ;
 37215 00006CB1 16                      	push	ss
 37216 00006CB2 1F                      	pop	ds
 37217 00006CB3 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37218 00006CB7 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37219 00006CBC 7403                    	JZ	short NoServerSplice
 37220 00006CBE E83102                  	CALL    Splice
 37221                                  NoServerSplice:
 37222 00006CC1 16                      	push	ss
 37223 00006CC2 1F                      	pop	ds                      ; for FATREAD
 37224 00006CC3 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37225 00006CC7 E88EA6                  	call	ECritDisk
 37226 00006CCA E804EB                  	call	FATREAD_CDS
 37227 00006CCD E8A3A6                  	call	LCritDisk
 37228                                  NoPath:
 37229                                  	;mov	al,3
 37230 00006CD0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37231 00006CD2 C3                      	retn				; any errors are in Carry flag
 37232                                  
 37233                                  ; Let the network decide if the name is for a spooled device. It will map
 37234                                  ; the name if so.
 37235                                  
 37236                                  CheckUNC:
 37237 00006CD3 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37238                                  	;CallInstall NetSpoolCheck,MultNET,35
 37239 00006CDA B82311                  	mov	ax,1123h
 37240 00006CDD CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37241                                  			; DS:SI -> ASCIZ filename to canonicalize
 37242                                  			; ES:DI -> 128-byte buffer for qualified name
 37243                                  			; Return: CF set if not resolved
 37244 00006CDF 7329                    	JNC	short UNCDone
 37245                                  
 37246                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37247                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37248                                  ; input, then the name has been changed to the remote spooler by the above net
 37249                                  ; call. Also, there may be a drive in front of the \\.
 37250                                  
 37251                                  NO_CHECK:
 37252 00006CE1 E8B902                  	CALL    DriveFromText		; eat drive letter
 37253 00006CE4 50                      	PUSH    AX                      ; save it
 37254 00006CE5 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37255 00006CE7 E891E4                  	call    PATHCHRCMP              ; convert to normal form
 37256 00006CEA 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37257 00006CEC E88CE4                  	call    PATHCHRCMP              ; convert to normal form
 37258 00006CEF 751F                    	JNZ	short CheckDevice	; not a path char
 37259 00006CF1 38C4                    	CMP     AH,AL                   ; are they same?
 37260 00006CF3 751B                    	JNZ	short CheckDevice	; nope
 37261                                  
 37262                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37263                                  ; local machine root path
 37264                                  
 37265 00006CF5 58                      	POP     AX
 37266 00006CF6 A5                      	MOVSW                           ; get the lead \\.
 37267                                  UNCCpy:
 37268 00006CF7 AC                      	LODSB                           ; get a byte
 37269 00006CF8 E82BE4                   	call	UCase                   ;AN000;; convert the char
 37270 00006CFB 08C0                    	OR      AL,AL
 37271 00006CFD 740E                    	JZ	short UNCTerm		; end of string. All done.
 37272 00006CFF E879E4                  	call    PATHCHRCMP              ; is it a path char?
 37273 00006D02 89FB                    	MOV     BX,DI                   ; backup position
 37274 00006D04 AA                      	STOSB
 37275 00006D05 75F0                    	JNZ	short UNCCpy		; no, go copy
 37276 00006D07 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37277                                  UNCDone:
 37278 00006D0A 16                      	push	ss
 37279 00006D0B 1F                      	pop	ds
 37280 00006D0C C3                       	retn				; return error code
 37281                                  UNCTerm:
 37282 00006D0D AA                      	STOSB                           ;AN000;
 37283 00006D0E EBFA                    	JMP	short UNCDone		;AN000;
 37284                                  
 37285                                  CheckDevice:
 37286                                  
 37287                                  ; Check DS:SI for device. First eat any path stuff
 37288                                  
 37289 00006D10 58                      	POP     AX                      ; retrieve drive info
 37290 00006D11 803C00                  	CMP     BYTE [SI],0		; check for null file
 37291 00006D14 7504                    	JNZ	short CheckPath
 37292                                  	;mov	al,2 
 37293 00006D16 B002                    	MOV     AL,error_file_not_found ; bad file error
 37294 00006D18 F9                      	STC                             ; signal error on null input
 37295 00006D19 C3                      	RETN				; bye!
 37296                                  CheckPath:
 37297 00006D1A 50                      	push	ax
 37298 00006D1B 55                      	push	bp			; save drive number
 37299                                  
 37300                                  
 37301                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37302                                  %if 0
 37303                                  	; MSDOS 6.0
 37304                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37305                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37306                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37307                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37308                                  ;;;end up having a 5D in the opcode's displacement field. The
 37309                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37310                                  ;;;
 37311                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37312                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37313                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37314                                  ;;;
 37315                                  ;;;More info:
 37316                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37317                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37318                                  ;;;
 37319                                  	call	no5Dshere
 37320                                  start5Dhack:
 37321                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37322                                  backfrom5Dhack:
 37323                                  
 37324                                  %endif
 37325                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37326                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37327 00006D1C E8B2D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37328                                  
 37329 00006D1F 5D                      	pop	bp
 37330 00006D20 58                      	pop	ax			; get drive letter back
 37331 00006D21 731C                    	JNC	short DoFile		; yes we have a file.
 37332                                  
 37333                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37334                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37335                                  ; call.
 37336                                  
 37337 00006D23 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37338 00006D29 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37339 00006D2C 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37340                                  
 37341                                  ; Now that we have noted that we have a device, we put it into a form that
 37342                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37343                                  ; string. We relax this to state that if the d:\ is present then the path
 37344                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37345                                  ; a device.
 37346                                  
 37347 00006D32 E87F02                  	CALL    TextFromDrive
 37348 00006D35 B02F                    	MOV     AL,'/'                  ; path sep.
 37349 00006D37 AA                      	STOSB
 37350 00006D38 E8E0A4                  	call	StrCpy			; move remainder of string
 37351                                  
 37352 00006D3B F8                      	CLC                             ; everything OK.
 37353 00006D3C 16                      	push	ss
 37354 00006D3D 1F                      	pop	ds                      ; remainder of OK stuff
 37355                                  DoFile_retn:
 37356 00006D3E C3                      	retn
 37357                                  
 37358                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37359                                  %if 0
 37360                                  
 37361                                  no5Dshere:
 37362                                  	; 10/08/2018
 37363                                  	jmp	CheckThisDevice		; snoop for device
 37364                                  %endif
 37365                                  
 37366                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37367                                  
 37368                                  ; We have a file. Get the raw CDS.
 37369                                  
 37370                                  DoFile:
 37371                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37372                                  
 37373 00006D3F E835FE                  	call	GetVisDrv               ; get proper CDS
 37374                                  	;mov	al,3 
 37375 00006D42 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37376 00006D44 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37377                                  
 37378                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37379                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37380                                  ; Use the one that we are going to use (ES:DI).
 37381                                  
 37382                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37383 00006D46 1E                      	push	ds
 37384 00006D47 56                      	push	si
 37385 00006D48 06                      	push	es
 37386 00006D49 57                      	push	di
 37387 00006D4A E8C8D5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37388                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37389 00006D4D 5F                      	pop	di
 37390 00006D4E 07                      	pop	es
 37391 00006D4F 5E                      	pop	si
 37392 00006D50 1F                      	pop	ds
 37393                                  	;mov	al,3
 37394 00006D51 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37395                                  	;retc				; someone failed an operation
 37396 00006D53 72E9                    	jc	short DoFile_retn
 37397                                  
 37398                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37399                                  ; current directory. Copy it in.
 37400                                  
 37401 00006D55 1E                      	push	ds
 37402 00006D56 56                      	push	si
 37403 00006D57 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37404 00006D5C 89FB                    	MOV     BX,DI                   ; point to destination
 37405                                  	;add	bx,[si+79] ; MSDOS 6.0
 37406 00006D5E 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37407                                  	;lea	bp,[di+134]
 37408 00006D61 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37409                                  					;AN000;
 37410 00006D65 E8C2A4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37411 00006D68 4F                      	DEC     DI                      ; point to NUL byte
 37412                                  
 37413                                  ; Make sure that there is a path char at end.
 37414                                  
 37415 00006D69 B05C                    	MOV     AL,'\'
 37416 00006D6B 263845FF                	CMP     [ES:DI-1],AL
 37417 00006D6F 7401                    	JZ	short GetOrig
 37418 00006D71 AA                      	STOSB
 37419                                  
 37420                                  ; Now get original string.
 37421                                  
 37422                                  GetOrig:
 37423 00006D72 4F                      	DEC     DI                      ; point to path char
 37424 00006D73 5E                      	pop	si
 37425 00006D74 1F                      	pop	ds
 37426                                  
 37427                                  ; BX points to the end of the root part of the CDS (at where a path char
 37428                                  ; should be). Now, we decide whether we use this root or extend it with the
 37429                                  ; current directory. See if the input string begins with a leading 
 37431 00006D75 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37432 00006D78 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37433 00006D7A 08C0                    	OR      AL,AL                   ; end of string?
 37434 00006D7C 7410                    	JZ	short DoCanon		; yes, skip.
 37435                                  ;
 37436                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37437                                  ; to this root. Make sure that there is a path char there and advance the
 37438                                  ; source string over all leading \'s.
 37439                                  ;
 37440 00006D7E 89DF                    	MOV     DI,BX                   ; back up to root point.
 37441                                  SkipPath:
 37442 00006D80 AC                      	LODSB
 37443 00006D81 E8F7E3                  	call    PATHCHRCMP
 37444 00006D84 74FA                    	JZ	short SkipPath
 37445 00006D86 4E                      	DEC     SI
 37446 00006D87 08C0                    	OR      AL,AL
 37447 00006D89 7403                    	JZ	short DoCanon
 37448                                  
 37449                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37450                                  ; for yucks.
 37451                                  
 37452                                  PathAssure:
 37453 00006D8B B05C                    	MOV     AL,'\'	; 5Ch
 37454 00006D8D AA                      	STOSB
 37455                                  
 37456                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37457                                  ; BP is the max extent to advance DI
 37458                                  ; BX is the backup limit for ..
 37459                                  
 37460                                  DoCanon:
 37461 00006D8E E85200                  	CALL    Canonicalize            ; wham.
 37462                                  	;retc				; badly formatted path.
 37463 00006D91 72AB                    	jc	short DoFile_retn
 37464                                  
 37465                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37466                                  ; to wfp_start and do string substitution. BP is still the max position in
 37467                                  ; buffer.
 37468                                  
 37469 00006D93 16                      	push	ss
 37470 00006D94 1F                      	pop	ds
 37471 00006D95 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37472 00006D99 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37473 00006D9D E81C02                  	CALL    PathPref                ; is there a prefix?
 37474 00006DA0 7514                    	JNZ	short DoSplice		; no, do splice
 37475                                  
 37476                                  ; We have a match. Check to see if we ended in a path char.
 37477                                  
 37478 00006DA2 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37479 00006DA5 E8D3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37480 00006DA8 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37481                                  Pathline:                               ; 2/13/KK
 37482 00006DAA 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37483 00006DAE 7406                    	JZ	short DoSplice
 37484 00006DB0 47                      	INC     DI                      ; point to after current path char
 37485 00006DB1 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37486                                  
 37487                                  ; Splice the result.
 37488                                  
 37489                                  DoSplice:
 37490 00006DB6 16                      	push	ss
 37491 00006DB7 1F                      	pop	ds			; back to DOSDATA
 37492 00006DB8 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37493 00006DBC 31C9                    	XOR     CX,CX
 37494 00006DBE F606[7105]FF            	TEST	byte [FSPLICE],-1
 37495 00006DC3 7403                    	JZ	short SkipSplice
 37496 00006DC5 E82A01                  	CALL    Splice                  ; replaces in place.
 37497                                  SkipSplice:
 37498                                  
 37499                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37500                                  ; device.
 37501                                  
 37502 00006DC8 16                      	push	ss
 37503 00006DC9 1F                      	pop	ds
 37504 00006DCA C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37505                                  	;test	word [es:di+67],8000h
 37506                                  	; 17/12/2022
 37507                                  	;test	byte [es:di+68],80h
 37508 00006DCE 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37509                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37510 00006DD3 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37511 00006DD5 E30B                    	JCXZ    Done
 37512 00006DD7 E87EA5                  	call	ECritDisk
 37513 00006DDA E8F4E9                  	call	FATREAD_CDS
 37514 00006DDD E893A5                  	call	LCritDisk
 37515                                  	;mov	al, 3
 37516 00006DE0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37517                                  Done:   
 37518 00006DE2 C3                      	retn                         ; any errors in carry flag.
 37519                                  
 37520                                  ; 13/07/2018
 37521                                  
 37522                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37523                                  ;----------------------------------------------------------------------------
 37524                                  ;   Canonicalize - copy path removing . and .. entries.
 37525                                  ;
 37526                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37527                                  ;               ES:DI - point to buffer
 37528                                  ;               BX - backup limit (offset from ES) points to slash
 37529                                  ;               BP - end of buffer
 37530                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37531                                  ;                   syntax, etc.
 37532                                  ;               Carry Clear -
 37533                                  ;                   DS:DI - advanced to end of string
 37534                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37535                                  ;   Registers modified: AX CX DX (in addition to those above)
 37536                                  ;----------------------------------------------------------------------------
 37537                                  
 37538                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37539                                  
 37540                                  Canonicalize:
 37541                                  
 37542                                  ; We copy all leading path separators.
 37543                                  
 37544 00006DE3 AC                      	LODSB                           ;   while (PathChr (*s))
 37545 00006DE4 E894E3                  	call    PATHCHRCMP
 37546 00006DE7 7507                    	JNZ	short CanonDec
 37547 00006DE9 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37548 00006DEB 7319                    	JAE	short CanonBad		;           goto error;
 37549 00006DED AA                      	STOSB
 37550 00006DEE EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37551                                  CanonDec:
 37552 00006DF0 4E                      	DEC     SI
 37553                                  
 37554                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37555                                  ; component (no leading path separators) and ES:DI being the destination
 37556                                  ; buffer.
 37557                                  
 37558                                  CanonLoop:
 37559                                  
 37560                                  ; If we are at the end of the source string, then we need to check to see that
 37561                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37562                                  ; Otherwise, do nothing
 37563                                  
 37564 00006DF1 31C0                    	XOR     AX,AX
 37565 00006DF3 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37566 00006DF5 751A                    	JNZ	short DoComponent
 37567 00006DF7 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37568 00006DFC 7505                    	JNZ	short DoTerminate
 37569 00006DFE B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37570 00006E00 AA                      	STOSB
 37571 00006E01 88E0                    	MOV     AL,AH
 37572                                  DoTerminate:
 37573 00006E03 AA                      	STOSB                           ;           *d++ = 0;
 37574 00006E04 F8                      	CLC                             ;           return (0);
 37575 00006E05 C3                      	retn
 37576                                  
 37577                                  CanonBad:
 37578 00006E06 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37579                                  	;mov	al,3
 37580 00006E09 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37581 00006E0B 7402                    	JZ	short PathEnc		; path character encountered in string
 37582                                  	;mov	al,2
 37583 00006E0D B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37584                                  PathEnc:
 37585 00006E0F F9                      	STC
 37586                                  CanonBad_retn:
 37587 00006E10 C3                      	retn
 37588                                  
 37589                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37590                                  ; it to 8.3
 37591                                  
 37592                                  DoComponent:                            ;           }
 37593 00006E11 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37594 00006E14 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37595                                  
 37596                                  ; We special case the . and .. cases.  These will be backed up.
 37597                                  
 37598                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37599 00006E16 26833D2E                	CMP	WORD [ES:DI],002Eh
 37600 00006E1A 7408                    	JZ	short Skip1
 37601                                  	;CMP	WORD PTR ES:[DI],'..'
 37602 00006E1C 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37603 00006E21 750A                    	JNZ	short CanonNormal
 37604 00006E23 4F                      	DEC     DI                      ;           d--;
 37605                                  Skip1:  
 37606 00006E24 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37607                                  	;mov	al,3
 37608 00006E27 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37609 00006E29 72E5                    	jc	short CanonBad_retn
 37610 00006E2B EB02                    	JMP     short CanonPath         ;           }
 37611                                  
 37612                                  ; We have a normal path. Advance destination pointer over it.
 37613                                  
 37614                                  CanonNormal:                            ;       else
 37615 00006E2D 01CF                    	ADD     DI,CX                   ;           d += ct;
 37616                                  
 37617                                  ; We have successfully copied a component. We are now pointing at a path
 37618                                  ; sep char or are pointing at a nul or are pointing at something else.
 37619                                  ; If we point at something else, then we have an error.
 37620                                  
 37621                                  CanonPath:
 37622 00006E2F E81600                  	CALL    PathSep
 37623 00006E32 75D2                    	JNZ	short CanonBad		; something else...
 37624                                  
 37625                                  ; Copy the first path char we see.
 37626                                  
 37627 00006E34 AC                      	LODSB                           ; get the char
 37628 00006E35 E843E3                  	call    PATHCHRCMP              ; is it path char?
 37629 00006E38 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37630 00006E3A 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37631 00006E3C 73C8                    	JAE	short CanonBad		; yep, error.
 37632 00006E3E AA                      	STOSB                           ; copy the one byte
 37633                                  
 37634                                  ; Skip all remaining path chars
 37635                                  
 37636                                  CanonPathLoop:
 37637 00006E3F AC                      	LODSB                           ; get next byte
 37638 00006E40 E838E3                  	call    PATHCHRCMP              ; path char again?
 37639 00006E43 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37640 00006E45 4E                      	DEC     SI                      ; back up
 37641 00006E46 EBA9                    	JMP	short  CanonLoop	; go copy component
 37642                                  
 37643                                  ;BREAK <PathSep - determine if char is a path separator>
 37644                                  ;----------------------------------------------------------------------------
 37645                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37646                                  ;   Inputs:     DS:SI - point to a char
 37647                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37648                                  ;               Zero set if AL is / \ or NUL
 37649                                  ;               Zero reset otherwise
 37650                                  ;   Registers modified: AL
 37651                                  ;----------------------------------------------------------------------------
 37652                                  
 37653                                  PathSep:
 37654 00006E48 8A04                    	MOV     AL,[SI]                 ; get the character
 37655                                  PathSepGotCh:				; already have character
 37656 00006E4A 08C0                    	OR      AL,AL                   ; test for zero
 37657 00006E4C 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37658                                  	;call	PATHCHRCMP              ; check for path character
 37659                                  	;retn				; and return HIS determination
 37660                                  	; 18/12/2022
 37661 00006E4E E92AE3                  	jmp	PATHCHRCMP
 37662                                  
 37663                                  
 37664                                  ;BREAK <SkipBack - move backwards to a path separator>
 37665                                  ;----------------------------------------------------------------------------
 37666                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37668                                  ;               BX has current directory back up limit (point to a / \)
 37669                                  ;   Outputs:    ES:DI backed up to point to a path char
 37670                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37671                                  ;               Carry set if illegal backup
 37672                                  ;               Carry Clear if ok
 37673                                  ;   Registers modified: DI,AL
 37674                                  ;----------------------------------------------------------------------------
 37675                                  
 37676                                  SkipBack:
 37677 00006E51 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37678 00006E53 720B                    	JB	short SkipBad		;       if (d < dlim)
 37679 00006E55 4F                      	DEC     DI                      ;           goto err;
 37680 00006E56 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37681 00006E59 E81FE3                  	call    PATHCHRCMP              ;           break;
 37682 00006E5C 75F3                    	JNZ	short SkipBack		;       }
 37683 00006E5E F8                      	CLC                             ;   return (0);
 37684 00006E5F C3                      	retn				;
 37685                                  SkipBad:                                ;err:
 37686                                  	;mov	al,3
 37687 00006E60 B003                    	MOV     AL,error_path_not_found ; bad path error
 37688 00006E62 F9                      	STC                             ;   return (-1);
 37689 00006E63 C3                      	retn				;
 37690                                  
 37691                                  ;Break <CopyComponent - copy out a file path component>
 37692                                  ;----------------------------------------------------------------------------
 37693                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37694                                  ;
 37695                                  ;   Inputs:     DS:SI - source path
 37696                                  ;               ES:DI - destination
 37697                                  ;               ES:BP - end of buffer
 37698                                  ;   Outputs:    Carry Set - too long
 37699                                  ;               Carry Clear - DS:SI moved past component
 37700                                  ;                   CX has length of destination
 37701                                  ;   Registers modified: AX,CX,DX
 37702                                  ;----------------------------------------------------------------------------
 37703                                  
 37704                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37705                                  
 37706                                  CopyComponent:
 37707                                  
 37708                                  %define CopyBP	 [BP]		; word
 37709                                  %define CopyD	 [BP+2]		; dword
 37710                                  %define CopyDoff [BP+2]		; word
 37711                                  %define CopyS	 [BP+6]		; dword
 37712                                  %define CopySoff [BP+6]		; word
 37713                                  %define CopyTemp [BP+10]	; byte
 37714                                  
 37715 00006E64 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37716 00006E67 1E                      	push	ds
 37717 00006E68 56                      	push	si
 37718 00006E69 06                      	push	es
 37719 00006E6A 57                      	push	di
 37720 00006E6B 55                      	push	bp
 37721 00006E6C 89E5                    	MOV     BP,SP
 37722 00006E6E B42E                    	MOV     AH,'.'
 37723 00006E70 AC                      	LODSB
 37724 00006E71 AA                      	STOSB
 37725 00006E72 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37726 00006E74 7518                    	JNZ	short NormalComp
 37727 00006E76 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37728 00006E79 740B                    	JZ	short NulTerm
 37729                                  TryTwoDot:
 37730 00006E7B AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37731 00006E7C AA                      	STOSB
 37732 00006E7D 38E0                    	CMP     AL,AH
 37733 00006E7F 7557                    	JNZ	short CopyBad
 37734 00006E81 E8C4FF                  	CALL    PathSep
 37735 00006E84 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37736                                  NulTerm:                                ;               return -1;
 37737 00006E86 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37738 00006E88 AA                      	STOSB
 37739 00006E89 897606                  	MOV     CopySoff,SI
 37740 00006E8C EB47                    	JMP     SHORT _GoodRet		;       }
 37741                                  NormalComp:                             ;   else {
 37742 00006E8E 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37743 00006E91 E825E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37744 00006E94 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37745 00006E97 743F                    	JZ	short CopyBad		;           return (-1);
 37746 00006E99 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37747 00006E9F 7510                    	JNZ	short DoPack
 37748 00006EA1 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37749 00006EA4 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37750 00006EA9 7F2D                    	JG	short CopyBad		;               return (-1);
 37751 00006EAB 7504                    	JNZ	short DoPack		;           else
 37752 00006EAD 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37753 00006EAF 742F                    	JZ	short CopyBadPath	;               return (-1);
 37754                                  DoPack:                                 ;           }
 37755 00006EB1 897606                  	MOV     CopySoff,SI ; [bp+6]
 37756 00006EB4 16                      	push	ss
 37757 00006EB5 1F                      	pop	ds
 37758 00006EB6 BE[4B05]                	MOV     SI,NAME1
 37759 00006EB9 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37760 00006EBC 57                      	push	di
 37761 00006EBD E860B2                  	call	PackName                ;       PackName (Name1, temp);
 37762 00006EC0 5F                      	pop	di
 37763 00006EC1 E86FA3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37764 00006EC4 49                      	DEC     CX
 37765 00006EC5 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37766                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37767                                  	;cmp	cx,[bp+0]
 37768                                  	; 15/12/2022
 37769                                  	;cmp	cx,[bp]
 37770 00006EC8 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37771 00006ECB 730B                    	JAE	short CopyBad		;           return (-1);
 37772 00006ECD 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37773 00006ECF C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37774 00006ED2 E855A3                  	call	FStrCpy
 37775                                  _GoodRet:				;       }
 37776 00006ED5 F8                      	CLC
 37777 00006ED6 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37778                                  CopyBad:
 37779 00006ED8 F9                      	STC
 37780 00006ED9 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37781                                  	;mov	al,2
 37782 00006EDC B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37783 00006EDE 7503                    	JNZ	short CopyEnd
 37784                                  CopyBadPath:
 37785 00006EE0 F9                      	STC
 37786                                  	;mov	al,3
 37787 00006EE1 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37788                                  CopyEnd:
 37789 00006EE3 5D                      	pop	bp
 37790 00006EE4 5F                      	pop	di
 37791 00006EE5 07                      	pop	es
 37792 00006EE6 5E                      	pop	si
 37793 00006EE7 1F                      	pop	ds
 37794 00006EE8 9F                      	LAHF
 37795 00006EE9 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37796 00006EEC E844A3                  	call	StrLen
 37797 00006EEF 49                      	DEC     CX
 37798 00006EF0 9E                      	SAHF
 37799 00006EF1 C3                      	retn
 37800                                  
 37801                                  ; 14/05/2019 - Retro DOS v4.0
 37802                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37803                                  
 37804                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37805                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37806                                  
 37807                                  ;Break <Splice - pseudo mount by string substitution>
 37808                                  ;----------------------------------------------------------------------------
 37809                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37810                                  ;       ThisCDS to point to physical drive CDS.
 37811                                  ;   Inputs:     DS:SI point to string
 37812                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37813                                  ;   Outputs:    DS:SI points to thisCDS
 37814                                  ;               ES:DI points to DPB
 37815                                  ;               String at DS:SI may be reduced in length by removing prefix
 37816                                  ;               and substituting drive letter.
 37817                                  ;               CX = 0 If no splice done
 37818                                  ;               CX <> 0 otherwise
 37819                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37820                                  ;                   left alone
 37821                                  ;               ThisDPB points to proper DPB
 37822                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37823                                  ;----------------------------------------------------------------------------
 37824                                  
 37825                                  Splice:
 37826 00006EF2 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37827 00006EF8 7469                    	JZ	short AllDone
 37828 00006EFA 36FF36[A205]            	push	word [SS:THISCDS]
 37829 00006EFF 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37830 00006F04 1E                      	push	ds
 37831 00006F05 56                      	push	si
 37832 00006F06 5F                      	pop	di
 37833 00006F07 07                      	pop	es
 37834 00006F08 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37835                                  SpliceScan:
 37836 00006F0A E8DBFC                  	call	GetCDSFromDrv
 37837 00006F0D 724A                    	JC	short SpliceDone
 37838 00006F0F FEC0                    	INC     AL
 37839                                  	; 17/12/2022
 37840                                  	;test	byte [si+68],20h
 37841 00006F11 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37842                                  	;;test	word [si+67],2000h
 37843                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37844 00006F15 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37845 00006F17 57                      	push	di
 37846 00006F18 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37847 00006F1B 7403                    	JZ	short SpliceFound	;
 37848                                  SpliceSkip:
 37849 00006F1D 5F                      	pop	di
 37850 00006F1E EBEA                    	JMP	short SpliceScan	;               continue;
 37851                                  SpliceFound:
 37852 00006F20 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37853 00006F24 7508                    	JNZ	short SpliceDo
 37854 00006F26 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37855 00006F2C 75EF                    	JNZ	short SpliceSkip
 37856                                  SpliceDo:
 37857 00006F2E 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37858 00006F30 06                      	push	es
 37859 00006F31 1F                      	pop	ds
 37860 00006F32 5F                      	pop	di
 37861 00006F33 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37862 00006F36 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37863 00006F3A 09C0                    	OR      AX,AX
 37864 00006F3C 7808                    	JS	short NoPoke
 37865 00006F3E 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37866 00006F40 29F0                    	SUB     AX,SI
 37867 00006F42 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37868                                  NoPoke:
 37869 00006F46 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37870 00006F49 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37871 00006F4B B05C                    	MOV     AL,"\"
 37872 00006F4D AA                      	STOSB
 37873                                  SpliceCopy:                             ;               strcpy (src, p);
 37874 00006F4E E8D9A2                  	call	FStrCpy
 37875 00006F51 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37876 00006F54 80C901                  	OR      CL,1                    ; signal splice done.
 37877 00006F57 EB0C                    	JMP     SHORT DoSet             ;               return;
 37878                                  SpliceDone:                             ;               }
 37879 00006F59 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37880 00006F5E 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37881                                  AllDone:
 37882 00006F63 31C9                    	XOR     CX,CX
 37883                                  DoSet:
 37884 00006F65 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37885                                  	;les	di,[si+69]
 37886 00006F6A C47C45                  	LES     DI,[SI+curdir.devptr]	
 37887 00006F6D 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37888 00006F72 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37889                                  Splice_retn:
 37890 00006F77 C3                      	retn
 37891                                  
 37892                                  ; 15/05/2019 - Retro DOS v4.0
 37893                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37894                                  
 37895                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37896                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37897                                  
 37898                                  ;Break <$NameTrans - partially process a name>
 37899                                  ;----------------------------------------------------------------------------
 37900                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37901                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37902                                  ;   to Transpath playing games with devices, we need to insure that the output
 37903                                  ;   has drive letter and : in it.
 37904                                  ;
 37905                                  ;   Inputs:     DS:SI - source string for translation
 37906                                  ;               ES:DI - pointer to buffer
 37907                                  ;   Outputs:
 37908                                  ;       Carry Clear
 37909                                  ;               Buffer at ES:DI is filled in with data
 37910                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37911                                  ;       Carry Set
 37912                                  ;               AX = error_path_not_found
 37913                                  ;   Registers modified: all
 37914                                  ;----------------------------------------------------------------------------
 37915                                  
 37916                                  _$NameTrans:
 37917 00006F78 1E                      	push	ds
 37918 00006F79 56                      	push	si
 37919 00006F7A 06                      	push	es
 37920 00006F7B 57                      	push	di
 37921 00006F7C 51                      	push	cx ; MSDOS 6.0
 37922                                  	
 37923                                  	; MSDOS 6.0	
 37924                                  ; M027 - Start
 37925                                  ;
 37926                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37927                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37928                                  ; device if the old call set the volume attribute bit. Note that devname in
 37929                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37930                                  ; and restore CX.
 37931                                  
 37932                                  	;mov	ch,16h
 37933 00006F7D B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37934 00006F7F E8BA02                  	call	SetAttrib
 37935                                  
 37936                                  ; M027 - End
 37937                                  
 37938                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37939 00006F82 BF[BE03]                	MOV     DI,OPENBUF
 37940 00006F85 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37941 00006F88 59                      	pop	cx ; MSDOS 6.0
 37942 00006F89 5F                      	pop     di
 37943 00006F8A 07                      	pop	es
 37944 00006F8B 5E                      	pop     si
 37945 00006F8C 1F                      	pop     ds
 37946 00006F8D 7303                    	JNC	short TransOK
 37947 00006F8F E9C096                  	jmp	SYS_RET_ERR
 37948                                  TransOK:
 37949 00006F92 BE[BE03]                	MOV     SI,OPENBUF
 37950 00006F95 16                      	push	ss
 37951 00006F96 1F                      	pop	ds
 37952                                  ;GotText:
 37953 00006F97 E890A2                  	call	FStrCpy
 37954 00006F9A E9AC96                  	jmp	SYS_RET_OK
 37955                                  
 37956                                  ;Break   <DriveFromText - return drive number from a text string>
 37957                                  ;----------------------------------------------------------------------------
 37958                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37959                                  ;   pointer.
 37960                                  ;
 37961                                  ;   Inputs:     DS:SI point to a text string
 37962                                  ;   Outputs:    AL has drive number
 37963                                  ;               DS:SI advanced
 37964                                  ;   Registers modified: AX,SI.
 37965                                  ;----------------------------------------------------------------------------
 37966                                  
 37967                                  DriveFromText:
 37968 00006F9D 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37969 00006F9F 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37970 00006FA2 74D3                    	jz	short Splice_retn
 37971 00006FA4 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37972 00006FA8 75CD                    	jnz	short Splice_retn
 37973 00006FAA AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 37974 00006FAB 0C20                    	OR      AL,20h
 37975                                  	;sub	al,60h
 37976 00006FAD 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 37977 00006FAF 75C6                    	jnz	short Splice_retn
 37978 00006FB1 B0FF                    	MOV     AL,-1                   ; nuke AL...
 37979 00006FB3 C3                      	retn				;           }
 37980                                  
 37981                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 37982                                  ;----------------------------------------------------------------------------
 37983                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 37984                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 37985                                  ;
 37986                                  ;   Inputs:     AL has 0-based drive number
 37987                                  ;   Outputs:    ES:DI advanced
 37988                                  ;   Registers modified: AX
 37989                                  ;----------------------------------------------------------------------------
 37990                                  
 37991                                  TextFromDrive:
 37992 00006FB4 FEC0                    	INC     AL
 37993                                  TextFromDrive1:
 37994                                  	;add	al,40h
 37995 00006FB6 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 37996 00006FB8 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 37997 00006FBA AB                      	STOSW
 37998                                  PathPref_retn:
 37999 00006FBB C3                      	retn
 38000                                  
 38001                                  ;Break   <PathPref - see if one path is a prefix of another>
 38002                                  ;----------------------------------------------------------------------------
 38003                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38004                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38005                                  ;   prefix: A:\ and A:\FOO
 38006                                  ;
 38007                                  ;   Inputs:     DS:SI potential prefix
 38008                                  ;               ES:DI string
 38009                                  ;   Outputs:    Zero set => prefix found
 38010                                  ;                   DI/SI advanced past matching part
 38011                                  ;               Zero reset => no prefix, DS/SI garbage
 38012                                  ;   Registers modified: CX
 38013                                  ;----------------------------------------------------------------------------
 38014                                  
 38015                                  PathPref:
 38016 00006FBC E882A2                  	call	DStrLen                 ; get length
 38017 00006FBF 49                      	DEC     CX                      ; do not include nul byte
 38018 00006FC0 F3A6                    	REPZ    CMPSB                   ; compare
 38019 00006FC2 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38020 00006FC4 50                      	push	ax			; save char register
 38021 00006FC5 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38022 00006FC8 E8B0E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38023 00006FCB 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38024                                  NotSep:                                 ; 2/13/KK
 38025 00006FCD 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38026 00006FD0 E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38027                                  Prefix:
 38028 00006FD3 58                      	pop	ax			; get back original
 38029 00006FD4 C3                      	retn
 38030                                  
 38031                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38032                                  ;----------------------------------------------------------------------------
 38033                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38034                                  ;     a path separator.
 38035                                  ;
 38036                                  ;     Input:    DS:SI target string (null terminated)
 38037                                  ;     Output:   Zero set => path separator encountered in string
 38038                                  ;               Zero clear => null encountered
 38039                                  ;     Registers modified: SI
 38040                                  ;----------------------------------------------------------------------------
 38041                                  
 38042                                  ScanPathChar:
 38043 00006FD5 AC                      	LODSB                           ; fetch a character
 38044 00006FD6 E871FE                  	call    PathSepGotCh
 38045 00006FD9 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38046                                  	;call	PATHCHRCMP              ; path separator?
 38047                                  	;retn
 38048                                  	; 18/12/2022
 38049 00006FDB E99DE1                  	jmp	PATHCHRCMP
 38050                                  
 38051                                  ;============================================================================
 38052                                  ; FILE.ASM, MSDOS 6.0, 1991
 38053                                  ;============================================================================
 38054                                  ; 14/07/2018 - Retro DOS v3.0
 38055                                  
 38056                                  ; 13/05/2019 - Retro DOS v4.0
 38057                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38058                                  
 38059                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38060                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38061                                  
 38062                                  ; MSDOS 2.11
 38063                                  ;BREAK <$Open - open a file handle>
 38064                                  ;----------------------------------------------------------------------------
 38065                                  ;   Assembler usage:
 38066                                  ;           LDS     DX, Name
 38067                                  ;           MOV     AH, Open
 38068                                  ;           MOV     AL, access
 38069                                  ;           INT     int_command
 38070                                  ;
 38071                                  ;       ACCESS          Function
 38072                                  ;       ------          --------
 38073                                  ;       open_for_read   file is opened for reading
 38074                                  ;       open_for_write  file is opened for writing
 38075                                  ;       open_for_both   file is opened for both reading and writing.
 38076                                  ;
 38077                                  ;   Error returns:
 38078                                  ;           AX = error_invalid_access
 38079                                  ;              = error_file_not_found
 38080                                  ;              = error_access_denied
 38081                                  ;              = error_too_many_open_files
 38082                                  ;----------------------------------------------------------------------------
 38083                                  
 38084                                  ; MSDOS 6.0
 38085                                  ;	BREAK <$Open - open a file from a path string>
 38086                                  ;----------------------------------------------------------------------------
 38087                                  ;
 38088                                  ;**	$OPen - Open a File
 38089                                  ;
 38090                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38091                                  ;	file and and returns a handle
 38092                                  ;
 38093                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38094                                  ;		(AL) = open mode
 38095                                  ;	EXIT	'C' clear if OK
 38096                                  ;		  (ax) = file handle
 38097                                  ;		'C' set if error
 38098                                  ;		  (ax) = error code
 38099                                  ;	USES	all
 38100                                  ;
 38101                                  ;----------------------------------------------------------------------------
 38102                                  
 38103                                  ; 13/05/2019 - Retro DOS v4.0
 38104                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38105                                  
 38106                                  _$OPEN:       
 38107 00006FDE 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38108                                  _$Open2:
 38109                                  	;mov	ch,16h
 38110 00006FE0 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38111 00006FE2 E85702                  	call	SetAttrib
 38112 00006FE5 B9[E42B]                	mov	cx,DOS_OPEN
 38113                                  
 38114                                  	;xor	ah,ah  ; MSDOS 3.3
 38115                                  
 38116 00006FE8 50                      	push	ax
 38117                                  
 38118                                  ;*	General file open/create code. The $CREATE call and the various
 38119                                  ;	$OPEN calls all come here.
 38120                                  ;
 38121                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38122                                  ;	path names, etc., and then dispatch to our individual handlers.
 38123                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38124                                  ;
 38125                                  ;	(TOS) = create mode
 38126                                  ;	(CX) = address of routine to call to do actual function
 38127                                  ;	(DS:DX) = ASCIZ name
 38128                                  ;	SAttrib = Attribute mask
 38129                                  
 38130                                  ;	Get a free SFT and mark it "being allocated"
 38131                                  
 38132                                  AccessFile:
 38133 00006FE9 E86CA3                  	call	ECritSFT
 38134 00006FEC E8D3F7                  	call	SFNFree			; get a free sfn
 38135 00006FEF E881A3                  	call	LCritSFT
 38136 00006FF2 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38137 00006FF4 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38138 00006FF9 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38139 00006FFE 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38140                                  
 38141                                  ;	Find a free area in the user's JFN table.
 38142                                  
 38143 00007003 E8A9F7                  	call	JFNFree			; get a free jfn
 38144 00007006 7303                    	jnc	short SaveJFN
 38145                                  OpenFailJ:
 38146 00007008 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38147                                  
 38148                                  SaveJFN:
 38149 0000700B 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38150 00007010 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38151 00007015 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38152                                  
 38153                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38154                                  ;	reusing the same JFN.
 38155                                  
 38156 0000701A 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38157 0000701F 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38158 00007022 89D6                    	MOV	SI,DX			; get name in appropriate place
 38159 00007024 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38160 00007027 51                      	push	cx			; save routine to call
 38161 00007028 E843FC                  	call	TransPath		; convert the path
 38162 0000702B 5B                      	pop	bx			; (bx) = routine to call
 38163                                  
 38164 0000702C 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38165 00007031 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38166 00007033 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38167 00007039 7404                    	JZ	short SetSearch
 38168                                  	;mov	al,2
 38169 0000703B B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38170                                  OpenCleanJ:
 38171 0000703D EB50                    	JMP	short OpenClean
 38172                                  
 38173                                  SetSearch:
 38174 0000703F 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38175                                  
 38176                                  ;	We need to get the new inheritance bits.
 38177                                  
 38178 00007040 31C9                    	xor	cx,cx
 38179                                  	; MSDOS 6.0
 38180                                  	;mov	[si+2],cx ; 0
 38181 00007042 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38182                                  	;mov    [si+51],cx ; 0
 38183 00007045 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38184                                  	;
 38185 00007048 81FB[E42B]              	CMP	BX,DOS_OPEN
 38186 0000704C 7509                    	JNZ	short _DoOper
 38187                                  	;test   al,80h
 38188 0000704E A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38189 00007050 7405                    	JZ	short _DoOper ; 10/08/2018
 38190 00007052 247F                    	AND	AL,7Fh			; mask off inherit bit
 38191                                  	;mov	cx,1000h
 38192 00007054 B90010                  	MOV	CX,sf_no_inherit
 38193                                  _DoOper:
 38194                                  	;; MSDOS 3.3
 38195                                  	;;mov	word [si+2], 0
 38196                                  	;;mov	word [si+33h], 0
 38197                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38198                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38199                                  
 38200                                  	; MSDOS 6.0
 38201                                  ;**	Check if this is an extended open. If so you must set the
 38202                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38203                                  ;	Set_EXT_mode in creat.asm
 38204                                  
 38205                                  	; MSDOS 6.0
 38206                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38207 00007057 57                      	push	di
 38208 00007058 06                      	push	es
 38209 00007059 1E                      	push	ds
 38210 0000705A 07                      	pop	es
 38211 0000705B 56                      	push	si
 38212 0000705C 5F                      	pop	di			; (es:di) = SFT address
 38213 0000705D E870BB                  	call	Set_EXT_mode
 38214                                  	;RESTORE <es, di>
 38215 00007060 07                      	pop	es
 38216 00007061 5F                      	pop	di
 38217                                  
 38218                                  	;Context DS
 38219 00007062 16                      	push	ss
 38220 00007063 1F                      	pop	ds	
 38221                                  
 38222 00007064 51                      	push	cx
 38223 00007065 FFD3                    	CALL	BX			; blam!
 38224 00007067 59                      	pop	cx
 38225 00007068 C536[9E05]              	LDS	SI,[THISSFT]
 38226 0000706C 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38227                                  	;jc	short OpenE ; MSDOS 3.3
 38228                                  
 38229                                  ;	The SFT was successfully opened. Remove busy mark.
 38230                                  
 38231                                  OpenOK:
 38232                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38233 0000706E C7040100                	mov	word [SI],1
 38234                                  	;or	[SI+5],cx
 38235 00007072 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38236                                  
 38237                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38238                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38239                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38240                                  ;
 38241                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38242                                  ; sharer.
 38243                                  
 38244 00007075 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38245 00007079 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38246                                  
 38247 0000707E 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38248                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38249                                  OpenOkj:
 38250 00007085 E9C195                  	jmp	SYS_RET_OK		; bye with no errors
 38251                                  
 38252                                  	; MSDOS 6.0
 38253                                  ;Extended Open hooks check
 38254                                  OpenE2:					;AN000;;EO.
 38255 00007088 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38256 0000708B 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38257 0000708D EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38258                                  
 38259                                  ;	Extended Open hooks check
 38260                                  ;
 38261                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38262                                  
 38263                                  OpenClean:
 38264 0000708F 5B                      	pop	bx			; clean off stack
 38265                                  OpenE:
 38266                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38267 00007090 C7040000                	mov	word [SI],0
 38268 00007094 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38269 00007099 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38270 0000709C EB02                    	JMP	SHORT OpenCritLeave
 38271                                  
 38272                                  OpenFail:
 38273 0000709E FB                      	STI
 38274 0000709F 59                      	pop	cx			; Clean stack
 38275                                  OpenCritLeave:
 38276 000070A0 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38277                                  
 38278                                  	; MSDOS 6.0
 38279                                  ; File Tagging DOS 4.00
 38280 000070A7 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38281                                  					;AN000;;FT. code page mismatch
 38282 000070AD 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38283 000070AF E9A895                  	jmp	From_GetSet		;AN000;;FT. yes
 38284                                  NORERR: 				;AN000;
 38285                                  ; File Tagging DOS 4.00
 38286                                  
 38287 000070B2 E99D95                  	jmp	SYS_RET_ERR		; no free, return error
 38288                                  
 38289                                  ; MSDOS 2.11
 38290                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38291                                  ;----------------------------------------------------------------------------
 38292                                  ;   Assembler usage:
 38293                                  ;           LDS     DX, name
 38294                                  ;           MOV     AH, Creat
 38295                                  ;           MOV     CX, access
 38296                                  ;           INT     21h
 38297                                  ;       ; AX now has the handle
 38298                                  ;
 38299                                  ;   Error returns:
 38300                                  ;           AX = error_access_denied
 38301                                  ;              = error_path_not_found
 38302                                  ;              = error_too_many_open_files
 38303                                  ;----------------------------------------------------------------------------
 38304                                  
 38305                                  ; MSDOS 6.0
 38306                                  ;	BREAK <$Creat - create a brand-new file>
 38307                                  ;----------------------------------------------------------------------------
 38308                                  ;
 38309                                  ;**	$Creat - Create a File
 38310                                  ;
 38311                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38312                                  ;	initial attributes contained in CX
 38313                                  ;
 38314                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38315                                  ;		(CX) = initial attributes
 38316                                  ;	EXIT	'C' set if error
 38317                                  ;		  (ax) = error code
 38318                                  ;		'C' clear if OK
 38319                                  ;		  (ax) = file handle
 38320                                  ;	USES	all
 38321                                  ;
 38322                                  ;----------------------------------------------------------------------------
 38323                                  
 38324                                  _$CREAT:
 38325 000070B5 51                      	push	cx			; Save attributes on stack
 38326 000070B6 B9[BA2A]                	mov	CX,DOS_CREATE		; routine to call
 38327                                  AccessSet:
 38328                                  	;mov	byte [ss:SATTRIB],6
 38329 000070B9 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38330                                  	; 10/08/2018
 38331 000070BF E927FF                  	JMP	AccessFile		; use good ol' open
 38332                                  
 38333                                  ; MSDOS 6.0 (MSDOS 3.3)
 38334                                  ;	BREAK <$CHMOD - change file attributes>
 38335                                  ;----------------------------------------------------------------------------
 38336                                  ;
 38337                                  ;**	$CHMOD - Change File Attributes
 38338                                  ;
 38339                                  ;   Assembler usage:
 38340                                  ;	    LDS     DX, name
 38341                                  ;	    MOV     CX, attributes
 38342                                  ;	    MOV     AL,func (0=get, 1=set)
 38343                                  ;	    INT     21h
 38344                                  ;   Error returns:
 38345                                  ;	    AX = error_path_not_found
 38346                                  ;	    AX = error_access_denied
 38347                                  ;
 38348                                  ;----------------------------------------------------------------------------
 38349                                  
 38350                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38351                                  _$CHMOD:
 38352                                  	; 05/08/2018 - Retro DOS v3.0
 38353                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38354 000070C2 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38355 000070C5 50                      	push	ax
 38356 000070C6 51                      	push	cx			; save function and attributes
 38357 000070C7 89D6                    	MOV	SI,DX			; get things in appropriate places
 38358 000070C9 E8A6FB                  	call	TransPathSet		; get correct path
 38359 000070CC 59                      	pop	cx
 38360 000070CD 58                      	pop	ax			; and get function and attrs back
 38361 000070CE 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38362 000070D0 16                      	push	ss			; set up for later possible calls
 38363 000070D1 1F                      	pop	ds
 38364 000070D2 803E[7A05]FF            	CMP	byte [CMETA],-1
 38365 000070D7 754E                    	JNZ	short ChModErr
 38366                                  	;mov	byte [SATTRIB],16h
 38367 000070D9 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38368 000070DE 2C01                    	SUB	AL,1			; fast way to discriminate
 38369 000070E0 720B                    	JB	short ChModGet		; 0 -> go get value
 38370 000070E2 7417                    	JZ	short ChModSet		; 1 -> go set value
 38371                                  	;mov	byte [EXTERR_LOCUS],1
 38372 000070E4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38373                                  	;mov	al,1
 38374 000070E9 B001                    	mov	al,error_invalid_function ; bad value
 38375                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38376                                  chmod_errj:	
 38377                                  	;;jmp	SYS_RET_ERR
 38378                                  	;jmp	short ChModE	
 38379 000070EB EBC5                    	jmp	short NORERR	; 06/12/2022
 38380                                  ChModGet:
 38381 000070ED E8B4B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38382 000070F0 7237                    	JC	short ChModE		; error codes are already set for ret
 38383 000070F2 E89A93                  	call	Get_User_Stack		; point to user saved vaiables
 38384                                  	;mov	[SI+4],ax
 38385 000070F5 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38386                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38387                                  OpenOkj2:
 38388                                  	; 17/12/2022
 38389                                  	;;jmp	SYS_RET_OK		; say sayonara
 38390                                  	;jmp	short OpenOkj
 38391                                  	; 25/06/2019
 38392 000070F8 E95195                  	jmp	SYS_RET_OK_clc
 38393                                  
 38394                                  ChModSet:
 38395 000070FB 89C8                    	MOV	AX,CX			; get attrs in position
 38396 000070FD E802B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38397 00007100 7227                    	JC	short ChModE		; errors are set
 38398                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38399                                  	;jmp	SYS_RET_OK
 38400                                  OpenOkj3:
 38401                                  	;jmp	short OpenOkj2
 38402                                  	; 17/12/2022
 38403 00007102 E94495                  	jmp	SYS_RET_OK
 38404                                  
 38405                                  ; 17/12/2022
 38406                                  %if 0
 38407                                  ChModErr:
 38408                                  NotFound:	; 17/12/2022
 38409                                  	;mov	al,3
 38410                                  	mov	al,error_path_not_found
 38411                                  ChModE:
 38412                                  UnlinkE:	; 17/12/2022
 38413                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38414                                  	;;jmp	SYS_RET_ERR
 38415                                  	;jmp	short chmod_errj
 38416                                  	; 17/12/2022
 38417                                  	jmp	short NORERR
 38418                                  %endif
 38419                                  
 38420                                  ; 22/05/2019 - Retro DOS v4.0
 38421                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38422                                  
 38423                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38424                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38425                                  
 38426                                  ;	BREAK <$UNLINK - delete a file entry>
 38427                                  ;----------------------------------------------------------------------------
 38428                                  ;
 38429                                  ;**	$UNLINK - Delete a File
 38430                                  ;
 38431                                  ;
 38432                                  ;	Assembler usage:
 38433                                  ;	    LDS     DX, name
 38434                                  ;	    IF VIA SERVER DOS CALL
 38435                                  ;	     MOV     CX,SEARCH_ATTRIB
 38436                                  ;	    MOV     AH, Unlink
 38437                                  ;	    INT     21h
 38438                                  ;
 38439                                  ;	ENTRY	(ds:dx) = path name
 38440                                  ;		(cx) = search_attribute, if via server_dos
 38441                                  ;	EXIT	'C' clear if no error
 38442                                  ;		'C' set if error
 38443                                  ;		  (ax) = error code
 38444                                  ;			= error_file_not_found
 38445                                  ;			= error_access_denied
 38446                                  ;
 38447                                  ;----------------------------------------------------------------------------
 38448                                  
 38449                                  _$UNLINK:
 38450 00007105 51                      	push	cx			; Save possible CX input parm
 38451 00007106 89D6                    	MOV	SI,DX			; Point at input string
 38452 00007108 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38453 0000710B E864FB                  	call	TransPathSet		; go get normalized path
 38454 0000710E 59                      	pop	cx
 38455 0000710F 7216                    	JC	short ChModErr		; badly formed path
 38456 00007111 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38457 00007117 750E                    	JNZ	short NotFound
 38458 00007119 16                      	push	ss
 38459 0000711A 1F                      	pop	ds
 38460                                  	;mov	ch,6
 38461 0000711B B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38462 0000711D E81C01                  	call	SetAttrib
 38463 00007120 E871B4                  	call	DOS_DELETE		; remove that file
 38464                                  	;JC	short UnlinkE 		; error is there
 38465                                  	; 17/12/2022
 38466 00007123 728D                    	jc	short NORERR
 38467                                  
 38468                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38469                                  UnlinkOk:
 38470                                  	;jmp	SYS_RET_OK		; okey doksy
 38471 00007125 EBDB                    	jmp	short OpenOkj3
 38472                                  
 38473                                  	; 17/12/2022
 38474                                  ChModErr:	; 17/12/2022
 38475                                  NotFound:
 38476                                  	;mov	al,3
 38477 00007127 B003                    	MOV	AL,error_path_not_found
 38478                                  ChModE:		; 17/12/2022
 38479                                  UnlinkE:
 38480                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38481                                  	;;jmp	SYS_RET_ERR		; bye
 38482                                  	;jmp	short ChModE
 38483                                  	; 17/12/2022
 38484 00007129 EB87                    	jmp	short NORERR
 38485                                  
 38486                                  ;BREAK <$RENAME - move directory entries around>
 38487                                  ;----------------------------------------------------------------------------
 38488                                  ;
 38489                                  ;   Assembler usage:
 38490                                  ;	    LDS     DX, source
 38491                                  ;	    LES     DI, dest
 38492                                  ;	    IF VIA SERVER DOS CALL
 38493                                  ;	      MOV   CX,SEARCH_ATTRIB
 38494                                  ;	    MOV     AH, Rename
 38495                                  ;	    INT     21h
 38496                                  ;
 38497                                  ;   Error returns:
 38498                                  ;	    AX = error_file_not_found
 38499                                  ;	       = error_not_same_device
 38500                                  ;	       = error_access_denied
 38501                                  ;
 38502                                  ;----------------------------------------------------------------------------
 38503                                  
 38504                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38505                                  _$RENAME:
 38506                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38507 0000712B 51                      	push	cx
 38508 0000712C 1E                      	push	ds
 38509 0000712D 52                      	push	dx			; save source and possible CX arg
 38510 0000712E 06                      	PUSH	ES
 38511 0000712F 1F                      	POP	DS			; move dest to source
 38512 00007130 89FE                    	MOV	SI,DI			; save for offsets
 38513 00007132 BF[3E04]                	MOV	DI,RENBUF
 38514 00007135 E83AFB                  	call	TransPathSet		; munge the paths
 38515 00007138 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38516 0000713D 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38517 00007142 5E                      	pop	si
 38518 00007143 1F                      	pop	ds
 38519 00007144 59                      	pop	cx			; get back source and possible CX arg
 38520                                  epjc2:	
 38521 00007145 72E0                    	JC	short ChModErr		; get old error
 38522 00007147 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38523 0000714D 75D8                    	JNZ	short NotFound
 38524 0000714F 51                      	push	cx			; Save possible CX arg
 38525 00007150 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38526 00007153 E81CFB                  	call	TransPathSet		; wham
 38527 00007156 59                      	pop	cx
 38528 00007157 72EC                    	JC	short epjc2
 38529 00007159 16                      	push	ss
 38530 0000715A 1F                      	pop	ds
 38531 0000715B 803E[7A05]FF            	CMP	byte [CMETA],-1
 38532 00007160 72C5                    	JB	short NotFound
 38533                                  
 38534                                  	; MSDOS 6.0
 38535 00007162 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38536 00007166 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38537 0000716A BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38538 0000716D 16                      	PUSH	SS			   ;AN000;;MS.
 38539 0000716E 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38540 0000716F 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38541                                  rnloop: 				   ;AN000;
 38542 00007171 E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38543 00007174 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38544 00007176 E880A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38545 00007179 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38546 0000717B FEC0                    	INC	AL			   ;AN000;;MS.	next
 38547 0000717D EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38548                                  rnerr:					   ;AN000;
 38549 0000717F 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38550                                  	;error	error_current_directory    ;AN000;;MS.
 38551 00007182 B010                    	mov	al,error_current_directory 
 38552                                  	;jmp	SYS_RET_ERR
 38553                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38554 00007184 EBA3                    	jmp	short UnlinkE
 38555                                  dorn:					   ;AN000;
 38556 00007186 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38557 0000718B 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38558                                  
 38559 00007190 16                      	push	ss
 38560 00007191 1F                      	pop	ds
 38561                                  
 38562                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38563                                  	;mov	ch,16h
 38564 00007192 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38565                                  					; rename appropriate files
 38566 00007194 E8A500                  	call	SetAttrib
 38567 00007197 E8D8B5                  	call	DOS_RENAME		; do the deed
 38568 0000719A 728D                    	JC	short UnlinkE 		; errors
 38569                                  
 38570                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38571                                  	;jmp	SYS_RET_OK
 38572 0000719C EB87                    	jmp	short UnlinkOk
 38573                                  
 38574                                  
 38575                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38576                                  
 38577                                  ; 14/07/2018 - Retro DOS v3.0
 38578                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38579                                  
 38580                                  ;Break <$CreateNewFile - Create a new directory entry>
 38581                                  ;----------------------------------------------------------------------------
 38582                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38583                                  ;	was no previous directory entry, and fail if a directory entry with
 38584                                  ;	the same name existed previously.
 38585                                  ;
 38586                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38587                                  ;		CX contains default file attributes
 38588                                  ;   Outputs:	Carry Clear:
 38589                                  ;		    AX has file handle opened for read/write
 38590                                  ;		Carry Set:
 38591                                  ;		    AX has error code
 38592                                  ;   Registers modified: All
 38593                                  ;----------------------------------------------------------------------------
 38594                                  
 38595                                  _$CreateNewFile:
 38596 0000719E 51                      	push	cx			; Save attributes on stack
 38597 0000719F B9[872B]                	MOV	CX,DOS_Create_New	; routine to call
 38598 000071A2 E914FF                  	JMP	AccessSet		; use good ol' open
 38599                                  
 38600                                  ;**	BinToAscii - convert a number to a string.
 38601                                  ;----------------------------------------------------------------------------
 38602                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38603                                  ;	This routine is used to generate temp file names so we don't spend
 38604                                  ;	the time and code needed for a true hex number, we just use
 38605                                  ;	A thorugh O.
 38606                                  ;
 38607                                  ;	ENTRY	(ax) = value
 38608                                  ;		(es:di) = destination
 38609                                  ;	EXIT	(es:di) updated by 4
 38610                                  ;	USES	cx, di, flags
 38611                                  ;----------------------------------------------------------------------------
 38612                                  
 38613                                  ; MSDOS 3.3
 38614                                  ;BinToAscii:
 38615                                  ;	mov     cx,4
 38616                                  ;bta5:
 38617                                  ;	push    cx
 38618                                  ;	mov     cl,4
 38619                                  ;	rol     ax,cl
 38620                                  ;	push    ax
 38621                                  ;	and     al,0Fh
 38622                                  ;	add     al,'0'
 38623                                  ;	cmp     al,'9'
 38624                                  ;	jbe     short bta6
 38625                                  ;	add     al,7
 38626                                  ;bta6: 
 38627                                  ;	stosb
 38628                                  ;	pop     ax
 38629                                  ;	pop     cx
 38630                                  ;	loop    bta5
 38631                                  ;	retn
 38632                                  
 38633                                  ; MSDOS 6.0
 38634                                  BinToAscii:
 38635 000071A5 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38636                                  bta5:	
 38637 000071A8 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38638 000071AA 50                      	push	ax			; preserve remainder of digits
 38639 000071AB 240F                    	AND	AL,0Fh			; grab low nibble
 38640 000071AD 0441                    	ADD	AL,'A'			; turn into ascii
 38641 000071AF AA                      	STOSB				; drop in the character
 38642 000071B0 58                      	pop	ax			; (ax) = shifted number
 38643 000071B1 FECD                    	dec	ch
 38644 000071B3 75F3                    	jnz	short bta5		; process 4 digits
 38645 000071B5 C3                      	retn
 38646                                  
 38647                                  ;Break	<$CreateTempFile - create a unique name>
 38648                                  ;----------------------------------------------------------------------------
 38649                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38650                                  ;	Method used is to get the current time, convert to a name and attempt
 38651                                  ;	a create new. Repeat until create new succeeds.
 38652                                  ;
 38653                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38654                                  ;		CX  contains default attributes
 38655                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38656                                  ;		AX has handle
 38657                                  ;   Registers modified: all
 38658                                  ;----------------------------------------------------------------------------
 38659                                  
 38660                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38661                                  
 38662                                  _$CreateTempFile:
 38663                                  	;Enter
 38664 000071B6 55                      	push	bp
 38665 000071B7 89E5                    	mov	bp,sp
 38666                                  
 38667                                  	;LocalVar  EndPtr,DWORD
 38668                                  	;LocalVar  FilPtr,DWORD
 38669                                  	;LocalVar  Attr,WORD
 38670                                  
 38671 000071B9 83EC0A                  	sub	sp,10
 38672                                  
 38673                                  	;test	cx,0FFD8h
 38674 000071BC F7C1D8FF                	test	CX,~attr_changeable
 38675 000071C0 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38676                                  
 38677                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38678                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38679                                  ; below. The code loops on error_access_denied, but if one of the non
 38680                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38681                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38682                                  ; need to detect these cases before getting to the loop.
 38683                                  
 38684                                  	;mov	ax, 5
 38685 000071C2 B80500                  	MOV	AX,error_access_denied
 38686 000071C5 EB69                    	JMP	SHORT SETTMPERR
 38687                                  
 38688                                  OKatts:
 38689                                  	;MOV	attr,CX 		; save attribute
 38690 000071C7 894EF6                  	mov     [bp-10],cx
 38691                                  	;MOV	FilPtrL,DX		; pointer to file
 38692 000071CA 8956F8                  	mov	[bp-8],dx
 38693                                  	;MOV	FilPtrH,DS
 38694 000071CD 8C5EFA                  	mov	[bp-6],ds
 38695                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38696 000071D0 8C5EFE                  	mov	[bp-2],ds
 38697 000071D3 1E                      	PUSH	DS
 38698 000071D4 07                      	POP	ES			; destination for nul search
 38699 000071D5 89D7                    	MOV	DI,DX
 38700 000071D7 89F9                    	MOV	CX,DI
 38701 000071D9 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38702                                  	; MSDOS 6.0
 38703 000071DB 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38704 000071DD 7501                    	JNZ	short okok		;AN000;MS. no
 38705                                  	;MOV	CX,-1			;AN000;MS.
 38706                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38707                                  	; 17/12/2022
 38708 000071DF 49                      	dec	cx  ; mov cx,-1
 38709                                  	;mov	cx,-1 ; 0FFFh
 38710                                  okok:					;AN000;
 38711 000071E0 31C0                    	XOR	AX,AX			;AN000;
 38712 000071E2 F2AE                    	REPNZ	SCASB			;AN000;
 38713                                  					;AN000;
 38714 000071E4 4F                      	DEC	DI			; point back to the null
 38715 000071E5 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38716 000071E9 E88FDF                  	call	PATHCHRCMP		; Is it a path separator?
 38717 000071EC 7403                    	JZ	short SETENDPTR		; Yes
 38718                                  STOREPTH:
 38719 000071EE B05C                    	MOV	AL,'\'
 38720 000071F0 AA                      	STOSB				; Add a path separator (and INC DI)
 38721                                  SETENDPTR:
 38722                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38723 000071F1 8856FC                  	mov	[bp-4],dl
 38724                                  CreateLoop:
 38725 000071F4 16                      	push	ss			; let ReadTime see variables
 38726 000071F5 1F                      	pop	ds
 38727 000071F6 55                      	push	bp
 38728 000071F7 E83F99                  	call	READTIME		; go get time
 38729 000071FA 5D                      	pop	bp
 38730                                  ;
 38731                                  ; Time is in CX:DX. Go drop it into the string.
 38732                                  ;
 38733                                  	;les	di,EndPtr		; point to the string
 38734 000071FB C47EFC                  	les	di,[BP-4]
 38735 000071FE 89C8                    	mov	ax,cx
 38736 00007200 E8A2FF                  	call	BinToAscii		; store upper word
 38737 00007203 89D0                    	mov	ax,dx
 38738 00007205 E89DFF                  	call	BinToAscii		; store lower word
 38739 00007208 30C0                    	xor	al,al
 38740 0000720A AA                      	STOSB				; nul terminate
 38741                                  	;LDS	DX,FilPtr		; get name
 38742 0000720B C556F8                  	lds	dx,[bp-8]
 38743                                  	;MOV	CX,Attr 		; get attr
 38744 0000720E 8B4EF6                  	mov	cx,[bp-10]
 38745 00007211 55                      	push	bp
 38746 00007212 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38747 00007215 5D                      	pop	bp
 38748 00007216 7319                    	JNC	short CreateDone	; failed, go try again
 38749                                  
 38750                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38751                                  ; error and figure out what to do.
 38752                                  
 38753                                  	;; MSDOS 3.3			; M049 - start
 38754                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38755                                  ;;	cmp	al,error_file_exists
 38756                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38757                                  ;;	cmp	al,error_access_denied
 38758                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38759                                  
 38760                                  	; MSDOS 6.0
 38761                                  	;cmp	al,50h
 38762 00007218 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38763 0000721A 74D8                    	JZ	short CreateLoop	; Y: try again
 38764                                  	;cmp	al,5
 38765 0000721C 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38766 0000721E 7510                    	JNZ	short SETTMPERR		; N: Error out
 38767                                  					; Y: Check to see if we got this due
 38768                                  					;    to the network drive. Note that
 38769                                  					;    the redir will set the exterr
 38770                                  					;    to error_cannot_make if this is 
 38771                                  					;    so. 
 38772 00007220 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38773                                  					; See if it's REALLY an att mismatch
 38774 00007226 7408                    	je	short SETTMPERR		; no, network error, stop
 38775                                  ;M070
 38776                                  ; If the user failed on an I24, we do not want to try again
 38777                                  ;
 38778 00007228 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38779                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38780                                  
 38781                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38782                                  	; 17/12/2022
 38783 0000722E 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38784                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38785                                  	;jz	short SETTMPERR
 38786                                  	;jmp	short CreateLoop
 38787                                  
 38788                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38789                                  					; M049 - end
 38790                                  SETTMPERR:
 38791 00007230 F9                      	STC
 38792                                  CreateDone:
 38793                                  	;Leave
 38794 00007231 89EC                    	mov	sp,bp
 38795 00007233 5D                      	pop	bp
 38796 00007234 7203                    	JC	short CreateFail
 38797 00007236 E91094                  	jmp	SYS_RET_OK		; success!
 38798                                  CreateFail:
 38799 00007239 E91694                  	jmp	SYS_RET_ERR
 38800                                  
 38801                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38802                                  ;   (CH) or to the value in CL if the current system call is through
 38803                                  ;   serverdoscall.
 38804                                  ;
 38805                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38806                                  ;		fSharing == TRUE => set sattrib to CL
 38807                                  ;   Outputs:	none
 38808                                  ;   Registers changed:	CX
 38809                                  
 38810                                  SetAttrib:
 38811 0000723C 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38812 00007242 7502                    	jnz	short Set
 38813 00007244 88E9                    	mov	cl,ch
 38814                                  Set:
 38815 00007246 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38816 0000724B C3                      	retn
 38817                                  
 38818                                  ; 14/07/2018 - Retro DOS v3.0
 38819                                  ; MSDOS 6.0
 38820                                  
 38821                                  ; 29/04/2019 - Retro DOS v4.0
 38822                                  
 38823                                  ;Break	<Extended_Open- Extended open the file>
 38824                                  ;----------------------------------------------------------------------------
 38825                                  ; Input: AL= 0 reserved  AH=6CH
 38826                                  ;	 BX= mode
 38827                                  ;	 CL= create attribute  CH=search attribute (from server)
 38828                                  ;	 DX= flag
 38829                                  ;	 DS:SI = file name
 38830                                  ;	 ES:DI = parm list
 38831                                  ;			   DD  SET EA list (-1) null
 38832                                  ;			   DW  n  parameters
 38833                                  ;			   DB  type (TTTTTTLL)
 38834                                  ;			   DW  IOMODE
 38835                                  ; Function: Extended Open
 38836                                  ; Output: carry clear
 38837                                  ;		     AX= handle
 38838                                  ;		     CX=1 file opened
 38839                                  ;			2 file created/opened
 38840                                  ;			3 file replaced/opened
 38841                                  ;	  carry set: AX has error code
 38842                                  ;----------------------------------------------------------------------------
 38843                                  
 38844                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38845                                  _$Extended_Open:			  ;AN000;
 38846                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38847 0000724C 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38848 00007251 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38849                                  	; 17/12/2022
 38850 00007258 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38851                                  	;;test	dx,0FE00h
 38852                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38853 0000725B 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38854 0000725D 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38855 0000725F 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38856 00007262 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38857                                  	;and	dl,0Fh
 38858 00007264 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38859 00007267 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38860 0000726A 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38861                                  	;and	ah,0F0h
 38862 0000726C 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38863 0000726F 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38864 00007272 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38865                                  
 38866 00007274 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38867 00007279 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38868 0000727E 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38869 00007283 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38870 00007288 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38871 0000728D 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38872 00007292 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38873 00007297 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38874 0000729C 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38875 0000729E 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38876 000072A0 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38877                                  ext_inval2:				  ;AN000;;EO.
 38878                                  	;mov	al,1
 38879 000072A2 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38880                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38881                                  eo_err:
 38882                                  	;jmp	SYS_RET_ERR
 38883 000072A4 EB93                    	jmp	short CreateFail
 38884                                  
 38885                                  ext_inval_parm:				  ;AN000;EO..
 38886 000072A6 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38887 000072A7 5E                      	POP	SI			  ;AN000;EO..
 38888                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38889                                  	;mov	al,13
 38890 000072A8 B00D                    	mov	al,error_invalid_data
 38891                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38892                                  	;;jmp	SYS_RET_ERR
 38893                                  	;jmp	short eo_err
 38894                                  	; 17/12/2022
 38895 000072AA EB8D                    	jmp	short CreateFail
 38896                                  
 38897                                  	; 17/12/2022	
 38898                                  ;error_return:				  ;AN000;EO.
 38899                                  ;	retn				  ;AN000;EO.. return with error
 38900                                  
 38901                                  goopen2:				  ;AN000;
 38902                                  	; 17/12/2022
 38903                                  	;test	bh,20h				 
 38904 000072AC F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38905                                  	;;test	bx,2000h
 38906                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38907 000072AF 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38908                                  	;or	byte [SS:EXTOPEN_ON],2
 38909 000072B1 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38910                                  goopen:					  ;AN000;
 38911                                  	;or	byte [SS:EXTOPEN_ON],1 
 38912 000072B7 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38913                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38914                                  	; 18/12/2022
 38915 000072BD 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38916                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38917 000072C3 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38918 000072C9 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38919 000072CB E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38920 000072CE 723F                    	JC	short error_return	  ;AN000;;EO. error
 38921                                  
 38922 000072D0 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38923 000072D6 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38924                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38925 000072D8 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38926 000072DF EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38927                                  
 38928                                  	; 17/12/2022
 38929                                  ;ok_return2:
 38930                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38931                                  
 38932                                  chknext:
 38933                                  	; 17/12/2022
 38934 000072E1 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38935                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38936                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38937 000072E7 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38938 000072E9 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38939 000072EC 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38940 000072EE 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38941 000072F4 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38942 000072F6 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38943 000072FD 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38944 00007303 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38945 00007305 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38946 0000730C EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38947                                  error_return2:
 38948 0000730E F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38949                                  error_return:	 ;17/12/2022
 38950 0000730F C3                      	retn				  ;AN000;;EO. return with error
 38951                                  
 38952                                  	; 17/12/2022
 38953                                  ok_return:
 38954                                  ok_return2:
 38955 00007310 E93693                  	jmp	SYS_RET_OK
 38956                                  
 38957                                  exist_open:				  ;AN000;
 38958 00007313 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38959 00007319 7402                    	jz	short noserver		  ;AN000;;EO. no
 38960 0000731B 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38961                                  noserver:
 38962 0000731D E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38963 00007320 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38964 00007322 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38965 00007328 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38966                                  local_extopen:
 38967                                  	;cmp	ax,2
 38968 0000732A 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38969 0000732D 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38970                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38971                                  	; 17/12/2022
 38972 0000732F 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 38973                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 38974                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 38975                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 38976                                  	; 17/12/2022
 38977 00007335 745D                    	jz	short extexit ; 10/06/2019
 38978                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38979                                  	;jnz	short do_creat
 38980                                  	;jmp	short extexit
 38981                                  do_creat:
 38982 00007337 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 38983 0000733C 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 38984 00007341 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 38985 00007343 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 38986 00007346 724C                    	JC	short extexit 		  ;AN000;;EO. error
 38987                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38988 00007348 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 38989                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 38990 0000734F EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38991                                  
 38992                                  ext_ok:
 38993 00007351 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 38994 00007357 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 38995                                  	;mov	word [SS:EXTOPEN_FLAG],1
 38996 00007359 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 38997                                  setXAttr:
 38998                                  	; 29/04/2019
 38999 00007360 50                      	push	ax
 39000 00007361 E82B91                  	call	Get_User_Stack		  ;AN000;;EO.
 39001 00007364 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39002                                  	;mov	[si+4],ax
 39003 00007368 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39004 0000736B 58                      	pop	ax			  ;AN000;;EO.
 39005 0000736C 8904                    	mov	[si],ax
 39006                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39007                                  	; 17/12/2022
 39008 0000736E EBA0                    	jmp	short ok_return
 39009                                  ;ok_return:				  ;AN000;
 39010                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39011                                  
 39012                                  extexit2:				  ;AN000; ERROR RECOVERY
 39013 00007370 5B                      	POP	BX			  ;AN000;EO. close the handle
 39014 00007371 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39015                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39016 00007372 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39017                                  					  ;AN000;EO. from create;smr;SS Override
 39018 00007378 750C                    	JNZ	short justopen		  ;AN000;EO.
 39019 0000737A 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39020 0000737F C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39021 00007381 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39022 00007384 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39023                                  
 39024                                  justopen:				  ;AN000;
 39025 00007386 E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39026                                  reserror:				  ;AN000;
 39027 00007389 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39028 0000738A EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39029                                  
 39030                                  ext_file_unfound:			  ;AN000;
 39031                                  	;mov	ax,2
 39032 0000738C B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39033 0000738F EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39034                                  ext_inval:				  ;AN000;
 39035                                  	;mov	ax,1
 39036 00007391 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39037                                  lockoperr:	; 17/12/2022
 39038                                  extexit:
 39039 00007394 E9BB92                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39040                                  
 39041                                  ;============================================================================
 39042                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39043                                  ;============================================================================
 39044                                  ; 14/07/2018 - Retro DOS v3.0
 39045                                  ; 22/05/2019 - Retro DOS v4.0
 39046                                  
 39047                                  ;BREAK <$LockOper - Lock Calls>
 39048                                  ;----------------------------------------------------------------------------
 39049                                  ;
 39050                                  ;   Assembler usage:
 39051                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39052                                  ;	    MOV     CX, OffsetHigh
 39053                                  ;	    MOV     DX, OffsetLow
 39054                                  ;	    MOV     SI, LengthHigh
 39055                                  ;	    MOV     DI, LengthLow
 39056                                  ;	    MOV     AH, LockOper
 39057                                  ;	    MOV     AL, Request
 39058                                  ;	    INT     21h
 39059                                  ;
 39060                                  ;   Error returns:
 39061                                  ;	    AX = error_invalid_handle
 39062                                  ;	       = error_invalid_function
 39063                                  ;	       = error_lock_violation
 39064                                  ;
 39065                                  ;   Assembler usage:
 39066                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39067                                  ;
 39068                                  ;				    0? lock all
 39069                                  ;				    8? lock write
 39070                                  ;				    ?2 lock multiple
 39071                                  ;				    ?3 unlock multiple
 39072                                  ;				    ?4 lock/read
 39073                                  ;				    ?5 write/unlock
 39074                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39075                                  ;	    MOV     BX, Handle
 39076                                  ;	    MOV     CX, count or size
 39077                                  ;	    LDS     DX, buffer
 39078                                  ;	    INT     21h
 39079                                  ;
 39080                                  ;   Error returns:
 39081                                  ;	    AX = error_invalid_handle
 39082                                  ;	       = error_invalid_function
 39083                                  ;	       = error_lock_violation
 39084                                  ;
 39085                                  ;----------------------------------------------------------------------------
 39086                                  
 39087                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39088                                  _$LockOper:
 39089 00007397 3C01                    	CMP	AL,1
 39090 00007399 770B                    	JA	short lock_bad_func
 39091                                  
 39092 0000739B 57                      	PUSH	DI			       ; Save LengthLow
 39093 0000739C E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39094 0000739F 731D                    	JNC	short lock_do 		       ; have valid handle
 39095 000073A1 5F                      	POP	DI			       ; Clean stack
 39096                                  	;mov	al,6
 39097 000073A2 B006                    	mov	al,error_invalid_handle
 39098                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39099                                  ;lockoperr:
 39100                                  	;jmp	SYS_RET_ERR
 39101                                  	; 17/12/2022
 39102 000073A4 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39103                                  
 39104                                  lock_bad_func:
 39105                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39106 000073A6 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39107                                  	;mov	al,1
 39108 000073AC B001                    	mov	al,error_invalid_function
 39109                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39110                                  lockoperrj:
 39111                                  	;jmp	SYS_RET_ERR
 39112 000073AE EBE4                    	jmp	short lockoperr
 39113                                  
 39114                                  	; 22/05/2019 - Retro DOS v4.0
 39115                                  
 39116                                  	; MSDOS 6.0 
 39117                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39118                                  ; Dead code deleted, MD, 23 Mar 90
 39119                                  
 39120                                  ;lock_do:
 39121                                  ;	; MSDOS 3.3
 39122                                  ;	or	al,al
 39123                                  ;	pop	ax
 39124                                  ;	jz	short DOS_Lock
 39125                                  ;DOS_Unlock:
 39126                                  ;	;test	word [es:di+5],8000h
 39127                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39128                                  ;	JZ	short LOCAL_UNLOCK
 39129                                  ;	push    ax
 39130                                  ;	mov     ax,110Bh
 39131                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39132                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39133                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39134                                  ;			; SFT DPB field -> DPB of drive containing file
 39135                                  ;			; Return: CF set error
 39136                                  ;	pop     bx
 39137                                  ;	jmp     short ValChk
 39138                                  ;
 39139                                  ;LOCAL_UNLOCK:
 39140                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39141                                  ;ValChk:
 39142                                  ;	JNC	short Lock_OK
 39143                                  ;lockerror:
 39144                                  ;	jmp	SYS_RET_ERR
 39145                                  ;Lock_OK:
 39146                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39147                                  ;	jmp	SYS_RET_OK
 39148                                  ;DOS_Lock:
 39149                                  ;	;test	word [es:di+5],8000h
 39150                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39151                                  ;	JZ	short LOCAL_LOCK
 39152                                  ;	;CallInstall NET_XLock,MultNET,10
 39153                                  ;	mov     ax, 110Ah
 39154                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39155                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39156                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39157                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39158                                  ;			; Return: CF set error
 39159                                  ;	JMP	short ValChk
 39160                                  ;
 39161                                  ;LOCAL_LOCK:
 39162                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39163                                  ;	JMP	short ValChk
 39164                                  
 39165                                  ; 17/12/2022
 39166                                  LOCAL_UNLOCK:
 39167                                  	; MSDOS 3.3
 39168                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39169                                  	; MSDOS 6.0
 39170 000073B0 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39171                                  ValChk:
 39172 000073B4 7302                    	JNC	short Lock_OK
 39173                                  lockerror:
 39174                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39175                                  	;;jmp	SYS_RET_ERR
 39176                                  	;jmp	short lockoperrj
 39177                                  	; 17/12/2022
 39178 000073B6 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39179                                  Lock_OK:
 39180                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39181                                  	; 10/06/2019
 39182 000073B8 A1[0C06]                	mov	ax,[TEMP_VAR]
 39183 000073BB E98B92                  	jmp	SYS_RET_OK
 39184                                  
 39185                                  	; 22/05/2019
 39186                                  lock_do:
 39187                                  	; MSDOS 6.0
 39188 000073BE 89C3                    	MOV	BX,AX				; save AX
 39189 000073C0 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39190                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39191                                  	;;mov	[bp+0],dx
 39192                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39193                                  	; 15/12/2022
 39194 000073C3 895600                  	mov	[bp],dx
 39195                                  	;mov	[bp+2],cx
 39196 000073C6 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39197 000073C9 59                      	POP	CX				; get low length
 39198                                  	;mov	[bp+4],cx
 39199 000073CA 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39200                                  	;mov	[bp+6],si
 39201 000073CD 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39202 000073D0 B90100                  	MOV	CX,1				; one range
 39203                                  
 39204                                  ;	PUSH	CS				;
 39205                                  ;	POP	DS				; DS:DX points to
 39206                                  
 39207 000073D3 16                      	push	ss
 39208 000073D4 1F                      	pop	ds
 39209                                  
 39210 000073D5 89EA                    	MOV	DX,BP				; Lock_Buffer
 39211                                  	;test	al,1
 39212 000073D7 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39213                                  	;JNZ	short DOS_Unlock		; yes
 39214                                  	;JMP	short DOS_Lock			; function 0
 39215                                  	; 17/12/2022
 39216                                  	; 10/06/2019
 39217 000073D9 740E                    	jz	short DOS_Lock
 39218                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39219                                  	;JNZ	short DOS_Unlock
 39220                                  	;JMP	short DOS_Lock
 39221                                  
 39222                                  DOS_Unlock:
 39223                                  	;;test	word [es:di+5],8000h
 39224                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39225 000073DB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39226 000073E0 74CE                    	JZ	short LOCAL_UNLOCK
 39227                                  
 39228                                  lock_unlock: ; 22/05/2019
 39229                                  	
 39230                                  	;CallInstall Net_Xlock,MultNET,10
 39231                                  	
 39232                                  	; MSDOS 3.3
 39233                                  	;mov     ax,110Bh
 39234                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39235                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39236                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39237                                  			; SFT DPB field -> DPB of drive containing file
 39238                                  			; Return: CF set error
 39239                                  	; MSDOS 6.0
 39240 000073E2 B80A11                  	mov     ax,110Ah
 39241 000073E5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39242                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39243                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39244                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39245                                  			; Return: CF set error
 39246                                  
 39247 000073E7 EBCB                    	JMP	SHORT ValChk
 39248                                  
 39249                                  ; 17/12/2022
 39250                                  %if 0
 39251                                  LOCAL_UNLOCK:
 39252                                  	; MSDOS 3.3
 39253                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39254                                  	; MSDOS 6.0
 39255                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39256                                  ValChk:
 39257                                  	JNC	short Lock_OK
 39258                                  lockerror:
 39259                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39260                                  	;jmp	SYS_RET_ERR
 39261                                  	jmp	short lockoperrj
 39262                                  Lock_OK:
 39263                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39264                                  	; 10/06/2019
 39265                                  	mov	ax,[TEMP_VAR]
 39266                                  	jmp	SYS_RET_OK
 39267                                  %endif
 39268                                  
 39269                                  DOS_Lock:
 39270                                  	;;test	word [es:di+5],8000h
 39271                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39272 000073E9 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39273 000073EE 7407                    	JZ	short LOCAL_LOCK
 39274                                  
 39275                                  	;CallInstall NET_XLock,MultNET,10
 39276                                  
 39277 000073F0 B80A11                  	mov     ax,110Ah
 39278 000073F3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39279                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39280                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39281                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39282                                  			; Return: CF set error
 39283                                  
 39284 000073F5 EBBD                    	JMP	short ValChk
 39285                                  
 39286                                  LOCAL_LOCK:
 39287                                  	; MSDOS 3.3
 39288                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39289                                  	; MSDOS 6.0
 39290 000073F7 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39291                                  
 39292 000073FB EBB7                    	JMP	short ValChk
 39293                                  
 39294                                  ; 14/07/2018 - Retro DOS v3.0
 39295                                  ; LOCK_CHECK
 39296                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39297                                  
 39298                                  ;----------------------------------------------------------------------------
 39299                                  ; Inputs:
 39300                                  ;	Outputs of SETUP
 39301                                  ;	[USER_ID] Set
 39302                                  ;	[PROC_ID] Set
 39303                                  ; Function:
 39304                                  ;	Check for lock violations on local I/O
 39305                                  ;	Retries are attempted with sleeps in between
 39306                                  ; Outputs:
 39307                                  ;    Carry clear
 39308                                  ;	Operation is OK
 39309                                  ;    Carry set
 39310                                  ;	A lock violation detected
 39311                                  ; Outputs of SETUP preserved
 39312                                  ;----------------------------------------------------------------------------
 39313                                  
 39314                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39315                                  	; 22/05/2019 - Retro DOS v4.0
 39316                                  LOCK_CHECK:
 39317 000073FD 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39318                                  LockRetry:
 39319 00007401 53                      	push	bx		; save regs
 39320 00007402 50                      	push	ax ; MSDOS 6.0
 39321                                  
 39322                                  	;MSDOS 3.3
 39323                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39324                                  	;MSDOS 6.0
 39325 00007403 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39326                                  
 39327 00007407 58                      	pop	ax ; MSDOS 6.0
 39328 00007408 5B                      	pop	bx		; restrore regs
 39329 00007409 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39330                                  LockN:
 39331 0000740B E8409E                  	call	Idle		; wait a while
 39332 0000740E 4B                      	DEC	BX		; remember a retry
 39333 0000740F 75F0                    	JNZ	short LockRetry	; more retries left...
 39334 00007411 F9                      	STC
 39335                                  lc_ret_label:
 39336 00007412 C3                      	retn
 39337                                  
 39338                                  ; 14/07/2018 - Retro DOS v3.0
 39339                                  ; LOCK_VIOLATION
 39340                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39341                                  
 39342                                  ;----------------------------------------------------------------------------
 39343                                  ; Inputs:
 39344                                  ;	[THISDPB] set
 39345                                  ;	[READOP] indicates whether error on read or write
 39346                                  ; Function:
 39347                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39348                                  ; Outputs:
 39349                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39350                                  ;	Carry clear if user wants a retry
 39351                                  ;
 39352                                  ; DS, ES, DI, CX preserved, others destroyed
 39353                                  ;----------------------------------------------------------------------------
 39354                                  
 39355                                  LOCK_VIOLATION:
 39356 00007413 1E                      	PUSH	DS
 39357 00007414 06                      	PUSH	ES
 39358 00007415 57                      	PUSH	DI
 39359 00007416 51                      	PUSH	CX
 39360                                  	;mov	ax,21h
 39361 00007417 B82100                  	MOV	AX,error_lock_violation
 39362                                  	;mov	byte [ALLOWED],18h
 39363 0000741A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39364 0000741F C42E[8A05]              	LES	BP,[THISDPB]
 39365 00007423 BF0100                  	MOV	DI,1		; Fake some registers
 39366 00007426 89F9                    	MOV	CX,DI
 39367                                  	;mov	dx,[es:bp+11]
 39368 00007428 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39369 0000742C E8B6DF                  	call	HARDERR
 39370 0000742F 59                      	POP	CX
 39371 00007430 5F                      	POP	DI
 39372 00007431 07                      	POP	ES
 39373 00007432 1F                      	POP	DS
 39374 00007433 3C01                    	CMP	AL,1
 39375 00007435 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39376 00007437 F9                      	STC
 39377 00007438 C3                      	retn
 39378                                  
 39379                                  ; 14/07/2018 - Retro DOS v3.0
 39380                                  
 39381                                  ;----------------------------------------------------------------------------
 39382                                  
 39383                                  ;	do a retz to return error
 39384                                  
 39385                                  	; 22/05/2019 - Retro DOS v4.0
 39386                                  CheckShare:
 39387                                  	; MSDOS 3.3
 39388                                  	;cmp	byte [cs:fShare],0
 39389                                  	;retn
 39390                                  
 39391                                  	; MSDOS 6.0
 39392 00007439 1E                      	push	ds			;smr;
 39393                                  	;getdseg <ds>			; ds -> dosdata
 39394 0000743A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39395 0000743F 803E[0303]00            	cmp	byte [fShare],0
 39396 00007444 1F                      	pop	ds			;smr;
 39397 00007445 C3                      	retn
 39398                                  	
 39399                                  ;============================================================================
 39400                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39401                                  ;============================================================================
 39402                                  ; 14/07/2018 - Retro DOS v3.0
 39403                                  ; 22/05/2019 - Retro DOS v4.0
 39404                                  
 39405                                  ; SHARE_CHECK
 39406                                  ;----------------------------------------------------------------------------
 39407                                  ; Inputs:
 39408                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39409                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39410                                  ;       [WFP_START] has full path of name
 39411                                  ;       [USER_ID] Set
 39412                                  ;       [PROC_ID] Set
 39413                                  ; Function:
 39414                                  ;       Check for sharing violations on local file/device access
 39415                                  ; Outputs:
 39416                                  ;    Carry clear
 39417                                  ;       Sharing approved
 39418                                  ;    Carry set
 39419                                  ;       A sharing violation detected
 39420                                  ;           AX is error code
 39421                                  ; USES    ALL but DS
 39422                                  ;----------------------------------------------------------------------------
 39423                                  
 39424                                  	; 22/05/2019 - Retro DOS v4.0
 39425                                  SHARE_CHECK:
 39426                                  	; 26/07/2019
 39427 00007446 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39428                                  shchk_retn:
 39429 0000744A C3                      	retn
 39430                                  
 39431                                  ; SHARE_VIOLATION
 39432                                  ;----------------------------------------------------------------------------
 39433                                  ; Inputs:
 39434                                  ;       [THISDPB] Set
 39435                                  ;       AX has error code
 39436                                  ; Function:
 39437                                  ;       Handle Sharing errors
 39438                                  ; Outputs:
 39439                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39440                                  ;       Carry clear if user wants a retry
 39441                                  ;
 39442                                  ; DS, ES, DI preserved, others destroyed
 39443                                  ;----------------------------------------------------------------------------
 39444                                  
 39445                                  SHARE_VIOLATION:
 39446 0000744B 1E                      	PUSH    DS
 39447 0000744C 06                      	PUSH	ES
 39448 0000744D 57                      	PUSH    DI
 39449 0000744E C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39450                                  	;mov	byte [ALLOWED],18h
 39451 00007453 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39452 00007458 C42E[8A05]              	LES     BP,[THISDPB]
 39453 0000745C BF0100                  	MOV     DI,1			; Fake some registers
 39454 0000745F 89F9                    	MOV     CX,DI
 39455                                  	;mov	dx,[es:bp+17]
 39456 00007461 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39457 00007465 E87DDF                  	call	HARDERR
 39458 00007468 5F                      	POP     DI
 39459 00007469 07                      	POP	ES
 39460 0000746A 1F                      	POP     DS
 39461 0000746B 3C01                    	CMP     AL,1
 39462 0000746D 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39463 0000746F F9                      	STC
 39464 00007470 C3                      	retn
 39465                                  
 39466                                  ;----------------------------------------------------------------------------
 39467                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39468                                  ;       NOT perform a close, it merely asserts that the sharing information
 39469                                  ;       for the SFT/UID/PID may be safely released.
 39470                                  ;
 39471                                  ;   Inputs:     ES:DI points to an SFT
 39472                                  ;   Outputs:    None
 39473                                  ;   Registers modified: all except DS,ES,DI
 39474                                  ;----------------------------------------------------------------------------
 39475                                  
 39476                                  ShareEnd:
 39477                                  	; 26/07/2019
 39478 00007471 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39479 00007475 C3                      	retn
 39480                                  
 39481                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39482                                  ;----------------------------------------------------------------------------
 39483                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39484                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39485                                  ;
 39486                                  ;   Inputs:     ThisSFT points to the SFT
 39487                                  ;               WFP_Start points to the WFP
 39488                                  ;   Outputs:    Carry clear => successful entry
 39489                                  ;               Carry set => failed system call
 39490                                  ;   Registers modified: all
 39491                                  ;----------------------------------------------------------------------------
 39492                                  
 39493                                  ShareEnter:
 39494 00007476 51                      	push	cx
 39495                                  retry:
 39496 00007477 8B0E[1A00]              	mov     cx,[RetryCount]
 39497                                  attempt:
 39498 0000747B C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39499 0000747F 31C0                    	XOR     AX,AX
 39500                                   	;mov	[es:di+51],axfff
 39501 00007481 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39502 00007485 51                      	push	cx
 39503 00007486 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39504 00007489 59                      	pop	cx
 39505 0000748A 730A                    	jnc	short done		; success, let the user see this
 39506 0000748C E8BF9D                  	call	Idle                    ; wait a while
 39507 0000748F E2EA                    	loop    attempt                 ; go back for another attempt
 39508 00007491 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39509 00007494 73E1                    	jnc	short retry		; user said to retry, go do it
 39510                                  done:
 39511 00007496 59                      	pop	cx
 39512 00007497 C3                      	retn
 39513                                  
 39514                                  ;============================================================================
 39515                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39516                                  ;============================================================================
 39517                                  ; 29/04/2019 - Retro DOS 4.0
 39518                                  
 39519                                  ;** EXEPATCH.ASM 
 39520                                  ;----------------------------------------------------------------------------
 39521                                  ;	Contains the foll:
 39522                                  ;
 39523                                  ;		- code to find and overlay buggy unpack code
 39524                                  ;		- new code to be overlayed on buggy unpack code 
 39525                                  ;		- old code sequence to identify buggy unpack code
 39526                                  ;
 39527                                  ;	Revision history:
 39528                                  ;
 39529                                  ;		Created: 5/14/90
 39530                                  ;----------------------------------------------------------------------------
 39531                                  
 39532                                  ;----------------------------------------------------------------------------
 39533                                  ;
 39534                                  ; M020 : Fix for rational bug - for details see routine header
 39535                                  ; M028 : 4b04 implementation
 39536                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39537                                  ; M032 : set turnoff bit only if DOS in HMA.
 39538                                  ; M033 : if IP < 2 then not exepacked.
 39539                                  ; M046 : support for a 4th version of exepacked files.
 39540                                  ; M068 : support for copy protected apps.
 39541                                  ; M071 : use A20OFF_COUNT of 10.
 39542                                  ;
 39543                                  ;----------------------------------------------------------------------------
 39544                                  
 39545                                  PATCH1_COM_OFFSET	EQU	06CH
 39546                                  PATCH1_OFFSET		EQU	028H
 39547                                  PATCH1_CHKSUM		EQU	0EF4EH
 39548                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39549                                  
 39550                                  PATCH2_COM_OFFSET	EQU	076H
 39551                                  PATCH2_OFFSET		EQU	032H
 39552                                  
 39553                                  	; The strings that start at offset 076h have two possible 
 39554                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39555                                  
 39556                                  PATCH2_CHKSUM		EQU	78B2H
 39557                                  CHKSUM2_LEN		EQU	119H/2
 39558                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39559                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39560                                  
 39561                                  PATCH3_COM_OFFSET	EQU	074H
 39562                                  PATCH3_OFFSET		EQU	032H
 39563                                  PATCH3_CHKSUM		EQU	4EDEH
 39564                                  CHKSUM3_LEN		EQU	117H/2
 39565                                  
 39566                                  ;**	Data structure passed for ExecReady call
 39567                                  ;
 39568                                  ;struc ERStruc
 39569                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39570                                  ; .ER_Flags:	resw	1
 39571                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39572                                  ; .ER_PSP:	resw	1	; PSP of the program
 39573                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39574                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39575                                  ; .size:
 39576                                  ;endstruc
 39577                                  
 39578                                  ;DOSCODE SEGMENT
 39579                                  
 39580                                  	; 22/05/2019 - Retro DOS v4.0
 39581                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39582                                  
 39583                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39584                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39585                                  
 39586                                  ; M028 - BEGIN
 39587                                  
 39588                                  ;--------------------------------------------------------------------------
 39589                                  ;
 39590                                  ;	Procedure Name		: ExecReady
 39591                                  ;
 39592                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39593                                  ;
 39594                                  ;--------------------------------------------------------------------------
 39595                                  
 39596                                  ExecReady:
 39597 00007498 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39598                                  	;;test	word [si+2],1
 39599                                  	; 17/12/2022
 39600 0000749A F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39601                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39602 0000749E 7413                    	jz	short er_setver		; only setver for .COM files
 39603                                  
 39604                                  	;mov	ax,[si+8]
 39605 000074A0 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39606 000074A3 83C010                  	add	ax,10h
 39607 000074A6 8EC0                    	mov	es,ax
 39608                                  
 39609                                  	;mov	cx,[si+10]
 39610 000074A8 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39611                                  	;mov	cx,[si+12]
 39612 000074AB 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39613                                  
 39614                                  	;call	[ss:FixExePatch]
 39615 000074AE 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 39616                                  	
 39617                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39618                                  	;call	[ss:Rational386PatchPtr]
 39619                                  
 39620                                  er_setver:
 39621                                  	;;test	word [si+2],2		; Q: is this an overlay
 39622                                  	; 17/12/2022
 39623 000074B3 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39624                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39625 000074B7 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39626                                  					; N: set up lie version first
 39627 000074B9 1E                      	push	ds
 39628 000074BA 56                      	push	si
 39629                                  	;lds	si,[si+4]
 39630 000074BB C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39631 000074BE E870ED                  	call	Scan_Execname1
 39632 000074C1 E881ED                  	call	Scan_Special_Entries
 39633 000074C4 5E                      	pop	si
 39634 000074C5 1F                      	pop	ds
 39635                                  	;mov	es,[si+8]
 39636 000074C6 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39637 000074C9 36A1[BC0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39638 000074CD 26A34000                	mov	[es:PDB.Version],ax
 39639                                  
 39640                                  er_chkdoshi:
 39641 000074D1 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39642 000074D7 741F                    	je	short er_done		; M032: N: done
 39643                                  
 39644                                  					; M068 - Start
 39645                                  	;mov	ax,[si+8]
 39646 000074D9 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39647                                  
 39648                                  	;or	byte [ss:DOS_FLAG],4
 39649 000074DC 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39650                                  					; ah = 25 & ah= 49. See dossym.inc 
 39651                                  					; under TAG M003 & M009 for 
 39652                                  					; explanation
 39653                                  	;;test	word [si+2],1
 39654                                  	; 17/12/2022
 39655 000074E2 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39656                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39657 000074E6 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39658                                  					;    a20off_psp and ret
 39659 000074E8 1E                         	push	ds
 39660 000074E9 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39661 000074EB E89002                  	call	IsCopyProt		; check if copy protected
 39662 000074EE 1F                      	pop	ds
 39663                                  
 39664                                  er_setA20:
 39665                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39666                                  	; is non-zero at this point it indicates that the A20 is to be 
 39667                                  	; turned off for that many int 21 calls made by the app. In 
 39668                                  	; addition the A20 has to be turned off when we exit from this 
 39669                                  	; call. Hence the inc.
 39670                                  
 39671 000074EF 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39672 000074F4 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39673                                  					; turned OFF.
 39674                                  er_done:				; M068 - End
 39675 000074F8 31C0                    	xor	ax,ax
 39676 000074FA C3                      	retn
 39677                                  
 39678                                  ; M028 - END
 39679                                  
 39680                                  
 39681                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39682                                  %if 0
 39683                                  
 39684                                  ;----------------------------------------------------------------------------
 39685                                  ;
 39686                                  ; procedure : Rational386Patch
 39687                                  ;
 39688                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39689                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39690                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39691                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39692                                  ;
 39693                                  ; This routine applies patches to the Rational DOS Extender to work around
 39694                                  ; most of the register trashing bugs.
 39695                                  ;
 39696                                  ; Note that there are additional register trashing bugs not fixed by these
 39697                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39698                                  ; may be modified on interrupts.
 39699                                  ;
 39700                                  ; There are two different Rational DOS Extender patchs in this module.
 39701                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39702                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39703                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39704                                  ; or not.
 39705                                  ;
 39706                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39707                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39708                                  ; running in the HMA.
 39709                                  ;
 39710                                  ; This patch detection and replacement is based on an example supplied by
 39711                                  ; Ben Williams at Rational.
 39712                                  ;
 39713                                  ;----------------------------------------------------------------------------
 39714                                  
 39715                                  ; 22/05/2019 - Retro DOS v4.0
 39716                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39717                                  
 39718                                  ;----------------------------------------------------------------------------
 39719                                  ;
 39720                                  ; INPUT : ES = segment where program got loaded
 39721                                  ;
 39722                                  ;----------------------------------------------------------------------------
 39723                                  
 39724                                  rpFind1:
 39725                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39726                                  
 39727                                  rpFind1Len equ	$ - rpFind1
 39728                                  
 39729                                  ;	cli
 39730                                  ;	in	al, 21h
 39731                                  ;	pusha
 39732                                  ;	xor	ax, ax
 39733                                  ;	out	43h, al
 39734                                  ;	mov	dx, ...
 39735                                  
 39736                                  rpFind1a:
 39737                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39738                                  
 39739                                  rpFind1aLen equ	$ - rpFind1a
 39740                                  
 39741                                  ;	mov	al, 0Eh
 39742                                  ;	out	37h, al
 39743                                  ;	xor	ax, ax
 39744                                  ;	out	0F2h, al
 39745                                  
 39746                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39747                                  
 39748                                  rpFind2:
 39749                                  	db	0Fh, 20h, 0C0h
 39750                                  
 39751                                  rpFind2Len equ	$ - rpFind2
 39752                                  
 39753                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39754                                  
 39755                                  rpFind3:
 39756                                  	db	0Fh, 22h, 0C0h, 0EAh
 39757                                  
 39758                                  rpFind3Len equ	$ - rpFind3
 39759                                  
 39760                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39761                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39762                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39763                                  
 39764                                  ; note, there is no rpRepl1 string
 39765                                  
 39766                                  rpRepl2:
 39767                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39768                                  
 39769                                  rpRepl2Len equ	$ - rpRepl2
 39770                                  
 39771                                  ;	push	eax
 39772                                  ;	push	cx
 39773                                  ;	mov	eax, cr0
 39774                                  
 39775                                  rpRepl3:
 39776                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39777                                  
 39778                                  rpRepl3Len equ	$ - rpRepl3
 39779                                  
 39780                                  ;	mov	ss, bx
 39781                                  ;	pop	cx
 39782                                  ;	pop	eax
 39783                                  
 39784                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39785                                  
 39786                                  rpFind4:
 39787                                  	db	93h, 58h, 8Bh, 0CCh
 39788                                  
 39789                                  rpFind4Len equ	$ - rpFind4
 39790                                  
 39791                                  ;	xchg	bx, ax
 39792                                  ;	pop	ax
 39793                                  ;	mov	cx, sp
 39794                                  
 39795                                  rpFind5:
 39796                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39797                                  
 39798                                  rpFind5Len equ	$ - rpFind5
 39799                                  
 39800                                  ;	mov	ax, DE0Ch
 39801                                  ;	int	67h
 39802                                  ;	mov	sp, cx
 39803                                  ;	jmp	bx
 39804                                  
 39805                                  rpRepl4:
 39806                                  	db	93h, 58h, 8Bh, 0CCh
 39807                                  	db	02Eh, 066h, 0A3h
 39808                                  
 39809                                  rpRepl4o1Len equ $ - rpRepl4
 39810                                  
 39811                                  	db	00h, 00h
 39812                                  	db	02Eh, 066h, 89h, 36h
 39813                                  
 39814                                  rpRepl4o2Len equ $ - rpRepl4
 39815                                  
 39816                                  	db	00h, 00h
 39817                                  
 39818                                  rpRepl4Len equ	$ - rpRepl4
 39819                                  
 39820                                  ;	xchg	bx, ax
 39821                                  ;	pop	ax
 39822                                  ;	mov	cx, sp
 39823                                  ;	mov	dword ptr cs:[xxxx], eax
 39824                                  ;	mov	dword ptr cs:[xxxx], esi
 39825                                  
 39826                                  rpRepl5:
 39827                                  	db	8Bh, 0E1h
 39828                                  	db	2Eh, 66h, 0A1h
 39829                                  
 39830                                  rpRepl5o1Len equ $ - rpRepl5
 39831                                  
 39832                                  	db	00h, 00h
 39833                                  	db	2Eh, 66h, 8Bh, 36h
 39834                                  
 39835                                  rpRepl5o2Len equ $ - rpRepl5
 39836                                  
 39837                                  	db	00h, 00h
 39838                                  	db	0FFh, 0E3h
 39839                                  
 39840                                  rpRepl5Len equ	$ - rpRepl5
 39841                                  
 39842                                  ;	mov	sp, cx
 39843                                  ;	mov	eax, dword ptr cs:[xxxx]
 39844                                  ;	mov	esi, dword ptr cs:[xxxx]
 39845                                  ;	jmp	bx
 39846                                  
 39847                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39848                                  
 39849                                  rpFind6:
 39850                                  	db	0FAh, 52h, 51h
 39851                                  
 39852                                  rpFind6Len equ	$ - rpFind6
 39853                                  
 39854                                  ;	cli
 39855                                  ;	push	dx
 39856                                  ;	push	cx
 39857                                  
 39858                                  rpFind7a:
 39859                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39860                                  
 39861                                  rpFind7aLen equ	$ - rpFind7a
 39862                                  
 39863                                  ;	mov	ax, 0DE0Ch
 39864                                  ;	call	fword ptr es:[xxxx]
 39865                                  
 39866                                  rpFind7b:
 39867                                  	db	59h, 5Ah, 5Bh
 39868                                  
 39869                                  rpFind7bLen equ	$ - rpFind7b
 39870                                  
 39871                                  ;	pop	cx
 39872                                  ;	pop	dx
 39873                                  ;	pop	bx
 39874                                  
 39875                                  rpRepl6 :
 39876                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39877                                  
 39878                                  rpRepl6Len equ	$ - rpRepl6
 39879                                  
 39880                                  ;	cli
 39881                                  ;	push	eax
 39882                                  ;	push	ebx
 39883                                  ;	push	ecx
 39884                                  ;	push	edx
 39885                                  
 39886                                  rpRepl7:
 39887                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39888                                  
 39889                                  rpRepl7Len equ	$ - rpRepl7
 39890                                  
 39891                                  ;	pop	edx
 39892                                  ;	pop	ecx
 39893                                  ;	pop	ebx
 39894                                  ;	pop	eax
 39895                                  ;	pop	bx
 39896                                  
 39897                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39898                                  
 39899                                  rpFind8:
 39900                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39901                                  
 39902                                  rpFind8Len equ	$ - rpFind8
 39903                                  
 39904                                  ;	pusha
 39905                                  ;	push	es
 39906                                  ;	push	ds
 39907                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39908                                  ;	mov	ds, ax
 39909                                  
 39910                                  rpFind9 :
 39911                                  	db	1Fh, 07h, 61h
 39912                                  
 39913                                  rpFind9Len equ	$ - rpFind9
 39914                                  
 39915                                  ;	pop	ds
 39916                                  ;	pop	es
 39917                                  ;	popa
 39918                                  
 39919                                  rpRepl8:
 39920                                   	db	66h, 60h, 06h, 1Eh
 39921                                  
 39922                                  rpRepl8Len equ	$ - rpRepl8
 39923                                  
 39924                                  ;	pushad
 39925                                  ;	push	es
 39926                                  ;	push	ds
 39927                                  
 39928                                  rpRepl9:
 39929                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39930                                  
 39931                                  rpRepl9Len equ	$ - rpRepl9
 39932                                  
 39933                                  ;	pop	ds
 39934                                  ;	pop	es
 39935                                  ;	popad
 39936                                  ;	retn			;no need to jmp back to main-line
 39937                                  
 39938                                  ;----------------------------------------------------------------------------
 39939                                  
 39940                                  struc SearchPair
 39941                                   .sp_off1: resw 1	; offset of 1st search string
 39942                                   .sp_len1: resw 1	; length of 1st search string
 39943                                   .sp_off2: resw 1	; 2nd string
 39944                                   .sp_len2: resw 1	; 2nd string
 39945                                   .sp_diff: resw 1	; max difference between offsets
 39946                                   .size:
 39947                                  endstruc
 39948                                  
 39949                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39950                                  
 39951                                  rpBug1Strs:
 39952                                  	dw	rpFind2
 39953                                  	dw	rpFind2Len ; 3
 39954                                  	dw	rpFind3
 39955                                  	dw	rpFind3Len ; 4
 39956                                  	dw	20h
 39957                                  
 39958                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39959                                  
 39960                                  rpBug2Strs:
 39961                                  	dw	rpFind4
 39962                                  	dw	rpFind4Len ; 4
 39963                                  	dw	rpFind5
 39964                                  	dw	rpFind5Len ; 9
 39965                                  	dw	80h
 39966                                  
 39967                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39968                                  
 39969                                  rpBug3Strs:
 39970                                  	dw	rpFind6
 39971                                  	dw	rpFind6Len ; 3
 39972                                  	dw	rpFind7a
 39973                                  	dw	rpFind7aLen ; 7
 39974                                  	dw	80h
 39975                                  
 39976                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 39977                                  
 39978                                  rpBug4Strs:
 39979                                  	dw	rpFind8
 39980                                  	dw	4
 39981                                  	dw	rpFind9
 39982                                  	dw	rpFind9Len ; 3
 39983                                  	dw	80h
 39984                                  
 39985                                  ;----------------------------------------------------------------------------
 39986                                  
 39987                                  struc StackVars
 39988                                   .sv_wVersion:	resw 1		; Rational extender version #
 39989                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 39990                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 39991                                   .size:
 39992                                  endstruc
 39993                                  
 39994                                  ;----------------------------------------------------------------------------
 39995                                  
 39996                                  ; 22/05/2019 - Retro DOS v4.0
 39997                                  
 39998                                  Rational386Patch:
 39999                                  	; Do a few quick checks to see if this looks like a Rational
 40000                                  	; Extended application. Hopefully this will quickly weed out
 40001                                  	; most non Rational apps.
 40002                                  
 40003                                  	cmp	word [es:0],395		; version number goes here - versions
 40004                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40005                                  
 40006                                  	cmp	word [es:0Ch],20h	; always has this value here
 40007                                  	jne	short rp3QuickOut
 40008                                  
 40009                                  	push	ax
 40010                                  
 40011                                  	mov	ax,18h 			; extender has 18h at
 40012                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40013                                  	jne	short rp3QO_ax
 40014                                  	cmp	[es:28],ax
 40015                                  	jne	short rp3QO_ax
 40016                                  	cmp	[es:36],ax
 40017                                  	je	short rp3Maybe
 40018                                  rp3QO_ax:
 40019                                  	pop	ax
 40020                                  rp3QuickOut:
 40021                                  	retn
 40022                                  
 40023                                  ; It might be the rational extender, do more extensive checking
 40024                                  
 40025                                  rp3Maybe:
 40026                                  	cld
 40027                                  	push	bx			; note ax pushed above
 40028                                  	push	cx
 40029                                  	push	dx
 40030                                  	push	si
 40031                                  	push	di
 40032                                  	push	es
 40033                                  	push	ds			; we use all of them
 40034                                  	push	bp
 40035                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40036                                  	mov	bp,sp
 40037                                  
 40038                                  	push	cs
 40039                                  	pop	ds
 40040                                  
 40041                                  	mov	ax,[es:0]		; save version #
 40042                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40043                                  	mov	[bp],ax	
 40044                                  					; check that binary version # matches
 40045                                  	call	VerifyVersion		;   ascii string
 40046                                  	jne	short rp3Exit_j
 40047                                  
 40048                                  ; Looks like this is it, find where to put the patch code.  The
 40049                                  ; patch will be located on top of Rational code specific to 80286
 40050                                  ; processors, so these patchs MUST NOT be applied if running on
 40051                                  ; an 80286 system.
 40052                                  
 40053                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40054                                  
 40055                                  	mov	cx,4500h		; force search len to 4700h (searches
 40056                                  	;mov	[bp+2],cx
 40057                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40058                                  
 40059                                  	mov	es,[es:20h]		; es=code segment
 40060                                  
 40061                                  	mov	si,rpFind1		; string to find
 40062                                  	mov	dx,rpFind1Len ; 10	; length to match
 40063                                  	call	ScanCodeSeq		; look for code seq
 40064                                  	jz	short rpGotPatch
 40065                                  
 40066                                  ; According to Rational, some very old versions of the extender may not
 40067                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40068                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40069                                  
 40070                                  	mov	si,rpFind1a
 40071                                  	mov	dx,rpFind1aLen  ;8
 40072                                  	call	ScanCodeSeq
 40073                                  	jz	short rpGotPatch
 40074                                  
 40075                                  rp3Exit_j:
 40076                                  	jmp	rp3Exit
 40077                                  
 40078                                  ; Found the location to write patch code! DI = offset in code seg.
 40079                                  
 40080                                  rpGotPatch:
 40081                                  	;mov	[bp+4],di
 40082                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40083                                  
 40084                                  ;----------------------------------------------------------------------------
 40085                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40086                                  
 40087                                  	;cmp	word [bp+0],381
 40088                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40089                                  	cmp	word [bp],381
 40090                                  	jae	short rpBug2			;   < 3.81
 40091                                  
 40092                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40093                                  	call	FindBadCode
 40094                                  	jc	short rpBug2
 40095                                  
 40096                                  ; si = rpFind2 offset, di = rpFind3 offset
 40097                                  
 40098                                  	push	di
 40099                                  	mov	di,si				; rpFind2 offset
 40100                                  	mov	dx,rpFind2Len ; 3
 40101                                  
 40102                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40103                                  	jne	short rp_no_cx
 40104                                  
 40105                                  	dec	di				;   yes, gobble up push cx too
 40106                                  	inc	dx
 40107                                  rp_no_cx:
 40108                                  	mov	si,rpRepl2			; patch out find2 sequence
 40109                                  	mov	cx,rpRepl2Len  ; 6
 40110                                  	call	GenPatch
 40111                                  
 40112                                  	pop	di				; rpFind3 offset
 40113                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40114                                  	jne	short rp_no_cx2
 40115                                  
 40116                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40117                                  rp_no_cx2:
 40118                                  	;mov	ax,[bp+4]
 40119                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40120                                  	;mov	[es:di+4],ax
 40121                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40122                                  
 40123                                  	push	di				; save find3 offset
 40124                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40125                                  	mov	cx,rpRepl3Len ; 5
 40126                                  	call	CopyPatch
 40127                                  
 40128                                  	pop	bx				; find3 offset
 40129                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40130                                  	call	GenJump 			; jmp back from patch area
 40131                                  	;mov	[bp+4],di
 40132                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40133                                  						;   area pointer
 40134                                  
 40135                                  ;----------------------------------------------------------------------------
 40136                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40137                                  
 40138                                  rpBug2:
 40139                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40140                                  	call	FindBadCode
 40141                                  	jc	short rpBug3
 40142                                  
 40143                                  ; si = rpFind4 offset, di = rpFind5 offset
 40144                                  
 40145                                  	;push	word [bp+4]
 40146                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40147                                  						;   (where repl4 goes)
 40148                                  	push	di				; save find5 offset
 40149                                  
 40150                                  	mov	di,si
 40151                                  	mov	dx,rpFind4Len ; 4
 40152                                  	mov	si,rpRepl4
 40153                                  	mov	cx,rpRepl4Len ; 15
 40154                                  	call	GenPatch			; patch out find4 code
 40155                                  
 40156                                  	pop	di				; find5 offset
 40157                                  	add	di,5				; keep 5 bytes of find5 code
 40158                                  	;mov	bx,[bp+4]
 40159                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40160                                  	push	bx				; save repl5 location
 40161                                  	call	GenJump
 40162                                  
 40163                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40164                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40165                                  	call	CopyPatch			;   so no need to jmp back to
 40166                                  						;   main-line code
 40167                                  
 40168                                  ; patches have been made, now update the patch code to store/load dwords just
 40169                                  ; after the code in the patch area
 40170                                  
 40171                                  	pop	di				; repl5 location
 40172                                  	pop	si				; repl4 location
 40173                                  
 40174                                  	;mov	ax,[bp+4]
 40175                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40176                                  
 40177                                  	;mov	[es:si+7],ax
 40178                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40179                                  	;mov	[es:di+5],ax
 40180                                  	mov	[es:di+rpRepl5o1Len],ax
 40181                                  	add	ax,4
 40182                                  	;mov	[es:si+0Dh],ax
 40183                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40184                                  	;mov	[es:di+0Bh],ax
 40185                                  	mov	[es:di+rpRepl5o2Len],ax
 40186                                  
 40187                                  	;add	word [bp+4],8
 40188                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40189                                  						; patch area
 40190                                  
 40191                                  ;----------------------------------------------------------------------------
 40192                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40193                                  
 40194                                  rpBug3:
 40195                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40196                                  	call	FindBadCode
 40197                                  	jc	short rpBug4
 40198                                  
 40199                                  	;add	di,9
 40200                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40201                                  	push	si				;   code and locate find7b
 40202                                  	mov	si,rpFind7b			;   sequence
 40203                                  	mov	dx,rpFind7bLen ; 3
 40204                                  	call	ScanCodeSeq_di
 40205                                  	pop	si
 40206                                  	jnz	short rpBug4
 40207                                  
 40208                                  	push	di				; save find7b code offset
 40209                                  
 40210                                  	mov	di,si
 40211                                  	mov	dx,rpFind6Len ; 3
 40212                                  	mov	si,rpRepl6
 40213                                  	mov	cx,rpRepl6Len ; 9
 40214                                  	call	GenPatch			; patch out find6 code
 40215                                  
 40216                                  	pop	di
 40217                                  	mov	dx,rpFind7bLen ; 3
 40218                                  	mov	si,rpRepl7
 40219                                  	mov	cx,rpRepl7Len ; 9
 40220                                  	call	GenPatch			; patch out find7b code
 40221                                  
 40222                                  ;----------------------------------------------------------------------------
 40223                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40224                                  
 40225                                  rpBug4:
 40226                                  	;cmp	word [bp+0],360
 40227                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40228                                  	cmp	word [bp],360
 40229                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40230                                  
 40231                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40232                                  	call	FindBadCode
 40233                                  	jc	short rp3Exit
 40234                                  
 40235                                  	push	di				; save find9 code offset
 40236                                  
 40237                                  	mov	di,si
 40238                                  	mov	dx,3
 40239                                  	mov	si,rpRepl8
 40240                                  	mov	cx,rpRepl8Len ; 4
 40241                                  	call	GenPatch			; patch out find8 code
 40242                                  
 40243                                  	pop	di				; find9 offset
 40244                                  	;mov	bx,[bp+4]
 40245                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40246                                  	call	GenJump 			;   patch area
 40247                                  
 40248                                  	mov	si,rpRepl9			; copy replacement code to
 40249                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40250                                  	call	CopyPatch			;   so no jmp back to main-line
 40251                                  
 40252                                  rp3Exit:
 40253                                  	add	sp,StackVars.size
 40254                                  	pop	bp
 40255                                  	pop	ds
 40256                                  	pop	es
 40257                                  	pop	di
 40258                                  	pop	si
 40259                                  	pop	dx
 40260                                  	pop	cx
 40261                                  	pop	bx
 40262                                  	pop	ax
 40263                                  	retn
 40264                                  
 40265                                  ;----------------------------------------------------------------------------
 40266                                  ;
 40267                                  ; FindBadCode
 40268                                  ;
 40269                                  ; Searches Rational code segment looking for a pair of find strings (all
 40270                                  ; patches have at least two find strings).
 40271                                  ;
 40272                                  ; Entry:
 40273                                  ;	ES    = code segment to search
 40274                                  ;	DS:BX = search pair structure for this search
 40275                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40276                                  ;
 40277                                  ; Exit:
 40278                                  ;	CY flag clear if both strings found, and
 40279                                  ;	SI    = offset in ES of 1st string
 40280                                  ;	DI    = offset in ES of 2nd string
 40281                                  ;	CY set if either string not found, or strings too far apart
 40282                                  ;
 40283                                  ; Used:
 40284                                  ;	CX
 40285                                  ;
 40286                                  ;----------------------------------------------------------------------------
 40287                                  
 40288                                  ;struc SearchPair
 40289                                  ; .sp_off1: resw 1	; offset of 1st search string
 40290                                  ; .sp_len1: resw 1	; length of 1st search string
 40291                                  ; .sp_off2: resw 1	; 2nd string
 40292                                  ; .sp_len2: resw 1	; 2nd string
 40293                                  ; .sp_diff: resw 1	; max difference between offsets
 40294                                  ; .size:
 40295                                  ;endstruc
 40296                                  
 40297                                  FindBadCode:
 40298                                  	;mov	cx,[bp+2]
 40299                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40300                                  
 40301                                  	mov	si,[bx]	; mov si,[bx+0]
 40302                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40303                                  	
 40304                                  	;mov	dx,[bx+2]
 40305                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40306                                  	call	ScanCodeSeq
 40307                                  	jnz	short fbc_error		; done if 1st not found
 40308                                  
 40309                                  	push	di			; save 1st string offset
 40310                                  
 40311                                  	;mov	si,[bx+4]
 40312                                  	mov	si,[bx+SearchPair.sp_off2]
 40313                                  	;mov	dx,[bx+6]
 40314                                  	mov	dx,[bx+SearchPair.sp_len2]
 40315                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40316                                  
 40317                                  	pop	si			; restore 1st string offset
 40318                                  	jnz	short fbc_error
 40319                                  
 40320                                  	mov	ax,di			; sanity check that
 40321                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40322                                  	jc	short fbc_error
 40323                                  	;cmp	ax,[bx+8]
 40324                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40325                                  	ja	short fbc_error
 40326                                  
 40327                                  	clc
 40328                                  	retn
 40329                                  
 40330                                  fbc_error:
 40331                                  	stc
 40332                                  	retn
 40333                                  
 40334                                  ;----------------------------------------------------------------------------
 40335                                  ;
 40336                                  ; GenPatch
 40337                                  ;
 40338                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40339                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40340                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40341                                  ; code.
 40342                                  ;
 40343                                  ; Entry:
 40344                                  ;	ES:DI = start of buggy code to be patched
 40345                                  ;	DX    = length of buggy code to be patched
 40346                                  ;	DS:SI = replacement patch code
 40347                                  ;	CX    = length of replacement patch code
 40348                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40349                                  ;
 40350                                  ; Exit:
 40351                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40352                                  ;
 40353                                  ; Used:
 40354                                  ;	AX, BX, SI, Flags
 40355                                  ;
 40356                                  ;----------------------------------------------------------------------------
 40357                                  
 40358                                  GenPatch:
 40359                                  	push	di			;save offset of buggy code
 40360                                  
 40361                                  	;mov	bx,[bp+4]
 40362                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40363                                  					;jump from buggy code to patch area
 40364                                  	call	GenJump
 40365                                  
 40366                                  	call	CopyPatch		;copy replacement code to patch area
 40367                                  
 40368                                  	pop	bx			;offset of buggy code + buggy code
 40369                                  	add	bx,dx			;  length = return from patch offset
 40370                                  
 40371                                  	call	GenJump 		;jump from patch area back to main-
 40372                                  	;mov	[bp+4],di
 40373                                  	mov	[bp+StackVars.sv_pPatch],di
 40374                                  					;  line code, update patch pointer
 40375                                  	retn
 40376                                  
 40377                                  ;----------------------------------------------------------------------------
 40378                                  ;
 40379                                  ; CopyPatch
 40380                                  ;
 40381                                  ; Copies patch code to patch location.
 40382                                  ;
 40383                                  ; Entry:
 40384                                  ;	DS:SI = patch code to be copied
 40385                                  ;	ES    = segment of code to patch
 40386                                  ;	CX    = length of code to copy
 40387                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40388                                  ;
 40389                                  ; Exit:
 40390                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40391                                  ;
 40392                                  ; Used:
 40393                                  ;	SI, Flags
 40394                                  ;
 40395                                  ;----------------------------------------------------------------------------
 40396                                  
 40397                                  CopyPatch:
 40398                                  	push	cx
 40399                                  	;mov	di,[bp+4]
 40400                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40401                                  	cld
 40402                                  	rep movsb
 40403                                  	pop	cx
 40404                                  	;mov	[bp+4],di
 40405                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40406                                  	retn
 40407                                  
 40408                                  ;----------------------------------------------------------------------------
 40409                                  ;
 40410                                  ; GenJump
 40411                                  ;
 40412                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40413                                  ;
 40414                                  ; Entry:
 40415                                  ;	ES:DI = from location (where to put jmp instruction)
 40416                                  ;	BX    = to location (where to jump to)
 40417                                  ;
 40418                                  ; Exit:
 40419                                  ;	DI = byte after generated jump
 40420                                  ;
 40421                                  ; Used:
 40422                                  ;	AX
 40423                                  ;
 40424                                  ;----------------------------------------------------------------------------
 40425                                  
 40426                                  GenJump:
 40427                                  	mov	al,0E9h		; jmp rel16 opcode
 40428                                  	stosb
 40429                                  
 40430                                  	mov	ax,bx		; calc offset to 'to' location
 40431                                  	sub	ax,di
 40432                                  	sub	ax,2
 40433                                  
 40434                                  	stosw			; output offset
 40435                                  
 40436                                  	retn
 40437                                  
 40438                                  ;----------------------------------------------------------------------------
 40439                                  ;
 40440                                  ; ScanCodeSeq
 40441                                  ;
 40442                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40443                                  ;
 40444                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40445                                  ;
 40446                                  ;----------------------------------------------------------------------------
 40447                                  
 40448                                  ScanCodeSeq:
 40449                                  	mov	di,200h
 40450                                  ScanCodeSeq_di:
 40451                                  	push	cx
 40452                                  	sub	cx,dx
 40453                                  	inc	cx
 40454                                  scsagain:
 40455                                  	push	si
 40456                                  	push	di
 40457                                  	push	cx
 40458                                  	mov	cx,dx
 40459                                  	rep	cmpsb
 40460                                  	pop	cx
 40461                                  	pop	di
 40462                                  	pop	si
 40463                                  	je	short scsfound
 40464                                  	inc	di
 40465                                  	loop	scsagain
 40466                                  scsfound:
 40467                                  	pop	cx
 40468                                  vvexit:		; 18/12/2022
 40469                                  	retn
 40470                                  	
 40471                                  ;----------------------------------------------------------------------------
 40472                                  ;
 40473                                  ; VerifyVersion
 40474                                  ;
 40475                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40476                                  ; from ES:2A.
 40477                                  ;
 40478                                  ;       Entry: AX = binary version number 
 40479                                  ;       Exit : Z flag set if version numbers match
 40480                                  ;
 40481                                  ;----------------------------------------------------------------------------
 40482                                  
 40483                                  VerifyVersion:
 40484                                  	mov	si,[es:2Ah]		; offset of version number
 40485                                  					;  in ascii
 40486                                  	mov	bl,10
 40487                                  	add	si,3			; point to last digit
 40488                                  
 40489                                  	call	VVDigit
 40490                                  	jne	short vvexit
 40491                                  	call	VVDigit
 40492                                  	jne	short vvexit
 40493                                  	cmp	byte [es:si],'.'
 40494                                  	jne	short vvexit
 40495                                  	dec	si
 40496                                  	;call	VVDigit
 40497                                  	; 18/12/2022
 40498                                  	;jmp	short VVDigit
 40499                                  ;vvexit:
 40500                                  	;retn
 40501                                  VVDigit:
 40502                                  	div	bl
 40503                                  	add	ah,'0'
 40504                                  	dec	si
 40505                                  	cmp	[es:si+1],ah
 40506                                  	mov	ah,0			; do not xor or sub we need Z
 40507                                  	retn
 40508                                  
 40509                                  %endif
 40510                                  
 40511                                  ;-----------------------------------------------------------------------
 40512                                  
 40513                                  ; 23/05/2019 - Retro DOS v4.0
 40514                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40515                                  
 40516                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40517                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40518                                  
 40519                                  exepatch_start:	 ; label byte
 40520                                  
 40521                                  	; The following is the code that'll be layed over the buggy unpack
 40522                                  	; code.
 40523                                  str1:
 40524 000074FB 06                      	db  06h	  		;push	es		 
 40525 000074FC 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40526                                  
 40527                                  first_stop equ	$-str1
 40528                                  			
 40529 000074FE 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40530                                  
 40531                                  first:  ; label	byte
 40532                                  
 40533 00007500 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40534 00007502 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40535 00007504 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40536 00007507 57                      	db  57h	    		;push	di
 40537 00007508 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40538 0000750B B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40539 0000750D F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40540 0000750F 47                      	db  47h	    		;inc	di			
 40541 00007510 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40542 00007512 5F                      	db  5Fh	    		;pop	di
 40543 00007513 58                      	db  58h	    		;pop	ax
 40544                                  
 40545                                  second_stop equ	$-first
 40546                                  
 40547 00007514 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40548                                  
 40549                                  second: ; label	byte
 40550                                  
 40551 00007516 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40552                                  		    		;NextRec:				
 40553 00007518 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40554                                  		    		;norm_agn:				
 40555 0000751B 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40556 0000751D F7D0                    	db  0F7h,0D0h		;not	ax		
 40557 0000751F D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40558 00007521 7413                    	db  74h,13h		;jz	short SI_ok			
 40559 00007523 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40560 00007525 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40561 00007528 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40562 0000752A 7308                    	db  73h,08h		;jnc	short SItoDS			
 40563 0000752C F7DA                    	db  0F7h,0DAh		;neg	dx			
 40564 0000752E D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40565 00007530 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40566 00007532 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40567                                  				;SItoDS: 				
 40568 00007534 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40569                                  				;SI_ok:					
 40570 00007536 87F7                    	db  87h,0F7h		;xchg	si,di			
 40571 00007538 1E                      	db  1Eh			;push	ds			
 40572 00007539 06                      	db  06h			;push	es			
 40573 0000753A 1F                      	db  1Fh			;pop	ds			
 40574 0000753B 07                      	db  07h			;pop	es			
 40575 0000753C FECD                    	db  0FEh,0CDh		;dec	ch			
 40576 0000753E 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40577 00007540 AC                      	db  0ACh		;lodsb			
 40578 00007541 92                      	db  92h			;xchg	dx,ax
 40579 00007542 4E                      	db  4Eh			;dec	si
 40580 00007543 AD                      	db  0ADh		;lodsw			
 40581 00007544 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40582 00007546 46                      	db  46h			;inc	si		
 40583 00007547 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40584 00007549 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40585 0000754B 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40586 0000754D 7505                    	db  75h,05h		;jne	short TryEnum
 40587 0000754F AC                      	db  0ACh		;lodsb				
 40588 00007550 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40589                                  
 40590                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40591 00007552 EB06                    	db  0EBh,06h		;jmp	short TryNext
 40592                                  
 40593                                  				;TryEnum:
 40594 00007554 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40595 00007556 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40596 00007558 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40597                                  				;TryNext:
 40598                                  
 40599 0000755A 92                      	db  92h			;xchg	dx,ax
 40600                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40601                                  
 40602 0000755B A801                    	db  0A8h,01h		;test	al,1			
 40603 0000755D 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40604 0000755F 9090                    	db  90h,90h		;nop,nop
 40605                                  	
 40606                                  last_stop equ $-second
 40607                                  size_str1 equ $-str1
 40608                                  
 40609                                  	; The following is the code that we need to look for in the exe
 40610                                  	; file.
 40611                                  
 40612                                  scan_patch1: ; label byte
 40613                                  
 40614 00007561 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40615 00007563 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40616 00007565 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40617 00007567 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40618 00007569 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40619 0000756B BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40620 0000756E B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40621 00007571 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40622 00007573 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40623 00007575 47                      	db  47h			;inc	di			
 40624 00007576 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40625 00007578 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40626 0000757A 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40627 0000757C 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40628 0000757E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40629                                  				;NextRec:
 40630 00007581 B104                    	db  0B1h,04h		;mov	cl,4
 40631 00007583 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40632 00007585 F7D0                    	db  0F7h,0D0h		;not	ax		
 40633 00007587 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40634 00007589 7409                    	db  74h,09h		;jz	short SI_ok
 40635 0000758B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40636 0000758D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40637 0000758F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40638 00007591 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40639                                  	       			;SI_ok:
 40640 00007594 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40641 00007596 F7D0                    	db  0F7h,0D0h		;not	ax
 40642 00007598 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40643 0000759A 7409                    	db  74h,09h		;jz	short DI_ok
 40644 0000759C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40645 0000759E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40646 000075A0 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40647 000075A2 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40648                                  				;DI_ok:
 40649                                  
 40650                                  size_scan_patch1 equ $-scan_patch1
 40651                                  
 40652                                  scan_patch2: ; label byte
 40653                                  			
 40654 000075A5 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40655 000075A7 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40656 000075A9 48                      	db  48h			;dec	ax
 40657 000075AA 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40658 000075AC 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40659 000075AE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40660 000075B1 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40661 000075B4 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40662 000075B6 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40663 000075B8 47                      	db  47h			;inc	di			
 40664 000075B9 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40665 000075BB 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40666 000075BD 48                      	db  48h			;dec	ax
 40667 000075BE 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40668 000075C0 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40669                                  				;NextRec:
 40670 000075C3 B104                    	db  0B1h,04h		;mov	cl,4
 40671 000075C5 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40672 000075C7 F7D0                    	db  0F7h,0D0h		;not	ax		
 40673 000075C9 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40674 000075CB 740A                    	db  74h,0Ah		;jz	short SI_ok
 40675 000075CD 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40676 000075CF 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40677 000075D1 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40678 000075D3 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40679                                  				;or	si,0FFF0H
 40680                                  				;SI_ok:
 40681 000075D7 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40682 000075D9 F7D0                    	db  0F7h,0D0h		;not	ax
 40683 000075DB D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40684 000075DD 740A                    	db  74h,0Ah		;jz	short DI_ok
 40685 000075DF 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40686 000075E1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40687 000075E3 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40688 000075E5 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40689                                  				;or	di,0FFF0H
 40690                                  				;DI_ok:
 40691                                  
 40692                                  size_scan_patch2 equ $-scan_patch2
 40693                                  
 40694                                  scan_patch3: ; label byte
 40695                                  
 40696 000075E9 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40697 000075EB 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40698 000075ED 48                      	db  48h			;dec	ax
 40699 000075EE 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40700 000075F0 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40701 000075F2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40702 000075F5 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40703 000075F8 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40704 000075FA F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40705 000075FC 47                      	db  47h			;inc	di			
 40706 000075FD 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40707 000075FF 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40708 00007601 48                      	db  48h			;dec	ax
 40709 00007602 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40710 00007604 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40711                                  				;NextRec:
 40712 00007607 B104                    	db  0B1h,04h		;mov	cl,4
 40713 00007609 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40714 0000760B F7D0                    	db  0F7h,0D0h		;not	ax		
 40715 0000760D D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40716 0000760F 7409                    	db  74h,09h		;jz	short SI_ok
 40717 00007611 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40718 00007613 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40719 00007615 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40720 00007617 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40721                                  				;SI_ok:
 40722 0000761A 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40723 0000761C F7D0                    	db  0F7h,0D0h		;not	ax
 40724 0000761E D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40725 00007620 7409                    	db  74h,09h		;jz	short DI_ok
 40726 00007622 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40727 00007624 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40728 00007626 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40729 00007628 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40730                                  				;DI_ok:
 40731                                  
 40732                                  size_scan_patch3 equ $-scan_patch3
 40733                                  
 40734                                  scan_com: ; label byte
 40735                                  
 40736 0000762B AC                      	db  0ACh		;lodsb			
 40737 0000762C 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40738 0000762E 4E                      	db  4Eh			;dec	si
 40739 0000762F AD                      	db  0ADh		;lodsw			
 40740 00007630 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40741 00007632 46                      	db  46h			;inc	si		
 40742 00007633 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40743 00007635 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40744 00007637 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40745 00007639 7506                    	db  75h,06h		;jne	short TryEnum
 40746 0000763B AC                      	db  0ACh		;lodsb				
 40747 0000763C F3AA                    	db  0F3h,0AAh		;rep stosb			
 40748 0000763E EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40749                                  				;TryEnum:
 40750 00007641 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40751 00007643 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40752 00007645 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40753                                  				;TryNext:
 40754 00007647 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40755 00007649 A801                    	db  0A8h,01h		;test	al,1			
 40756                                  ;	db  74h,0BAh		;jz	short NextRec			
 40757                                  
 40758                                  size_scan_com	equ	$-scan_com
 40759                                  
 40760                                  ;-----------------------------------------------------------------------
 40761                                  
 40762                                  ; 23/05/2019 - Retro DOS v4.0
 40763                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40764                                  
 40765                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40766                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40767                                  
 40768                                  ExePatch:
 40769                                  	; 28/12/2022 - Retro DOS v4.1
 40770                                  	;call	ExePackPatch
 40771                                  	;;call	word [ss:RationalPatchPtr]
 40772                                  	;retn
 40773                                  	; 28/12/2022
 40774                                  	;jmp	short ExePackPatch
 40775                                  
 40776                                  ;-----------------------------------------------------------------------
 40777                                  ;
 40778                                  ; Procedure Name 	: ExePackPatch
 40779                                  ;
 40780                                  ; Inputs	 	: DS 			-> DOSDATA
 40781                                  ;			  ES:0 			-> read in image
 40782                                  ;			  ax:cx = start cs:ip of program
 40783                                  ; Output		:		
 40784                                  ;
 40785                                  ;	1. If ES <= 0fffh
 40786                                  ;	   2. if exepack signature ('RB') found
 40787                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40788                                  ;	       	 4. if rest of the code & checksum compares
 40789                                  ;	  	    5. overlay buggy code with code in 
 40790                                  ;		       doscode:str1.
 40791                                  ;		 6. endif
 40792                                  ;	      7. endif
 40793                                  ;	   8. endif
 40794                                  ;	9. endif
 40795                                  ;
 40796                                  ;
 40797                                  ; Uses			: NONE
 40798                                  ;
 40799                                  ;-----------------------------------------------------------------------
 40800                                  		
 40801                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40802                                  	; 23/05/2019 - Retro DOS v4.0	
 40803                                  ExePackPatch:
 40804 0000764B 53                      	push	bx
 40805 0000764C 8CC3                    	mov	bx,es			; bx has load segment
 40806 0000764E 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40807 00007652 7602                    	jbe	short ep_cont		; N: 
 40808 00007654 5B                      	pop	bx			; Y: no need to patch
 40809 00007655 C3                      	retn
 40810                                  ep_cont:
 40811 00007656 1E                      	push	ds
 40812 00007657 06                      	push	es
 40813 00007658 50                      	push	ax
 40814 00007659 51                      	push	cx
 40815 0000765A 56                      	push	si
 40816 0000765B 57                      	push	di
 40817                                  	
 40818                                  		; M033 - start
 40819                                  		; exepacked programs have an IP of 12h (>=2)
 40820                                  
 40821 0000765C 83E902                  	sub	cx,2			; Q: is IP >=2 
 40822 0000765F 7303                    	jnb	short epp_1		; N: exit
 40823 00007661 E9C500                  	jmp	ep_notpacked
 40824                                  					; ax:cx now points to location of
 40825                                  					; 'RB' if this is an exepacked file.
 40826                                  		; M033 - end
 40827                                  epp_1:
 40828 00007664 89CF                    	mov	di,cx
 40829 00007666 8EC0                    	mov	es,ax
 40830 00007668 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40831                                  					; unpack_offset
 40832                                  
 40833 0000766D 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40834                                  	;ljne	ep_notpacked
 40835 00007672 7403                    	je	short epp_2
 40836 00007674 E9B200                  	jmp	ep_notpacked
 40837                                  epp_2:
 40838 00007677 0E                      	push	cs
 40839 00007678 1F                      	pop	ds			; set ds to cs
 40840                                  
 40841                                  	;add	di,6Ch
 40842 00007679 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40843                                  					;          file where we hope to find
 40844                                  					;	   scan string. 
 40845                                  
 40846 0000767C E8B200                  	call	chk_common_str		; check for match
 40847                                  
 40848 0000767F 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40849                                  					; N: check at patch2_offset
 40850                                  					; Y: check for rest of patch string
 40851 00007681 BE[6175]                	mov	si,scan_patch1
 40852                                  					; ds:si -> scan string 
 40853 00007684 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40854                                  
 40855                                  	;add	di,28h
 40856                                  	; 07/12/2022
 40857 00007689 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40858                                  					;          file where we hope to find
 40859                                  					;	   scan string. 
 40860                                  	;mov	cx,68
 40861 0000768C B94400                  	mov	cx,size_scan_patch1
 40862                                  	;mov	bx,142
 40863 0000768F BB8E00                  	mov	bx,CHKSUM1_LEN
 40864                                  	;mov	ax,0EF4Eh
 40865 00007692 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40866 00007695 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40867 00007698 7208                    	jc	short ep_done1		; Q: did we pass the test
 40868                                  					; N: exit
 40869                                  					; Y: overlay code with new 
 40870 0000769A BE[FB74]                	mov	si,str1
 40871                                  	;mov	cx,102
 40872 0000769D B96600                  	mov	cx,size_str1
 40873                                  	
 40874 000076A0 F3A4                    	rep	movsb
 40875                                  ep_done1:
 40876 000076A2 E98400                  	jmp	ep_done
 40877                                  
 40878                                  ep_chkpatch2:
 40879                                  	;mov	di,76h
 40880 000076A5 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40881                                  					; in another version of unpack
 40882 000076A8 E88600                  	call	chk_common_str		; check for match
 40883                                  
 40884 000076AB 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40885                                  					; N: check for patch3_offset
 40886                                  					; Y: check for rest of patch string
 40887                                  
 40888 000076AD BE[A575]                	mov	si,scan_patch2
 40889                                  					; ds:si -> scan string 
 40890                                  	;mov	di,32h
 40891 000076B0 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40892                                  					;          file where we hope to find
 40893                                  	;mov	cx,68			;	   scan string. 
 40894 000076B3 B94400                  	mov	cx,size_scan_patch2
 40895                                  	;mov	bx,140
 40896 000076B6 BB8C00                  	mov	bx,CHKSUM2_LEN
 40897                                  	;mov	ax,78B2h
 40898 000076B9 B8B278                  	mov	ax,PATCH2_CHKSUM
 40899 000076BC E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40900                                  
 40901                                  					; M046 - Start
 40902                                  					; Q: did we pass the test
 40903 000076BF 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40904                                  					; N: try with a different chksum
 40905                                  
 40906                                  
 40907 000076C1 BE[A575]                	mov	si,scan_patch2
 40908                                  					; ds:si -> scan string 
 40909                                  	;mov	cx,68
 40910 000076C4 B94400                  	mov	cx,size_scan_patch2
 40911                                  	;mov	bx,129
 40912 000076C7 BB8100                  	mov	bx,CHKSUM2A_LEN
 40913                                  	;mov	ax,1C47h
 40914 000076CA B8471C                  	mov	ax,PATCH2A_CHKSUM
 40915 000076CD E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40916                                  					; Q: did we pass the test
 40917 000076D0 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40918                                  					; Y: overlay code with new 
 40919                                  						
 40920                                  ep_patchcode2:			       	; M046 - End
 40921 000076D2 BE[FB74]                	mov	si,str1
 40922                                  	;mov	cx,3
 40923 000076D5 B90300                  	mov	cx,first_stop
 40924 000076D8 F3A4                    	rep	movsb
 40925 000076DA B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40926 000076DD AB                      	stosw
 40927 000076DE 83C602                  	add	si,2
 40928                                  	;mov	cx,20
 40929 000076E1 B91400                  	mov	cx,second_stop
 40930 000076E4 F3A4                    	rep	movsb
 40931 000076E6 AB                      	stosw				; put in dec ax and nop
 40932 000076E7 83C602                  	add	si,2
 40933                                  	;mov	cx,75
 40934 000076EA B94B00                  	mov	cx,last_stop
 40935 000076ED F3A4                    	rep	movsb
 40936 000076EF EB38                    	jmp	short ep_done
 40937                                  
 40938                                  ep_chkpatch3:
 40939                                  	;mov	di,74h
 40940 000076F1 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40941                                  					; in another version of unpack
 40942 000076F4 E83A00                  	call	chk_common_str		; check for match
 40943                                  
 40944 000076F7 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40945                                  					; N: exit
 40946                                  					; Y: check for rest of patch string
 40947 000076F9 BE[E975]                	mov	si,scan_patch3
 40948                                  					; ds:si -> scan string 
 40949                                  	;mov	di,32h
 40950 000076FC BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40951                                  					;          file where we hope to find
 40952                                  					;	   scan string. 
 40953                                  	;mov	cx,66
 40954 000076FF B94200                  	mov	cx,size_scan_patch3
 40955                                  	;mov	bx,139
 40956 00007702 BB8B00                  	mov	bx,CHKSUM3_LEN
 40957                                  	;mov	ax,4EDEh
 40958 00007705 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40959 00007708 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40960 0000770B 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40961                                  					; N: exit
 40962                                  					; Y: overlay code with new 
 40963 0000770D BE[FB74]                	mov	si,str1
 40964                                  	;mv	cx,3
 40965 00007710 B90300                  	mov	cx,first_stop
 40966 00007713 F3A4                    	rep	movsb
 40967 00007715 B048                    	mov	al,48h			; al = opcode for dec ax
 40968 00007717 AA                      	stosb
 40969 00007718 83C602                  	add	si,2
 40970                                  	;mov	cx,20
 40971 0000771B B91400                  	mov	cx,second_stop
 40972 0000771E F3A4                    	rep	movsb
 40973 00007720 AA                      	stosb				; put in dec ax
 40974 00007721 83C602                  	add	si,2
 40975                                  	;mov	cx,75
 40976 00007724 B94B00                  	mov	cx,last_stop
 40977 00007727 F3A4                    	rep	movsb
 40978                                  
 40979                                  ep_notpacked:
 40980                                  	;stc
 40981                                  ep_done:
 40982 00007729 5F                      	pop	di
 40983 0000772A 5E                      	pop	si
 40984 0000772B 59                      	pop	cx
 40985 0000772C 58                      	pop	ax
 40986 0000772D 07                      	pop	es
 40987 0000772E 1F                      	pop	ds
 40988 0000772F 5B                      	pop	bx
 40989 00007730 C3                      	retn
 40990                                  
 40991                                  ;-------------------------------------------------------------------------
 40992                                  ;
 40993                                  ; 	Procedure Name	: chk_common_str
 40994                                  ;
 40995                                  ;	Input		: DS = DOSCODE
 40996                                  ;			; ES:DI points to string in packed file
 40997                                  ;
 40998                                  ;	Output		; Z if match else NZ
 40999                                  ;
 41000                                  ;-------------------------------------------------------------------------
 41001                                  
 41002                                  	; 23/05/2019 - Retro DOS v4.0
 41003                                  chk_common_str:
 41004 00007731 BE[2B76]                	mov	si,scan_com
 41005                                  					; ds:si -> scan string 
 41006                                  	;mov	cx,32
 41007 00007734 B92000                  	mov	cx,size_scan_com
 41008                                  
 41009 00007737 F3A6                    	repe	cmpsb	       
 41010                                  
 41011                                  					; M046 - start
 41012                                  	; a fourth possible version of these exepacked programs have a 
 41013                                  	; 056h instead of 06Bh. See scan_com above
 41014                                  	;
 41015                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41016                                  	;
 41017                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41018                                  	; we shall try to match the rest of the string
 41019                                  	;
 41020                                  
 41021 00007739 7409                    	jz	short ccs_done
 41022 0000773B 26807DFF56              	cmp	byte [es:di-1],56h
 41023 00007740 7502                    	jnz	short ccs_done
 41024                                  
 41025 00007742 F3A6                    	repe	cmpsb	    
 41026                                  ccs_done:				; M046 - end
 41027 00007744 C3                      	retn
 41028                                  
 41029                                  ;-------------------------------------------------------------------------
 41030                                  ;
 41031                                  ;	Procedure Name	: chk_patchsum
 41032                                  ;
 41033                                  ;	Input		: DS:SI -> string we're looking for
 41034                                  ;			: ES:DI -> offset in packed file
 41035                                  ;			: CX 	= scan length
 41036                                  ;			: BX	= length of check sum
 41037                                  ;			: AX 	= value of check sum
 41038                                  ;
 41039                                  ;	Output		: if patch & check sum compare
 41040                                  ;				NC
 41041                                  ;			  else
 41042                                  ;				CY
 41043                                  ;
 41044                                  ;	Uses		: AX, BX, CX, SI
 41045                                  ;
 41046                                  ;-------------------------------------------------------------------------
 41047                                  
 41048                                  	; 23/05/2019 - Retro DOS v4.0
 41049                                  chk_patchsum:
 41050 00007745 57                      	push	di
 41051                                  
 41052 00007746 F3A6                    	repe	cmpsb			   
 41053                                  
 41054 00007748 751A                    	jnz	short cp_fail		; Q: does the patch match
 41055                                  					; N: exit
 41056                                  					; Y:	
 41057                                  
 41058                                  		; we do a check sum starting from the location of the 
 41059                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41060                                  		; unpacking code.
 41061                                  
 41062 0000774A 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41063 0000774F 89D9                    	mov	cx,bx			; cx = length of check sum
 41064                                  
 41065 00007751 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41066 00007753 31C0                    	xor	ax,ax
 41067                                  ep_chksum:
 41068 00007755 260305                  	add	ax,[es:di]
 41069 00007758 83C702                  	add	di,2
 41070 0000775B E2F8                    	loop	ep_chksum
 41071                                  
 41072 0000775D 5F                      	pop	di			; restore di
 41073                                  
 41074 0000775E 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41075 00007760 7502                    	jne	short cp_fail		; N: exit
 41076                                  					; Y: 
 41077 00007762 F8                      	clc	
 41078 00007763 C3                      	retn
 41079                                  
 41080                                  cp_fail:
 41081 00007764 F9                      	stc
 41082 00007765 C3                      	retn
 41083                                  
 41084                                  ; 28/12/2022 - Retro DOS v4.1
 41085                                  %if 0
 41086                                  ;--------------------------------------------------------------------------- 
 41087                                  
 41088                                  
 41089                                  ; M020 : BEGIN
 41090                                  ;
 41091                                  ;---------------------------------------------------------------------------
 41092                                  ;
 41093                                  ; procedure : RationalPatch
 41094                                  ;
 41095                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41096                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41097                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41098                                  ;
 41099                                  ; THE BUG is in the following code sequence:
 41100                                  ;
 41101                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41102                                  ;90		even				; word align
 41103                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41104                                  ;e8 xx xx	call	set_A20			; enable A20
 41105                                  ;
 41106                                  ; This patch routine replaces the mov & the loop with a far call into a
 41107                                  ; routine in DOS data segment which is in low memory (because A20 line
 41108                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41109                                  ; a mov & loop.
 41110                                  ;
 41111                                  ; Identification of Buggy Rational EXE
 41112                                  ; ====================================
 41113                                  ;
 41114                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41115                                  ;
 41116                                  ; OFFSET				Contains
 41117                                  ; ------				--------
 41118                                  ; 0000h			100 times Version number in binary
 41119                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41120                                  ;
 41121                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41122                                  ;
 41123                                  ; 002ah			offset where version number is stored in ASCII
 41124                                  ;				e.g. '3.48A'
 41125                                  ;
 41126                                  ; 0030h			offset of copyright string. Copyright strings either
 41127                                  ;			start with "DOS/16M Copyright...." or
 41128                                  ;			"Copyright.....". The string contains
 41129                                  ;			"Rational Systems, Inc."
 41130                                  ;
 41131                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41132                                  ;				from the program image
 41133                                  ; 0016h			word : size of buggy code segment
 41134                                  ;
 41135                                  ;	Buggy code is definite to start after offset 200h in its segment
 41136                                  ;
 41137                                  ;----------------------------------------------------------------------------
 41138                                  
 41139                                  ; 23/05/2019 - Retro DOS v4.0
 41140                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41141                                  
 41142                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41143                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41144                                  
 41145                                  RScanPattern1:
 41146                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41147                                  
 41148                                  RLen1 equ $ - RScanPattern1
 41149                                  
 41150                                  RScanPattern2:
 41151                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41152                                  
 41153                                  RLen2 equ $ - RScanPattern2
 41154                                  
 41155                                  RScanPattern3:
 41156                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41157                                  
 41158                                  RLen3 equ $ - RScanPattern2
 41159                                  
 41160                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41161                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41162                                  
 41163                                  ;----------------------------------------------------------------------------
 41164                                  ;
 41165                                  ; INPUT : ES = segment where program got loaded
 41166                                  ;
 41167                                  ;----------------------------------------------------------------------------
 41168                                  
 41169                                  RationalPatch:
 41170                                  	cld
 41171                                  	push	ax
 41172                                  	push	bx
 41173                                  	push	cx
 41174                                  	push	dx
 41175                                  	push	si
 41176                                  	push	di
 41177                                  	push	es
 41178                                  	push	ds			; we use all of them
 41179                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41180                                  	push	cs
 41181                                  	pop	ds
 41182                                  	
 41183                                  	mov	si,RScanPattern1
 41184                                  	;mov	cx,10
 41185                                  	mov	cx,RLen1
 41186                                  	rep	cmpsb			; do we have the pattern ?
 41187                                  	jne	short rpexit
 41188                                  	mov	ax,[es:0]
 41189                                  	cmp	ax,348			; is it a buggy version ?
 41190                                  	jb	short rpexit
 41191                                  	cmp	ax,383			; is it a buggy version
 41192                                  	ja	short rpexit
 41193                                  
 41194                                  	call	VerifyVersion
 41195                                  	jne	short rpexit
 41196                                  
 41197                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41198                                  	sub	cx,200h			; Length we search (we start
 41199                                  					;  at offset 200h)
 41200                                  	mov	es,[es:20h]		; es=buggy code segment
 41201                                  	mov	si,RScanPattern2
 41202                                  	;mov	dx,8	
 41203                                  	mov	dx,RLen2
 41204                                  	call	ScanCodeSeq		; look for code seq with nop
 41205                                  	jz	short rpfound
 41206                                  
 41207                                  	mov	si,RScanPattern3
 41208                                  	;mov	dx,15
 41209                                  	mov	dx,RLen3
 41210                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41211                                  	jnz	short rpexit
 41212                                  
 41213                                  rpfound:
 41214                                  	
 41215                                  ;	we set up a far call into DOS data
 41216                                  ;	dx has the length of the code seq we were searching for
 41217                                  
 41218                                  	mov	al,9Ah			; far call opcode
 41219                                  	stosb
 41220                                  	mov	ax,RatBugCode
 41221                                  	stosw
 41222                                  	mov	ax,ss
 41223                                  	stosw
 41224                                  	mov	cx,dx
 41225                                  	sub	cx,6			; filler (with NOPs)
 41226                                  	mov	al,90h
 41227                                  	rep	stosb
 41228                                  rpexit:
 41229                                  	pop	ds
 41230                                  	pop	es
 41231                                  	pop	di
 41232                                  	pop	si
 41233                                  	pop	dx
 41234                                  	pop	cx
 41235                                  	pop	bx
 41236                                  	pop	ax
 41237                                  	retn
 41238                                  
 41239                                  ; M020 END
 41240                                  
 41241                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41242                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41243                                  
 41244                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41245                                  
 41246                                  ;----------------------------------------------------------------------------
 41247                                  ;
 41248                                  ; ScanCodeSeq
 41249                                  ;
 41250                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41251                                  ;
 41252                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41253                                  ;
 41254                                  ;----------------------------------------------------------------------------
 41255                                  
 41256                                  ScanCodeSeq:
 41257                                  	; 17/12/2022
 41258                                  	mov	di,200h
 41259                                  ;ScanCodeSeq_di:
 41260                                  	push	cx
 41261                                  	sub	cx,dx
 41262                                  	inc	cx
 41263                                  	; 17/12/2022
 41264                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41265                                  	;mov	di,200h
 41266                                  scsagain:
 41267                                  	push	si
 41268                                  	push	di
 41269                                  	push	cx
 41270                                  	mov	cx,dx
 41271                                  	rep	cmpsb
 41272                                  	pop	cx
 41273                                  	pop	di
 41274                                  	pop	si
 41275                                  	je	short scsfound
 41276                                  	inc	di
 41277                                  	loop	scsagain
 41278                                  scsfound:
 41279                                  	pop	cx
 41280                                  vvexit:		; 18/12/2022
 41281                                  	retn
 41282                                  
 41283                                  
 41284                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41285                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41286                                  
 41287                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41288                                  
 41289                                  ;----------------------------------------------------------------------------
 41290                                  ;
 41291                                  ; VerifyVersion
 41292                                  ;
 41293                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41294                                  ; from ES:2A.
 41295                                  ;
 41296                                  ;       Entry: AX = binary version number 
 41297                                  ;       Exit : Z flag set if version numbers match
 41298                                  ;
 41299                                  ;----------------------------------------------------------------------------
 41300                                  
 41301                                  VerifyVersion:
 41302                                  	mov	si,[es:2Ah]		; offset of version number
 41303                                  					;  in ascii
 41304                                  	mov	bl,10
 41305                                  	add	si,3			; point to last digit
 41306                                  
 41307                                  	call	VVDigit
 41308                                  	jne	short vvexit
 41309                                  	call	VVDigit
 41310                                  	jne	short vvexit
 41311                                  	cmp	byte [es:si],'.' ; 2Eh
 41312                                  	jne	short vvexit
 41313                                  	dec	si
 41314                                  	;call	VVDigit
 41315                                  	; 18/12/2022
 41316                                  	;jmp	short VVDigit
 41317                                  ;vvexit:
 41318                                  	;retn
 41319                                  VVDigit:
 41320                                  	div	bl
 41321                                  	add	ah,'0' ; 30h
 41322                                  	dec	si
 41323                                  	cmp	[es:si+1],ah
 41324                                  	mov	ah,0			; do not xor or sub we need Z
 41325                                  	retn
 41326                                  
 41327                                  ;--------------------------------------------------------------------------- 
 41328                                  %endif	; 28/12/2022
 41329                                  
 41330                                  ;---------------------------------------------------------------------------
 41331                                  ;
 41332                                  ;	M068
 41333                                  ;
 41334                                  ; 	Procedure Name	: IsCopyProt
 41335                                  ;
 41336                                  ;	Inputs		: DS:100 -> start of com file just read in
 41337                                  ;
 41338                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41339                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41340                                  ;			  copy protect scheme that relies on the A20 line
 41341                                  ;			  being turned off for it's scheme to work.
 41342                                  ;
 41343                                  ;			  Note: The int 21 function dispatcher will turn 
 41344                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41345                                  ;				and dec the A20OFF_COUNT before	iretting 
 41346                                  ;				to the user. 
 41347                                  ;
 41348                                  ;	Uses		: ES, DI, SI, CX
 41349                                  ;
 41350                                  ;---------------------------------------------------------------------------
 41351                                  
 41352                                  ; 23/05/2019 - Retro DOS v4.0
 41353                                  
 41354                                  CPStartOffset	EQU	0175h
 41355                                  CPID1Offset	EQU	011Bh
 41356                                  CPID2Offset	EQU	0173h
 41357                                  CPID3Offset	EQU	0146h
 41358                                  CPID4Offset	EQU	0124h
 41359                                  ID1		EQU	05343h
 41360                                  ID2		EQU	05044h
 41361                                  ID3		EQU	0F413h
 41362                                  ID4		EQU	08000h
 41363                                  
 41364                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41365                                  
 41366                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41367                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41368                                  
 41369                                  CPScanPattern:
 41370 00007766 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41371 0000776A 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41372 0000776E C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41373 00007774 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41374 00007778 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41375 0000777B BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41376                                  
 41377                                  CPSPlen	EQU $ - CPScanPattern
 41378                                  
 41379                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41380                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41381                                  
 41382                                  IsCopyProt:
 41383 0000777E 813E1B014353            	cmp	word [CPID1Offset],ID1
 41384 00007784 752D                    	jne	short CP_done
 41385                                  
 41386 00007786 813E73014450            	cmp	word [CPID2Offset],ID2
 41387 0000778C 7525                    	jne	short CP_done
 41388                                  
 41389 0000778E 813E460113F4            	cmp	word [CPID3Offset],ID3
 41390 00007794 751D                    	jne	short CP_done
 41391                                  
 41392 00007796 813E24010080            	cmp	word [CPID4Offset],ID4
 41393 0000779C 7515                    	jne	short CP_done
 41394                                  
 41395 0000779E 0E                      	push	cs
 41396 0000779F 07                      	pop	es
 41397 000077A0 BF[6677]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41398                                  
 41399 000077A3 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41400                                  					; of pattern
 41401                                  
 41402 000077A6 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41403 000077A9 F3A6                    	repe	cmpsb
 41404 000077AB 7506                    	jnz	short CP_done
 41405                                  
 41406 000077AD 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41407                                  CP_done:
 41408 000077B3 C3                      	retn
 41409                                  	
 41410                                  ;DOSCODE ENDS
 41411                                  
 41412                                  	;END
 41413                                  
 41414                                  ;----------------------------------------------------------------------------
 41415                                  
 41416                                  ;align 2 ; 05/09/2018 (Error!)
 41417                                  
 41418                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41419                                  ;align 16 ; 08/09/2018 (OK.)
 41420                                  align 2
 41421                                  
 41422                                  ; 06/08/2018 - Retro DOS v3.0
 41423                                  ;============================================================================
 41424                                  ; MSINIT.ASM
 41425                                  ;============================================================================
 41426                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41427                                  ;
 41428                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41429                                  ;
 41430                                  	; 15/07/2018 - Retro DOS v3.0
 41431                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41432                                  
 41433                                  ; temp iret instruction
 41434                                  
 41435                                  
 41436                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41437                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41438                                  
 41439                                  initiret: ; MSDOS 6.0
 41440                                  SYSBUF:
 41441                                  ;IRETT: ; 06/05/2019
 41442 000077B4 CF                      	iret
 41443                                  
 41444                                  ; 22/04/2019 - Retro DOS v4.0
 41445                                  
 41446                                  ; pointer to the BIOS data segment that will be available just to the
 41447                                  ; initialization code
 41448                                  
 41449 000077B5 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41450                                  
 41451                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41452                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41453                                  
 41454                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41455                                  
 41456                                  ParaRound:
 41457 000077B7 83C00F                  	add	ax, 15
 41458 000077BA D1D8                    	rcr	ax, 1
 41459 000077BC D1E8                    	shr	ax, 1
 41460 000077BE D1E8                    	shr	ax, 1
 41461 000077C0 D1E8                    	shr	ax, 1
 41462 000077C2 C3                      	retn
 41463                                  
 41464                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41465                                  
 41466                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41467                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41468                                  	
 41469                                  	; 30/05/2019
 41470                                  	; 22/04/2019 - Retro DOS v4.0
 41471                                  	; 07/07/2018 - Retro DOS v3.0
 41472                                  	; Retro DOS v2.0 - 03/03/2018
 41473                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41474                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41475                                  DOSINIT:
 41476                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41477                                  	;
 41478                                  	; Far call from SYSINIT
 41479                                  	; DX = Memory size in paragraphs
 41480                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41481                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41482                                  	;
 41483                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41484                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41485                                  
 41486 000077C3 FA                              CLI
 41487 000077C4 FC                              CLD
 41488                                  
 41489                                  	; 03/11/2022
 41490                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41491                                  	
 41492                                  	; 17/12/2022
 41493                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41494                                  	;push	dx ; =*=		; save parameters from BIOS
 41495                                  	
 41496 000077C5 56                      	push	si
 41497 000077C6 1E                      	push	ds
 41498 000077C7 57                      	push	di			;save di (ptr to BiosComBlock)
 41499                                  
 41500 000077C8 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41501                                  
 41502                                  ; First, move the DOS data segment to its final location in low memory
 41503                                  
 41504                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41505                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41506 000077CA B8[4E7C]                	mov	ax,MEMSTRT		; get offset of end of init code
 41507                                  
 41508                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41509                                  	;and	ax,~15	; 0FFF0h	; boundary
 41510                                  
 41511                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41512                                  					; code segment
 41513                                  
 41514                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41515 000077CD 83C00F                  	add	ax,15			; round to nearest paragraph
 41516 000077D0 83E0F0                  	and	ax,~15			; boundary
 41517                                  
 41518 000077D3 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41519                                  					; code segment
 41520                                  	; 05/12/2022
 41521                                  	; 30/04/2019 - Retro DOS v4.0
 41522                                  	;xor	si,si
 41523                                  	
 41524 000077D5 8CC8                    	mov	ax,cs
 41525 000077D7 8ED8                    	mov	ds,ax			; ds = current code segment
 41526                                  					; DS:SI now points to dosdata
 41527                                  
 41528                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41529                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41530                                  					;  BData segment. Cannot use
 41531                                  					;  getdseg macro here!!!
 41532                                  	; 17/12/2022
 41533 000077D9 8E06[B577]              	mov	es,[InitBioDataSeg]
 41534                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41535                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41536                                  
 41537                                  	;mov	es,[es:3]
 41538 000077DD 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41539                                  
 41540 000077E2 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41541                                  
 41542                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41543                                  	;mov	cx,4976  ; 25/05/2019
 41544                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41545                                  	;mov	cx,4962
 41546                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41547 000077E4 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41548 000077E7 F3A4                    	rep	movsb			; move data to final location
 41549                                  	
 41550 000077E9 5F                      	pop	di			; restore ptr to BiosComBlock
 41551 000077EA 1F                      	pop	ds			; restore parms from BIOS
 41552 000077EB 5E                      	pop	si
 41553                                  	; 17/12/2022
 41554                                  	;pop	dx ; 30/05/2019	
 41555                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41556                                  	;pop	dx ; =*=		
 41557                                  
 41558 000077EC 06                      	push	es
 41559 000077ED 1E                      	push	ds
 41560 000077EE 07                      	pop	es			; es:si -> device chain
 41561 000077EF 1F                      	pop	ds			; ds points to dosdata
 41562                                  
 41563                                  ;SR;
 41564                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41565                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41566                                  ;lie table handling for device drivers. This can be expanded later on to
 41567                                  ;establish a communication block from the BIOS to the DOS.
 41568                                  
 41569                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41570                                  	;mov	[1042h],bx
 41571 000077F0 893E[3F10]              	mov	[BiosDataPtr],di
 41572 000077F4 891E[4110]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41573                                  
 41574 000077F8 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41575                                  
 41576                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41577                                  
 41578 000077FD 2E8C1E[8A51]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41579 00007802 2E8C1E[8E51]            	mov	[cs:LowInt24Addr+2],ds
 41580 00007807 2E8C1E[9251]            	mov	[cs:LowInt28Addr+2],ds
 41581                                  
 41582                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41583                                  	;mov	[584h],sp
 41584                                  	;mov	[586h],ss
 41585 0000780C 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41586 00007810 8926[8405]              	mov	[USER_SP],sp
 41587 00007814 8C16[8605]              	mov	[USER_SS],ss
 41588                                  
 41589 00007818 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41590 0000781A 8ED0                    	mov	ss,ax
 41591                                  
 41592                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41593                                  	;mov	sp,offset dosdata:dskstack
 41594 0000781C BC[2009]                	mov	sp,DSKSTACK
 41595                                  
 41596                                  ;M023
 41597                                  ; Init patch ptrs to default values
 41598                                  
 41599                                  	;mov	word [1212h],RetExePatch
 41600                                  	;mov	word [1214h],RetExePatch
 41601                                  	;mov	word [61h],RetExePatch
 41602 0000781F C706[F811][1763]        	mov	word [FixExePatch],RetExePatch	; M023
 41603                                  	; 28/12/2022 - Retro DOS v4.1
 41604                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 41605 00007825 C706[6100][1763]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41606                                  
 41607                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41608                                  %if 0	
 41609                                  
 41610                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41611                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41612                                  ; running in the HMA.
 41613                                  
 41614                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41615                                  	cmp	al,2		;   386 or later?
 41616                                  	mov	ax,Rational386Patch
 41617                                  	jae	short di_set_patch
 41618                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41619                                  di_set_patch:
 41620                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41621                                  
 41622                                  %endif
 41623                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41624                                  
 41625 0000782B 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41626                                  
 41627                                  	; ax now holds segment of DOS code
 41628 0000782D A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41629                                  
 41630 00007830 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41631 00007834 8936[4800]              	mov	word [NULDEV],si
 41632                                  ;SR;
 41633                                  ; There are some locations in the Win386 instance data structures
 41634                                  ; which need to be set up with the DOS data segment. First, initialize
 41635                                  ; the segment part of the instance table pointer in the SIS.
 41636                                  
 41637                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41638 00007838 8C1E[F10F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41639                                  
 41640                                  ; Now initialize the segment part of the pointer to the data in each
 41641                                  ; instance table entry.
 41642                                  
 41643 0000783C 56                      	push	si		; preserve pointer to device chain
 41644                                  	; 18/12/2022
 41645                                  	; cx = 0
 41646 0000783D B107                    	mov	cl,7
 41647                                  	;mov	cx,7		; There are 7 entries in the instance table
 41648                                  				; M019
 41649                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41650 0000783F BE[F50F]                	mov	si,Instance_Table+2 ; point si to segment field
 41651                                  Instance_init_loop:
 41652 00007842 8C1C                    	mov	[si],ds		; set offset in instance entry
 41653                                  	;add	si,6
 41654 00007844 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41655 00007847 E2F9                    	loop	Instance_init_loop
 41656                                  
 41657                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41658                                  
 41659                                  	; 18/12/2022
 41660 00007849 B105                    	mov	cl,5
 41661                                  	;mov	cx,5		; There are five entries in the instance table
 41662                                  
 41663                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41664                                  	;mov	si,11EDh	; point si to segment field
 41665 0000784B BE[D311]                	mov	si,OldInstanceJunk+6
 41666                                  OldInstance_init_loop:
 41667 0000784E 8C1C                    	mov	[si],ds		; set offset in instance entry
 41668 00007850 83C606                  	add	si,6		; move on to next entry
 41669 00007853 E2F9                    	loop	OldInstance_init_loop
 41670 00007855 5E                      	pop	si		; restore pointer to device chain
 41671                                  
 41672                                  ; End of WIN386 2.xx compatibility bullshit
 41673                                  
 41674                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41675                                  %if 0	
 41676                                     	; 30/04/2019
 41677                                  	;push	es
 41678                                  	;pop	ds
 41679                                  			; ds:si points to console device
 41680                                  
 41681                                  	; 24/04/2019 - Retro DOS v4.0
 41682                                  
 41683                                  	; 15/07/2018
 41684                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41685                                  	; (Set INT 2Ah handler address to an 'IRET')
 41686                                  
 41687                                  	; need crit vector inited to use deviocall
 41688                                  	;push	ds			; preserve segment of device chain
 41689                                  	push	es ; 30/04/2019
 41690                                  
 41691                                  %endif
 41692                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41693 00007856 06                      	push	es
 41694                                  	; 17/12/2022
 41695                                  	;pop	ds
 41696                                  	;push	ds
 41697                                  
 41698 00007857 31C0                    	xor	ax,ax
 41699 00007859 8ED8                    	mov	ds,ax			; point DS to int vector table
 41700 0000785B B8[B477]                	mov	ax,initiret
 41701                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41702 0000785E A3A800                  	mov	[addr_int_ibm],ax
 41703 00007861 8CC8                    	mov	ax,cs
 41704                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41705 00007863 A3AA00                  	mov	[addr_int_ibm+2],ax
 41706 00007866 1F                      	pop	ds			; restore segment of device chain
 41707                                  
 41708 00007867 E81F02                  	call	CHARINIT  		; initialize console driver
 41709 0000786A 56                      	push	si			; save pointer to header
 41710                                  
 41711 0000786B 16                      	push	ss			; move pointer to dos data...
 41712 0000786C 07                      	pop	es			; ...into ES
 41713                                  
 41714                                  	;initialize sft for file 0 (CON)
 41715                                  
 41716                                          ; 07/07/2018 - Retro DOS v3.0
 41717                                  	; 24/04/2019 - Retro DOS v4.0
 41718                                  	;mov	di,SFTABL+6 
 41719 0000786D BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41720 00007870 B80300                          MOV     AX,3
 41721 00007873 AB                              STOSW           	; Refcount
 41722 00007874 FEC8                            DEC     AL
 41723 00007876 AB                              STOSW           	; Access rd/wr, compatibility
 41724 00007877 30C0                            XOR     AL,AL
 41725 00007879 AA                              STOSB           	; attribute
 41726                                  	;mov	al,0C3h
 41727 0000787A B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41728 0000787C AB                      	STOSW			; flags
 41729 0000787D 89F0                            mov	ax,si
 41730 0000787F AB                              stosw			; device pointer in devptr	
 41731 00007880 8CD8                            mov	ax,ds
 41732 00007882 AB                      	stosw
 41733 00007883 31C0                    	xor	ax,ax	; 0
 41734 00007885 AB                      	stosw			; firclus
 41735 00007886 AB                      	stosw			; time
 41736 00007887 AB                      	stosw			; date
 41737 00007888 48                      	dec	ax	; -1
 41738 00007889 AB                      	stosw			; size
 41739 0000788A AB                      	stosw
 41740 0000788B 40                      	inc	ax	; 0
 41741 0000788C AB                      	stosw			; position
 41742 0000788D AB                      	stosw
 41743                                  	;add	di,7
 41744 0000788E 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41745                                  				; point at name
 41746                                  	;add	si,10
 41747 00007891 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41748                                  				; point to name
 41749 00007894 B90400                  	mov	cx,4
 41750 00007897 F3A5                    	rep	movsw		; name
 41751 00007899 B103                    	mov	cl,3
 41752 0000789B B020                    	mov	al," "
 41753 0000789D F3AA                    	rep	stosb		; extension
 41754                                  
 41755 0000789F 5E                      	pop	si		; get back pointer to header
 41756                                  
 41757                                  				; mark device as CON I/O
 41758                                  	; 15/07/2018
 41759                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41760 000078A0 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41761                                  	; 12/03/2018
 41762                                  	;mov	[ss:32h],si
 41763 000078A4 368936[3200]            	MOV     [SS:BCON],SI
 41764                                  	;mov	[ss:34h],ds
 41765 000078A9 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41766                                  
 41767                                  	; initialize each device until the clock device is found
 41768                                  
 41769                                  CHAR_INIT_LOOP:
 41770 000078AE C534                            LDS     SI,[SI]			; AUX device
 41771 000078B0 E8D601                  	call	CHARINIT 
 41772                                         	;15/07/2018
 41773                                  	;test	byte [SI+4],8
 41774 000078B3 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41775 000078B7 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41776                                  	; 12/03/2018
 41777                                  	;mov	[ss:2Eh],si
 41778 000078B9 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41779                                  	;mov	[ss:30h],ds
 41780 000078BE 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41781                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41782                                  
 41783                                  	;mov	bp,4970			; bp = pointer to free mem
 41784                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41785                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41786                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41787 000078C3 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41788                                  
 41789 000078C6 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41790 000078CB 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41791                                  PERDRV:
 41792                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41793 000078D0 C534                            LDS	SI,[SI]			; Next device
 41794 000078D2 83FEFF                          CMP	SI,-1	; 0FFFFh
 41795 000078D5 7479                    	JZ	SHORT CONTINIT
 41796                                  
 41797 000078D7 E8AF01                          call	CHARINIT
 41798                                  
 41799                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41800                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41801                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41802                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41803                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41804                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41805                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41806                                  
 41807                                          ; 15/07/2018
 41808                                  	;test	word [SI+4],8000h		; DEVTYP
 41809                                          ; 17/12/2022
 41810                                  	;test	byte [SI+5],80h
 41811 000078DA F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41812                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41813 000078DE 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41814                                  
 41815 000078E0 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41816 000078E5 30ED                    	XOR     CH,CH
 41817                                          ; 07/07/2018
 41818                                  	;MOV	[SI+10],CL		; Number of units in name field
 41819 000078E7 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41820 000078EA 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41821 000078EF 30F6                    	XOR     DH,DH
 41822 000078F1 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41823 000078F6 1E                      	PUSH    DS
 41824 000078F7 56                              PUSH    SI
 41825 000078F8 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41826                                  
 41827                                  PERUNIT:
 41828 000078FD 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41829 000078FF 43                              INC     BX
 41830 00007900 43                              INC     BX                      ; On to next BPB
 41831                                  	; 15/12/2022
 41832                                  	; 07/07/2018
 41833                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41834 00007901 26885600                	MOV     [ES:BP],DL
 41835                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41836                                  	;;mov	[ES:BP+0],DL
 41837                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41838                                  
 41839                                  	;MOV	[ES:BP+1],DH
 41840 00007905 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41841 00007909 53                              PUSH    BX
 41842 0000790A 51                              PUSH    CX
 41843 0000790B 52                              PUSH    DX
 41844                                  
 41845                                          ;invoke	$SETDPB
 41846 0000790C E80A97                          CALL	_$SETDPB		; build DPB!
 41847                                  
 41848                                  	; 07/07/2018
 41849                                  	;MOV	AX,[ES:BP+2]
 41850 0000790F 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41851                                          ; 12/03/2018
 41852 00007913 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41853 00007918 7604                    	JBE     SHORT NOTMAX		; N:
 41854 0000791A 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41855                                  NOTMAX:					
 41856                                  	; set the next dpb field in the currently built bpb
 41857                                  	; and mark as never accessed
 41858                                          
 41859                                  	; 24/04/2019
 41860 0000791E 89E8                    	mov	ax,bp			; get pointer to DPB
 41861                                  	;add	ax,33
 41862 00007920 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41863                                  					; set seg & offset of next DPB
 41864                                  	;mov	[es:bp+25],ax
 41865 00007923 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41866                                  	;mov	[es:bp+27],es
 41867 00007927 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41868                                  					; mark as never accessed
 41869                                  	;mov	byte [es:bp+24],0FFh
 41870 0000792B 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41871                                  
 41872 00007930 5A                      	POP     DX
 41873 00007931 59                              POP     CX
 41874 00007932 5B                              POP     BX
 41875 00007933 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41876 00007935 5E                              POP     SI
 41877 00007936 1F                              POP     DS
 41878                                  					; ds:si -> device header
 41879                                  					; store it in the corresponding dpb
 41880                                  	; 07/07/2018
 41881                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41882 00007937 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41883                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41884 0000793B 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41885                                  
 41886 0000793F 1E                              PUSH    DS			; save pointer to device header
 41887 00007940 56                              PUSH    SI
 41888 00007941 FEC6                            INC     DH			; inc unit #
 41889 00007943 FEC2                            INC     DL			; inc drive #
 41890 00007945 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41891                                          ;add	bp,33 ; 24/04/2019
 41892 00007947 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41893 0000794A E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41894                                          
 41895 0000794C 5E                      	POP     SI			; restore pointer to device header
 41896 0000794D 1F                              POP     DS
 41897 0000794E EB80                    	JMP	PERDRV			; process all drivers in chain
 41898                                  
 41899                                  CONTINIT:
 41900                                  	; 24/04/2019
 41901                                  	;sub	bp,33			; set link in last DPB to -1
 41902 00007950 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41903                                  					; set last link offset & segment
 41904                                  	;mov	word [bp+25],0FFFFh
 41905 00007953 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41906                                  	;mov	word [bp+27],0FFFFh
 41907 00007958 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41908                                  	;add	bp,33
 41909 0000795D 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41910                                  					; the DPB chain is done.  
 41911 00007960 16                      	push	ss
 41912 00007961 1F                      	pop	ds
 41913                                  
 41914 00007962 89E8                    	mov	ax,bp
 41915 00007964 E850FE                  	call	ParaRound		; round up to segment
 41916                                  
 41917 00007967 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41918 00007969 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41919                                  
 41920 0000796B BB0F00                  	mov	bx,0Fh
 41921                                  	
 41922                                  	; 24/05/2019
 41923                                  	;mov	cx,[ENDMEM]
 41924                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41925                                  	; 17/12/2022
 41926                                  	;mov	cx,[ENDMEM] 
 41927                                  					; set seg inpacketto dosdata					
 41928 0000796E 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41929                                  
 41930                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41931                                  ; Also patch in the segment of the pointers in the dosdata area.
 41932                                  ;
 41933                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41934                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41935                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41936                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41937                                  
 41938 00007972 52                      	push	dx			; preserve first free segment
 41939                                  
 41940 00007973 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41941 00007976 8EC0                    	mov	es,ax			; es = segment of DOS
 41942 00007978 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41943                                  
 41944 0000797E E8B301                  	call	patch_vec_segments	; uses AX as doscode segment
 41945 00007981 E8E801                  	call	patch_misc_segments	; patch in segments for sharer and 
 41946                                  					; other tables with seg in ES.
 41947                                  	; 17/12/2022
 41948                                  	; cx = 0
 41949 00007984 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41950                                  
 41951 00007988 5A                      	pop	dx			; restore first free segment
 41952                                  
 41953                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41954                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41955                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41956                                  ; low_mem_stub by seg_reinit.
 41957                                  
 41958                                  	;xor	ax,ax ; 0
 41959                                  	;mov	ds,ax
 41960                                  	;mov	es,ax
 41961                                  	; 17/12/2022
 41962                                  	; cx = 0
 41963                                  	;xor	cx,cx ; 0
 41964 00007989 8ED9                    	mov	ds,cx
 41965 0000798B 8EC1                    	mov	es,cx
 41966                                  
 41967                                  	; set the segment of int 24 vector that was 
 41968                                  	; left out by patch_vec_segments above.
 41969                                  
 41970                                  	; 17/12/2022
 41971                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41972                                  ;%if 0
 41973                                  	; 24/05/2019
 41974                                  	;;mov	di,90h
 41975                                  	;;mov	di,4*int_fatal_abort
 41976                                  	;mov	di,addr_int_fatal_abort
 41977 0000798D BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41978                                  
 41979 00007990 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41980                                  	;mov	[di+2],ax  ; int 24h segment
 41981 00007994 8905                    	mov	[di],ax ; 24/05/2019
 41982                                  
 41983                                  	;;mov	di,82h
 41984                                  	;mov	di,INTBASE+2
 41985                                  
 41986                                  ;%endif
 41987                                  	; 17/12/2022
 41988                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41989                                  	;;mov	di,90h
 41990                                  	;;mov	di,4*int_fatal_abort
 41991                                  	;mov	di,addr_int_fatal_abort
 41992                                  	;mov	ax,[ss:TEMP_DOSLOC]
 41993                                  	;mov	[di+2],ax  ; int 24h segment
 41994                                  	;;mov	di,82h
 41995                                  	;mov	di,INTBASE+2
 41996                                  
 41997                                  	; set default divide trap offset
 41998                                  
 41999                                  	;mov	word ptr ds:[0],offset doscode:divov
 42000 00007996 C7060000[6653]          	mov	word [0],DIVOV	
 42001                                  
 42002                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42003                                  
 42004                                  	;mov	di,80h
 42005 0000799C BF8000                  	mov	di,INTBASE
 42006                                  	;mov	ax,offset doscode:irett
 42007 0000799F B8[E602]                	mov	ax,IRETT
 42008                                  
 42009                                  	; 17/12/2022
 42010                                  	; cx = 0
 42011 000079A2 B109                    	mov	cl,9
 42012                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42013                                  					;   sets offsets for ints 20h-28h
 42014                                  iset1:
 42015 000079A4 AB                      	stosw
 42016 000079A5 83C702                  	add	di,2
 42017 000079A8 E2FA                    	loop	iset1
 42018                                  
 42019 000079AA 83C704                  	add	di,4			; skip vector 29h
 42020                                  
 42021                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42022                                  ;					;   sets offsets for ints 2ah-2fh
 42023                                  ;iset2:
 42024                                  ;	stosw
 42025                                  ;	add	di,2
 42026                                  ;	loop	iset2
 42027                                  
 42028                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42029                                  ; patch_vec_segments above. So skip it.
 42030                                  
 42031                                  ;	add	di,8			; skip vector 30h & 31h 
 42032                                  
 42033                                  	;;;
 42034                                  	; 06/05/2019 - Retro DOS v4.0
 42035                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42036                                  	; 17/12/2022
 42037 000079AD B105                    	mov	cl,5 ; 28/06/2019
 42038                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42039                                  	;mov	cx,6
 42040                                  iset2:
 42041 000079AF AB                      	stosw
 42042 000079B0 83C702                  	add	di,2
 42043 000079B3 E2FA                    	loop	iset2
 42044                                  
 42045                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42046                                  	; 17/12/2022
 42047 000079B5 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42048                                  	;add	di,8
 42049                                  	;;;
 42050                                  
 42051                                  	; 17/12/2022
 42052 000079B8 B10E                    	mov	cl,14
 42053                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42054                                  					;   sets offsets for ints 32h-3fh
 42055                                  iset3:
 42056 000079BA AB                      	stosw
 42057 000079BB 83C702                  	add	di,2
 42058 000079BE E2FA                    	loop	iset3
 42059                                  
 42060                                  ;if installed
 42061                                  	; set the offset of int2f handler
 42062                                  	;mov	word [0BCh],INT2F
 42063 000079C0 C706BC00[1507]          	mov	word [02Fh*4],INT2F
 42064                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42065 000079C6 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42066                                  	;mov	[0BEh],ax
 42067 000079CA A3BE00                  	mov	[(02Fh*4)+2],ax
 42068                                  ;endif
 42069                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42070                                  	; long jump will be patched in by seg_reinit
 42071                                  
 42072                                  	;mov	byte [C0h],0EAh
 42073 000079CD C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42074                                  	;mov	byte [C1h],CALL_ENTRY
 42075 000079D2 C706C100[E702]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42076                                  
 42077 000079D8 C7068000[E002]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42078 000079DE C7068400[0C03]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42079 000079E4 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42080 000079EA 89168A00                	mov	word [addr_int_terminate+2],dx	
 42081 000079EE C7069400[3F05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42082 000079F4 C7069800[C605]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42083 000079FA C7069C00[BA62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42084                                  
 42085 00007A00 16                      	push	ss
 42086 00007A01 1F                      	pop	ds
 42087                                  	
 42088                                  	; 24/05/2019
 42089                                  	;push	ss
 42090                                  	;pop	es
 42091                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42092                                  	; 17/12/2022
 42093                                  	;push	ss
 42094                                  	;pop	es
 42095                                  
 42096 00007A02 52                      	push	dx			; remember address of arena
 42097                                  
 42098 00007A03 42                      	inc	dx			; leave room for arena header
 42099                                  	;mov	[330h],dx
 42100 00007A04 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42101                                  
 42102 00007A08 31FF                    	xor	di,di			; point es:di at end of memory
 42103 00007A0A 8EC2                    	mov	es,dx			; ...where psp will be
 42104 00007A0C 31C0                    	xor	ax,ax
 42105                                  	;mov	cx,80h			; psp is 128 words
 42106                                  	; 17/12/2022
 42107 00007A0E B180                    	mov	cl,128 ; 28/06/2019
 42108                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42109                                  	;mov	cx,128
 42110                                  
 42111 00007A10 F3AB                    	rep	stosw			; zero out psp area
 42112 00007A12 A1[4603]                        mov     ax,[ENDMEM]
 42113                                  	
 42114                                  	; 17/12/2022
 42115                                  	; cx = 0
 42116 00007A15 E84E97                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42117                                  
 42118                                  	; ds, es now point to PSP
 42119                                  
 42120 00007A18 16                      	push	ss
 42121 00007A19 1F                      	pop	ds
 42122                                  
 42123                                  	;mov	di,24
 42124 00007A1A BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42125 00007A1D 31C0                    	xor	ax,ax
 42126 00007A1F AB                      	stosw
 42127 00007A20 AA                      	stosb				; 0,1 and 2 are con device
 42128 00007A21 B0FF                    	mov	al,0FFh
 42129                                  	;mov	cx,FILPERPROC-3 ; 17
 42130                                  	; 17/12/2022
 42131                                  	; cx = 4
 42132 00007A23 B111                    	mov	cl,FILPERPROC-3 ; 17
 42133 00007A25 F3AA                    	rep	stosb			; rest are unused
 42134                                  
 42135 00007A27 16                      	push	ss
 42136 00007A28 07                      	pop	es
 42137                                  					; must be set to print messages
 42138 00007A29 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42139                                  
 42140                                  ; after this point the char device functions for con will work for
 42141                                  ; printing messages
 42142                                  
 42143                                  	; 24/04/2019 - Retro DOS v4.0
 42144                                  
 42145                                  ; 12/05/2019
 42146                                  ;
 42147                                  ;write_version_msg:
 42148                                  ;
 42149                                  ;	;if	(not ibm)
 42150                                  ;	;mov	si,offset doscode:header
 42151                                  ;	mov	si,HEADER
 42152                                  ;outmes:
 42153                                  ;	;lods	cs:byte ptr [si]
 42154                                  ;	cs
 42155                                  ;	lodsb
 42156                                  ;	cmp	al,"$"
 42157                                  ;	je	short outdone
 42158                                  ;	call	OUTT
 42159                                  ;	jmp	short outmes
 42160                                  ;outdone:
 42161                                  ;	push	ss			; out stomps on segments
 42162                                  ;	pop	ds
 42163                                  ;	push	ss
 42164                                  ;	pop	es
 42165                                  ;	;endif
 42166                                  
 42167                                  	; at this point es is dosdata
 42168                                  
 42169                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42170                                  	; in sysinittable (ms_data.asm)
 42171                                  
 42172                                  	;mov	si,0D28h
 42173 00007A2D BE[280D]                	mov	si,SysInitTable
 42174                                  
 42175                                  	; 17/12/2022
 42176                                  	; ds = es = ss
 42177                                  
 42178                                  	; 17/12/2022
 42179                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42180                                  ;%if 0
 42181                                  	;;mov	[es:si+6],es
 42182                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42183                                  	;;mov	[es:si+2],es
 42184                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42185                                  	
 42186 00007A30 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42187 00007A33 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42188                                  
 42189                                  	; buffhead -> dosdata:hashinitvar 
 42190                                  
 42191                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42192 00007A36 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42193                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42194                                  	;mov	si,6Dh
 42195 00007A3A BE[6D00]                	mov	si,HASHINITVAR
 42196                                  	;mov	[es:BUFFHEAD],si
 42197 00007A3D 8936[3800]              	mov	[BUFFHEAD],si
 42198                                  
 42199 00007A41 5A                              pop     dx                      ; restore address of arena
 42200                                  
 42201                                  	;mov	[032Ch+2],dx
 42202 00007A42 8916[2E03]                      mov     [DMAADD+2],dx
 42203                                  
 42204                                  	;mov	[es:arena_head],dx
 42205 00007A46 8916[2400]              	mov	[arena_head],dx
 42206                                  
 42207                                  ;%endif
 42208                                  
 42209                                  ; 17/12/2022
 42210                                  %if 0
 42211                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42212                                  	;;;
 42213                                  	;mov	[es:si+6],es
 42214                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42215                                  	;mov	[es:si+2],es
 42216                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42217                                  
 42218                                  	; buffhead -> dosdata:hashinitvar 
 42219                                  
 42220                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42221                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42222                                  	;mov	si,6Dh
 42223                                  	mov	si,HASHINITVAR
 42224                                  	mov	[es:BUFFHEAD],si
 42225                                  
 42226                                          pop     dx                      ; restore address of arena
 42227                                  
 42228                                  	;mov	[032Ch+2],dx
 42229                                          mov     [DMAADD+2],dx
 42230                                  
 42231                                  	mov	[es:arena_head],dx
 42232                                  	;;;
 42233                                  %endif
 42234                                  
 42235 00007A4A 8EDA                            mov     ds,dx
 42236                                  
 42237                                  	;mov	byte [0],'Z'
 42238 00007A4C C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42239                                          ;mov	word [1],0
 42240 00007A51 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42241                                  
 42242 00007A57 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42243 00007A5B 29D0                    	sub	ax,dx
 42244 00007A5D 48                              dec     ax
 42245 00007A5E A30300                          mov     [ARENA.SIZE],ax
 42246                                  
 42247                                  	; point to sft 0
 42248                                  
 42249                                  	;mov	di,offset dosdata:sftabl + sftable
 42250                                  	;mov	di,SFTABL+6
 42251 00007A61 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42252 00007A64 B80300                          mov     ax,3
 42253 00007A67 AB                              stosw           		; adjust refcount
 42254                                  
 42255                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42256                                  
 42257                                          ;mov	di,offset dosdata:sysinittable
 42258                                  	;mov	di,0D28h
 42259 00007A68 BF[280D]                	mov	di,SysInitTable	
 42260                                  
 42261 00007A6B 42                      	inc	dx			; advance dx from arena to psp
 42262 00007A6C 8EDA                    	mov	ds,dx			; point ds to psp
 42263                                  
 42264                                  					; pass the address os seg_reinit 
 42265                                  					; in dx
 42266 00007A6E BA[DC7A]                	mov	dx,seg_reinit
 42267 00007A71 B9[FB74]                	mov	cx,exepatch_start
 42268 00007A74 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42269                                  
 42270 00007A78 B8[B477]                	mov	ax,SYSBUF
 42271 00007A7B 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42272                                  	
 42273 00007A7E 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42274 00007A83 368E16[8605]                    mov     ss,[ss:USER_SS]
 42275                                  
 42276 00007A88 CB                              retf
 42277                                  
 42278                                  ;
 42279                                  ; END OF DOSINIT
 42280                                  ;
 42281                                  ;--------------------------------------------------------------------------
 42282                                  
 42283                                  CHARINIT:
 42284                                  	; 24/04/2019 - Retro DOS v4.0
 42285                                  	; 07/07/2018 - Retro DOS v3.0
 42286                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42287 00007A89 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42288                                  	;mov	byte [ss:035Bh],0
 42289 00007A8F 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42290                                  	;mov	byte [ss:035Ch],0
 42291 00007A95 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42292                                  	;mov	word [ss:035BD],0
 42293 00007A9B 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42294 00007AA2 06                              PUSH	ES
 42295 00007AA3 53                              PUSH	BX
 42296 00007AA4 50                              PUSH	AX
 42297 00007AA5 BB[5A03]                        MOV	BX,DEVCALL
 42298                                          ;PUSH	CS
 42299 00007AA8 16                      	PUSH	SS ; 30/04/2019
 42300 00007AA9 07                              POP	ES
 42301 00007AAA E87ACC                          CALL	DEVIOCALL2	
 42302 00007AAD 58                      	POP	AX
 42303 00007AAE 5B                              POP	BX
 42304 00007AAF 07                              POP	ES
 42305 00007AB0 C3                              RETN
 42306                                  
 42307                                  ; 25/04/2019 - Retro DOS v4.0
 42308                                  
 42309                                  ;-----------------------------------------------------------------------------
 42310                                  ;
 42311                                  ;	check_XMM: routine to check presence of XMM driver
 42312                                  ;
 42313                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42314                                  ;
 42315                                  ;	USED:	none
 42316                                  ;
 42317                                  ;-----------------------------------------------------------------------------
 42318                                  
 42319                                  check_XMM: ; proc near
 42320                                  ;
 42321                                  ; determine whether or not an XMM driver is installed
 42322                                  ;
 42323 00007AB1 50                      	push	ax
 42324                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42325 00007AB2 B80043                  	mov	ax,4300h
 42326 00007AB5 CD2F                    	int	2Fh
 42327                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42328                                  		; Return: AL = 80h XMS driver installed
 42329                                  		; AL <> 80h no driver
 42330 00007AB7 3C80                    	cmp	al,80h			; Q: installed
 42331 00007AB9 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42332                                  ;
 42333                                  ; get the XMM control functions entry point, save it, we
 42334                                  ; need to call it later.
 42335                                  ;
 42336 00007ABB 53                      	push	bx
 42337 00007ABC 52                      	push	dx
 42338 00007ABD 1E                      	push	ds
 42339 00007ABE 06                      	push	es
 42340                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42341 00007ABF B81043                  	mov	ax,4310h
 42342 00007AC2 CD2F                    	int	2Fh
 42343                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42344                                  		; Return: ES:BX -> driver entry point
 42345                                  
 42346 00007AC4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42347                                  
 42348 00007AC9 891E[4911]              	mov	[XMMcontrol],bx
 42349 00007ACD 8C06[4B11]              	mov	[XMMcontrol+2],es
 42350                                  cXMMexit:
 42351 00007AD1 F8                      	clc
 42352 00007AD2 07                      	pop	es
 42353 00007AD3 1F                      	pop	ds
 42354 00007AD4 5A                      	pop	dx
 42355 00007AD5 5B                      	pop	bx
 42356 00007AD6 58                      	pop	ax
 42357 00007AD7 C3                      	retn				; done
 42358                                  ;
 42359                                  ; set carry if XMM driver not present
 42360                                  ;
 42361                                  cXMM_no_driver:
 42362 00007AD8 F9                      	stc
 42363 00007AD9 58                      	pop	ax
 42364 00007ADA C3                      	retn
 42365                                  
 42366                                  ;-----------------------------------------------------------------------------
 42367                                  ;
 42368                                  ; Procedure Name : seg_reinit
 42369                                  ;
 42370                                  ; Inputs	 : ES has final dos code location
 42371                                  ;		   AX = 0 / 1
 42372                                  ;
 42373                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42374                                  ;		   if AX =0
 42375                                  ;		      if first entry
 42376                                  ;			 patch segment & offset of vectors with stub
 42377                                  ;			 and stub with segment in ES
 42378                                  ;		      else
 42379                                  ;			 patch stub with segment in ES
 42380                                  ;
 42381                                  ;		   else if AX = 1
 42382                                  ;			patch segment of vectors with segment in ES	
 42383                                  ;
 42384                                  ; NOTE		 : This routine can be called at most twice!
 42385                                  ;
 42386                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42387                                  ;-----------------------------------------------------------------------------
 42388                                  
 42389 00007ADB 00                      num_entry: db	0		; keeps track of the # of times this routine
 42390                                  				; has been called. (0 or 1)
 42391                                  
 42392                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42393                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42394                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42395                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42396                                  
 42397                                  seg_reinit:	; proc	far
 42398 00007ADC 1E                      	push	ds
 42399                                  
 42400 00007ADD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42401                                  
 42402 00007AE2 E88700                  	call	patch_misc_segments	; patch in segments for sharer and 
 42403                                  					; other tables with seg in ES.
 42404                                  	; 17/12/2022
 42405                                  	; cx = 0
 42406 00007AE5 39C8                    	cmp	ax,cx ; 0
 42407                                  	;cmp	ax,0
 42408 00007AE7 753E                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42409                                  
 42410                                  	; 17/12/2022
 42411 00007AE9 2E380E[DB7A]            	cmp	[cs:num_entry],cl ; 0
 42412                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42413 00007AEE 7508                    	jne	short second_entry	; N: just patch the stub with 
 42414                                  					;    segment in ES
 42415                                  					; Y: patch the vectors with stub 
 42416 00007AF0 8CD8                    	mov	ax,ds
 42417 00007AF2 E83F00                  	call	patch_vec_segments	; patch the segment of vectors
 42418 00007AF5 E8BE00                  	call	patch_offset		; patch the offsets of vectors 
 42419                                  					; with those in the stub.
 42420                                  	; 17/12/2022
 42421                                  	; cx = 0
 42422                                  second_entry:
 42423 00007AF8 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42424                                  
 42425                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42426                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42427 00007AFA BF[4810]                	mov	di,DOSINTTABLE
 42428                                  	; 17/12/2022
 42429                                  	; cx = 0
 42430                                  	;mov	cx,9
 42431 00007AFD B109                    	mov	cl,9
 42432 00007AFF 1E                      	push	ds			
 42433 00007B00 07                      	pop	es			; es:di -> DOSINTTABLE
 42434                                  
 42435                                  dosinttabloop:
 42436 00007B01 83C702                  	add	di,2
 42437 00007B04 AB                      	stosw
 42438 00007B05 E2FA                    	loop	dosinttabloop	
 42439                                  
 42440                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42441                                  ; use the HMA, so we don't want to check CS
 42442                                  
 42443                                  ;ifndef ROMDOS
 42444 00007B07 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42445 00007B0A 7220                    	jb	short sr_done		; N: done
 42446                                  ;endif
 42447 00007B0C E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42448 00007B0F 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42449                                  					; A20 toggling in the stub.
 42450                                  	; 17/12/2022
 42451                                  	; cx = 0
 42452 00007B11 E82301                  	call	patch_in_nops		; enable the stub to check A20 state
 42453                                  ; M021-
 42454                                  	;mov	byte [1211h],1
 42455 00007B14 C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42456                                  				
 42457                                  					; set pointer to the routine that 
 42458                                  					; patches buggy exepacked code.
 42459                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42460 00007B19 C706[F811][4B76]        	mov	word [FixExePatch],ExePatch
 42461                                  					; M068: set pointer to the routine 
 42462                                  					; M068: that detects copy protected
 42463                                  					; M068: apps
 42464                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42465 00007B1F C706[6100][7E77]        	mov	word [ChkCopyProt],IsCopyProt
 42466                                  
 42467                                  ; 28/12/2022 - Retro DOS v4.1
 42468                                  %if 0
 42469                                  ;----------------------------------------------------------------------------
 42470                                  
 42471                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42472                                  
 42473                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42474                                  ;
 42475                                  ;; M020 - begin
 42476                                  ;
 42477                                  ;	call	WhatCPUType
 42478                                  ;	cmp	al,1
 42479                                  ;	jne	short sr_done 		; we need Rational Patch only
 42480                                  ;					;  on 286 systems
 42481                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42482                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42483                                  ;
 42484                                  ;; M020 - end
 42485                                  ;
 42486                                  ;	jmp	short sr_done
 42487                                  ;
 42488                                  ;patch_vec_seg:				; patch vectors with segment in es
 42489                                  ;	mov	ax,es
 42490                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42491                                  ;					; NOTE we don't have to patch the 
 42492                                  ;					; offsets as they have been already
 42493                                  ;					; set to the doscode offsets at
 42494                                  ;					; DOSINIT.
 42495                                  ;sr_done:
 42496                                  ;	mov	byte [cs:num_entry],1
 42497                                  ;	pop	ds
 42498                                  ;	retf	; ! far return !
 42499                                  
 42500                                  ;----------------------------------------------------------------------------
 42501                                  ;
 42502                                  ; Procedure Name : WhatCPUType
 42503                                  ;
 42504                                  ; Inputs	 : none
 42505                                  ;
 42506                                  ; Outputs	 : AL = 0 if CPU <  286
 42507                                  ;		      = 1 if CPU == 286
 42508                                  ;		      = 2 if CPU >= 386
 42509                                  ;
 42510                                  ; Regs. Mod.	 : AX
 42511                                  ;
 42512                                  ;----------------------------------------------------------------------------
 42513                                  
 42514                                  WhatCPUType:
 42515                                  	; 25/04/2019 - Retro DOS v4.0
 42516                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42517                                  
 42518                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42519                                  
 42520                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42521                                  ; 	it is called from both CODE and SYSINITSEG.
 42522                                  ;
 42523                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42524                                  ;  Returns: AX = 0 if 8086 or 8088
 42525                                  ;              = 1 if 80286
 42526                                  ;              = 2 if 80386
 42527                                  
 42528                                  	; 04/11/2022
 42529                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42530                                  
 42531                                  Get_CPU_Type:	;macro
 42532                                  	pushf
 42533                                  	push	bx			; preserve bx
 42534                                  	xor	bx,bx			; init bx to zero
 42535                                  
 42536                                  	xor	ax,ax			; 0000 into AX
 42537                                  	push	ax			; put it on the stack...
 42538                                  	popf				; ...then shove it into the flags
 42539                                  	pushf				; get it back out of the flags...
 42540                                  	pop	ax			; ...and into ax
 42541                                  	and	ax,0F000h		; mask off high four bits
 42542                                  	cmp	ax,0F000h		; was it all 1's?
 42543                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 42544                                  
 42545                                  	mov	ax,0F000h		; now try to set the high four bits..
 42546                                  	push	ax
 42547                                  	popf
 42548                                  	pushf
 42549                                  	pop	ax			; ...and see what happens
 42550                                  	and	ax,0F000h		; any high bits set ?
 42551                                  	jz	short cpu_286		; nay; it's an 80286
 42552                                  
 42553                                  cpu_386:				; bx starts as zero
 42554                                  	inc	bx			; inc twice if 386
 42555                                  cpu_286:				; just inc once if 286
 42556                                  	inc	bx
 42557                                  cpu_8086:				; don't inc at all if 086
 42558                                  	mov	ax,bx			; put CPU type value in ax
 42559                                  	pop	bx			; restore original bx
 42560                                  	popf
 42561                                  	
 42562                                  	;endm
 42563                                  
 42564                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42565                                  	;retn
 42566                                  
 42567                                  	; 04/11/2022
 42568                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42569                                  	cmp	al,1
 42570                                  	jne	short sr_done 		; we need Rational Patch only
 42571                                  					;  on 286 systems
 42572                                  	mov	word [RationalPatchPtr],RationalPatch
 42573                                  
 42574                                  ;----------------------------------------------------------------------------
 42575                                  %endif	; 28/12/2022
 42576                                  
 42577 00007B25 EB05                    	jmp	short sr_done
 42578                                  
 42579                                  patch_vec_seg:				; patch vectors with segment in es
 42580 00007B27 8CC0                    	mov	ax,es
 42581 00007B29 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42582                                  					; NOTE we don't have to patch the 
 42583                                  					; offsets as they have been already
 42584                                  					; set to the doscode offsets at
 42585                                  					; DOSINIT.
 42586                                  sr_done:
 42587 00007B2C 2EC606[DB7A]01          	mov	byte [cs:num_entry],1
 42588 00007B32 1F                      	pop	ds
 42589 00007B33 CB                      	retf	; ! far return !
 42590                                  
 42591                                  ;----------------------------------------------------------------------------
 42592                                  ;
 42593                                  ; Procedure Name : patch_vec_segments
 42594                                  ;
 42595                                  ; Inputs	 : ax -> has segment address to patch in
 42596                                  ;		   ds -> DOSDATA
 42597                                  ;
 42598                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42599                                  ;			
 42600                                  ;			0,20-28,3a-3f
 42601                                  ;
 42602                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42603                                  ;
 42604                                  ;----------------------------------------------------------------------------
 42605                                  
 42606                                  patch_vec_segments:
 42607                                  
 42608 00007B34 06                      	push	es
 42609                                  
 42610 00007B35 31C9                    	xor	cx,cx ; 0
 42611 00007B37 8EC1                    	mov	es,cx
 42612                                  
 42613                                  	;mov	di,82h
 42614 00007B39 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42615                                  
 42616 00007B3C 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42617                                  
 42618                                  					; set vectors 20 & 21
 42619                                  	; 04/11/2022
 42620                                  	;mov	cx,2
 42621                                  	; 17/12/2022
 42622                                  	;mov	cl,2
 42623                                  ps_set1:
 42624 00007B40 AB                      	stosw	
 42625                                  	;add	di,2
 42626                                  	; 17/12/2022
 42627 00007B41 47                      	inc	di
 42628 00007B42 47                      	inc	di
 42629                                  	;loop	ps_set1
 42630                                  
 42631                                  	; 17/12/2022
 42632 00007B43 AB                      	stosw	; int 21h segment
 42633                                  	;inc	di
 42634                                  	;inc	di
 42635                                  
 42636                                  	;add	di,4			; skip int 22h vector
 42637 00007B44 83C706                  	add	di,6 ; *
 42638                                  
 42639 00007B47 AB                      	stosw				; set int 23h
 42640 00007B48 83C706                  	add	di,6			; skip int 24h
 42641                                  
 42642                                  					; set vectors 25-28 and 2a-3f 
 42643                                  	; 04/11/2022
 42644                                  	;mov	cx,4			; set 4 segments
 42645                                  	; 17/12/2022
 42646 00007B4B B104                    	mov	cl,4
 42647                                  ps_set2:
 42648 00007B4D AB                      	stosw				
 42649                                  	;add	di,2
 42650                                  	; 17/12/2022
 42651 00007B4E 47                      	inc	di
 42652 00007B4F 47                      	inc	di
 42653 00007B50 E2FB                    	loop	ps_set2
 42654                                  
 42655 00007B52 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42656                                  					;   already be set.
 42657                                  	; 04/11/2022
 42658                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42659                                  	; 17/12/2022
 42660 00007B55 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42661                                  ps_set3:
 42662 00007B57 AB                      	stosw
 42663                                  	;add	di,2
 42664                                  	; 17/12/2022
 42665 00007B58 47                      	inc	di
 42666 00007B59 47                      	inc	di
 42667 00007B5A E2FB                    	loop	ps_set3
 42668                                  
 42669                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42670                                  ; below. So skip it.
 42671                                  
 42672 00007B5C 83C708                  	add	di,8			; skip vector 30h & 31h 
 42673                                  	
 42674                                  	; 04/11/2022
 42675                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42676                                  	; 17/12/2022
 42677 00007B5F B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42678                                  ps_set4:
 42679 00007B61 AB                      	stosw
 42680                                  	;add	di,2
 42681                                  	; 17/12/2022
 42682 00007B62 47                      	inc	di
 42683 00007B63 47                      	inc	di
 42684 00007B64 E2FB                    	loop	ps_set4
 42685                                  
 42686                                  ; set offset of int2f
 42687                                  
 42688                                  ;if installed
 42689                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42690                                  ;endif
 42691                                  	;mov	[es:0C3h],ax
 42692 00007B66 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42693                                  	; 17/12/2022
 42694                                  	; cx = 0
 42695 00007B6A 07                      	pop	es
 42696 00007B6B C3                      	retn
 42697                                  
 42698                                  ;---------------------------------------------------------------------------
 42699                                  ;
 42700                                  ; Procedure Name : patch_misc_segments
 42701                                  ;
 42702                                  ; Inputs	 : es = segment to patch in
 42703                                  ;		   ds = dosdata
 42704                                  ;
 42705                                  ; outputs	 : patches in the sharer and other tables in the dos
 42706                                  ;		   with right dos code segment in es
 42707                                  ;
 42708                                  ; Regs Mod	 : DI,SI,CX
 42709                                  ;
 42710                                  ;---------------------------------------------------------------------------
 42711                                  
 42712                                  patch_misc_segments:
 42713                                  
 42714 00007B6C 53                      	push	bx
 42715 00007B6D 06                      	push	es
 42716 00007B6E 50                      	push	ax
 42717                                  
 42718 00007B6F 8CC0                    	mov	ax,es			; ax - > DOS segment
 42719                                  	
 42720 00007B71 1E                      	push	ds
 42721 00007B72 07                      	pop	es			; es -> DOSDATA
 42722                                  	
 42723                                  ; initialize the jump table for the sharer...
 42724                                  
 42725                                  	;mov	di,offset dosdata:jshare
 42726                                  	;mov	di,90h
 42727 00007B73 BF[9000]                	mov	di,JShare
 42728                                  	;mov	bx,[0AAAh]
 42729 00007B76 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42730                                  					; table was patched during the first
 42731                                  					; call to this routine
 42732 00007B7A B90F00                  	mov	cx,15
 42733                                  jumptabloop:
 42734                                  	;add	di,2			; skip offset
 42735                                  	; 17/12/2022
 42736 00007B7D 47                      	inc	di
 42737 00007B7E 47                      	inc	di
 42738 00007B7F 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42739 00007B82 7405                    	je	short share_patch	; Y: patch in sharer table
 42740                                  					; N: 
 42741 00007B84 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42742 00007B87 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42743                                  share_patch:
 42744 00007B89 AB                      	stosw				; drop in segment
 42745                                  no_share_patch:
 42746 00007B8A E2F1                    	loop	jumptabloop
 42747                                  					; BUGBUG patching the country info 
 42748                                  					; with dosdata can be done inline
 42749                                  					; in dosinit.
 42750                                  					; for dos 3.3 country info
 42751                                  					; table address
 42752                                  
 42753                                  	;mov	si,offset dosdata:country_cdpg
 42754                                  	;mov	si,122Ah   
 42755 00007B8C BE[0512]                	mov	si,COUNTRY_CDPG
 42756                                  					; initialize double word
 42757                                  					; pointers with dosdata in ds
 42758                                  	;mov	[si+4Fh],ds
 42759                                  	;mov	[si+54h],ds
 42760                                  	;mov	[si+59h],ds
 42761                                  	;mov	[si+5Eh],ds
 42762                                  	;mov	[si+80h],ds
 42763                                  	;mov	[si+63h],ds
 42764 00007B8F 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42765 00007B92 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42766 00007B95 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42767 00007B98 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42768 00007B9B 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42769 00007B9F 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42770                                  
 42771                                  					; fastopen routines are in doscode
 42772                                  					; so patch with doscode seg in ax
 42773                                  
 42774                                  	;mov	si,offset dosdata:fastopentable
 42775                                  	;mov	si,0D30h
 42776 00007BA2 BE[300D]                	mov	si,FastOpenTable
 42777                                  
 42778                                  	; 17/12/2022
 42779                                  	; bx = [TEMP_DOSLOC]
 42780 00007BA5 83FBFF                  	cmp	bx,-1
 42781                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42782 00007BA8 7405                    	je	short fast_patch	; Y: patch segment
 42783                                  	;mov	cx,[TEMP_DOSLOC]
 42784                                  					; Q: has fastopen patched in it's
 42785                                  					;    segment
 42786                                  	; 17/12/2022
 42787 00007BAA 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42788                                  	;;cmp	cx,[si+4]
 42789                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42790 00007BAD 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42791                                  
 42792                                  fast_patch:
 42793                                  	;mov	[si+4],ax
 42794 00007BAF 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42795                                  no_fast_patch:
 42796                                  	; 17/12/2022
 42797                                  	; cx = 0
 42798 00007BB2 58                      	pop	ax
 42799 00007BB3 07                      	pop	es
 42800 00007BB4 5B                      	pop	bx
 42801                                  
 42802 00007BB5 C3                      	retn
 42803                                  
 42804                                  ;--------------------------------------------------------------------------
 42805                                  ;
 42806                                  ; Procedure Name : patch_offset
 42807                                  ; 
 42808                                  ; Inputs	 : NONE
 42809                                  ;
 42810                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42811                                  ;		   0,20-28,3a-3f, and 30,31
 42812                                  ;
 42813                                  ;
 42814                                  ; Regs. Mod	 : AX,DI,CX
 42815                                  ;--------------------------------------------------------------------------
 42816                                  
 42817                                  patch_offset:
 42818 00007BB6 06                      	push	es		; preserve es
 42819                                  
 42820 00007BB7 31C0                    	xor	ax,ax
 42821 00007BB9 8EC0                    	mov	es,ax
 42822                                  				; set default divide trap address
 42823                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42824                                  	;mov	word [es:0],108Ah
 42825 00007BBB 26C7060000[7010]        	mov	word [es:0],ldivov
 42826                                  
 42827                                  	;mov	di,80h
 42828 00007BC2 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42829                                  	;mov	ax,offset dosdata:lirett
 42830                                  	;mov	ax,10DAh
 42831 00007BC5 B8[C010]                	mov	ax,lirett
 42832                                  				; set vectors 20 & 21 to point to iret.
 42833                                  	; 17/12/2022
 42834                                  	; cx = 0
 42835                                  
 42836                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42837                                  po_iset1:
 42838 00007BC8 AB                      	stosw
 42839                                  	;add	di,2 ; *
 42840                                  	;loop	po_iset1
 42841                                  	; 17/12/2022
 42842 00007BC9 47                      	inc	di
 42843 00007BCA 47                      	inc	di
 42844 00007BCB AB                      	stosw	; int 21h vector
 42845                                  
 42846                                  	;add	di,4		; skip vector 22h
 42847                                  	; 17/12/2022
 42848 00007BCC 83C706                  	add	di,6 ; *	
 42849                                  
 42850 00007BCF AB                      	stosw			; set offset of 23h
 42851 00007BD0 83C706                  	add	di,6		; skip 24h
 42852                                  
 42853                                  				; set vectors 25-28 and 2a-3f to iret.
 42854                                  	; 04/11/2022
 42855                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42856                                  	; 17/12/2022
 42857 00007BD3 B104                    	mov	cl,4		;   sets offsets for ints 25h-28h
 42858                                  po_iset2:
 42859 00007BD5 AB                      	stosw
 42860                                  	;add	di,2
 42861                                  	; 17/12/2022
 42862 00007BD6 47                      	inc	di
 42863 00007BD7 47                      	inc	di
 42864 00007BD8 E2FB                    	loop	po_iset2
 42865                                  
 42866 00007BDA 83C704                  	add	di,4		; skip vector 29h
 42867                                  
 42868                                  	; 04/11/2022
 42869                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42870                                  	; 17/12/2022
 42871                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42872 00007BDD B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42873                                  po_iset3:
 42874 00007BDF AB                      	stosw
 42875                                  	;add	di,2
 42876                                  	; 17/12/2022
 42877 00007BE0 47                      	inc	di
 42878 00007BE1 47                      	inc	di
 42879 00007BE2 E2FB                    	loop	po_iset3
 42880                                  
 42881                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42882                                  ; below. So skip it.
 42883                                  
 42884                                  	;add	di,8		; skip vector 30h & 31h 
 42885                                  	; 17/12/2022
 42886 00007BE4 83C70C                  	add	di,12		 ;skip vector 2Fh, 30h & 31h
 42887                                  
 42888                                  	; 04/11/2022
 42889                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42890                                  				;   sets offsets for ints 32h-3fh
 42891                                  	; 17/12/2022
 42892 00007BE7 B10E                    	mov	cl,14 ; 26/06/2019
 42893                                  po_iset4:
 42894 00007BE9 AB                      	stosw
 42895                                  	;add	di,2
 42896                                  	; 17/12/2022
 42897 00007BEA 47                      	inc	di
 42898 00007BEB 47                      	inc	di
 42899 00007BEC E2FB                    	loop	po_iset4
 42900                                  
 42901                                  ;if installed
 42902                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42903                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42904 00007BEE 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 42905                                  ;endif
 42906                                  
 42907                                  ; set up entry point call at vectors 30-31h
 42908                                  	;mov	byte [es:0C0h],0EAh
 42909 00007BF5 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42910                                  	;mov	word [es:0C1h],10D0h
 42911 00007BFB 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42912                                  
 42913                                  	;mov	word [es:80h],1094h
 42914 00007C02 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit
 42915                                  	;mov	word [es:84h],109Eh
 42916 00007C09 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand
 42917                                  	;mov	word [es:94h],10A8h
 42918 00007C10 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd   
 42919                                  	;mov	word [es:98h],10B2h
 42920 00007C17 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt 
 42921                                  	;mov	word [es:9Ch],10BCh
 42922 00007C1E 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident
 42923                                  
 42924                                  	; 17/12/2022
 42925                                  	; CX = 0
 42926 00007C25 07                      	pop	es		; restore es
 42927 00007C26 C3                      	retn
 42928                                  
 42929                                  ;--------------------------------------------------------------------------
 42930                                  ;
 42931                                  ; 	Procedure Name	:	patch_in_nops
 42932                                  ;
 42933                                  ; 	Entry		: 	ES -> DOSDATA
 42934                                  ;
 42935                                  ;	Regs Mod	: 	cx, di
 42936                                  ;
 42937                                  ;	Description:
 42938                                  ;		This routine patches in 2 nops at the offsets specified in 
 42939                                  ;	patch_table. This basically enables the low mem stub to start 
 42940                                  ;	making XMS calls.
 42941                                  ;
 42942                                  ;--------------------------------------------------------------------------
 42943                                  
 42944                                  	; 04/11/2022
 42945                                  	; (MSDOS 5.0 MSDOS.SYS)
 42946                                  	; DOSCODE:0BC50h
 42947                                  
 42948                                  patch_table:	; label	byte
 42949                                  	;dw	offset dosdata:i0patch
 42950                                  	;dw	offset dosdata:i20patch
 42951                                  	;dw	offset dosdata:i21patch
 42952                                  	;dw	offset dosdata:i25patch
 42953                                  	;dw	offset dosdata:i26patch
 42954                                  	;dw	offset dosdata:i27patch
 42955                                  	;dw	offset dosdata:i2fpatch
 42956                                  	;dw	offset dosdata:cpmpatch
 42957 00007C27 [7010]                  	dw	i0patch
 42958 00007C29 [7A10]                  	dw	i20patch
 42959 00007C2B [8410]                  	dw	i21patch
 42960 00007C2D [8E10]                  	dw	i25patch
 42961 00007C2F [9810]                  	dw	i26patch
 42962 00007C31 [A210]                  	dw	i27patch
 42963 00007C33 [AC10]                  	dw	i2fpatch
 42964 00007C35 [B610]                  	dw	cpmpatch
 42965                                  
 42966                                  patch_table_size equ ($-patch_table)/2
 42967                                  
 42968                                  patch_in_nops:
 42969 00007C37 50                      	push	ax
 42970 00007C38 56                      	push	si
 42971 00007C39 BE[277C]                	mov	si,patch_table
 42972 00007C3C B89090                  	mov	ax,9090h ; nop, nop
 42973                                  	; 17/12/2022
 42974                                  	; cx = 0
 42975                                  	;mov	cx,8
 42976                                  	;mov	cx,patch_table_size ; 8
 42977 00007C3F B108                    	mov	cl,patch_table_size ; 8
 42978                                  pin_loop:
 42979 00007C41 2E8B3C                  	mov	di,[cs:si]
 42980 00007C44 AB                      	stosw
 42981                                  	;add	si,2
 42982                                  	; 17/12/2022
 42983 00007C45 46                      	inc	si
 42984 00007C46 46                      	inc	si
 42985 00007C47 E2F8                    	loop	pin_loop
 42986 00007C49 5E                      	pop	si
 42987 00007C4A 58                      	pop	ax
 42988 00007C4B C3                      	retn
 42989                                  
 42990                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42991                                  ; ---------------------------------------------------------------------------
 42992                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 42993                                  ; ---------------------------------------------------------------------------
 42994                                  
 42995                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 42996                                  DOSCODE_END:
 42997                                  	;times	9 db 0	; db 9 dup(0)
 42998                                  	; 18/12/2022
 42999 00007C4C 0000                    	dw	0  ;	times 2 db 0
 43000                                  
 43001                                  ;align 16
 43002                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43003                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43004                                  
 43005                                  ; ---------------------------------------------------------------------------
 43006                                  
 43007                                  
 43008                                  ;memstrt label word
 43009                                  ; ---------------------------------------------------------------------------
 43010                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43011                                  ; ---------------------------------------------------------------------------
 43012                                  
 43013                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43014                                  
 43015                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43016                                  ; the dos initialization segment
 43017                                  
 43018                                  ;ifndef ROMDOS
 43019                                  
 43020                                  ;doscode ends
 43021                                  
 43022                                  ;else
 43023                                  
 43024                                  ;;dosinitseg ends
 43025                                  
 43026                                  ;endif ; ROMDOS
 43027                                  
 43028                                  ;============================================================================
 43029                                  
 43030                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43031                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43032                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43033                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43034                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43035                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43036                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43037                                  
 43038                                  ;; burasý doscode sonu
 43039                                  
 43040                                  ;============================================================================
 43041                                  ; DOSDATA
 43042                                  ;============================================================================
 43043                                  ; 29/04/2019 - Retro DOS 4.0
 43044                                  
 43045                                  ;[BITS 16]
 43046                                  
 43047                                  ;[ORG 0]
 43048                                  
 43049                                  ; 25/04/2019 - Retro DOS v4.0
 43050                                  
 43051                                  ;============================================================================
 43052                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43053                                  ;============================================================================
 43054                                  
 43055                                  ;align 16
 43056                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43057                                  	; (4970 bytes for MSDOS 6.21)
 43058                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43059                                  
 43060                                  ;============================================================================
 43061                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43062                                  ;============================================================================
 43063                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43064                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43065                                  ; 16/07/2018 - Retro DOS 3.0	
 43066                                  
 43067                                  ;Break <Initialized data and data used at DOS initialization>
 43068                                  ;----------------------------------------------------------------------------
 43069                                  
 43070                                  ; We need to identify the parts of the data area that are relevant to tasks
 43071                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43072                                  ; data will be gathered with the system code. The process data under 2.x will
 43073                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43074                                  ;
 43075                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43076                                  ; describing that data item.
 43077                                  
 43078                                  ;DOSDATA SEGMENT
 43079                                  
 43080                                  ; 04/11/2022
 43081                                  ;[ORG 0]
 43082                                  
 43083                                  ; ----------------------------------------------------------------------------
 43084                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43085                                  ; ----------------------------------------------------------------------------
 43086                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43087                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43088                                  ; ----------------------------------------------------------------------------
 43089                                  
 43090                                  ; 04/11/2022
 43091                                  
 43092                                  ;DOSDATA:0000h
 43093                                  
 43094 00007C4E 90<rep 2h>              align 16
 43095                                  
 43096                                  ; ----------------------------------------------------------------------------
 43097                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43098                                  ; ----------------------------------------------------------------------------
 43099                                  
 43100                                  segment .data  vstart=0 ; 06/12/2022
 43101                                  								
 43102                                  ; ============================================================================
 43103                                  
 43104                                  ; 06/12/2022
 43105                                  ;DOSDATASTART equ $
 43106                                  DOSDATASTART:
 43107                                  
 43108                                  
 43109                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43110                                  
 43111                                  	;; 03/11/2022
 43112                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43113                                  
 43114                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43115                                  	;db	4 dup (?)	
 43116 00000000 00<rep 4h>              	times	4 db 0
 43117                                  
 43118                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43119                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43120                                  	;dw	0
 43121                                  
 43122                                  	;EVEN
 43123                                  
 43124                                  ;align 2
 43125                                  
 43126                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43127                                  ; area compatability. This location must be incremented EACH TIME the data
 43128                                  ; area here gets mucked with.
 43129                                  ;
 43130                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43131                                  
 43132                                  MSCT001S:	; LABEL BYTE
 43133                                  	
 43134                                  DataVersion:	
 43135 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43136                                  
 43137                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43138                                  ;hkn; been removed to DOSCODE above
 43139                                  
 43140                                  ;M044
 43141                                  ; First part of save area for saving last para of Window memory
 43142                                  
 43143                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43144 00000006 00<rep 8h>              	times	8 db 0
 43145                                  
 43146                                  	; MSDOS 6.21 DOSDATA:000Eh
 43147                                  MYNUM:			; Offset 000Eh
 43148 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43149                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43150 00000010 0000                    	dw	0
 43151                                  OpenLRU:
 43152 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43153                                  OEM_HANDLER: 		
 43154 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43155                                  
 43156                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43157                                  ;;			way that we leave DOS???? - jgl
 43158                                  
 43159                                  LeaveAddr:
 43160 00000018 [1104]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43161                                  RetryCount:		
 43162 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43163                                  RetryLoop:
 43164 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43165                                  LastBuffer:
 43166 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43167                                  CONTPOS:
 43168 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43169                                  arena_head:
 43170 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43171                                  
 43172                                  ;; 16/07/2018
 43173                                  ;;***************************************************************************
 43174                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43175                                  ;;***************************************************************************
 43176                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43177                                  ;;
 43178                                  ;;	AH = 52h
 43179                                  ;;
 43180                                  ;;	on return:
 43181                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43182                                  ;;		Known "invars" fields follow (varies with DOS version):
 43183                                  ;;
 43184                                  ;;	Offset Size		 Description
 43185                                  ;;
 43186                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43187                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43188                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43189                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43190                                  ;;		      0 indicates no unread input (DOS 3.x)
 43191                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43192                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43193                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43194                                  ;;	  08   dword  pointer to $CLOCK device driver
 43195                                  ;;	  0C   dword  pointer to CON device driver
 43196                                  ;;	  10   byte   number of logical drives in system
 43197                                  ;;	  11   word   maximum bytes/block of any block device
 43198                                  ;;	  13   dword  pointer to DOS cache buffer header
 43199                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43200                                  ;;		      point to the next device in device chain
 43201                                  ;;
 43202                                  ;;***************************************************************************
 43203                                  
 43204                                  ; The following block of data is used by SYSINIT. 
 43205                                  ; Do not change the order or size of this block
 43206                                  
 43207                                  ;SYSINITVAR:
 43208                                  ;----------------------------------------------------------------------------
 43209                                  SYSINITVARS:
 43210                                  DPBHEAD:
 43211 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43212                                  SFT_ADDR:
 43213 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43214                                  BCLOCK:
 43215 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43216                                  BCON:
 43217 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43218                                  MAXSEC:
 43219 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43220                                  BUFFHEAD:
 43221 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43222                                  CDSADDR:
 43223 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43224                                  SFTFCB:
 43225 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43226                                  KEEPCOUNT:
 43227 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43228                                  NUMIO:
 43229 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43230                                  CDSCOUNT:
 43231 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43232                                  
 43233                                  ; A fake header for the NUL device
 43234                                  NULDEV:
 43235 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43236                                  	;dw	8004h
 43237 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43238 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43239 00000050 [CB0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43240 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43241                                  SPLICES:
 43242 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43243                                  
 43244                                  Special_Entries:
 43245 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43246                                  UU_IFS_DOS_CALL:
 43247 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43248                                  ; 
 43249                                  ; UU_IFS_HEADER:
 43250                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43251                                  
 43252                                  ChkCopyProt:
 43253 00000061 0000                    	dw	0	; M068
 43254                                  A20OFF_PSP:
 43255 00000063 0000                    	dw	0	; M068
 43256                                  BUFFERS_PARM1:
 43257 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43258                                  BUFFERS_PARM2:
 43259 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43260                                  BOOTDRIVE:
 43261 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43262                                  DDMOVE:
 43263 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43264                                  EXT_MEM_SIZE:
 43265 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43266                                  
 43267                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43268                                  ;
 43269                                  ; Replaced by next two declarations
 43270                                  ;
 43271                                  ;UU_BUF_HASH_PTR:
 43272                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43273                                  ;UU_BUF_HASH_COUNT:
 43274                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43275                                  
 43276                                  BufferQueue:
 43277 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43278                                  DirtyBufferCount:
 43279 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43280                                  			; BUGBUG ---- change to byte
 43281                                  SC_CACHE_PTR:
 43282 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43283                                  SC_CACHE_COUNT:
 43284 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43285                                  BuffInHMA:
 43286 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43287                                  LoMemBuff:
 43288 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43289                                  			;  in Low mem when buffs are in HMA
 43290                                  ;
 43291                                  ; All variables which have UU_ as prefix can be reused for other
 43292                                  ; purposes and can be renamed. All these variables were used for
 43293                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43294                                  ; manager ---- MOHANS
 43295                                  ;
 43296                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43297                                  UU_BUF_EMS_FIRST_PAGE:	
 43298 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43299                                  
 43300                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43301                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43302                                  ;	dw	0			
 43303                                  
 43304                                  CL0FATENTRY:
 43305 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43306                                  			; is used in pack/unpack rts.
 43307                                  			; in fat.asm if cluster 0 is specified.
 43308                                  			; SR;
 43309                                  IoStatFail:
 43310 00000083 00                      	db	0	; IoStatFail has been added to 
 43311                                  			; record a fail on an I24 
 43312                                  			; issued from IOFUNC on a status call. 
 43313                                  
 43314                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43315                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43316                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43317                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43318                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43319                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43320                                  ;
 43321                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43322                                  						; state of the 	buffers page.
 43323                                  						; This one byte is retained to 
 43324                                  						; keep the size of this data 
 43325                                  						; block the same.;
 43326                                  ALLOCMSAVE:
 43327 00000084 00                      	db	0	; M063: temp var. used to 
 43328                                  			; M063: save alloc method in
 43329                                  			; M063: msproc.asm
 43330                                  A20OFF_COUNT:
 43331 00000085 00                      	db	0	; M068: indiactes the # of 
 43332                                  			; M068: int 21 calls for 
 43333                                  			; M068: which A20 is off
 43334                                  DOS_FLAG:
 43335 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43336                                  			; definitions
 43337                                  UNPACK_OFFSET:
 43338 00000087 0000                    	dw	0	; saves pointer to the start
 43339                                  			; of unpack code in exepatch.
 43340                                  			; asm.
 43341                                  UMBFLAG:
 43342 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43343                                  			; M003: link state of the UMBs
 43344                                  			; M003: whether linked or not 
 43345                                  			; M003: to the DOS arena chain
 43346                                  SAVE_AX:
 43347 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43348                                  			; M000: in msproc.asm
 43349                                  UMB_HEAD:
 43350 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43351                                  			; M000: the first umb arena by 
 43352                                  			; M000: BIOS sysinit.
 43353                                  START_ARENA:
 43354 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43355                                  			; M000: from which DOS will 
 43356                                  			; M000: start its scan for alloc.
 43357                                  
 43358                                  ; End of SYSINITVar block
 43359                                  ;----------------------------------------------------------------------------
 43360                                  
 43361                                  ; 25/04/2019 - Retro DOS v4.0
 43362                                  
 43363                                  ; 16/07/2018
 43364                                  ; MSDOS 3.3 (& MDOS 6.0)
 43365                                  
 43366                                  ;
 43367                                  ; Sharer jump table
 43368                                  ;
 43369                                  
 43370                                  ;PUBLIC	JShare
 43371                                  	;EVEN
 43372                                  
 43373                                  ;JShare	LABEL	DWORD
 43374                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43375                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43376                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43377                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43378                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43379                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43380                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43381                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43382                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43383                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43384                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43385                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43386                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43387                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43388                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43389                                  
 43390                                  align 2
 43391                                  
 43392                                  JShare:
 43393 00000090 [0F07]0000              		DW	BadCall,0
 43394 00000094 [1307]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43395 00000098 [1307]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43396 0000009C [0F07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43397 000000A0 [0F07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43398 000000A4 [0F07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43399 000000A8 [0F07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43400 000000AC [0F07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43401 000000B0 [1307]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43402 000000B4 [0F07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43403 000000B8 [0F07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43404 000000BC [0F07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43405 000000C0 [1307]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43406 000000C4 [0F07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43407 000000C8 [0F07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43408                                  
 43409                                  
 43410                                  ;============================================================================
 43411                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43412                                  ;============================================================================
 43413                                  ; 25/04/2019 - Retro DOS 4.0 
 43414                                  ; 16/07/2018 - Retro DOS 3.0	
 43415                                  
 43416                                  ;Break <Initialized data and data used at DOS initialization>
 43417                                  ;----------------------------------------------------------------------------
 43418                                  
 43419                                  ; We need to identify the parts of the data area that are relevant to tasks
 43420                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43421                                  ; data will be gathered with the system code.  The process data under 2.x will
 43422                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43423                                  ;
 43424                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43425                                  ; describing that data item.
 43426                                  
 43427                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43428                                  
 43429                                  ;
 43430                                  ; Table of routines for assignable devices
 43431                                  ;
 43432                                  ; MSDOS allows assignment if the following standard devices:
 43433                                  ;   stdin  (usually CON input)
 43434                                  ;   stdout (usually CON output)
 43435                                  ;   auxin  (usually AUX input)
 43436                                  ;   auxout (usually AUX output)
 43437                                  ;   stdlpt (usually PRN output)
 43438                                  ;
 43439                                  ; SPECIAL NOTE:
 43440                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43441                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43442                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43443                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43444                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43445                                  ;   as EOF).
 43446                                  
 43447                                  ; Default SFTs for boot up
 43448                                  
 43449                                  		;PUBLIC	SFTABL
 43450                                  
 43451                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43452 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43453 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43454 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43455                                  		;times 295 db 0 ; MSDOS 6.0
 43456 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43457                                  
 43458                                  ; the next two variables relate to the position of the logical stdout/stdin
 43459                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43460                                  ; console.
 43461                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43462 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43463 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43464                                  					;	   of buffered input call
 43465 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43466 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43467                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43468 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43469 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43470 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43471                                  switch_character:
 43472 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43473 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43474 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43475 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43476 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43477                                  
 43478                                  ; The following table is a list of addresses that the sharer patches to be
 43479                                  ; PUSH AX to enable the critical sections
 43480                                  
 43481                                  		; DOSDATA:0315h (MSDOS 6.21)
 43482                                  
 43483                                  ;PUBLIC	CritPatch
 43484                                  
 43485                                  CritPatch:	; LABEL WORD
 43486                                  
 43487                                  ;IRP sect,<critDisk,critDevice>
 43488                                  
 43489                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43490                                  ;
 43491                                  ;SR; Change code patch address to a variable in data segment
 43492                                  ;
 43493                                  ;       dw OFFSET DOSDATA: redir_patch
 43494                                  ;       dw OFFSET DOSDATA: redir_patch
 43495                                  ;
 43496                                  ;;hkn	Short_Addr  E&sect
 43497                                  ;;hkn	Short_Addr  L&sect
 43498                                  ;
 43499                                  ;ELSE
 43500                                  ;	DW	0
 43501                                  ;	DW	0
 43502                                  ;ENDIF
 43503                                  ;ENDM
 43504                                  ;	DW	0
 43505                                  
 43506                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43507                                   
 43508 00000315 [0C0D]                  	dw 	redir_patch
 43509 00000317 [0C0D]                  	dw 	redir_patch			
 43510 00000319 [0C0D]                  	dw	redir_patch
 43511 0000031B [0C0D]                  	dw 	redir_patch
 43512                                  
 43513 0000031D 0000                    	dw	0
 43514                                  
 43515                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43516                                  ; Also, IBM server 1.0 requires this also.
 43517                                  
 43518                                  	;EVEN			; Force swap area to start on word boundry
 43519 0000031F 90                      align 2
 43520                                  	;PUBLIC	SWAP_START
 43521                                  SWAP_START:	; LABEL BYTE
 43522 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43523 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43524 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43525 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43526 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43527                                  
 43528                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43529 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43530 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43531                                  ; end warning
 43532                                   
 43533 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43534                                  
 43535 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43536 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43537 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43538 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43539 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43540 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43541                                  ;				; F.C. 2/17/86
 43542 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43543 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43544                                  ;align 2
 43545                                  SWAP_ALWAYS:	; 05/08/2018
 43546 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43547                                  				;   extended error type stuff.
 43548                                  				;   NOTE: does not have Correct value on
 43549                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43550                                  				;   GetExtendedError system calls)
 43551 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43552 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43553 00000340 0000                    FirstArena:	dw 0		; first free block found
 43554 00000342 0000                    BestArena:	dw 0		; best free block found
 43555 00000344 0000                    LastArena:	dw 0		; last free block found
 43556 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43557 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43558 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43559 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43560 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43561 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43562 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43563                                  
 43564                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43565                                  	;EVEN
 43566 0000034F 90                      align 2
 43567                                  		; DOSDATA:0350h (MSDOS 6.21)
 43568 00000350 00                      DAY:		db 0		; Day of month
 43569 00000351 00                      MONTH:		db 0		; Month of year
 43570 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43571 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43572 00000356 00                      WEEKDAY:	db 0		; Day of week
 43573                                  ; end warning
 43574                                  
 43575 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43576 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43577 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43578                                  
 43579                                  ; Combination of all device call parameters
 43580                                  	;PUBLIC	DEVCALL 	;
 43581                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43582                                  DEVCALL: ; 08/08/2018
 43583 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43584 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43585 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43586 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43587 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43588                                  
 43589                                  	;PUBLIC	CALLUNIT
 43590                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43591                                  CALLFLSH: ; LABEL   WORD	;
 43592 00000367 00                      CALLMED:	db 0		; media byte
 43593                                  CALLBR:	  ; LABEL   DWORD	;
 43594                                  	;PUBLIC	CALLXAD 	;
 43595                                  CALLXAD:  ; LABEL   DWORD	;
 43596 00000368 00                      CALLRBYT:	db 0		;
 43597                                  	;PUBLIC	CALLVIDM	;
 43598                                  CALLVIDM: ; LABEL   DWORD	;
 43599 00000369 00<rep 3h>              	times 3 db 0	;
 43600                                  	;PUBLIC CallBPB		;
 43601                                  CALLBPB:  ; LABEL   DWORD	;
 43602                                  CALLSCNT:			;
 43603 0000036C 0000                    		dw 0		;
 43604                                  	;PUBLIC	CALLSSEC	;
 43605                                  CALLSSEC: ; LABEL   WORD	;
 43606 0000036E 0000                    		dw 0		;
 43607 00000370 00000000                CALLVIDRW:	dd 0		;
 43608                                  ;MSDOS 6.0
 43609 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43610 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43611                                  
 43612                                  ; Same as above for I/O calls	;
 43613                                  				;
 43614                                  	;PUBLIC	IOCall		;
 43615                                  ;IOCALL	SRHEAD	<>		;
 43616                                  IOCALL:	; 07/08/2018
 43617 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43618 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43619 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43620 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43621 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43622                                  IOFLSH:	  ; LABEL   WORD	;
 43623                                          ;PUBLIC  IORCHR		;
 43624                                  IORCHR:	  ; LABEL   BYTE	;
 43625 00000389 00                      IOMED:		db 0		;
 43626 0000038A 00000000                IOXAD:		dd 0		;
 43627 0000038E 0000                    IOSCNT:		dw 0		;	
 43628 00000390 0000                    IOSSEC:		dw 0		;
 43629                                  
 43630                                  ; Call struct for DSKSTATCHK	;
 43631 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43632 00000393 00                      		db 0
 43633 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43634 00000395 0000                    DSKSTST:	dw 0		;
 43635 00000397 00<rep 8h>              	times 8	db 0		;
 43636 0000039F 00                      DSKCHRET:	db 0		;
 43637                                  
 43638                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43639                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43640                                  ;hkn   short_addr  DEVIOBUF	;
 43641                                  	
 43642 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43643 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43644 000003A4 0100                    DSKSTCNT:	dw 1		;
 43645 000003A6 0000                    		dw 0		;
 43646                                  
 43647 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43648                                  
 43649                                  ;MSDOS 6.0
 43650                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43651 000003A9 00000000                		dd 0		;MS. position
 43652 000003AD 00000000                		dd 0		;MS. length
 43653                                  
 43654                                  ;hkn; the foll. was moved from dosmes.asm.
 43655                                  
 43656                                  	;EVEN
 43657 000003B1 90                      align 2				; needed to maintain offsets
 43658                                  
 43659                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43660                                  USERNUM:
 43661 000003B2 0000                     		dw 0		; 24 bit user number
 43662 000003B4 00                      		db 0
 43663                                  ;IF IBM
 43664                                  ;IF IBMCOPYRIGHT
 43665                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43666                                  ;ELSE
 43667                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43668                                  ;ENDIF
 43669                                  ;ELSE
 43670 000003B5 FF                      OEMNUM:		DB 0FFh
 43671                                  ;ENDIF
 43672                                  
 43673                                  ;============================================================================
 43674                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43675                                  ;============================================================================
 43676                                  ; 25/04/2019 - Retro DOS 4.0
 43677                                  
 43678                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43679                                  ; ----------------------------------------------------------
 43680                                  ; This data section which was named as uninitialized data
 43681                                  ; (as overlayed by initialization code) but follows 
 43682                                  ; initialized data section from DOSDATA:03B6h address
 43683                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43684                                  ; and there is not overlaying..)
 43685                                  ; **********************************************************
 43686                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43687                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43688                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43689                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43690                                  ; TIMEBUF is at offset 03B6h.
 43691                                  ; **********************************************************	
 43692                                  
 43693                                  ;Break <Uninitialized data overlayed by initialization code>
 43694                                  ;----------------------------------------------------------------------------
 43695                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43696                                  ; Init code overlaps with data area below
 43697                                  
 43698                                  ; 	ORG     0
 43699                                  
 43700                                  MSDAT001S:	; label byte
 43701                                  
 43702                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43703                                  TIMEBUF: ;	times 6 db 0
 43704 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43705 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43706                                  
 43707                                  ; The following areas are used as temp buffer in EXEC system call
 43708                                  
 43709                                  ; DOSDATA:03BEh
 43710                                  OPENBUF: ;times 64  dw	0
 43711 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43712                                  RENBUF:	
 43713 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43714                                  
 43715                                  ; Buffer for search calls
 43716                                  SEARCHBUF:	
 43717 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43718                                  DUMMYCDS:  ;times 88 db 0
 43719 000004F3 00<rep 58h>             	times	curdirLen db 0
 43720                                  
 43721                                  ; End of contiguous buffer
 43722                                   
 43723                                  ; Temporary directory entry for use by many routines. Device directory
 43724                                  ; entries (bogus) are built here.
 43725                                  
 43726                                  ; DOSDATA:054Bh
 43727                                  
 43728                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43729                                  
 43730                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43731                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43732                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43733                                  
 43734                                  NAME1:	
 43735 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43736                                  NAME2:
 43737 00000557 00<rep Dh>              	times	13 db	0 		;
 43738                                  DESTSTART:
 43739 00000564 0000                    	dw	0			;
 43740                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43741                                  	;times	5  db	0
 43742 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43743                                  
 43744                                  ; End Temporary directory entry.
 43745                                  
 43746 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43747                                  EXTFCB:	
 43748 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43749                                  SATTRIB:
 43750 0000056D 00                      	db	0		; Storage for search attributes
 43751                                  OPEN_ACCESS:
 43752 0000056E 00                      	db	0		; access of open system call
 43753                                  FOUNDDEL:
 43754 0000056F 00                      	db	0		; true => file was deleted
 43755                                  FOUND_DEV:
 43756 00000570 00                      	db	0		; true => search found a device
 43757                                  FSPLICE:
 43758 00000571 00                      	db	0		; true => do a splice in transpath
 43759                                  FSHARING:
 43760 00000572 00                      	db	0		; TRUE => no redirection
 43761                                  SECCLUSPOS:
 43762 00000573 00                      	db	0		; Position of first sector within cluster
 43763 00000574 00                      TRANS:	db	0		;
 43764 00000575 00                      READOP:	db	0		;
 43765                                  THISDRV:
 43766 00000576 00                      	db	0		;
 43767                                  CLUSFAC:
 43768 00000577 00                      	db	0		;
 43769                                  CLUSSPLIT:
 43770 00000578 00                      	db	0		;
 43771                                  INSMODE:
 43772 00000579 00                      	db	0		; true => insert mode in buffered read
 43773 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43774 0000057B 00                      VOLID:	db	0		;
 43775                                  EXIT_TYPE:
 43776 0000057C 00                      	db	0		; type of exit...
 43777                                   
 43778                                  	;EVEN
 43779                                  
 43780 0000057D 90                      align 2
 43781                                  
 43782                                  ; DOSDATA:057Eh
 43783                                  
 43784                                  ; WARNING - the following two items are accessed as a word
 43785                                  
 43786                                  CREATING:
 43787 0000057E 00                      	db	0		; true => creating a file
 43788 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43789                                  				; = DIRFREE iff BUGBUG
 43790                                  EXITHOLD:
 43791 00000580 00000000                	dd	0		; Temp location for proc terminate
 43792                                  USER_SP:
 43793 00000584 0000                    	dw	0		; User SP for system call
 43794                                  USER_SS:
 43795 00000586 0000                    	dw	0		; User SS for system call
 43796                                  CONTSTK:
 43797 00000588 0000                    	dw	0		;
 43798                                  THISDPB:
 43799 0000058A 00000000                	dd	0		;
 43800                                  CLUSSAVE:
 43801 0000058E 0000                    	dw	0		;
 43802                                  CLUSSEC:
 43803 00000590 00000000                	dd	0		;>32mb			AC0000
 43804                                  PREREAD:
 43805 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43806 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43807                                  FATBYTE:
 43808 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43809                                  ; DOSDATA:059Ah
 43810 0000059A 00000000                DEVPT:	dd	0		;
 43811                                  THISSFT:
 43812 0000059E 00000000                	dd	0		; Address of user SFT
 43813                                  THISCDS:
 43814 000005A2 00000000                	dd	0		; Address of current CDS
 43815                                  THISFCB:
 43816 000005A6 00000000                	dd	0		; Address of user FCB
 43817 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43818 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43819 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43820                                  WFP_START:
 43821 000005B2 0000                    	dw	0		;
 43822                                  REN_WFP:
 43823 000005B4 0000                    	dw	0		;
 43824                                  CURR_DIR_END:
 43825 000005B6 0000                    	dw	0		;
 43826                                  NEXTADD:
 43827 000005B8 0000                    	dw	0		;
 43828                                  LASTPOS:
 43829 000005BA 0000                    	dw	0		;
 43830                                  CLUSNUM:
 43831 000005BC 0000                    	dw	0		;
 43832 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43833                                  DIRSTART:
 43834 000005C2 0000                    	dw	0		;
 43835 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43836 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43837                                                                  ; sectors
 43838                                  BYTSECPOS:
 43839 000005CC 0000                    	dw	0		; Position of first byte within sector
 43840                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43841 000005CE 0000<rep 2h>                    times	2 dw 0
 43842                                  BYTCNT1:
 43843 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43844                                  BYTCNT2:
 43845 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43846 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43847                                  ; DOSDATA:05D8h
 43848                                  ENTFREE:
 43849 000005D8 0000                    	dw	0		;
 43850                                  ENTLAST:
 43851 000005DA 0000                    	dw	0		;
 43852                                  NXTCLUSNUM:
 43853 000005DC 0000                    	dw	0		;
 43854                                  GROWCNT:
 43855 000005DE 00000000                	dd	0		;
 43856 000005E2 00000000                CURBUF:	dd	0		;
 43857 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43858 000005EA 0000                    SAVEBX:	dw	0		;
 43859 000005EC 0000                    SAVEDS:	dw	0		;
 43860                                  RESTORE_TMP:
 43861 000005EE 0000                    	dw	0		; return address for restore world
 43862 000005F0 0000                    NSS:	dw	0
 43863 000005F2 0000                    NSP:	dw	0
 43864                                  ; DOSDATA:05F4h
 43865                                  EXTOPEN_FLAG:
 43866 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43867                                  EXTOPEN_ON:
 43868 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43869                                  EXTOPEN_IO_MODE:
 43870 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43871                                  SAVE_DI:
 43872 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43873                                  SAVE_ES:
 43874 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43875                                  SAVE_DX:
 43876 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43877                                  SAVE_CX:
 43878 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43879                                  SAVE_BX:
 43880 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43881                                  SAVE_SI:
 43882 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43883                                  SAVE_DS:
 43884 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43885                                  
 43886                                  ; DOSDATA:0607h
 43887                                  
 43888                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43889                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43890                                  ; the high 16, the low 16 are still in the register.
 43891                                  
 43892                                  HIGH_SECTOR:	
 43893 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43894                                  ;OffsetMagicPatch:
 43895                                  ;	dw	MagicPatch ;scottq 8/6/92
 43896                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43897 00000609 0000                    	dw	0
 43898                                  				;see dos\mpatch.asm
 43899                                  DISK_FULL:
 43900 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43901                                  TEMP_VAR:
 43902 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43903                                  TEMP_VAR2:
 43904 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43905 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43906                                  DOS34_FLAG:
 43907 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43908                                  NO_FILTER_PATH:
 43909 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43910                                  NO_FILTER_DPATH:
 43911 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43912                                  ; M008
 43913                                  AbsRdWr_SS:
 43914 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43915                                  AbsRdWr_SP:
 43916 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43917                                  
 43918                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43919                                  ; M008
 43920                                   
 43921                                   
 43922                                  ; make those pushes fast!!!
 43923                                  
 43924                                  ;EVEN
 43925                                  
 43926 0000061F 90                      align 2
 43927                                  
 43928                                  StackSize   equ 180h  ; 384	; gross but effective
 43929                                  
 43930                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43931                                  ;				; made up their minds about
 43932                                   
 43933                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43934                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43935                                  
 43936                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43937                                   
 43938 00000620 00<rep 180h>                    times	StackSize db	0	;
 43939                                  AUXSTACK:			; LABEL   BYTE
 43940                                   
 43941 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43942                                  DSKSTACK:			; LABEL   BYTE
 43943                                   
 43944 00000920 00<rep 180h>                    times	StackSize db	0	;
 43945                                  IOSTACK:			; LABEL   BYTE
 43946                                  
 43947                                  ; DOSDATA:0AA0h 
 43948                                   
 43949                                  ; patch space for Boca folks.
 43950                                  ; Say What????!!! This does NOT go into the swappable area!
 43951                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43952                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43953                                   
 43954                                  IBMPATCH: ; label byte
 43955                                  PRINTER_FLAG:
 43956 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43957                                  VOLCHNG_FLAG:
 43958 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43959                                  VIRTUAL_OPEN:
 43960 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43961                                   
 43962                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43963                                  
 43964                                  FSeek_drive:
 43965 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43966                                  FSeek_firclus:
 43967 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43968                                  FSeek_logclus:
 43969 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43970                                  FSeek_logsave:
 43971 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43972                                  
 43973                                  ; DOSDATA:0AAAh
 43974                                  
 43975                                  TEMP_DOSLOC:
 43976 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43977                                  				;at SYSINIT time.
 43978                                  SWAP_END:  ; LABEL   BYTE
 43979                                   
 43980                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43981                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 43982                                  ; to include this byte.
 43983                                   
 43984 00000AAC 00                      	db	0
 43985                                  
 43986                                  ; DOSDATA:0AADh
 43987                                   
 43988                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 43989                                  
 43990                                  ;DOSDATA    ENDS
 43991                                  
 43992                                  ;============================================================================
 43993                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 43994                                  ;============================================================================
 43995                                  ; 27/04/2019 - Retro DOS 4.0
 43996                                  ; 16/07/2018 - Retro DOS 3.0
 43997                                  
 43998                                  ;DOSDATA Segment
 43999                                  
 44000                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44001                                  
 44002                                  ;
 44003                                  ; upper case table
 44004                                  ; ---------------------------------------------------------------------------
 44005                                  UCASE_TAB:	; label   byte
 44006 00000AAD 8000                    	dw	128
 44007 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44008 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44009 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44010 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44011 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44012 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44013 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44014 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44015 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44016 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44017 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44018 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44019 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44020 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44021 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44022 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44023                                  ;
 44024                                  ; file upper case table
 44025                                  ; ---------------------------------------------------------------------------
 44026                                  FILE_UCASE_TAB:	; label  byte
 44027 00000B2F 8000                    	dw	128
 44028 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44029 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44030 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44031 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44032 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44033 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44034 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44035 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44036 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44037 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44038 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44039 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44040 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44041 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44042 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44043 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44044                                  ;
 44045                                  ; file char list
 44046                                  ; ---------------------------------------------------------------------------
 44047                                  FILE_CHAR_TAB:	; label  byte
 44048 00000BB1 1600                    	dw	22				; length
 44049 00000BB3 0100FF                  	db	1,0,255 			; include all
 44050 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44051 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44051 00000BC2 7C3C3E2B3D3B2C     
 44052                                  	;db	24 dup (?)			; reserved
 44053 00000BC9 00<rep 18h>             	times	24 db 0
 44054                                  
 44055                                  ;
 44056                                  ; collate table
 44057                                  ; ---------------------------------------------------------------------------
 44058                                  COLLATE_TAB:	; label   byte
 44059 00000BE1 0001                    	dw	256
 44060 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44061 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44062 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44063 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44064 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44065 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44066 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44067 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44068 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44069 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44070 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44071 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44072 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44073 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44074 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44075 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44076 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44077 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44078 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44079 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44080 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44081 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44082 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44083 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44084 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44085 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44086 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44087 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44088 00000CC3 E053                    	db	224,"S"
 44089 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44090 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44091 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44092 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44093                                  
 44094                                  ; ------------------------------------------------<MSKK01>----------------------
 44095                                  
 44096                                  ; DOSDATA:0CE3h
 44097                                  
 44098                                  ; 29/04/2019
 44099                                  
 44100                                  ; dbcs is not supported in DOS 3.3
 44101                                  ;		   DBCS_TAB	    CC_DBCS <>
 44102                                  ;
 44103                                  ; DBCS for DOS 4.00			   2/12/KK
 44104                                  
 44105                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44106                                  ; ------------------------------------------------<MSKK01>----------------------
 44107                                  ;ifdef	DBCS
 44108                                  ; ifdef	  JAPAN
 44109                                  ;		dw	6		; <MSKK01>
 44110                                  ;		db	081h,09fh	; <MSKK01>
 44111                                  ;		db	0e0h,0fch	; <MSKK01>
 44112                                  ;		db	0,0		; <MSKK01>
 44113                                  ;
 44114                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44115                                  ; endif
 44116                                  ; ifdef	  TAIWAN
 44117                                  ;		dw	4		; <TAIWAN>
 44118                                  ;		db	081h,0FEh	; <TAIWAN>
 44119                                  ;		db	0,0		; <TAIWAN>
 44120                                  ;
 44121                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44122                                  ; endif
 44123                                  ; ifdef   KOREA                         ; Keyl
 44124                                  ;               dw      4               ; <KOREA>
 44125                                  ;               db      0A1h,0FEh       ; <KOREA>
 44126                                  ;               db      0,0             ; <KOREA>
 44127                                  ;
 44128                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44129                                  ;  endif
 44130                                  ;else
 44131 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44132                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44133 00000CE5 00<rep 10h>             		times	16 db 0
 44134                                  
 44135                                  ;		dw	6		;  2/12/KK
 44136                                  ;		db	081h,09Fh	;  2/12/KK
 44137                                  ;		db	0E0h,0FCh	;  2/12/KK
 44138                                  ;		db	0,0		;  2/12/KK
 44139                                  ;
 44140                                  ;endif
 44141                                  ; ------------------------------------------------<MSKK01>----------------------
 44142                                  
 44143                                  ; DOSDATA:0CF5h
 44144                                  
 44145                                  ; ---------------------------------------------------------------------------
 44146                                  ;
 44147                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44148                                  ;     ENTRY: AL = Character to map
 44149                                  ;     EXIT:  AL = The converted character
 44150                                  ; Alters no registers except AL and flags.
 44151                                  ; The routine should do nothing to chars below 80H.
 44152                                  ; ---------------------------------------------------------------------------
 44153                                  ; Example:
 44154                                  
 44155                                  MAP_CASE:
 44156                                  ;Procedure MAP_CASE,FAR
 44157                                  
 44158 00000CF5 3C80                    	CMP	AL,80h
 44159 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44160 00000CF9 CB                      	RETF
 44161                                  Map1:
 44162 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44163 00000CFC 1E                      	PUSH	DS
 44164 00000CFD 53                      	PUSH	BX
 44165 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44166                                  FINISH:
 44167 00000D01 0E                      	PUSH	CS		;Move to DS
 44168 00000D02 1F                      	POP	DS
 44169 00000D03 D7                      	XLAT			;Get upper case character
 44170 00000D04 5B                      	POP	BX
 44171 00000D05 1F                      	POP	DS
 44172                                  L_RET:	
 44173 00000D06 CB                      	RETF
 44174                                  
 44175                                  ;EndProc MAP_CASE
 44176                                  
 44177                                  ; ---------------------------------------------------------------------------
 44178                                  
 44179                                  ; The variables for ECS version are moved here for the same data alignments
 44180                                  ; as IBM-DOS and MS-DOS.
 44181                                  
 44182                                  InterChar:
 44183 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44184                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44185                                  DUMMY:	; LABEL   WORD
 44186                                  InterCon:  
 44187 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44188                                  SaveCurFlg:
 44189 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44190                                  
 44191                                  ; ---------------------------------------------------------------------------
 44192                                  
 44193 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44194                                  redir_patch:
 44195 00000D0C 00                      	  db	0
 44196                                  
 44197                                  ; DOSDATA:0D0Dh
 44198                                  
 44199                                  Mark1:	; label byte
 44200                                  
 44201                                  ;IF2
 44202                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44203                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44204                                  ;	ENDIF
 44205                                  ;ENDIF
 44206                                  
 44207 00000D0D 00<rep 5h>              	  times 5 db 0
 44208                                  
 44209                                  ;############################################################################
 44210                                  ;
 44211                                  ; ** HACK FOR DOS 4.0 REDIR **
 44212                                  ; 
 44213                                  ; The redir requires the following:
 44214                                  ;
 44215                                  ;	MSVERS	offset D12H
 44216                                  ;	YRTAB	offset D14H
 44217                                  ; 	MONTAB	offset D1CH
 44218                                  ;
 44219                                  ; WARNING! WARNING!
 44220                                  ; 
 44221                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44222                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44223                                  ;
 44224                                  ; CURRENTLY MARK1 = 0D0DH
 44225                                  ;
 44226                                  ;############################################################################
 44227                                  
 44228                                  	;ORG	0D12h
 44229                                  
 44230                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44231                                  
 44232                                  	;db	6
 44233                                  	;db	20
 44234                                  
 44235                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44236                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44237 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44238 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44239                                  
 44240                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44241                                  ;
 44242                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44243                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44244                                  
 44245                                  ; Days in year
 44246                                  
 44247                                  YRTAB:   
 44248 00000D14 C8A6                    	DB	200,166			; Leap year
 44249 00000D16 C8A5                    	DB	200,165
 44250 00000D18 C8A5                    	DB	200,165
 44251 00000D1A C8A5                    	DB	200,165
 44252                                  
 44253                                  ; Days of each month
 44254                                  
 44255                                  MONTAB:        
 44256 00000D1C 1F                      	DB      31                      ; January
 44257                                  february:
 44258 00000D1D 1C                      	DB	28 			; February--reset each 
 44259                                  					; time year changes
 44260 00000D1E 1F                              DB      31                      ; March
 44261 00000D1F 1E                              DB      30                      ; April
 44262 00000D20 1F                              DB      31                      ; May
 44263 00000D21 1E                              DB      30                      ; June
 44264 00000D22 1F                              DB      31                      ; July
 44265 00000D23 1F                              DB      31                      ; August
 44266 00000D24 1E                              DB      30                      ; September
 44267 00000D25 1F                              DB      31                      ; October
 44268 00000D26 1E                              DB      30                      ; November
 44269 00000D27 1F                              DB      31                      ; December
 44270                                  
 44271                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44272                                  
 44273                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44274                                  
 44275                                  SysInitTable:
 44276                                  	;dw	SYSINITVAR
 44277 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44278 00000D2A 0000                            dw      0		; segment
 44279 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44280 00000D2E 0000                            dw      0		; segment of pointer
 44281                                  
 44282                                  ; DOS 3.3 F.C. 6/12/86
 44283                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44284                                  
 44285                                  FastTable:				; a better name
 44286                                  FastOpenTable:
 44287 00000D30 0200                    	dw      2                       ; number of entries
 44288 00000D32 [EE12]                  	dw      FastRet			; pointer to ret instr.
 44289 00000D34 0000                    	dw      0                       ; and will be modified by
 44290 00000D36 [EE12]                  	dw      FastRet			; FASTxxx when loaded in
 44291 00000D38 0000                    	dw      0                       
 44292                                  
 44293                                  ; DOS 3.3 F.C. 6/12/86
 44294                                  
 44295                                  FastFlg:				; flags
 44296                                  FastOpenFlg:
 44297 00000D3A 00                      	db	0			; don't change the foll: order  
 44298                                  
 44299                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44300                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44301                                  ; or filled by FastOPen when calling FastOpen Lookup
 44302                                  
 44303                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44304                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44305                                  	;times	11 db 0
 44306 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44307                                  
 44308                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44309                                  ; when calling FastOpen Lookup
 44310                                  
 44311                                  Dir_Info_Buff:	; label  byte
 44312                                  	;db   	SIZE dir_entry dup (0)
 44313                                  	;times	32 db 0
 44314 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44315                                  
 44316                                  Next_Element_Start:
 44317 00000D66 0000                    	dw	0			; save next element start offset
 44318                                  Del_ExtCluster:
 44319 00000D68 0000                    	dw	0			; for dos_delete                       
 44320                                  
 44321                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44322                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44323                                  ; not to destroy the INT 21 stack saved for the user.
 44324                                  
 44325                                  USER_SP_2F:	; LABEL  WORD
 44326 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44327                                  
 44328                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44329                                  DOS_TEMP:	; label  word		; temporary word
 44330                                  FAKE_STACK_2F:  
 44331                                  	; dw  14 dup (0)		; 12 register temporary storage
 44332 00000D6C 0000<rep Eh>            	times 14 dw 0
 44333                                  
 44334                                  Hash_Temp: 	;label  word		; temporary word             
 44335                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44336 00000D88 0000<rep 4h>            	times 4 dw 0
 44337                                              	
 44338                                  SCAN_FLAG:	
 44339 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44340                                  DATE_FLAG:
 44341 00000D91 0000                    	dw     0                	; flag to update the date
 44342                                  
 44343                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44344 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44345                                  
 44346                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44347 00000D95 00000000                	dd     0               		; for extended error                   
 44348 00000D99 00000000                	dd     0			; for parser                           
 44349 00000D9D 00000000                	dd     0			; for critical errror                  
 44350 00000DA1 00000000                	dd     0			; for IFS                              
 44351 00000DA5 00000000                	dd     0			; for code reduction                   
 44352                                  
 44353                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44354 00000DA9 FFFFFFFF                	dd     -1                                                        
 44355                                  SC_SECTOR_SIZE:
 44356 00000DAD 0000                    	dw	0			; sector size for SC                 
 44357                                  SC_DRIVE:
 44358 00000DAF 00                      	db	0			; drive # for secondary cache        
 44359                                  CurSC_DRIVE:
 44360 00000DB0 FF                      	db	-1			; current SC drive                   
 44361                                  CurSC_SECTOR:
 44362 00000DB1 00000000                	dd	0			; current SC starting sector         
 44363                                  SC_STATUS:
 44364 00000DB5 0000                    	dw	0			; SC status word                     
 44365                                  SC_FLAG:
 44366 00000DB7 00                      	db	0			; SC flag                            
 44367                                  AbsDskErr:
 44368 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44369                                                                                            
 44370                                  NO_NAME_ID:	; label byte                                                           
 44371 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44371 00000DC3 2020               
 44372                                  
 44373                                  ;hkn; moved from TABLE segment in kstrin.asm
 44374                                  
 44375                                  KISTR001S:	; label	byte		; 2/17/KK
 44376 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44377                                  KISTR001E:	; label	byte		; 2/17/KK
 44378                                  
 44379                                  ; the nul device driver used to be part of the code. However, since the 
 44380                                  ; header is in the data, and the entry points are only given as an offset,
 44381                                  ; the strategy and interrupt entry points must also be in the data now.
 44382                                  
 44383                                  ; DOSDATA:0DC6h
 44384                                  
 44385                                  SNULDEV:
 44386                                  ;procedure snuldev,far
 44387                                  	;or	word [es:bx+3],100h
 44388                                  	; 17/12/2022
 44389                                  	;or	byte [es:bx+4],01h
 44390 00000DC6 26804F0401              	or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44391                                  	;or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44392                                  INULDEV:
 44393 00000DCB CB                      	retf				; must not be a return!
 44394                                  ;endproc snuldev
 44395                                  
 44396                                  ;M044
 44397                                  ; Second part of save area for saving last para of Windows memory
 44398                                  
 44399                                  WinoldPatch2:
 44400                                  	;db	8 dup (?)	; M044
 44401 00000DCC 00<rep 8h>              	times	8 db 0	
 44402                                  UmbSave2:
 44403                                  	;db	5 dup (?)	; M062
 44404 00000DD4 00<rep 5h>              	times	5 db 0
 44405                                  UmbSaveFlag:
 44406 00000DD9 00                      	db	0		; M062
 44407                                  
 44408                                  ; DOSDATA:0DDBh
 44409                                  
 44410                                  Mark2:	; label byte
 44411                                  
 44412                                  ;IF2
 44413                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44414                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44415                                  ;	ENDIF
 44416                                  ;ENDIF
 44417                                  
 44418                                  ;############################################################################
 44419                                  ;
 44420                                  ; ** HACK FOR DOS 4.0 REDIR **
 44421                                  ; 
 44422                                  ; The redir requires the following:
 44423                                  ;
 44424                                  ;	ERR_TABLE_21	offset DDBH
 44425                                  ;	ERR_TABLE_24	offset E5BH
 44426                                  ; 	ErrMap24	offset EABH
 44427                                  ;
 44428                                  ; WARNING! WARNING!
 44429                                  ;
 44430                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44431                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44432                                  ;
 44433                                  ; CURRENTLY MARK2 = 0DD0H
 44434                                  ;
 44435                                  ;############################################################################
 44436                                  
 44437                                  	;ORG	0DDBh
 44438                                  
 44439                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44440                                  
 44441                                  ; ---------------------------------------------------------------------------
 44442                                  ;
 44443                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44444                                  ; errors. Each entry is 4 bytes long:
 44445                                  ;
 44446                                  ;       Err#,Class,Action,Locus
 44447                                  ;
 44448                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44449                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44450                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44451                                  ;
 44452                                  ; ---------------------------------------------------------------------------
 44453                                  
 44454                                  ;ErrTab  Macro   err,class,action,locus
 44455                                  ;ifidn <locus>,<0FFh>
 44456                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44457                                  ;ELSE
 44458                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44459                                  ;ENDIF
 44460                                  ;ENDM
 44461                                  
 44462                                  ERR_TABLE_21: ; LABEL   BYTE
 44463 00000DDA 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44464 00000DDE 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44465 00000DE2 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44466 00000DE6 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44467 00000DEA 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44468 00000DEE 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44469 00000DF2 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44470 00000DF6 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44471 00000DFA 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44472 00000DFE 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44473 00000E02 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44474 00000E06 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44475 00000E0A 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44476 00000E0E 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44477 00000E12 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44478 00000E16 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44479 00000E1A 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44480 00000E1E 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44481 00000E22 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44482 00000E26 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44483 00000E2A 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44484 00000E2E 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44485 00000E32 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44486 00000E36 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44487 00000E3A 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44488 00000E3E 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44489 00000E42 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44490 00000E46 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44491                                      ; MSDOS 6.0
 44492 00000E4A 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44493 00000E4E 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44494 00000E52 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44495 00000E56 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44496                                  
 44497                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44498                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44499                                  ;		db 2,8,3,2
 44500                                  ;		db 3,8,3,2
 44501                                  ;		db 4,1,4,1
 44502                                  ;		db 5,3,3,0FFh
 44503                                  ;		db 6,7,4,1
 44504                                  ;		db 7,7,5,5
 44505                                  ;		db 8,1,4,5
 44506                                  ;		db 9,7,4,5
 44507                                  ;		db 0Ah,7,4,5
 44508                                  ;		db 0Bh,9,3,1
 44509                                  ;		db 0Ch,7,4,1
 44510                                  ;		db 0Dh,9,4,1
 44511                                  ;		db 0Fh,8,3,2
 44512                                  ;		db 10h,3,3,2
 44513                                  ;		db 11h,0Dh,3,2
 44514                                  ;		db 12h,8,3,2
 44515                                  ;		db 50h,0Ch,3,2
 44516                                  ;		db 20h,0Ah,2,2
 44517                                  ;		db 21h,0Ah,2,2
 44518                                  ;		db 54h,1,4,0FFh
 44519                                  ;		db 56h,3,3,1
 44520                                  ;		db 52h,1,4,2
 44521                                  ;		db 32h,9,3,3
 44522                                  ;		db 55h,0Ch,3,3
 44523                                  ;		db 57h,9,3,1
 44524                                  ;		db 53h,0Dh,4,1
 44525                                  ;		db 24h,1,4,5
 44526                                  ; MSDOS 6.0 (MSDOS 6.21)
 44527                                  ;		db 26h,1,4,1
 44528                                  ;		db 27h,1,4,1
 44529                                  ;		db 5Ah,0Dh,4,2
 44530                                  ; MSDOS 6.0 & MSDOS 3.3
 44531                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44532                                  
 44533                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44534                                  
 44535                                  ; ---------------------------------------------------------------------------
 44536                                  ;
 44537                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44538                                  ; errors. Each entry is 4 bytes long:
 44539                                  ;
 44540                                  ;       Err#,Class,Action,Locus
 44541                                  ;
 44542                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44543                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44544                                  ; THE END.
 44545                                  ;
 44546                                  ; ---------------------------------------------------------------------------
 44547                                  
 44548                                  ERR_TABLE_24: ; LABEL   BYTE
 44549 00000E5A 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44550 00000E5E 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44551 00000E62 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44552 00000E66 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44553 00000E6A 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44554 00000E6E 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44555 00000E72 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44556 00000E76 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44557 00000E7A 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44558 00000E7E 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44559 00000E82 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44560 00000E86 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44561 00000E8A 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44562 00000E8E 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44563 00000E92 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44564 00000E96 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44565 00000E9A 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44566 00000E9E 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44567 00000EA2 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44568 00000EA6 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44569                                  
 44570                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44571                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44572                                  ;		db 14h,4,5,1
 44573                                  ;		db 15h,5,7,0FFh
 44574                                  ;		db 16h,4,5,1
 44575                                  ;		db 17h,0Bh,4,2
 44576                                  ;		db 18h,4,5,1
 44577                                  ;		db 19h,5,1,2
 44578                                  ;		db 1Ah,0Bh,7,2
 44579                                  ;		db 1Bh,0Bh,4,2
 44580                                  ;		db 1Ch,2,7,4
 44581                                  ;		db 1Dh,5,4,0FFh
 44582                                  ;		db 1Eh,5,4,0FFh
 44583                                  ;		db 1Fh,0Dh,4,0FFh
 44584                                  ;		db 20h,0Ah,2,2
 44585                                  ;		db 21h,0Ah,2,2
 44586                                  ;		db 22h,0Bh,7,2
 44587                                  ;		db 32h,9,3,3
 44588                                  ;		db 23h,7,4,1
 44589                                  ;		db 24h,1,4,5
 44590                                  ;		db 0FFh,0Dh,5,0FFh
 44591                                  
 44592                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44593                                  
 44594                                  ; ---------------------------------------------------------------------------
 44595                                  ;
 44596                                  ; We need to map old int 24 errors and device driver errors into the new set
 44597                                  ; of errors. The following table is indexed by the new errors
 44598                                  ;
 44599                                  ; ---------------------------------------------------------------------------
 44600                                  
 44601                                  ;Public  ErrMap24
 44602                                  ErrMap24: ; Label   BYTE
 44603 00000EAA 13                          DB  error_write_protect	; 0
 44604 00000EAB 14                          DB  error_bad_unit		; 1
 44605 00000EAC 15                          DB  error_not_ready		; 2
 44606 00000EAD 16                          DB  error_bad_command	; 3
 44607 00000EAE 17                          DB  error_CRC		; 4
 44608 00000EAF 18                          DB  error_bad_length	; 5
 44609 00000EB0 19                          DB  error_seek		; 6
 44610 00000EB1 1A                          DB  error_not_DOS_disk	; 7
 44611 00000EB2 1B                          DB  error_sector_not_found	; 8
 44612 00000EB3 1C                          DB  error_out_of_paper	; 9
 44613 00000EB4 1D                          DB  error_write_fault	; A
 44614 00000EB5 1E                          DB  error_read_fault	; B
 44615 00000EB6 1F                          DB  error_gen_failure	; C
 44616 00000EB7 1F                          DB  error_gen_failure	; D  RESERVED
 44617 00000EB8 1F                          DB  error_gen_failure	; E  RESERVED
 44618 00000EB9 22                          DB  error_wrong_disk	; F
 44619                                  
 44620                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44621                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44622                                  	
 44623                                  ErrMap24End: ; LABEL   BYTE
 44624                                  
 44625                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44626                                  
 44627                                  ; ---------------------------------------------------------------------------
 44628                                  
 44629                                  ; 27/04/2019 - Retro DOS v4.0
 44630                                  
 44631                                  FIRST_BUFF_ADDR:
 44632 00000EBA 0000                    	dw	0			; first buffer address               
 44633                                  SPECIAL_VERSION:
 44634 00000EBC 0000                    	dw	0			;AN006; used by INT 2F 47H
 44635                                  FAKE_COUNT:
 44636 00000EBE 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44637                                  OLD_FIRSTCLUS:
 44638 00000FBD 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44639                                  
 44640                                  ; ---------------------------------------------------------------------------
 44641                                  
 44642                                  ;smr; moved from TABLE segment in exec.asm
 44643                                  
 44644 00000FBF 0000                    exec_init_SP: dw 0
 44645 00000FC1 0000                    exec_init_SS: dw 0
 44646 00000FC3 0000                    exec_init_IP: dw 0
 44647 00000FC5 0000                    exec_init_CS: dw 0
 44648                                  
 44649                                  exec_signature:
 44650 00000FC7 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44651                                  exec_len_mod_512:
 44652 00000FC9 0000                    	dw	0	; low 9 bits of length
 44653                                  exec_pages:
 44654 00000FCB 0000                    	dw	0	; number of 512b pages in file
 44655                                  exec_rle_count:
 44656 00000FCD 0000                    	dw	0	; count of reloc entries
 44657                                  exec_par_dir:
 44658 00000FCF 0000                    	dw	0	; number of paragraphs before image
 44659                                  exec_min_BSS:
 44660 00000FD1 0000                    	dw	0	; minimum number of para of BSS
 44661                                  exec_max_BSS:
 44662 00000FD3 0000                    	dw	0	; max number of para of BSS
 44663                                  exec_SS:
 44664 00000FD5 0000                    	dw	0	; stack of image
 44665                                  exec_SP:
 44666 00000FD7 0000                    	dw	0	; SP of image
 44667                                  exec_chksum:
 44668 00000FD9 0000                    	dw	0	; checksum  of file (ignored)
 44669                                  exec_IP:
 44670 00000FDB 0000                    	dw	0	; IP of entry
 44671                                  exec_CS:
 44672 00000FDD 0000                    	dw	0	; CS of entry
 44673                                  exec_rle_table:
 44674 00000FDF 0000                    	dw	0	; byte offset of reloc table
 44675                                  
 44676                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44677                                  
 44678                                  ;smr; eom
 44679                                  
 44680                                  ; ---------------------------------------------------------------------------
 44681                                  
 44682                                  ;SR;
 44683                                  ; WIN386 instance table for DOS
 44684                                  
 44685                                  Win386_Info:
 44686 00000FE1 0300                    	db	3, 0
 44687 00000FE3 000000000000000000-     	dd	0, 0, 0
 44687 00000FEC 000000             
 44688 00000FEF [F30F]0000              	dw	Instance_Table, 0
 44689                                  
 44690                                  Instance_Table:
 44691 00000FF3 [2200]00000200          	dw	CONTPOS, 0, 2
 44692 00000FF9 [3200]00000400          	dw	BCON, 0, 4
 44693 00000FFF [F901]00000601          	dw	CARPOS, 0, 106h
 44694 00001005 [0003]00000100          	dw	CHARCO, 0, 1
 44695 0000100B [BF0F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44696 00001011 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44697 00001017 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44698 0000101D 00000000                	dw	0, 0
 44699                                  
 44700                                  ; M001; SR;
 44701                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44702                                  ; M001; some DOS variables. Note that the only really important variable in 
 44703                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44704                                  ; M001; which does not need to be done in DOS 5.0. 
 44705                                  
 44706                                  ; 29/12/2022
 44707                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 44708                                  
 44709                                  Win386_DOSVars:
 44710 00001021 05                      	db	5	;Major version 5 ; M001
 44711 00001022 00                      	db	0	;Minor version 0 ; M001
 44712 00001023 [EC05]                  	dw	SAVEDS	; M001
 44713 00001025 [EA05]                  	dw	SAVEBX	; M001
 44714 00001027 [2103]                  	dw	INDOS	; M001
 44715 00001029 [3E03]                  	dw	USER_ID	; M001
 44716 0000102B [1503]                  	dw	CritPatch ; M001
 44717 0000102D [8C00]                  	dw	UMB_HEAD ; M012
 44718                                  
 44719                                  ;SR;
 44720                                  ; Flag to indicate whether WIN386 is running or not
 44721                                  
 44722 0000102F 00                      IsWin386: db	0
 44723                                  
 44724                                  ;M018
 44725                                  ; This variable contains the path to the VxD device needed for Win386
 44726                                  
 44727 00001030 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44727 00001039 2E33383600         
 44728                                  
 44729                                  ;End WIN386 support
 44730                                  
 44731                                  ; ---------------------------------------------------------------------------
 44732                                  
 44733                                  ;SR;
 44734                                  ; These variables have been added for the special lie support for device
 44735                                  ;drivers.
 44736                                  ;
 44737                                  
 44738                                  DriverLoad:	
 44739 0000103E 01                      	db	1	;initialized to do special handling
 44740                                  BiosDataPtr:
 44741 0000103F 00000000                	dd	0
 44742                                  
 44743                                  ; 29/12/2022 - REetro DOS v4.1
 44744                                  %if 0
 44745                                  
 44746                                  ; 27/04/2019 - Retro DOS v4.0
 44747                                  ; 04/11/2022
 44748                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44749                                  
 44750                                  ;------------------------------------------------------------------------
 44751                                  ; Patch for Sidekick
 44752                                  ;
 44753                                  ; A documented method for finding the offset of the Errormode flag in the 
 44754                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44755                                  ; for the following sequence of instructions.
 44756                                  ;
 44757                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44758                                  ;
 44759                                  ; The Offset of Errormode flag is 0320h
 44760                                  ;
 44761                                  ;------------------------------------------------------------------------
 44762                                  
 44763                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44764                                  	db	075h, 0Ch			 ; jnz  NearLabel
 44765                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44766                                  	db	0CDh, 028h			 ; int  28h
 44767                                  
 44768                                  ;--------------------------------------------------------------------------
 44769                                  ; Patch for PortOfEntry - M036
 44770                                  ;
 44771                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44772                                  ; the offset of Errormode flag. The following patch is to support them in 
 44773                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44774                                  ;
 44775                                  ;---------------------------------------------------------------------------
 44776                                  
 44777                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44778                                  	db	075h, 037h			 ; jnz	NearLabel
 44779                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44780                                  
 44781                                  %endif ; 29/12/2022
 44782                                  
 44783                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44784                                  
 44785                                  ;--------------------------------------------------------------------------
 44786                                  
 44787                                  ;*** New FCB Implementation
 44788                                  ; This variable is used as a cache in the new FCB implementation to remember
 44789                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44790                                  
 44791 00001043 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44792                                  
 44793                                  ;DOSDATA ENDS
 44794                                  
 44795                                  ;============================================================================
 44796                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44797                                  ;============================================================================
 44798                                  ; 27/04/2019 - Retro DOS 4.0
 44799                                  
 44800                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44801                                  
 44802                                  ;---------------------------------------------------------------------------
 44803                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44804                                  ;----------------------------------------------------------------------------
 44805                                  	
 44806                                  	;db	90h
 44807                                  
 44808                                  	;EVEN
 44809 00001047 90                      align 2
 44810                                  
 44811                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44812                                  
 44813                                  DOSINTTABLE:	; LABEL	DWORD
 44814                                  
 44815                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44816                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44817                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44818                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44819                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44820                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44821                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44822                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44823                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44824                                  	
 44825 00001048 [6653]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44826 0000104C [E002]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44827 00001050 [0C03]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44828 00001054 [3F05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44829 00001058 [C605]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44830 0000105C [BA62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44831 00001060 [1507]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44832 00001064 [E702]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44833 00001068 [E602]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44834                                  
 44835 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 44836 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 44837                                  
 44838                                  ;-------------------------------------------------------------------------
 44839                                  ;
 44840                                  ; LOW MEM STUB:
 44841                                  ;
 44842                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44843                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44844                                  ; DOS load in HIMEM. Each entry point does this.
 44845                                  ;
 44846                                  ; 	1. if jmp to 8 has been patched out
 44847                                  ;	   2. if A20 OFF
 44848                                  ;	      3. Enable A20
 44849                                  ;	   4. else 
 44850                                  ;	      5. just go to dos entry
 44851                                  ;	   6. endif
 44852                                  ;	7. else
 44853                                  ;	   8. just go to dos entry
 44854                                  ;	9. endif
 44855                                  ;
 44856                                  ;--------------------------------------------------------------------------
 44857                                  
 44858                                  ; 27/04/2019 - Retro DOS v4.0
 44859                                  
 44860                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44861                                  
 44862                                  ;--------------------------------------------------------------------------
 44863                                  ;
 44864                                  ; DIVIDE BY 0 handler
 44865                                  ;
 44866                                  ;--------------------------------------------------------------------------
 44867                                  
 44868                                  ldivov:
 44869                                  	; The following jump, skipping the XMS calls will be patched to 
 44870                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44871                                  	; needed because the stub is installed even before the XMS driver
 44872                                  	; is loaded if the user specifies dos=high in the config.sys
 44873                                  i0patch:
 44874 00001070 EB03                    	jmp	short divov_cont	
 44875                                  
 44876 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44877                                  divov_cont:
 44878 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44879                                  
 44880                                  ;------------------------------------------------------------------------
 44881                                  ;
 44882                                  ; INT 20 Handler
 44883                                  ;
 44884                                  ; Here we do not have to set up the stack to return here as the abort call
 44885                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44886                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44887                                  ; will be restored then.
 44888                                  ;
 44889                                  ;-------------------------------------------------------------------------
 44890                                  
 44891                                  lquit:
 44892                                  	; The following jump, skipping the XMS calls will be patched to 
 44893                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44894                                  	; needed because the stub is installed even before the XMS driver
 44895                                  	; is loaded if the user specifies dos=high in the config.sys
 44896                                  i20patch:
 44897 0000107A EB03                    	jmp	short quit_cont	
 44898                                  
 44899 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44900                                  quit_cont:
 44901 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44902                                  
 44903                                  ;--------------------------------------------------------------------------
 44904                                  ;
 44905                                  ; INT 21 Handler
 44906                                  ;
 44907                                  ;--------------------------------------------------------------------------
 44908                                  
 44909                                  lcommand:
 44910                                  	; The following jump, skipping the XMS calls will be patched to 
 44911                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44912                                  	; needed because the stub is installed even before the XMS driver
 44913                                  	; is loaded if the user specifies dos=high in the config.sys
 44914                                  i21patch:
 44915 00001084 EB03                    	jmp	short command_cont	
 44916                                  
 44917 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44918                                  command_cont:
 44919 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44920                                  
 44921                                  ;------------------------------------------------------------------------
 44922                                  ;
 44923                                  ; INT 25 
 44924                                  ;
 44925                                  ;----------------------------------------------------------------------------
 44926                                  
 44927                                  labsdrd:
 44928                                  	; The following jump, skipping the XMS calls will be patched to 
 44929                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44930                                  	; needed because the stub is installed even before the XMS driver
 44931                                  	; is loaded if the user specifies dos=high in the config.sys
 44932                                  i25patch:
 44933 0000108E EB03                    	jmp	short absdrd_cont	
 44934                                  
 44935 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44936                                  absdrd_cont:
 44937 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44938                                  
 44939                                  ;-------------------------------------------------------------------------
 44940                                  ;
 44941                                  ; INT 26
 44942                                  ;
 44943                                  ;-----------------------------------------------------------------------
 44944                                  
 44945                                  labsdwrt:
 44946                                  	; The following jump, skipping the XMS calls will be patched to 
 44947                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44948                                  	; needed because the stub is installed even before the XMS driver
 44949                                  	; is loaded if the user specifies dos=high in the config.sys
 44950                                  i26patch:
 44951 00001098 EB03                    	jmp	short absdwrt_cont	
 44952                                  
 44953 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44954                                  absdwrt_cont:
 44955 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44956                                  
 44957                                  ;------------------------------------------------------------------------
 44958                                  ;
 44959                                  ; INT 27
 44960                                  ;
 44961                                  ;-----------------------------------------------------------------------
 44962                                  
 44963                                  lstay_resident:
 44964                                  	; The following jump, skipping the XMS calls will be patched to 
 44965                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44966                                  	; needed because the stub is installed even before the XMS driver
 44967                                  	; is loaded if the user specifies dos=high in the config.sys
 44968                                  i27patch:
 44969 000010A2 EB03                    	jmp	short sr_cont	
 44970                                  
 44971 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44972                                  sr_cont:
 44973 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44974                                  
 44975                                  ;-----------------------------------------------------------------------------
 44976                                  ;
 44977                                  ; INT 2f
 44978                                  ;
 44979                                  ;-------------------------------------------------------------------------
 44980                                  
 44981                                  lint2f:
 44982                                  	; The following jump, skipping the XMS calls will be patched to 
 44983                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44984                                  	; needed because the stub is installed even before the XMS driver
 44985                                  	; is loaded if the user specifies dos=high in the config.sys
 44986                                  i2fpatch:
 44987 000010AC EB03                    	jmp	short int2f_cont	
 44988                                  
 44989 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44990                                  int2f_cont:
 44991 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 44992                                  
 44993                                  ;-----------------------------------------------------------------------------
 44994                                  ;
 44995                                  ; CPM entry
 44996                                  ;
 44997                                  ;------------------------------------------------------------------------
 44998                                  
 44999                                  lcall_entry:
 45000                                  	; The following jump, skipping the XMS calls will be patched to 
 45001                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45002                                  	; needed because the stub is installed even before the XMS driver
 45003                                  	; is loaded if the user specifies dos=high in the config.sys
 45004                                  cpmpatch:
 45005 000010B6 EB03                    	jmp	short callentry_cont	
 45006                                  
 45007 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45008                                  callentry_cont:
 45009 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45010                                  
 45011                                  ;--------------------------------------------------------------------------
 45012                                  
 45013                                  lirett:
 45014 000010C0 CF                      	iret
 45015                                  
 45016                                  ;---------------------------------------------------------------------------
 45017                                  ;
 45018                                  ; LowIntXX:
 45019                                  ;
 45020                                  ; Interrupts from DOS that pass control to a user program must be done from
 45021                                  ; low memory, as the user program may change the state of the A20 line or
 45022                                  ; they may require that the A20 line be OFF. The following piece of code is
 45023                                  ; far call'd from the following places in DOS:
 45024                                  ;
 45025                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45026                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45027                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45028                                  ;
 45029                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45030                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45031                                  ; before doing the ints and then do a far junp back into DOS.
 45032                                  ;
 45033                                  ;---------------------------------------------------------------------------
 45034                                  
 45035 000010C1 00000000                DosRetAddr23:	dd	0
 45036 000010C5 00000000                DosRetAddr24:	dd	0
 45037 000010C9 00000000                DosRetAddr28:	dd	0
 45038                                  
 45039                                  	; Execute int 23h from low memory
 45040                                  LowInt23:
 45041                                  					; save the return address that is on
 45042                                  					; the stack
 45043 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45044 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45045                                  
 45046 000010D7 CD23                    	int	23h			; ctrl C
 45047                                  					; turn on A20 it has been turned OFF
 45048                                  					; by int 28/23/24 handler.
 45049                                  
 45050 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45051                                  
 45052 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45053                                  
 45054                                  
 45055                                  	; Execute int 24h from low memory
 45056                                  LowInt24:
 45057                                  					; save the return address that is on
 45058                                  					; the stack
 45059 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45060 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45061                                  
 45062 000010EB CD24                    	int	24h			; crit error
 45063                                  					; turn on A20 it has been turned OFF
 45064                                  					; by int 28/23/24 handler.
 45065                                  
 45066 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45067                                  
 45068 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45069                                  
 45070                                  
 45071                                   
 45072                                  	; Execute int 28h from low memory
 45073                                  LowInt28:
 45074 000010F5 CD28                    	int	28h			; idle int
 45075                                  					; turn on A20 it has been turned OFF
 45076                                  					; by int 28/23/24 handler.
 45077                                  
 45078 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45079                                  
 45080 000010FA CB                      	retf
 45081                                  
 45082                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45083                                  
 45084                                  ;-------------------------------------------------------------------------
 45085                                  ;
 45086                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45087                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45088                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45089                                  ; This is so because exepac'd programs rely on address wrap.
 45090                                  ;
 45091                                  ;------------------------------------------------------------------------- 
 45092                                  
 45093                                  disa20_xfer:
 45094 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45095                                  
 45096                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45097                                  
 45098                                  	; DS:SI points to entry point
 45099                                  	; AX:DI points to initial stack
 45100                                  	; DX has PDB pointer
 45101                                  	; BX has initial AX value
 45102                                  
 45103 000010FE FA                      	cli
 45104 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45105                                  
 45106 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45107 00001107 89FC                    	mov	SP,DI			; and SP
 45108 00001109 FB                      	sti
 45109                                  
 45110 0000110A 1E                      	push	DS			; fake long call to entry
 45111 0000110B 56                      	push	SI
 45112 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45113 0000110E 8EDA                    	mov	DS,DX
 45114 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45115 00001112 CB                      	retf
 45116                                  
 45117                                  ;-------------------------------------------------------------------------
 45118                                  ;
 45119                                  ; M003:
 45120                                  ;
 45121                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45122                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45123                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45124                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45125                                  ; more info.	
 45126                                  ;
 45127                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45128                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45129                                  ; stack to avoid additional stack overhead for the user.
 45130                                  ;
 45131                                  ; -------------------------------------------------------------------------
 45132                                  
 45133                                  disa20_iret:
 45134 00001113 E82700                  	call	XMMDisableA20
 45135 00001116 FE0E[2103]              	dec	byte [INDOS]
 45136 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45137 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45138 00001122 89E5                    	mov	BP,SP
 45139                                  	;mov	[BP+user_env.user_AX],AL
 45140 00001124 884600                  	mov	[bp],al
 45141 00001127 A1[F205]                	mov	AX,[NSP]
 45142 0000112A A3[8405]                	mov	[USER_SP],AX
 45143 0000112D A1[F005]                	mov	AX,[NSS]
 45144 00001130 A3[8605]                	mov	[USER_SS],AX
 45145                                  
 45146 00001133 58                      	pop	AX			; restore user regs
 45147 00001134 5B                      	pop	BX
 45148 00001135 59                      	pop	CX
 45149 00001136 5A                      	pop	DX
 45150 00001137 5E                      	pop	SI
 45151 00001138 5F                      	pop	DI
 45152 00001139 5D                      	pop	BP
 45153 0000113A 1F                      	pop	DS
 45154 0000113B 07                      	pop	ES
 45155 0000113C CF                      	iret
 45156                                  
 45157                                  ;**************************************************************************
 45158                                  ;***	XMMDisableA20 - switch 20th address line			      
 45159                                  ;									      
 45160                                  ;	This routine is used to disable the 20th address line in 	      
 45161                                  ;	the system using XMM calls.					      
 45162                                  ;									      
 45163                                  ;	ENTRY	none		;ds = _DATA				      
 45164                                  ;	EXIT	A20 line disabled					      
 45165                                  ;	USES	NOTHING					      
 45166                                  ;									      
 45167                                  ;**************************************************************************
 45168                                  
 45169                                  XMMDisableA20:
 45170 0000113D 53                      	push	bx
 45171 0000113E 50                      	push	ax
 45172                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45173 0000113F B406                    	mov	ah,6
 45174 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45175 00001146 58                      	pop	ax
 45176 00001147 5B                      	pop	bx
 45177 00001148 C3                      	retn
 45178                                  
 45179                                  ; The entry point in the BIOS XMS driver is defined here.
 45180                                  
 45181                                  XMMcontrol:
 45182 00001149 00000000                	dd	0
 45183                                  
 45184                                  ;--------------------------------------------------------------------------
 45185                                  ;
 45186                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45187                                  ;									      
 45188                                  ;	This routine is used to query the A20 state in		 	      
 45189                                  ;	the system using XMM calls.					      
 45190                                  ;									      
 45191                                  ;	ENTRY: none		
 45192                                  ;
 45193                                  ;	EXIT : A20 will be ON
 45194                                  ;		
 45195                                  ; 	USES : NONE								      
 45196                                  ;									      
 45197                                  ;--------------------------------------------------------------------------
 45198                                  
 45199                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45200 0000114D 8000                    	dw	00080h
 45201 0000114F 0000                    	dw	00000h
 45202                                  
 45203                                  HighMemory:	; label dword
 45204 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45205 00001153 FFFF                    	dw	0FFFFh
 45206                                  
 45207                                  EnsureA20ON:
 45208 00001155 9C                      	pushf
 45209 00001156 1E                      	push    ds
 45210 00001157 06                      	push	es
 45211 00001158 51                      	push	cx
 45212 00001159 56                      	push	si
 45213 0000115A 57                      	push	di
 45214                                  
 45215 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45216 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45217 00001165 B90400                  	mov	cx,4
 45218 00001168 FC                      	cld
 45219 00001169 F3A7                    	repe    cmpsw
 45220                                  
 45221 0000116B 7407                    	jz	short EA20_OFF
 45222                                  EA20_RET:
 45223 0000116D 5F                      	pop	di
 45224 0000116E 5E                      	pop	si
 45225 0000116F 59                      	pop	cx
 45226 00001170 07                      	pop	es
 45227 00001171 1F                      	pop	ds
 45228 00001172 9D                      	popf
 45229 00001173 C3                      	retn
 45230                                  
 45231                                  EA20_OFF:
 45232                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45233                                  	; NOTE: ints are disabled at this point.
 45234                                  
 45235 00001174 53                      	push	bx
 45236 00001175 50                      	push	ax
 45237                                  
 45238 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45239 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45240 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45241 00001181 8CC8                    	mov	ax,cs
 45242 00001183 8ED0                    	mov	ss,ax
 45243 00001185 BC[A007]                	mov	sp,AUXSTACK
 45244                                  					; ss:sp -> DOSDATA:AuxStack
 45245                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45246 00001188 B405                    	mov	ah,5
 45247 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45248 0000118F 09C0                    	or	ax,ax
 45249 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45250                                  
 45251 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45252 00001197 8ED0                    	mov	ss,ax
 45253 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45254                                  
 45255 0000119E 58                      	pop	ax
 45256 0000119F 5B                      	pop	bx
 45257                                  
 45258 000011A0 EBCB                    	jmp	short EA20_RET
 45259                                  
 45260                                  XMMerror:				; M006 - Start
 45261 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45262 000011A4 CD10                    	int	10h
 45263 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45264 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45265 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45266 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45267 000011AE CD10                    	int	10h
 45268                                  XMMcont:
 45269 000011B0 B405                    	mov	ah,05h			; set display page
 45270 000011B2 30C0                    	xor	al,al			; page 0
 45271 000011B4 CD10                    	int	10h
 45272                                  	
 45273 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45274 000011B9 0E                      	push	cs
 45275 000011BA 1F                      	pop	ds
 45276 000011BB FC                      	cld				; clear direction flag
 45277                                  XMMprnt:
 45278 000011BC AC                      	lodsb
 45279 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45280 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45281 000011C1 B40E                    	mov	ah,0Eh
 45282 000011C3 BB0700                  	mov	bx,7
 45283 000011C6 CD10                    	int	10h
 45284 000011C8 EBF2                    	jmp	short XMMprnt
 45285                                  
 45286                                  XMMStall:
 45287 000011CA FB                      	sti				; allow the user to warm boot
 45288 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45289                                  
 45290                                  ;---------------------------------------------------------------------------
 45291                                  
 45292                                  ; 27/04/2019 - Retro DOS v4.0
 45293                                  
 45294                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45295                                  ALTAH	equ 0Ch
 45296                                  
 45297                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45298                                  ;table was different for this. Segments will be patched in at init time.
 45299                                  
 45300                                  OldInstanceJunk:
 45301 000011CD 7000                    	dw	70h	;segment of BIOS
 45302 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45303 000011D1 0600                    	dw	6	;5 instance items
 45304                                  
 45305                                  	;dw	0,offset dosdata:contpos, 2
 45306                                  	;dw	0,offset dosdata:bcon, 4
 45307                                  	;dw	0,offset dosdata:carpos,106h
 45308                                  	;dw	0,offset dosdata:charco, 1
 45309                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45310                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45311                                  
 45312 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45313 000011D9 0000[3200]0400          	dw	0,BCON,4
 45314 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45315 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45316 000011EB 0000[BF0F]2200          	dw	0,exec_init_SP,34
 45317 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45318                                  
 45319                                  ;---------------------------------------------------------------------------
 45320                                  
 45321                                  ; M021-
 45322                                  ;
 45323                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45324                                  ; 	takes control of the HMA. When running, this word is a reliable
 45325                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45326                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45327                                  
 45328                                  DosHasHMA:
 45329 000011F7 00                      	db	0
 45330                                  FixExePatch:
 45331 000011F8 0000                    	dw	0		; M012
 45332                                  ; 28/12/2022 - Retro DOS v4.1
 45333                                  ;RationalPatchPtr:
 45334                                  ;	dw	0		; M012
 45335                                  
 45336                                  ; End M021
 45337                                  
 45338                                  ;---------------------------------------------------------------------------
 45339                                  
 45340                                  ; 28/12/2022 - Retro DOS v4.1
 45341                                  %if 0
 45342                                  ; M020 Begin
 45343                                  
 45344                                  RatBugCode:	; proc	far
 45345                                  	push	cx
 45346                                  	mov	cx,[10h]
 45347                                  rbc_loop:
 45348                                  	;loop	$
 45349                                  	loop	rbc_loop
 45350                                  	pop	cx
 45351                                  	retf
 45352                                  		
 45353                                  ; M020 End
 45354                                  %endif
 45355                                  
 45356                                  ;---------------------------------------------------------------------------
 45357                                  	
 45358                                  UmbSave1:
 45359                                  	;db	11 dup (?)	; M023
 45360 000011FA 00<rep Bh>              	times	11 db 0	
 45361                                  
 45362                                  ; DOSDATA:122Ah
 45363                                  
 45364                                  Mark3:	; label byte
 45365                                  
 45366                                  ;IF2
 45367                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45368                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45369                                  ;	ENDIF
 45370                                  ;ENDIF
 45371                                  
 45372                                  ;############################################################################
 45373                                  ;
 45374                                  ; ** HACK FOR DOS 4.0 REDIR **
 45375                                  ;
 45376                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45377                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45378                                  ; COUNTRY_CDPG if it can. 
 45379                                  ;
 45380                                  ; MARK3 SHOULD NOT BE > 122AH 
 45381                                  ;
 45382                                  ; As of 9/6/90, this area is FULL!
 45383                                  ;
 45384                                  ;############################################################################
 45385                                   
 45386                                  	;ORG	0122Ah
 45387                                  
 45388                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45389                                  
 45390                                  ; The following table is used for DOS 3.3
 45391                                  ;DOS country and code page information is defined here for DOS 3.3.
 45392                                  ;The initial value for ccDosCountry is 1 (USA).
 45393                                  ;The initial value for ccDosCodepage is 850.
 45394                                  
 45395                                  ; country and code page information
 45396                                  ; ---------------------------------------------------------------------------
 45397                                  COUNTRY_CDPG:	; label  byte
 45398 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45399 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45399 00001216 53595300           
 45400                                  	;db   51 dup (?)
 45401 0000121A 00<rep 33h>             	times 51 db 0
 45402                                  ; ------------------------------------------------<MSKK01>-------------------
 45403                                  ;ifdef	DBCS
 45404                                  ;  ifdef JAPAN
 45405                                  ;	dw   932			; system code page id (JAPAN)
 45406                                  ;  endif
 45407                                  ;  ifdef TAIWAN
 45408                                  ;	dw   938			; system code page id (TAIWAN)
 45409                                  ;  endif
 45410                                  ;  ifdef KOREA
 45411                                  ;	dw   934			; system code page id (KOREA IBM)
 45412                                  ;  endif
 45413                                  ;else
 45414 0000124D B501                    	dw   437			; system code page id
 45415                                  ;endif
 45416                                  ; ------------------------------------------------<MSKK01>-------------------
 45417 0000124F 0600                    	dw   6				; number of entries
 45418 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45419 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45420 00001254 0000                    	dw   0				; segment of poiter
 45421 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45422 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45423 00001259 0000                    	dw   0				; segment of poiter
 45424 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45425 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45426 0000125E 0000                    	dw   0				; segment of poiter
 45427 00001260 06                      	db   SetCollate	; 6		; collate type
 45428 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45429 00001263 0000                    	dw   0				; segment of poiter
 45430 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45431 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45432 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45433 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45434 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45435                                  ; ------------------------------------------------<MSKK01>-------------------
 45436                                  ;ifdef	DBCS
 45437                                  ;	...... 
 45438                                  ;else
 45439 0000126D 0100                    	dw   1				; USA country id
 45440 0000126F B501                    	dw   437			; USA system code page id
 45441 00001271 0000                    	dw   0 				; date format
 45442 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45443 00001278 2C00                    	db   ',',0			; thousand separator
 45444 0000127A 2E00                    	db   '.',0			; decimal separator
 45445 0000127C 2D00                    	db   '-',0			; date separator
 45446 0000127E 3A00                    	db   ':',0			; time separator
 45447 00001280 00                      	db   0				; currency format flag
 45448 00001281 02                      	db   2				; # of digits in currency
 45449 00001282 00                      	db   0 				; time format
 45450 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45451 00001285 0000                    	dw   0				; segment of entry point
 45452 00001287 2C00                    	db   ',',0			; data list separator
 45453 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45453 00001292 00                 
 45454                                  ;endif
 45455                                  ; ------------------------------------------------<MSKK01>-------------------
 45456                                  
 45457                                  ; 27/04/2019 - Retro DOS v4.0
 45458                                  
 45459                                  ;include msdos.cl2			; XMMERRMSG
 45460                                  
 45461                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45462                                  
 45463                                  XMMERRMSG:
 45464 00001293 0D0A                    	db	0Dh,0Ah
 45465 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45465 0000129E 617265204572726F72-
 45465 000012A7 0D0A24             
 45466                                  
 45467                                  ; DOSDATA ends
 45468                                  
 45469                                  ; 05/11/2022
 45470                                  ;----------------------------------------------------------------------------
 45471                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45472                                  ;----------------------------------------------------------------------------
 45473                                  
 45474                                  ; 28/12/2022 - Retro DOS v4.1
 45475                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 45476                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 45477                                  ;----------------------------------------------------------------------------
 45478                                  %if 0
 45479                                  ;----------------------------------------------------------------------------
 45480                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45481                                  
 45482                                  ;============================================================================
 45483                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45484                                  ;============================================================================
 45485                                  ; 27/04/2019 - Retro DOS 4.0
 45486                                  
 45487                                  ;DOSDATA Segment
 45488                                  
 45489                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45490                                  
 45491                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45492                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45493                                  
 45494                                  ; first and second DOS patches
 45495                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45496                                  ;
 45497                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45498                                  ;	DVRDLP:
 45499                                  ;	DVWRTLP:
 45500                                  ;
 45501                                  ;
 45502                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45503                                  ;	lds	si,si+7 				  ; sf_devptr
 45504                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45505                                  
 45506                                  DOSP1_ID:	db	036h,0C5h,036h
 45507                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45508                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45509                                  
 45510                                  		db	90h, 90h
 45511                                  
 45512                                  DOSP12_ID:	db	036h,0C5h,036h
 45513                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45514                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45515                                  
 45516                                  ; DOSDATA:12E3h
 45517                                  
 45518                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45519                                  ;
 45520                                  ; Code in disk.asm, 1 location
 45521                                  ;	GETBUF:
 45522                                  ;
 45523                                  ; 051h	push	cx	<- begin special int28 mode
 45524                                  ;	push	es
 45525                                  ;	push	di
 45526                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45527                                  ;	call	????	; $STD_CON_STRING_INPUT
 45528                                  ;	pop	di
 45529                                  ;	pop	es
 45530                                  ; 059h	pop	cx	<- end special int28 mode
 45531                                  
 45532                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 45533                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45534                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45535                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45536                                  DOSP4_ID:	db	059h			; pop cx
 45537                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45538                                  	
 45539                                  ; DOSDATA:12EFh
 45540                                  
 45541                                  ; Fifth DOS patch - System call 40h (Write) to console
 45542                                  ;
 45543                                  ; Code in disk.asm, 1 location
 45544                                  ;
 45545                                  ;		push	cx
 45546                                  ;      WRCONLP: lodsb
 45547                                  ;		cmp	al,1Ah
 45548                                  ;		jz	????
 45549                                  ;		call	????	<- "simulate" int28 event
 45550                                  ;		loop	WRCONLP
 45551                                  ;      CONEOF:	pop	ax
 45552                                  
 45553                                  DOSP5_ID:	db	051h			; push cx
 45554                                  		db	0ACh,03Ch,01Ah,074h,005h
 45555                                  		db	0E8h			; call
 45556                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45557                                  
 45558                                  ; DOSDATA:12F6h
 45559                                  
 45560                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45561                                  ;
 45562                                  ; Code in disp.asm, 1 location
 45563                                  ;
 45564                                  ;
 45565                                  ;	mov [SaveDS],ds
 45566                                  ;	mov [SaveBX],bx
 45567                                  ;	mov bx,cs
 45568                                  ;	mov ds,bx
 45569                                  ;	inc [indos]
 45570                                  ;	xor ax,ax
 45571                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45572                                  
 45573                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45574                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45575                                  		db	02Eh,089h,01Eh
 45576                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45577                                  		db	08Ch,0CBh		; mov bx,cs
 45578                                  		db	08Eh,0DBh		; mov ds,bx
 45579                                  		db	0FEh,006h
 45580                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45581                                  		db	033h,0C0h		; xor ax,ax
 45582                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45583                                  
 45584                                  ; DOSDATA:130Ah
 45585                                  
 45586                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45587                                  ;
 45588                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45589                                  ;
 45590                                  ;
 45591                                  ;
 45592                                  ;	push	ax
 45593                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45594                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45595                                  ;	pop	ax
 45596                                  ;	jz	????
 45597                                  
 45598                                  DOSP8_ID:	db	050h			; push ax
 45599                                  		db	036h,0A1h
 45600                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45601                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45602                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45603                                  		db	02Fh,058h		; pop  ax
 45604                                  
 45605                                  ; DOSDATA:1314h
 45606                                  
 45607                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45608                                  ;
 45609                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45610                                  ;   a yeild when a character is not ready to be read.
 45611                                  ;
 45612                                  ; Code in disk.asm, 3 locations
 45613                                  ;
 45614                                  ;   DVRDRAW:
 45615                                  ;	    PUSH    ES
 45616                                  ;	    POP     DS
 45617                                  ;   ReadRawRetry:				<- Patch 10
 45618                                  ;	    MOV     BX,DI
 45619                                  ;	    XOR     AX,AX			<- Reenter #2
 45620                                  ;	    MOV     DX,AX
 45621                                  ;	    call    SETREAD
 45622                                  ;	    PUSH    DS				<- Reenter #1
 45623                                  ;	    LDS     SI,[THISSFT]
 45624                                  ;	    call    DEVIOCALL
 45625                                  ;	    MOV     DX,DI
 45626                                  ;	    MOV     AH,86H
 45627                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45628                                  ;	    TEST    DI,STERR
 45629                                  ;	    JZ	    CRDROK
 45630                                  ;	    call    CHARHARD
 45631                                  ;	    MOV     DI,DX
 45632                                  ;	    OR	    AL,AL
 45633                                  ;	    JZ	    CRDROK
 45634                                  ;	    CMP     AL,3
 45635                                  ;	    JZ	    CRDFERR
 45636                                  ;	    POP     DS
 45637                                  ;	    JMP     ReadRawRetry
 45638                                  ;
 45639                                  ;   CRDFERR:
 45640                                  ;	    POP     DI				<- Patch 11
 45641                                  ;   DEVIOFERR:
 45642                                  ;	    LES     DI,[THISSFT]
 45643                                  ;	    jmp     SET_ACC_ERR_DS
 45644                                  ;
 45645                                  ;   CRDROK:
 45646                                  ;	    POP     DI				<- Patch 12
 45647                                  ;	    MOV     DI,DX
 45648                                  ;	    ADD     DI,[CALLSCNT]
 45649                                  ;	    JMP     SHORT ENDRDDEVJ3
 45650                                  
 45651                                  DOSP10_ID:		db	006H,01FH
 45652                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45653                                  DOSP10_LOC:		db	08BH,0DFH
 45654                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45655                                  			db	033H,0C0H,08BH,0D0H,0E8H
 45656                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45657                                  			db	0DFH,00EH
 45658                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45659                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45660                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45661                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45662                                  			db	009H,003H
 45663                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45664                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45665                                  			db	01FH,0EBH,0CFH
 45666                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45667                                  			db	05FH
 45668                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45669                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45670                                  
 45671                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45672                                  			db	05FH,08BH,0FAH
 45673                                  ; DOSDATA:1353h
 45674                                  
 45675                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45676                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45677                                  ;
 45678                                  ;	    Sets focus to current VM so user can see fatal message.
 45679                                  ;
 45680                                  ;
 45681                                  ;	l0: lodsb		<- Setfocus here
 45682                                  ;	    cmp al, '$'
 45683                                  ;	    je l1
 45684                                  ;	    mov bl, 7
 45685                                  ;	    mov ah, 0Eh
 45686                                  ;	    int 10h
 45687                                  ;	    jmp l0
 45688                                  ;	l1: jmp $
 45689                                  
 45690                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 45691                                  		db	03Ch,024h		;     cmp al, '$'
 45692                                  		db	074h,008h		;     je l1
 45693                                  		db	0B3h,007h		;     mov bl, 7
 45694                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 45695                                  		db	0CDh,010h		;     int 10h
 45696                                  		db	0EBh,0F3h		;     jmp l0
 45697                                  		db	0EBh,0FEh		; l1: jmp $
 45698                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45699                                  
 45700                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45701                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45702                                  
 45703                                  ; 06/12/2022
 45704                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45705                                  
 45706                                  ; DOSDATA ends
 45707                                  
 45708                                  ;============================================================================
 45709                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45710                                  ;============================================================================
 45711                                  ; 27/04/2019 - Retro DOS 4.0
 45712                                  
 45713                                  ;mpatch.asm -- holds data patch location for callouts 
 45714                                  ; -- allocate cluster in rom.asm
 45715                                  ;
 45716                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45717                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45718                                  ; cluster allocation, however it can be expanded to be used by other
 45719                                  ; patches. This is important since we have an easy-access pointer to
 45720                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45721                                  ; only patch out a far call/retf, so any space after that could be
 45722                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45723                                  ; to call out here.
 45724                                  ;
 45725                                  ; Currently, we allocate only the minimum space required for the 6
 45726                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45727                                  ; to reserve space here if your new data will be position dependent
 45728                                  ; and would prohibit growing of this table.
 45729                                  ;       
 45730                                  ;history	-	created 8-7-92 by scottq
 45731                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45732                                  ;
 45733                                  ;Exported Functions
 45734                                  ;==================
 45735                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45736                                  
 45737                                  ; DosData Segment
 45738                                  
 45739                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45740                                  
 45741                                  ; ---------------------------------------------------------------------------
 45742                                  
 45743                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45744                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45745                                  ; greater). Added to this file because it needed to be somewhere and is
 45746                                  ; 'patch' related.
 45747                                  
 45748                                  Rational386PatchPtr:
 45749                                  	dw	0	; points to patch routine or RET instr.
 45750                                  ; ---------------------------------------------------------------------------
 45751                                  
 45752                                  MagicPatch:
 45753                                  ;MagicPatch proc far
 45754                                          retf            ;default is to just return to allocate
 45755                                          nop             ;however, this code will be patched
 45756                                          nop             ;by magicdrv.sys to
 45757                                          nop             ; call far ?:?     
 45758                                          nop             ; retf or perhaps just jmp far
 45759                                          nop             ;retf/nop take one byte, so we need six instructions
 45760                                                          ;for 6 byte patch
 45761                                  ;MagicPatch endp
 45762                                  
 45763                                  ; ---------------------------------------------------------------------------
 45764                                  
 45765                                  ;DosData Ends
 45766                                  
 45767                                  ; DOSDATA:136Ah
 45768                                  
 45769                                  ;----------------------------------------------------------------------------
 45770                                  
 45771                                  ;DOSDATALAST SEGMENT
 45772                                  
 45773                                  ; 29/04/2019 - Retro DOS v4.0
 45774                                  
 45775                                  ;----------------------------------------------------------------------------
 45776                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45777                                  
 45778                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45779                                  
 45780                                  ;align 16
 45781                                  
 45782                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45783                                  
 45784                                  ;----------------------------------------------------------------------------
 45785                                  
 45786                                  %endif	; 05/11/2022
 45787                                  
 45788                                  ; 05/12/2022
 45789                                  ;MSDAT001E:	; label byte
 45790                                  
 45791                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45792                                  DOSDATAEND equ $
 45793                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45794                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45795                                  
 45796                                  ;DOSDATALAST ENDS
 45797                                  
 45798                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45799                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45800                                  ;============================================================================
 45801                                  ;	END
 45802                                  ;============================================================================
 45803                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45804                                  ; -----------------------------
 45805                                  ; MAY 2019, ISTANBUL - TURKIYE.
