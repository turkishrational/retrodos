     1                                  ;*****************************************************************************
     2                                  ; MSDOS5.BIN (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/07/2024 - Retro DOS v4.1 ((Previous: 07/07/2024))
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos5.s -l msdos5.lst -o MSDOS5.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    27                                  
    28                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    29                                  ;	(as included binary, 'MSDOS5.BIN') 
    30                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    31                                  ;	
    32                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    33                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    34                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    35                                        
    36                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    37                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    38                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    39                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    40                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    41                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    42                                  
    43                                  ;=============================================================================
    44                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    45                                  ;-----------------------------------------------------------------------------
    46                                  
    47                                  ; MSDOS 6.0 Kernel source files:
    48                                  ;	MSDATA.ASM, 
    49                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    50                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    51                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    52                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    53                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    54                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    55                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    56                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    57                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    58                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    59                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    60                                  ;
    61                                  ; MSDOS 2.0 Kernel source files:
    62                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    63                                  ;	MSCODE.ASM
    64                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    65                                  
    66                                  ;============================================================================
    67                                  ; DOSLINK
    68                                  ;============================================================================
    69                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    70                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    71                                  ;stdio time xenix xenix2
    72                                  
    73                                  ;============================================================================
    74                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    75                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    76                                  ;============================================================================
    77                                  ;
    78                                  ; ###########################################################################
    79                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    80                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    81                                  ; #			 Licensed to: Freeware version			    #
    82                                  ; ###########################################################################
    83                                  ;
    84                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    85                                  
    86                                  ; ---------------------------------------------------------------------------
    87                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    88                                  ; Format      :	Binary file
    89                                  ;============================================================================
    90                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
    91                                  ;----------------------------------------------------------------------------
    92                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
    93                                  
    94                                  ;============================================================================
    95                                  ; MSDOS.ASM
    96                                  ;============================================================================
    97                                  
    98                                  ;TITLE   Standard MSDOS
    99                                  ;NAME    MSDOS_2
   100                                  
   101                                  ; Number of disk I/O buffers
   102                                  
   103                                  ;	INCLUDE STDSW.ASM
   104                                  ;       INCLUDE MSHEAD.ASM
   105                                  ;       INCLUDE MSDATA.ASM
   106                                  
   107                                  ;	END
   108                                  
   109                                  ;============================================================================
   110                                  ; STDSW.ASM
   111                                  ;============================================================================
   112                                  
   113                                  TRUE    EQU     0FFFFH
   114                                  FALSE   EQU     ~TRUE ; NOT TRUE
   115                                  
   116                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   117                                  ; version of the operating system
   118                                  ;MSVER   EQU	false
   119                                  ;IBM     EQU	true
   120                                  ;WANG    EQU	FALSE
   121                                  ;ALTVECT EQU	FALSE
   122                                  
   123                                  ; Set this switch to cause DOS to move itself to the end of memory
   124                                  ;HIGHMEM EQU     FALSE
   125                                  
   126                                  ;	IF      IBM
   127                                  ESCCH    EQU	 0			;character to begin escape seq.
   128                                  CANCEL   EQU	 27			;Cancel with escape
   129                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   130                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   131                                  ZEROEXT  EQU	TRUE
   132                                  ;       ELSE
   133                                  ;       IF      WANG			;Are we assembling for WANG?
   134                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   135                                  ;       ELSE
   136                                  ;ESCCH	 EQU	1BH
   137                                  ;       ENDIF
   138                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   139                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   140                                  					;and off if not WANG
   141                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   142                                  					;and off
   143                                  ;ZEROEXT EQU	TRUE
   144                                  ;        ENDIF
   145                                  
   146                                  ;============================================================================
   147                                  ; MSHEAD.ASM
   148                                  ;============================================================================
   149                                  
   150                                  ;--------------------------------------------------------------
   151                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   152                                  ;--------------------------------------------------------------
   153                                  
   154                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   155                                  ;        by Microsoft MSDOS development group:
   156                                  ;           Tim Paterson (Ret.)
   157                                  ;           Aaron Reynolds
   158                                  ;           Nancy Panners (Parenting)
   159                                  ;           Mark Zbikowski
   160                                  ;           Chris Peters (BIOS) (ret.)
   161                                  
   162                                  ; ****************** Revision History *************************
   163                                  ;          >> EVERY change must noted below!! <<
   164                                  ;
   165                                  ; 0.34 12/29/80 General release, updating all past customers
   166                                  ; 0.42 02/25/81 32-byte directory entries added
   167                                  ; 0.56 03/23/81 Variable record and sector sizes
   168                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   169                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   170                                  ; 0.75 04/17/81 Improve and correct buffer handling
   171                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   172                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   173                                  ; 1.00 04/28/81 Renumber for general release
   174                                  ; 1.01 05/12/81 Fix bug in `STORE'
   175                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   176                                  ;               RENAME fix, general cleanup
   177                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   178                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   179                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   180                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   181                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   182                                  ;               of smaller improvements
   183                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   184                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   185                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   186                                  ;               zero extent field in IBM version (back to 1.01!)
   187                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   188                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   189                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   190                                  ;               is searched first when possible to minimize I/O
   191                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   192                                  ;               full sector write when file is growing
   193                                  ;      03/09/82 Multiple I/O buffers
   194                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   195                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   196                                  ;               must invalidate all buffers (disk and directory).
   197                                  ; 1.27 03/31/82 Installable device drivers
   198                                  ;                 Function call 47 - Get pointer to device table list
   199                                  ;                 Function call 48 - Assign CON AUX LIST
   200                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   201                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   202                                  ;               call entries.  Most CS relative references changed to SS
   203                                  ;               relative with an eye toward putting a portion of the DOS in
   204                                  ;               ROM.  DOS source also broken into header, data and code pieces
   205                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   206                                  ;               return the current values.
   207                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   208                                  ;               call to return flag location (call 29)
   209                                  ;      04/15/82 Volume ID attribute added
   210                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   211                                  ;               avoid a CS relative reference.
   212                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   213                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   214                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   215                                  ;               call 49.
   216                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   217                                  ;               address of DPB
   218                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   219                                  ;               writting to console device via file I/O.  Added a console
   220                                  ;               output attribute to devices.
   221                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   222                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   223                                  ;               as devices....  pipes, redirection now possible
   224                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   225                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   226                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   227                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   228                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   229                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   230                                  ;               out back about 1.27 or so (oops).  ARR
   231                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   232                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   233                                  ;               RMDIR Xenix calls
   234                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   235                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   236                                  ;               Frees up lots of memory.
   237                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   238                                  ;               system buffers
   239                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   240                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   241                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   242                                  ;               changed to set file handle environment.
   243                                  ; 2.00 08/01/82 Number for IBM release
   244                                  ;      01/19/83 No environ bug in EXEC
   245                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   246                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   247                                  ;      01/27/83 Growcnt fixed for 32-bits
   248                                  ;      01/27/83 Find-first problem after create
   249                                  ; 2.01 02/17/83 International DOS
   250                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   251                                  ;               an IBM PC
   252                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   253                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   254                                  ; 2.10 03/09/83 Start of NETWORK support
   255                                  ;		New Buffer structure
   256                                  ;		New Sytem file table structure
   257                                  ;		FCB moved to internal representation
   258                                  ;		DOS re-organized
   259                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   260                                  ;		device interface.
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 2.50 09/12/83 More network stuff
   264                                  ;
   265                                  ; *************************************************************
   266                                  
   267                                  ; ----------------------------------------------------------------------------
   268                                  ; EQUATES
   269                                  
   270                                  ; Interrupt Entry Points:
   271                                  
   272                                  ; INTBASE:      ABORT
   273                                  ; INTBASE+4:    COMMAND
   274                                  ; INTBASE+8:    BASE EXIT ADDRESS
   275                                  ; INTBASE+C:    CONTROL-C ABORT
   276                                  ; INTBASE+10H:  FATAL ERROR ABORT
   277                                  ; INTBASE+14H:  BIOS DISK READ
   278                                  ; INTBASE+18H:  BIOS DISK WRITE
   279                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   280                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   281                                  ; INTBASE+40H:  Long jump to CALL entry point
   282                                  
   283                                  ENTRYPOINTSEG   EQU     0Ch
   284                                  MAXDIF          EQU     0FFFh
   285                                  SAVEXIT         EQU     10
   286                                  ; 06/05/2019
   287                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   288                                  
   289                                         ; INCLUDE DOSSYM.ASM
   290                                         ; INCLUDE DEVSYM.ASM
   291                                  
   292                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   293                                  ; PAGE
   294                                  ; There are three kinds of context resets that can occur during normal DOS
   295                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   296                                  ; be handles in a clean fashion that allows nested executions along with the
   297                                  ; ability to trap one's own errors.
   298                                  ;
   299                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   300                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   301                                  ;           follows:
   302                                  ;
   303                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   304                                  ;           Save it in static memory.
   305                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   306                                  ;
   307                                  ;           The interrupt service routine must preserve all registers and
   308                                  ;           return carry set iff the operation is to be aborted (via abort
   309                                  ;           system call), otherwise, carry is reset and the operation is
   310                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   311                                  ;           RESULTS.
   312                                  ;
   313                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   314                                  ;           restore INT int_ctrl_c from the saved vector.
   315                                  ;
   316                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   317                                  ;           also preserve registers and return one of three values in AL: 0 and
   318                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   319                                  ;           himself is not to issue the abort, rather, the dos will do it for
   320                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   321                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   322                                  ;
   323                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   324                                  ;           abort call.  This is reserved for knowledgeable system programs.
   325                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   326                                  
   327                                  ;SUBTTL SEGMENT DECLARATIONS
   328                                  
   329                                  ; The following are all of the segments used.  They are declared in the order
   330                                  ; that they should be placed in the executable
   331                                  
   332                                  ;
   333                                  ; segment ordering for MSDOS
   334                                  ;
   335                                  
   336                                  ;START           SEGMENT BYTE PUBLIC 'START'
   337                                  ;START           ENDS
   338                                  
   339                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   340                                  ;CONSTANTS       ENDS
   341                                  
   342                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   343                                  ;DATA            ENDS
   344                                  
   345                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   346                                  ;CODE            ENDS
   347                                  
   348                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   349                                  ;LAST            ENDS
   350                                  
   351                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   352                                  
   353                                  ; The following segment is defined such that the data/const classes appear
   354                                  ; before the code class for ROMification
   355                                  
   356                                  ;START		SEGMENT BYTE PUBLIC 'START'
   357                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   358                                  ;		JMP     DOSINIT
   359                                  ;START		ENDS
   360                                  
   361                                  ;============================================================================
   362                                  ; BPB.INC, MSDOS 6.0, 1991
   363                                  ;============================================================================
   364                                  ; 09/07/2018 - Retro DOS v3.0
   365                                  
   366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   367                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   368                                  ;									   ;
   369                                  
   370                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   371                                  ;
   372                                  ;	The BPB contains information about the disk structure. It dates
   373                                  ;	back to the earliest FAT systems and so FAT information is
   374                                  ;	intermingled with physical driver information.
   375                                  ;
   376                                  ;	A boot sector contains a BPB for its device; for other disks
   377                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   378                                  ;	information in the DPB.
   379                                  ;
   380                                  ;	The BDS structure contains a BPB within it. 
   381                                  
   382                                  struc A_BPB
   383 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   384 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   385 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   386 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   387 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   388 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   389 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   390 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   391 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   392 0000000F ????                    .BPB_HEADS:		resw	1
   393 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   394 00000013 ????                    			resw	1
   395 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   396 00000017 ????                    			resw	1
   397 00000019 ????????????            			resb	6	; NOTE:  many times these
   398                                  ;					; 	 6 bytes are omitted
   399                                  ;					;	 when BPB manipulations
   400                                  ;					;	 are performed!
   401                                  .size:
   402                                  endstruc
   403                                  
   404                                  ;                                                                          ;
   405                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   406                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   407                                  
   408                                  ;============================================================================
   409                                  ; BUFFER.INC, MSDOS 6.0, 1991
   410                                  ;============================================================================
   411                                  ; 04/05/2019 - Retro DOS v4.0
   412                                  
   413                                  ; <Disk I/O Buffer Header>
   414                                  
   415                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   416                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   417                                  ;									   ;
   418                                  
   419                                  ; Field definition for I/O buffer information
   420                                  
   421                                  struc BUFFINFO
   422 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   423 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   424 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   425                                  				; SFT table index (bit 7 = 1)
   426                                  				; = FFH if buffer free
   427 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   428                                  				;	= 0 if Local device buffer
   429                                  				; Bit 6 = 1 if buffer dirty
   430                                  				; Bit 5 = Reserved
   431                                  				; Bit 4 = Search bit (bit 7 = 1)
   432                                  				; Bit 3 = 1 if buffer is DATA
   433                                  				; Bit 2 = 1 if buffer is DIR
   434                                  				; Bit 1 = 1 if buffer is FAT
   435                                  				; Bit 0 = Reserved
   436 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   437                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   438 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   439 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   440 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   441 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   442 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   443                                  .size:	; 20 bytes
   444                                  endstruc
   445                                  
   446                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   447                                  				;For buf_flags bit 7 = 1, this is the byte
   448                                  				;offset of the start of the buffer in
   449                                  				;the file pointed to by buf_ID. Thus
   450                                  				;the buffer starts at location
   451                                  				;buf_offset in the file and contains
   452                                  				;buf_fill bytes.
   453                                  
   454                                  BUFINSIZ        EQU     BUFFINFO.size
   455                                  
   456                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   457                                  
   458                                  ;Flag byte masks
   459                                  buf_isnet	EQU	10000000B
   460                                  buf_dirty	EQU	01000000B
   461                                  ;***
   462                                  buf_visit	EQU	00100000B
   463                                  ;***
   464                                  buf_snbuf	EQU	00010000B
   465                                  
   466                                  buf_isDATA	EQU	00001000B
   467                                  buf_isDIR	EQU	00000100B
   468                                  buf_isFAT	EQU	00000010B
   469                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   470                                  
   471                                  buf_NetID	EQU	BUFINSIZ
   472                                  
   473                                  ;                                                                          ;
   474                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   475                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   476                                  
   477                                  ;============================================================================
   478                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   479                                  ;============================================================================
   480                                  ; 04/05/2019 - Retro DOS v4.0
   481                                  
   482                                  ; <Control character definitions>
   483                                  
   484                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   485                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   486                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   487                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   488                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   489                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   490                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   491                                  c_HT	    EQU     09h 	; ^I ASCII tab
   492                                  
   493                                  ; <User stack inside of system call>
   494                                  ; Location of user registers relative user stack pointer
   495                                  
   496                                  struc	user_env   ; user_environ
   497 00000000 ????                    .user_AX: resw 1
   498 00000002 ????                    .user_BX: resw 1
   499 00000004 ????                    .user_CX: resw 1
   500 00000006 ????                    .user_DX: resw 1
   501 00000008 ????                    .user_SI: resw 1
   502 0000000A ????                    .user_DI: resw 1
   503 0000000C ????                    .user_BP: resw 1
   504 0000000E ????                    .user_DS: resw 1
   505 00000010 ????                    .user_ES: resw 1
   506 00000012 ????                    .user_IP: resw 1
   507 00000014 ????                    .user_CS: resw 1
   508 00000016 ????                    .user_F:  resw 1
   509                                  .size:
   510                                  endstruc
   511                                  
   512                                  ; ---- <Disk map> ----
   513                                  
   514                                  ;	MSDOS partitions the disk into 4 sections:
   515                                  ;
   516                                  ;  phys sector 0:   +-------------------+
   517                                  ;	|	    | boot/reserved	|
   518                                  ;	|	    +-------------------+
   519                                  ;	|	    |  File allocation	|
   520                                  ;	v	    |	   table(s)	|
   521                                  ;		    |  (multiple copies |
   522                                  ;		    |	  are kept)	|
   523                                  ;		    +-------------------+
   524                                  ;		    |	  Directory	|
   525                                  ;		    +-------------------+
   526                                  ;		    |	  File space	|
   527                                  ;		    +-------------------+
   528                                  ;		    |	Unaddressable	|
   529                                  ;		    |  (to end of disk) |
   530                                  ;		    +-------------------+
   531                                  ;
   532                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   533                                  ; adjusted to maximize the file space addressable.
   534                                  
   535                                  ; <File allocation Table information>
   536                                  
   537                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   538                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   539                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   540                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   541                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   542                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   543                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   544                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   545                                  ; The first available allocation unit is assigned entry number two, and even
   546                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   547                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   548                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   549                                  ; the next cluster in the file.
   550                                  ;
   551                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   552                                  ; do because these clusters show as allocated, but are not part of any
   553                                  ; allocation chain and thus will never be allocated to a file.	A particular
   554                                  ; number is selected so that disk checking programs know what to do (ie.  a
   555                                  ; cluster with entry FF7H which is not in a chain is not an error).
   556                                  
   557                                  ;**	Character Type Flags
   558                                  ;
   559                                  ;	These flags are used in a lookup table indexed by the character code.
   560                                  ;	They're used to quickly classify characters when parsing paths.
   561                                  ;	I think that these are only used to parse FCBs - jgl
   562                                  
   563                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   564                                  FDELIM	equ 2		; is a delimiter
   565                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   566                                  FFCB	equ 8		; is valid in an FCB
   567                                  
   568                                  ;** Bit definitions for DOS_FLAG
   569                                  ;
   570                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   571                                  ;	  $open to indicate to the redirector that this open is being made
   572                                  ;	  by an exec call.
   573                                  ;
   574                                  ; Bit 2
   575                                  ;
   576                                  ; M003, M027:
   577                                  ;
   578                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   579                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   580                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   581                                  ; user program in the case of an Exec call. The next call to DOS will turn
   582                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   583                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   584                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   585                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   586                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   587                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   588                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   589                                  ; Bit 2 will be unconditionally cleared here.
   590                                  ;
   591                                  ; M009, M027:
   592                                  ;
   593                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   594                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   595                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   596                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   597                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   598                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   599                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   600                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   601                                  ; Bit 2 will be unconditionally cleared here.
   602                                  
   603                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   604                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   605                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   606                                  
   607                                  ;============================================================================
   608                                  ; VECTOR.INC, MSDOS 6.0, 1991
   609                                  ;============================================================================
   610                                  ; 04/05/2019 - Retro DOS v4.0
   611                                  
   612                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   613                                  
   614                                  ; <interrupt definitions>
   615                                  
   616                                  INTTAB          EQU     20H
   617                                  INTBASE         EQU     4 * INTTAB
   618                                  ENTRYPOINT      EQU     INTBASE+40H
   619                                  
   620                                  ;	IF      ALTVECT
   621                                  ;ALTTAB  EQU     0F0H
   622                                  ;ALTBASE EQU     4 * ALTTAB
   623                                  ;	ENDIF
   624                                  
   625                                  ;
   626                                  ; interrupt assignments
   627                                  ;
   628                                  ;	IF	NOT ALTVECT
   629                                  int_abort	    EQU     INTTAB	; abort process
   630                                  int_command	    EQU     int_abort+1 ; call MSDOS
   631                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   632                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   633                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   634                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   635                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   636                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   637                                  					; resident
   638                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   639                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   640                                  ;									   ;
   641                                  int_spooler	    EQU     int_abort+8 ; spooler call
   642                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   643                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   644                                  ;									   ;
   645                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   646                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   647                                  ;	ELSE
   648                                  ;int_abort	    EQU     INTTAB	; abort process
   649                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   650                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   651                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   652                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   653                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   654                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   655                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   657                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   658                                  ;									   ;
   659                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   660                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   661                                  ;									   ;
   662                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   663                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   664                                  ;	ENDIF
   665                                  
   666                                  addr_int_abort		EQU    4 * int_abort
   667                                  addr_int_command	EQU    4 * int_command
   668                                  addr_int_terminate	EQU    4 * int_terminate
   669                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   670                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   671                                  addr_int_disk_read	EQU    4 * int_disk_read
   672                                  addr_int_disk_write	EQU    4 * int_disk_write
   673                                  addr_int_keep_process	EQU    4 * int_keep_process
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   676                                  ;									   ;
   677                                  addr_int_spooler	EQU    4 * int_spooler
   678                                  addr_int_fastcon	EQU    4 * int_fastcon
   679                                  addr_int_ibm		EQU    4 * int_IBM
   680                                  ;									   ;
   681                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   682                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   683                                  
   684                                  ;============================================================================
   685                                  ; DIRENT.INC, MSDOS 6.0, 1991
   686                                  ;============================================================================
   687                                  ; 04/05/2019 - Retro DOS v4.0
   688                                  
   689                                  ; BREAK <Directory entry>
   690                                  
   691                                  ;
   692                                  ;       +---------------------------+
   693                                  ;       |  (12 BYTE) filename/ext   |       0       0
   694                                  ;       +---------------------------+
   695                                  ;       |     (BYTE) attributes     |       11      B
   696                                  ;       +---------------------------+
   697                                  ;       |    (10 BYTE) reserved     |       12      C
   698                                  ;       +---------------------------+
   699                                  ;       | (WORD) time of last write |       22      16
   700                                  ;       +---------------------------+
   701                                  ;       | (WORD) date of last write |       24      18
   702                                  ;       +---------------------------+
   703                                  ;       |   (WORD) First cluster    |       26      1A
   704                                  ;       +---------------------------+
   705                                  ;       |     (DWORD) file size     |       28      1C
   706                                  ;       +---------------------------+
   707                                  ;
   708                                  ;   First byte of filename  = E5 -> free directory entry
   709                                  ;                           = 00 -> end of allocated directory
   710                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   711                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   712                                  ;
   713                                  struc dir_entry
   714 00000000 <res Bh>                .dir_name:	resb 11			; file name
   715 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   716 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   717 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   718 00000010 ??                      .dir_attr2:	resb 1			; reserved
   719 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   720 00000016 ????                    .dir_time:	resw 1			; time of last write
   721 00000018 ????                    .dir_date:	resw 1			; date of last write
   722 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   723 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   724 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   725                                  .size:
   726                                  endstruc
   727                                  
   728                                  attr_read_only      EQU      1h
   729                                  attr_hidden         EQU      2h
   730                                  attr_system         EQU      4h
   731                                  attr_volume_id      EQU      8h
   732                                  attr_directory      EQU     10h
   733                                  attr_archive        EQU     20h
   734                                  attr_device	    EQU     40h	; This is a VERY special bit.
   735                                  				;   NO directory entry on a disk EVER
   736                                  				;   has this bit set. It is set non-zero
   737                                  				;   when a device is found by GETPATH
   738                                  
   739                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   740                                                                          ; OR of hard attributes for FINDENTRY
   741                                  
   742                                  attr_ignore         EQU     attr_read_only+attr_archive
   743                                                                          ; ignore this(ese) attribute(s)
   744                                                                          ; during search first/next
   745                                  
   746                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   747                                                                          ; changeable via CHMOD
   748                                  
   749                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   750                                  
   751                                  ;============================================================================
   752                                  ; DPB.INC, MSDOS 6.0, 1991
   753                                  ;============================================================================
   754                                  ; 24/04/2019 - Retro DOS v4.0
   755                                  
   756                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   757                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   758                                  
   759                                  ; ---------------------------------------------------------------------------
   760                                  ;**	DPB - Drive Parameter Block
   761                                  ;
   762                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   763                                  ;	possibly inaccurate deductions from code study... - jgl
   764                                  ;
   765                                  ;	The DPB is DOS's main structure for describing block devices.
   766                                  ;	It contains info about the "Drive" intermingled with info about
   767                                  ;	the FAT file system which is presumably on the drive.  I don't know
   768                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   769                                  ;
   770                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   771                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   772                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   773                                  ; ---------------------------------------------------------------------------
   774                                  
   775                                  struc	DPB
   776 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   777 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   778 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   779 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   780 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   781 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   782 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   783 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   784 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   785 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   786                                  ; MSDOS 3.3
   787                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   788                                  ; MSDOS 6.0
   789 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   790 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   791 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   792 00000017 ??                      .MEDIA:		resb 1		; Media byte
   793 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   794                                  				; check the first time this DPB is used
   795 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   796 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   797 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   798                                  .size:
   799                                  endstruc
   800                                  
   801                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   802                                  
   803                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   804                                  
   805                                  ;                                                                          ;
   806                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   807                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   808                                  
   809                                  ;============================================================================
   810                                  ; SF.INC, MSDOS 6.0, 1991
   811                                  ;============================================================================
   812                                  ; 25/04/2019 - Retro DOS v4.0
   813                                  ; 07/07/2018 - Retro DOS v3.0
   814                                  
   815                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   816                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   817                                  ;                                                                          ;
   818                                  
   819                                  ; ---------------------------------------------------------------------------
   820                                  ;**	SF.INC - System File Table
   821                                  ;
   822                                  ;   AN000   version 4.00   Jan. 1988
   823                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   824                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   825                                  ; ---------------------------------------------------------------------------
   826                                  ;**	System File Table SuperStructure
   827                                  ;
   828                                  ;	The system file table entries are allocated in contiguous groups.
   829                                  ;	There may be more than one such groups; the SF "superstructure"
   830                                  ;	tracks the groups.
   831                                  ; ---------------------------------------------------------------------------
   832                                  
   833                                  struc	SFT
   834 00000000 ????????                .SFLink:	resd 1
   835 00000004 ????                    .SFCount:	resw 1		; number of entries
   836 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   837                                  .size:
   838                                  endstruc
   839                                  
   840                                  ; ---------------------------------------------------------------------------
   841                                  ;**	System file table entry
   842                                  ;
   843                                  ;	These are the structures which are at SFTABLE in the SF structure.
   844                                  ; ---------------------------------------------------------------------------
   845                                  
   846                                  ; 25/04/2019 - Retro DOS v4.0
   847                                  
   848                                  struc SF_ENTRY
   849 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   850                                  				;   if FCB then ref count
   851 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   852 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   853 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   854                                  				; Bit 15 = 1 if remote file
   855                                  				;	 = 0 if local file or device
   856                                  				; Bit 14 = 1 if date/time is not to be
   857                                  				;   set from clock at CLOSE.  Set by
   858                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   859                                  				;   other reseters of the dirty bit
   860                                  				;   (WRITE)
   861                                  				; Bit 13 = Pipe bit (reserved)
   862                                  				;
   863                                  				; Bits 0-7 (old FCB_devid bits)
   864                                  				; If remote file or local file, bit
   865                                  				; 6=0 if dirty Device ID number, bits
   866                                  				; 0-5 if local file.
   867                                  				; bit 7=0 for local file, bit 7
   868                                  				;      =1 for local I/O device
   869                                  				; If local I/O device, bit 6=0 if EOF (input)
   870                                  				;		Bit 5=1 if Raw mode
   871                                  				;		Bit 0=1 if console input device
   872                                  				;		Bit 1=1 if console output device
   873                                  				;		Bit 2=1 if null device
   874                                  				;		Bit 3=1 if clock device
   875 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   876                                  				; to device header if local device,
   877                                  				; points to net device header if
   878                                  				; remote
   879 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   880 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   881 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   882 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   883 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   884                                  
   885                                  ; Starting here, the next 7 bytes may be used by the file system to store
   886                                  ; an ID
   887                                  
   888                                  ; 09/07/2018 - Retro DOS v3.0
   889                                  
   890                                  ; MSDOS 3.3 SF.INC, 1987
   891                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   892                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   893                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   894                                  ;				; for this file
   895                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   896                                  
   897                                  ; MSDOS 6.0, SF.INC, 1991
   898 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   899 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   900                                  				; for this file
   901 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   902                                  
   903                                  ; End of 7 bytes of file-system specific info.
   904                                  
   905 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   906                                  				; directory entry.  This is used by
   907                                  				; close to detect file deleted and
   908                                  				; disk changed errors.
   909                                  ; SHARING INFO
   910 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   911 0000002F ????                    .sf_UID:	resw	1
   912 00000031 ????                    .sf_PID:	resw	1
   913 00000033 ????                    .sf_MFT:	resw	1
   914                                  
   915                                  ; MSDOS 6.0, SF.INC, 1991
   916 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   917 00000037 ????????                .sf_IFS_HDR:	resd	1
   918                                  
   919                                  .size:
   920                                  endstruc
   921                                  
   922                                  ; 20/07/2018
   923                                  ; MSDOS 3.3, SF.INC, 1987
   924                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   925                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   926                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   927                                  ; MSDOS 6.0, SF.INC, 1991
   928                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   929                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   930                                  
   931                                  ; 19/07/2018
   932                                  ; MSDOS 3.3, SF.INC, 1987
   933                                  
   934                                  sf_default_number  EQU	5
   935                                  
   936                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   937                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   938                                  ; by placing a -1 in the ref_count field.
   939                                  
   940                                  sf_busy EQU -1
   941                                  
   942                                  ; mode mask for FCB detection
   943                                  sf_isFCB		EQU	1000000000000000B
   944                                  
   945                                  ; Flag word masks
   946                                  sf_isnet		EQU	1000000000000000B
   947                                  sf_close_nodate 	EQU	0100000000000000B
   948                                  sf_pipe 		EQU	0010000000000000B
   949                                  sf_no_inherit		EQU	0001000000000000B
   950                                  sf_net_spool		EQU	0000100000000000B
   951                                  
   952                                  ; 25/04/2019
   953                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   954                                  
   955                                  ; ---------------------------------------------------------------------------
   956                                  ; Local file/device flag masks
   957                                  ; ---------------------------------------------------------------------------
   958                                  
   959                                  devid_file_clean        EQU     40h     ; true if file and not written
   960                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   961                                  
   962                                  devid_device            EQU     80h     ; true if a device
   963                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   964                                  devid_device_raw        EQU     20h     ; true if in raw mode
   965                                  devid_device_special    EQU     10h     ; true if special device
   966                                  devid_device_clock      EQU     08h     ; true if clock device
   967                                  devid_device_null       EQU     04h     ; true if null device
   968                                  devid_device_con_out    EQU     02h     ; true if console output
   969                                  devid_device_con_in     EQU     01h     ; true if console input
   970                                  
   971                                  ; ---------------------------------------------------------------------------
   972                                  ; structure of devid field as returned by IOCTL is:
   973                                  ;
   974                                  ;       BIT     7   6   5   4   3   2   1   0
   975                                  ;             |---|---|---|---|---|---|---|---|
   976                                  ;             | I | E | R | S | I | I | I | I |
   977                                  ;             | S | O | A | P | S | S | S | S |
   978                                  ;             | D | F | W | E | C | N | C | C |
   979                                  ;             | E |   |   | C | L | U | O | I |
   980                                  ;             | V |   |   | L | K | L | T | N |
   981                                  ;             |---|---|---|---|---|---|---|---|
   982                                  ;       ISDEV = 1 if this channel is a device
   983                                  ;             = 0 if this channel is a disk file
   984                                  ;
   985                                  ;       If ISDEV = 1
   986                                  ;
   987                                  ;             EOF = 0 if End Of File on input
   988                                  ;             RAW = 1 if this device is in Raw mode
   989                                  ;                 = 0 if this device is cooked
   990                                  ;             ISCLK = 1 if this device is the clock device
   991                                  ;             ISNUL = 1 if this device is the null device
   992                                  ;             ISCOT = 1 if this device is the console output
   993                                  ;             ISCIN = 1 if this device is the console input
   994                                  ;
   995                                  ;       If ISDEV = 0
   996                                  ;             EOF = 0 if channel has been written
   997                                  ;             Bits 0-5 are the block device number for
   998                                  ;                 the channel (0 = A, 1 = B, ...)
   999                                  ; ---------------------------------------------------------------------------
  1000                                  
  1001                                  devid_ISDEV     EQU     80h
  1002                                  devid_EOF       EQU     40h
  1003                                  devid_RAW       EQU     20h
  1004                                  devid_SPECIAL   EQU     10H
  1005                                  devid_ISCLK     EQU     08h
  1006                                  devid_ISNUL     EQU     04h
  1007                                  devid_ISCOT     EQU     02h
  1008                                  devid_ISCIN     EQU     01h
  1009                                  
  1010                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1011                                  
  1012                                  ;============================================================================
  1013                                  ; PDB.INC, MSDOS 6.0, 1991
  1014                                  ;============================================================================
  1015                                  ; 04/05/2019 - Retro DOS v4.0
  1016                                  ; 08/07/2018 - Retro DOS v3.0
  1017                                  
  1018                                  ; ---------------------------------------------------------------------------
  1019                                  ; BREAK <Process data block>
  1020                                  ; ---------------------------------------------------------------------------
  1021                                  ;**	Process data block (otherwise known as program header)
  1022                                  ;
  1023                                  
  1024                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1025                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1026                                  ;	for use.
  1027                                  ; ---------------------------------------------------------------------------
  1028                                  
  1029                                  FILPERPROC	EQU     20
  1030                                  
  1031                                  struc PDB	; Process_data_block
  1032 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1033 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1034 00000004 ??                                      resb 1
  1035 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1036 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1037 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1038 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1039 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1040 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1041 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1042 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1043 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1044 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1045 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1046 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1047 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1048 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1049 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1050 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1051 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1052 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1053                                  				;  an extended FCB
  1054                                  ;endstruc 	; MSDOS 3.3
  1055                                  	  	; MSDOS 6.0
  1056 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1057 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1058 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1059 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1060                                  endstruc
  1061                                  
  1062                                  ;============================================================================
  1063                                  ; EXE.INC, MSDOS 6.0, 1991
  1064                                  ;============================================================================
  1065                                  ; 04/05/2019 - Retro DOS v4.0
  1066                                  
  1067                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1068                                  ; ---------------------------------------------------------------------------
  1069                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1070                                  ; whether or not the program is executed or whether or not a program header
  1071                                  ; gets created.
  1072                                  
  1073                                  exec_func_no_execute EQU 1	; no execute bit
  1074                                  exec_func_overlay    EQU 2	; overlay bit
  1075                                  
  1076                                  struc EXEC0
  1077 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1078 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1079 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1080 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1081                                  .size:
  1082                                  endstruc
  1083                                  
  1084                                  struc EXEC1
  1085 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1086 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1087 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1088 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1089 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1090 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1091 00000012 ????                    .IP:		resw 1		; entry point IP
  1092 00000014 ????                    .CS:		resw 1		; entry point CS
  1093                                  .size:
  1094                                  endstruc
  1095                                  
  1096                                  struc EXEC3
  1097 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1098 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1099                                  endstruc
  1100                                  
  1101                                  ;**	Exit codes (in upper byte) for terminating programs
  1102                                  
  1103                                  EXIT_TERMINATE		EQU	0
  1104                                  EXIT_ABORT		EQU	0
  1105                                  EXIT_CTRL_C		EQU	1
  1106                                  EXIT_HARD_ERROR 	EQU	2
  1107                                  EXIT_KEEP_PROCESS	EQU	3
  1108                                  
  1109                                  ;**	EXE File Header Description
  1110                                  
  1111                                  struc EXE
  1112 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1113 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1114 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1115 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1116 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1117 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1118 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1119 0000000E ????                    .SS:          resw 1		; stack of image
  1120 00000010 ????                    .SP:          resw 1		; SP of image
  1121 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1122 00000014 ????                    .IP:          resw 1		; IP of entry
  1123 00000016 ????                    .CS:          resw 1		; CS of entry
  1124 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1125 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1126 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1127                                  .size:
  1128                                  endstruc
  1129                                  
  1130                                  exe_valid_signature     EQU 5A4Dh
  1131                                  exe_valid_old_signature EQU 4D5Ah
  1132                                  
  1133                                  ;**	EXE file symbol info definitions
  1134                                  
  1135                                  struc symbol_entry
  1136 00000000 ????????                .value:	resd 1
  1137 00000004 ????                    .type:	resw 1
  1138 00000006 ??                      .len:	resb 1
  1139 00000007 <res FFh>               .name:	resb 255
  1140                                  endstruc
  1141                                  
  1142                                  ;**	Data structure passed for ExecReady call
  1143                                  
  1144                                  struc ERStruc
  1145 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1146 00000002 ????                     .ER_Flags:	resw	1
  1147 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1148 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1149 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1150 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1151                                   .size:
  1152                                  endstruc
  1153                                  
  1154                                  ;** bit fields in ER_Flags
  1155                                  
  1156                                  ER_EXE		equ	0001h
  1157                                  ER_OVERLAY	equ	0002h
  1158                                  
  1159                                  
  1160                                  ;============================================================================
  1161                                  ; ARENA.INC, MSDOS 6.0, 1991
  1162                                  ;============================================================================
  1163                                  ; 24/04/2019 - Retro DOS v4.0
  1164                                  ; 04/08/2018 - Retro DOS v3.0
  1165                                  
  1166                                  ;BREAK <Memory arena structure>
  1167                                  
  1168                                  ;**	Arena Header
  1169                                  
  1170                                  struc ARENA
  1171 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1172 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1173 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1174 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1175 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1176                                  .headersize:			
  1177                                  endstruc
  1178                                  
  1179                                  ; 20/05/2019 - Retro DOS v4.0
  1180                                  ARENAHEADERSIZE equ ARENA.headersize 
  1181                                  
  1182                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1183                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1184                                  ; Change them and change ALLOC.ASM.
  1185                                  
  1186                                  arena_owner_system  EQU 0               ; free block indication
  1187                                  
  1188                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1189                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1190                                  
  1191                                  FIRST_FIT	EQU	00000000B
  1192                                  BEST_FIT	EQU	00000001B
  1193                                  LAST_FIT	EQU	00000010B
  1194                                  
  1195                                  ; MSDOS 6.0
  1196                                  LOW_FIRST	EQU	00000000B	; M001
  1197                                  HIGH_FIRST	EQU	10000000B	; M001
  1198                                  HIGH_ONLY	EQU	01000000B	; M001
  1199                                  
  1200                                  LINKSTATE	EQU	00000001B	; M002
  1201                                  
  1202                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1203                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1204                                  
  1205                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1206                                  						; M026: used to mask of bits
  1207                                  						; M026: 6 & 7 of AllocMethod
  1208                                  
  1209                                  ;============================================================================
  1210                                  ; MI.INC, MSDOS 6.0, 1991
  1211                                  ;============================================================================
  1212                                  ; 07/07/2018 - Retro DOS v3.0
  1213                                  
  1214                                  ;BREAK <Machine instruction, flag definitions and character types>
  1215                                  
  1216                                  mi_INT		EQU	0CDh
  1217                                  mi_long_jmp	EQU	0EAh
  1218                                  mi_Long_CALL	EQU	09Ah
  1219                                  mi_Long_RET	EQU	0CBh
  1220                                  mi_Near_RET	EQU	0C3h
  1221                                  
  1222                                  ;			xxxxoditszxaxpxc
  1223                                  f_Overflow	EQU	0000100000000000B
  1224                                  f_Direction	EQU	0000010000000000B
  1225                                  f_Interrupt	EQU	0000001000000000B
  1226                                  f_Trace 	EQU	0000000100000000B
  1227                                  f_Sign		EQU	0000000010000000B
  1228                                  f_Zero		EQU	0000000001000000B
  1229                                  f_Aux		EQU	0000000000010000B
  1230                                  f_Parity	EQU	0000000000000100B
  1231                                  f_Carry 	EQU	0000000000000001B
  1232                                  
  1233                                  ;============================================================================
  1234                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1235                                  ;============================================================================
  1236                                  ; 13/07/2018 - Retro DOS v3.0
  1237                                  ; 29/04/2019 - Retro DOS v4.0
  1238                                  
  1239                                  ;**	Standard I/O file handles
  1240                                  
  1241                                  stdin       EQU     0
  1242                                  stdout      EQU     1
  1243                                  stderr      EQU     2
  1244                                  stdaux      EQU     3
  1245                                  stdprn      EQU     4
  1246                                  
  1247                                  ;**	File Modes
  1248                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1249                                  
  1250                                  open_for_read   EQU 0
  1251                                  open_for_write  EQU 1
  1252                                  open_for_both   EQU 2
  1253                                  
  1254                                  ; MSDOS 6.0
  1255                                  OPEN_FOR_BOTH	equ 2
  1256                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1257                                  				; made from exec
  1258                                  
  1259                                  access_mask	EQU 0Fh ; 09/08/2018
  1260                                  
  1261                                  SHARING_MASK	    equ 0F0h
  1262                                  SHARING_COMPAT	    equ 000h
  1263                                  SHARING_DENY_BOTH   equ 010h
  1264                                  SHARING_DENY_WRITE  equ 020h
  1265                                  SHARING_DENY_READ   equ 030h
  1266                                  SHARING_DENY_NONE   equ 040h
  1267                                  SHARING_NET_FCB     equ 070h
  1268                                  SHARING_NO_INHERIT  equ 080h
  1269                                  
  1270                                  ; 29/04/2019
  1271                                  
  1272                                  ;**	Extended Open Definitions
  1273                                  
  1274                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1275                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1276                                  NOT_EXISTS_MASK    equ 0F0h
  1277                                  
  1278                                  ;*	SF_MODE values
  1279                                  
  1280                                  AUTO_COMMIT_WRITE	equ 4000h
  1281                                  INT_24_ERROR		equ 2000h
  1282                                  
  1283                                  ;*	Flags in EXTOPEN_ON
  1284                                  
  1285                                  EXT_OPEN_ON		equ 01h
  1286                                  EXT_FILE_NOT_EXISTS	equ 04h
  1287                                  EXT_OPEN_I24_OFF	equ 02h
  1288                                  
  1289                                  ;*	Flags in EXTOPEN_FLAG
  1290                                  
  1291                                  ACTION_OPENED		equ 01h
  1292                                  ACTION_CREATED_OPENED	equ 02h
  1293                                  ACTION_REPLACED_OPENED	equ 03h
  1294                                  EXT_EXISTS_OPEN 	equ 01h
  1295                                  EXT_EXISTS_FAIL 	equ 00h
  1296                                  EXT_NEXISTS_CREATE	equ 10h
  1297                                  
  1298                                  ;**	Extended Open Structure
  1299                                  
  1300                                  struc EXT_OPEN_PARM
  1301 00000000 ????????                .SET_LIST:	resd 1
  1302 00000004 ????                    .NUM_OF_PARM:	resw 1
  1303                                  endstruc
  1304                                  
  1305                                  ;============================================================================
  1306                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1307                                  ;============================================================================
  1308                                  ; 29/04/2019 - Retro DOS v4.0
  1309                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1310                                  
  1311                                  ; <system call definitions>
  1312                                  
  1313                                  ABORT                           EQU 0   ;  0      0
  1314                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1315                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1316                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1317                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1318                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1319                                  RAW_CON_IO                      EQU 6   ;  6      6
  1320                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1321                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1322                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1323                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1324                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1325                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1326                                  DISK_RESET                      EQU 13  ; 13      D
  1327                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1328                                  FCB_OPEN                        EQU 15  ; 15      F
  1329                                  FCB_CLOSE                       EQU 16  ; 16     10
  1330                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1331                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1332                                  FCB_DELETE                      EQU 19  ; 19     13
  1333                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1334                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1335                                  FCB_CREATE                      EQU 22  ; 22     16
  1336                                  FCB_RENAME                      EQU 23  ; 23     17
  1337                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1338                                  SET_DMA                         EQU 26  ; 26     1A
  1339                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1340                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1341                                  ;                                                                          ;
  1342                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1343                                  ;                                                                          ;
  1344                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1345                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1346                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1347                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1348                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1349                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1350                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1351                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1352                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1353                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1354                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1355                                  GET_DATE                        EQU 42  ; 42     2A
  1356                                  SET_DATE                        EQU 43  ; 43     2B
  1357                                  GET_TIME                        EQU 44  ; 44     2C
  1358                                  SET_TIME                        EQU 45  ; 45     2D
  1359                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1360                                  ; Extended functionality group
  1361                                  GET_DMA                         EQU 47  ; 47     2F
  1362                                  GET_VERSION                     EQU 48  ; 48     30
  1363                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1364                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1365                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1366                                  ;                                                                          ;
  1367                                  GET_DPB                         EQU 50  ; 50     32
  1368                                  ;                                                                          ;
  1369                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1370                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1371                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1372                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1373                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1374                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1375                                  CHAR_OPER                       EQU 55  ; 55     37
  1376                                  INTERNATIONAL                   EQU 56  ; 56     38
  1377                                  ; XENIX CALLS
  1378                                  ;   Directory Group
  1379                                  MKDIR                           EQU 57  ; 57     39
  1380                                  RMDIR                           EQU 58  ; 58     3A
  1381                                  CHDIR                           EQU 59  ; 59     3B
  1382                                  ;   File Group
  1383                                  CREAT                           EQU 60  ; 60     3C
  1384                                  OPEN                            EQU 61  ; 61     3D
  1385                                  CLOSE                           EQU 62  ; 62     3E
  1386                                  READ                            EQU 63  ; 63     3F
  1387                                  WRITE                           EQU 64  ; 64     40
  1388                                  UNLINK                          EQU 65  ; 65     41
  1389                                  LSEEK                           EQU 66  ; 66     42
  1390                                  CHMOD                           EQU 67  ; 67     43
  1391                                  IOCTL                           EQU 68  ; 68     44
  1392                                  XDUP                            EQU 69  ; 69     45
  1393                                  XDUP2                           EQU 70  ; 70     46
  1394                                  CURRENT_DIR                     EQU 71  ; 71     47
  1395                                  ;    Memory Group
  1396                                  ALLOC                           EQU 72  ; 72     48
  1397                                  DEALLOC                         EQU 73  ; 73     49
  1398                                  SETBLOCK                        EQU 74  ; 74     4A
  1399                                  ;    Process Group
  1400                                  EXEC                            EQU 75  ; 75     4B
  1401                                  EXIT                            EQU 76  ; 76     4C
  1402                                  _WAIT				EQU 77  ; 77     4D
  1403                                  FIND_FIRST                      EQU 78  ; 78     4E
  1404                                  ;   Special Group
  1405                                  FIND_NEXT                       EQU 79  ; 79     4F
  1406                                  ; SPECIAL SYSTEM GROUP
  1407                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1408                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1409                                  ;                                                                          ;
  1410                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1411                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1412                                  GET_IN_VARS                     EQU 82  ; 82     52
  1413                                  SETDPB                          EQU 83  ; 83     53
  1414                                  ;                                                                          ;
  1415                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1416                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1417                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  DUP_PDB                         EQU 85  ; 85     55
  1422                                  ;                                                                          ;
  1423                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1424                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1425                                  RENAME                          EQU 86  ; 86     56
  1426                                  FILE_TIMES                      EQU 87  ; 87     57
  1427                                  ALLOCOPER			EQU 88	; 88	 58
  1428                                  ; Network extention system calls
  1429                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1430                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1431                                  CREATENEWFILE			EQU 91	; 91	 5B
  1432                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1433                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1434                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1435                                  ;									   ;
  1436                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1437                                  					;	    CloseByName, CloseUser,
  1438                                  					;	    CloseUserProcess,
  1439                                  					;	    GetOpenFileList
  1440                                  ;									   ;
  1441                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1443                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1444                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1445                                  XNAMETRANS			EQU 96	; 96	 60
  1446                                  PATHPARSE			EQU 97	; 97	 61
  1447                                  GETCURRENTPSP			EQU 98	; 98	 62
  1448                                  HONGEUL 			EQU 99	; 99	 63
  1449                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1450                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1451                                  ;									   ;
  1452                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1453                                  ;									   ;
  1454                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1455                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1456                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1457                                  GETSETCDPG			EQU 102 ; 102	 66
  1458                                  EXTHANDLE			EQU 103 ; 103	 67
  1459                                  COMMIT				EQU 104 ; 104	 68
  1460                                  
  1461                                  ; 29/04/2019 - Retro DOS v4.0
  1462                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1463                                  
  1464                                  GetSetMediaID			EQU 105 ; 105	 69
  1465                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1466                                  ExtOpen 			EQU 108 ; 108	 6C
  1467                                  
  1468                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1469                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1470                                  ;                                                                          ;
  1471                                  ;ifdef ROMEXEC
  1472                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1473                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1474                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1475                                  ;endif
  1476                                  ;                                                                          ;
  1477                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1478                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1479                                  
  1480                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1481                                  ;OEM_C1				EQU 249 ; 249    F9
  1482                                  ;OEM_C2				EQU 250 ; 250    FA
  1483                                  ;OEM_C3				EQU 251 ; 251    FB
  1484                                  ;OEM_C4				EQU 252 ; 252    FC
  1485                                  ;OEM_C5				EQU 253 ; 253    FD
  1486                                  ;OEM_C6				EQU 254 ; 254    FE
  1487                                  ;OEM_C7				EQU 255 ; 255    FF
  1488                                  
  1489                                  ;============================================================================
  1490                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1491                                  ;============================================================================
  1492                                  ; 24/04/2019 - Retro DOS 4.0
  1493                                  
  1494                                  ;MAJOR_VERSION	EQU     6
  1495                                  ;;MINOR_VERSION	EQU	00
  1496                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1497                                  
  1498                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1499                                  MAJOR_VERSION	EQU     5
  1500                                  MINOR_VERSION	EQU     0
  1501                                  
  1502                                  ;============================================================================
  1503                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1504                                  ;============================================================================
  1505                                  ; 09/07/2018 - Retro DOS 3.0
  1506                                  
  1507                                  ; Current structure of the data returned by the international call
  1508                                  
  1509                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1510                                  .Date_tim_format:
  1511 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1512                                  .Currency_sym:
  1513 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1514                                  .Thous_sep:
  1515 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1516                                  .Decimal_sep:
  1517 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1518                                  .Date_sep:
  1519 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1520                                  .Time_sep:
  1521 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1522                                  .Bit_field:	
  1523 0000000F ??                      		RESB 1		; Bit values
  1524                                                                     ;   Bit 0 = 0 if currency symbol first
  1525                                                                     ;         = 1 if currency symbol last
  1526                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1527                                                                     ;         = 1 if space after currency symbol
  1528                                  .Currency_cents:
  1529 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1530                                  .Time_24:
  1531 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1532                                  .Map_call:
  1533 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1534 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1535                                  				;  in pieces.
  1536                                  .Data_sep:
  1537 00000016 ????                    		RESB	2	; Data list separator character
  1538                                  .size:		
  1539                                  endstruc
  1540                                  
  1541                                  ; Max size of the block returned by the INTERNATIONAL call
  1542                                  
  1543                                  internat_block_max	EQU	32
  1544                                  
  1545                                  ;============================================================================
  1546                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1547                                  ;============================================================================
  1548                                  ; 08/07/2018 - Retro DOS v3.0
  1549                                  
  1550                                  ;SysInitVars STRUC
  1551                                  struc SYSI
  1552 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1553 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1554 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1555 0000000C ????????                .CON:	    resd 1		; CON device
  1556 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1557 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1558 00000016 ????????                .CDS:	    resd 1		; CDS list
  1559 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1560 0000001E ????                    .Keep:	    resw 1		; keep count
  1561 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1562 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1563 00000022 ????????                .DEV:	    resd 1		; device list
  1564                                  ; 09/07/2018
  1565                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1566                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1567 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1568 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1569 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1570 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1571 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1572 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1573 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service routine entry
  1574 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1575 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1576 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1577 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1578 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1579                                  endstruc
  1580                                  ;SysInitVars ENDS
  1581                                  
  1582                                  ;This is added for more information exchange between DOS, BIOS.
  1583                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1584                                  
  1585                                  ;SysInitVars_Ext struc
  1586                                  struc SYSI_EXT
  1587 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1588 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1589                                  endstruc
  1590                                  ;SysInitVars_Ext ends
  1591                                  
  1592                                  ;============================================================================
  1593                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1594                                  ;============================================================================
  1595                                  ; 09/07/2018 - Retro DOS v3.0
  1596                                  
  1597                                  ;*** J.K.
  1598                                  ;General Guide -
  1599                                  ;Category Code:
  1600                                  ; 0... .... DOS Defined
  1601                                  ; 1... .... User defined
  1602                                  ; .xxx xxxx Code
  1603                                  
  1604                                  ;Function Code:
  1605                                  ; 0... .... Return error if unsupported
  1606                                  ; 1... .... Ignore if unsupported
  1607                                  ; .0.. .... Intercepted by DOS
  1608                                  ; .1.. .... Passed to driver
  1609                                  ; ..0. .... Sends data/commands to device
  1610                                  ; ..1. .... Quries data/info from device
  1611                                  ; ...x .... Subfunction
  1612                                  ;
  1613                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1614                                  ; function set.  It plays no critical role; some functions may contain both
  1615                                  ; command and query elements. The convention is that such commands are
  1616                                  ; defined as "sends data".
  1617                                  
  1618                                  ;*****************************;*
  1619                                  ; BLOCK DRIVERS 	      ;*
  1620                                  ;*****************************;*
  1621                                  
  1622                                  ; IOCTL SUB-FUNCTIONS
  1623                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1624                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1625                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1626                                  IOCTL_READ_HANDLE	EQU	2
  1627                                  IOCTL_WRITE_HANDLE	EQU	3
  1628                                  IOCTL_READ_DRIVE	EQU	4
  1629                                  IOCTL_WRITE_DRIVE	EQU	5
  1630                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1631                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1632                                  IOCTL_CHANGEABLE?	EQU	8
  1633                                  IOCTL_DeviceLocOrRem?	EQU	9
  1634                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1635                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1636                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1637                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1638                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1639                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1640                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1641                                  ; (MSDOS 6.0)
  1642                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1643                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1644                                  
  1645                                  ; GENERIC IOCTL CATEGORY CODES
  1646                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1647                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1648                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1649                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1650                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1651                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1652                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1653                                  
  1654                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1655                                  RAWIO			EQU	8
  1656                                  
  1657                                  ; RAWIO SUB-FUNCTIONS
  1658                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1659                                  GET_DEVICE_PARAMETERS	EQU	60H
  1660                                  SET_DEVICE_PARAMETERS	EQU	40H
  1661                                  READ_TRACK		EQU	61H
  1662                                  WRITE_TRACK		EQU	41H
  1663                                  VERIFY_TRACK		EQU	62H
  1664                                  FORMAT_TRACK		EQU	42H
  1665                                  ; (MSDOS 6.0)
  1666                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1667                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1668                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1669                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1670                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1671                                  
  1672                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1673                                  BUILD_DEVICE_BPB	EQU	000000001B
  1674                                  
  1675                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1676                                  INSTALL_FAKE_BPB	EQU	000000001B
  1677                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1678                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1679                                  
  1680                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1681                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1682                                  STATUS_FOR_FORMAT	EQU	000000001B
  1683                                  ; (MSDOS 6.0)
  1684                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1685                                  
  1686                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1687                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1688                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1689                                  
  1690                                  ; DEVICETYPE VALUES
  1691                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1692                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1693                                  DEV_5INCH		EQU	0
  1694                                  DEV_5INCH96TPI		EQU	1
  1695                                  DEV_3INCH720KB		EQU	2
  1696                                  DEV_8INCHSS		EQU	3
  1697                                  DEV_8INCHDS		EQU	4
  1698                                  DEV_HARDDISK		EQU	5
  1699                                  DEV_OTHER		EQU	7
  1700                                  ; (MSDOS 6.0)
  1701                                  ;DEV_3INCH1440KB	EQU	7
  1702                                  DEV_3INCH2880KB		EQU	9
  1703                                  ; Retro DOS v2.0 - 26/03/2018
  1704                                  ;;DEV_TAPE		EQU	6
  1705                                  ;;DEV_ERIMO		EQU	8
  1706                                  ;DEV_3INCH2880KB	EQU	9
  1707                                  DEV_3INCH1440KB		EQU	10
  1708                                  
  1709                                  ; (MSDOS 3.3)
  1710                                  ;MAX_DEV_TYPE		EQU	7
  1711                                  
  1712                                  ; (MSDOS 6.0)
  1713                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1714                                  					; CURRENTLY SUPPORT.
  1715                                  struc A_SECTORTABLE
  1716 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1717 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1718                                  .size:
  1719                                  endstruc
  1720                                  
  1721                                  ;============================================================================
  1722                                  ; DEVSYM.INC
  1723                                  ;============================================================================
  1724                                  ; 07/07/2018 - Retro DOS v3.0
  1725                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1726                                  
  1727                                  ;**	DevSym.inc - Device Symbols
  1728                                  
  1729                                  ; The device table list has the form:
  1730                                  struc	SYSDEV
  1731 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1732 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1733 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1734 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1735 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1736                                  .size:
  1737                                  endstruc
  1738                                  
  1739                                  ;
  1740                                  ; ATTRIBUTE BIT MASKS
  1741                                  ;
  1742                                  ; CHARACTER DEVICES:
  1743                                  ;
  1744                                  ; BIT 15 -> MUST BE 1
  1745                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1746                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1747                                  ;     12 -> UNUSED
  1748                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1749                                  ;     10 -> MUST BE 0
  1750                                  ;      9 -> MUST BE 0
  1751                                  ;      8 -> UNUSED
  1752                                  ;      7 -> UNUSED
  1753                                  ;      6 -> UNUSED
  1754                                  ;      5 -> UNUSED
  1755                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1756                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1757                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1758                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1759                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1760                                  ;
  1761                                  ; BLOCK DEVICES:
  1762                                  ;
  1763                                  ; BIT 15 -> MUST BE 0
  1764                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1765                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1766                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1767                                  ;	    THE SAME PLACE.
  1768                                  ;     12 -> UNUSED
  1769                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1770                                  ;     10 -> MUST BE 0
  1771                                  ;      9 -> MUST BE 0
  1772                                  ;      8 -> UNUSED
  1773                                  ;      7 -> UNUSED
  1774                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1775                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1776                                  ;      5 -> UNUSED
  1777                                  ;      4 -> UNUSED
  1778                                  ;      3 -> UNUSED
  1779                                  ;      2 -> UNUSED
  1780                                  ;      1 -> UNUSED
  1781                                  ;      0 -> UNUSED
  1782                                  ;
  1783                                  
  1784                                  ;Attribute bit masks
  1785                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1786                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1787                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1788                                  
  1789                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1790                                  
  1791                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1792                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1793                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1794                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1795                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1796                                  				;  ENTRY POINTS, 0 IF NOT
  1797                                  
  1798                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1799                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1800                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1801                                  				;  ITS CURRENT FORM.
  1802                                  
  1803                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1804                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1805                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1806                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1807                                  
  1808                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1809                                  
  1810                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1811                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1812                                  				;LOGICAL DRIVES, AND SUPPORTS
  1813                                  				;GENERIC IOCTL CALLS.
  1814                                  				;FOR CHARACTER DEVICES, THIS
  1815                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1816                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1817                                  
  1818                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1819                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1820                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1821                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1822                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1823                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1824                                  
  1825                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1826                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1827                                  
  1828                                  ;Static Reguest Header
  1829                                  struc	SRHEAD
  1830 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1831 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1832 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1833 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1834 00000005 ????????????????                	resb 8		;Reserved for queue links
  1835                                  .size:
  1836                                  endstruc
  1837                                  
  1838                                  ;Status word masks
  1839                                  STERR   EQU     8000H           ;Bit 15 - Error
  1840                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1841                                  STDON   EQU     0100H           ;Bit 8 - Done
  1842                                  STECODE EQU     00FFH           ;Error code
  1843                                  WRECODE EQU     0
  1844                                  
  1845                                  ;Function codes
  1846                                  DINITHL EQU     26              ;Size of init header
  1847                                  DMEDHL  EQU     15              ;Size of media check header
  1848                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1849                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1850                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1851                                  DSTATHL EQU     13              ;Size of status header
  1852                                  DFLSHL  EQU     15              ;Size of flush header
  1853                                  
  1854                                  DEVINIT EQU     0               ;Initialization
  1855                                  DEVMDCH EQU     1               ;Media check
  1856                                  DEVBPB  EQU     2               ;Get BPB
  1857                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1858                                  DEVRD   EQU     4               ;Read
  1859                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1860                                  DEVIST  EQU     6               ;Input status
  1861                                  DEVIFL  EQU     7               ;Input flush
  1862                                  DEVWRT  EQU     8               ;Write
  1863                                  DEVWRTV EQU     9               ;Write with verify
  1864                                  DEVOST  EQU     10              ;Output status
  1865                                  DEVOFL  EQU     11              ;Output flush
  1866                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1867                                  
  1868                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1869                                  DEVOPN	EQU	13		;DEVICE OPEN
  1870                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1871                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1872                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1873                                  ; 07/08/2018 - Retro DOS v3.0
  1874                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1875                                  GENIOCTL EQU	19
  1876                                  
  1877                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1878                                  ;		     20
  1879                                  ;		     21
  1880                                  ;		     22
  1881                                  
  1882                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1883                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1884                                  ; 18/05/2019 - Retro DOS v4.0
  1885                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1886                                  
  1887                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1888                                  
  1889                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1890                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1891                                  
  1892                                  ; ADDED FOR DOS 5.00
  1893                                  
  1894                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1895                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1896                                  
  1897                                  struc IOCTL_REQ
  1898 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1899                                  				; GENERIC IOCTL ADDITION.
  1900 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1901 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1902 0000000F ????                    .REG_SI:	resw 1
  1903 00000011 ????                    .REG_DI:	resw 1
  1904 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1905                                  .size: ; 07/08/2018
  1906                                  endstruc
  1907                                  
  1908                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1909                                  GEN_IOCTL_WRT_TRK EQU	40H
  1910                                  GEN_IOCTL_RD_TRK  EQU	60H
  1911                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1912                                  
  1913                                  ;; 32-bit absolute read/write input list structure
  1914                                  
  1915                                  struc ABS_32RW
  1916 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1917 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1918 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1919                                  .size:
  1920                                  endstruc
  1921                                  
  1922                                  ;; media ID info
  1923                                  
  1924                                  struc MEDIA_ID_INFO
  1925 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1926 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1927 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1928 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1929                                  .size:
  1930                                  endstruc
  1931                                  
  1932                                  ; equates for DOS34_FLAG
  1933                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1934                                  
  1935                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1936                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1937                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1938                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1939                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1940                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1941                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1942                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1943                                  					    ;M018: that knows how to handle 
  1944                                  					    ;M018: open for exec
  1945                                  
  1946                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1947                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1948                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1949                                  
  1950                                  ;============================================================================
  1951                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1952                                  ;============================================================================
  1953                                  ; 16/07/2018 - Retro DOS v3.0 
  1954                                  
  1955                                  ;**	ERROR.INC - DOS Error Codes
  1956                                  ;
  1957                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1958                                  ;    return error codes through AX. If an error occurred then
  1959                                  ;    the carry bit will be set and the error code is in AX. If no error
  1960                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1961                                  ;
  1962                                  ;    Since the set of error codes is being extended as we extend the operating
  1963                                  ;    system, we have provided a means for applications to ask the system for a
  1964                                  ;    recommended course of action when they receive an error.
  1965                                  ;
  1966                                  ;    The GetExtendedError system call returns a universal error, an error
  1967                                  ;    location and a recommended course of action. The universal error code is
  1968                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1969                                  ;    is issued.
  1970                                  
  1971                                  ;	2.0 error codes
  1972                                  
  1973                                  error_invalid_function		EQU	1
  1974                                  error_file_not_found		EQU	2
  1975                                  error_path_not_found		EQU	3
  1976                                  error_too_many_open_files	EQU	4
  1977                                  error_access_denied		EQU	5
  1978                                  error_invalid_handle		EQU	6
  1979                                  error_arena_trashed		EQU	7
  1980                                  error_not_enough_memory 	EQU	8
  1981                                  error_invalid_block		EQU	9
  1982                                  error_bad_environment		EQU	10
  1983                                  error_bad_format		EQU	11
  1984                                  error_invalid_access		EQU	12
  1985                                  error_invalid_data		EQU	13
  1986                                  ;**** reserved			EQU	14	; *****
  1987                                  error_invalid_drive		EQU	15
  1988                                  error_current_directory 	EQU	16
  1989                                  error_not_same_device		EQU	17
  1990                                  error_no_more_files		EQU	18
  1991                                  
  1992                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  1993                                  
  1994                                  error_write_protect		EQU	19
  1995                                  error_bad_unit			EQU	20
  1996                                  error_not_ready 		EQU	21
  1997                                  error_bad_command		EQU	22
  1998                                  error_CRC			EQU	23
  1999                                  error_bad_length		EQU	24
  2000                                  error_seek			EQU	25
  2001                                  error_not_DOS_disk		EQU	26
  2002                                  error_sector_not_found		EQU	27
  2003                                  error_out_of_paper		EQU	28
  2004                                  error_write_fault		EQU	29
  2005                                  error_read_fault		EQU	30
  2006                                  error_gen_failure		EQU	31
  2007                                  
  2008                                  ;	the new 3.0 error codes reported through INT 24
  2009                                  
  2010                                  error_sharing_violation 	EQU	32
  2011                                  error_lock_violation		EQU	33
  2012                                  error_wrong_disk		EQU	34
  2013                                  error_FCB_unavailable		EQU	35
  2014                                  error_sharing_buffer_exceeded	EQU	36
  2015                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2016                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2017                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2018                                  
  2019                                  ;	New OEM network-related errors are 50-79
  2020                                  
  2021                                  error_not_supported		EQU	50
  2022                                  
  2023                                  error_net_access_denied		EQU	65	;M028
  2024                                  
  2025                                  ;	End of INT 24 reportable errors
  2026                                  
  2027                                  error_file_exists		EQU	80
  2028                                  error_DUP_FCB			EQU	81	; *****
  2029                                  error_cannot_make		EQU	82
  2030                                  error_FAIL_I24			EQU	83
  2031                                  
  2032                                  ;	New 3.0 network related error codes
  2033                                  
  2034                                  error_out_of_structures 	EQU	84
  2035                                  error_already_assigned		EQU	85
  2036                                  error_invalid_password		EQU	86
  2037                                  error_invalid_parameter 	EQU	87
  2038                                  error_NET_write_fault		EQU	88
  2039                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2040                                  
  2041                                  ;	BREAK <Interrupt 24 error codes>
  2042                                  
  2043                                  ;**	Int24 Error Codes
  2044                                  
  2045                                  error_I24_write_protect 	EQU	0
  2046                                  error_I24_bad_unit		EQU	1
  2047                                  error_I24_not_ready		EQU	2
  2048                                  error_I24_bad_command		EQU	3
  2049                                  error_I24_CRC			EQU	4
  2050                                  error_I24_bad_length		EQU	5
  2051                                  error_I24_Seek			EQU	6
  2052                                  error_I24_not_DOS_disk		EQU	7
  2053                                  error_I24_sector_not_found	EQU	8
  2054                                  error_I24_out_of_paper		EQU	9
  2055                                  error_I24_write_fault		EQU	0Ah
  2056                                  error_I24_read_fault		EQU	0Bh
  2057                                  error_I24_gen_failure		EQU	0Ch
  2058                                  ; NOTE: Code 0DH is used by MT-DOS.
  2059                                  error_I24_wrong_disk		EQU	0Fh
  2060                                  
  2061                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2062                                  ;
  2063                                  ;	NOTE: ABORT is ALWAYS allowed
  2064                                  
  2065                                  Allowed_FAIL			EQU	00001000B
  2066                                  Allowed_RETRY			EQU	00010000B
  2067                                  Allowed_IGNORE			EQU	00100000B
  2068                                  
  2069                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2070                                  I24_area			EQU	00000110B  ; 00 if DOS
  2071                                  						   ; 01 if FAT
  2072                                  						   ; 10 if root DIR
  2073                                  						   ; 11 if DATA
  2074                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2075                                  
  2076                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2077                                  
  2078                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2079                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2080                                  ;	to take for error codes that they don't explicitly understand.
  2081                                  
  2082                                  ;	Values for error CLASS
  2083                                  
  2084                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2085                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2086                                  errCLASS_Auth		EQU	3	; Permission problem
  2087                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2088                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2089                                  errCLASS_SysFail	EQU	6	; System Failure
  2090                                  errCLASS_Apperr 	EQU	7	; Application Error
  2091                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2092                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2093                                  errCLASS_Locked 	EQU	10	; Locked
  2094                                  errCLASS_Media		EQU	11	; Media Failure
  2095                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2096                                  errCLASS_Unk		EQU	13	; Unknown/other
  2097                                  
  2098                                  ;	Values for error ACTION
  2099                                  
  2100                                  errACT_Retry		EQU	1	; Retry
  2101                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2102                                  errACT_User		EQU	3	; Ask user to regive info
  2103                                  errACT_Abort		EQU	4	; abort with clean up
  2104                                  errACT_Panic		EQU	5	; abort immediately
  2105                                  errACT_Ignore		EQU	6	; ignore
  2106                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2107                                  
  2108                                  ;	Values for error LOCUS
  2109                                  
  2110                                  errLOC_Unk		EQU	1	; No appropriate value
  2111                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2112                                  errLOC_Net		EQU	3	; Network
  2113                                  errLOC_SerDev		EQU	4	; Serial Device
  2114                                  errLOC_Mem		EQU	5	; Memory
  2115                                  
  2116                                  ;============================================================================
  2117                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2118                                  ;============================================================================
  2119                                  ; 04/05/2019 - Retro DOS v4.0
  2120                                  
  2121                                  ;**	Int 2A functions
  2122                                  ; ---------------------------------------------------------------------------
  2123                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2124                                  ;		as a critical section handler since critical sections
  2125                                  ;		were originally created to support the net.
  2126                                  ; ---------------------------------------------------------------------------
  2127                                  
  2128                                  ; ---------------------------------------------------------------------------
  2129                                  ;**	This table was created by examining the source and may not be
  2130                                  ;	complete or completely accurate - JGL
  2131                                  ;
  2132                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2133                                  
  2134                                  ;	(ah) = 0	installation check
  2135                                  ;			   (returns ah !=0 if installed)
  2136                                  ;	(ah) = 1	cooked net bios call
  2137                                  ;	(ah) = 3	query drive shared
  2138                                  ;			   (ds:si) = "n:" asciz string
  2139                                  ;	(ah) = 4	net bios
  2140                                  ;	       (al) = 0	   cooked net bios call
  2141                                  ;	       (al) = 1	   raw net bios call
  2142                                  ;	       (al) = 2	   ???
  2143                                  ;
  2144                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2145                                  ;			NCBs available/outstanding. DX returns the number of
  2146                                  ;			sessions. Supposedly, this is documented in an old
  2147                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2148                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2149                                  ;			not be used, as it is a hack, only to get Lotus
  2150                                  ;			Notes running.
  2151                                  ;
  2152                                  ;	(ah) = 80h	enter critical section
  2153                                  ;	(ah) = 81h	leave critical section
  2154                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2155                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2156                                  ; ---------------------------------------------------------------------------
  2157                                  
  2158                                  ;**	Critical section definitions
  2159                                  ; ---------------------------------------------------------------------------
  2160                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2161                                  ;	which various programs use to make it so, in a limited fashion.
  2162                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2163                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2164                                  ;	DOS's global data structures, such as the memory arena, are not
  2165                                  ;	in this area, so critical section indicators are used to protect
  2166                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2167                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2168                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2169                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2170                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2171                                  ;	critical section they then switch away from that second thread and
  2172                                  ;	let the first one finish and exit the section.
  2173                                  ; ---------------------------------------------------------------------------
  2174                                  
  2175                                  ; These below are subject to leave-all sections
  2176                                  critDisk    EQU     1			; Disk I/O critical section
  2177                                  critShare   EQU     1			; Sharer I/O critical section
  2178                                  critMem     EQU     1			; memory maintenance critical section
  2179                                  critSFT     EQU     1			; sft table allocation
  2180                                  critDevice  EQU     2			; Device I/O critical section
  2181                                  critNet     EQU     5			; network critical section
  2182                                  critIFS     EQU     6			; ifsfunc critical section
  2183                                  ; These below are not subject to leave-all sections
  2184                                  critASSIGN  EQU     8			; Assign has munged a system call
  2185                                  
  2186                                  ;============================================================================
  2187                                  ; MULT.INC (MSDOS 6.0, 1991)
  2188                                  ;============================================================================
  2189                                  ; 04/05/2019 - Retro DOS v4.0
  2190                                  
  2191                                  ;Break <Multiplex channels>
  2192                                  
  2193                                  ; ---------------------------------------------------------------------------
  2194                                  ; The current set of defined multiplex channels is (* means documented):
  2195                                  ;
  2196                                  ;   Channel(h)  Issuer          Receiver    Function
  2197                                  ;      00       server          PSPRINT     print job control
  2198                                  ;     *01       print/apps      PRINT       Queueing of files
  2199                                  ;      02       BIOS            REDIR       signal open/close of printers
  2200                                  ;
  2201                                  ;      05       command         REDIR       obtain text of net int 24 message
  2202                                  ;     *06       server/assign   ASSIGN      Install check
  2203                                  ;
  2204                                  ;      08       external driver IBMBIO      interface to internal routines
  2205                                  ;
  2206                                  ;      10       sharer/server   Sharer      install check
  2207                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2208                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2209                                  ;      13       MSNET           MSNET       movement of NCBs
  2210                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2211                                  ;                                           of alternative INT_13 drivers after
  2212                                  ;                                           boot_up
  2213                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2214                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2215                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2216                                  ;      16       WIN386          WIN386      Windows communications
  2217                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2218                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2219                                  ;      19       Shell
  2220                                  ;      1A       Ansi.sys
  2221                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2222                                  ;
  2223                                  ;      40h      OS/2
  2224                                  ;      41h      Lanman
  2225                                  ;      42h      Lanman
  2226                                  ;      43h      Himem
  2227                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2228                                  ;                               AL = 30h    reserved for Himem external A20 code
  2229                                  ;      44h      Dosextender
  2230                                  ;      45H      Windows profiler
  2231                                  ;      46h      Windows/286 DOS extender
  2232                                  ;      47h      Basic Compiler Vn. 7.0
  2233                                  ;      48h      Doskey
  2234                                  ;      49h      DOS 5.x install 
  2235                                  ;      4Ah      Multi Purpose
  2236                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2237                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2238                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2239                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2240                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2241                                  ;
  2242                                  ;                multSmartdrv           10h
  2243                                  ;                multMagicdrv           11h
  2244                                  ;      4Bh      Task Switcher API
  2245                                  ;
  2246                                  ;      4Ch      APPS            APM         Advanced power management
  2247                                  ;      4Dh      Kana Kanji Converter, MSKK
  2248                                  ;
  2249                                  ;      51h      ODI real mode support driver (for Chicago)
  2250                                  ;
  2251                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2252                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2253                                  ;
  2254                                  ;      55h      COMMAND.COM
  2255                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2256                                  ;                                           instance of command.com
  2257                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2258                                  ;                                           instance of ROM COMMAND
  2259                                  ;      56h      Sewell Development
  2260                                  ;               INTERLNK
  2261                                  ;
  2262                                  ;      57h      Iomega Corp.
  2263                                  ;
  2264                                  ;      ABh      Unspecified IBM use
  2265                                  ;      ACh      Graphics
  2266                                  ;      ADh      NLS (toronto)
  2267                                  ;      AEh
  2268                                  ;      AFh      Mode
  2269                                  ;      B0h      GRAFTABL        GRAFTABL
  2270                                  ;
  2271                                  ;      D7h      Banyan VINES
  2272                                  ; ---------------------------------------------------------------------------
  2273                                  
  2274                                  ;MUX 00-3F reserverd for IBM
  2275                                  ;MUX 80-BF reserverd for IBM
  2276                                  
  2277                                  ;MUX 40-7F reserved for Microsoft
  2278                                  
  2279                                  ;MUX C0-FF users
  2280                                  
  2281                                  MultSHARE   EQU     10h 		; sharer
  2282                                      ;	1   MFT_enter
  2283                                      ;	2   MFTClose
  2284                                      ;	3   MFTclU
  2285                                      ;	4   MFTCloseP
  2286                                      ;	5   MFTCloN
  2287                                      ;	6   set_block
  2288                                      ;	7   clr_block
  2289                                      ;	8   chk_block
  2290                                      ;	9   MFT_get
  2291                                      ;	10  ShSave
  2292                                      ;	11  ShChk
  2293                                      ;	12  ShCol
  2294                                      ;	13  ShCloseFile
  2295                                  
  2296                                  MultNET     EQU     11h 		; Network support
  2297                                  MultIFS     EQU     11h                 ; Network support
  2298                                      ;   1   IFS_RMDIR
  2299                                      ;   2   IFS_SEQ_RMDIR
  2300                                      ;   3   IFS_MKDIR
  2301                                      ;   4   IFS_SEQ_MKDIR
  2302                                      ;   5   IFS_CHDIR
  2303                                      ;   6   IFS_CLOSE
  2304                                      ;   7   IFS_COMMIT
  2305                                      ;   8   IFS_READ
  2306                                      ;   9   IFS_WRITE
  2307                                      ;   10  IFS_LOCK
  2308                                      ;   11  IFS_UNLOCK
  2309                                      ;   12  IFS_DISK_INFO
  2310                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2311                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2312                                      ;   15  IFS_GET_FILE_INFO
  2313                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2314                                      ;   17  IFS_RENAME
  2315                                      ;   18  IFS_SEQ_RENAME
  2316                                      ;   19  IFS_DELETE
  2317                                      ;   20  IFS_SEQ_DELETE
  2318                                      ;   21  IFS_OPEN
  2319                                      ;   22  IFS_SEQ_OPEN
  2320                                      ;   23  IFS_CREATE
  2321                                      ;   24  IFS_SEQ_CREATE
  2322                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2323                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2324                                      ;   27  IFS_SEARCH_FIRST
  2325                                      ;   28  IFS_SEARCH_NEXT
  2326                                      ;   29  IFS_ABORT
  2327                                      ;   30  IFS_ASSOPER
  2328                                      ;   31  Printer_SET_STRING
  2329                                      ;   32  IFSFlushBuf
  2330                                      ;   33  IFSBufWrite
  2331                                      ;   34  IFSResetEnvironment
  2332                                      ;   35  IFSSpoolCheck
  2333                                      ;   36  IFSSpoolClose
  2334                                      ;   37  IFSDeviceOper
  2335                                      ;   38  IFSSpoolEchoCheck
  2336                                      ;   39      - - -   Unused   - - -
  2337                                      ;   40      - - -   Unused   - - -
  2338                                      ;   41      - - -   Unused   - - -
  2339                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2340                                      ;   43  DEVICE_IOCTL
  2341                                      ;   44  IFS_UPDATE_CB
  2342                                      ;   45  IFS_FILE_XATTRIBUTES
  2343                                      ;   46  IFS_XOPEN
  2344                                      ;   47  IFS_DEPENDENT_IOCTL
  2345                                  
  2346                                  MultDOS     EQU     12h 		; DOS call back
  2347                                      ;	1   DOS_CLOSE
  2348                                      ;	2   RECSET
  2349                                      ;	3   Get DOSGROUP
  2350                                      ;	4   PATHCHRCMP
  2351                                      ;	5   OUT
  2352                                      ;	6   NET_I24_ENTRY
  2353                                      ;	7   PLACEBUF
  2354                                      ;	8   FREE_SFT
  2355                                      ;	9   BUFWRITE
  2356                                      ;	10  SHARE_VIOLATION
  2357                                      ;	11  SHARE_ERROR
  2358                                      ;	12  SET_SFT_MODE
  2359                                      ;	13  DATE16
  2360                                      ;	14  SETVISIT
  2361                                      ;	15  SCANPLACE
  2362                                      ;	16  SKIPVISIT
  2363                                      ;	17  StrCpy
  2364                                      ;	18  StrLen
  2365                                      ;	19  UCase
  2366                                      ;	20  POINTCOMP
  2367                                      ;	21  CHECKFLUSH
  2368                                      ;	22  SFFromSFN
  2369                                      ;	23  GetCDSFromDrv
  2370                                      ;	24  Get_User_Stack
  2371                                      ;	25  GetThisDrv
  2372                                      ;	26  DriveFromText
  2373                                      ;	27  SETYEAR
  2374                                      ;	28  DSUM
  2375                                      ;	29  DSLIDE
  2376                                      ;	30  StrCmp
  2377                                      ;	31  initcds
  2378                                      ;	32  pjfnfromhandle
  2379                                      ;	33  $NameTrans
  2380                                      ;	34  CAL_LK
  2381                                      ;	35  DEVNAME
  2382                                      ;	36  Idle
  2383                                      ;   37  DStrLen
  2384                                      ;   38  NLS_OPEN      DOS 3.3
  2385                                      ;   39  $CLOSE        DOS 3.3
  2386                                      ;   40  NLS_LSEEK     DOS 3.3
  2387                                      ;   41  $READ         DOS 3.3
  2388                                      ;   42  FastInit      DOS 4.0
  2389                                      ;   43  NLS_IOCTL     DOS 3.3
  2390                                      ;   44  GetDevList    DOS 3.3
  2391                                      ;   45  NLS_GETEXT    DOS 3.3
  2392                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2393                                      ;   47  FAKE_VERSION  DOS 4.0
  2394                                  
  2395                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2396                                      ;	0   NLSInstall
  2397                                      ;	1   ChgCodePage
  2398                                      ;	2   GetExtInfo
  2399                                      ;	3   SetCodePage
  2400                                      ;	4   GetCntry
  2401                                  
  2402                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2403                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2404                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2405                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2406                                  
  2407                                  multMULT        EQU     4Ah
  2408                                  multMAGIC       EQU     256*multMULT + 11h
  2409                                  multMULTRPLTOM  EQU     06h
  2410                                  
  2411                                      ;   0   swap disk function for single floppy drive m/cs
  2412                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2413                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2414                                      ;       drive
  2415                                      ;
  2416                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2417                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2418                                      ;       returns pointer in ES:DI
  2419                                      ;
  2420                                      ;   3-4 currently used by nobody
  2421                                      ;   5   Switcher API
  2422                                      ;   6   Top of Memory for RPL.
  2423                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2424                                      ;           code present in TOM should respond with a new TOM in DX
  2425                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2426                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2427                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2428                                      ;           It is the responsibility of RPL program to release the mem.
  2429                                      ;   7   Reserved for PROTMAN support.
  2430                                      ;  10   smartdrv 4.0
  2431                                      ;  11   dblspace api
  2432                                      ;  12   MRCI     api
  2433                                      ;  13   dblspace/mrci stealth packet api
  2434                                  
  2435                                  MultAPM     EQU     4ch             ; Obselete ???
  2436                                      ;       00h     APM_VER_CHK
  2437                                      ;       01h     APM_SUS_SYS_REQ
  2438                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2439                                  
  2440                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2441                                  				;  APM events                         ; M036
  2442                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2443                                  
  2444                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2445                                  ;	  it calls Multdos 42 to set up an entry routine address
  2446                                      ;	0   Install status  (reserved)
  2447                                      ;	1   Lookup
  2448                                      ;	2   Insert
  2449                                      ;	3   Delete
  2450                                      ;	4   Purge	    (reserved)
  2451                                  
  2452                                  ;============================================================================
  2453                                  ; FIND.INC (MSDOS 6.0, 1991)
  2454                                  ;============================================================================
  2455                                  ; 17/05/2019 - Retro DOS v4.0
  2456                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2457                                  
  2458                                  ;Break	<find first/next buffer>
  2459                                  
  2460                                  struc find_buf
  2461 00000000 ??                      .drive:	    resb 1		; drive of search
  2462 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2463 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2464 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2465 0000000F ????                    .DirStart:  resw 1		; DirStart
  2466 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2467 00000015 ??                      .attr:	    resb 1		; attribute found
  2468 00000016 ????                    .time:	    resw 1		; time
  2469 00000018 ????                    .date:	    resw 1		; date
  2470 0000001A ????                    .size_l:    resw 1		; low(size)
  2471 0000001C ????                    .size_h:    resw 1		; high(size)
  2472 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2473                                  .size:
  2474                                  endstruc
  2475                                  
  2476                                  ;============================================================================
  2477                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2478                                  ;============================================================================
  2479                                  ; 29/04/2019 - Retro DOS v4.0
  2480                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2481                                  
  2482                                  ;Equates for COUNTRY INFORMATION.
  2483                                  SetCountryInfo	EQU	1	;country info
  2484                                  SetUcase	EQU	2	;uppercase table
  2485                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2486                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2487                                  SetFileList	EQU	5	;valid file character list
  2488                                  SetCollate	EQU	6	;collating sequence
  2489                                  SetDBCS 	EQU	7	;double byte character set
  2490                                  SetALL		EQU	-1	;all the entries
  2491                                  
  2492                                  ;DOS country and code page information table structure.
  2493                                  ;Internally, IBMDOS gives a pointer to this table.
  2494                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2495                                  ;this structure.
  2496                                  
  2497                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2498 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2499 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2500 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2501 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2502 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2503 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2504                                  
  2505 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2506 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2507                                  
  2508 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2509 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2510                                  
  2511 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2512 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2513                                  
  2514                                  ; MSDOS 6.0
  2515 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2516 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2517                                  
  2518 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2519 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2520 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2521 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2522 0000006C ????                    .ccDFormat:		resw 1	;date format
  2523 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2524 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2525 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2526 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2527 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2528 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2529 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2530 0000007D ??                      .ccTFormat:		resb 1	;time format
  2531 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2532 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2533 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2534                                  .size:
  2535                                  endstruc
  2536                                  
  2537                                  ;Ucase table
  2538                                  struc CC_UCASE_TAB
  2539 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2540 00000002 <res 80h>               .ccUcase_data:		resb 128
  2541                                  endstruc
  2542                                  
  2543                                  ;File Ucase table
  2544                                  struc CC_FILE_UCASE_TAB
  2545 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2546 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2547                                  endstruc
  2548                                  
  2549                                  ;File char list
  2550                                  struc CC_FILE_CHAR_TAB
  2551 00000000 ????                    .ccFilechar_leng:	resw 1
  2552 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2553                                  endstruc
  2554                                  
  2555                                  ;collate table
  2556                                  struc CC_COLLATE_TAB
  2557 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2558 00000002 <res 100h>              .ccCollate_data:	resb 256
  2559                                  endstruc
  2560                                  
  2561                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2562                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2563                                  
  2564                                  ; 06/08/2018
  2565                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2566                                  
  2567                                  ;CAPITALIZATION equates
  2568                                  CAP_ONE_CHAR	equ	20H
  2569                                  CAP_STRING	equ	21H
  2570                                  CAP_ASCIIZ	equ	22H
  2571                                  CHECK_YES_NO	equ	23H
  2572                                  UPPER_TABLE	equ	80H
  2573                                  
  2574                                  ;NLS_YES	equ	59H  ; 'Y'
  2575                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2576                                  ;NLS_NO		equ	4EH  ; 'N'	
  2577                                  ;NLS_no2	equ	6EH  ; 'n'	
  2578                                  
  2579                                  ;============================================================================
  2580                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2581                                  ;============================================================================
  2582                                  ; 25/04/2019 - Retro DOS v4.0
  2583                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2584                                  
  2585                                  ;BREAK <Current directory list structure>
  2586                                  
  2587                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2588                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2589                                  ;									   ;
  2590                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2591                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2592                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2593                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2594                                  ; of the disk being changed or if the path must be recracked.		   ;
  2595                                  ;
  2596                                  ;	Some pathnames have special preambles, such as
  2597                                  ;
  2598                                  ;		\\machine\sharename\...
  2599                                  ;	For these pathnames we can't allow ".." processing to back us
  2600                                  ;	up into the special front part of the name.  The CURDIR_END field
  2601                                  ;	holds the address of the seperator character which marks
  2602                                  ;	the split between the special preamble and the regular
  2603                                  ;	path list; ".." processing isn't allowed to back us up past
  2604                                  ;	(i.e., before) CURDIR_END
  2605                                  ;	For the root, it points at the leading /.  For net
  2606                                  ;	assignments it points at the end (nul) of the initial assignment:
  2607                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2608                                  ;	  ^		 ^		     ^
  2609                                  
  2610                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2611                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2612                                  
  2613                                  struc curdir	; curdir_list
  2614 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2615 00000043 ????                    .flags:		resw 1			; various flags
  2616 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2617 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2618 0000004D ????                    .user_word:	resw 1
  2619 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2620                                  ; MSDOS 6.0
  2621 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2622 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2623 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2624                                  .size:
  2625                                  endstruc
  2626                                  
  2627                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2628                                  
  2629                                  %define curdir_netID curdir_ID  ; dword
  2630                                  
  2631                                  ;**	Flag values for CURDIR_FLAGS
  2632                                  
  2633                                  curdir_isnet	EQU	1000000000000000B
  2634                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2635                                  curdir_inuse	EQU	0100000000000000B
  2636                                  curdir_splice	EQU	0010000000000000B
  2637                                  curdir_local	EQU	0001000000000000B
  2638                                  
  2639                                  ;									   ;
  2640                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2641                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2642                                  
  2643                                  ;============================================================================
  2644                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2645                                  ;============================================================================
  2646                                  ; 09/07/2018 - Retro DOS v3.0
  2647                                  
  2648                                  ;BREAK <File Control Block definition>
  2649                                  
  2650                                  ;
  2651                                  ; Field definition for FCBs
  2652                                  ; The FCB has the following structure:
  2653                                  ;
  2654                                  ;	+---------------------------+
  2655                                  ;	|   Drive indicator(byte)   |
  2656                                  ;	+---------------------------+
  2657                                  ;	|    Filename (8 chars)     |
  2658                                  ;	+---------------------------+
  2659                                  ;	|    Extension (3 chars)    |
  2660                                  ;	+---------------------------+
  2661                                  ;	|   Current Extent(word)    |
  2662                                  ;	+---------------------------+
  2663                                  ;	|    Record size (word)     |
  2664                                  ;	+---------------------------+
  2665                                  ;	|    File Size (2 words)    |
  2666                                  ;	+---------------------------+
  2667                                  ;	|	Date of write	    |
  2668                                  ;	+---------------------------+
  2669                                  ;	|	Time of write	    |
  2670                                  ;	+---------------------------+
  2671                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2672                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2673                                  ;									   ;
  2674                                  ;	+---------------------------+
  2675                                  ;	|   8 bytes reserved	    |
  2676                                  ;	+---------------------------+
  2677                                  ;									   ;
  2678                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2679                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2680                                  ;	|    next record number     |
  2681                                  ;	+---------------------------+
  2682                                  ;	|   random record number    |
  2683                                  ;	+---------------------------+
  2684                                  ;
  2685                                  
  2686                                  struc	SYS_FCB
  2687 00000000 ??                      .drive:	resb 1
  2688 00000001 ????????????????        .name:	resb 8
  2689 00000009 ??????                  .ext:	resb 3
  2690 0000000C ????                    .EXTENT: resw 1
  2691 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2692 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2693                                  				; following word
  2694 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2695 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2696 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2697                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2698                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2699                                  ;									   ;
  2700 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2701                                  ;									   ;
  2702                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2703                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2704 00000020 ??                      .NR:	resb 1			; Next record
  2705 00000021 ????????                .RR:	resb 4			; Random record
  2706                                  .size:
  2707                                  endstruc
  2708                                  
  2709                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2710                                  				; NEXT
  2711                                  ; 20/07/2018
  2712                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2713                                  
  2714                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2715                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2716                                  ; NOTE about this byte (fcb_nsl_drive)
  2717                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2718                                  ;	00 means a local file or device with sharing loaded
  2719                                  ;	10 means a remote (network) file
  2720                                  ;	01 means a local file with no sharing loaded
  2721                                  ;	11 means a local device with no sharing loaded
  2722                                  
  2723                                  ; 20/07/2018
  2724                                  
  2725                                  ;
  2726                                  ; Network FCB
  2727                                  ;
  2728                                  
  2729                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2730                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2731                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2732                                  
  2733                                  ;
  2734                                  ; No sharing local file FCB
  2735                                  ;
  2736                                  
  2737                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2738                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2739                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2740                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2741                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2742                                  
  2743                                  ;
  2744                                  ; No sharing local device FCB
  2745                                  ;
  2746                                  
  2747                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2748                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2749                                  
  2750                                  ;
  2751                                  ; Sharing local FCB
  2752                                  ;
  2753                                  
  2754                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2755                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2756                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2757                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2758                                  
  2759                                  ;
  2760                                  ; Bogusness:  the four cases are:
  2761                                  ;
  2762                                  ;   local file	    00
  2763                                  ;   local device    40
  2764                                  ;   local sharing   C0
  2765                                  ;   network	    80
  2766                                  ;
  2767                                  ; Since sharing and network collide, we cannot use a test instruction for
  2768                                  ; deciding whether a network or a share check in involved
  2769                                  ;
  2770                                  FCBDEVICE   EQU 040h
  2771                                  FCBNETWORK  EQU 080h
  2772                                  FCBSHARE    EQU 0C0h
  2773                                  
  2774                                  ; FCBSPECIAL must be able to mask off both net and share
  2775                                  FCBSPECIAL  EQU 080h
  2776                                  FCBMASK     EQU 0C0h
  2777                                  
  2778                                  ;============================================================================
  2779                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2780                                  ;============================================================================
  2781                                  ; 11/07/2018 - Retro DOS v3.0
  2782                                  ; 25/04/2019 - Retro DOS v4.0
  2783                                  
  2784                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2785 00000000 ??                      .dirpos:	resb 1
  2786 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2787                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2788 00000005 ????                    .clusnum:	resw 1
  2789 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2790 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2791                                  .size:
  2792                                  endstruc
  2793                                  
  2794                                  ; 23/07/2018
  2795                                  ;FASTOPEN NAME CACHING Subfunctions
  2796                                  FONC_Look_up	equ	1
  2797                                  FONC_insert	equ	2
  2798                                  FONC_delete	equ	3
  2799                                  FONC_update	equ	4
  2800                                  FONC_purge	equ	5	;reserved for the future use.
  2801                                  FONC_Rename	equ	6	;AN001
  2802                                  
  2803                                  ; 27/07/2018
  2804                                  ;FastOpen Data Structure
  2805                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2806 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2807 00000002 ????????                .name_caching:	resd 1
  2808                                  ; MSDOS 6.0
  2809                                  ;.fatchain_caching: resd 1	;reserved for future use
  2810                                  .size:
  2811                                  endstruc
  2812                                  
  2813                                  ; 27/07/2018
  2814                                  ;Equates used in DOS.
  2815                                  FastOpen_Set	       equ     00000001b
  2816                                  FastOpen_Reset	       equ     11111110b
  2817                                  Lookup_Success	       equ     00000010b
  2818                                  Lookup_Reset	       equ     11111101b
  2819                                  Special_Fill_Set       equ     00000100b
  2820                                  Special_Fill_Reset     equ     11111011b
  2821                                  No_Lookup	       equ     00001000b
  2822                                  Set_For_Search	       equ     00010000b	;DCR 167
  2823                                  
  2824                                  ; 09/08/2018 
  2825                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2826                                  ; Fastxxx equates
  2827                                  FastOpen_ID	   equ	   1
  2828                                  FastSeek_ID	   equ	   2
  2829                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2830                                  
  2831                                  ;Structure definitions
  2832                                  ;
  2833                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2834 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2835 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2836                                  endstruc
  2837                                  
  2838                                  ;============================================================================
  2839                                  ; LOCK.INC, MSDOS 6.0, 1991
  2840                                  ;============================================================================
  2841                                  ; 14/07/2018 - Retro DOS v3.0
  2842                                  
  2843                                  ;**	LOCK.INC - Definitions for Record Locking
  2844                                  
  2845                                  ;**	LOCK functions
  2846                                  
  2847                                  LOCK_ALL	    equ    0
  2848                                  UNLOCK_ALL	    equ    1
  2849                                  LOCK_MUL_RANGE	    equ    2
  2850                                  UNLOCK_MUL_RANGE    equ    3
  2851                                  LOCK_READ	    equ    4
  2852                                  WRITE_UNLOCK	    equ    5
  2853                                  LOCK_ADD	    equ    6
  2854                                  
  2855                                  ;**	Structure for Lock buffer
  2856                                  
  2857                                  struc LockBuf
  2858 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2859 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2860                                  endstruc
  2861                                  
  2862                                  ;============================================================================
  2863                                  ; DPL.ASM, MSDOS 6.0, 1991
  2864                                  ;============================================================================
  2865                                  ; 04/08/2018 - Retro DOS v3.0
  2866                                  
  2867                                  ; (SRVCALL.ASM)
  2868                                  
  2869                                  struc DPL
  2870 00000000 ????                    .AX:	resw	1	; AX register
  2871 00000002 ????                    .BX:	resw	1	; BX register
  2872 00000004 ????                    .CX:	resw	1	; CX register
  2873 00000006 ????                    .DX:	resw	1	; DX register
  2874 00000008 ????                    .SI:	resw	1	; SI register
  2875 0000000A ????                    .DI:	resw	1	; DI register
  2876 0000000C ????                    .DS:	resw	1	; DS register
  2877 0000000E ????                    .ES:	resw	1	; ES register
  2878 00000010 ????                    .rsrvd: resw	1	; Reserved
  2879 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2880 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2881                                  .size:
  2882                                  endstruc
  2883                                   
  2884                                  ;----------------------------------------------------------------------------
  2885                                  ; DOSDATA
  2886                                  ;----------------------------------------------------------------------------
  2887                                  ;============================================================================
  2888                                  ; 24/04/2019 - Retro DOS v4.0
  2889                                  
  2890                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2891                                  		; ((just after resident IO.SYS code&data))
  2892                                  
  2893                                  ;============================================================================
  2894                                  ; WIN386.INC, MSDOS 6.0, 1991
  2895                                  ;============================================================================
  2896                                  ; 24/04/2019 - Retro DOS 4.0
  2897                                  
  2898                                  ;
  2899                                  ;  Symbols and structures relating to WIN386 support.
  2900                                  ;
  2901                                  ;  Used by files in both the DOS and the BIOS.
  2902                                  ;
  2903                                  ;  Created: 7-13-89 by MRW
  2904                                  ;
  2905                                  
  2906                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2907                                  
  2908                                  MultWin386		equ     16h	; Int 2f multiplex number
  2909                                  
  2910                                  Win386_Init		equ	05h	; Win386 initialization
  2911                                  Win386_Exit		equ	06h	; Win386 exit
  2912                                  Win386_Devcall		equ	07h	; Win386 device call out
  2913                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2914                                  
  2915                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2916                                  ; answer call outs from the DOSMGR
  2917                                  
  2918                                  Win386_DOSMGR		equ	15H
  2919                                  
  2920                                  ; The following structures are used to communicate instance data to 
  2921                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2922                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2923                                  
  2924                                  struc Win386_SIS	; Startup Info Structure
  2925 00000000 ????                     .Version:		resb	2	; db 3, 0
  2926 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2927 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2928 0000000A ????????                 .Reference_Data:	resd	1
  2929 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2930                                  endstruc
  2931                                  
  2932                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2933                                  
  2934                                  struc Win386_IIS	; Instance Item Structure
  2935 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2936 00000004 ????                    .Size:			resw	1	; size of an instance item
  2937                                  endstruc
  2938                                  
  2939                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2940                                  
  2941                                  ;Win386 DOSMGR function return values to indicate operation done
  2942                                  
  2943                                  WIN_OP_DONE		equ	0B97Ch	; 
  2944                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2945                                  
  2946                                  ;M021
  2947                                  ; WInoldap callout multiplex number
  2948                                  
  2949                                  WINOLDAP		equ	46h	;
  2950                                  
  2951                                  ;============================================================================
  2952                                  ;----------------------------------------------------------------------------
  2953                                  ; DOSCODE
  2954                                  ;----------------------------------------------------------------------------
  2955                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2956                                  
  2957                                  ;============================================================================
  2958                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2959                                  ;============================================================================
  2960                                  ; 16/07/2018 - Retro DOS 3.0
  2961                                  ;----------------------------------------------------------------------------
  2962                                  ; 24/04/2019 - Retro DOS 4.0
  2963                                  
  2964                                  ; MSDOS 6.0
  2965                                  ;----------------------------------------------------------------------------
  2966                                  ; FILE : ORIGIN.INC
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2969                                  ; is used for ORGing the DOS code.
  2970                                  ;
  2971                                  ; Brief Description of the necessacity of this ORG:
  2972                                  ; -------------------------------------------------
  2973                                  ;
  2974                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2975                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2976                                  ; This means programs running out off the HMA must use non-zero offset base
  2977                                  ; addresses. It also means that if we're running multiple programs from the
  2978                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2979                                  ; HMA segments that precede it.
  2980                                  ; 
  2981                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2982                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2983                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2984                                  ; selecting segment values between f124h and ffffh it could be located 
  2985                                  ; anywhere in the HMA. The problem with this is that programs with such 
  2986                                  ; high ORGs would not be able to run in low RAM.
  2987                                  ;
  2988                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  2989                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  2990                                  ; the following solution has been implemented:
  2991                                  ;
  2992                                  ; The Bios Code segment will have a very small offset and run at the very
  2993                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  2994                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  2995                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  2996                                  ; possible physical address at which DOS code will run, while still providing
  2997                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  2998                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  2999                                  ; mostly true.
  3000                                  ;
  3001                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3002                                  ; putting this value after the first jmp instruction in the DOS code in
  3003                                  ; mshead.asm. 
  3004                                  ;
  3005                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3006                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3007                                  ;
  3008                                  ; Revision History:
  3009                                  ;
  3010                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3011                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3012                                  ;
  3013                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3014                                  ; A utility called getsize will obtain the corresponding values from msdos
  3015                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3016                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3017                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3018                                  ; dependant on that.				  --- Apr 3 '90
  3019                                  ;
  3020                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3021                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3022                                  ; so the offset will not need to be included at the beginning of the code
  3023                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3024                                  ; at offset zero within the segment.
  3025                                  ; 
  3026                                  ;
  3027                                  ;--------------------------------------------------------------------------
  3028                                  
  3029                                  BIODATASTART	EQU	00700h
  3030                                  ;include	bdsize.inc	; this sets the values:
  3031                                  				;	BIODATASIZ
  3032                                  				;	BIOCODESIZ
  3033                                  				;	DOSDATASIZ
  3034                                  
  3035                                  ; 05/12/2022
  3036                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3037                                  			; 0900h for MSDOS 5.0 IO.SYS
  3038                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3039                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3040                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3041                                  			; 1370h for MSDOS 5.0 IO.SYS
  3042                                  ;ifndef ROMDOS
  3043                                  ;
  3044                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3045                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3046                                  ;
  3047                                  ;else
  3048                                  ;
  3049                                  ;BYTSTART	EQU	0
  3050                                  ;PARASTART	EQU	0
  3051                                  ;
  3052                                  ;endif ; ROMDOS
  3053                                  
  3054                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3055                                  ; -----------------------------------------------------------------
  3056                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3057                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3058                                  ;DOSDATASIZE equ MSDAT001E
  3059                                  ; 05/12/2022
  3060                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3061                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3062                                  			    ; of DOSDATA (in low memory) while
  3063                                  			    ; dos/kernel code starts just after 
  3064                                  			    ; this data block ((org = DOSDATASIZE))
  3065                                  			    ; (in low memory or in HMA)	
  3066                                  ; -----------------------------------------------------------------
  3067                                  
  3068                                  ; 04/11/2022	
  3069                                  ; -----------------------------------------------------------------	
  3070                                  ; NOTE:
  3071                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3072                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3073                                  ; -----------------------------------------------------------------
  3074                                  
  3075                                  ; ----------------------------------------------------------------------------
  3076                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3077                                  ; ----------------------------------------------------------------------------
  3078                                  
  3079                                  segment .code vstart=3DD0h ; 06/12/2022
  3080                                  								
  3081                                  ; ============================================================================
  3082                                  
  3083                                  
  3084                                  ;[ORG 3DE0h]
  3085                                  
  3086                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3087                                  
  3088                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3089                                  
  3090                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3091                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3092                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3093                                  	[ORG PARASTART]	
  3094                                  
  3095                                  _$STARTCODE:
  3096                                  
  3097                                  ;PARASTART:
  3098 00000000 E9A474                          JMP     DOSINIT
  3099                                  
  3100                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3101                                  	; 04/11/2022
  3102 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3103                                  
  3104                                  BioDataSeg:
  3105 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3106                                  
  3107                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3108                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3109                                  ; allows getting the DOS data segment without going through the 
  3110                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3111                                  
  3112                                  DosDSeg:
  3113 00000007 0000                    	dw	0
  3114                                  	
  3115                                  ;============================================================================
  3116                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3117                                  ;============================================================================
  3118                                  ; 16/07/2018 - Retro DOS 3.0
  3119                                  ; 29/04/2019 - Retro DOS 4.0
  3120                                  
  3121                                  	; (MSDOS version)
  3122                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3123                                  	;db	6
  3124                                  	;db	20
  3125                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3126                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3127                                  	;db	5
  3128                                  	;db	0	
  3129                                  
  3130                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3131                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3132 00000009 05                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3133 0000000A 00                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3134                                  
  3135                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3136                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3137                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3138                                  
  3139                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3140                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3141                                  ;
  3142                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3143                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3144                                  
  3145                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3146                                  ; those error codes which are "allowed" for each system call. If the error
  3147                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3148                                  ; is to return the "real" error via Extended error, and one of the allowed
  3149                                  ; errors on the actual call.
  3150                                  ;
  3151                                  ; The table is organized as follows:
  3152                                  ;
  3153                                  ;    Each entry in the table is of variable size, but the first
  3154                                  ;       two bytes are always:
  3155                                  ;
  3156                                  ;       Call#,Cnt of bytes following this byte
  3157                                  ;
  3158                                  ; EXAMPLE:
  3159                                  ;       Call 61 (OPEN)
  3160                                  ;
  3161                                  ;       DB      61,5,12,3,2,4,5
  3162                                  ;
  3163                                  ;       61 is the AH INT 21 call value for OPEN.
  3164                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3165                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3166                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3167                                  ;       this case 5).  The last value will be the one returned on the call if
  3168                                  ;       the "real" error is not one of the allowed ones.
  3169                                  ;
  3170                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3171                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3172                                  ;   call, so set up an Extended error and leave the current error code alone.
  3173                                  ;
  3174                                  ; The table is terminated by a call value of 0FFh
  3175                                  
  3176                                  ;PUBLIC I21_MAP_E_TAB
  3177                                  	; 10/08/2018
  3178                                  
  3179                                  ; 29/04/2019
  3180                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3181                                  ; 04/11/2022
  3182                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3183                                  
  3184                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3185 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3186 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3187 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3188 00000018 0205                        DB          error_file_not_found,error_access_denied
  3189 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3190 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3191 00000022 04                          DB          error_too_many_open_files
  3192 00000023 05                          DB          error_access_denied
  3193                                      ; MSDOS 6.0
  3194 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3195 00000029 04                          DB          error_too_many_open_files
  3196 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3197                                      ; MSDOS 3.3
  3198                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3199                                      ;DB		error_too_many_open_files,error_access_denied
  3200 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3201 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3202 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3203 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3204 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3205 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3206 00000045 05                          DB          error_access_denied
  3207 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3208 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3209 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3210 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3211                                      ; MSDOS 6.0	
  3212 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3213                                      ; MSDOS 3.3	
  3214                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3215 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3216 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3217 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3218 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3219 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3220 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3221 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3222 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3223                                      ; MSDOS 6.0
  3224 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3225 0000007D 1005                        DB		error_current_directory,error_access_denied
  3226                                      ; MSDOS 3.3
  3227                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3228                                      ;DB		error_access_denied
  3229                                      ; MSDOS 6.0	
  3230 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3231 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3232                                      ; MSDOS 3.3	
  3233                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3234 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3235 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3236 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3237 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3238 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3239 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3240 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3241 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3242 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3243 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3244 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3245 000000AA 01                          DB              error_invalid_function
  3246                                      ; MSDOS 6.0		
  3247 000000AB 6C0A                        DB	ExtOpen,10
  3248 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3249 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3250 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3251 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3252 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3253 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3254 000000BD FF                          DB  0FFh
  3255                                  
  3256                                  ;19/09/2023
  3257                                  ;22/12/2022
  3258                                  ;04/11/2022	
  3259                                  ;29/04/2019 - Retro DOS v4.0
  3260                                  ;============================================================================
  3261                                  ; 	Retro DOS v4.0
  3262                                  ;============================================================================
  3263 000000BE 00                      	db 	0
  3264                                  RETRODOSMSG:
  3265 000000BF 0D0A                    	db	13,10
  3266                                  	;;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3267                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3268                                  	;;db	"Retro DOS v4.1 by Erdogan Tan [2022]"	; 28/12/2022
  3269                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2023]"
  3270 000000C1 526574726F20444F53-     	db	"Retro DOS v4.1 by Erdogan Tan [2024]"	; 05/01/2024
  3270 000000CA 2076342E3120627920-
  3270 000000D3 4572646F67616E2054-
  3270 000000DC 616E205B323032345D 
  3271 000000E5 0D0A2400                	db	13,10,"$", 0 
  3272                                  
  3273                                  ;============================================================================
  3274                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3275                                  ;============================================================================
  3276                                  ; 11/07/2018 - Retro DOS v3.0
  3277                                  
  3278                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3279 000000E9 90                      align 2
  3280                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3281                                  
  3282                                  ; Standard Functions
  3283                                  ;DISPATCH  LABEL WORD
  3284                                  DISPATCH:
  3285                                  	; 16/07/2018 - Retro DOS v3.0
  3286                                  	; (MSDOS 3.3)
  3287                                  
  3288                                  ; 29/04/2019
  3289                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3290                                  
  3291                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3292                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3293                                  
  3294 000000EA [5B60]                          short_addr  _$ABORT			    ;  0      0
  3295 000000EC [2C16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3296 000000EE [3516]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3297 000000F0 [E716]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3298 000000F2 [0217]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3299 000000F4 [0817]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3300 000000F6 [7615]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3301 000000F8 [A215]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3302 000000FA [5113]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3303 000000FC [A913]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3304 000000FE [B513]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3305 00000100 [1C17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3306 00000102 [2617]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3307 00000104 [7E0F]                          short_addr  _$DISK_RESET		    ; 13      D
  3308 00000106 [650E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3309 00000108 [EA1D]                          short_addr  _$FCB_OPEN			    ; 15      F
  3310 0000010A [C517]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3311 0000010C [D91E]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3312 0000010E [1F1F]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3313 00000110 [6B17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3314 00000112 [411C]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3315 00000114 [451C]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3316 00000116 [C91E]                          short_addr  _$FCB_CREATE		    ; 22     16
  3317 00000118 [3118]                          short_addr  _$FCB_RENAME		    ; 23     17
  3318                                  	; 16/07/2018
  3319                                          ;short_addr _CPMFUNC			    ; 24     18	
  3320 0000011A [5106]                          short_addr  NO_OP			    ; 24     18
  3321 0000011C [600E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3322 0000011E [550E]                          short_addr  _$SET_DMA			    ; 26     1A
  3323                                  
  3324                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3325                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3326                                  ;                                                                          ;
  3327 00000120 [0D0F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3328 00000122 [0F0F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3329                                  ;                                                                          ;
  3330                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3331                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3332                                  
  3333                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3334                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3335                                  
  3336                                  ; 08/07/2018 - Retro DOS v3.0
  3337                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3338                                  
  3339 00000124 [5106]                  	short_addr  NO_OP			    ; 29     1D
  3340 00000126 [5106]                  	short_addr  NO_OP			    ; 30     1E
  3341                                  
  3342                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;                                                                          ;
  3345 00000128 [4E0F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3346                                  ;                                                                          ;
  3347                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3348                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3349                                          ;short_addr _CPMFUNC			    ; 32     20
  3350                                  
  3351                                  ; 08/07/2018 - Retro DOS v3.0
  3352                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3353                                  
  3354 0000012A [5106]                  	short_addr  NO_OP			    ; 32     20
  3355                                  
  3356 0000012C [491C]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3357 0000012E [4D1C]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3358 00000130 [7D17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3359 00000132 [5317]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3360                                  
  3361                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3362                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3363                                  
  3364                                  ; Extended Functions
  3365 00000134 [860E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3366                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3367                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3368                                  ;                                                                          ;
  3369 00000136 [8B10]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3370                                  ;                                                                          ;
  3371                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3372                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3373 00000138 [3D1C]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3374 0000013A [391C]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3375 0000013C [020F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3376 0000013E [5D0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3377 00000140 [7A0A]                          short_addr  _$SET_DATE                      ; 43     2B
  3378 00000142 [990A]                          short_addr  _$GET_TIME                      ; 44     2C
  3379 00000144 [AA0A]                          short_addr  _$SET_TIME                      ; 45     2D
  3380 00000146 [460C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3381                                  
  3382                                  ; Extended functionality group
  3383 00000148 [420E]                          short_addr  _$GET_DMA                       ; 47     2F
  3384 0000014A [1F0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3385 0000014C [FF5F]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3386                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3387                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3388                                  ;                                                                          ;
  3389 0000014E [500F]                          short_addr  _$GET_DPB			    ; 50     32
  3390                                  ;                                                                          ;
  3391                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3392                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3393 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3394 00000152 [380F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3395 00000154 [770E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3396 00000156 [1F0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3397 00000158 [B30E]                          short_addr  _$CHAR_OPER                     ; 55     37
  3398 0000015A [4D0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3399                                  ; XENIX CALLS
  3400                                  ;   Directory Group
  3401 0000015C [A421]                          short_addr  _$MKDIR			    ; 57     39
  3402 0000015E [F020]                          short_addr  _$RMDIR			    ; 58     3A
  3403 00000160 [2B21]                          short_addr  _$CHDIR			    ; 59     3B
  3404                                  ;   File Group
  3405 00000162 [EE6D]                          short_addr  _$CREAT			    ; 60     3C
  3406 00000164 [1A6D]                          short_addr  _$OPEN			    ; 61     3D
  3407 00000166 [6365]                          short_addr  _$CLOSE		 	    ; 62     3E
  3408 00000168 [6B66]                          short_addr  _$READ			    ; 63     3F
  3409 0000016A [C866]                          short_addr  _$WRITE			    ; 64     40
  3410 0000016C [3E6E]                          short_addr  _$UNLINK			    ; 65     41
  3411 0000016E [CD66]                          short_addr  _$LSEEK			    ; 66     42
  3412 00000170 [FB6D]                          short_addr  _$CHMOD			    ; 67     43
  3413 00000172 [0522]                          short_addr  _$IOCTL			    ; 68     44
  3414 00000174 [8267]                          short_addr  _$DUP			    ; 69     45
  3415 00000176 [A067]                          short_addr  _$DUP2			    ; 70     46
  3416 00000178 [8C20]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3417                                  ;   Memory Group
  3418 0000017A [F860]                          short_addr  _$ALLOC			    ; 72     48
  3419 0000017C [6D62]                          short_addr  _$DEALLOC                       ; 73     49
  3420 0000017E [4962]                          short_addr  _$SETBLOCK                      ; 74     4A
  3421                                  ;   Process Group
  3422 00000180 [E559]                          short_addr  _$EXEC			    ; 75     4B
  3423 00000182 [3760]                          short_addr  _$EXIT			    ; 76     4C
  3424 00000184 [DB59]                          short_addr  _$WAIT			    ; 77     4D
  3425 00000186 [D61F]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3426                                  ;   Special Group
  3427 00000188 [2A20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3428                                  ; SPECIAL SYSTEM GROUP
  3429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3431                                  ;                                                                          ;
  3432 0000018A [B802]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3433 0000018C [C402]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3434 0000018E [440F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3435 00000190 [B30F]                          short_addr  _$SETDPB			    ; 83     53
  3436                                  ;                                                                          ;
  3437                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3438                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3439 00000192 [410C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3440                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3441                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3442                                  ;                                                                          ;
  3443 00000194 [7A10]                          short_addr  _$DUP_PDB                       ; 85     55
  3444                                  ;                                                                          ;
  3445                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3446                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3447 00000196 [646E]                          short_addr  _$RENAME			    ; 86     56
  3448 00000198 [3467]                          short_addr  _$FILE_TIMES                    ; 87     57
  3449 0000019A [A262]                          short_addr  _$ALLOCOPER                     ; 88     58
  3450                                  
  3451                                  ; 08/07/2018 - Retro DOS v3.0
  3452                                  ; -------------------------------------------------------------------------;
  3453                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3454                                  
  3455                                  ; Network extention system calls
  3456 0000019C [C70E]                          short_addr  _$GetExtendedError              ; 89     59
  3457 0000019E [EA6E]                          short_addr  _$CreateTempFile                ; 90     5A
  3458 000001A0 [D26E]                          short_addr  _$CreateNewFile                 ; 91     5B
  3459 000001A2 [9C70]                          short_addr  _$LockOper                      ; 92     5C
  3460 000001A4 [7663]                          short_addr  _$ServerCall                    ; 93     5D
  3461 000001A6 [6A68]                          short_addr  _$UserOper                      ; 94     5E
  3462 000001A8 [CF67]                          short_addr  _$AssignOper                    ; 95     5F
  3463 000001AA [B56C]                          short_addr  _$NameTrans                     ; 96     60
  3464 000001AC [5106]                  	short_addr  NO_OP			    ; 97     61
  3465 000001AE [C402]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3466                                  ; the next call is reserved for hangool sys call
  3467                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3468 000001B0 [E70E]                  	short_addr  _$ECS_Call			    ; 99     63
  3469                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3470                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3471                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3472                                  ;                                                                          ;
  3473 000001B2 [D002]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3474                                  ;                                                                          ;
  3475                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3476                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3477 000001B4 [D00C]                          short_addr  _$GetExtCntry                   ; 101    65
  3478 000001B6 [CD0D]                          short_addr  _$GetSetCdPg                    ; 102    66
  3479 000001B8 [AE65]                          short_addr  _$ExtHandle                     ; 103    67
  3480 000001BA [9665]                          short_addr  _$COMMIT                        ; 104    68
  3481                                  
  3482                                  ; 08/07/2018
  3483                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3484                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3485                                  
  3486                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3487 000001BC [7D11]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3488 000001BE [9665]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3489 000001C0 [5106]                  	short_addr  NO_OP                           ; 107    6B   
  3490                                  						    ; IFS_IOCTL no longer 
  3491                                  						    ; supported
  3492 000001C2 [846F]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3493                                  
  3494                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3495                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3496                                  ;                                                                          ;
  3497                                  ;ifdef ROMEXEC
  3498                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3499                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3500                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3501                                  ;endif
  3502                                  ;                                                                          ;
  3503                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3504                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3505                                  
  3506                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3507                                  
  3508                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3509                                  
  3510                                  ; 08/07/2018 - Retro DOS v3.0
  3511                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3512                                  
  3513                                  ;	If 	Installed
  3514                                  
  3515                                  align 2
  3516                                  
  3517                                  ;PUBLIC FOO
  3518                                  
  3519                                  FOO:	; LABEL WORD
  3520 000001C4 [0E07]                          short_addr  Leave2F
  3521                                  
  3522 000001C6 [C801]                  DTab:	DW  DOSTable
  3523                                  
  3524                                  	;PUBLIC FOO,DTAB
  3525                                  
  3526                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3527                                  
  3528                                  ; 29/04/2019
  3529                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3530                                  
  3531                                  
  3532                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3533                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3534                                         
  3535                                  DOSTable:  ; LABEL  WORD
  3536 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3537 000001C9 [3309]                          short_addr  DOSInstall          ;   0 install check
  3538 000001CB [6D2E]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3539 000001CD [A80E]                          short_addr  RECSET              ;   2   RECSET
  3540 000001CF [2D09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3541 000001D1 [164F]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3542 000001D3 [3716]                          short_addr  OUTT                ;   5   OUT
  3543 000001D5 [E851]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3544 000001D7 [5C57]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3545 000001D9 [612F]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3546 000001DB [2159]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3547 000001DD [4971]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3548 000001DF [BA2B]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3549 000001E1 [A42B]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3550 000001E3 [E50A]                          short_addr  DATE16              ;   13  DATE16
  3551 000001E5 [E911]                          short_addr  Idle		;   14      empty slot
  3552 000001E7 [5557]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3553 000001E9 [E911]                          short_addr  Idle		;   16      empty slot
  3554 000001EB [B611]                          short_addr  StrCpy              ;   17  StrCpy
  3555 000001ED [CE11]                          short_addr  StrLen              ;   18  StrLen
  3556 000001EF [C14E]                          short_addr  UCase		;   19  UCase
  3557 000001F1 [9957]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3558 000001F3 [F858]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3559 000001F5 [DF64]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3560 000001F7 [2D69]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3561 000001F9 [8504]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3562 000001FB [D868]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3563 000001FD [DA6C]                          short_addr  DriveFromText       ;   26  DriveFromText
  3564 000001FF [860B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3565 00000201 [150C]                          short_addr  DSUM                ;   28  DSUM
  3566 00000203 [7C0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3567 00000205 [9411]                          short_addr  StrCmp              ;   30  StrCmp
  3568 00000207 [1D68]                          short_addr  InitCDS             ;   31  initcds
  3569 00000209 [AC64]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3570 0000020B [B56C]                          short_addr  _$NameTrans		;   33  $NameTrans
  3571 0000020D [7806]                          short_addr  CAL_LK              ;   34  CAL_LK
  3572 0000020F [8140]                          short_addr  DEVNAME             ;   35  DEVNAME
  3573 00000211 [E911]                          short_addr  Idle                ;   36  Idle
  3574 00000213 [DC11]                          short_addr  DStrLen             ;   37  DStrLen
  3575 00000215 [8B12]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3576 00000217 [6365]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3577 00000219 [9112]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3578 0000021B [6B66]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3579 0000021D [4D12]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3580 0000021F [CE12]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3581 00000221 [BD12]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3582 00000223 [E212]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3583                                          
  3584                                  	; 29/04/2019 - Retro DOS v4.0
  3585 00000225 [E612]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3586                                  
  3587 00000227 [5106]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3588                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3589                                  
  3590                                  DOSTableEnd:  ; LABEL BYTE
  3591                                  
  3592                                  	;ENDIF
  3593                                  
  3594                                  ; ----------------------------------------------------------------------------
  3595                                  ; BREAK   <Copyright notice and version>
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  
  3598                                  ;CODSTRT EQU	$
  3599                                  
  3600                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3601                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3602                                  
  3603                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3604                                  ;       module. The reason is so that the data alignments are the same in
  3605                                  ;       IBM-DOS and MS-DOS up through header.
  3606                                  
  3607                                  	;PUBLIC	HEADER
  3608                                  
  3609                                  HEADER:	; LABEL	BYTE
  3610                                          ;IF	DEBUG
  3611                                          ;DB	13,10,"Debugging DOS version "
  3612                                          ;DB	MAJOR_VERSION + "0"
  3613                                          ;DB	"."
  3614                                          ;DB	(MINOR_VERSION / 10) + "0"
  3615                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3616                                          ;ENDIF
  3617                                  
  3618                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3619                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3620                                  %if 0
  3621                                          ;IF	NOT IBM
  3622                                          DB	13,10,"MS-DOS version "
  3623                                          DB	MAJOR_VERSION + "0"
  3624                                          DB	"."
  3625                                          DB	(MINOR_VERSION / 10) + "0"
  3626                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3627                                          DB	(MINOR_VERSION % 10) + "0"
  3628                                  
  3629                                          ;IF	HIGHMEM
  3630                                          ;DB	"H"
  3631                                          ;ENDIF
  3632                                  
  3633                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3634                                  	; 30/04/2019 - Retro DOS v4.0
  3635                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3636                                  
  3637                                  	;ENDIF
  3638                                  
  3639                                  %endif
  3640                                  
  3641                                  ;IF DEBUG
  3642                                  ;	DB	13,10,"$"
  3643                                  ;ENDIF
  3644                                  
  3645                                  ;include copyrigh.inc
  3646                                  
  3647                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3648                                  
  3649                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3650                                  	;DB	"Licensed Material - Property of Microsoft "
  3651                                  	;DB	"All rights reserved "
  3652                                  
  3653                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3654                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3655                                  
  3656                                  ; 28/12/2022 - Retro DOS v4.1
  3657                                  %if 0
  3658                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3659                                  ms_copyright:
  3660                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3661                                  	db	'Licensed Material - Property of Microsoft '
  3662                                  	db	'All rights reserved '
  3663                                  
  3664                                  %endif
  3665                                  	; 28/12/2022 - Retro DOS v4.1
  3666                                  ms_copyright:
  3667 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3667 00000232 56657273696F6E2035-
  3667 0000023B 2E30               
  3668 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3668 00000246 687420313938312D31-
  3668 0000024F 393931204D6963726F-
  3668 00000258 736F667420436F7270-
  3668 00000261 2E0D0A2400         
  3669                                  
  3670                                  ;============================================================================
  3671                                  ; MSCODE.ASM
  3672                                  ;============================================================================
  3673                                  
  3674                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3675                                  ; 03/03/2018
  3676                                  
  3677                                  ;
  3678                                  ; MSCODE.ASM -- MSDOS code
  3679                                  ;
  3680                                  
  3681                                  ;INCLUDE DOSSEG.ASM
  3682                                  ;INCLUDE STDSW.ASM
  3683                                  
  3684                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3685                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3686                                  
  3687                                  ;.xcref
  3688                                  ;INCLUDE DOSSYM.ASM
  3689                                  ;INCLUDE DEVSYM.ASM
  3690                                  ;.cref
  3691                                  ;.list
  3692                                  
  3693                                  ;IFNDEF  KANJI
  3694                                  ;KANJI   EQU     0       ; FALSE
  3695                                  ;ENDIF
  3696                                  
  3697                                  ;IFNDEF  IBM
  3698                                  ;IBM     EQU     0
  3699                                  ;ENDIF
  3700                                  
  3701                                  ;IFNDEF  HIGHMEM
  3702                                  ;HIGHMEM  EQU     0
  3703                                  ;ENDIF
  3704                                  
  3705                                          ;i_need  USER_SP,WORD
  3706                                          ;i_need  USER_SS,WORD
  3707                                          ;i_need  SAVEDS,WORD
  3708                                          ;i_need  SAVEBX,WORD
  3709                                          ;i_need  INDOS,BYTE
  3710                                          ;i_need  NSP,WORD
  3711                                          ;i_need  NSS,WORD
  3712                                          ;i_need  CURRENTPDB,WORD
  3713                                          ;i_need  AUXSTACK,BYTE
  3714                                          ;i_need  CONSWAP,BYTE
  3715                                          ;i_need  IDLEINT,BYTE
  3716                                          ;i_need  NOSETDIR,BYTE
  3717                                          ;i_need  ERRORMODE,BYTE
  3718                                          ;i_need  IOSTACK,BYTE
  3719                                          ;i_need  WPERR,BYTE
  3720                                          ;i_need  DSKSTACK,BYTE
  3721                                          ;i_need  CNTCFLAG,BYTE
  3722                                          ;i_need  LEAVEADDR,WORD
  3723                                          ;i_need  NULLDEVPT,DWORD
  3724                                  
  3725                                          ;IF NOT IBM
  3726                                          ;i_need  OEM_HANDLER,DWORD
  3727                                          ;ENDIF
  3728                                  
  3729                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3730                                  
  3731                                  ;============================================================================
  3732                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3733                                  ;============================================================================
  3734                                  ; 11/07/2018 - Retro DOS v3.0
  3735                                  ; 01/05/2019 - Retro DOS v4.0
  3736                                  
  3737                                  ; DosCode SEGMENT
  3738                                  
  3739                                  ; ==========================================================================
  3740                                  ;
  3741                                  ; $Set_CTRL_C_Trapping
  3742                                  ;
  3743                                  ; Function:
  3744                                  ;	Enable disable ^C checking in dispatcher
  3745                                  ;
  3746                                  ; Inputs:
  3747                                  ;		AL = 0 read ^C status
  3748                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3749                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3750                                  ;		AL = 5 get DOS boot drive
  3751                                  ;		AL = 6 Get version number
  3752                                  ;			RETURNS:
  3753                                  ;				BH = Minor version number
  3754                                  ;				BL = Major version number
  3755                                  ;				DL = DOS internal revision
  3756                                  ;				DH = DOS type flags
  3757                                  ;					Bit 3 	- DOS in ROM
  3758                                  ;					Bit 4 	- DOS in HMA
  3759                                  ;					Bit 0-2, 5-7 - Reserved
  3760                                  ; Outputs:
  3761                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3762                                  ;
  3763                                  ; History:
  3764                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3765                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3766                                  ; ==========================================================================
  3767                                  
  3768                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3769                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3770                                  
  3771                                  	; 01/01/2024
  3772                                  	
  3773                                  _$SET_CTRL_C_TRAPPING:
  3774                                  	; 01/05/2019 - Retro DOS v4.0
  3775                                  
  3776 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3777 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3778                                  
  3779 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3780 0000026C CF                      	iret
  3781                                  scct_1:
  3782 0000026D 1E                      	push	DS
  3783                                  
  3784                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3785 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3786                                  	
  3787 00000273 50                      	push	AX			; DL only register that can change
  3788 00000274 56                      	push	SI
  3789                                  
  3790 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3791 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3792 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3793 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3794                                  
  3795 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3796 00000280 EB30                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3797                                  scct_2:
  3798 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3799 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3800                                  
  3801 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3802 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3803 0000028A EB26                    	jmp	SHORT scct_9s		; Jmp to exit
  3804                                  scct_3:
  3805 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3806 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3807                                  
  3808 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3809 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3810 00000294 EB1C                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3811                                  scct_4:
  3812 00000296 3C03                    	cmp	al,3 ; 01/01/2024	
  3813                                  	;cmp	AX,3 			; Test for 5 after it was dec twice
  3814 00000298 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3815 0000029A 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3816 0000029E EB12                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3817                                  scct_5:
  3818 000002A0 3C04                    	cmp	al,4 ; 01/01/2024
  3819                                  	;cmp	AX,4 			; Test for 6 after it was dec twice
  3820 000002A2 750E                    	jne	short scct_9s		; If not equal then not get version
  3821                                  	
  3822                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3823                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)
  3824 000002A4 BB0500                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3825                                  	
  3826                                  	;mov	dl,0
  3827                                  	;mov	DL,DOSREVNM ; 0
  3828                                  
  3829                                  	;xor	dh,dh			; assume vanilla DOS
  3830                                  	; 01/01/2024
  3831 000002A7 BA0000                  	mov	dx,0
  3832 000002AA 3836[1112]              	cmp	byte [DosHasHMA],dh ; 0
  3833                                  	;cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3834                                  	;je	short @F
  3835 000002AE 7402                    	je	short scct_6
  3836                                  	; 01/01/2024
  3837 000002B0 B610                    	mov	dh,10h
  3838                                  	;or	dh,10h
  3839                                  	;;or	DH,DOSINHMA ; 10h
  3840                                  ;@@:
  3841                                  scct_6:
  3842                                  
  3843                                  ;ifdef ROMDOS
  3844                                  ;	or	DH,DOSINROM ; 08h
  3845                                  ;endif ; ROMDOS
  3846                                  
  3847                                  scct_9s:
  3848 000002B2 5E                      	pop	SI
  3849 000002B3 58                      	pop	AX
  3850 000002B4 1F                      	pop	DS
  3851                                  scct_9f:
  3852 000002B5 CF                      	iret
  3853                                  
  3854                                  SetCtrlShortEntry:			; This allows a conditional entry
  3855                                  					; from main dispatch code
  3856 000002B6 EBAE                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3857                                  
  3858                                  ; ==========================================================================
  3859                                  ;									   
  3860                                  ; The following two routines are dispatched to directly with ints disabled
  3861                                  ; immediately after the int 21h entry.	no DIS state is set.
  3862                                  ;
  3863                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3864                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3865                                  ;
  3866                                  ; ==========================================================================
  3867                                  
  3868                                  _$SET_CURRENT_PDB:
  3869 000002B8 1E                      	push	DS
  3870                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3871 000002B9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3872 000002BE 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3873 000002C2 1F                      	pop	DS
  3874 000002C3 CF                      	iret
  3875                                  
  3876                                  ; ==========================================================================
  3877                                  ;
  3878                                  ; $get_current_PDB returns in BX the current process
  3879                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3880                                  ;
  3881                                  ; ==========================================================================
  3882                                  
  3883                                  _$GET_CURRENT_PDB:
  3884 000002C4 1E                      	push	DS
  3885                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3886 000002C5 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3887 000002CA 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3888 000002CE 1F                      	pop	DS
  3889 000002CF CF                      	iret
  3890                                  
  3891                                  ; ==========================================================================
  3892                                  ;
  3893                                  ; Sets the Printer Flag to whatever is in AL.
  3894                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3895                                  ;
  3896                                  ; ==========================================================================
  3897                                  
  3898                                  _$SET_PRINTER_FLAG:
  3899 000002D0 1E                      	push	ds
  3900                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3901 000002D1 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3902 000002D6 A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3903 000002D9 1F                      	pop	ds
  3904 000002DA CF                      	iret
  3905                                  
  3906                                  ; 01/05/2019 - Retro DOS v4.0
  3907                                  ; 08/07/2018 - Retro DOS v3.0
  3908                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3909                                  
  3910                                  ; ----------------------------------------------------------------------------
  3911                                  ; BREAK   <System call entry points and dispatcher>
  3912                                  ; ----------------------------------------------------------------------------
  3913                                  
  3914                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3915                                  
  3916                                  ; ==========================================================================
  3917                                  ;
  3918                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3919                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3920                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3921                                  ;
  3922                                  ; ==========================================================================
  3923                                  
  3924                                  SYSTEM_CALL:    ; PROC NEAR
  3925                                  
  3926                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3927                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3928                                  
  3929                                  ;entry	QUIT				
  3930                                  QUIT:				; INT 20H entry point	
  3931                                  	;MOV	AH,0
  3932 000002DB 30E4                    	xor	ah,ah ; 08/07/2018
  3933 000002DD EB36                    	JMP     SHORT SAVREGS
  3934                                  
  3935                                  ; ---------------------------------------------------------------------------
  3936                                  
  3937                                  	; The system call in AH is out of the range that we know how
  3938                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3939                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3940                                  	; error as this may break some programs compatability.
  3941                                  
  3942                                  BADCALL:
  3943                                          ;MOV	AL,0
  3944 000002DF 30C0                    	xor	al,al ; 08/07/2018
  3945                                  IRETT:	; 06/05/2019
  3946                                  _IRET:
  3947 000002E1 CF                              IRET
  3948                                  
  3949                                  ; ---------------------------------------------------------------------------
  3950                                  
  3951                                  ; 01/05/2019 - Retro DOS v4.0
  3952                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3953                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3954                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3955                                  
  3956                                  	; An alternative method of entering the system is to perform a
  3957                                  	; CALL 5 in the program segment prefix with the contents of CL
  3958                                  	; indicating what system call the user would like. A subset of
  3959                                  	; the possible system calls is allowed here only the
  3960                                  	; CPM-compatible calls may get dispatched.
  3961                                  
  3962                                  		; System call entry point and dispatcher
  3963                                  CALL_ENTRY:
  3964 000002E2 1E                      	push	DS
  3965                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3966 000002E3 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3967 000002E8 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3968                                  
  3969 000002EC 58                              POP     AX                      ; IP from the long call at 5
  3970 000002ED 58                              POP     AX                      ; Segment from the long call at 5
  3971 000002EE 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3972                                  
  3973                                  		; Re-order the stack to simulate an interrupt 21.
  3974                                  
  3975 000002F2 9C                      	PUSHF				; Start re-ordering the stack
  3976 000002F3 FA                      	CLI
  3977 000002F4 50                              PUSH    AX                      ; Save segment
  3978 000002F5 FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3979                                  	; 04/11/2022
  3980                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3981                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3982 000002F9 FF36[EC05]              	push	word [SAVEDS]
  3983 000002FD 1F                      	pop	ds
  3984                                  	;
  3985                                  	;cmp	cl,36
  3986 000002FE 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3987 00000301 77DC                            JA      SHORT BADCALL
  3988 00000303 88CC                            MOV     AH,CL
  3989                                  	; 08/07/2018
  3990 00000305 EB0E                    	jmp	short SAVREGS
  3991                                  
  3992                                  ; ---------------------------------------------------------------------------
  3993                                  
  3994                                  ; 01/05/2019 - Retro DOS v4.0
  3995                                  
  3996                                  	; This is the normal INT 21 entry point. We first perform a
  3997                                  	; quick test to see if we need to perform expensive DOS-entry
  3998                                  	; functions. Certain system calls are done without interrupts
  3999                                  	; being enabled.
  4000                                  
  4001                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4002                                  
  4003                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4004                                  ; 04/11/2022
  4005                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4006                                  
  4007                                  COMMAND:
  4008                                  	; 22/12/2022
  4009 00000307 FA                      	cli
  4010                                  
  4011                                  	; 01/05/2019 - Retro DOS v4.0
  4012                                  	; 08/07/2018 - Retro DOS v3.0
  4013                                  
  4014                                  ; 22/12/2022
  4015                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4016                                  	;IF	NOT IBM
  4017 00000308 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4018 0000030B 7203                    	JB	SHORT NOTOEM
  4019 0000030D E97F01                  	JMP	_$SET_OEM_HANDLER
  4020                                  
  4021                                  NOTOEM:
  4022                                  	;ENDIF
  4023                                  
  4024                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4025                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4026                                  
  4027                                  	; 22/12/2022
  4028                                  	;cli	; 08/07/2018
  4029                                  
  4030                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4031                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4032                                  	; 04/11/2022
  4033 00000310 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4034                                  	;JBE	SHORT SAVREGS
  4035 00000313 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4036                                  
  4037                                  	; 31/05/2019
  4038                                  
  4039                                  	; The following set of calls are issued by the server at
  4040                                  	; *arbitrary* times and, therefore, must be executed on
  4041                                  	; the user's entry stack and executed with interrupts off.
  4042                                  
  4043                                  SAVREGS:
  4044                                  	; 01/05/2019 - Retro DOS v4.0
  4045                                  	; 10/08/2018
  4046                                  	; 08/07/2018 - Retro DOS v3.0
  4047 00000315 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4048                                  	;;je	_$SET_CTRL_C_TRAPPING
  4049                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4050 00000318 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4051                                  	; 04/11/2022
  4052 0000031A 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031C 80FC64                  	cmp	ah,64h			; Check Max case number
  4054 0000031F 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4055 00000321 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4056 00000323 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4057 00000326 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4058 00000328 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4059 0000032B 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4060 0000032D 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4061 00000330 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4062                                  
  4063                                  SaveAllRegs:
  4064                                  	; 01/05/2019 - Retro DOS v4.0
  4065                                  
  4066 00000332 06                              push	ES
  4067 00000333 1E                      	push	DS
  4068 00000334 55                      	push	BP
  4069 00000335 57                      	push	DI
  4070 00000336 56                      	push	SI
  4071 00000337 52                      	push	DX
  4072 00000338 51                      	push	CX
  4073 00000339 53                      	push	BX
  4074 0000033A 50                      	push	AX
  4075                                  
  4076 0000033B 8CD8                    	mov	AX,DS
  4077                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4078 0000033D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4079 00000342 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4080 00000345 891E[EA05]              	mov	[SAVEBX],BX
  4081                                  
  4082                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4083                                  	
  4084                                  	; 08/07/2018 - Retro DOS v3.0        
  4085                                  	;xor     ax,ax
  4086                                  	;mov     [USER_ID],ax
  4087                                  	;mov     ax,[CurrentPDB]
  4088                                  	;mov     [PROC_ID],ax
  4089                                  
  4090                                  	; 01/05/2019
  4091                                  
  4092                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4093                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4094                                  	; this!!!
  4095                                  
  4096 00000349 A1[8405]                	MOV     AX,[USER_SP]
  4097 0000034C A3[F205]                        MOV     [NSP],AX
  4098 0000034F A1[8605]                        MOV     AX,[USER_SS]
  4099 00000352 A3[F005]                        MOV     [NSS],AX
  4100                                  
  4101 00000355 31C0                    	xor	AX,AX ; 0
  4102 00000357 A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4103                                  
  4104 0000035A F606[3010]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4105 0000035F 7503                    	jnz	short set_indos_flag	; if win386 present
  4106 00000361 A3[3E03]                	mov	[USER_ID],AX
  4107                                  set_indos_flag:
  4108 00000364 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4109                                  
  4110 00000368 8926[8405]                      MOV     [USER_SP],SP
  4111 0000036C 8C16[8605]                      MOV     [USER_SS],SS
  4112                                  
  4113 00000370 A1[3003]                	mov	AX,[CurrentPDB]
  4114 00000373 A3[3C03]                	mov	[PROC_ID],AX
  4115 00000376 8ED8                    	mov	DS,AX
  4116 00000378 58                      	pop	AX
  4117 00000379 50                      	push	AX
  4118                                  
  4119                                  	; save user stack in his area for later returns (possibly from EXEC)
  4120                                  
  4121 0000037A 89262E00                        MOV     [PDB.USER_STACK],SP
  4122 0000037E 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4123                                  
  4124                                  	; 18/07/2018
  4125                                  	;mov	byte [CS:FSHARING], 0
  4126                                  
  4127                                  	;MOV     BX,CS			; no holes here.
  4128                                  	;MOV     SS,BX
  4129                                  
  4130                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4131 00000382 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4132                                  					;entry	REDISP
  4133                                  REDISP:
  4134 00000387 BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4135 0000038A FB                              STI                             ; stack is in our space now...
  4136                                  
  4137 0000038B 8CD3                    	mov	bx,ss
  4138 0000038D 8EDB                    	mov	ds,bx
  4139                                  
  4140 0000038F 93                      	xchg	ax,bx
  4141                                  
  4142 00000390 31C0                    	xor	ax,ax ; 0
  4143                                  
  4144                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4145                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4146                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4147                                  
  4148                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4149                                  
  4150                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4151                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4152                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4153                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4154                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4155                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4156                                  	;inc	ax
  4157                                  	;;inc	AL			; AL = 1
  4158                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4159                                  
  4160                                  	; 15/12/2022
  4161 00000392 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4162                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4163 00000395 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4164 0000039B A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4165                                  	;mov	byte [IDLEINT],1
  4166 0000039E A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4167 000003A1 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4168 000003A4 40                      	inc	ax
  4169                                  	;inc	al			; AL = 1
  4170 000003A5 A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4171                                  
  4172 000003A8 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4173                                  
  4174 000003A9 88E3                    	MOV     BL,AH			
  4175 000003AB D1E3                            SHL     BX,1			; 2 bytes per call in table
  4176                                         
  4177 000003AD FC                      	CLD
  4178                                  		; Since the DOS maintains mucho state information across system
  4179                                  		; calls, we must be very careful about which stack we use.
  4180                                  		; First, all abort operations must be on the disk stack. This
  4181                                  		; is due to the fact that we may be hitting the disk (close
  4182                                  		; operations, flushing) and may need to report an INT 24.
  4183                                          
  4184 000003AE 08E4                    	OR      AH,AH
  4185 000003B0 7416                            JZ      SHORT DSKROUT		; ABORT
  4186                                  
  4187                                          ;CMP	AH,12
  4188                                          ;JBE	SHORT IOROUT		; Character I/O
  4189                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4190                                          ;JZ	SHORT IOROUT
  4191                                          ;CMP	AH,SET_CURRENT_PDB
  4192                                          ;JNZ	SHORT DSKROUT
  4193                                  
  4194                                  		; Second, PRINT and PSPRINT and the server issue
  4195                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4196                                  		; This call MUST, therefore, use the AUXSTACK.
  4197                                  
  4198                                  	; 10/08/2018
  4199 000003B2 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4200 000003B5 7439                    	je      short DISPCALL
  4201                                  	
  4202                                  	; 01/05/2019
  4203                                  	
  4204                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4205                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4206                                  
  4207 000003B7 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4208 000003BA 770C                    	ja      short DSKROUT
  4209                                  
  4210                                  IOROUT:
  4211                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4212                                  	; (ss: prefix was not needed here! ds=ss)
  4213                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4214                                  	; 15/12/2022
  4215 000003BC 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4216 000003C1 752D                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4217 000003C3 BC[A00A]                        MOV     SP,IOSTACK
  4218 000003C6 EB28                            JMP     SHORT DISPCALL
  4219                                  
  4220                                  		; We are on a system call that is classified as "the rest".
  4221                                  		; We place ourselves onto the DSKSTACK and away we go.
  4222                                  		; We know at this point:
  4223                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4224                                  		;    ErrorMode and WpErr
  4225                                  		; *  That there can be no critical sections in effect.
  4226                                  		;    We signal the server to remove all the resources.
  4227                                  
  4228                                  DSKROUT:
  4229                                  	; 01/01/2024
  4230                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4231                                  	; 08/07/2018 - Retro DOS v3.0
  4232 000003C8 A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4233                                  	; 01/01/2024
  4234                                  	;mov	byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4235                                  	;MOV	BYTE [WPERR],-1		; error mode, so good place to
  4236                                  	                   		; make sure flags are reset
  4237 000003CB C706[2203]FF01          	mov	word [WPERR],1FFh ; (PCDOS 7.1 IBMDOS.COM))
  4238                                  
  4239 000003D1 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003D6 50                      	push    ax
  4250 000003D7 B482                    	mov     ah,82h			; Release all resource information
  4251 000003D9 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003DB 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003DC C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003E1 BC[2009]                	MOV     SP,DSKSTACK
  4269 000003E4 F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003E9 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003EB 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003EC E8404B                          CALL	DSKSTATCHK
  4275 000003EF 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F0 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003F5 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 000003F9 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 000003FD 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 00000402 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000408 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000409 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 0000040E 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 00000413 7526                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 00000415 FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000419 8E16[8605]              	mov	ss,[USER_SS]
  4323 0000041D 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 00000421 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  
  4331                                  	; 15/12/2022
  4332 00000423 884600                  	MOV	[BP],AL	; mov [bp+0],al
  4333                                  	
  4334                                  	;MOV	AX,[NSP]
  4335                                          ;MOV	[USER_SP],AX
  4336                                          ;MOV	AX,[NSS]
  4337                                          ;MOV	[USER_SS],AX
  4338                                  	; 01/01/2024
  4339 00000426 C406[F005]              	les	ax,[NSS] ; (PCDOS 7.1 IBMDOS.COM)
  4340 0000042A A3[8605]                	mov	[USER_SS],ax
  4341 0000042D 8C06[8405]              	mov	[USER_SP],es
  4342                                  
  4343 00000431 58                      	pop	AX
  4344 00000432 5B                      	pop	BX
  4345 00000433 59                      	pop	CX
  4346 00000434 5A                      	pop	DX
  4347 00000435 5E                      	pop	SI
  4348 00000436 5F                      	pop	DI
  4349 00000437 5D                      	pop	BP
  4350 00000438 1F                      	pop	DS
  4351 00000439 07                      	pop	ES
  4352                                  
  4353 0000043A CF                              IRET
  4354                                  
  4355                                  disa20:	   				; M068 - Start
  4356 0000043B 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4357 0000043F 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4358 00000443 75D0                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4359                                  					;    a20 off
  4360                                  					; Y: turn a20 off and dec a20off_count
  4361 00000445 FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4362                                   					; Start - M004
  4363 00000449 1E                      	push	ds			; segment of stub
  4364 0000044A BB[2D11]                	mov	bx,disa20_iret		; offset in stub
  4365 0000044D 53                      	push	bx
  4366 0000044E CB                      	retf	  			; go to stub
  4367                                  					; End - M004
  4368                                  ;SYSTEM_CALL ENDP
  4369                                  
  4370                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4371                                  ; 04/11/2022
  4372                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4373                                  
  4374                                  ; ==========================================================================
  4375                                  ;
  4376                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4377                                  ; the stack prior to giving the user control
  4378                                  ;
  4379                                  ; ==========================================================================
  4380                                  
  4381                                  ; 01/05/2019 - Retro DOS v4.0
  4382                                  
  4383                                          ;procedure restore_world,NEAR
  4384                                  restore_world:
  4385                                  	;getdseg <es>		; es -> dosdata
  4386 0000044F 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4387                                  
  4388 00000454 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4389                                  
  4390 00000459 58                              POP     AX
  4391 0000045A 5B                              POP     BX
  4392 0000045B 59                              POP     CX
  4393 0000045C 5A                              POP     DX
  4394 0000045D 5E                              POP     SI
  4395 0000045E 5F                              POP     DI
  4396 0000045F 5D                              POP     BP
  4397 00000460 1F                              POP     DS
  4398                                  
  4399 00000461 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4400                                  
  4401                                  ;restore_world	ENDP
  4402                                  
  4403                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4404                                  
  4405                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4406                                  ; 04/11/2022
  4407                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4408                                  
  4409                                  ; ==========================================================================
  4410                                  ;
  4411                                  ; Save_World saves complete registers on the stack
  4412                                  ;
  4413                                  ; ==========================================================================
  4414                                  
  4415                                          ;procedure save_world,NEAR
  4416                                  save_world:
  4417                                  	;getdseg <es>		; es -> dosdata
  4418 00000466 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4419                                  
  4420 0000046B 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4421                                  
  4422                                  	; 12/05/2019
  4423                                          
  4424 00000470 1E                      	PUSH    DS
  4425 00000471 55                              PUSH    BP
  4426 00000472 57                              PUSH    DI
  4427 00000473 56                              PUSH    SI
  4428 00000474 52                              PUSH    DX
  4429 00000475 51                              PUSH    CX
  4430 00000476 53                              PUSH    BX
  4431 00000477 50                              PUSH    AX
  4432                                  
  4433 00000478 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4434                                  
  4435 0000047D 55                      	push	BP		
  4436 0000047E 89E5                    	mov	BP,SP
  4437 00000480 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4438 00000483 5D                      	pop	BP
  4439                                  	
  4440 00000484 C3                      	retn
  4441                                  
  4442                                  ;save_world	ENDP
  4443                                  
  4444                                  ; 01/05/2019
  4445                                  
  4446                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4447                                  ; 04/11/2022
  4448                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4449                                  
  4450                                  ; ==========================================================================
  4451                                  ;
  4452                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4453                                  ;
  4454                                  ; ==========================================================================
  4455                                  
  4456                                          ;procedure get_user_stack,NEAR
  4457                                  Get_User_Stack:
  4458                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4459 00000485 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4460 0000048A C536[8405]                      lds	si,[USER_SP]
  4461 0000048E C3                      	retn
  4462                                  
  4463                                  ;get_user_stack  ENDP
  4464                                  
  4465                                  ; 22/12/2022
  4466                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4467                                  ;%if 0
  4468                                  
  4469                                  ; ---------------------------------------------------------------------------
  4470                                  ;
  4471                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4472                                  ; Inputs:
  4473                                  ;	User registers, User Stack, INTS disabled
  4474                                  ;	If CALL F8, DS:DX is new handler address
  4475                                  ; Function:
  4476                                  ;	Process OEM INT 21 extensions
  4477                                  ; Outputs:
  4478                                  ;	Jumps to OEM_HANDLER if appropriate
  4479                                  ;
  4480                                  ; ---------------------------------------------------------------------------
  4481                                  
  4482                                  ;IF	NOT IBM
  4483                                  
  4484                                  _$SET_OEM_HANDLER:
  4485                                  	; 01/05/2019 - Retro DOS v4.0
  4486                                  	
  4487                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4488                                  	;(jb	short NOTOOEM)
  4489                                  
  4490 0000048F 06                      	push	es ; *
  4491                                  	;getdseg <es>			; es -> dosdata
  4492 00000490 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4493                                  
  4494 00000495 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4495                                  						; (message) request	
  4496                                  	; AH = 0F8h = SET OEM HANDLER
  4497                                  
  4498 00000497 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4499 0000049C 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4500                                  
  4501 000004A1 07                      	pop	es ; *
  4502                                  
  4503 000004A2 CF                      	IRET                            ; Quick return, Have altered no registers
  4504                                  
  4505                                  check_trueversion_request:
  4506                                  	; 18/07/2019 - Retro DOS v3.0
  4507                                  
  4508                                  	; Retro DOS v2.0 - 20/04/2018
  4509 000004A3 83F8FF                  	CMP	AX,0FFFFh
  4510                                  	; 18/07/2018
  4511 000004A6 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4512                                  
  4513                                  	; 01/05/2019
  4514 000004A8 07                      	pop	es ; *
  4515                                  
  4516 000004A9 B40E                    	mov	ah,0Eh
  4517                                  
  4518                                  	; Retro DOS v4.0 feature only!
  4519 000004AB 81FBA101                	cmp	bx,417  ; Signature to bypass
  4520                                  			; Retro DOS true version message	
  4521 000004AF 7414                    	je	short true_version_iret
  4522                                  
  4523 000004B1 56                      	push	si
  4524 000004B2 53                      	push	bx
  4525                                  
  4526 000004B3 BE[BF00]                	mov	si,RETRODOSMSG
  4527                                  wrdosmsg:
  4528                                  	;movb	ah,0Eh
  4529 000004B6 BB0700                  	mov	bx,7
  4530                                  wrdosmsg_nxt:
  4531 000004B9 2EAC                    	cs	lodsb
  4532 000004BB 3C24                    	cmp	al,'$'
  4533 000004BD 7404                    	je	short wrdosmsg_ok		
  4534 000004BF CD10                    	int	10h
  4535 000004C1 EBF6                    	jmp	short wrdosmsg_nxt
  4536                                  
  4537                                  wrdosmsg_ok:
  4538 000004C3 5B                      	pop	bx
  4539 000004C4 5E                      	pop	si
  4540                                  
  4541                                  true_version_iret:
  4542                                  	; ah = 0Eh
  4543                                  	;mov	al,40h ; Retro DOS v4.0
  4544                                  	; 
  4545 000004C5 B041                    	mov	al,41h ; Retro DOS v4.1 
  4546 000004C7 CF                      	iret
  4547                                  
  4548                                  	; If above F8 try to jump to handler
  4549                                  
  4550                                  DO_OEM_FUNC:
  4551                                  	; 01/05/2019
  4552 000004C8 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4553 000004CE 7504                    	JNE     short OEM_JMP
  4554 000004D0 07                      	pop	es ; *
  4555 000004D1 E90BFE                  	JMP     BADCALL                 ; Handler not initialized
  4556                                  OEM_JMP:
  4557 000004D4 06                      	push	es
  4558 000004D5 1F                      	pop	ds ; DOSDATA segment !
  4559 000004D6 07                      	pop	es ; *
  4560                                  
  4561                                  	; 22/12/2022
  4562 000004D7 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4563                                  
  4564 000004D8 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4565                                  
  4566                                  ;       ENDIF
  4567                                  
  4568                                  ; ---------------------------------------------------------------------------
  4569                                  
  4570                                  ;%endif
  4571                                  
  4572                                  ;============================================================================
  4573                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4574                                  ;============================================================================
  4575                                  ; 17/07/2018 - Retro DOS v3.0
  4576                                  
  4577                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4578                                  ;	NAME	IBMCODE
  4579                                  
  4580                                  ;BREAK <NullDev -- Driver for null device>
  4581                                  
  4582                                  ; ROMDOS note:
  4583                                  ;	NUL device driver used to be here, but it was removed and placed in
  4584                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4585                                  ;	header, which is also in DOSDATA.
  4586                                  
  4587                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4588                                  
  4589                                  ;----------------------------------------------------------------------------
  4590                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4591                                  ;----------------------------------------------------------------------------
  4592                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4593                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4594                                  
  4595                                  ;Public MSC001S,MSC001E
  4596                                  ;MSC001S label byte
  4597                                  	;IF	IBM
  4598                                  ; Codes returned by BIOS
  4599                                  ERRIN:
  4600 000004DC 02                      	DB	2			; NO RESPONSE
  4601 000004DD 06                      	DB	6			; SEEK FAILURE
  4602 000004DE 0C                      	DB	12			; GENERAL ERROR
  4603 000004DF 04                      	DB	4			; BAD CRC
  4604 000004E0 08                      	DB	8			; SECTOR NOT FOUND
  4605 000004E1 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4606                                  ERROUT:
  4607                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4608 000004E2 80                      	DB	80H			; NO RESPONSE
  4609 000004E3 40                      	DB	40H			; Seek failure
  4610 000004E4 02                      	DB	2			; Address Mark not found
  4611 000004E5 10                      	DB	10H			; BAD CRC
  4612 000004E6 04                      	DB	4			; SECTOR NOT FOUND
  4613 000004E7 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4614                                  
  4615                                  NUMERR	EQU	$-ERROUT
  4616                                  	;ENDIF
  4617                                  ;MSC001E label byte
  4618                                  ;----------------------------------------------------------------------------
  4619                                  
  4620                                  ;============================================================================
  4621                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4622                                  ;============================================================================
  4623                                  ; 18/07/2018 - Retro DOS v3.0
  4624                                  ; 15/05/2019 - Retro DOS v4.0
  4625                                  
  4626                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4627                                  
  4628                                  ;   AbsSetup - setup for abs disk functions
  4629                                  ;----------------------------------------------------------------------------
  4630                                  
  4631                                  AbsSetup:
  4632                                  	; 02/01/2024
  4633 000004E8 1E                      	push	ds ; *
  4634 000004E9 16                      	push	ss
  4635 000004EA 1F                      	pop	ds
  4636 000004EB FE06[2103]              	inc	byte [INDOS]
  4637                                  	;INC	byte [SS:INDOS]		; SS override
  4638 000004EF FB                      	STI
  4639 000004F0 FC                      	CLD
  4640                                  	; 02/01/2024
  4641                                  	;PUSH	DS
  4642                                  	;push	ss
  4643                                  	;pop	ds
  4644 000004F1 E80901                  	CALL	GETBP
  4645                                  	; 02/01/2024
  4646 000004F4 1F                      	pop	ds ; *
  4647 000004F5 7239                    	JC	short errdriv 		; PM. error drive ;AN000;
  4648                                  	;mov	word [es:bp+1Fh]
  4649 000004F7 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4650                                  
  4651                                  	; 02/01/2024
  4652                                  ;errdriv:
  4653                                  ;	POP	DS
  4654                                  ;	jnc	short AbsSetup2
  4655                                  ;AbsSetup_retn:
  4656                                  ;	retn
  4657                                  
  4658                                  AbsSetup2:
  4659                                  	; 15/05/2019 - Retro DOS v4.0
  4660                                  	; MSDOS 6.0
  4661                                  					; SS override
  4662 000004FD 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4663 00000504 E82F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4664 00000507 7227                    	jc	short AbsSetup_retn
  4665 00000509 E89C54                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4666                                  
  4667                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4668 0000050C 1E                      	PUSH	DS
  4669 0000050D 56                      	PUSH	SI
  4670 0000050E 50                      	PUSH	AX
  4671                                  
  4672 0000050F 16                      	push	ss
  4673 00000510 1F                      	pop	ds
  4674                                  	
  4675 00000511 BE[BE03]                	MOV	SI,OPENBUF
  4676 00000514 8804                    	MOV	[SI],AL
  4677 00000516 800441                  	ADD	BYTE [SI],"A"
  4678 00000519 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4679 0000051E B80003                  	MOV	AX,0300H
  4680 00000521 F8                      	CLC
  4681 00000522 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4682                                  		
  4683                                  		; 04/11/2022
  4684                                  		; (INT 2Ah - AX = 0300h)
  4685                                  		; Microsoft Networks - CHECK DIRECT I/O
  4686                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4687                                  		;    only drive specifier--must include the colon)
  4688                                  		; Return: CF clear if absolute disk access allowed
  4689                                  
  4690 00000524 58                      	POP	AX
  4691 00000525 5E                      	POP	SI
  4692 00000526 1F                      	POP	DS
  4693 00000527 7307                    	jnc	short AbsSetup_retn
  4694                                  
  4695                                  	;mov	word [ss:EXTERR],32h
  4696 00000529 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4697                                  errdriv:	; 02/01/2024
  4698                                  AbsSetup_retn:
  4699 00000530 C3                      	retn
  4700                                  
  4701                                  ;---------------------------------------------------------------------------
  4702                                  ;
  4703                                  ; Procedure Name : ABSDRD
  4704                                  ;
  4705                                  ; Interrupt 25 handler. Performs absolute disk read.
  4706                                  ; Inputs:	AL - 0-based drive number
  4707                                  ;		DS:BX point to destination buffer
  4708                                  ;		CX number of logical sectors to read
  4709                                  ;		DX starting logical sector number (0-based)
  4710                                  ; Outputs:	Original flags still on stack
  4711                                  ;		Carry set
  4712                                  ;		    AH error from BIOS
  4713                                  ;		    AL same as low byte of DI from INT 24
  4714                                  ;
  4715                                  ;---------------------------------------------------------------------------
  4716                                          ;procedure   ABSDRD,FAR
  4717                                  ABSDRD:
  4718                                  	; 15/05/2019 - Retro DOS v4.0
  4719                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4720                                  	; 04/11/2022
  4721                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4722                                  	
  4723                                  	; MSDOS 6.0
  4724 00000531 FA                      	CLI
  4725                                  	
  4726                                  ;	set up ds to point to DOSDATA
  4727                                  
  4728 00000532 50                      	push	ax			; preserve AX value
  4729 00000533 8CD8                    	mov	ax,ds			; store DS value in AX
  4730                                  	;getdseg <ds>
  4731 00000535 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4732 0000053A A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4733 0000053D 58                      	pop	ax			; restore AX value
  4734                                  
  4735                                  	; M072:
  4736                                  	; We shall save es on the user stack here. We need to use ES in
  4737                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4738                                  	; time in order to restore the user stack.
  4739                                  
  4740 0000053E 06                      	push	es  ; ****		; M072
  4741                                  
  4742 0000053F 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4743 00000543 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4744                                  
  4745                                  ; 	set up ss to point to DOSDATA
  4746                                  ;
  4747                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4748                                  ; version of the getdseg macro with the SS register! An interrupt will
  4749                                  ; sneak through.
  4750                                  
  4751                                  ;ifndef ROMDOS
  4752                                  	;getdseg <ss>			; cli in entry of routine
  4753 00000547 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4754                                  ;else
  4755                                  ;	mov	ds, cs:[BioDataSeg]
  4756                                  ;	assume	ds:bdata
  4757                                  ;
  4758                                  ;	mov	ss, ds:[DosDataSg]
  4759                                  ;	assume	ss:DOSDATA
  4760                                  ;
  4761                                  ;endif ; ROMDOS
  4762                                  
  4763 0000054C BC[2009]                	MOV	SP,DSKSTACK
  4764                                  
  4765 0000054F 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4766                                  
  4767 00000553 06                      	push	es ; *** (MSDOS 6.21)
  4768 00000554 E80FFF                  	call	save_world		; save all regs
  4769                                  
  4770 00000557 06                      	PUSH	ES ; **
  4771 00000558 E88DFF                  	CALL	AbsSetup
  4772 0000055B 723D                    	JC	short ILEAVE
  4773                                  
  4774                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4775                                  	;  the secondary cache. The secondary cache does not check for media
  4776                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4777                                  	;  read, and get data from the previous disk. To get around this,
  4778                                  	;  we just won't use the secondary cache for absolute disk reads.
  4779                                  	;                                                      -mw 8/5/88
  4780                                  
  4781                                  	;EnterCrit critDisk
  4782 0000055D E8870D                  	call	ECritDisk
  4783 00000560 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4784                                  	;LeaveCrit critDisk
  4785 00000566 E8990D                  	call	LCritDisk
  4786                                  
  4787                                          ;invoke	DSKREAD
  4788 00000569 E8E130                  	CALL	DSKREAD
  4789 0000056C 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4790                                  
  4791 0000056E 89F9                            mov     cx,di
  4792 00000570 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4793 00000575 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4794                                  
  4795                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4796                                  ;            sectors, also termed an "Extent".)
  4797                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4798                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4799                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4800                                  ;
  4801                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4802                                  ;	buffers must be "read" into the transfer memory block, so that the
  4803                                  ;       transfer memory reflects the most recent data.
  4804                                  
  4805                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4806 0000057A E81433                          call	DskRdBufScan
  4807 0000057D EB1B                    	jmp     short ILEAVE
  4808                                  
  4809                                  TLEAVE:
  4810 0000057F 7419                    	JZ	short ILEAVE
  4811                                  
  4812                                  ERR_LEAVE:				; M039
  4813                                  	; 15/07/2018 - Retro DOS v3.0
  4814                                          ;IF	IBM
  4815                                  ; Translate the error code to ancient 1.1 codes
  4816 00000581 06                              PUSH    ES ; *
  4817 00000582 0E                              PUSH    CS
  4818 00000583 07                              POP     ES
  4819 00000584 30E4                            XOR     AH,AH			; Nul error code
  4820                                  	;mov	cx,6
  4821 00000586 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4822 00000589 BF[DC04]                        MOV     DI,ERRIN		; Point to error conditions
  4823 0000058C F2AE                            REPNE   SCASB
  4824 0000058E 7504                            JNZ     SHORT LEAVECODE		; Not found
  4825                                  	;mov	ah,[ES:DI+5]
  4826 00000590 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4827                                  LEAVECODE:
  4828 00000594 07                              POP     ES ; *
  4829                                  	; 15/05/2019 - Retro DOS v4.0
  4830 00000595 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4831                                          ;ENDIF
  4832                                  
  4833 00000599 F9                              STC
  4834                                  ILEAVE:
  4835                                  	; 15/05/2019
  4836 0000059A 07                              POP     ES ; **
  4837 0000059B E8B1FE                  	call	restore_world
  4838 0000059E 07                              pop	es ; *** (MSDOS 6.21)
  4839 0000059F FA                      	CLI
  4840 000005A0 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4841 000005A4 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4842 000005A9 16                              push	ss			; M072 - Start
  4843 000005AA 07                      	pop	es			; es - dosdata
  4844 000005AB 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4845 000005B0 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4846 000005B5 07                      	pop	es  ; ****		; Note es was saved on user
  4847                                  					; stack at entry 
  4848                                  					; M072 - End
  4849 000005B6 FB                              STI
  4850 000005B7 CB                      	RETF   ; ! FAR return !
  4851                                  
  4852                                  ;ABSDRD	ENDP
  4853                                  
  4854                                  ;---------------------------------------------------------------------------
  4855                                  ;
  4856                                  ; Procedure Name : ABSDWRT
  4857                                  ;
  4858                                  ; Interrupt 26 handler. Performs absolute disk write.
  4859                                  ; Inputs:	AL - 0-based drive number
  4860                                  ;		DS:BX point to source buffer
  4861                                  ;		CX number of logical sectors to write
  4862                                  ;		DX starting logical sector number (0-based)
  4863                                  ; Outputs:	Original flags still on stack
  4864                                  ;		Carry set
  4865                                  ;		    AH error from BIOS
  4866                                  ;		    AL same as low byte of DI from INT 24
  4867                                  ;
  4868                                  ;---------------------------------------------------------------------------
  4869                                          ;procedure   ABSDWRT,FAR
  4870                                  ABSDWRT:
  4871                                  	; 15/05/2019 - Retro DOS v4.0
  4872                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4873                                  	; 04/11/2022
  4874                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4875                                  
  4876 000005B8 FA                      	CLI
  4877                                  
  4878                                  ;	set up ds to point to DOSDATA
  4879                                  
  4880 000005B9 50                      	push	ax
  4881 000005BA 8CD8                    	mov	ax,ds
  4882                                  	;getdseg <ds>
  4883 000005BC 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4884 000005C1 A3[0A0D]                	mov	[TEMPSEG],ax
  4885 000005C4 58                      	pop	ax
  4886                                  
  4887                                  	; M072:
  4888                                  	; We shall save es on the user stack here. We need to use ES in
  4889                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4890                                  	; time in order to restore the user stack.
  4891                                  
  4892 000005C5 06                      	push	es ; ****		; M072
  4893                                  
  4894 000005C6 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4895 000005CA 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4896                                  
  4897                                  	; set up ss to point to DOSDATA
  4898                                  	;
  4899                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4900                                  	; ROMDOS version of the getdseg macro with the SS register!
  4901                                  	; An interrupt will sneak through.
  4902                                  
  4903                                  ;ifndef ROMDOS
  4904                                  	;getdseg <ss>			; cli in entry of routine
  4905 000005CE 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4906                                  ;else
  4907                                  ;	mov	ds, cs:[BioDataSeg]
  4908                                  ;	assume	ds:bdata
  4909                                  ;
  4910                                  ;	mov	ss, ds:[DosDataSg]
  4911                                  ;	assume	ss:DOSDATA
  4912                                  ;
  4913                                  ;endif ; ROMDOS
  4914                                  
  4915 000005D3 BC[2009]                	MOV	SP,DSKSTACK
  4916                                  		; we are now switched to DOS's disk stack
  4917                                  
  4918 000005D6 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4919                                  
  4920 000005DA 06                      	push	es ; *** (MSDOS 6.21)
  4921                                  
  4922 000005DB E888FE                  	call	save_world	      	; save all regs
  4923                                  
  4924 000005DE 06                      	PUSH	ES ; **
  4925 000005DF E806FF                  	CALL	AbsSetup
  4926 000005E2 72B6                    	JC	short ILEAVE
  4927                                  
  4928                                  	;EnterCrit critDisk
  4929 000005E4 E8000D                  	call	ECritDisk
  4930 000005E7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4931 000005ED E88C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4932                                  	;LeaveCrit critDisk
  4933 000005F0 E80F0D                  	call	LCritDisk
  4934                                  
  4935                                  ;M039
  4936                                  ;       DS:BX = transfer address (source data address).
  4937                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4938                                  ;	     sectors, also termed an "Extent".)
  4939                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4940                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4941                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4942                                  ;
  4943                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4944                                  ;       written. Note that all the above registers are preserved for
  4945                                  ;       DSKWRITE.
  4946                                  
  4947 000005F3 1E                              push    ds
  4948                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4949 000005F4 E89E35                  	call	DskWrtBufPurge
  4950 000005F7 1F                              pop     ds
  4951                                  ;M039
  4952                                  	;invoke	DSKWRITE
  4953 000005F8 E87630                  	call	DSKWRITE
  4954 000005FB EB82                    	JMP	short TLEAVE
  4955                                  
  4956                                  ;ABSDWRT ENDP
  4957                                  
  4958                                  ;----------------------------------------------------------------------------
  4959                                  ;
  4960                                  ; Procedure Name : GETBP
  4961                                  ;
  4962                                  ; Inputs:
  4963                                  ;	AL = Logical unit number (A = 0)
  4964                                  ; Function:
  4965                                  ;	Find Drive Parameter Block
  4966                                  ; Outputs:
  4967                                  ;	ES:BP points to DPB
  4968                                  ;	[THISDPB] = ES:BP
  4969                                  ;	Carry set if unit number bad or unit is a NET device.
  4970                                  ;		Later case sets extended error error_I24_not_supported
  4971                                  ; No other registers alteredjjj
  4972                                  ;
  4973                                  ;----------------------------------------------------------------------------
  4974                                  
  4975                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4976                                  GETBP:
  4977                                  	; 15/05/2019 - Retro DOS v4.0
  4978                                  	; 11/07/2018 - Retro DOS v3.0
  4979 000005FD 50                      	PUSH	AX
  4980 000005FE 0401                    	ADD	AL,1		; No increment; need carry flag
  4981 00000600 7210                    	JC	SHORT SKIPGET
  4982 00000602 E8D362                  	CALL	GETTHISDRV
  4983                                  	; MSDOS 6.0
  4984 00000605 730B                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4985                                  	
  4986                                  	; 23/03/2024 - Retro DOS v4.1
  4987                                  	;XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4988                                  	;CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4989                                  	;JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4990                                  	;STC				;DCR.			;AN000;
  4991 00000607 B400                    	mov	ah,0	
  4992                                  
  4993 00000609 A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4994 0000060C C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4995                                  SKIPGET:
  4996 00000612 58                      	POP	AX
  4997 00000613 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4998                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4999                                  	;jnc	short getbp_t
  5000                                  	;retn
  5001                                  getbp_t:
  5002 00000615 C42E[A205]              	LES	BP,[THISCDS]
  5003                                  	; 15/12/2022
  5004 00000619 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  5005                                  	; 07/12/2022
  5006                                  	;TEST	WORD [ES:BP+43H],8000H
  5007                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  5008 0000061E 7408                    	JZ	SHORT GETBP_CDS
  5009 00000620 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  5010 00000626 F9                      	STC
  5011                                  GETBP_RETN:
  5012 00000627 C3                      	RETN
  5013                                  
  5014                                  GETBP_CDS:
  5015                                  	;LES	BP,[ES:BP+45H]
  5016 00000628 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  5017                                  GOTDPB:
  5018                                  	; Load THISDPB from ES:BP
  5019 0000062C 892E[8A05]              	MOV	[THISDPB],BP
  5020 00000630 8C06[8C05]              	MOV	[THISDPB+2],ES
  5021 00000634 C3                      	RETN
  5022                                  
  5023                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5024                                  
  5025                                  ;----------------------------------------------------------------------------
  5026                                  ;
  5027                                  ; Procedure Name : SYS_RETURN
  5028                                  ;
  5029                                  ; These are the general system call exit mechanisms. All internal system
  5030                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5031                                  ; is to set the user's flags and set his AX register for return.
  5032                                  ;
  5033                                  ;----------------------------------------------------------------------------
  5034                                  
  5035                                          ;procedure   SYS_RETURN,NEAR
  5036                                  SYS_RETURN:        
  5037                                          ;entry	SYS_RET_OK
  5038                                  SYS_RET_OK:   
  5039 00000635 E84DFE                  	call    Get_User_Stack
  5040                                  		; turn off user's carry flag
  5041                                  SYS_RET_OK_clc: ; 25/06/2019 
  5042                                          ;;and	word [SI+16h],0FFFEh 
  5043                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5044                                          ; 25/06/2019
  5045 00000638 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5046 0000063C EB10                    	JMP     SHORT DO_RET
  5047                                  
  5048                                          ;entry   SYS_RET_ERR
  5049                                  SYS_RET_ERR:        
  5050 0000063E 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5051 00000640 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5052 00000643 E81A00                  	CALL	ErrorMap
  5053                                  
  5054                                  	;entry	From_GetSet
  5055                                  From_GetSet:
  5056 00000646 E83CFE                          call    Get_User_Stack
  5057                                  		 ; signal carry to user
  5058                                  	;;or	word [SI+16h],1
  5059                                  	;OR	word [SI+user_env.user_F],f_Carry
  5060                                  	; 25/06/2019
  5061 00000649 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5062 0000064D F9                      	STC			; also, signal internal error
  5063                                  DO_RET:
  5064                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5065 0000064E 8904                    	MOV	[SI],AX
  5066 00000650 C3                      	RETN
  5067                                  
  5068                                  	;entry	FCB_RET_OK
  5069                                  FCB_RET_OK:
  5070                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5071                                  NO_OP:
  5072 00000651 30C0                    	XOR	AL,AL
  5073 00000653 C3                      	retn
  5074                                  
  5075                                  	;entry	FCB_RET_ERR
  5076                                  FCB_RET_ERR:
  5077 00000654 30E4                    	XOR	AH,AH
  5078 00000656 36A3[2403]              	mov	[ss:EXTERR],AX
  5079 0000065A E80300                  	CALL	ErrorMap
  5080 0000065D B0FF                    	MOV	AL,-1
  5081 0000065F C3                      	retn
  5082                                  
  5083                                  	;entry	ErrorMap
  5084                                  ErrorMap:
  5085 00000660 56                      	PUSH	SI
  5086                                  				; ERR_TABLE_21 is now in DOSDATA
  5087 00000661 BE[DB0D]                	MOV	SI,ERR_TABLE_21
  5088                                  				; SS override for FAILERR and EXTERR
  5089 00000664 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5090 0000066A 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5091                                  		 ; Ooops, this is the REAL reason
  5092                                  	;mov	word [SS:EXTERR],53h
  5093 0000066C 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5094                                  EXTENDED_NORMAL:
  5095 00000673 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5096 00000676 5E                      	POP	SI
  5097 00000677 C3                      	retn
  5098                                  
  5099                                  	;EndProc SYS_RETURN
  5100                                  
  5101                                  ;---------------------------------------------------------------------------
  5102                                  ;
  5103                                  ; Procedure Name : CAL_LK
  5104                                  ;
  5105                                  ; Inputs:
  5106                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5107                                  ;		(DS NEED not be DOSDATA)
  5108                                  ;	[EXTERR] is set with error
  5109                                  ; Function:
  5110                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5111                                  ; Outputs:
  5112                                  ;	[EXTERR_CLASS] set
  5113                                  ;	[EXTERR_ACTION] set
  5114                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5115                                  ; Destroys SI, FLAGS
  5116                                  ;
  5117                                  ;---------------------------------------------------------------------------
  5118                                  
  5119                                  	;procedure CAL_LK,NEAR
  5120                                  CAL_LK:
  5121 00000678 1E                      	PUSH	DS
  5122 00000679 50                      	PUSH	AX
  5123 0000067A 53                      	PUSH	BX
  5124                                  
  5125                                  ;M048	Context DS		; DS:SI -> Table
  5126                                  ;
  5127                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5128                                  ; is DOSDATA
  5129                                  
  5130                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5131                                  	; 15/05/2019 - Retro DOS v4.0
  5132 0000067B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5133                                  
  5134                                  	; 18/07/2018
  5135                                  	;push	ss
  5136                                  	;pop	ds
  5137                                  
  5138 00000680 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5139                                  TABLK1:
  5140 00000684 AC                      	LODSB
  5141                                  
  5142 00000685 3CFF                    	CMP	AL,0FFH
  5143 00000687 7409                    	JZ	short GOT_VALS	; End of table
  5144 00000689 38D8                    	CMP	AL,BL
  5145 0000068B 7405                    	JZ	short GOT_VALS	; Got entry
  5146 0000068D 83C603                  	ADD	SI,3		; Next table entry
  5147                                  	; 15/08/2018
  5148 00000690 EBF2                    	JMP	short TABLK1
  5149                                  
  5150                                  GOT_VALS:
  5151 00000692 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5152                                  
  5153 00000693 80FCFF                  	CMP	AH,0FFH
  5154 00000696 7404                    	JZ	short NO_SET_ACT
  5155 00000698 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5156                                  NO_SET_ACT:
  5157 0000069C 3CFF                    	CMP	AL,0FFH
  5158 0000069E 7403                    	JZ	short NO_SET_CLS
  5159 000006A0 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5160                                  NO_SET_CLS:
  5161 000006A3 AC                      	LODSB			; Get LOCUS
  5162                                  
  5163 000006A4 3CFF                    	CMP	AL,0FFH
  5164 000006A6 7403                    	JZ	short NO_SET_LOC
  5165 000006A8 A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5166                                  NO_SET_LOC:
  5167 000006AB 5B                      	POP	BX
  5168 000006AC 58                      	POP	AX
  5169 000006AD 1F                      	POP	DS
  5170 000006AE C3                      	retn
  5171                                  
  5172                                  	;EndProc CAL_LK
  5173                                  
  5174                                  ;---------------------------------------------------------------------------
  5175                                  ;
  5176                                  ; Procedure Name : ETAB_LK
  5177                                  ;
  5178                                  ; Inputs:
  5179                                  ;	AX is error code
  5180                                  ;	[USER_IN_AX] has AH value of system call involved
  5181                                  ; Function:
  5182                                  ;	Make sure error code is appropriate to this call.
  5183                                  ; Outputs:
  5184                                  ;	AX MAY be mapped error code
  5185                                  ;	[EXTERR] = Input AX
  5186                                  ; Destroys ONLY AX and FLAGS
  5187                                  ;
  5188                                  ;---------------------------------------------------------------------------
  5189                                  
  5190                                  	;procedure ETAB_LK,NEAR
  5191                                  
  5192                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5193 000006AF 1E                      	PUSH	DS
  5194 000006B0 56                      	PUSH	SI
  5195 000006B1 51                      	PUSH	CX
  5196 000006B2 53                      	PUSH	BX
  5197                                  
  5198                                  	;Context DS			; SS is DOSDATA
  5199                                  
  5200 000006B3 16                      	push	ss
  5201 000006B4 1F                      	pop	ds
  5202                                  
  5203 000006B5 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5204                                  
  5205                                  					; I21_MAP_E_TAB is now in DOSCODE
  5206 000006B8 BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5207 000006BB 88C7                    	MOV	BH,AL			; Real code to BH
  5208 000006BD 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5209                                  TABLK2:
  5210                                  	; 15/05/2019 - Retro DOS v4.0
  5211 000006C1 2E                      	cs
  5212 000006C2 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5213                                  	
  5214                                  	; 18/07/2018 - Retro DOS v3.0
  5215                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5216                                  
  5217 000006C3 3CFF                    	CMP	AL,0FFH 		; End of table?
  5218 000006C5 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5219 000006C7 38D8                    	CMP	AL,BL			; Found call?
  5220 000006C9 740C                    	JZ	short GOT_CALL		; Yes
  5221 000006CB 86E0                    	XCHG	AH,AL			; Count to AL
  5222 000006CD 30E4                    	XOR	AH,AH			; Make word for add
  5223 000006CF 01C6                    	ADD	SI,AX			; Next table entry
  5224 000006D1 EBEE                    	JMP	short TABLK2
  5225                                  
  5226                                  NOT_IN_TABLE:
  5227 000006D3 88F8                    	MOV	AL,BH			; Restore original code
  5228 000006D5 EB0C                    	JMP	SHORT NO_MAP
  5229                                  
  5230                                  GOT_CALL:
  5231 000006D7 88E1                    	MOV	CL,AH
  5232 000006D9 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5233                                  CHECK_CODE:
  5234                                  	; 15/05/2019 - Retro DOS v4.0
  5235 000006DB 2E                      	cs
  5236 000006DC AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5237                                  
  5238                                  	; 18/07/2018
  5239                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5240                                  
  5241 000006DD 38F8                    	CMP	AL,BH			; Code OK?
  5242 000006DF 7402                    	JZ	short NO_MAP		; Yes
  5243 000006E1 E2F8                    	LOOP	CHECK_CODE
  5244                                  NO_MAP:
  5245 000006E3 30E4                    	XOR	AH,AH			; AX is now valid code
  5246 000006E5 5B                      	POP	BX
  5247 000006E6 59                      	POP	CX
  5248 000006E7 5E                      	POP	SI
  5249 000006E8 1F                      	POP	DS
  5250 000006E9 C3                      	retn
  5251                                  
  5252                                  	;EndProc ETAB_LK
  5253                                  
  5254                                  ; 18/07/2018 - Retro DOS v3.0
  5255                                  ;---------------------------------------------------------------------------
  5256                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5257                                  
  5258                                  ;IF installed ; (*)
  5259                                  
  5260                                  ;---------------------------------------------------------------------------
  5261                                  ;
  5262                                  ; Procedure Name : SetBad
  5263                                  ;
  5264                                  ; SetBad sets up info for bad functions
  5265                                  ;
  5266                                  ;---------------------------------------------------------------------------
  5267                                  
  5268                                  SetBad:
  5269                                  	;mov	ax,1
  5270 000006EA B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5271                                  
  5272                                  	; MSDOS 3.3
  5273                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5274                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5275                                  
  5276                                  ;	set up ds to point to DOSDATA
  5277                                  
  5278                                  	; 15/05/2019 - Retro DOS v4.0
  5279                                  	; MSDOS 6.0
  5280 000006ED 1E                      	push	ds
  5281                                  
  5282                                  	;getdseg <ds>
  5283 000006EE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5284                                  
  5285 000006F3 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5286                                  
  5287 000006F8 1F                      	pop	ds	  	;hkn; restore ds
  5288                                  
  5289 000006F9 F9                      	STC
  5290 000006FA C3                      	retn
  5291                                  
  5292                                  ;--------------------------------------------------------------------------
  5293                                  ;
  5294                                  ; Procedure Name : BadCall
  5295                                  ;
  5296                                  ; BadCall is the initial routine for bad function calls
  5297                                  ;
  5298                                  ;--------------------------------------------------------------------------
  5299                                  
  5300                                  BadCall:
  5301 000006FB E8ECFF                  	call	SetBad
  5302 000006FE CB                      	retf
  5303                                  
  5304                                  ;--------------------------------------------------------------------------
  5305                                  ;
  5306                                  ; OKCall always sets carry to off.
  5307                                  ;
  5308                                  ;-----------------------------------------------------------------------
  5309                                  
  5310                                  OKCall:
  5311 000006FF F8                      	CLC
  5312 00000700 CB                      	retf
  5313                                  
  5314                                  ;---------------------------------------------------------------------------
  5315                                  ;
  5316                                  ; Procedure Name : INT2F
  5317                                  ;
  5318                                  ; INT 2F handler works as follows:
  5319                                  ;   PUSH    AX
  5320                                  ;   MOV     AX,multiplex:function
  5321                                  ;   INT     2F
  5322                                  ;   POP     ...
  5323                                  ; The handler itself needs to make the AX available for the various routines.
  5324                                  ;
  5325                                  ;----------------------------------------------------------------------------
  5326                                  
  5327                                  ; 15/05/2019 - Retro DOS v4.0
  5328                                  
  5329                                  ;KERNEL_SEGMENT equ 70h
  5330                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5331                                  DOSBIODATASEG equ 70h
  5332                                  
  5333                                  ; retrodos4.s - offset in BIOSDATA
  5334                                  bios_i2f equ 5
  5335                                  
  5336                                  ;PUBLIC	Int2F
  5337                                  ;INT2F	PROC	FAR
  5338                                  
  5339                                  ; 15/05/2019
  5340                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5341                                  
  5342                                  ; 04/11/2022
  5343                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5344                                  
  5345                                  	; 05/01/2024	
  5346                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5347                                  	; 18/07/2018 - Retro DOS v3.0
  5348                                  INT2F:
  5349                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5350                                  INT2FNT:
  5351                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5352 00000701 FB                      	STI
  5353                                  	;cmp	ah,11h
  5354 00000702 80FC11                  	CMP	AH,MultNET
  5355 00000705 750A                    	JNZ	short INT2FSHR
  5356                                  TestInstall:
  5357 00000707 08C0                    	OR	AL,AL
  5358 00000709 7403                    	JZ	short Leave2F
  5359                                  BadFunc:
  5360 0000070B E8DCFF                  	CALL	SetBad
  5361                                  
  5362                                  	;entry	Leave2F
  5363                                  Leave2F:
  5364 0000070E CA0200                  	RETF	2			; long return + clear flags off stack
  5365                                  
  5366                                  INT2FSHR:
  5367                                  	;cmp	ah,10h
  5368 00000711 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5369 00000714 74F1                    	JZ	short TestInstall	; yes, check for installation
  5370                                  INT2FNLS:
  5371                                  	;cmp	ah,14h
  5372 00000716 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5373 00000719 74EC                    	JZ	short TestInstall	; yes check for installation
  5374                                  INT2FDOS:
  5375                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5376                                  
  5377                                  	; 18/07/2018
  5378                                  	; MSDOS 3.3
  5379                                  	;;cmp	ah,12h	
  5380                                  	;CMP	AH,MultDOS
  5381                                  	;jz	short DispatchDOS
  5382                                  	;iret
  5383                                  
  5384                                  	; 15/05/2019
  5385                                  	; MSDOS 6.0
  5386                                  	;cmp	ah,12h	; 07/12/2022
  5387 0000071B 80FC12                  	CMP	AH,MultDOS
  5388 0000071E 7503                    	JNZ	short check_win		;check if win386 broadcast
  5389 00000720 E9F201                  	jmp	DispatchDOS
  5390                                  
  5391                                  	; .... win386 .... 
  5392                                  
  5393                                  check_win:
  5394                                  	;cmp	ah,16h
  5395 00000723 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5396 00000726 7408                    	je	short Win386_Msg
  5397                                  
  5398                                  	; M044
  5399                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5400                                  	; of Windows. If so, do special action of going and saving last para
  5401                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5402                                  	; bug
  5403                                  
  5404 00000728 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5405                                  	;jne	short next_i2f		; no, chain on
  5406                                  	; 15/12/2022
  5407                                  	;jmp	winold_swap		; yes, do desired action
  5408 0000072B 7442                    	je	short winold_swap
  5409 0000072D E90501                  	jmp	next_i2f
  5410                                  
  5411                                  	; 15/12/2022
  5412                                  ;next_i2f:
  5413                                  ;	;;;jmp	bios_i2f
  5414                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5415                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5416                                  ;	; 04/11/2022
  5417                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5418                                  
  5419                                  ;	IRET				; This assume that we are at the head
  5420                                  					; of the list
  5421                                  ;INT2F	ENDP
  5422                                  
  5423                                  ; 15/05/2019 - Retro DOS v4.0
  5424                                  
  5425                                  ; We have received a message from Win386. There are three possible
  5426                                  ; messages we could get from Win386:
  5427                                  ;
  5428                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5429                                  ;		  to the Win386 startup info structure.
  5430                                  ; Exit		- for this, we clear the IsWin386 flag.
  5431                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5432                                  ;		  has already been handled. this is indicated by setting
  5433                                  ;		  CX to a non-zero value.
  5434                                  
  5435                                  Win386_Msg:
  5436 00000730 1E                      	push	ds
  5437                                  
  5438                                  	;getdseg <DS>			; ds is DOSDATA
  5439 00000731 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5440                                  
  5441                                  	; For WIN386 2.xx instance data
  5442                                  
  5443 00000736 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5444 00000738 7503                    	jne	short Win386_Msg_exit
  5445 0000073A E92A01                  	jmp	OldWin386Init		; yes, return instance data
  5446                                  Win386_Msg_exit:
  5447 0000073D 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5448 0000073F 7503                    	jne	short Win386_Msg_devcall
  5449 00000741 E92C01                  	jmp	Win386_Leaving
  5450                                  Win386_Msg_devcall:
  5451 00000744 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5452 00000746 7503                    	jne	short Win386_Msg_init
  5453 00000748 E96001                  	jmp	Win386_Query
  5454                                  Win386_Msg_init:
  5455 0000074B 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5456 0000074D 7403                    	je	short Win386_Starting
  5457 0000074F E9E200                  	jmp	win_nexti2f		; no, return
  5458                                  Win386_Starting:
  5459                                  	; 17/12/2022
  5460 00000752 F6C201                  	test	dl,1
  5461                                  	;test	dx,1			; is this really win386?
  5462 00000755 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5463 00000757 E9DA00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5464                                  Win386_vchk:
  5465                                  	; M018 -- start of block changes
  5466                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5467                                  	; than 030Ah, we skip the VxD presence check
  5468                                  
  5469                                  ;M067 -- Begin changes
  5470                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5471                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5472                                  ;So, we null out the VxD ptr before the check.
  5473                                  
  5474                                  	;mov	word [Win386_Info+6],0
  5475 0000075A C706[E80F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5476                                  	;mov	word [Win386_Info+8],0
  5477 00000760 C706[EA0F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5478                                  
  5479                                  ;M067 -- End changes
  5480                                  
  5481                                  ;ifdef JAPAN
  5482                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5483                                  ;else
  5484 00000766 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5485                                  ;endif
  5486                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5487 0000076A 724E                    	jb	short Win386_vxd
  5488 0000076C E9DD00                  	jmp	noVxD31
  5489                                  
  5490                                  	; 15/12/2022
  5491                                  winold_swap:
  5492 0000076F 1E                      	push	ds
  5493 00000770 06                      	push	es
  5494 00000771 56                      	push	si
  5495 00000772 57                      	push	di
  5496 00000773 51                      	push	cx
  5497                                  
  5498                                  	;getdseg <ds>			;ds = DOSDATA
  5499 00000774 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5500                                  
  5501 00000779 3C01                    	cmp	al,1			;swap Windows out call
  5502 0000077B 751B                    	jne	short swapin		;no, check if Swap in call
  5503 0000077D E88801                  	call	getwinlast
  5504 00000780 1E                      	push	ds
  5505 00000781 07                      	pop	es
  5506 00000782 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5507 00000784 31F6                    	xor	si,si
  5508 00000786 BF[0600]                	mov	di,WinoldPatch1
  5509 00000789 B90800                  	mov	cx,8
  5510 0000078C FC                      	cld
  5511 0000078D 51                      	push	cx
  5512 0000078E F3A4                    	rep	movsb			;save first 8 bytes
  5513 00000790 59                      	pop	cx
  5514 00000791 BF[CD0D]                	mov	di,WinoldPatch2
  5515 00000794 F3A4                    	rep	movsb			;save next 8 bytes
  5516 00000796 EB1B                    	jmp	short winold_done
  5517                                  swapin:
  5518 00000798 3C02                    	cmp	al,2			;swap Windows in call?
  5519 0000079A 7517                    	jne	short winold_done	;no, something else, pass it on
  5520 0000079C E86901                  	call	getwinlast
  5521 0000079F 8EC6                    	mov	es,si
  5522 000007A1 31FF                    	xor	di,di
  5523 000007A3 BE[0600]                	mov	si,WinoldPatch1
  5524 000007A6 B90800                  	mov	cx,8
  5525 000007A9 FC                      	cld
  5526 000007AA 51                      	push	cx
  5527 000007AB F3A4                    	rep	movsb			;restore first 8 bytes
  5528 000007AD 59                      	pop	cx
  5529 000007AE BE[CD0D]                	mov	si,WinoldPatch2
  5530 000007B1 F3A4                    	rep	movsb			;restore next 8 bytes
  5531                                  winold_done:
  5532 000007B3 59                      	pop	cx
  5533 000007B4 5F                      	pop	di
  5534 000007B5 5E                      	pop	si
  5535 000007B6 07                      	pop	es
  5536 000007B7 1F                      	pop	ds
  5537 000007B8 EB7B                    	jmp	short next_i2f		;chain on
  5538                                  	; 15/12/2022
  5539                                  	;jmp	next_i2f	
  5540                                  
  5541                                  Win386_vxd:
  5542 000007BA 50                      	push	ax
  5543 000007BB 53                      	push	bx
  5544 000007BC 51                      	push	cx
  5545 000007BD 52                      	push	dx
  5546 000007BE 56                      	push	si
  5547 000007BF 57                      	push	di			; save regs !!dont change order!!
  5548                                  
  5549 000007C0 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5550 000007C4 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5551 000007C7 741F                    	je	short Vxd31		; N: continue
  5552                                  					; Y: save arena associated with 
  5553                                  					;    umb_head
  5554                                  
  5555 000007C9 C606[DA0D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5556                                  					; umb_arena
  5557 000007CE 1E                      	push	ds
  5558 000007CF 06                      	push	es
  5559                                  
  5560                                  	;mov	ax,ds
  5561                                  	;mov	es,ax			; es - > dosdata
  5562                                  	; 05/01/2024
  5563 000007D0 1E                      	push	ds
  5564 000007D1 07                      	pop	es
  5565                                  
  5566 000007D2 8EDB                    	mov	ds,bx
  5567 000007D4 31F6                    	xor	si,si			; ds:si -> umb_head
  5568                                  
  5569 000007D6 FC                      	cld
  5570                                  
  5571 000007D7 BF[1F12]                	mov	di,UmbSave1
  5572 000007DA B90B00                  	mov	cx,11
  5573 000007DD F3A4                    	rep	movsb
  5574                                  
  5575 000007DF BF[D50D]                	mov	di,UmbSave2
  5576                                  	;mov	cx,5
  5577                                  	; 18/12/2022
  5578 000007E2 B105                    	mov	cl,5
  5579 000007E4 F3A4                    	rep	movsb	
  5580                                  
  5581 000007E6 07                      	pop	es
  5582 000007E7 1F                      	pop	ds			; M062 - End
  5583                                  
  5584                                  Vxd31:
  5585                                  	;test	byte [DOS_FLAG],2
  5586 000007E8 F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5587 000007ED 7408                    	jz	short Dont_Supress		; M066
  5588 000007EF 5F                      	pop	di				; M066
  5589 000007F0 5E                      	pop	si				; M066
  5590 000007F1 5A                      	pop	dx				; M066
  5591 000007F2 59                      	pop	cx				; M066
  5592 000007F3 5B                      	pop	bx				; M066
  5593 000007F4 58                      	pop	ax				; M066
  5594 000007F5 EB55                    	jmp	short noVxD31			; M066
  5595                                  
  5596                                  	; We check here if the VxD is available in the root of the boot drive. 
  5597                                  	; We do an extended open to suppress any error messages
  5598                                  	
  5599                                  Dont_Supress:
  5600 000007F7 A0[6900]                	mov	al,[BOOTDRIVE]
  5601 000007FA 0440                    	add	al,'A' - 1		; get drive letter
  5602 000007FC A2[3110]                	mov	[VxDpath],al		; path is root of bootdrive
  5603                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5604                                  	;mov	al,0			; no extended attributes
  5605                                  	; 18/12/2022
  5606 000007FF B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5607 00000802 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5608                                  					; no inherit, suppress crit err
  5609 00000805 B90700                  	mov	cx,7			; hidden,system,read-only attr
  5610 00000808 BA0100                  	mov	dx,1			; fail if file does not exist
  5611 0000080B BE[3110]                	mov	si,VxDpath	
  5612                                  					; path of VxD file
  5613 0000080E BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5614                                  
  5615 00000811 CD21                    	int	21h			; do extended open
  5616                                  
  5617 00000813 5F                      	pop	di
  5618 00000814 5E                      	pop	si
  5619 00000815 5A                      	pop	dx
  5620 00000816 59                      	pop	cx
  5621                                  
  5622 00000817 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5623                                  
  5624                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5625                                  	; to indicate error to Windows after displaying message to user that 
  5626                                  	; VxD needs to be present to run Windows in enhanced mode.
  5627                                  
  5628 00000819 52                      	push	dx
  5629 0000081A 1E                      	push	ds
  5630 0000081B 56                      	push	si
  5631 0000081C BE[B109]                	mov	si,NoVxDErrMsg
  5632 0000081F 0E                      	push	cs
  5633 00000820 1F                      	pop	ds
  5634 00000821 B96300                  	mov	cx,VxDMesLen ; 99	;
  5635 00000824 B402                    	mov	ah,2			; write char to console
  5636 00000826 FC                      	cld
  5637                                  vxdlp:
  5638 00000827 AC                      	lodsb
  5639 00000828 86D0                    	xchg	dl,al			; get char in dl
  5640 0000082A CD21                    	int	21h
  5641 0000082C E2F9                    	loop	vxdlp
  5642                                  
  5643 0000082E 5E                      	pop	si
  5644 0000082F 1F                      	pop	ds
  5645 00000830 5A                      	pop	dx
  5646 00000831 5B                      	pop	bx
  5647 00000832 58                      	pop	ax			;all registers restored
  5648 00000833 41                      	inc	cx			;cx != 0 to indicate error
  5649                                  	; 15/12/22022
  5650                                  	;jmp	win_nexti2f		;chain on
  5651                                  	;jmp	short win_nexti2f
  5652                                  
  5653                                  	; 15/12/2022
  5654                                  win_nexti2f:
  5655 00000834 1F                      	pop	ds
  5656                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5657                                  	; 15/12/2022
  5658                                  next_i2f:
  5659                                  	;;;jmp	bios_i2f
  5660                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5661                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5662                                  	; 04/11/2022
  5663 00000835 EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5664                                  
  5665                                  VxDthere:
  5666 0000083A 89C3                    	mov	bx,ax
  5667 0000083C B43E                    	mov	ah,CLOSE ; 3Eh
  5668 0000083E CD21                    	int	21h			;close the file
  5669                                  
  5670                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5671                                  
  5672                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5673                                  	;mov	bx,Win386_Info
  5674                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5675                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5676                                  	; 15/12/2022
  5677 00000840 C706[E80F][3110]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5678 00000846 8C1E[EA0F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5679                                  
  5680 0000084A 5B                      	pop	bx
  5681 0000084B 58                      	pop	ax
  5682                                  noVxD31:
  5683                                  	; M018; End of block changes
  5684                                  
  5685 0000084C 800E[3010]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5686 00000851 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5687                                  
  5688                                  	; M002;
  5689                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5690                                  
  5691 00000856 52                      	push	dx			; M002
  5692 00000857 89DA                    	mov	dx,bx			; M002
  5693                                  					; point ES:BX to Win386_Info ; M002
  5694 00000859 BB[E20F]                	mov	bx,Win386_Info 
  5695 0000085C 895702                  	mov	[bx+2],dx		; M002
  5696 0000085F 8C4704                  	mov	[bx+4],es		; M002
  5697 00000862 5A                      	pop	dx			; M002
  5698 00000863 1E                      	push	ds			; M002
  5699 00000864 07                      	pop	es			; M002
  5700                                  	;jmp	win_nexti2f		; M002
  5701                                  	; 15/12/2022
  5702 00000865 EBCD                    	jmp	short win_nexti2f
  5703                                  
  5704                                  	; 15/12/2022
  5705                                  	; Code to return Win386 2.xx instance table
  5706                                  OldWin386Init:
  5707 00000867 58                      	pop	ax			; discard ds pushed on stack
  5708 00000868 BE[E711]                	mov	si,OldInstanceJunk 
  5709                                  					; ds:si = instance table
  5710 0000086B B84852                  	mov	ax,5248h ; 'HR'		; indicate instance data present
  5711                                  	;jmp	next_i2f
  5712                                  	; 15/12/2022
  5713 0000086E EBC5                    	jmp	short next_i2f
  5714                                  
  5715                                  Win386_Leaving:
  5716                                  	; 15/12/2022
  5717 00000870 F6C201                  	test 	dl,1
  5718                                  	;test	dx,1			; is this really win386?
  5719                                  	;jz	short Win386_Leaving_c
  5720                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5721                                  	; 15/12/2022
  5722 00000873 75BF                    	jnz	short win_nexti2f	
  5723                                  
  5724                                  Win386_Leaving_c:
  5725                                  					; M062 - Start
  5726 00000875 803E[DA0D]01            	cmp	byte [UmbSaveFlag],1	; Q: was umb_arena saved at win start
  5727                                  					;    up.
  5728 0000087A 7523                    	jne	short noumb		; N: not saved 
  5729 0000087C C606[DA0D]00            	mov	byte [UmbSaveFlag],0	; Y: clear UmbSaveFlag and restore 
  5730                                  					;    previously saved umb_head
  5731                                  	; 05/01/2024
  5732                                  	;push	ax ; (not necessary)
  5733 00000881 06                      	push	es
  5734 00000882 51                      	push	cx
  5735 00000883 56                      	push	si
  5736 00000884 57                      	push	di
  5737                                  
  5738                                  	;mov	ax,[UMB_HEAD]
  5739                                  	;mov	es,ax
  5740                                  	; 05/01/2024
  5741 00000885 8E06[8C00]              	mov	es,[UMB_HEAD]
  5742 00000889 31FF                    	xor	di,di			; es:di -> umb_head
  5743                                  
  5744 0000088B FC                      	cld
  5745                                  
  5746 0000088C BE[1F12]                	mov	si,UmbSave1
  5747 0000088F B90B00                  	mov	cx,11
  5748 00000892 F3A4                    	rep	movsb
  5749 00000894 BE[D50D]                	mov	si,UmbSave2
  5750                                  	;mov	cx,5
  5751                                  	; 18/12/2022
  5752 00000897 B105                    	mov	cl,5
  5753 00000899 F3A4                    	rep	movsb
  5754                                  
  5755 0000089B 5F                      	pop	di
  5756 0000089C 5E                      	pop	si
  5757 0000089D 59                      	pop	cx
  5758 0000089E 07                      	pop	es
  5759                                  	; 05/01/2024
  5760                                  	;pop	ax
  5761                                  noumb:					; M062 - End
  5762 0000089F 8026[3010]00            	and	byte [IsWin386],0	; Win386 is gone
  5763 000008A4 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5764 000008A9 EB89                    	jmp	short win_nexti2f
  5765                                  
  5766                                  ;	; 15/12/2022
  5767                                  ;	; Code to return Win386 2.xx instance table
  5768                                  ;OldWin386Init:
  5769                                  ;	pop	ax			; discard ds pushed on stack
  5770                                  ;	mov	si,OldInstanceJunk 
  5771                                  ;					; ds:si = instance table
  5772                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5773                                  ;	;jmp	next_i2f
  5774                                  ;	; 15/12/2022
  5775                                  ;	jmp	short _next_i2f
  5776                                  
  5777                                  Win386_Query:
  5778 000008AB 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5779 000008AE 7584                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5780 000008B0 09C9                    	or	cx,cx			; is it an instance query?
  5781 000008B2 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5782 000008B4 41                      	inc	cx			; indicate that data is instanced
  5783                                  ;
  5784                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5785                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5786                                  ; M001;  
  5787                                  ; M001; OFFSETS STRUC
  5788                                  ; M001; 	Major_version	db	?
  5789                                  ; M001; 	Minor_version	db	?
  5790                                  ; M001; 	SaveDS		dw	?
  5791                                  ; M001; 	SaveBX		dw	?
  5792                                  ; M001; 	Indos		dw	?
  5793                                  ; M001; 	User_id		dw	?
  5794                                  ; M001; 	CritPatch	dw	?
  5795                                  ; M001; OFFSETS	ENDS
  5796                                  ; M001; 
  5797                                  ; M001; User_Id is the only variable really important for proper functioning  
  5798                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5799                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5800                                  ; M001; pass this table because Win386 depends on this table to get the 
  5801                                  ; M001; User_Id offset.
  5802                                  ; M001; 
  5803 000008B5 BB[2210]                	mov	bx,Win386_DOSVars	; M001 
  5804 000008B8 1E                      	push	ds			; M001
  5805 000008B9 07                      	pop	es			; es:bx points at offset table ; M001
  5806 000008BA EB40                    	jmp	short PopIret		; M001
  5807                                  
  5808                                  ; 15/12/2022
  5809                                  ;	; Code to return Win386 2.xx instance table
  5810                                  ;OldWin386Init:
  5811                                  ;	pop	ax			; discard ds pushed on stack
  5812                                  ;	mov	si,OldInstanceJunk 
  5813                                  ;					; ds:si = instance table
  5814                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5815                                  ;	;jmp	next_i2f
  5816                                  ;	; 15/12/2022
  5817                                  ;	jmp	short _next_i2f
  5818                                  
  5819                                  dosmgr_func:
  5820 000008BC 49                      	dec	cx
  5821 000008BD 7435                    	jz	short win386_patch	; call to patch DOS
  5822 000008BF 49                      	dec	cx
  5823 000008C0 743A                    	jz	short PopIret		; remove DOS patches, ignore
  5824 000008C2 49                      	dec	cx
  5825 000008C3 7439                    	jz	short win386_size	; get size of DOS data structures
  5826 000008C5 49                      	dec	cx
  5827 000008C6 7428                    	jz	short win386_inst	; instance more data
  5828                                  	;dec	cx
  5829                                  	;jnz	short PopIret		; no functions above this
  5830                                  	; 05/01/2024 (PCDOS 7.1 IBMDOS.COM DOSCODE:4771h)
  5831 000008C8 E232                    	loop	PopIret
  5832                                  
  5833                                  	; Get DOS device driver size -- es:di points at device driver header
  5834                                  	; In DOS 4.x, the para before the device header contains an arena 
  5835                                  	; header for the driver.
  5836                                  
  5837 000008CA 8CC0                    	mov	ax,es			; ax = device header segment
  5838                                  
  5839                                  	; We check to see if we have a memory arena for this device driver. 
  5840                                  	; The way to do this would be to look at the previous para to see if
  5841                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5842                                  	; in the arena is the same as the device header segment. These two 
  5843                                  	; checks together should take care of all cases
  5844                                  
  5845 000008CC 48                      	dec	ax			; get arena header
  5846 000008CD 06                      	push	es
  5847 000008CE 8EC0                    	mov	es,ax			; arena header for device driver
  5848                                  
  5849 000008D0 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5850 000008D4 7517                    	jnz	short cantsize		; no, cant size this driver
  5851 000008D6 40                      	inc	ax			; get back device header segment
  5852 000008D7 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5853 000008DB 7510                    	jnz	short cantsize		; no, not a proper arena
  5854                                  
  5855 000008DD 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5856 000008E1 07                      	pop	es
  5857                                  
  5858                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5859                                  	; Speed is not critical and so we choose the shortest method 
  5860                                  	; -- use "mul"
  5861                                  
  5862 000008E2 BB1000                  	mov	bx,16
  5863 000008E5 F7E3                    	mul	bx
  5864 000008E7 89C1                    	mov	cx,ax
  5865 000008E9 89D3                    	mov	bx,dx
  5866 000008EB EB09                    	jmp	short win386_done	; return with device driver size
  5867                                  cantsize:
  5868 000008ED 07                      	pop	es
  5869 000008EE 31C0                    	xor	ax,ax
  5870                                  win386_inst:	; 05/01/2024
  5871 000008F0 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5872 000008F2 EB08                    	jmp	short PopIret		; return
  5873                                  
  5874                                  win386_patch:
  5875                                  	; dx contains bits marking the patches to be applied. We return 
  5876                                  	; the field with all bits set to indicate that all patches have been
  5877                                  	; done
  5878                                  
  5879 000008F4 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5880                                   	;jmp	short win386_done	; done, return
  5881                                  	; 15/12/2022
  5882                                  	; 15/12/2022
  5883                                  win386_done:
  5884 000008F6 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5885 000008F9 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5886                                  PopIret:
  5887 000008FC 1F                      	pop	ds
  5888 000008FD CF                      	iret	
  5889                                  
  5890                                  win386_size:
  5891                                  	; Return the size of DOS data structures -- currently only CDS size
  5892                                  
  5893                                  	; 17/12/2022
  5894 000008FE F6C201                  	test	dl,1
  5895                                  	;test	dx,1			; check for CDS size bit
  5896 00000901 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5897                                  
  5898 00000903 B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5899 00000906 EBEE                    	jmp	short win386_done	; return with the size
  5900                                  
  5901                                  ; 05/01/2024
  5902                                  %if 0
  5903                                  win386_inst:
  5904                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device
  5905                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5906                                  	; this by returning a status of not previously instanced. The basic
  5907                                  	; structure of these things have not changed and so the current
  5908                                  	; DOSMGR code should be able to work it out
  5909                                  
  5910                                  	xor	dx,dx			; make sure dx has a not done value
  5911                                  	jmp	short PopIret		; skip done indication
  5912                                  %endif
  5913                                  
  5914                                  	; 15/12/2022
  5915                                  ;win386_done:
  5916                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5917                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5918                                  ;PopIret:
  5919                                  ;	pop	ds
  5920                                  ;	iret				; return back up the chain
  5921                                  
  5922                                  	; 15/12/2022
  5923                                  ;win_nexti2f:
  5924                                  	;pop	ds
  5925                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5926                                  
  5927                                  ;End WIN386 support
  5928                                  
  5929                                  ; 15/05/2019
  5930                                  
  5931                                  ;M044; Start of changes
  5932                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5933                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5934                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5935                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5936                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5937                                  ; in leading to a crash. Winoldap issues callouts when it swaps Windows out
  5938                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5939                                  ; last para of the Windows memory block and then restore this para on the
  5940                                  ; Windows swapin callout. 
  5941                                  
  5942                                  getwinlast:
  5943                                  	; 07/12/2022
  5944 00000908 8B36[3003]              	mov	si,[CurrentPDB]
  5945 0000090C 4E                      	dec	si
  5946 0000090D 8EC6                    	mov	es,si
  5947 0000090F 2603360300              	add	si,[es:3]
  5948 00000914 C3                      	retn
  5949                                  
  5950                                  ; 15/12/2022
  5951                                  %if 0
  5952                                  winold_swap:
  5953                                  	push	ds
  5954                                  	push	es
  5955                                  	push	si
  5956                                  	push	di
  5957                                  	push	cx
  5958                                  
  5959                                  	;getdseg <ds>			;ds = DOSDATA
  5960                                  	mov	ds,[cs:DosDSeg]
  5961                                  
  5962                                  	cmp	al,1			;swap Windows out call
  5963                                  	jne	short swapin		;no, check if Swap in call
  5964                                  	call	getwinlast
  5965                                  	push	ds
  5966                                  	pop	es
  5967                                  	mov	ds,si			;ds = memory arena of Windows
  5968                                  	xor	si,si
  5969                                  	mov	di,WinoldPatch1
  5970                                  	mov	cx,8
  5971                                  	cld
  5972                                  	push	cx
  5973                                  	rep	movsb			;save first 8 bytes
  5974                                  	pop	cx
  5975                                  	mov	di,WinoldPatch2
  5976                                  	rep	movsb			;save next 8 bytes
  5977                                  	jmp	short winold_done
  5978                                  swapin:
  5979                                  	cmp	al,2			;swap Windows in call?
  5980                                  	jne	short winold_done	;no, something else, pass it on
  5981                                  	call	getwinlast
  5982                                  	mov	es,si
  5983                                  	xor	di,di
  5984                                  	mov	si,WinoldPatch1
  5985                                  	mov	cx,8
  5986                                  	cld
  5987                                  	push	cx
  5988                                  	rep	movsb			;restore first 8 bytes
  5989                                  	pop	cx
  5990                                  	mov	si,WinoldPatch2
  5991                                  	rep	movsb			;restore next 8 bytes
  5992                                  winold_done:
  5993                                  	pop	cx
  5994                                  	pop	di
  5995                                  	pop	si
  5996                                  	pop	es
  5997                                  	pop	ds
  5998                                  	jmp	next_i2f		;chain on
  5999                                  
  6000                                  %endif
  6001                                  
  6002                                  ;M044; End of changes
  6003                                  
  6004                                  ; 15/05/2019
  6005                                  
  6006                                  DispatchDOS:
  6007 00000915 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  6008 0000091A 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  6009 0000091F 50                      	PUSH	AX			; push index
  6010 00000920 55                      	PUSH	BP
  6011 00000921 89E5                    	MOV	BP,SP
  6012                                  		; stack looks like:
  6013                                  		;   0	BP
  6014                                  		;   2	DISPATCH
  6015                                  		;   4	TABLE
  6016                                  		;   6	RETURN
  6017                                  		;   8	LONG-RETURN
  6018                                  		;   C	FLAGS
  6019                                  		;   E	AX
  6020                                  	
  6021 00000923 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  6022 00000926 5D                      	POP	BP
  6023 00000927 E8D908                  	call	TableDispatch
  6024 0000092A E9DEFD                  	JMP	BadFunc 		; return indicates invalid function
  6025                                  
  6026                                  INT2F_etcetera:
  6027                                  	;entry	DosGetGroup
  6028                                  DosGetGroup:
  6029                                  	; MSDOS 3.3
  6030                                  	;push	cs
  6031                                  	;pop	ds
  6032                                  	;retn
  6033                                  
  6034                                  	; MSDOS 6.0
  6035                                  ;SR; Cannot use CS now
  6036                                  ;
  6037                                  ;	PUSH	CS
  6038                                  ;	POP	DS
  6039                                  
  6040                                  	; 04/11/2022
  6041                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6042                                  
  6043                                  	;getdseg <ds>
  6044 0000092D 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6045 00000932 C3                      	retn
  6046                                  
  6047                                  	;entry	DOSInstall
  6048                                  DOSInstall:
  6049 00000933 B0FF                    	MOV	AL,0FFh
  6050 00000935 C3                      	retn
  6051                                  
  6052                                  ;ENDIF ; (*)
  6053                                  
  6054                                  
  6055                                  ; 15/05/2019 - Retro DOS v4.0
  6056                                  
  6057                                  ;------------------------------------------------------------------------
  6058                                  ;
  6059                                  ; Procedure Name : RW32_CONVERT
  6060                                  ;
  6061                                  ;Input: same as ABSDRD and ABSDWRT
  6062                                  ;	 ES:BP -> DPB
  6063                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6064                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6065                                  ;	 carry clear, parms ok
  6066                                  ;
  6067                                  ;------------------------------------------------------------------------
  6068                                  
  6069                                  	; 06/01/2024
  6070                                  RW32_CONVERT:
  6071 00000936 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6072 00000939 742A                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6073 0000093B 49                      	dec	cx ; *
  6074 0000093C 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6075 0000093D 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6076 0000093E 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6077 00000942 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6078 00000946 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6079 00000949 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6080                                  	;INC	DL			;>32mb			;AN000;
  6081                                  	; 17/12/2022
  6082 0000094B 42                      	inc	dx
  6083 0000094C 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6084 0000094E F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6085 00000950 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6086                                  letold:
  6087 00000952 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6088 00000953 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6089 00000954 7425                    	JZ	short old_style	; cf=0	;>32mb  no 		;AN000;
  6090                                  
  6091 00000956 1E                      	push	ds
  6092                                  	;getdseg <ds>
  6093 00000957 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6094 0000095C C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6095 00000962 1F                      	pop	ds
  6096                                  
  6097 00000963 F9                      	STC				;>32mb			;AN000;
  6098 00000964 C3                      	retn				;>32mb			;AN000;
  6099                                  
  6100                                  new32format:
  6101                                  	;mov	dx,[bx+2]
  6102 00000965 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6103                                  
  6104 00000968 1E                      	push	ds			; set up ds to DOSDATA
  6105                                  	;getdseg <ds>
  6106 00000969 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6107 0000096E 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6108 00000972 1F                      	pop	ds
  6109                                  
  6110 00000973 8B17                    	mov	dx,[bx]
  6111                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6112                                  	;mov	cx,[bx+4]
  6113 00000975 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6114                                  	;lds	bx,[bx+6]
  6115 00000978 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6116                                  old_style:				;>32mb			;AN000;
  6117                                  	; 06/01/2024
  6118                                  	; cf=0
  6119                                  	;CLC				;>32mb			;AN000;
  6120 0000097B C3                      	retn				;>32mb			;AN000;
  6121                                  
  6122                                  ;------------------------------------------------------------------------
  6123                                  ;
  6124                                  ; Procedure Name : Fastxxx_Purge
  6125                                  ;
  6126                                  ; Input: None
  6127                                  ; Functions: Purge Fastopen/ Cache Buffers
  6128                                  ; Output: None
  6129                                  ;
  6130                                  ;------------------------------------------------------------------------
  6131                                  
  6132                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6133                                  
  6134                                  Fastxxx_Purge:
  6135 0000097C 50                      	PUSH	AX			; save regs.	;AN000;
  6136 0000097D 56                      	PUSH	SI						;AN000;
  6137 0000097E 52                      	PUSH	DX						;AN000;
  6138                                  topen:
  6139 0000097F 1E                      	push	ds			; set up ds to DOSDATA
  6140                                  	;getdseg <ds>
  6141 00000980 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6142                                  
  6143 00000985 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6144                                  					; fastopen installed ?	;AN000;
  6145 0000098A 1F                      	pop	ds
  6146 0000098B 740B                    	JZ	short nofast		; no			;AN000;
  6147 0000098D B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6148                                  dofast:
  6149 0000098F B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6150                                  	;;mov	dl,[es:bp+0]
  6151                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6152                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6153                                  	; 15/12/2022
  6154 00000991 268A5600                	mov	dl,[es:bp]
  6155                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6156 00000995 E8D81C                  	call	Fast_Dispatch
  6157                                  nofast:
  6158 00000998 5A                      	POP	DX						;AN000;
  6159 00000999 5E                      	POP	SI			; restore regs		;AN000;
  6160 0000099A 58                      	POP	AX			 			;AN000;
  6161 0000099B C3                      	retn				; exit
  6162                                  
  6163                                  ;============================================================================
  6164                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6165                                  ;============================================================================
  6166                                  ; 29/04/2019 - Retro DOS v4.0
  6167                                  
  6168                                  ;include dossym.inc
  6169                                  ;include dosmac.inc
  6170                                  ;include doscntry.inc
  6171                                  
  6172                                  ; DOSCODE Segment
  6173                                  
  6174                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6175                                  ; ---------------------------------------------------------------------------
  6176                                  ;include divmes.inc
  6177                                  
  6178                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6179                                  ; -------------------------------------
  6180                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6181                                  
  6182                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6183                                  	;PUBLIC	DIVMES
  6184                                  
  6185 0000099C 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6185 000009A5 6F766572666C6F770D-
  6185 000009AE 0A                 
  6186                                  
  6187                                  	;PUBLIC	DivMesLen
  6188                                  DivMesLen:
  6189 000009AF 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6190                                  
  6191                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6192                                  ; -------------------------------------
  6193                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6194                                  
  6195                                  ; (MSDOS 6.0)
  6196                                  ; VxD not found error message
  6197                                  
  6198                                  NoVxDErrMsg:
  6199 000009B1 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6199 000009BA 686176652074686520-
  6199 000009C3 66696C652057494E41-
  6199 000009CC 32302E33383620696E-
  6199 000009D5 2074686520726F6F74-
  6199 000009DE 206F6620796F757220-
  6199 000009E7 626F6F742064726976-
  6199 000009F0 65                 
  6200 000009F1 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6200 000009FA 57696E646F77732069-
  6200 00000A03 6E20456E68616E6365-
  6200 00000A0C 64204D6F64650D0A   
  6201                                  
  6202                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6203                                  
  6204                                  ; 13/05/2019 - Retro DOS v4.0
  6205                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6206                                  
  6207                                  ;include yesno.asm  (MNSDOS 6.0)
  6208                                  ; -------------------------------------
  6209                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6210                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6211                                  
  6212                                  ; This is for country Yes and No
  6213                                  
  6214 00000A14 59                      NLS_YES:	db 'Y'
  6215 00000A15 4E                      NLS_NO:		db 'N'
  6216 00000A16 79                      NLS_yes2:	db 'y'
  6217 00000A17 6E                      NLS_no2:	db 'n'
  6218                                  
  6219                                  ; ---------------------------------------------------------------------------
  6220                                  
  6221                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6222                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6223                                  
  6224                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6225                                  
  6226                                  ; The following two tables implement the current buffered input editing
  6227                                  ; routines. The tables are pairwise associated in reverse order for ease
  6228                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6229                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6230                                  
  6231                                  	;PUBLIC	CANCHAR
  6232                                  CANCHAR:
  6233 00000A18 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6234                                  	
  6235                                  	;PUBLIC	ESCCHAR
  6236                                  ESCCHAR:
  6237 00000A19 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6238                                  	
  6239                                  	;IF	NOT Rainbow
  6240                                  
  6241                                  ESCTAB:	; LABEL BYTE
  6242                                  
  6243                                  	;IF	IBM
  6244 00000A1A 40                      	DB	64		; Ctrl-Z - F6
  6245 00000A1B 4D                      	DB	77		; Copy one char - -->
  6246 00000A1C 3B                      	DB	59		; Copy one char - F1
  6247 00000A1D 53                      	DB	83		; Skip one char - DEL
  6248 00000A1E 3C                      	DB	60		; Copy to char - F2
  6249 00000A1F 3E                      	DB	62		; Skip to char - F4
  6250 00000A20 3D                      	DB	61		; Copy line - F3
  6251 00000A21 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6252 00000A22 3F                      	DB	63		; Reedit line (new template) - F5
  6253 00000A23 4B                      	DB	75		; Backspace - <--
  6254 00000A24 52                      	DB	82		; Enter insert mode - INS (toggle)
  6255 00000A25 52                      	DB	82		; Exit insert mode - INS (toggle)
  6256 00000A26 41                      	DB	65		; Escape character - F7
  6257 00000A27 41                      	DB	65		; End of table
  6258                                  	;ENDIF
  6259                                  
  6260                                  ESCEND: ; LABEL BYTE
  6261                                  
  6262                                  ESCTABLEN EQU ESCEND-ESCTAB
  6263                                  
  6264                                  ESCFUNC: ; LABEL WORD
  6265                                  	
  6266 00000A28 [EE13]                  	short_addr  GETCH	; Ignore the escape sequence
  6267 00000A2A [6B14]                  	short_addr  TWOESC
  6268 00000A2C [6015]                  	short_addr  EXITINS
  6269 00000A2E [6015]                  	short_addr  ENTERINS
  6270 00000A30 [6614]                  	short_addr  BACKSP
  6271 00000A32 [4C15]                  	short_addr  REEDIT
  6272 00000A34 [5314]                  	short_addr  KILNEW
  6273 00000A36 [E214]                  	short_addr  COPYLIN
  6274 00000A38 [1415]                  	short_addr  SKIPSTR
  6275 00000A3A [E814]                  	short_addr  COPYSTR
  6276 00000A3C [0B15]                  	short_addr  SKIPONE
  6277 00000A3E [ED14]                  	short_addr  COPYONE
  6278 00000A40 [ED14]                  	short_addr  COPYONE
  6279 00000A42 [6715]                  	short_addr  CTRLZ
  6280                                  
  6281                                  	;ENDIF
  6282                                  
  6283                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6284                                  ; ---------------------------------------------------------------------------
  6285                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6286                                  
  6287                                  ; OEMFunction key is expected to process a single function
  6288                                  ;   key input from a device and dispatch to the proper
  6289                                  ;   routines leaving all registers UNTOUCHED.
  6290                                  ;
  6291                                  ; Inputs:   CS, SS are DOSGROUP
  6292                                  ; Outputs:  None. This function is expected to JMP to onw of
  6293                                  ;           the following labels:
  6294                                  ;
  6295                                  ;           GetCh       - ignore the sequence
  6296                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6297                                  ;           ExitIns     - toggle insert mode
  6298                                  ;           EnterIns    - toggle insert mode
  6299                                  ;           BackSp      - move backwards one space
  6300                                  ;           ReEdit      - reedit the line with a new template
  6301                                  ;           KilNew      - discard the current line and start from scratch
  6302                                  ;           CopyLin     - copy the rest of the template into the line
  6303                                  ;           SkipStr     - read the next character and skip to it in the template
  6304                                  ;           CopyStr     - read next char and copy from template to line until char
  6305                                  ;           SkipOne     - advance position in template one character
  6306                                  ;           CopyOne     - copy next character in template into line
  6307                                  ;           CtrlZ       - place a ^Z into the template
  6308                                  ; Registers that are allowed to be modified by this function are:
  6309                                  ;           AX, CX, BP
  6310                                  
  6311                                  ; 13/05/2019 - Retro DOS v4.0
  6312                                  ; -------------------------------------
  6313                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6314                                  
  6315                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6316                                  ; -------------------------------------
  6317                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6318                                  
  6319                                  OEMFunctionKey:
  6320 00000A44 E80A09                  	CALL	_$STD_CON_INPUT_NO_ECHO	; Get the second byte of the sequence
  6321 00000A47 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6322 00000A49 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6323 00000A4A BF[1A0A]                	MOV     DI,ESCTAB		; offset of second byte table
  6324 00000A4D 06                      	push	es
  6325 00000A4E 0E                      	push	cs
  6326 00000A4F 07                      	pop	es
  6327 00000A50 F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6328 00000A52 07                      	pop	es
  6329 00000A53 5F                      	POP     DI                      ; restore DI
  6330 00000A54 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6331 00000A56 89CD                    	MOV     BP,CX                   ; move to indexable register
  6332                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6333 00000A58 2EFFA6[280A]            	JMP	word [CS:BP+ESCFUNC]
  6334                                  
  6335                                  ;DOSCODE ENDS
  6336                                  	
  6337                                  ;============================================================================
  6338                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6339                                  ;============================================================================
  6340                                  ; Retro DOS v3.0 - 18/07/2018
  6341                                  
  6342                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6343                                  ;----------------------------------------------------------------------------
  6344                                  ; Retro DOS v2.0 - 13/03/2018
  6345                                  
  6346                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6347                                  
  6348                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6349                                  
  6350                                  ;**	$GET_DATE - Get Current Date
  6351                                  ;----------------------------------------
  6352                                  ;	ENTRY	none
  6353                                  ;	EXIT	(cx:dx) = current date
  6354                                  ;	USES	all
  6355                                  
  6356                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6357                                  
  6358                                  _$GET_DATE:	;System call 42
  6359                                  
  6360 00000A5D 16                      	PUSH	SS
  6361 00000A5E 1F                      	POP	DS
  6362 00000A5F E8AD00                  	CALL	READTIME	;Check for rollover to next day
  6363 00000A62 A1[5203]                	MOV	AX,[YEAR]
  6364                                  
  6365                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6366                                  
  6367 00000A65 8B1E[5003]              	MOV	BX,[DAY]	; fetch both day and month
  6368 00000A69 E819FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6369                                  	;MOV	[SI+6],BX	;DH=month, DL=day
  6370 00000A6C 895C06                  	MOV	[SI+user_env.user_DX],BX
  6371 00000A6F 05BC07                  	ADD	AX,1980		;Put bias back
  6372                                  	;MOV	[SI+4],AX	;CX=year
  6373 00000A72 894404                  	MOV	[SI+user_env.user_CX],AX
  6374 00000A75 36A0[5603]              	MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6375                                  RET20:	; 05/11/2022
  6376                                  RET24:	; 18/12/2022
  6377 00000A79 C3                      	RETN
  6378                                  
  6379                                  ;**	$SET_DATE - Set Current Date
  6380                                  ;----------------------------------------
  6381                                  ;	ENTRY	(cx:dx) = current date
  6382                                  ;	EXIT	(al) = -1 iff bad date
  6383                                  ;		(al) = 0 if ok
  6384                                  ;	USES	all
  6385                                  
  6386                                  _$SET_DATE:	;System call 43
  6387                                  
  6388 00000A7A B0FF                    	MOV	AL,-1		;Be ready to flag error
  6389 00000A7C 81E9BC07                	SUB	CX,1980		;Fix bias in year
  6390                                  	;JC	SHORT RET24	;Error if not big enough
  6391                                  	; 05/11/2022
  6392 00000A80 72F7                    	jc	short RET20
  6393 00000A82 83F977                  	CMP	CX,119		;Year must be less than 2100
  6394 00000A85 77F2                    	JA	SHORT RET24
  6395 00000A87 08F6                    	OR	DH,DH
  6396                                  	;JZ	SHORT RET24
  6397                                   	; 05/11/2022
  6398 00000A89 74EE                    	jz	short RET20
  6399 00000A8B 08D2                    	OR	DL,DL
  6400                                  	;JZ	SHORT RET24	;Error if either month or day is 0
  6401                                  	; 05/11/2022
  6402 00000A8D 74EA                    	jz	short RET20
  6403 00000A8F 80FE0C                  	CMP	DH,12		;Check against max. month
  6404 00000A92 77E5                    	JA	SHORT RET24
  6405 00000A94 16                      	PUSH	SS
  6406 00000A95 1F                      	POP	DS
  6407                                  	;CALL	DODATE
  6408                                  	; 18/12/2022
  6409 00000A96 E90301                  	jmp	DODATE
  6410                                  ;RET24:  
  6411                                  	;RETN
  6412                                  
  6413                                  ;**	$GET_TIME - Get Current Time
  6414                                  ;----------------------------------------
  6415                                  ;	ENTRY	none
  6416                                  ;	EXIT	(cx:dx) = current time
  6417                                  ;	USES	all
  6418                                  
  6419                                  _$GET_TIME:			;System call 44
  6420                                  
  6421 00000A99 16                      	PUSH	SS
  6422 00000A9A 1F                      	POP	DS
  6423 00000A9B E87100                  	CALL	READTIME
  6424 00000A9E E8E4F9                  	CALL	Get_User_Stack	;Get pointer to user registers
  6425                                  	;MOV	[SI+6],DX
  6426 00000AA1 895406                  	MOV	[SI+user_env.user_DX],DX
  6427                                  	;MOV	[SI+4],CX
  6428 00000AA4 894C04                  	MOV	[SI+user_env.user_CX],CX
  6429                                  set_time_ok:	; 06/01/2024
  6430 00000AA7 30C0                    	XOR	AL,AL
  6431                                  RET26:  
  6432 00000AA9 C3                      	RETN
  6433                                  
  6434                                  ;**	$SET_TIME - Set Current Time
  6435                                  ;----------------------------------------
  6436                                  ;	ENTRY	(cx:dx) = time
  6437                                  ;	EXIT	(al) = 0 if 0k
  6438                                  ;		(al) = -1 if invalid
  6439                                  ;	USES	ALL
  6440                                  
  6441                                  _$SET_TIME:			;System call 45
  6442                                  
  6443 00000AAA B0FF                    	MOV	AL,-1		;Flag in case of error
  6444 00000AAC 80FD18                  	CMP	CH,24		;Check hours
  6445 00000AAF 73F8                    	JAE	SHORT RET26
  6446 00000AB1 80F93C                  	CMP	CL,60		;Check minutes
  6447 00000AB4 73F3                    	JAE	SHORT RET26
  6448 00000AB6 80FE3C                  	CMP	DH,60		;Check seconds
  6449 00000AB9 73EE                    	JAE	SHORT RET26
  6450 00000ABB 80FA64                  	CMP	DL,100		;Check 1/100's
  6451 00000ABE 73E9                    	JAE	SHORT RET26
  6452 00000AC0 51                      	PUSH	CX
  6453 00000AC1 52                      	PUSH	DX
  6454 00000AC2 16                      	PUSH	SS
  6455 00000AC3 1F                      	POP	DS
  6456                                  
  6457                                  ; 07/02/2024
  6458                                  %if 0
  6459                                  	MOV	BX,TIMEBUF
  6460                                  	MOV	CX,6
  6461                                  	; 06/02/2024 ; *
  6462                                  	;;XOR	DX,DX
  6463                                  	;;MOV	AX,DX
  6464                                  	;xor	ax,ax
  6465                                  	;cwd	; 06/01/2024
  6466                                  	PUSH	BX
  6467                                  	;CALL	SETREAD
  6468                                  	; 06/02/2024 ; *
  6469                                  	call	SETREAD_X
  6470                                  %else
  6471 00000AC4 E8BD3A                  	call	SETREAD_XT
  6472                                  %endif
  6473                                  
  6474 00000AC7 1E                      	PUSH	DS
  6475 00000AC8 C536[2E00]              	LDS	SI,[BCLOCK]
  6476 00000ACC E83E3A                  	CALL	DEVIOCALL2	;Get correct day count
  6477 00000ACF 1F                      	POP	DS
  6478 00000AD0 5B                      	POP	BX
  6479 00000AD1 E8ED3A                  	CALL	SETWRITE
  6480 00000AD4 8F06[BA03]              	POP	WORD [TIMEBUF+4]
  6481 00000AD8 8F06[B803]              	POP	WORD [TIMEBUF+2]
  6482 00000ADC C536[2E00]              	LDS	SI,[BCLOCK]
  6483 00000AE0 E82A3A                  	CALL	DEVIOCALL2	;Set the time
  6484                                  	; 06/01/2024
  6485                                  	;XOR	AL,AL
  6486                                  	;RETN
  6487 00000AE3 EBC2                    	jmp	short set_time_ok
  6488                                  
  6489                                  ; 11/07/2018 - Retro DOS v3.0
  6490                                  ; Retro DOS v2.0 - 14/03/2018
  6491                                  
  6492                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6493                                  
  6494                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6495                                  ;----------------------------------------------------------
  6496                                  ; Date16 returns the current date in AX, current time in DX
  6497                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6498                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6499                                  
  6500                                  DATE16:
  6501                                  	
  6502                                  ;M048	Context DS
  6503                                  ;
  6504                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6505                                  ; is DOSDATA
  6506                                  
  6507                                  	;push	ss
  6508                                  	;pop	ds
  6509                                  
  6510                                  	;getdseg <ds>		; M048
  6511                                  
  6512                                  	; 13/05/2019 - Retro DOS v4.0
  6513 00000AE5 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6514                                  
  6515 00000AEA 51                      	PUSH	CX
  6516 00000AEB 06                      	PUSH	ES
  6517 00000AEC E82000                  	CALL	READTIME
  6518 00000AEF 07                      	POP	ES
  6519 00000AF0 D0E1                    	SHL	CL,1		;Minutes to left part of byte
  6520 00000AF2 D0E1                    	SHL	CL,1
  6521 00000AF4 D1E1                    	SHL	CX,1		;Push hours and minutes to left end
  6522 00000AF6 D1E1                    	SHL	CX,1
  6523 00000AF8 D1E1                    	SHL	CX,1
  6524 00000AFA D0EE                    	SHR	DH,1		;Count every two seconds
  6525 00000AFC 08F1                    	OR	CL,DH		;Combine seconds with hours and minutes
  6526 00000AFE 89CA                    	MOV	DX,CX
  6527                                  
  6528                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6529                                  
  6530 00000B00 A1[5103]                	MOV	AX,[MONTH]	;Fetch month and year
  6531 00000B03 B104                    	MOV	CL,4
  6532 00000B05 D2E0                    	SHL	AL,CL		;Push month to left to make room for day
  6533 00000B07 D1E0                    	SHL	AX,1
  6534 00000B09 59                      	POP	CX
  6535 00000B0A 0A06[5003]              	OR	AL,[DAY]
  6536                                  RET21:
  6537 00000B0E C3                      	RETN
  6538                                  
  6539                                  ;----------------------------------------------------------
  6540                                  
  6541                                  READTIME:
  6542                                  
  6543                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6544                                  ;Uses AX, CX, DX.
  6545                                  
  6546 00000B0F C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6547 00000B15 56                      	PUSH	SI
  6548 00000B16 53                      	PUSH	BX
  6549                                  
  6550 00000B17 BB[B603]                	MOV	BX,TIMEBUF
  6551                                  ; 07/02/2024
  6552                                  %if 0
  6553                                  	MOV	CX,6
  6554                                  	; 06/02/2024
  6555                                  	;;XOR	DX,DX
  6556                                  	;;MOV	AX,DX
  6557                                  	;; 06/01/2024
  6558                                  	;xor	ax,ax
  6559                                  	;cwd
  6560                                  	;CALL	SETREAD
  6561                                  	; 06/02/2024
  6562                                  	call	SETREAD_X
  6563                                  %else
  6564 00000B1A E86B3A                  	call	SETREAD_XTC
  6565                                  %endif
  6566 00000B1D 1E                      	PUSH	DS
  6567 00000B1E C536[2E00]              	LDS	SI,[BCLOCK]
  6568 00000B22 E8E839                  	CALL	DEVIOCALL2	;Get correct date and time
  6569 00000B25 1F                      	POP	DS
  6570 00000B26 5B                      	POP	BX
  6571 00000B27 5E                      	POP	SI
  6572 00000B28 A1[B603]                	MOV	AX,[TIMEBUF]
  6573 00000B2B 8B0E[B803]              	MOV	CX,[TIMEBUF+2]
  6574 00000B2F 8B16[BA03]              	MOV	DX,[TIMEBUF+4]
  6575 00000B33 3B06[5403]              	CMP	AX,[DAYCNT]	;See if day count is the same
  6576                                  	;JZ	SHORT RET22
  6577 00000B37 74D5                    	JZ	SHORT RET21 ; 18/07/2018
  6578                                  	;cmp	ax,43830
  6579 00000B39 3D36AB                  	CMP	AX,FOURYEARS*30 ;Number of days in 120 years
  6580 00000B3C 733D                    	JAE	SHORT RET22	;Ignore if too large
  6581 00000B3E A3[5403]                	MOV	[DAYCNT],AX
  6582 00000B41 56                      	PUSH	SI
  6583 00000B42 51                      	PUSH	CX
  6584 00000B43 52                      	PUSH	DX		;Save time
  6585 00000B44 31D2                    	XOR	DX,DX
  6586                                  	;mov	cx,1461
  6587 00000B46 B9B505                  	MOV	CX,FOURYEARS	;Number of days in 4 years
  6588 00000B49 F7F1                    	DIV	CX		;Compute number of 4-year units
  6589 00000B4B D1E0                    	SHL	AX,1
  6590 00000B4D D1E0                    	SHL	AX,1
  6591 00000B4F D1E0                    	SHL	AX,1		;Multiply by 8 (no. of half-years)
  6592 00000B51 89C1                    	MOV	CX,AX		;<240 implies AH=0
  6593                                  
  6594 00000B53 BE[140D]                	MOV	SI,YRTAB	;Table of days in each year
  6595                                  
  6596 00000B56 E82300                  	CALL	DSLIDE		;Find out which of four years we're in
  6597 00000B59 D1E9                    	SHR	CX,1		;Convert half-years to whole years
  6598 00000B5B 7304                    	JNC	SHORT SK	;Extra half-year?
  6599 00000B5D 81C2C800                	ADD	DX,200
  6600                                  SK:
  6601 00000B61 E82200                  	CALL	SETYEAR
  6602 00000B64 B101                    	MOV	CL,1		;At least at first month in year
  6603                                  
  6604 00000B66 BE[1C0D]                	MOV	SI,MONTAB	;Table of days in each month
  6605                                  	
  6606 00000B69 E81000                  	CALL	DSLIDE		;Find out which month we're in
  6607 00000B6C 880E[5103]              	MOV	[MONTH],CL
  6608 00000B70 42                      	INC	DX		;Remainder is day of month (start with one)
  6609 00000B71 8816[5003]              	MOV	[DAY],DL
  6610 00000B75 E88A00                  	CALL	WKDAY		;Set day of week
  6611 00000B78 5A                      	POP	DX
  6612 00000B79 59                      	POP	CX
  6613 00000B7A 5E                      	POP	SI
  6614                                  RET22:  
  6615 00000B7B C3                      	RETN
  6616                                  
  6617                                  ;----------------------------------------------------------
  6618                                  
  6619                                  DSLIDE:
  6620                                  	;MOV	AH,0
  6621                                  	; 06/01/2024
  6622                                  	; (AH = 0)
  6623                                  DSLIDE1:
  6624 00000B7C AC                      	LODSB			;Get count of days
  6625 00000B7D 39C2                    	CMP	DX,AX		;See if it will fit
  6626                                  	;JB	SHORT RET23	;If not, done
  6627 00000B7F 72FA                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6628 00000B81 29C2                    	SUB	DX,AX
  6629 00000B83 41                      	INC	CX		;Count one more month/year
  6630 00000B84 EBF6                    	JMP	SHORT DSLIDE1
  6631                                  
  6632                                  ;----------------------------------------------------------
  6633                                  
  6634                                  SETYEAR:
  6635                                  
  6636                                  ;Set year with value in CX. Adjust length of February for this year.
  6637                                  
  6638                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6639                                  ;	  set DS to DOSDATA. Since the only guy calling this should be the DOS
  6640                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6641                                  ;	preserve DS as CHKYR is also called as a routine.
  6642                                  
  6643                                  	; MSDOS 6.0 (18/07/2018) ; *
  6644                                  
  6645                                  	;GETDSEG DS
  6646                                  
  6647                                  	;PUSH	CS  ; *
  6648                                  	;POP	DS  ; *
  6649                                  
  6650                                  	; 13/05/2019 - Retro DOS v4.0
  6651 00000B86 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6652                                  
  6653                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6654                                  	; 05/11/2022 
  6655                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6656                                  
  6657 00000B8B 880E[5203]              	MOV	[YEAR],CL
  6658                                  CHKYR:
  6659 00000B8F F6C103                  	TEST	CL,3		;Check for leap year
  6660 00000B92 B01C                    	MOV	AL,28
  6661 00000B94 7502                    	JNZ	SHORT SAVFEB	;28 days if no leap year
  6662 00000B96 FEC0                    	INC	AL		;Add leap day
  6663                                  SAVFEB:
  6664 00000B98 A2[1D0D]                	mov	[february],al
  6665                                  	;MOV	[MONTAB+1],AL	;Store for February
  6666                                  RET23:  
  6667 00000B9B C3                      	RETN
  6668                                  
  6669                                  ;----------------------------------------------------------
  6670                                  
  6671                                  DODATE:
  6672 00000B9C E8F0FF                  	CALL	CHKYR		;Set Feb. up for new year
  6673 00000B9F 88F0                    	MOV	AL,DH
  6674                                  
  6675 00000BA1 BB[1B0D]                	MOV	BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6676                                  
  6677 00000BA4 D7                      	XLAT			;Look up days in month
  6678 00000BA5 38D0                    	CMP	AL,DL
  6679 00000BA7 B0FF                    	MOV	AL,-1		;Restore error flag, just in case
  6680                                  	;JB	SHORT RET25	;Error if too many days
  6681 00000BA9 72F0                    	jb	short RET23 ; 18/07/2018
  6682 00000BAB E8D8FF                  	CALL	SETYEAR
  6683                                  ;
  6684                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6685                                  ;
  6686 00000BAE 8916[5003]              	MOV	[DAY],DX	;Set both day and month
  6687 00000BB2 D1E9                    	SHR	CX,1
  6688 00000BB4 D1E9                    	SHR	CX,1
  6689                                  	;mov	ax,1461
  6690 00000BB6 B8B505                  	MOV	AX,FOURYEARS
  6691 00000BB9 89D3                    	MOV	BX,DX
  6692 00000BBB F7E1                    	MUL	CX
  6693 00000BBD 8A0E[5203]              	MOV	CL,[YEAR]
  6694 00000BC1 80E103                  	AND	CL,3
  6695                                  
  6696 00000BC4 BE[140D]                	MOV	SI,YRTAB
  6697                                  
  6698 00000BC7 89C2                    	MOV	DX,AX
  6699 00000BC9 D1E1                    	SHL	CX,1		;Two entries per year, so double count
  6700 00000BCB E84700                  	CALL	DSUM		;Add up the days in each year
  6701 00000BCE 88F9                    	MOV	CL,BH		;Month of year
  6702                                  
  6703 00000BD0 BE[1C0D]                	MOV	SI,MONTAB
  6704                                  
  6705 00000BD3 49                      	DEC	CX		;Account for months starting with one
  6706 00000BD4 E83E00                  	CALL	DSUM		;Add up days in each month
  6707 00000BD7 88D9                    	MOV	CL,BL		;Day of month
  6708 00000BD9 49                      	DEC	CX		;Account for days starting with one
  6709 00000BDA 01CA                    	ADD	DX,CX		;Add in to day total
  6710 00000BDC 92                      	XCHG	AX,DX		;Get day count in AX
  6711 00000BDD A3[5403]                	MOV	[DAYCNT],AX
  6712 00000BE0 56                      	PUSH	SI
  6713 00000BE1 53                      	PUSH	BX
  6714 00000BE2 50                      	PUSH	AX
  6715                                  
  6716                                  ; 07/02/2024
  6717                                  %if 0
  6718                                  	MOV	BX,TIMEBUF
  6719                                  	MOV	CX,6
  6720                                  	; 06/02/2024 ; *
  6721                                  	;;XOR	DX,DX
  6722                                  	;;MOV	AX,DX
  6723                                  	;; 06/01/2024
  6724                                  	;xor	ax,ax
  6725                                  	;cwd
  6726                                  	PUSH	BX
  6727                                  	;CALL	SETREAD
  6728                                  	; 06/02/2024 ; *
  6729                                  	call	SETREAD_X
  6730                                  %else
  6731 00000BE3 E89E39                  	call	SETREAD_XT
  6732                                  %endif
  6733                                  
  6734 00000BE6 1E                      	PUSH	DS
  6735 00000BE7 C536[2E00]              	LDS	SI,[BCLOCK]
  6736 00000BEB E81F39                  	CALL	DEVIOCALL2	;Get correct date and time
  6737 00000BEE 1F                      	POP	DS
  6738 00000BEF 5B                      	POP	BX
  6739 00000BF0 E8CE39                  	CALL	SETWRITE
  6740 00000BF3 8F06[B603]              	POP	WORD [TIMEBUF]
  6741 00000BF7 1E                      	PUSH	DS
  6742 00000BF8 C536[2E00]              	LDS	SI,[BCLOCK]
  6743 00000BFC E80E39                  	CALL	DEVIOCALL2	;Set the date
  6744 00000BFF 1F                      	POP	DS
  6745 00000C00 5B                      	POP	BX
  6746 00000C01 5E                      	POP	SI
  6747                                  WKDAY:
  6748 00000C02 A1[5403]                	MOV	AX,[DAYCNT]
  6749 00000C05 31D2                    	XOR	DX,DX
  6750 00000C07 B90700                  	MOV	CX,7
  6751 00000C0A 40                      	INC	AX
  6752 00000C0B 40                      	INC	AX		;First day was Tuesday
  6753 00000C0C F7F1                    	DIV	CX		;Compute day of week
  6754 00000C0E 8816[5603]              	MOV	[WEEKDAY],DL
  6755 00000C12 30C0                    	XOR	AL,AL		;Flag OK
  6756                                  RET25:
  6757 00000C14 C3                      	RETN
  6758                                  
  6759                                  ;----------------------------------------------------------
  6760                                  
  6761                                  ;**	DSUM - Compute the sum of a string of bytes
  6762                                  ;
  6763                                  ;	ENTRY	(cx) = byte count
  6764                                  ;		(ds:si) = byte address
  6765                                  ;		(dx) = sum register, initialized by caller
  6766                                  ;	EXIT	(dx) updated
  6767                                  ;	USES	ax, cx, dx, si, flags
  6768                                  
  6769                                  DSUM:
  6770 00000C15 B400                    	MOV	AH,0
  6771 00000C17 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6772                                  	;JCXZ	RET25 ; 18/07/2018
  6773                                  DSUM1:
  6774 00000C19 AC                      	LODSB
  6775 00000C1A 01C2                    	ADD	DX,AX
  6776 00000C1C E2FB                    	LOOP	DSUM1
  6777                                  DSUM9:
  6778 00000C1E C3                      	RETN
  6779                                  
  6780                                  ;============================================================================
  6781                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6782                                  ;============================================================================
  6783                                  ; 29/04/2019 - Retro DOS v4.0
  6784                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6785                                  
  6786                                  ; 12/03/2018 - Retro DOS v2.0 
  6787                                  
  6788                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6789                                  ;NAME	GETSET
  6790                                  
  6791                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6792                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6793                                  
  6794                                  ;USERNUM:
  6795                                  ;	DW	0			; 24 bit user number
  6796                                  ;       DB      0
  6797                                  ;;	IF      IBM
  6798                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6799                                  ;;	ELSE
  6800                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6801                                  ;;	ENDIF
  6802                                  
  6803                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6804                                  ;; 08/07/2018 - Retro DOS v3.0
  6805                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6806                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6807                                  
  6808                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6809                                  ;----------------------------------------------------------------------------
  6810                                  
  6811                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6812                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6813                                  
  6814                                  _$GET_VERSION:
  6815                                  
  6816                                  ; Inputs:
  6817                                  ;       None
  6818                                  ; Function:
  6819                                  ;       Return MS-DOS version number
  6820                                  ; Outputs:
  6821                                  ;       OEM number in BH
  6822                                  ;       User number in BL:CX (24 bits)
  6823                                  ;       Version number as AL.AH in binary
  6824                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6825                                  
  6826                                  ; MSDOS 6.0
  6827                                  ;
  6828                                  ;	Fake_Count is used to lie about the version numbers to support
  6829                                  ;	old binarys. See ms_table.asm for more info.
  6830                                  ;
  6831                                  ;		if input al = 00
  6832                                  ;		  (bh) = OEM number			
  6833                                  ;		else if input al = 01
  6834                                  ;		  (bh) = version flags
  6835                                  ;		 
  6836                                  ;		       	 bits 0-2 = DOS internal revision
  6837                                  ;		       	 bits 3-7 = DOS type flags
  6838                                  ;		              bit 3    = DOS is in ROM
  6839                                  ;		              bit 4    = DOS in in HMA
  6840                                  ;		              bits 5-7 = reserved
  6841                                  ;               M007 change - only bit 3 is now valid. Other bits
  6842                                  ;               are 0 when AL = 1
  6843                                  
  6844                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6845 00000C1F 36C50E[B203]            	lds	cx, [ss:USERNUM]
  6846 00000C24 8CDB                    	mov	bx, ds
  6847                                  
  6848                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6849                                  	;--------------------------------------
  6850                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6851                                  
  6852 00000C26 16                              PUSH    SS
  6853 00000C27 1F                              POP     DS
  6854                                          
  6855                                  	; 06/01/2024
  6856                                  	;MOV	BX,[USERNUM+2]
  6857                                          ;MOV	CX,[USERNUM]
  6858                                  
  6859                                  	; 13/05/2019 - Retro DOS v4.0
  6860                                  
  6861                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6862                                  	;DOS flags
  6863                                  
  6864 00000C28 3C01                    	cmp	AL,1
  6865 00000C2A 7502                    	jne	short Norm_Vers
  6866                                  
  6867                                  ;ifdef ROMDOS
  6868                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6869                                  ;				(DOSINROM = 8)
  6870                                  ;else
  6871 00000C2C 30FF                            xor     bh,bh		; Otherwise return 0
  6872                                  ;endif				;M007 end
  6873                                  
  6874                                  Norm_Vers:
  6875                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6876                                  
  6877                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6878                                  	; 26/06/2024
  6879                                  	; 13/05/2019 - Retro DOS v4.0
  6880                                  	;push	ds		; Get the version number from the
  6881 00000C2E 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6882                                  	;mov	ax,[40h]
  6883 00000C32 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6884                                  	; 07/12/2022
  6885                                  	;pop	ds
  6886 00000C35 E84DF8                  	call	Get_User_Stack
  6887                                  				; Put values for return registers
  6888                                  				; in the proper place on the user's	 
  6889                                  				; stack addressed by DS:SI
  6890                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  6891                                  gdrvfspc_ret:
  6892                                          ;MOV	[SI+user_env.user_AX],AX
  6893 00000C38 8904                            MOV	[SI],AX
  6894                                          ;MOV	[SI+4],CX
  6895 00000C3A 894C04                  	mov	[SI+user_env.user_CX],CX
  6896                                  set_user_bx:
  6897                                  	;MOV	[SI+2],BX
  6898 00000C3D 895C02                  	mov	[SI+user_env.user_BX],BX
  6899                                  
  6900 00000C40 C3                      	RETN
  6901                                  
  6902                                  ; 18/07/2018 - Retro DOS v3.0
  6903                                  
  6904                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6905                                  ;----------------------------------------------------------------------------
  6906                                  
  6907                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6908                                  ;
  6909                                  ;	ENTRY	none
  6910                                  ;	EXIT	(al) = value of VERIFY flag
  6911                                  ;	USES	all
  6912                                  
  6913                                  
  6914                                  _$GET_VERIFY_ON_WRITE:
  6915                                  
  6916                                  ;hkn; SS override
  6917 00000C41 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6918 00000C45 C3                      	retn
  6919                                  
  6920                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6921                                  ;
  6922                                  ;	ENTRY	(al) = value of VERIFY flag
  6923                                  ;	EXIT	none
  6924                                  ;	USES	all
  6925                                  
  6926                                  _$SET_VERIFY_ON_WRITE:
  6927                                  
  6928 00000C46 2401                    	AND	AL,1
  6929                                  ;hkn; SS override
  6930 00000C48 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6931                                  RET27:	; 18/07/2018
  6932 00000C4C C3                      	retn
  6933                                  
  6934                                  ; 19/07/2018 - Retro DOS v3.0
  6935                                  
  6936                                  ;BREAK <$International - return country-dependent information>
  6937                                  ;----------------------------------------------------------------------------
  6938                                  ;
  6939                                  ; Procedure Name : $INTERNATIONAL
  6940                                  ;
  6941                                  ; Inputs:
  6942                                  ;	MOV	AH,International
  6943                                  ;	MOV	AL,country	(al = 0 => current country)
  6944                                  ;      [MOV	BX,country]
  6945                                  ;	LDS	DX,block
  6946                                  ;	INT	21
  6947                                  ; Function:
  6948                                  ;	give users an idea of what country the application is running
  6949                                  ; Outputs:
  6950                                  ;	IF DX != -1 on input (get country)
  6951                                  ;	  AL = 0 means return current country table.
  6952                                  ;	  0<AL<0FFH means return country table for country AL
  6953                                  ;	  AL = 0FF means return country table for country BX
  6954                                  ;	  No Carry:
  6955                                  ;	     Register BX will contain the 16-bit country code.
  6956                                  ;	     Register AL will contain the low 8 bits of the country code.
  6957                                  ;	     The block pointed to by DS:DX is filled in with the information
  6958                                  ;	     for the particular country.
  6959                                  ;		BYTE  Size of this table excluding this byte and the next
  6960                                  ;		BYTE  Country code represented by this table
  6961                                  ;			A sequence of n bytes, where n is the number specified
  6962                                  ;			by the first byte above and is not > internat_block_max,
  6963                                  ;			in the correct order for being returned by the
  6964                                  ;			INTERNATIONAL call as follows:
  6965                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6966                                  ;		5 BYTE	Currency symbol null terminated
  6967                                  ;		2 BYTE	thousands separator null terminated
  6968                                  ;		2 BYTE	Decimal point null terminated
  6969                                  ;		2 BYTE	Date separator null terminated
  6970                                  ;		2 BYTE	Time separator null terminated
  6971                                  ;		1 BYTE	Bit field.  Currency format.
  6972                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6973                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6974                                  ;		1 BYTE	No. of significant decimal digits in currency
  6975                                  ;		1 BYTE	Bit field.  Time format.
  6976                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6977                                  ;		DWORD	Call address of case conversion routine
  6978                                  ;		2 BYTE	Data list separator null terminated.
  6979                                  ;	  Carry:
  6980                                  ;	     Register AX has the error code.
  6981                                  ;	IF DX = -1 on input (set current country)
  6982                                  ;	  AL = 0 is an error
  6983                                  ;	  0<AL<0FFH means set current country to country AL
  6984                                  ;	  AL = 0FF means set current country to country BX
  6985                                  ;	  No Carry:
  6986                                  ;	    Current country SET
  6987                                  ;	    Register AL will contain the low 8 bits of the country code.
  6988                                  ;	  Carry:
  6989                                  ;	     Register AX has the error code.
  6990                                  ;-----------------------------------------------------------------------------
  6991                                  
  6992                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6993                                  
  6994                                  ; 13/05/2019 - Retro DOS v4.0
  6995                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6996                                  
  6997                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6998                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6999                                  
  7000                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  7001                                  	 
  7002 00000C4D 3CFF                    	CMP	AL,0FFH
  7003 00000C4F 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  7004 00000C51 88C3                    	MOV	BL,AL			; Put AL country code in BX
  7005 00000C53 30FF                    	XOR	BH,BH
  7006                                  BX_HAS_CODE:
  7007 00000C55 1E                      	PUSH	DS
  7008 00000C56 07                      	POP	ES
  7009 00000C57 52                      	PUSH	DX
  7010 00000C58 5F                      	POP	DI			; User buffer to ES:DI
  7011                                  
  7012                                  ;hkn; SS is DOSDATA
  7013                                  ;	context DS
  7014                                  
  7015 00000C59 16                      	push	ss
  7016 00000C5A 1F                      	pop	ds
  7017                                  
  7018 00000C5B 83FFFF                  	CMP	DI,-1
  7019 00000C5E 745D                    	JZ	short international_set
  7020 00000C60 09DB                    	OR	BX,BX
  7021 00000C62 7505                    	JNZ	short international_find
  7022                                  
  7023                                  ;hkn; country_cdpg is in DOSDATA segment.
  7024 00000C64 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7025                                  
  7026 00000C67 EB39                    	JMP	SHORT international_copy
  7027                                  
  7028                                  international_find:
  7029                                  	;MOV	BP,0			 ; flag it for GetCntry only
  7030                                  	; 06/01/2024
  7031 00000C69 31ED                    	xor	bp,bp ; 0
  7032 00000C6B E80A00                  	CALL	international_get
  7033 00000C6E 7255                    	JC	short errtn
  7034                                  	;CMP	BX,0			 ; nlsfunc finished it ?
  7035                                  	; 06/01/2024
  7036 00000C70 09DB                    	or	bx,bx
  7037 00000C72 752E                    	JNZ	SHORT international_copy ; no, copy by myself
  7038 00000C74 89D3                    	MOV	BX,DX			 ; put country back
  7039 00000C76 EB3A                    	JMP	SHORT international_ok3
  7040                                  
  7041                                  international_get:
  7042 00000C78 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7043                                  
  7044                                  ;hkn; country_cdpg is in DOSDATA segment.
  7045                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7046                                  
  7047                                  	; MSDOS 3.3
  7048                                  	;;cmp	bx,[SI+63h]
  7049                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  7050                                  	;jz	short RET27
  7051                                  
  7052                                  	; 13/05/2019 - Retro DOS v4.0
  7053                                  
  7054                                  	; MSDOS 6.0
  7055                                  	;cmp	bx,[ss:si+68h]
  7056 00000C7B 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7057 00000C7F 74CB                    	jz	short RET27			; return if equal
  7058                                  
  7059 00000C81 89DA                    	MOV	DX,BX
  7060 00000C83 31DB                    	XOR	BX,BX			; bx = 0, default code page
  7061                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7062 00000C85 B80014                  	mov	ax,1400h
  7063 00000C88 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7064                                  			; Return: AL = 00h not installed, OK to install
  7065                                  			; 01h not installed, not OK
  7066                                  			; FFh installed
  7067 00000C8A 3CFF                    	CMP	AL,0FFH
  7068 00000C8C 7510                    	JNZ	short interr		; not in memory
  7069                                  	
  7070                                  	; 06/01/2024
  7071 00000C8E B80314                  	mov	ax,1403h		; set country info
  7072                                  
  7073                                  	;cmp	bp,0
  7074 00000C91 09ED                    	or	bp,bp			; GetCntry ?
  7075 00000C93 7501                    	JNZ	short stcdpg
  7076                                  	
  7077                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  7078                                  	;mov	ax,1404h
  7079 00000C95 40                      	inc	ax	; AX = 1404h ; get country info
  7080                                  
  7081                                  	; 06/01/2024
  7082                                  	;int	2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7083                                  	;		; BX = code page, DX = country code,
  7084                                  	;		; DS:SI -> internal code page structure
  7085                                  	;		; ES:DI -> user buffer
  7086                                  	;		; Return: AL = status
  7087                                  	;
  7088                                  	;JMP	short chkok
  7089                                  	
  7090                                  	;nop
  7091                                  
  7092                                  stcdpg:
  7093                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  7094                                  	; 06/01/2024
  7095                                  	;mov     ax,1403h
  7096                                  gscdpg:
  7097 00000C96 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7098                                  			; DS:SI -> internal code page structure
  7099                                  			; BX = code page, DX = country code
  7100                                  			; Return: AL = status
  7101                                  chkok:
  7102 00000C98 08C0                    	or	al,al			; success ?
  7103                                  	;retz				; yes
  7104 00000C9A 74B0                    	jz	short RET27
  7105                                  
  7106                                  setcarry:
  7107 00000C9C F9                      	STC				; set carry
  7108 00000C9D C3                      	retn
  7109                                  interr:
  7110 00000C9E B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7111 00000CA0 EBFA                    	JMP	short setcarry
  7112                                  
  7113                                  international_copy:
  7114                                  
  7115                                  ;hkn; country_cdpg is in DOSDATA segment.
  7116                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7117                                  
  7118                                  	; MSDOS 3.3
  7119                                  	;;mov	bx,[SI+63h]
  7120                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7121                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7122                                  
  7123                                  	; 13/05/2019 - Retro DOS v4.0
  7124                                  
  7125                                  	; MSDOS 6.0
  7126                                  	;mov	bx,[ss:si+68h]
  7127 00000CA2 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7128 00000CA6 BE[9612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7129                                  
  7130                                  	;mov	cx,24
  7131 00000CA9 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7132                                  
  7133                                  	; MSDOS 6.0
  7134                                  
  7135                                  ;hkn;	must set up DS to SS so that international info can be copied
  7136                                  	
  7137 00000CAC 1E                      	push	ds
  7138                                  
  7139 00000CAD 16                      	push	ss			; cs -> ss
  7140 00000CAE 1F                      	pop	ds
  7141                                  
  7142 00000CAF F3A4                    	REP	MOVSB			; copy country info
  7143                                  
  7144                                  	; MSDOS 6.0
  7145                                  
  7146 00000CB1 1F                      	pop	ds	;hkn;	restore ds
  7147                                  
  7148                                  international_ok3:
  7149 00000CB2 E8D0F7                  	call	Get_User_Stack
  7150                                  ;ASSUME	DS:NOTHING
  7151                                  	;MOV	[SI+2],BX
  7152 00000CB5 895C02                  	MOV	[SI+user_env.user_BX],BX
  7153                                  international_ok:
  7154 00000CB8 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7155                                  ;SYS_RET_OK_jmp:
  7156                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7157                                  nono:	; 15/12/2022
  7158                                  SYS_RET_OK_jmp:
  7159 00000CBA E978F9                  	jmp	SYS_RET_OK
  7160                                  
  7161                                  international_set:
  7162                                  
  7163                                  ;hkn; ASSUME	DS:DOSGROUP
  7164                                  ;ASSUME	DS:DOSDATA
  7165                                  
  7166 00000CBD BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7167 00000CC0 E8B5FF                  	CALL	international_get
  7168 00000CC3 73F3                    	JNC	short international_ok
  7169                                  errtn:
  7170 00000CC5 3CFF                    	CMP	AL,0FFH
  7171 00000CC7 7403                    	JZ	short errtn2
  7172                                  errtn1:
  7173 00000CC9 E972F9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7174                                  errtn2:
  7175                                  	;error	error_invalid_function	; NLSFUNC not existent
  7176                                  
  7177                                  	;mov	al,1
  7178 00000CCC B001                    	mov	al,error_invalid_function 
  7179 00000CCE EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7180                                  ;errtn3:
  7181                                  ;	jmp	SYS_RET_ERR
  7182                                  
  7183                                  ;EndProc $INTERNATIONAL
  7184                                  
  7185                                  ; 19/07/2018
  7186                                  
  7187                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7188                                  
  7189                                  ;----------------------------------------------------------------------------
  7190                                  ;
  7191                                  ; Procedure Name : $GetExtCntry
  7192                                  ;
  7193                                  ; Inputs:
  7194                                  ;	if AL >= 20H
  7195                                  ;	  AL= 20H    capitalize single char, DL= char
  7196                                  ;	      21H    capitalize string, CX= string length
  7197                                  ;	      22H    capitalize ASCIIZ string
  7198                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7199                                  ;	      80H bit 0 = use normal upper case table
  7200                                  ;		      1 = use file upper case table
  7201                                  ;	   DS:DX points to string
  7202                                  ;
  7203                                  ;	else
  7204                                  ;
  7205                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7206                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7207                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7208                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7209                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7210                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7211                                  ;	INT	21
  7212                                  ; Function:
  7213                                  ;	give users extended country dependent information
  7214                                  ;	or capitalize chars
  7215                                  ; Outputs:
  7216                                  ;	  No Carry:
  7217                                  ;	     extended country info is succesfully returned
  7218                                  ;	  Carry:
  7219                                  ;	     Register AX has the error code.
  7220                                  ;	     AX=0, NO	 for YES/NO CHECK
  7221                                  ;		1, YES
  7222                                  ;----------------------------------------------------------------------------
  7223                                  
  7224                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7225                                  
  7226                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7227                                  
  7228                                  	; MSDOS 6.0
  7229                                  _$GetExtCntry:
  7230 00000CD0 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7231 00000CD2 7269                    	JB	short notcap
  7232                                  capcap: 				;
  7233 00000CD4 A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7234 00000CD6 7505                    	JNZ	short fileupper		; file upper case
  7235                                  
  7236                                  ;hkn; UCASE_TAB in DOSDATA
  7237 00000CD8 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7238 00000CDB EB05                    	JMP	SHORT capit
  7239                                  
  7240                                  fileupper:
  7241                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM - DOSCODE:4C57h)
  7242                                  	; ((Note: This must be a bugfix, because bit 7 of AX is 1 here!))
  7243                                  	; AL >= 80h
  7244 00000CDD 247F                    	and	al,7Fh
  7245                                  
  7246                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7247 00000CDF BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7248                                  capit:					;
  7249 00000CE2 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7250 00000CE4 750D                    	JNZ	short chkyes		; no
  7251 00000CE6 88D0                    	MOV	AL,DL			; set up AL
  7252 00000CE8 E8FB41                  	call	GETLET3 		; upper case it
  7253 00000CEB E897F7                  	call	Get_User_Stack		; get user stack
  7254                                  	;mov	[si+6],al
  7255 00000CEE 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7256 00000CF1 EBC7                    	JMP	SHORT nono		; done
  7257                                  chkyes: 				;
  7258 00000CF3 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7259 00000CF5 7522                    	JNZ	short capstring		; no
  7260                                  
  7261 00000CF7 31C0                    	XOR	AX,AX			; presume NO
  7262                                  		      
  7263                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7264                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7265                                  
  7266                                  	; 06/08/2018 - Retro DOS v3.0
  7267                                  	; 13/05/2019 - Retro DOS v4.0
  7268                                  	;cmp	dl,'Y'
  7269 00000CF9 2E3A16[140A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7270 00000CFE 7416                    	JZ	short yesyes		; yes
  7271                                  	;cmp	dl,'y'
  7272 00000D00 2E3A16[160A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7273 00000D05 740F                    	JZ	short yesyes		; yes
  7274                                  	;cmp	dl,'N'
  7275 00000D07 2E3A16[150A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7276 00000D0C 74AC                    	JZ	short nono		; no
  7277                                  	;cmp	dl,'n'
  7278 00000D0E 2E3A16[170A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7279 00000D13 74A5                    	JZ	short nono		; no
  7280                                  ;dbcs_char:				;
  7281 00000D15 40                      	INC	AX			; not YES or NO
  7282                                  yesyes: 				;
  7283 00000D16 40                      	INC	AX			; return 1
  7284                                  	; 15/12/2022
  7285                                  ;nono:	
  7286 00000D17 EBA1                    	jmp	short SYS_RET_OK_jmp	;
  7287                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7288                                  	;jmp	SYS_RET_OK		; done
  7289                                  
  7290                                  capstring:				;
  7291 00000D19 89D6                    	MOV	SI,DX			; si=dx
  7292 00000D1B 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7293 00000D1D 750D                    	JNZ	short capascii		; no
  7294                                  	;OR	CX,CX			; check count 0
  7295                                  	;JZ	short nono		; yes finished
  7296                                  	; 06/01/2024
  7297 00000D1F E399                    	jcxz	nono
  7298                                  concap: 				;
  7299 00000D21 AC                      	LODSB				; get char
  7300 00000D22 E8C141                  	call	GETLET3 		; upper case it
  7301 00000D25 8844FF                  	MOV	byte [SI-1],AL		; store back
  7302                                  ;next99: 				;
  7303 00000D28 E2F7                    	LOOP	concap			; continue
  7304 00000D2A EB8E                    	JMP	short nono		; done
  7305                                  capascii:				;
  7306 00000D2C 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7307 00000D2E 7545                    	JNZ	short capinval		; no
  7308                                  concap2:				;
  7309 00000D30 AC                      	LODSB				; get char
  7310 00000D31 08C0                    	or	al,al			; end of string ?
  7311 00000D33 7485                    	JZ	short nono		; yes
  7312 00000D35 E8AE41                  	call	GETLET3 		; upper case it
  7313 00000D38 8844FF                  	MOV	[SI-1],AL		; store back
  7314 00000D3B EBF3                    	JMP	short concap2 		; continue
  7315                                  
  7316                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7317                                  
  7318                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7319                                  ; _$GetExtCntry:
  7320                                  
  7321                                  notcap:
  7322 00000D3D 83F905                  	CMP	CX,5			; minimum size is 5
  7323 00000D40 7277                    	jb	short sizeerror
  7324                                  
  7325                                  GEC_CONT:
  7326                                  ;hkn; SS is DOSDATA
  7327                                  	;context DS
  7328                                  
  7329 00000D42 16                      	push	ss
  7330                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7331 00000D43 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7332                                  	
  7333                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7334 00000D44 BE[2A12]                	MOV	SI,COUNTRY_CDPG
  7335                                  
  7336 00000D47 83FAFF                  	CMP	DX,-1			; active country ?
  7337 00000D4A 7503                    	JNZ	short GETCDPG 		; no
  7338                                  
  7339                                  ;hkn; use DS override to accesss country_cdpg fields
  7340                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7341                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7342 00000D4C 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7343                                  					; get active country id;smr;use DS
  7344                                  GETCDPG:
  7345 00000D4F 83FBFF                  	CMP	BX,-1			; active code page?
  7346 00000D52 7503                    	JNZ	short CHKAGAIN		; no, check again
  7347                                  
  7348                                  ;hkn; use DS override to accesss country_cdpg fields
  7349                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7350                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7351 00000D54 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7352                                  					; get active code page id;smr;Use DS
  7353                                  CHKAGAIN:
  7354                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7355 00000D57 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7356                                  					; same as active country id?;smr;use DS
  7357 00000D5A 7550                    	JNZ	short CHKNLS		; no
  7358                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7359 00000D5C 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7360                                  					; same as active code pg id?;smr;use DS
  7361 00000D5F 754B                    	JNZ	short CHKNLS		; no
  7362                                  CHKTYPE:
  7363                                  	;mov	bx,[si+48h]
  7364 00000D61 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7365                                  					; bx = sys code page id;smr;use DS
  7366 00000D64 51                      	PUSH	CX			; save cx
  7367                                  	;mov	cx,[si+4Ah]
  7368 00000D65 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7369                                  	;mov	si,COUNTRY_CDPG+76
  7370 00000D68 BE[7612]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7371                                  NXTENTRY:
  7372 00000D6B 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7373 00000D6D 740B                    	JZ	short FOUNDIT
  7374 00000D6F 83C605                  	ADD	SI,5			; next entry
  7375 00000D72 E2F7                    	LOOP	NXTENTRY
  7376 00000D74 59                      	POP	CX
  7377                                  capinval:
  7378                                  	;error	error_invalid_function	; info type not found
  7379                                  	;mov	al,1
  7380 00000D75 B001                    	mov	al,error_invalid_function
  7381                                  ;SYS_RET_ERR_jmp:
  7382                                  	;jmp	SYS_RET_ERR
  7383                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7384                                  SYS_RET_ERR_jmp:
  7385 00000D77 E9C4F8                  	jmp	SYS_RET_ERR	
  7386                                  
  7387                                  FOUNDIT:
  7388 00000D7A A4                      	MOVSB				; move info id byte
  7389 00000D7B 59                      	POP	CX			; restore char count
  7390                                  	;cmp	al,1
  7391 00000D7C 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7392 00000D7E 7415                    	JZ	short setsize
  7393 00000D80 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7394 00000D83 B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7395                                  OK_RETN:
  7396 00000D86 F3A4                    	REP	MOVSB			; copy info
  7397 00000D88 89C1                    	MOV	CX,AX			; CX = actual length returned
  7398 00000D8A 89D8                    	MOV	AX,BX			; return sys code page in ax
  7399                                  GETDONE:
  7400 00000D8C E8F6F6                  	call	Get_User_Stack		; return actual length to user's CX
  7401                                  	;mov	[si+4],cx 
  7402 00000D8F 894C04                  	MOV	[SI+user_env.user_CX],CX
  7403                                  	;jmp	SYS_RET_OK
  7404                                  	; 15/12/2022
  7405                                  	; 25/06/2019
  7406 00000D92 E9A3F8                  	jmp	SYS_RET_OK_clc
  7407                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7408                                  	; 15/12/2022
  7409                                  ;nono_jmp:
  7410                                  	;jmp	short nono
  7411                                  setsize:
  7412 00000D95 83E903                  	SUB	CX,3			; size after length field
  7413 00000D98 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7414 00000D9A 7302                    	JAE	short setsize2		; no
  7415 00000D9C 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7416                                  setsize2:
  7417 00000D9E 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7418                                  	;ADD	DI,2			; update index
  7419                                  	;ADD	SI,2
  7420                                  	; 06/01/2024
  7421 00000DA1 47                      	inc	di
  7422 00000DA2 47                      	inc	di
  7423 00000DA3 46                      	inc	si
  7424 00000DA4 46                      	inc	si
  7425 00000DA5 89C8                    	MOV	AX,CX
  7426 00000DA7 83C003                  	ADD	AX,3			; AX has the actual length
  7427 00000DAA EBDA                    	JMP	short OK_RETN 		; go move it
  7428                                  CHKNLS:
  7429 00000DAC 30E4                    	XOR	AH,AH
  7430                                  	;PUSH	AX			; save info type
  7431                                  	;POP	BP			; bp = info type
  7432                                  	; 06/01/2024
  7433 00000DAE 89C5                    	mov	bp,ax
  7434                                  	
  7435                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7436 00000DB0 B80014                  	mov     ax,1400h
  7437 00000DB3 CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7438                                  			; Return: AL = 00h not installed, OK to install
  7439                                  			; 01h not installed, not OK
  7440                                  			; FFh installed
  7441 00000DB5 3CFF                    	CMP	AL,0FFH
  7442 00000DB7 7404                    	JZ	short NLSNXT		; in memory
  7443                                  
  7444                                  sizeerror:
  7445                                  	;error	error_invalid_function
  7446                                  	;mov	al,1
  7447 00000DB9 B001                    	mov	al,error_invalid_function
  7448                                  	;jmp	SYS_RET_ERR
  7449                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7450                                  sys_ret_err_jmp2:
  7451 00000DBB EBBA                    	jmp	short SYS_RET_ERR_jmp
  7452                                  
  7453                                  NLSNXT: 
  7454                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7455 00000DBD B80214                  	mov     ax,1402h
  7456 00000DC0 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7457                                  			; BP = subfunction, BX = code page
  7458                                  			; DX = country code, DS:SI -> internal code page structure
  7459                                  			; ES:DI -> user buffer, CX = size of user buffer
  7460                                  			; Return: AL = status
  7461                                  			; 00h successful
  7462                                  			; else DOS error code
  7463                                  
  7464 00000DC2 3C00                    	CMP	AL,0			; success ?
  7465 00000DC4 7505                    	JNZ	short NLSERROR
  7466                                  	;mov	ax,[si+48h] ; 13/05/2019
  7467 00000DC6 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]
  7468                                  			; ax = sys code page id;smr;use ds;
  7469                                  			;BUGBUG;check whether DS is OK after the above calls
  7470 00000DC9 EBC1                    	JMP	short GETDONE
  7471                                  seterr:
  7472                                  	; 15/12/2022
  7473                                  NLSERROR:
  7474                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7475                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7476                                  	;jmp	short sys_ret_err_jmp2
  7477                                  	; 15/12/2022
  7478 00000DCB EBAA                    	jmp	short SYS_RET_ERR_jmp
  7479                                  
  7480                                  ;EndProc $GetExtCntry
  7481                                  
  7482                                  ; 13/05/2019 - Retro DOS v4.0
  7483                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7484                                  
  7485                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7486                                  ;----------------------------------------------------------------------------
  7487                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7488                                  ;
  7489                                  ;   System call format:
  7490                                  ;
  7491                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7492                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7493                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7494                                  ;	INT	21
  7495                                  ;
  7496                                  ;	ENTRY	(al) = n
  7497                                  ;		(bx) = code page
  7498                                  ;	EXIT	'C' clear
  7499                                  ;		  global code page is set	(set global code page)
  7500                                  ;		  (BX) = active code page id	(get global code page)
  7501                                  ;		  (DX) = system code page id	(get global code page)
  7502                                  ;		'C' set
  7503                                  ;		  (AX) = error code
  7504                                  
  7505                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7506                                  
  7507                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7508                                  	; DOSCODE:4BC9h
  7509                                  
  7510                                  _$GetSetCdPg:
  7511                                  
  7512                                  ;hkn; SS is DOSDATA
  7513                                  	;context DS
  7514                                  
  7515 00000DCD 16                      	push	ss
  7516 00000DCE 1F                      	pop	ds
  7517                                  
  7518                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7519 00000DCF BE[2A12]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7520                                  
  7521 00000DD2 3C01                    	CMP	AL,1		       ; get global code page
  7522 00000DD4 7512                    	JNZ	short setglpg 	       ; set global code page
  7523                                  	
  7524                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7525                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7526 00000DD6 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7527                                  					; get active code page id;smr;use ds
  7528                                  	;mov	dx,[si+48h]
  7529 00000DD9 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7530                                  				  	; get sys code page id;smr;use ds
  7531 00000DDC E8A6F6                  	call	Get_User_Stack
  7532                                  ;ASSUME DS:NOTHING
  7533                                  	;;mov	[si+2],bx
  7534                                  	;MOV	[SI+user_env.user_BX],BX ; update returned bx
  7535                                  	; 06/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7536 00000DDF E85BFE                  	call    set_user_bx	; MOV [SI+user_env.user_BX],BX 
  7537                                  	;mov	[si+6],dx
  7538 00000DE2 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7539                                  OK_RETURN:
  7540                                  	; 15/12/2022
  7541                                  	;transfer SYS_RET_OK
  7542 00000DE5 E94DF8                  	jmp	SYS_RET_OK
  7543                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7544                                  	;jmp	short nono_jmp
  7545                                  
  7546                                  ;hkn; ASSUME DS:DOSGROUP
  7547                                  ;ASSUME	DS:DOSDATA
  7548                                  
  7549                                  setglpg:
  7550 00000DE8 3C02                    	CMP	AL,2
  7551 00000DEA 752F                    	JNZ	short nomem
  7552                                  	
  7553                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7554                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7555 00000DEC 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7556                                  	
  7557                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7558 00000DEF B80014                  	mov     ax,1400h
  7559 00000DF2 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7560                                  			; Return: AL = 00h not installed, OK to install
  7561                                  			; 01h not installed, not OK
  7562                                  			; FFh installed
  7563 00000DF4 3CFF                    	CMP	AL,0FFH
  7564 00000DF6 7523                    	JNZ	short nomem		; not in memory
  7565                                  
  7566                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7567 00000DF8 B80114                  	mov     ax,1401h
  7568 00000DFB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7569                                  			; DS:SI -> internal code page structure
  7570                                  			; BX = new code page, DX = country code???
  7571                                  			; Return: AL = status
  7572                                  			; 00h successful
  7573                                  			; else DOS error code
  7574                                  	;cmp	al,0
  7575 00000DFD 08C0                    	or	al,al			; success ?
  7576 00000DFF 74E4                    	JZ	short OK_RETURN		; yes
  7577                                  
  7578 00000E01 3C41                    	CMP	AL,65			; set device code page failed
  7579 00000E03 75C6                    	JNZ	short seterr
  7580                                  	;MOV	AX,65
  7581                                  	; 06/01/2024
  7582 00000E05 98                      	cbw
  7583 00000E06 A3[2403]                	MOV	[EXTERR],AX
  7584                                  	;mov	byte [EXTERR_ACTION],6
  7585                                  	;mov	byte [EXTERR_CLASS],5
  7586                                  	;mov	byte [EXTERR_LOCUS],4
  7587 00000E09 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7588 00000E0E C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7589 00000E13 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7590                                  	;transfer From_GetSet
  7591 00000E18 E92BF8                  	jmp	From_GetSet
  7592                                  
  7593                                  	; 15/12/2022
  7594                                  ;seterr:
  7595                                  	;;;transfer SYS_RET_ERR
  7596                                  	;;jmp	SYS_RET_ERR
  7597                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7598                                  	;jmp	short NLSERROR
  7599                                  
  7600                                  nomem:
  7601                                  	;error	error_invalid_function	; function not defined
  7602                                  	;mov	al,1
  7603 00000E1B B001                    	mov	al,error_invalid_function
  7604 00000E1D EBAC                    	jmp	short seterr
  7605                                  
  7606                                  ;EndProc $GetSetCdPg
  7607                                  
  7608                                  ; 09/01/2024
  7609                                  ; 13/05/2019 - Retro DOS v4.0
  7610                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7611                                  
  7612                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7613                                  ;----------------------------------------------------------------------------
  7614                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7615                                  ;
  7616                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7617                                  ;		drive.
  7618                                  ;
  7619                                  ;	This call returns the same info in the same registers (except for the
  7620                                  ;	FAT pointer) as the old FAT pointer calls
  7621                                  ;
  7622                                  ;	ENTRY	DL = Drive number
  7623                                  ;	EXIT	AX = Sectors per allocation unit
  7624                                  ;		   = -1 if bad drive specified
  7625                                  ;		On User Stack
  7626                                  ;		    BX = Number of free allocation units
  7627                                  ;		    DX = Total Number of allocation units on disk
  7628                                  ;		    CX = Sector size
  7629                                  
  7630                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7631                                  
  7632                                  _$GET_DRIVE_FREESPACE:
  7633                                  
  7634                                  ;hkn; SS is DOSDATA
  7635                                  	;context DS
  7636 00000E1F 16                      	push	ss
  7637 00000E20 1F                      	pop	ds
  7638                                  
  7639 00000E21 88D0                    	MOV	AL,DL
  7640                                  	;invoke	GetThisDrv		; Get drive
  7641 00000E23 E8B25A                  	call	GETTHISDRV
  7642                                  SET_AX_RET:
  7643 00000E26 7212                    	JC	short BADFDRV
  7644                                  	;invoke	DISK_INFO
  7645 00000E28 E8F51D                  	call	DISK_INFO
  7646 00000E2B 87D3                    	XCHG	DX,BX
  7647                                  	;JC	short SET_AX_RET	; User FAILed to I 24
  7648                                  	; 06/01/2024
  7649 00000E2D 720B                    	jc	short BADFDRV
  7650 00000E2F 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7651                                  DoSt:
  7652 00000E31 E851F6                  	call	Get_User_Stack
  7653                                  ;ASSUME	DS:NOTHING
  7654                                  	;mov	[si+6],dx
  7655                                  	;;mov	[si+4],cx
  7656                                  	;;mov	[si+2],bx
  7657                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7658 00000E34 895406                  	MOV	[SI+user_env.user_DX],DX ; total clusters
  7659                                  	;MOV	[SI+user_env.user_CX],CX
  7660                                  	;MOV	[SI+user_env.user_BX],BX
  7661                                  	;;MOV	[SI+user_env.user_AX],AX
  7662                                  	;mov	[si],ax
  7663                                  	;;return
  7664                                  	;retn
  7665                                  	; 09/01/2024
  7666 00000E37 E9FEFD                  	jmp     gdrvfspc_ret    ; ax = sectors per cluster (modified)
  7667                                  
  7668                                  BADFDRV:
  7669                                  	; MSDOS 3.3
  7670                                  	;;mov	al,0Fh
  7671                                  	;mov	al,error_invalid_drive	; Assume error
  7672                                  
  7673                                  	; 13/05/2019 - Retro DOS v4.0
  7674                                  
  7675                                  	; MSDOS 6.0 & MSDOS 3.3
  7676                                  	;invoke	FCB_RET_ERR
  7677 00000E3A E817F8                  	call	FCB_RET_ERR
  7678                                  	
  7679 00000E3D B8FFFF                  	MOV	AX,-1
  7680 00000E40 EBEF                    	JMP	short DoSt
  7681                                  
  7682                                  ;EndProc $GET_DRIVE_FREESPACE
  7683                                  
  7684                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7685                                  ;----------------------------------------------------------------------------
  7686                                  ;**	$Get_DMA - Get Disk Transfer Address
  7687                                  ;
  7688                                  ;	ENTRY	none
  7689                                  ;	EXIT	ES:BX is current transfer address
  7690                                  ;	USES	all
  7691                                  
  7692                                  	; 09/01/2024
  7693                                  _$GET_DMA:
  7694 00000E42 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7695 00000E47 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7696 00000E4C E836F6                  	call	Get_User_Stack
  7697                                  	;mov	[si+2],bx
  7698                                  	;mov	[si+10h],cx
  7699                                  	; 09/01/2024
  7700                                  	;MOV	[SI+user_env.user_BX],BX
  7701 00000E4F 894C10                  	MOV	[SI+user_env.user_ES],CX
  7702                                  	;retn
  7703                                  	; 09/01/2024
  7704 00000E52 E9E8FD                  	jmp	set_user_bx ; (PCDOS 7.1 IBMDOS.COM)
  7705                                  
  7706                                  ;**	$Set_DMA - Set Disk Transfer Address
  7707                                  ;----------------------------------------------------------------------------
  7708                                  ;	ENTRY	DS:DX is current transfer address
  7709                                  ;	EXIT	none
  7710                                  ;	USES	all
  7711                                  
  7712                                  _$SET_DMA:
  7713 00000E55 368916[2C03]            	MOV	[SS:DMAADD],DX
  7714 00000E5A 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7715 00000E5F C3                      	retn
  7716                                  
  7717                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7718                                  ;------------------------------------------------------------------------------
  7719                                  
  7720                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7721                                  ;-----------------------------------------------------
  7722                                  ;	ENTRY	none
  7723                                  ;	EXIT	(AL) = drive number
  7724                                  ;	USES	all
  7725                                  
  7726                                  _$GET_DEFAULT_DRIVE:
  7727 00000E60 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7728 00000E64 C3                      	retn
  7729                                  
  7730                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7731                                  ;-----------------------------------------------------
  7732                                  ;	ENTRY	(DL) = Drive number for new default drive
  7733                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7734                                  
  7735                                  _$SET_DEFAULT_DRIVE:
  7736 00000E65 88D0                    	MOV	AL,DL
  7737 00000E67 FEC0                    	INC	AL			; A=1, B=2...
  7738 00000E69 E8505A                  	call	GetVisDrv		; see if visible drive
  7739 00000E6C 7204                    	JC	short SETRET		; errors do not set
  7740 00000E6E 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7741                                  
  7742                                  SETRET:
  7743 00000E72 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7744 00000E76 C3                      	retn
  7745                                  
  7746                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7747                                  ;----------------------------------------------------------------------------
  7748                                  
  7749                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7750                                  ;---------------------------------------------------
  7751                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7752                                  ;	contents of an interrupt vector.
  7753                                  ;
  7754                                  ;	ENTRY	(AL) = interrupt number
  7755                                  ;	EXIT	(ES:BX) = current interrupt vector
  7756                                  
  7757                                  _$GET_INTERRUPT_VECTOR:
  7758 00000E77 E82E00                  	CALL	RECSET
  7759 00000E7A 26C41F                  	LES	BX,[ES:BX]
  7760 00000E7D E805F6                  	call	Get_User_Stack
  7761                                  set_user_es_bx:
  7762                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7763                                  	;;mov	[si+2],bx
  7764                                  	;mov	[si+10h],es
  7765                                  	;MOV	[SI+user_env.user_BX],BX
  7766 00000E80 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7767                                  	;retn
  7768 00000E83 E9B7FD                  	jmp	set_user_bx
  7769                                  
  7770                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7771                                  ;---------------------------------------------------
  7772                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7773                                  ;	contents of an interrupt vector.
  7774                                  ;
  7775                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7776                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7777                                  ;	for explanation.
  7778                                  ;
  7779                                  ;	ENTRY	(AL) = interrupt number
  7780                                  ;		(ds:dx) = desired new vector value
  7781                                  ;	EXIT	none
  7782                                  ;	USES	all
  7783                                  
  7784                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7785                                  ; 13/05/2019 - Retro DOS v4.0
  7786                                  
  7787                                  _$SET_INTERRUPT_VECTOR:
  7788 00000E86 E81F00                  	CALL	RECSET
  7789 00000E89 FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7790 00000E8A 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7791 00000E8D 268C5F02                	MOV	[ES:BX+2],DS
  7792 00000E91 FB                      	STI
  7793                                  					; M004, M068 - Start
  7794                                  	; MSDOS 6.0
  7795 00000E92 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7796                                  					; Q: was the previous call an int 21h
  7797                                  					;    exec call
  7798                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7799                                  	;jnz	short siv_1		; Y: go set count
  7800                                  	;retn				; N: return
  7801                                  	; 15/12/2022
  7802 00000E98 740D                    	jz	short siv_2
  7803                                  siv_1:	
  7804 00000E9A 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7805 00000EA0 7505                    	jnz	short siv_2		 ; N: done
  7806                                  	; 20/09/2023
  7807 00000EA2 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
  7808                                  	;mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos
  7809                                  					 ; dispatcher to turn A20 Off before
  7810                                  					 ; returning to user.
  7811                                  siv_2:
  7812                                  	; 07/12/2022
  7813 00000EA7 C3                      	retn				; M004, M068 - End
  7814                                  	
  7815                                  RECSET:
  7816 00000EA8 31DB                    	XOR	BX,BX
  7817 00000EAA 8EC3                    	MOV	ES,BX
  7818 00000EAC 88C3                    	MOV	BL,AL
  7819 00000EAE D1E3                    	SHL	BX,1
  7820 00000EB0 D1E3                    	SHL	BX,1
  7821 00000EB2 C3                      	retn
  7822                                  
  7823                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7824                                  ;-------------------------------------------------------------------------------------
  7825                                  
  7826                                  ;**	$Char_Oper - Manipulate Switch Character
  7827                                  ;
  7828                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7829                                  ;
  7830                                  ;	ENTRY	AL = function:
  7831                                  ;		    0 - read switch char
  7832                                  ;		    1 - set switch char (char in DL)
  7833                                  ;		    2 - read device availability
  7834                                  ;			Always returns available
  7835                                  ;		    3 - set device availability
  7836                                  ;			No longer supported (NOP)
  7837                                  ;	EXIT	(al) = 0xff iff error
  7838                                  ;		(al) != 0xff if ok
  7839                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7840                                  ;	USES	AL, DL
  7841                                  ;
  7842                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7843                                  ;		The character / is always returned for subfunction 0,
  7844                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7845                                  
  7846                                  ; 13/05/2019 - Retro DOS v4.0
  7847                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7848                                  
  7849                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7850                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7851                                  
  7852                                  _$CHAR_OPER:
  7853                                  	; MSDOS 6.0
  7854 00000EB3 08C0                    	or	al,al				; get switch?
  7855 00000EB5 B22F                    	mov	dl,'/'				; assume yes
  7856 00000EB7 7407                    	jz	short chop_1			; jump if yes
  7857 00000EB9 3C02                    	cmp	al,2				; check device availability?
  7858 00000EBB B2FF                    	mov	dl,-1				; assume yes
  7859 00000EBD 7401                    	jz	short chop_1			; jump if yes
  7860 00000EBF C3                      	retn					; otherwise just quit
  7861                                  
  7862                                  ; subfunctions requiring return of value to user come here. DL holds
  7863                                  ; value to return
  7864                                  
  7865                                  chop_1:
  7866 00000EC0 E8C2F5                  	call	Get_User_Stack
  7867 00000EC3 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7868 00000EC6 C3                      	retn
  7869                                  
  7870                                  	; MSDOS 3.3
  7871                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7872                                  	;push	ss
  7873                                  	;pop	ds
  7874                                  	;cmp	al,1
  7875                                  	;jb	short chop_1
  7876                                  	;jz	short chop_2
  7877                                  	;cmp	al,3
  7878                                  	;jb	short chop_3
  7879                                  	;jz	short chop_5
  7880                                  	;mov	al,0FFh
  7881                                  	;retn
  7882                                  ;chop_1:
  7883                                  	;mov	dl,[chSwitch]
  7884                                  	;jmp	short chop_4
  7885                                  ;chop_2:
  7886                                  	;mov	[chSwitch],dl
  7887                                  	;retn
  7888                                  ;chop_3:
  7889                                  	;mov	dl, FFh
  7890                                  ;chop_4:
  7891                                  	;call	Get_User_Stack
  7892                                  	;mov	[si+6],dx
  7893                                  ;chop_5:
  7894                                  	;retn
  7895                                  
  7896                                  ;**	$GetExtendedError - Return Extended error code
  7897                                  ;----------------------------------------------------------------------------
  7898                                  ;	This function reads up the extended error info from the static
  7899                                  ;	variables where it was stored.
  7900                                  ;
  7901                                  ;	ENTRY	none
  7902                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7903                                  ;		BL = recommended action
  7904                                  ;		BH = class of error
  7905                                  ;		CH = locus of error
  7906                                  ;		ES:DI = may be pointer
  7907                                  ;	USES	ALL
  7908                                  
  7909                                  	; 09/01/2024
  7910                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7911                                  
  7912                                  _$GetExtendedError:
  7913 00000EC7 16                      	push	ss
  7914 00000EC8 1F                      	pop	ds
  7915 00000EC9 A1[2403]                	MOV	AX,[EXTERR]
  7916 00000ECC C43E[2803]              	LES	DI,[EXTERRPT]
  7917 00000ED0 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7918 00000ED4 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7919 00000ED8 E8AAF5                  	call	Get_User_Stack
  7920                                  	;mov	[si+0Ah],di
  7921 00000EDB 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7922                                  
  7923                                  	; 09/01/2024 (PCDOS 7.1 IBMDOS.COM)
  7924                                  	;;mov	[si+10h],es
  7925                                  	;MOV	[SI+user_env.user_ES],ES
  7926                                  	;;mov	[si+2],bx
  7927                                  	;MOV	[SI+user_env.user_BX],BX
  7928 00000EDE E89FFF                  	call	set_user_es_bx
  7929                                  
  7930                                  	;mov	[si+4],cx
  7931 00000EE1 894C04                  	MOV	[SI+user_env.user_CX],CX
  7932                                  jmp_SYS_RET_OK:
  7933                                  	; 15/12/2022
  7934                                  	;jmp	SYS_RET_OK
  7935                                  	; 25/06/2019
  7936 00000EE4 E951F7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7937                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7938                                  ;jmp_SYS_RET_OK:
  7939                                  	;jmp	SYS_RET_OK
  7940                                  
  7941                                  ; --------------------------------------------------------------------------
  7942                                  ; 09/01/2024
  7943                                  %if 0
  7944                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7945                                  	; DOSCODE:4CF3h
  7946                                  ;patch_or_unknown:
  7947                                  ;get_code_page:
  7948                                  	push    si
  7949                                  	mov     si, COUNTRY_CDPG
  7950                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7951                                  	mov     ax, [ss:si+6Ah]
  7952                                  	pop     si
  7953                                  	retn
  7954                                  %endif
  7955                                  ; --------------------------------------------------------------------------
  7956                                  
  7957                                  ; 29/04/2019 - Retro DOS v4.0
  7958                                  
  7959                                  ;BREAK	<ECS_call - Extended Code System support function>
  7960                                  ;---------------------------------------------------------------------------
  7961                                  ; Inputs:
  7962                                  ;	AL = 0	get lead byte table
  7963                                  ;		on return DS:SI has the table location
  7964                                  ;
  7965                                  ;	AL = 1	set / reset interim console flag
  7966                                  ;		DL = flag (00H or 01H)
  7967                                  ;		no return
  7968                                  ;
  7969                                  ;	AL = 2	get interim console flag
  7970                                  ;		on return DL = current flag value
  7971                                  ;
  7972                                  ;	AL = OTHER then error, and returns with:
  7973                                  ;		AX = error_invalid_function
  7974                                  ;
  7975                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7976                                  ;	 SS:SP WILL BE PRESERVED!
  7977                                  ;---------------------------------------------------------------------------
  7978                                  
  7979                                  _$ECS_Call:
  7980 00000EE7 08C0                    	or	al,al			; AL = 0 (get table)?
  7981                                  	;jnz	short _okok
  7982                                  	; 15/12/2022
  7983 00000EE9 7403                    	jz	short get_lbt
  7984                                  ;_okok:
  7985 00000EEB E947F7                  	jmp	SYS_RET_OK
  7986                                  get_lbt:
  7987 00000EEE E894F5                  	call	Get_User_Stack		; *
  7988                                  
  7989                                  ;hkn; dbcs_table moved low to dosdata
  7990                                  	;mov	word [si+8],DBCS_TAB+2
  7991 00000EF1 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7992                                  
  7993 00000EF6 06                      	push	es
  7994                                  	;getdseg <es>			; es = DOSDATA
  7995 00000EF7 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7996                                  	;mov	[si+14],es
  7997 00000EFC 8C440E                  	mov	[SI+user_env.user_DS],es
  7998 00000EFF 07                      	pop	es
  7999                                  
  8000                                  	; 15/12/2022
  8001 00000F00 EBE2                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  8002                                  ;_okok:
  8003                                  	; 15/12/2022	
  8004                                  	;;transfer SYS_RET_OK
  8005                                  	;jmp	short jmp_SYS_RET_OK
  8006                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8007                                  	;;jmp	SYS_RET_OK
  8008                                  	;jmp	short jmp_SYS_RET_OK
  8009                                  
  8010                                  ;============================================================================
  8011                                  ; PARSE.ASM, MSDOS 6.0, 1991
  8012                                  ;============================================================================
  8013                                  ; 19/07/2018 - Retro DOS v3.0
  8014                                  ; 15/05/2019 - Retro DOS v4.0
  8015                                  
  8016                                  ; System calls for parsing command lines
  8017                                  ;
  8018                                  ;   $PARSE_FILE_DESCRIPTOR
  8019                                  ;
  8020                                  ;   Modification history:
  8021                                  ;
  8022                                  ;       Created: ARR 30 March 1983
  8023                                  ;               EE PathParse 10 Sept 1983
  8024                                  ;
  8025                                  
  8026                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  8027                                  ;---------------------------------------------------------------------------
  8028                                  ; Inputs:
  8029                                  ;       DS:SI Points to a command line
  8030                                  ;       ES:DI Points to an empty FCB
  8031                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  8032                                  ;                   = 0 Parse stops if separator encountered
  8033                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  8034                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  8035                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  8036                                  ;                   = 0  "       "      "       - put blanks in FCB
  8037                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  8038                                  ;                   = 0  "       "      "        - put blanks in FCB
  8039                                  ; Function:
  8040                                  ;       Parse command line into FCB
  8041                                  ; Returns:
  8042                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  8043                                  ;       DS:SI points to first character after filename
  8044                                  ;---------------------------------------------------------------------------
  8045                                  
  8046                                  _$PARSE_FILE_DESCRIPTOR:
  8047 00000F02 E8893E                  	call	MAKEFCB
  8048 00000F05 56                      	PUSH    SI
  8049 00000F06 E87CF5                  	call	Get_User_Stack
  8050                                  	;pop	word [si+8]
  8051 00000F09 8F4408                  	POP     word [SI+user_env.user_SI]
  8052 00000F0C C3                      	retn
  8053                                  
  8054                                  ;============================================================================
  8055                                  ; MISC.ASM, MSDOS 6.0, 1991
  8056                                  ;============================================================================
  8057                                  ; 19/07/2018 - Retro DOS v3.0
  8058                                  
  8059                                  ; 29/04/2019 - Retro DOS v4.0
  8060                                  
  8061                                  ;ENTRYPOINTSEG	EQU	0CH
  8062                                  ;MAXDIF		EQU	0FFFH
  8063                                  ;SAVEXIT 	EQU	10
  8064                                  ;WRAPOFFSET	EQU	0FEF0h
  8065                                  
  8066                                  ;
  8067                                  ;----------------------------------------------------------------------------
  8068                                  ;
  8069                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  8070                                  ;
  8071                                  ;	Return Stuff sort of like old get fat call
  8072                                  ;
  8073                                  ;	ENTRY	none
  8074                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8075                                  ;			GOD help anyone who tries to do ANYTHING except
  8076                                  ;			READ this ONE byte.
  8077                                  ;		DX = Total Number of allocation units on disk
  8078                                  ;		CX = Sector size
  8079                                  ;		AL = Sectors per allocation unit
  8080                                  ;		   = -1 if bad drive specified
  8081                                  ;	USES	all
  8082                                  ;
  8083                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  8084                                  ;
  8085                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  8086                                  ;
  8087                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  8088                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  8089                                  ;			GOD help anyone who tries to do ANYTHING except
  8090                                  ;			READ this ONE byte.
  8091                                  ;		DX = Total Number of allocation units on disk
  8092                                  ;		CX = Sector size
  8093                                  ;		AL = Sectors per allocation unit
  8094                                  ;		   = -1 if bad drive specified
  8095                                  ;	USES	all
  8096                                  ;
  8097                                  ;----------------------------------------------------------------------------
  8098                                  ;
  8099                                  
  8100                                  _$SLEAZEFUNC:
  8101                                  	; 10/01/2024
  8102                                  	; 15/05/2019 - Retro DOS v4.0
  8103 00000F0D B200                    	MOV	DL,0
  8104                                  _$SLEAZEFUNCDL:
  8105 00000F0F 16                      	push	ss
  8106 00000F10 1F                      	pop	ds
  8107                                  	
  8108 00000F11 88D0                    	MOV	AL,DL
  8109 00000F13 E8C259                  	call	GETTHISDRV		; Get CDS structure
  8110                                  SET_AL_RET:
  8111                                  	; MSDOS 3.3
  8112                                  	;;mov	al, 0Fh
  8113                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  8114                                  	
  8115                                  	; MSDOS 6.0 & MSDOS 3.3
  8116 00000F16 721D                    	JC	short BADSLDRIVE
  8117                                  
  8118 00000F18 E8051D                  	call	DISK_INFO
  8119                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  8120 00000F1B 7218                    	jc	short BADSLDRIVE
  8121 00000F1D 8826[9805]              	MOV	[FATBYTE],AH
  8122                                  
  8123                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  8124                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  8125                                  ; CALL AGAIN
  8126                                  
  8127                                  	; 10/01/2024
  8128                                  	;MOV	DI,FATBYTE
  8129 00000F21 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  8130 00000F23 E85FF5                  	call	Get_User_Stack
  8131                                  	;mov	[si+4],cx
  8132                                  	;mov	[si+6],bx
  8133                                  	;mov	[si+2],di
  8134 00000F26 894C04                  	MOV	[SI+user_env.user_CX],CX
  8135 00000F29 895C06                  	MOV	[SI+user_env.user_DX],BX
  8136                                  	;MOV	[SI+user_env.user_BX],DI
  8137                                  	; 10/01/2024
  8138 00000F2C C74402[9805]            	MOV	word [SI+user_env.user_BX],FATBYTE
  8139                                  	
  8140                                  	;mov	[si+0Eh],ss
  8141 00000F31 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  8142                                  
  8143 00000F34 C3                      	retn
  8144                                  
  8145                                  BADSLDRIVE:
  8146 00000F35 E91CF7                  	jmp	FCB_RET_ERR
  8147                                  
  8148                                  ;
  8149                                  ;----------------------------------------------------------------------------
  8150                                  ;
  8151                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8152                                  ;
  8153                                  ;	Returns location of DOS status for interrupt routines
  8154                                  ;
  8155                                  ;	ENTRY	none
  8156                                  ;	EXIT	(es:bx) = flag location
  8157                                  ;	USES	all
  8158                                  ;
  8159                                  ;----------------------------------------------------------------------------
  8160                                  ;
  8161                                  
  8162                                  _$GET_INDOS_FLAG:
  8163 00000F38 E84AF5                          CALL	Get_User_Stack
  8164                                          ;MOV	WORD [SI+2],INDOS
  8165 00000F3B C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8166                                  getin_segm:	; 13/01/2024
  8167                                  	;MOV	[SI+10H],SS
  8168 00000F40 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8169 00000F43 C3                      	RETN 
  8170                                  ;
  8171                                  ;----------------------------------------------------------------------------
  8172                                  ;
  8173                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8174                                  ;
  8175                                  ;	Return a pointer to interesting DOS variables This call is version
  8176                                  ;	dependent and is subject to change without notice in future versions.
  8177                                  ;	Use at risk.
  8178                                  ;
  8179                                  ;	ENTRY	none
  8180                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8181                                  ;	uses	ALL
  8182                                  ;
  8183                                  ;----------------------------------------------------------------------------
  8184                                  ;
  8185                                  
  8186                                  	; 13/01/2024
  8187                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:5226h
  8188                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:4D65h
  8189                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:4D58h	
  8190                                  
  8191                                  _$GET_IN_VARS:
  8192 00000F44 E83EF5                  	CALL	Get_User_Stack
  8193                                  	;MOV	WORD [SI+2],SYSINITVAR
  8194                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8195 00000F47 C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8196                                  	; 13/01/2024
  8197                                  	;;MOV	[SI+10H],SS
  8198                                  	;MOV	[SI+user_env.user_ES],SS
  8199                                  	;RETN
  8200 00000F4C EBF2                    	jmp	short getin_segm
  8201                                  
  8202                                  ;
  8203                                  ;----------------------------------------------------------------------------
  8204                                  ;
  8205                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8206                                  ;
  8207                                  ;	Return pointer to drive parameter table for default drive
  8208                                  ;
  8209                                  ;	ENTRY	none
  8210                                  ;	EXIT	(ds:bx) = DPB address
  8211                                  ;	USES	all
  8212                                  ;
  8213                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8214                                  ;
  8215                                  ;	Return pointer to a specified drive parameter table
  8216                                  ;
  8217                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8218                                  ;	EXIT	(al) = 0 iff ok
  8219                                  ;		  (ds:bx) = DPB address
  8220                                  ;		(al) = -1 if bad drive
  8221                                  ;	USES	all
  8222                                  ;
  8223                                  ;----------------------------------------------------------------------------
  8224                                  ;
  8225                                  
  8226                                  ; 15/05/2019 - Retro DOS v4.0
  8227                                  
  8228                                  _$GET_DEFAULT_DPB:
  8229 00000F4E B200                    	MOV	DL,0
  8230                                  _$GET_DPB:
  8231 00000F50 16                      	push	ss
  8232 00000F51 1F                      	pop	ds
  8233                                  
  8234 00000F52 88D0                    	MOV	AL,DL
  8235 00000F54 E88159                  	call	GETTHISDRV		; Get CDS structure
  8236 00000F57 7222                    	JC	short ISNODRV 		; no valid drive
  8237 00000F59 C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8238                                  	;;test	word [es:di+43h],8000h
  8239                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8240                                  	;test	byte [es:di+44h],80h
  8241 00000F5D 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8242 00000F62 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8243 00000F64 E88003                  	call	ECritDisk
  8244 00000F67 E8DC45                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8245 00000F6A E89503                  	call	LCritDisk
  8246 00000F6D 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8247                                  					;   have.
  8248 00000F6F E813F5                  	call	Get_User_Stack
  8249                                  	;mov	[si+2],bp
  8250 00000F72 896C02                  	MOV	[SI+user_env.user_BX],BP
  8251                                  	;mov	[si+0Eh],es
  8252 00000F75 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8253 00000F78 30C0                    	XOR	AL,AL
  8254 00000F7A C3                      	retn
  8255                                  ISNODRV:
  8256 00000F7B B0FF                    	MOV	AL,-1
  8257 00000F7D C3                      	retn
  8258                                  
  8259                                  ;
  8260                                  ;----------------------------------------------------------------------------
  8261                                  ;
  8262                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8263                                  ;
  8264                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8265                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8266                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8267                                  ;
  8268                                  ;	ENTRY	none
  8269                                  ;	EXIT	none
  8270                                  ;	USES	all
  8271                                  ;
  8272                                  ;----------------------------------------------------------------------------
  8273                                  ;
  8274                                  
  8275                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8276                                  	; DOSCODE:4D94h
  8277                                  _$DISK_RESET:
  8278                                  	; 15/05/2019 - Retro DOS v4.0
  8279 00000F7E B0FF                    	mov	al,0FFh	; -1
  8280 00000F80 16                      	push	ss
  8281 00000F81 1F                      	pop	ds
  8282                                  	; 06/11/2022
  8283                                  	;MOV	AL,-1
  8284 00000F82 E86203                  	call	ECritDisk
  8285                                  	; MSDOS 6.0
  8286                                  	;;or	word [DOS34_FLAG],4
  8287                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8288 00000F85 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8289 00000F8A E82C49                  	call	FLUSHBUF
  8290                                  	; MSDOS 6.0
  8291                                  	;and	word [DOS34_FLAG],0FFFBh
  8292                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8293                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8294                                  	; 15/12/2022
  8295 00000F8D 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8296 00000F92 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8297                                  ;
  8298                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate. This
  8299                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8300                                  ; let's do it.
  8301                                  ;
  8302                                  ; Invalidate 'last-buffer' used
  8303                                  ;
  8304 00000F98 BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8305 00000F9B 891E[2000]              	MOV	[LastBuffer+2],BX
  8306 00000F9F 891E[1E00]              	MOV	[LastBuffer],BX
  8307                                  
  8308                                  	; MSDOS 3.3 
  8309                                  	; IBMDOS.COM, Offset 1C66h
  8310                                  	;;;;
  8311                                  	;lds	si,[BUFFHEAD]
  8312                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8313                                  				; .buf_flags, AH = 0, reset/clear
  8314                                  ;DRST_1:
  8315                                  	;;mov	[si+4],ax
  8316                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8317                                  	;lds	si,[SI]
  8318                                  	;cmp	si,bx ; -1
  8319                                  	;je	short DRST_2
  8320                                  	;;mov	[si+4],ax
  8321                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8322                                  	;lds	si,[SI]
  8323                                  	;cmp	si,bx
  8324                                  	;jne	short DRST_1
  8325                                  	;;;;
  8326                                  ;DRST_2:
  8327 00000FA3 E85C03                  	call	LCritDisk
  8328 00000FA6 B8FFFF                  	MOV	AX,-1
  8329                                  	; 07/12/2022
  8330                                  	;mov	ax,0FFFFh
  8331                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8332 00000FA9 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8333 00000FAA B82011                  	mov     ax,1120h
  8334 00000FAD CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8335                                  			; DS = DOS CS
  8336                                  			; Return: CF clear (successful)
  8337 00000FAF 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8338                                  	
  8339 00000FB0 C3                      	retn
  8340                                  
  8341                                  	; 19/07/2018 - Retro DOS v3.0
  8342                                  
  8343                                  ;
  8344                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8345                                  ;
  8346                                  ;----------------------------------------------------------------------------
  8347                                  ;
  8348                                  ;**	$SetDPB - Create a DPB
  8349                                  ;
  8350                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8351                                  ;
  8352                                  ;	ENTRY	ES:BP Points to DPB
  8353                                  ;		DS:SI Points to BPB
  8354                                  ;	EXIT	DPB setup
  8355                                  ;	USES	ALL but BP, DS, ES
  8356                                  ;
  8357                                  ;----------------------------------------------------------------------------
  8358                                  ;
  8359                                  
  8360                                  ; 10/05/2019 - Retro DOS v4.0
  8361                                  
  8362                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8363                                  
  8364                                  ; MSDOS 6.0
  8365 00000FB1 0300                    word3:	dw	3			; M008 -- word value for divides
  8366                                  
  8367                                  ; 13/01/2024
  8368                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8369                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8370                                  
  8371                                  ;procedure   $SETDPB,NEAR
  8372                                  
  8373                                  _$SETDPB:
  8374 00000FB3 89EF                    	MOV	DI,BP
  8375                                  	;ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8376                                  	; 13/01/2024
  8377 00000FB5 47                      	inc	di
  8378 00000FB6 47                      	inc	di
  8379 00000FB7 AD                      	LODSW
  8380 00000FB8 AB                      	STOSW				; dpb_sector_size
  8381                                  	; MSDOS 6.0
  8382                                  	;cmp	byte [si+3],0
  8383 00000FB9 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8384 00000FBD 7509                    	JNZ	short yesfat			     ; yes		;AN000;
  8385                                  	;mov	byte [es:di+4],0
  8386 00000FBF 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8387                                  	; 13/01/2024
  8388 00000FC4 89C3                    	mov	bx,ax
  8389 00000FC6 EB70                    	JMP	short setend			     ; NO		;AN000;
  8390                                  
  8391                                  yesfat: ; 10/08/2018
  8392 00000FC8 89C2                    	MOV	DX,AX
  8393 00000FCA AC                      	LODSB
  8394                                  	;DEC	AL
  8395                                  	; 17/12/2022
  8396 00000FCB 48                      	dec	ax
  8397 00000FCC AA                      	STOSB				; dpb_cluster_mask
  8398                                  	;INC	AL
  8399 00000FCD 40                      	inc	ax
  8400 00000FCE 30E4                    	XOR	AH,AH
  8401                                  LOG2LOOP:
  8402 00000FD0 A801                    	test	AL,1
  8403 00000FD2 7506                    	JNZ	short SAVLOG
  8404 00000FD4 FEC4                    	INC	AH
  8405 00000FD6 D0E8                    	SHR	AL,1
  8406 00000FD8 EBF6                    	JMP	SHORT LOG2LOOP
  8407                                  SAVLOG:
  8408 00000FDA 88E0                    	MOV	AL,AH
  8409 00000FDC AA                      	STOSB				; dpb_cluster_shift
  8410 00000FDD 88C3                    	MOV	BL,AL
  8411 00000FDF A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8412 00000FE0 AC                      	LODSB
  8413 00000FE1 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8414                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8415                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8416 00000FE2 88C7                    	MOV	BH,AL
  8417 00000FE4 AD                      	LODSW
  8418 00000FE5 AB                      	STOSW				; dpb_root_entries Number of directory entries
  8419 00000FE6 B105                    	MOV	CL,5
  8420 00000FE8 D3EA                    	SHR	DX,CL			; Directory entries per sector
  8421 00000FEA 48                      	DEC	AX
  8422 00000FEB 01D0                    	ADD	AX,DX			; Cause Round Up
  8423 00000FED 89D1                    	MOV	CX,DX
  8424 00000FEF 31D2                    	XOR	DX,DX
  8425 00000FF1 F7F1                    	DIV	CX
  8426 00000FF3 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8427 00000FF5 47                      	INC	DI
  8428 00000FF6 47                      	INC	DI			; Skip dpb_first_sector
  8429 00000FF7 A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8430 00000FF8 AC                      	LODSB
  8431                                  	;mov	[es:bp+17h],al
  8432 00000FF9 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8433 00000FFD AD                      	LODSW				; Number of sectors in a FAT
  8434                                  	
  8435                                  	;;;
  8436                                  	;MSDOS 3.3
  8437                                  	;
  8438                                  	;STOSB		; DPB.FAT_SIZE
  8439                                  	;MUL	BH
  8440                                  	
  8441                                  	;MSDOS 6.0
  8442                                  	;
  8443 00000FFE AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8444 00000FFF 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8445 00001001 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8446 00001003 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8447                                  	;;;
  8448                                  	
  8449                                  	;add	ax,[es:bp+6]
  8450 00001005 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8451 00001009 AB                      	STOSW				; dpb_dir_sector
  8452 0000100A 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8453                                  	;mov	[es:bp+0Bh],ax
  8454 0000100C 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8455                                  	
  8456                                  	; MSDOS 6.0
  8457 00001010 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8458                                  	;;cmp	word [es:bp+0Dh],0
  8459                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8460                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8461                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8462                                  	; 15/12/2022
  8463                                  	; 28/07/2019
  8464 00001012 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8465 00001016 09DB                    	or	bx,bx
  8466 00001018 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8467                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8468                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8469                                  	
  8470                                  
  8471 0000101A 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8472                                  	;mov	bx,[si+8]
  8473 0000101C 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8474                                  	;mov	dx,[si+10]
  8475 0000101F 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8476 00001022 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8477 00001024 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8478 00001027 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8479 00001029 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8480                                  rott:					;AN000;;F.C. >32mb
  8481 0000102B F8                      	CLC				;AN000;;F.C. >32mb
  8482 0000102C D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8483 0000102E D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8484 00001030 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8485                                  norot:					;AN000;
  8486                                  	; 15/12/2022
  8487                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8488 00001032 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8489                                  normal_dpb:
  8490                                  	;;sub	ax,[es:bp+0Dh]
  8491                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8492                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8493                                  	; 15/12/2022
  8494                                  	; bx = [es:bp+DSKSIZ]
  8495                                  	;sub	ax,bx ; 28/07/2019
  8496                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8497                                  	; 15/12/2022
  8498 00001034 29C3                    	sub	bx,ax
  8499                                  	;NEG	AX			; Sectors in data area
  8500                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8501                                  	; 15/12/2022
  8502                                  	; CL = cluster shift
  8503                                  	; BX = number of data sectors 
  8504                                  	;SHR	AX,CL			; Div by sectors/cluster
  8505 00001036 D3EB                    	shr	bx,cl 
  8506                                  setend:
  8507                                  ;	M008 - CAS
  8508                                  ;
  8509                                  	; 15/12/2022
  8510 00001038 43                      	inc	bx
  8511                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8512                                  ;
  8513                                  ;	There has been a bug in our fatsize calculation for so long
  8514                                  ;	  that we can't correct it now without causing some user to
  8515                                  ;	  experience data loss. There are even cases where allowing
  8516                                  ;	  the number of clusters to exceed the fats is the optimal
  8517                                  ;	  case -- where adding 2 more fat sectors would make the
  8518                                  ;	  data field smaller so that there's nothing to use the extra
  8519                                  ;	  fat sectors for.
  8520                                  ;
  8521                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8522                                  ;	  still report that there was a cluster left when the disk was
  8523                                  ;	  actually full. Very graceful failure for a corrupt system
  8524                                  ;	  configuration. There may be worse cases that were never
  8525                                  ;	  properly traced back to this bug. The problem cases only
  8526                                  ;	  occurred when partition sizes were very near FAT sector
  8527                                  ;	  rounding boundaries, which were rare cases.
  8528                                  ;
  8529                                  ;	Also, it's possible that some third-party partition program might
  8530                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8531                                  ;	  scheme. In this hypothetical case, the number of allocation
  8532                                  ;	  clusters which don't actually have FAT entries to represent
  8533                                  ;	  them might be larger and might create a more catastrophic
  8534                                  ;	  failure. So we'll provide the safeguard of limiting the
  8535                                  ;	  max_cluster to the amount that will fit in the FATs.
  8536                                  ;
  8537                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8538                                  
  8539                                  ;	make sure the number of fat sectors is actually enough to
  8540                                  ;	  hold that many clusters. otherwise, back the number of
  8541                                  ;	  clusters down
  8542                                  
  8543                                  	; 15/12/2022
  8544                                  	; bx = number of clusters
  8545                                  
  8546                                  	; 19/07/2018 - Retro DOS v3.0
  8547                                  	; MSDOS 6.0
  8548                                  	; 15/12/2022
  8549                                  	;mov	bx,ax			; remember calculated # clusters
  8550                                  
  8551                                  	; 01/08/2018 (MSDOS 3.3)
  8552                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8553                                  	;xor	ah,ah 
  8554                                  
  8555                                  	; 10/05/2019 - Retro DOS v4.0
  8556                                  	;mov	ax,[ES:BP+0Fh]
  8557 00001039 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8558                                  
  8559                                  	;mul	word [es:bp+2]	
  8560 0000103D 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8561 00001041 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8562 00001045 720D                    	jb	short setend_fat12
  8563 00001047 D1EA                    	shr	dx,1
  8564                                  
  8565                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8566                                  	; 15/12/2022
  8567                                  ;cs3 7/2/92
  8568 00001049 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8569                                  					; than enough for the maximum FAT,
  8570                                  					; so go ahead and use the calculated
  8571                                  					; number of clusters.
  8572                                  ;cs3 7/2/92
  8573                                  
  8574 0000104B D1D8                    	rcr	ax,1			; find number of entries
  8575 0000104D 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8576                                  ;					;  into 12-bit fatland?
  8577 00001050 7215                    	jb	short setend_faterr	; then go ahead and let the
  8578                                  ;					;  inconsistency pass through
  8579                                  ;					;  rather than lose data by
  8580                                  ;					;  correcting the fat type
  8581 00001052 EB0E                    	jmp	short setend_fat16
  8582                                  
  8583                                  setend_fat12:
  8584 00001054 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8585 00001056 11D2                    	adc	dx,dx
  8586                                  
  8587                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8588                                  ;cs3 7/2/92
  8589                                  	; 15/12/2022
  8590 00001058 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8591 0000105B 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8592                                  					; here. Check for it and use
  8593                                  					; the calculated size in this case.
  8594                                  ;cs3 7/2/92
  8595                                  
  8596 0000105D 2EF736[B10F]            	div	word [cs:word3]
  8597                                  
  8598                                  setend_fat16:
  8599 00001062 48                      	dec	ax			; limit at 1
  8600 00001063 39D8                    	cmp	ax,bx			; is fat big enough?
  8601 00001065 7602                    	jbe	short setend_fat	; use max value that'll fit
  8602                                  
  8603                                  setend_faterr:
  8604 00001067 89D8                    	mov	ax,bx			; use calculated value
  8605                                  
  8606                                  setend_fat:
  8607                                  
  8608                                  ;	now ax = maximum legal cluster
  8609                                  
  8610                                  ;	end M008
  8611                                  
  8612                                  	;mov	[es:bp+0Dh], ax
  8613 00001069 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8614                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8615                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8616 0000106D 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8617                                  					; Init so first ALLOC starts at
  8618                                  					; begining of FAT
  8619                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8620                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8621 00001073 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8622                                  
  8623 00001079 C3                      	retn
  8624                                  
  8625                                  ;EndProc $SETDPB
  8626                                  
  8627                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8628                                  
  8629                                  ;
  8630                                  ;----------------------------------------------------------------------------
  8631                                  ;
  8632                                  ;**	$Dup_PDB
  8633                                  ;
  8634                                  ; Inputs:   DX is new segment address of process
  8635                                  ;	    SI is end of new allocation block
  8636                                  ;
  8637                                  ;----------------------------------------------------------------------------
  8638                                  ;
  8639                                  
  8640                                  _$DUP_PDB:
  8641                                  
  8642                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8643                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8644                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8645                                  
  8646                                  	; MSDOS 3.3
  8647                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8648                                  	;MOV	DS,[CS:CurrentPDB]
  8649                                  
  8650                                  	; 15/05/2019 - Retro DOS v4.0
  8651                                  	; MSDOS 6.0
  8652 0000107A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8653 0000107F C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8654 00001084 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8655                                  
  8656 00001088 56                      	PUSH	SI
  8657 00001089 EB0A                    	JMP	SHORT CreateCopy
  8658                                  
  8659                                  ;
  8660                                  ;----------------------------------------------------------------------------
  8661                                  ;
  8662                                  ; Inputs:
  8663                                  ;	DX = Segment number of new base
  8664                                  ; Function:
  8665                                  ;	Set up program base and copy term and ^C from int area
  8666                                  ; Returns:
  8667                                  ;	None
  8668                                  ; Called at DOS init
  8669                                  ;
  8670                                  ;----------------------------------------------------------------------------
  8671                                  ;
  8672                                  
  8673                                  ; 15/05/2019 - Retro DOS v4.0
  8674                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8675                                  
  8676                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8677                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8678                                  
  8679                                  _$CREATE_PROCESS_DATA_BLOCK:
  8680                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8681 0000108B E8F7F3                  	CALL	Get_User_Stack
  8682                                  	;mov	ds,[si+14h]
  8683 0000108E 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8684                                  	;push	word [2]
  8685 00001091 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8686                                  CreateCopy:
  8687 00001095 8EC2                    	MOV	ES,DX
  8688                                  
  8689 00001097 31F6                    	XOR	SI,SI			; copy entire PDB
  8690 00001099 89F7                    	MOV	DI,SI
  8691 0000109B B98000                  	MOV	CX,128
  8692 0000109E F3A5                    	REP	MOVSW
  8693                                  
  8694                                  ; DOS 3.3 7/9/86
  8695                                  	;mov	cx,20
  8696                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8697                                  	; 15/12/2022
  8698 000010A0 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8699                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8700                                  	;mov	cx,FILPERPROC
  8701                                  
  8702                                  	;mov	di,18h
  8703 000010A2 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8704                                  	;;PUSH	DS ; * 15/05/2019
  8705                                  	;;lds	si,[34h]
  8706                                  	;LDS	SI,[PDB.JFN_Pointer]
  8707                                  	;REP	MOVSB
  8708                                  	;;POP	DS ; * 15/05/2019
  8709                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8710                                  	; 05/12/2022
  8711                                  	; (push ds then pop ds is not needed here!)
  8712                                  	;push	ds
  8713                                  	;lds	si,[34h]
  8714 000010A5 C5363400                	lds	si,[PDB.JFN_Pointer]
  8715 000010A9 F3A4                    	rep	movsb
  8716                                  	;pop	ds
  8717                                  
  8718                                  ; DOS 3.3 7/9/86
  8719                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8720                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8721                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8722                                  
  8723 000010AB 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8724                                  
  8725                                  	;;test	byte [cs:CreatePDB],0FFh
  8726                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8727                                  	; 17/12/2022
  8728 000010B0 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8729                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8730 000010B4 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8731                                  
  8732                                  ; Here we set up for a new process...
  8733                                  
  8734                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8735                                  	;POP	DS
  8736                                  
  8737                                  	; MSDOS 6.0
  8738                                  	;;getdseg <ds>			; ds -> dosdata
  8739                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8740                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8741                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8742                                  	; 15/12/2022
  8743                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8744                                  
  8745 000010B6 31DB                    	XOR	BX,BX			; dup all jfns
  8746                                  	;mov	cx,20
  8747                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8748                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8749                                  	; 15/12/2022
  8750 000010B8 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8751                                  
  8752                                  Create_dup_jfn:
  8753 000010BA 06                      	PUSH	ES ;**			; save new PDB
  8754 000010BB E80B54                  	call	SFFromHandle		; get sf pointer
  8755 000010BE B0FF                    	MOV	AL,-1			; unassigned JFN
  8756 000010C0 7224                    	JC	short CreateStash	; file was not really open
  8757                                  	;;test	word [es:di+5],1000h
  8758                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8759                                  	; 15/05/2019
  8760                                  	;test	byte [es:di+6],10h
  8761 000010C2 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8762 000010C7 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8763                                  
  8764                                  ; We do not inherit network file handles.
  8765                                  
  8766                                  	;mov	ah,[es:di+2]
  8767 000010C9 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8768                                  	;and	ah,0F0h
  8769 000010CD 80E4F0                  	AND	AH,SHARING_MASK
  8770                                  	;cmp	ah,70h
  8771 000010D0 80FC70                  	CMP	AH,SHARING_NET_FCB
  8772 000010D3 7411                    	jz	short CreateStash
  8773                                  
  8774                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8775                                  ; duplication operation.
  8776                                  
  8777 000010D5 893E[9E05]              	MOV	[THISSFT],DI
  8778 000010D9 8C06[A005]              	MOV	[THISSFT+2],ES
  8779 000010DD E89C18                  	call	DOS_DUP 		; signal duplication
  8780                                  
  8781                                  ; get the old sfn for copy
  8782                                  
  8783 000010E0 E8C953                  	call	pJFNFromHandle		; ES:DI is jfn
  8784 000010E3 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8785                                  
  8786                                  ; Take AL (old sfn or -1) and stash it into the new position
  8787                                  
  8788                                  CreateStash:
  8789 000010E6 07                      	POP	ES ;**
  8790                                  	;mov	[es:bx+18h],al
  8791 000010E7 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8792 000010EB 43                      	INC	BX			; next jfn...
  8793 000010EC E2CC                    	LOOP	Create_dup_jfn
  8794                                  
  8795 000010EE 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8796                                  	; 06/11/2022
  8797                                  	;mov	[es:16h],bx
  8798 000010F2 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8799 000010F7 8C06[3003]              	MOV	[CurrentPDB],ES
  8800                                  	;MOV	DS,BX ; 28/07/2019
  8801                                  	; 07/12/2022
  8802                                  	;mov	ds,[cs:DosDSeg]
  8803                                  	; 15/12/2022
  8804                                  	; ds = [cs:DosDSeg]
  8805 000010FB C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8806                                  	;mov	ds,bx
  8807                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8808                                  	; 15/12/2022
  8809                                  	;mov	ds,bx
  8810                                  
  8811                                  ; end of new process create
  8812                                  
  8813                                  Create_PDB_cont:
  8814                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8815                                  
  8816                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8817                                  
  8818                                  	;; 28/07/2019
  8819                                  	;;push	ds
  8820                                  	;;mov	ds,[cs:DosDSeg]
  8821                                  	;mov	byte [CreatePDB],0
  8822                                  	;;pop	ds
  8823                                  
  8824                                  ; 05/12/2022
  8825                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8826                                  ;	; (push-pop ds is nonsense here! 
  8827                                  ;	;  but i am using same code with original MSDOS.SYS
  8828                                  ;	;  for address compatibility.)
  8829                                  ;	push	ds
  8830                                  ;	; ds = [cs:DosDSeg] !
  8831                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8832                                  ;	mov	byte [CreatePDB],0
  8833                                  ;	pop	ds
  8834                                  
  8835 00001100 58                      	POP	AX ;*
  8836                                  
  8837                                  	;entry	SETMEM
  8838                                  
  8839                                  	; 17/12/2022
  8840                                  	; cx = 0
  8841                                  
  8842                                  ;---------------------------------------------------------------------------
  8843                                  ; Inputs:
  8844                                  ;	AX = Size of memory in paragraphs
  8845                                  ;	DX = Segment
  8846                                  ; Function:
  8847                                  ;	Completely prepares a program base at the
  8848                                  ;	specified segment.
  8849                                  ; Called at DOS init
  8850                                  ; Outputs:
  8851                                  ;	DS = DX
  8852                                  ;	ES = DX
  8853                                  ;	[0] has INT int_abort
  8854                                  ;	[2] = First unavailable segment
  8855                                  ;	[5] to [9] form a long call to the entry point
  8856                                  ;	[10] to [13] have exit address (from int_terminate)
  8857                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8858                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8859                                  ; DX,BP unchanged. All other registers destroyed.
  8860                                  ;---------------------------------------------------------------------------
  8861                                  
  8862                                  SETMEM:
  8863                                  	;XOR	CX,CX
  8864                                  	; 17/12/2022
  8865                                  	; cx = 0
  8866 00001101 8ED9                    	MOV	DS,CX
  8867 00001103 8EC2                    	MOV	ES,DX
  8868                                  	;mov	si,88h
  8869 00001105 BE8800                  	MOV	SI,addr_int_terminate
  8870                                  	;mov	di,10 ; 0Ah
  8871 00001108 BF0A00                  	MOV	DI,SAVEXIT
  8872                                  	;MOV	CX,6
  8873                                  	; 15/12/2022
  8874 0000110B B106                    	mov	cl,6
  8875 0000110D F3A5                    	REP	MOVSW
  8876 0000110F 26A30200                	MOV	[ES:2],AX
  8877 00001113 29D0                    	SUB	AX,DX
  8878 00001115 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8879 00001118 7603                    	JBE	short HAVDIF
  8880 0000111A B8FF0F                  	MOV	AX,MAXDIF
  8881                                  HAVDIF:
  8882 0000111D 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8883 00001120 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8884 00001123 29C3                    	SUB	BX,AX
  8885 00001125 B104                    	MOV	CL,4
  8886 00001127 D3E0                    	SHL	AX,CL
  8887 00001129 8EDA                    	MOV	DS,DX
  8888                                  
  8889                                  	; (MSDOS 6.0 note)
  8890                                  	;
  8891                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8892                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8893                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8894                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8895                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8896                                  	; making this equvalence valid for this particular case. If however
  8897                                  	; there is less than 64K remaining the address in BX:AX will not 
  8898                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8899                                  	; into the PSP.
  8900                                  	;
  8901                                  	; Therefore for the case where there is less than 64K remaining in 
  8902                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8903                                  	; requirements will not work. Call 5, however will continue to work
  8904                                  	; for all cases.
  8905                                  	;
  8906                                  
  8907                                  	;mov	[6],ax
  8908                                  	;mov	[8],bx
  8909                                  
  8910 0000112B A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8911 0000112E 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8912                                  
  8913                                  	; 06/05/2019 - Retro DOS v4.0
  8914 00001132 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8915                                  					;    memory left
  8916 00001135 740C                    	je	short addr_ok		; Y: the above calculated address is
  8917                                  					;    OK
  8918                                  					; N: 
  8919                                  
  8920 00001137 C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8921 0000113D C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8922                                  addr_ok:
  8923                                  	;mov	word [0],20CDh
  8924 00001143 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8925                                  	;mov	byte [5],9Ah
  8926 00001149 C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8927                                  	;mov	word [50h],21CDh
  8928 0000114E C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8929                                  	;mov	byte [52h],0CBh
  8930 00001154 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8931                                  	;mov	word [34h],18h
  8932 00001159 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8933                                  	;mov	word [36h],ds
  8934 0000115F 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8935                                  	;mov	word [32h],20
  8936 00001163 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8937                                  ;
  8938                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8939                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8940                                  ; particular SFT.  We perform this by requiring that the server link together
  8941                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8942                                  ; initialize this pointer.
  8943                                  ;
  8944                                   	;mov	word [38h],-1
  8945 00001169 C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8946                                  	;mov	word [3Ah],-1
  8947 0000116F C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8948                                  
  8949                                  	; 06/05/2019
  8950                                  	; Set the real version number in the PSP - 5.00
  8951                                  
  8952                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8953                                  	; 07/12/2022
  8954 00001175 26C70640000500          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8955                                  
  8956 0000117C C3                      	retn
  8957                                  
  8958                                  ; 29/04/2019 - Retro DOS v4.0
  8959                                  
  8960                                  ;BREAK <$GSetMediaID -- get set media ID>
  8961                                  
  8962                                  ;---------------------------------------------------------------------------
  8963                                  ; Inputs:
  8964                                  ;	BL= drive number as defined in IOCTL
  8965                                  ;	AL= 0 get media ID
  8966                                  ;	    1 set media ID
  8967                                  ;	DS:DX= buffer containing information
  8968                                  ;		DW  0  info level (set on input)
  8969                                  ;		DD  ?  serial #
  8970                                  ;		DB  11 dup(?)  volume id
  8971                                  ;		DB   8 dup(?)  file system type
  8972                                  ; Function:
  8973                                  ;	Get or set media ID
  8974                                  ; Returns:
  8975                                  ;	carry clear, DS:DX is filled
  8976                                  ;	carry set, error
  8977                                  ;---------------------------------------------------------------------------
  8978                                  
  8979                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8980                                  _$GSetMediaID:
  8981                                  	; RAWIO - GET_MEDIA_ID
  8982 0000117D B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8983 00001180 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8984 00001182 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8985                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8986                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8987                                  	; 15/12/2022
  8988 00001184 FEC8                    	dec	al
  8989 00001186 7507                    	jnz	short errorfunc ; al > 1
  8990                                  	; RAWIO - SET_MEDIA_ID
  8991                                  	;mov	cx,0846h	      ;AN001;MS.;
  8992                                  	; 15/12/2022
  8993 00001188 B146                    	mov	cl,46h	; cx = 0846h 
  8994                                  doioctl:			      ;AN000;
  8995 0000118A B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8996                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8997                                  	;call	_$IOCTL
  8998                                  	;retn			      ;AN000;MS.;
  8999                                  	; 15/12/2022
  9000 0000118C E97610                  	jmp	_$IOCTL
  9001                                  errorfunc:			      ;AN000;
  9002                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  9003                                  	;mov	al,1
  9004 0000118F B001                    	mov	al,error_invalid_function
  9005 00001191 E9AAF4                  	jmp	SYS_RET_ERR
  9006                                  
  9007                                  ; 16/05/2019 - Retro DOS v4.0
  9008                                  
  9009                                  ;============================================================================
  9010                                  ; MISC2.ASM, MSDOS 6.0, 1991
  9011                                  ;============================================================================
  9012                                  ; 20/07/2018 - Retro DOS v3.0
  9013                                  ; 29/04/2019 - Retro DOS v4.0
  9014                                  
  9015                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  9016                                  ;----------------------------------------------------------------------------
  9017                                  ;
  9018                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  9019                                  ;	     Strings of different lengths don't match.
  9020                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  9021                                  ;   Outputs: Z if strings same, NZ if different
  9022                                  ;   Registers modified: NONE
  9023                                  ;----------------------------------------------------------------------------
  9024                                  
  9025                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9026                                  StrCmp:
  9027 00001194 56                      	push	si
  9028 00001195 57                      	push	di
  9029 00001196 50                      	push	ax
  9030                                  Cmplp:
  9031 00001197 AC                      	LODSB
  9032 00001198 E8263D                  	call	UCase			; convert to upper case
  9033 0000119B E8783D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9034 0000119E 88C4                    	MOV	AH,AL
  9035 000011A0 268A05                  	MOV	AL,[ES:DI]
  9036 000011A3 47                      	INC	DI
  9037 000011A4 E81A3D                  	call	UCase			; convert to upper case
  9038 000011A7 E86C3D                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  9039 000011AA 38C4                    	CMP	AH,AL
  9040 000011AC 7504                    	JNZ	short PopRet		; Strings dif
  9041                                  
  9042 000011AE 08C0                    	OR	AL,AL
  9043 000011B0 75E5                    	JNZ	short Cmplp		; More string
  9044                                  PopRet:
  9045 000011B2 58                      	pop	ax
  9046 000011B3 5F                      	pop	di
  9047 000011B4 5E                      	pop	si
  9048 000011B5 C3                      	retn
  9049                                  
  9050                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  9051                                  ;----------------------------------------------------------------------------
  9052                                  ;
  9053                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  9054                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  9055                                  ;	characters.
  9056                                  ;
  9057                                  ;   Inputs:	DS:SI - pointer to source string
  9058                                  ;		ES:DI - pointer to destination string
  9059                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  9060                                  ;		DS:SI point byte after nul byte at end of source string
  9061                                  ;   Registers modified: SI,DI
  9062                                  ;----------------------------------------------------------------------------
  9063                                  
  9064                                  StrCpy:
  9065 000011B6 50                      	push	ax
  9066                                  CPYLoop:
  9067 000011B7 AC                      	LODSB
  9068 000011B8 E8063D                  	call	UCase			; convert to upper case
  9069 000011BB E8583D                  	call	PATHCHRCMP		; convert / to \ ;
  9070 000011BE AA                      	STOSB
  9071                                  
  9072 000011BF 08C0                    	OR	AL,AL
  9073 000011C1 75F4                    	JNZ	short CPYLoop
  9074 000011C3 58                      	pop	ax
  9075 000011C4 C3                      	retn
  9076                                  
  9077                                  ;----------------------------------------------------------------------------
  9078                                  ; Procedure Name : FStrCpy
  9079                                  ;----------------------------------------------------------------------------
  9080                                  
  9081                                  FStrCpy:
  9082 000011C5 50                      	push	ax
  9083                                  FCPYLoop:
  9084 000011C6 AC                      	LODSB
  9085 000011C7 AA                      	STOSB
  9086 000011C8 08C0                    	OR	AL,AL
  9087 000011CA 75FA                    	JNZ	short FCPYLoop
  9088 000011CC 58                      	pop	ax
  9089 000011CD C3                      	retn
  9090                                  
  9091                                  ; 20/07/2018 - Retro DOS v3.0
  9092                                  ;----------------------------------------------------------------------------
  9093                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  9094                                  ;----------------------------------------------------------------------------
  9095                                  ;
  9096                                  ;UCase:	
  9097                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  9098                                  ;	retn
  9099                                  
  9100                                  ;Break <StrLen - compute length of string ES:DI>
  9101                                  ;----------------------------------------------------------------------------
  9102                                  ;**	StrLen - Compute Length of String
  9103                                  ;
  9104                                  ;	StrLen computes the length of a string, including the trailing 00
  9105                                  ;
  9106                                  ;	ENTRY	(es:di) = address of string
  9107                                  ;	EXIT	(cx) = size of string
  9108                                  ;	USES	cx, flags
  9109                                  ;----------------------------------------------------------------------------
  9110                                  
  9111                                  StrLen:
  9112 000011CE 57                      	push	di
  9113 000011CF 50                      	push	ax
  9114                                  	;MOV	CX,-1
  9115 000011D0 B9FFFF                  	mov	cx,65535
  9116 000011D3 30C0                    	XOR	AL,AL
  9117 000011D5 F2AE                    	REPNE	SCASB
  9118 000011D7 F7D1                    	NOT	CX
  9119 000011D9 58                      	pop	ax
  9120 000011DA 5F                      	pop	di
  9121 000011DB C3                      	retn
  9122                                  
  9123                                  ;----------------------------------------------------------------------------
  9124                                  ;**	DStrLen - Compute Length of String
  9125                                  ;
  9126                                  ;	ENTRY	(ds:si) = address of string
  9127                                  ;	EXIT	(cx) = size of string, including trailing NUL
  9128                                  ;	USES	cx, flags
  9129                                  ;----------------------------------------------------------------------------
  9130                                  
  9131                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  9132 000011DC E80300                  	CALL	XCHGP
  9133 000011DF E8ECFF                  	CALL	StrLen
  9134                                  	;CALL	XCHGP
  9135                                  	;retn
  9136                                  	; 18/12/2022
  9137                                  	;jmp	short XCHGP
  9138                                  
  9139                                  ;----------------------------------------------------------------------------
  9140                                  ;**	XCHGP - Exchange Source and Destination Pointers
  9141                                  ;
  9142                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  9143                                  ;
  9144                                  ;	ENTRY	none
  9145                                  ;	EXIT	pairs exchanged
  9146                                  ;	USES	SI, DI, DS, ES
  9147                                  ;----------------------------------------------------------------------------
  9148                                  
  9149                                  XCHGP:
  9150 000011E2 1E                      	push	ds
  9151 000011E3 06                      	push	es
  9152 000011E4 1F                      	pop	ds
  9153 000011E5 07                      	pop	es
  9154 000011E6 87F7                    	XCHG	SI,DI
  9155                                  xchgp_retn:
  9156 000011E8 C3                      	retn
  9157                                  
  9158                                  ;Break	<Idle - wait for a specified amount of time>
  9159                                  ;----------------------------------------------------------------------------
  9160                                  ;
  9161                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9162                                  ;   	   we spin until RetryLoop is exhausted.
  9163                                  ;
  9164                                  ;   Inputs:	RetryLoop is the number of times we spin
  9165                                  ;   Outputs:	Wait
  9166                                  ;   Registers modified: none
  9167                                  ;----------------------------------------------------------------------------
  9168                                  
  9169                                  Idle:
  9170                                  	;test	byte [SS:FSHARING],0FFh
  9171 000011E9 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9172                                  	;retnz
  9173 000011EF 75F7                    	jnz	short xchgp_retn
  9174                                  	;SAVE	<CX>
  9175 000011F1 51                      	push	cx
  9176 000011F2 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9177 000011F7 E308                    	JCXZ	Idle3
  9178                                  Idle1:	
  9179 000011F9 51                      	PUSH	CX
  9180 000011FA 31C9                    	XOR	CX,CX
  9181                                  Idle2:	
  9182 000011FC E2FE                    	LOOP	Idle2
  9183 000011FE 59                      	POP	CX
  9184 000011FF E2F8                    	LOOP	Idle1
  9185                                  Idle3:	
  9186                                  	;RESTORE <CX>
  9187 00001201 59                      	pop	cx
  9188 00001202 C3                      	retn
  9189                                  
  9190                                  ;Break	<TableDispatch - dispatch to a table>
  9191                                  ;----------------------------------------------------------------------------
  9192                                  ;
  9193                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9194                                  ;   routine. Preserve all input registers to the routine.
  9195                                  ;
  9196                                  ;   Inputs:	Push	return address
  9197                                  ;		Push	Table address
  9198                                  ;		Push	index (byte)
  9199                                  ;   Outputs:	appropriate routine gets jumped to.
  9200                                  ;		return indicates invalid index
  9201                                  ;   Registers modified: none.
  9202                                  ;----------------------------------------------------------------------------
  9203                                  
  9204                                  struc TFrame	 ; TableFrame
  9205 00000000 ????                    .OldBP:	 resw 1  ; 0
  9206 00000002 ????                    .OldRet: resw 1  ; 2
  9207 00000004 ??                      .Index:	 resb 1  ; 4
  9208 00000005 ??                      .Pad:	 resb 1  ; 5  
  9209 00000006 ????                    .Tab:	 resw 1  ; 6
  9210 00000008 ????                    .NewRet: resw 1  ; 8
  9211                                  endstruc
  9212                                  
  9213                                  TableDispatch:
  9214 00001203 55                      	PUSH	BP
  9215 00001204 89E5                    	MOV	BP,SP
  9216 00001206 53                      	PUSH	BX			; save BX
  9217                                  	;mov	bx,[bp+6]
  9218 00001207 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9219 0000120A 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9220                                  	;cmp	[bp+4],bl
  9221 0000120D 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9222 00001210 7317                    	JAE	short TableError	; yes
  9223                                  	;mov	bl,[bp+4]
  9224 00001212 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9225 00001215 30FF                    	XOR	BH,BH			; convert to word
  9226 00001217 D1E3                    	SHL	BX,1			; convert to word pointer
  9227 00001219 43                      	INC	BX			; point past first length byte
  9228                                  	; 17/08/2018
  9229                                  	;add	bx,[bp+6]
  9230 0000121A 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9231 0000121D 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9232                                  	;mov	[bp+6],bx
  9233 00001220 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9234 00001223 5B                      	POP	BX			; restore BX
  9235 00001224 5D                      	POP	BP			; restore BP
  9236 00001225 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9237 00001228 C3                      	retn				; do operation
  9238                                  TableError:
  9239 00001229 5B                      	POP	BX			; restore BX
  9240 0000122A 5D                      	POP	BP			; restore BP
  9241 0000122B C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9242                                  
  9243                                  ;Break	<TestNet - determine if a CDS is for the network>
  9244                                  ;----------------------------------------------------------------------------
  9245                                  ;
  9246                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9247                                  ;	network CDS. This will handle NULL cds also.
  9248                                  ;
  9249                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9250                                  ;   Outputs:	ES:DI = ThisCDS
  9251                                  ;		carry Set => network
  9252                                  ;		carry Clear => local
  9253                                  ;   Registers modified: none.
  9254                                  ;----------------------------------------------------------------------------
  9255                                  
  9256                                  TestNet:
  9257                                  	;LES	DI,[CS:THISCDS]
  9258                                  
  9259                                  	; 16/05/2019 - Retro DOS v4.0
  9260 0000122E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9261 00001233 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9262 00001238 83FFFF                  	CMP	DI,-1
  9263 0000123B 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9264                                  	;;test	word [es:di+43h],8000h
  9265                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9266                                  	;test	byte [es:di+44h],80h
  9267 0000123D 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9268 00001242 7501                    	JNZ	short CMCRet		; jump has carry clear
  9269 00001244 C3                      	retn				; carry is clear
  9270                                  CMCRet: 
  9271 00001245 F5                      	CMC
  9272 00001246 C3                      	retn
  9273                                  
  9274                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9275                                  ;----------------------------------------------------------------------------
  9276                                  ;
  9277                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9278                                  ;	network file.
  9279                                  ;
  9280                                  ;   Inputs:	ES:DI point to SFT
  9281                                  ;   Outputs:	Zero set if not network sft
  9282                                  ;		zero reset otherwise
  9283                                  ;		Carry CLEAR!!!
  9284                                  ;   Registers modified: none.
  9285                                  ;----------------------------------------------------------------------------
  9286                                  
  9287                                  IsSFTNet:
  9288                                  	;;test	word [es:di+5],8000h
  9289                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9290                                  	; 16/05/2019 
  9291                                  	;test	byte [es:di+6],80h
  9292 00001247 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9293 0000124C C3                      	retn
  9294                                  
  9295                                  ;Break	<FastInit - Initialize FastTable entries >
  9296                                  ;----------------------------------------------------------------------------
  9297                                  ;   DOS 4.00   2/9/87
  9298                                  ;   FastInit  - initialize the FASTXXX routine entry
  9299                                  ;		  in the FastTable
  9300                                  ;
  9301                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9302                                  ;		DS:SI = address of FASTXXX routine entry
  9303                                  ;		   SI = -1 for query only
  9304                                  ;   Outputs:	Carry flag clear, if success
  9305                                  ;		Carry flag set,   if failure
  9306                                  ;
  9307                                  ;
  9308                                  ;----------------------------------------------------------------------------
  9309                                  
  9310                                  ;Procedure FastInit,NEAR
  9311                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9312                                  
  9313                                  ;	; MSDOS 3.3
  9314                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9315                                  ;FastInit:
  9316                                  ;	mov	di,FastTable ; FastOpenTable
  9317                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9318                                  ;	mov	bx,cs			; get DOS segment
  9319                                  ;	cmp	ax,bx			; first time installed ?	
  9320                                  ;	je	short ok_install	; yes
  9321                                  ;	stc				; set carry
  9322                                  ;	retn				; (cf=1 means) already installed !
  9323                                  ;
  9324                                  ;ok_install:
  9325                                  ;	mov	bx,FastTable ; FastOpenTable
  9326                                  ;	mov	cx,ds
  9327                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9328                                  ;	mov	[cs:bx+4],cx
  9329                                  ;	mov	[cs:bx+2],si
  9330                                  ;	retn
  9331                                  
  9332                                  ; 16/05/2019 - Retro DOS v4.0
  9333                                  
  9334                                  FastInit:
  9335                                  	; MSDOS 6.0
  9336                                  	;hkn; set up es to dosdataseg.
  9337 0000124D 06                      	push	es
  9338                                  	;getdseg <es>			; es -> dosdata
  9339 0000124E 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9340                                  
  9341                                  	;hkn; FastTable is in DOSDATA
  9342 00001253 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9343 00001256 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9344 00001257 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9345 00001259 D1E3                    	SHL	BX,1			;AN000;FO.;; times 4, each entry is DWORD
  9346 0000125B D1E3                    	SHL	BX,1			;AN000;FO.
  9347 0000125D 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9348 0000125F 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9349                                  fcheck: 				;AN000;
  9350 00001263 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9351 00001265 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9352 00001267 7405                    	JZ	short ok_install	;AN000;FO.;; yes
  9353 00001269 09C0                    	OR	AX,AX			;AN000;FO.;
  9354                                  	;JZ	short ok_install	;AN000;FO.;
  9355                                  	;STC				;AN000;FO.;; already installed !
  9356                                  	;JMP	SHORT FSret		;AN000;FO. set carry
  9357                                  	; 14/01/2024
  9358 0000126B F9                      	stc
  9359 0000126C 7517                    	jnz	short FSret
  9360                                  ok_install:				;AN000;
  9361 0000126E 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9362 00001271 7412                    	JZ	short FSret		;AN000;FO.; yes
  9363 00001273 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9364 00001275 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9365 00001279 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9366                                  
  9367                                  ;hkn; FastFlg moved to DOSDATA
  9368 0000127C BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9369 0000127F 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9370                                  	;or	byte [es:di],80h
  9371 00001281 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9372                                  FSret:					;AN000;
  9373 00001285 07                      	pop	es
  9374 00001286 C3                      	retn				;AN000;FO.
  9375                                  
  9376                                  ;EndProc FastInit
  9377                                  
  9378                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9379                                  ;----------------------------------------------------------------------------
  9380                                  ;   DOS 3.3   6/10/86
  9381                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9382                                  ;
  9383                                  ;   Inputs:	None
  9384                                  ;   Outputs:	AX = -1 and carry flag set
  9385                                  ;
  9386                                  ;   Registers modified: none.
  9387                                  ;----------------------------------------------------------------------------
  9388                                  
  9389                                  FastRet:
  9390                                  	;mov	ax,-1
  9391                                  	;stc
  9392                                  	;retf
  9393 00001287 F9                      	STC
  9394 00001288 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9395 0000128A CB                      	RETF
  9396                                  
  9397                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9398                                  ;----------------------------------------------------------------------------
  9399                                  ;   DOS 3.3   6/10/86
  9400                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9401                                  ;
  9402                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9403                                  ;   Outputs:	same output as $OPEN
  9404                                  ;
  9405                                  ;----------------------------------------------------------------------------
  9406                                  
  9407                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9408                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9409                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9410                                  
  9411                                  NLS_OPEN:
  9412                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9413                                  ;	MOV	BYTE [CPSWFLAG],0
  9414                                  ;	PUSH	BX		 ; save current state
  9415                                  
  9416 0000128B 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9417 0000128D E88A5A                  	call	_$OPEN
  9418                                  
  9419                                  ;	POP	BX		 ; restore current state
  9420                                  ;	MOV	[CPSWFLAG],BL
  9421                                  	
  9422 00001290 C3                      	RETN
  9423                                  
  9424                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9425                                  ;----------------------------------------------------------------------------
  9426                                  ;   DOS 3.3   6/10/86
  9427                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9428                                  ;
  9429                                  ;   Inputs:	BP = open mode
  9430                                  ;   Outputs:	same output as $LSEEK
  9431                                  ;
  9432                                  ;----------------------------------------------------------------------------
  9433                                  
  9434                                  ; 16/05/2019 - Retro DOS v4.0
  9435                                  
  9436                                  NLS_LSEEK:
  9437 00001291 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9438 00001296 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9439 0000129B E81000                  	CALL	Fake_User_Stack
  9440 0000129E 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9441 000012A0 E82A54                  	call	_$LSEEK
  9442                                  NLS_SEEK_RET:	; 26/06/2024
  9443 000012A3 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9444 000012A8 368F06[8405]            	POP	word [SS:USER_SP]
  9445 000012AD C3                      	RETN
  9446                                  
  9447                                  ;Break	<Fake_User_Stack - save user stack>
  9448                                  ;----------------------------------------------------------------------------
  9449                                  ;   DOS 3.3   6/10/86
  9450                                  ;   Fake_User_Stack - save user stack pointer
  9451                                  ;
  9452                                  ;----------------------------------------------------------------------------
  9453                                  
  9454                                  Fake_User_Stack:
  9455 000012AE 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9456 000012B2 36A3[8405]              	MOV	[SS:USER_SP],AX
  9457 000012B6 8CD0                    	MOV	AX,SS
  9458 000012B8 36A3[8605]              	MOV	[SS:USER_SS],AX
  9459 000012BC C3                      	RETN
  9460                                  
  9461                                  ;Break	<GetDevList - get device header list pointer>
  9462                                  ;----------------------------------------------------------------------------
  9463                                  ;   DOS 3.3   7/25/86
  9464                                  ;   GetDevList - get device header list pointer
  9465                                  ;
  9466                                  ;   Output: AX:BX points to the device header list
  9467                                  ;----------------------------------------------------------------------------
  9468                                  
  9469                                  GetDevList:
  9470                                  	; 16/05/2019 - Retro DOS v4.0
  9471 000012BD BE[280D]                	MOV	SI,SysInitTable
  9472 000012C0 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9473 000012C5 C534                    	LDS	SI,[SI]
  9474                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9475 000012C7 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9476                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9477 000012CA 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9478 000012CD C3                      	RETN
  9479                                  
  9480                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC>
  9481                                  ;----------------------------------------------------------------------------
  9482                                  ;   DOS 3.3   7/25/86
  9483                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9484                                  ;
  9485                                  ;   Inputs:	BP = function code 0CH
  9486                                  ;   Outputs:	same output as generic $IOCTL
  9487                                  ;
  9488                                  ;----------------------------------------------------------------------------
  9489                                  
  9490                                  NLS_IOCTL:
  9491                                  	; 16/05/2019 - Retro DOS v4.0
  9492 000012CE 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9493 000012D3 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9494 000012D8 E8D3FF                  	CALL	Fake_User_Stack
  9495 000012DB 89E8                    	MOV	AX,BP		; set up correct interface for $IOCTL
  9496 000012DD E8250F                  	call	_$IOCTL
  9497                                  	;POP	word [SS:USER_SS] ; restore user stack
  9498                                  	;POP	word [SS:USER_SP]
  9499                                  	;RETN
  9500                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
  9501 000012E0 EBC1                    	jmp	short NLS_SEEK_RET
  9502                                  
  9503                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9504                                  ;----------------------------------------------------------------------------
  9505                                  ;   DOS 3.3   7/25/86
  9506                                  ;   NLS_GETEXT	-
  9507                                  ;
  9508                                  ;   Inputs:	none
  9509                                  ;   Outputs:	AX = extended error
  9510                                  ;
  9511                                  ;----------------------------------------------------------------------------
  9512                                  
  9513                                  NLS_GETEXT:
  9514                                  	; 16/05/2019 - Retro DOS v4.0
  9515 000012E2 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9516                                  	; 23/09/2023
  9517                                  MSG_RETRIEVAL:
  9518 000012E6 C3                      	RETN
  9519                                  
  9520                                  ; 29/04/2019 - Retro DOS v4.0
  9521                                  
  9522                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9523                                  
  9524                                  ;----------------------------------------------------------------------------
  9525                                  ;   DOS 4.00
  9526                                  ;
  9527                                  ;   Inputs:	DL=0 get extended error message addr
  9528                                  ;		  =1 set extended error message addr
  9529                                  ;		  =2 get parser error message addr
  9530                                  ;		  =3 set parser error message addr
  9531                                  ;		  =4 get critical error message addr
  9532                                  ;		  =5 set critical error message addr
  9533                                  ;		  =6 get file system error message addr
  9534                                  ;		  =7 set file system error message addr
  9535                                  ;		  =8 get address for code reduction
  9536                                  ;		  =9 set address for code reduction
  9537                                  ;   Function:	get/set message address
  9538                                  ;   Outputs:	ES:DI points to addr when get
  9539                                  ;----------------------------------------------------------------------------
  9540                                  
  9541                                  ;Procedure MSG_RETRIEVAL,NEAR
  9542                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9543                                  
  9544                                  ; 23/09/2023
  9545                                  ;MSG_RETRIEVAL:
  9546                                  
  9547                                  ;;	NOTE:  This function lives in command.com resident code now.
  9548                                  ;;	If the int 2F ever gets this far, we'll return registers
  9549                                  ;;	unchanged, which produces the same result as before, if
  9550                                  ;;	command.com wasn't present (and therefore no messages available).
  9551                                  ;;
  9552                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9553                                  ;;	No_Op zeroes AL.
  9554                                  ;;
  9555                                  ;;;hkn; set up ds to point to DOSDATA
  9556                                  ;;	push	ds
  9557                                  ;;	getdseg	<ds>			; ds -> dosdata
  9558                                  ;;
  9559                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9560                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9561                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9562                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9563                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9564                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9565                                  ;;	DEC	AL		    ;AN000;;MS.
  9566                                  ;;toget:				    ;AN000;
  9567                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9568                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9569                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9570                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9571                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9572                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9573                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9574                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9575                                  ;;getget: 				     ;AN000;
  9576                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9577                                  ;;MSGret: 				     ;AN000;
  9578                                  ;;	POP	SI			     ;AN000;;MS.
  9579                                  ;;	POP	AX			     ;AN000;;MS.
  9580                                  ;;
  9581                                  ;;	pop	ds
  9582                                  
  9583                                  ;	return				     ;AN000;;MS. exit
  9584                                  
  9585                                  ; 23/09/2023
  9586                                  ;	retn	; 29/04/2019
  9587                                  
  9588                                  ;============================================================================
  9589                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9590                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9591                                  ;============================================================================
  9592                                  ; 20/07/2018 - Retro DOS v3.0
  9593                                  
  9594                                  ;	; MSDOS 3.3
  9595                                  ;	; 08/08/2018 - Retro DOS v3.0
  9596                                  ;ECritMEM:
  9597                                  ;ECritSFT:
  9598                                  ;	;
  9599                                  ;ECritDisk:
  9600                                  ;	retn
  9601                                  ;	;push	ax
  9602                                  ;	
  9603                                  ;	mov	ax,8001h
  9604                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9605                                  ;			; AL = critical section number (00h-0Fh)
  9606                                  ;	pop	ax
  9607                                  ;	retn
  9608                                  ;
  9609                                  ;	; MSDOS 3.3
  9610                                  ;	; 08/08/2018 - Retro DOS v3.0
  9611                                  ;LCritMEM:
  9612                                  ;LCritSFT:
  9613                                  ;	;
  9614                                  ;LCritDisk:
  9615                                  ;	retn
  9616                                  ;	;push	ax
  9617                                  ;	
  9618                                  ;	mov	ax,8101h
  9619                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9620                                  ;			; AL = critical section number (00h-0Fh)
  9621                                  ;	pop	ax
  9622                                  ;	retn
  9623                                  ;
  9624                                  ;ECritDevice:
  9625                                  ;	retn
  9626                                  ;	;push	ax
  9627                                  ;	
  9628                                  ;	mov	ax,8002h
  9629                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9630                                  ;			; AL = critical section number (00h-0Fh)
  9631                                  ;	pop	ax
  9632                                  ;	retn
  9633                                  ;
  9634                                  ;LCritDevice:
  9635                                  ;	retn
  9636                                  ;	;push	ax
  9637                                  ;	
  9638                                  ;	mov	ax,8102h
  9639                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9640                                  ;			; AL = critical section number (00h-0Fh)
  9641                                  ;	pop	ax
  9642                                  ;	retn
  9643                                  
  9644                                  ;============================================================================
  9645                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9646                                  ;============================================================================
  9647                                  ; 12/05/2019 - Retro DOS v4.0
  9648                                  
  9649                                  ; Critical Section Routines
  9650                                  
  9651                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9652                                  
  9653                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9654                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9655                                  
  9656                                  ; ---------------------------------------------------------------------------
  9657                                  ; Each handler must leave everything untouched; including flags!
  9658                                  ;
  9659                                  ; Sleaze for time savings: first instruction is a return. This is patched
  9660                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9661                                  ; ---------------------------------------------------------------------------
  9662                                  
  9663                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9664                                  ; ---------------------------------------------------------------------------
  9665                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9666                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9667                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9668                                  ; ---------------------------------------------------------------------------
  9669                                  
  9670                                  ;%macro POPFF 0
  9671                                  ;	jmp	$+3
  9672                                  ;	iret
  9673                                  ;	push	cs
  9674                                  ;	call	$-2
  9675                                  ;%endmacro
  9676                                  
  9677                                  ; ---------------------------
  9678                                  
  9679                                  ;Procedure  ECritDisk,NEAR
  9680                                  	;public  ECritMEM
  9681                                  	;public  ECritSFT
  9682                                  ECritMEM:
  9683                                  ECritSFT:
  9684                                  ;
  9685                                  ECritDisk:
  9686                                  
  9687                                  ;SR; Check if critical section is to be entered
  9688                                  
  9689 000012E7 9C                      	pushf
  9690 000012E8 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9691 000012EE 740D                    	jz	short ECritDisk_2
  9692                                  
  9693                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9694                                  ;	;popff  ; * (macro)
  9695                                  ;	jmp	short ECritDisk_1 ; *
  9696                                  ;
  9697                                  ;ECritDisk_iret: ; *
  9698                                  ;	iret ; *
  9699                                  
  9700                                  	; 16/12/2022
  9701                                  	; 13/11/2022
  9702                                  	;jmp	short ECritDisk_1
  9703                                  	; 06/11/2022
  9704                                  ;ECritDisk_iret:
  9705                                  ;	iret	
  9706                                  
  9707                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9708                                  ECritDisk_1:
  9709 000012F0 0E                      	push	cs ; *
  9710 000012F1 E80800                  	call	ECritDisk_iret ; *		
  9711                                  	
  9712                                  ECritDisk_0:
  9713 000012F4 50                      	PUSH    AX
  9714                                  	;MOV	AX,8000h+critDisk
  9715                                  	;INT	int_IBM
  9716 000012F5 B80180                  	mov	ax,8001h
  9717 000012F8 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9718                                  			; AL = critical section number (00h-0Fh)
  9719 000012FA 58                      	POP     AX
  9720 000012FB C3                      	retn
  9721                                  
  9722                                  	; 16/12/2022
  9723                                  	; 13/11/2022
  9724                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9725                                  LCritDisk_iret: 
  9726 000012FC CF                      	iret
  9727                                  
  9728                                  ECritDisk_2:
  9729                                  	;;popff ; *
  9730                                  	;;retn
  9731                                  ;	jmp	short ECritDisk_3 ; *
  9732                                  ;ECritDisk_iret2: ; *
  9733                                  ;	iret
  9734                                  	
  9735                                  	; 16/12/2022
  9736                                  	; 13/11/2022
  9737                                  	;jmp	short ECritDisk_3
  9738                                  ;ECritDisk_iret2:
  9739                                  	;iret
  9740                                  
  9741                                  ECritDisk_3:
  9742 000012FD 0E                      	push    cs ; *
  9743                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9744                                  	;call	ECritDisk_iret2 ; *
  9745                                  	;retn
  9746                                  	; 16/12/2022
  9747 000012FE E8FBFF                  	call	ECritDisk_iret
  9748 00001301 C3                      	retn
  9749                                  
  9750                                  ;EndProc ECritDisk
  9751                                  
  9752                                  ; ---------------------------
  9753                                  
  9754                                  ;Procedure   LCritDisk,NEAR
  9755                                  	;public  LCritMEM
  9756                                  	;public  LCritSFT
  9757                                  LCritMEM:
  9758                                  LCritSFT:
  9759                                  ;
  9760                                  LCritDisk:
  9761                                  
  9762                                  ;SR; Check if critical section is to be entered
  9763                                  
  9764 00001302 9C                      	pushf
  9765 00001303 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9766 00001309 740C                    	jz	short LCritDisk_2
  9767                                  	;popff  ; * (macro)
  9768                                  ;	jmp	short LCritDisk_1 ; *
  9769                                  ;
  9770                                  ;LCritDisk_iret: ; *
  9771                                  ;	iret ; *
  9772                                  
  9773                                  	; 16/12/2022
  9774                                  	; 13/11/2022
  9775                                  	;jmp	short LCritDisk_1
  9776                                  ;LCritDisk_iret:
  9777                                  	;iret
  9778                                  
  9779                                  LCritDisk_1:
  9780 0000130B 0E                      	push	cs ; *
  9781 0000130C E8EDFF                  	call	LCritDisk_iret ; *		
  9782                                  	
  9783                                  LCritDisk_0:
  9784 0000130F 50                      	PUSH	AX
  9785                                  	;MOV	AX,8100h+critDisk
  9786                                  	;INT	int_IBM
  9787 00001310 B80181                  	mov	ax,8101h
  9788 00001313 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9789                                  			; AL = critical section number (00h-0Fh)
  9790 00001315 58                      	POP	AX
  9791 00001316 C3                      	retn
  9792                                  
  9793                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9794                                  ;	iret
  9795                                  
  9796                                  LCritDisk_2:
  9797                                  	;;popff ; *
  9798                                  	;;retn
  9799                                  ;	jmp	short LCritDisk_3 ; *
  9800                                  ;LCritDisk_iret2: ; *
  9801                                  ;	iret
  9802                                  
  9803                                  	; 16/12/2022
  9804                                  	; 13/11/2022
  9805                                  	;jmp	short LCritDisk_3
  9806                                  ;LCritDisk_iret2:
  9807                                  	;iret
  9808                                  
  9809                                  LCritDisk_3:
  9810 00001317 0E                      	push    cs ; *
  9811                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9812                                  	;call	LCritDisk_iret2 ; *
  9813                                  	;retn
  9814                                  	; 16/12/2022
  9815 00001318 E8E1FF                  	call	LCritDisk_iret
  9816 0000131B C3                      	retn
  9817                                  
  9818                                  ;EndProc LCritDisk
  9819                                  
  9820                                  ; ---------------------------
  9821                                  
  9822                                  ;Procedure   ECritDevice,NEAR
  9823                                  
  9824                                  ECritDevice:
  9825                                  
  9826                                  ;SR; Check if critical section is to be entered
  9827                                  
  9828 0000131C 9C                      	pushf
  9829 0000131D 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9830 00001323 740D                    	jz	short ECritDevice_2
  9831                                  	;popff  ; * (macro)
  9832                                  ;	jmp	short ECritDevice_1 ; *
  9833                                  ;
  9834                                  ;ECritDevice_iret: ; *
  9835                                  ;	iret ; *
  9836                                  
  9837                                  	; 16/12/2022	
  9838                                  	; 13/11/2022
  9839                                  	;jmp	short ECritDevice_1
  9840                                  ;ECritDevice_iret:
  9841                                  	;iret
  9842                                  
  9843                                  ECritDevice_1:
  9844 00001325 0E                      	push	cs ; *
  9845 00001326 E80800                  	call	ECritDevice_iret ; *		
  9846                                  	
  9847                                  ECritDevice_0:
  9848 00001329 50                      	PUSH	AX
  9849                                  	;MOV	AX,8000h+critDevice
  9850                                  	;INT	int_IBM
  9851 0000132A B80280                  	mov	ax,8002h
  9852 0000132D CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9853                                  			; AL = critical section number (00h-0Fh)
  9854 0000132F 58                      	POP     AX
  9855 00001330 C3                      	retn
  9856                                  
  9857                                  	; 16/12/2022
  9858                                  	; 06/12/2022
  9859                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9860                                  LCritDevice_iret: 
  9861 00001331 CF                      	iret
  9862                                  
  9863                                  ECritDevice_2:
  9864                                  	;;popff ; *
  9865                                  	;;retn
  9866                                  ;	jmp	short ECritDevice_3 ; *
  9867                                  ;ECritDevice_iret2: ; *
  9868                                  ;	iret
  9869                                  
  9870                                  	; 16/12/2022
  9871                                  	; 13/11/2022
  9872                                  	;jmp	short ECritDevice_3
  9873                                  ;ECritDevice_iret2:
  9874                                  	;iret
  9875                                  
  9876                                  ECritDevice_3:
  9877 00001332 0E                      	push    cs ; *
  9878                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9879                                  	;call	ECritDevice_iret2 ; *
  9880                                  	;retn
  9881                                  	; 16/12/2022
  9882 00001333 E8FBFF                  	call	ECritDevice_iret
  9883 00001336 C3                      	retn
  9884                                  
  9885                                  ;EndProc ECritDevice
  9886                                  
  9887                                  ; ---------------------------
  9888                                  
  9889                                  ;Procedure   LCritDevice,NEAR
  9890                                  
  9891                                  LCritDevice:
  9892                                  
  9893                                  ;SR; Check if critical section is to be entered
  9894                                  
  9895 00001337 9C                      	pushf
  9896 00001338 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9897 0000133E 740C                    	jz	short LCritDevice_2
  9898                                  	;popff  ; * (macro)
  9899                                  ;	jmp	short LCritDevice_1 ; *
  9900                                  ;
  9901                                  ;LCritDevice_iret: ; *
  9902                                  ;	iret ; *
  9903                                  
  9904                                  	; 16/12/2022
  9905                                  	; 13/11/2022
  9906                                  	;jmp	short LCritDevice_1
  9907                                  ;LCritDevice_iret:
  9908                                  	;iret
  9909                                  
  9910                                  LCritDevice_1:
  9911 00001340 0E                      	push	cs ; *
  9912 00001341 E8EDFF                  	call	LCritDevice_iret ; *		
  9913                                  	
  9914                                  LCritDevice_0:
  9915 00001344 50                      	PUSH	AX
  9916                                  	;MOV	AX,8100h+critDevice
  9917                                  	;INT	int_IBM
  9918 00001345 B80281                  	mov	ax,8102h
  9919 00001348 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9920                                  			; AL = critical section number (00h-0Fh)
  9921 0000134A 58                      	POP     AX
  9922 0000134B C3                      	retn
  9923                                  
  9924                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9925                                  ;	iret
  9926                                  
  9927                                  LCritDevice_2:
  9928                                  	;;popff ; *
  9929                                  	;;retn
  9930                                  ;	jmp	short LCritDevice_3 ; *
  9931                                  ;LCritDevice_iret2: ; *
  9932                                  ;	iret
  9933                                  
  9934                                  	; 16/12/2022
  9935                                  	; 13/11/2022
  9936                                  	;jmp	short LCritDevice_3
  9937                                  ;LCritDevice_iret2:
  9938                                  	;iret
  9939                                  
  9940                                  LCritDevice_3:
  9941 0000134C 0E                      	push    cs ; *
  9942                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9943                                  	;call	LCritDevice_iret2 ; *
  9944                                  	;retn
  9945                                  	; 16/12/2022
  9946 0000134D E8E1FF                  	call	LCritDevice_iret
  9947 00001350 C3                      	retn
  9948                                  
  9949                                  ;EndProc LCritDevice
  9950                                  
  9951                                  ;============================================================================
  9952                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9953                                  ;============================================================================
  9954                                  ; 20/07/2018 - Retro DOS v3.0
  9955                                  
  9956                                  ;============================================================================
  9957                                  ; STDIO.ASM - (MSDOS 2.0)
  9958                                  ;============================================================================
  9959                                  
  9960                                  ;
  9961                                  ; Standard device IO for MSDOS (first 12 function calls)
  9962                                  ;
  9963                                  
  9964                                  ;.xlist
  9965                                  ;.xcref
  9966                                  ;INCLUDE STDSW.ASM
  9967                                  ;INCLUDE DOSSEG.ASM
  9968                                  ;.cref
  9969                                  ;.list
  9970                                  
  9971                                  ;TITLE   STDIO - device IO for MSDOS
  9972                                  ;NAME    STDIO
  9973                                  
  9974                                  ;INCLUDE IO.ASM
  9975                                  
  9976                                  ; ---------------------------------------------------------------------------
  9977                                  ;
  9978                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9979                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9980                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9981                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9982                                  ;			    to restore MSDOS 2.0 device IO source code 
  9983                                  ;
  9984                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9985                                  	
  9986                                  ;============================================================================
  9987                                  ; STDIO.ASM - (MSDOS 2.0)
  9988                                  ;============================================================================
  9989                                  
  9990                                  ;
  9991                                  ; Standard device IO for MSDOS (first 12 function calls)
  9992                                  ;
  9993                                  
  9994                                  ;.xlist
  9995                                  ;.xcref
  9996                                  ;INCLUDE STDSW.ASM
  9997                                  ;INCLUDE DOSSEG.ASM
  9998                                  ;.cref
  9999                                  ;.list
 10000                                  
 10001                                  ;TITLE   STDIO - device IO for MSDOS
 10002                                  ;NAME    STDIO
 10003                                  
 10004                                  ;INCLUDE IO.ASM
 10005                                  
 10006                                  ; ---------------------------------------------------------------------------
 10007                                  ;
 10008                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
 10009                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
 10010                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
 10011                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
 10012                                  ;			    to restore MSDOS 2.0 device IO source code 
 10013                                  ;
 10014                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
 10015                                  ;
 10016                                  ;============================================================================
 10017                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
 10018                                  ;============================================================================
 10019                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
 10020                                  
 10021                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
 10022                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
 10023                                  
 10024                                  ;============================================================================
 10025                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
 10026                                  ;============================================================================
 10027                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
 10028                                  
 10029                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10030                                  
 10031                                  ;**	Standard device IO for MSDOS (first 12 function calls)
 10032                                  ;
 10033                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
 10034                                  ;	NAME	IBMCPMIO
 10035                                  
 10036                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
 10037                                  ;
 10038                                  ;	$Std_Con_Input_No_Echo
 10039                                  ;	$Std_Con_String_Output
 10040                                  ;	$Std_Con_String_Input
 10041                                  ;	$RawConIO
 10042                                  ;	$RawConInput
 10043                                  ;	RAWOUT
 10044                                  ;	RAWOUT2
 10045                                  ;
 10046                                  
 10047                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10048                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10049                                  ; references to be SS or CS relative which is desired.
 10050                                  
 10051                                  ; ---------------------------------------------------------------------------
 10052                                  
 10053                                  ;	TITLE	CPMIO2 - device IO for MSDOS
 10054                                  ;	NAME	CPMIO2
 10055                                  
 10056                                  ;
 10057                                  ;	Microsoft Confidential
 10058                                  ;	Copyright (C) Microsoft Corporation 1991
 10059                                  ;	All Rights Reserved.
 10060                                  ;
 10061                                  
 10062                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
 10063                                  ;
 10064                                  ;	$Std_Con_Input
 10065                                  ;	$Std_Con_Output
 10066                                  ;	OUTT
 10067                                  ;	TAB
 10068                                  ;	BUFOUT
 10069                                  ;	$Std_Aux_Input
 10070                                  ;	$Std_Aux_Output
 10071                                  ;	$Std_Printer_Output
 10072                                  ;	$Std_Con_Input_Status
 10073                                  ;	$Std_Con_Input_Flush
 10074                                  ;
 10075                                  ;	Revision History:
 10076                                  ;
 10077                                  ;	  AN000	 version 4.00 - Jan. 1988
 10078                                  
 10079                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
 10080                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
 10081                                  ; references to be SS or CS relative which is desired.
 10082                                  
 10083                                  ;DOSCODE SEGMENT
 10084                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
 10085                                  
 10086                                  
 10087                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10088                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10089                                  ;hkn;	not valid. 
 10090                                  
 10091                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
 10092                                  ; 08/11/2022
 10093                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
 10094                                  
 10095                                  ;
 10096                                  ;----------------------------------------------------------------------------
 10097                                  ;
 10098                                  ; Procedure : $Std_Con_Input_No_Echo
 10099                                  ;
 10100                                  ;----------------------------------------------------------------------------
 10101                                  ;
 10102                                  
 10103                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
 10104                                  
 10105                                  ; Inputs:
 10106                                  ;	None
 10107                                  ; Function:
 10108                                  ;	Input character from console, no echo
 10109                                  ; Returns:
 10110                                  ;	AL = character
 10111                                  
 10112 00001351 1E                      	push	ds
 10113 00001352 56                      	push	si
 10114                                  INTEST:
 10115 00001353 E8883C                  	call	STATCHK
 10116 00001356 753A                    	jnz	short GET ; 08/09/2018
 10117                                  ;*************************************************************************
 10118                                  ;hkn; SS override
 10119 00001358 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
 10120 0000135E 7505                    	jnz	short no_sys_wait
 10121 00001360 B405                    	mov	ah,5			; get input status with system wait
 10122 00001362 E8DB2F                  	call	IOFUNC
 10123                                  no_sys_wait:
 10124                                  ;**************************************************************************
 10125 00001365 B484                    	MOV	AH,84h
 10126 00001367 CD2A                    	INT	int_IBM	 ; int 2Ah
 10127                                  
 10128                                  ;;; 7/15/86  update the date in the idle loop
 10129                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
 10130                                  ;;;;		 to shorten loop in consideration of the PC Convertible
 10131                                  
 10132                                  ;hkn; SS override
 10133 00001369 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
 10134 0000136F 751A                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
 10135                                  
 10136 00001371 50                      	PUSH	AX
 10137 00001372 53                      	PUSH	BX			; following is tricky,
 10138 00001373 51                      	PUSH	CX			; it may be called by critical handler
 10139 00001374 52                      	PUSH	DX			; at that time, DEVCALL is used by
 10140                                  					; other's READ or WRITE
 10141 00001375 1E                      	PUSH	DS			; save DS = SFT's segment
 10142                                  
 10143                                  ;hkn; READTIME must use ds = DOSDATA
 10144                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
 10145                                  
 10146 00001376 16                      	PUSH	SS ; 04/05/2019
 10147 00001377 1F                      	POP	DS
 10148                                  
 10149                                  	;MOV	AX,0			; therefore, we save DEVCALL
 10150                                  	; 26/06/2024
 10151 00001378 31C0                    	xor	ax,ax
 10152 0000137A E89102                  	CALL	Save_Restore_Packet	; save DEVCALL packet
 10153                                  	;invoke	READTIME		; readtime
 10154 0000137D E88FF7                  	call	READTIME
 10155 00001380 B80100                  	MOV	AX,1
 10156 00001383 E88802                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
 10157                                  
 10158                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
 10159                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
 10160                                  ;	push	bx
 10161                                  ;	mov	bx,DATE_FLAG
 10162                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
 10163                                  ;	cmp	word [cs:bx],5872h
 10164                                  ;	jz	short FETCHI_TAG_chk_ok
 10165                                  ;	call	DOSINIT
 10166                                  ;FETCHI_TAG_chk_ok:
 10167                                  ;	pop	bx
 10168                                  
 10169 00001386 1F                      	POP	DS			; restore DS
 10170 00001387 5A                      	POP	DX
 10171 00001388 59                      	POP	CX
 10172 00001389 5B                      	POP	BX
 10173 0000138A 58                      	POP	AX
 10174                                  NoUpdate:
 10175                                  
 10176                                  ;hkn; SS override
 10177 0000138B 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10178                                  
 10179                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10180 00001390 EBC1                    	JMP	short INTEST
 10181                                  GET:
 10182 00001392 30E4                    	XOR	AH,AH
 10183 00001394 E8A92F                  	call	IOFUNC
 10184 00001397 5E                      	POP	SI
 10185 00001398 1F                      	POP	DS
 10186                                  ;;; 7/15/86
 10187                                  
 10188                                  ;hkn; SS override
 10189                                  	; MSDOS 6.0
 10190 00001399 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10191                                  	;
 10192 0000139F 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10193 000013A1 7505                    	JNZ	short noscan
 10194                                  
 10195                                  ;hkn; SS override
 10196                                  	;MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10197                                  	; 20/06/2023
 10198 000013A3 36FE06[900D]            	inc	byte [SS:SCAN_FLAG]
 10199                                  noscan:
 10200 000013A8 C3                      	retn
 10201                                  ;
 10202                                  ;----------------------------------------------------------------------------
 10203                                  ;
 10204                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10205                                  ;
 10206                                  ;
 10207                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10208                                  ;	EXIT	none
 10209                                  ;	USES	ALL
 10210                                  ;
 10211                                  ;----------------------------------------------------------------------------
 10212                                  ;
 10213                                  
 10214                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10215                                  
 10216 000013A9 89D6                    	mov	si,dx
 10217                                  STRING_OUT1:	
 10218 000013AB AC                      	lodsb
 10219 000013AC 3C24                    	cmp	al,'$'
 10220 000013AE 74F8                    	je	short noscan
 10221                                  NEXT_STR1:
 10222 000013B0 E88402                  	call	OUTT
 10223 000013B3 EBF6                    	jmp	short STRING_OUT1
 10224                                  
 10225                                  ;----------------------------------------------------------------------------
 10226                                  ;
 10227                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10228                                  ;
 10229                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10230                                  ;
 10231                                  ;	ENTRY	(ds:dx) = input buffer
 10232                                  ;	EXIT	none
 10233                                  ;	USES	ALL
 10234                                  ;
 10235                                  ;----------------------------------------------------------------------------
 10236                                  
 10237                                  	; 15/01/2024
 10238                                  
 10239                                  _$STD_CON_STRING_INPUT:		;System call 10
 10240                                  
 10241                                  	; 15/01/2024
 10242                                  	;mov	ax,ss
 10243                                  	;mov	es,ax
 10244 000013B5 16                      	push	ss
 10245 000013B6 07                      	pop	es
 10246                                  
 10247 000013B7 89D6                    	mov	si,dx
 10248 000013B9 30ED                    	xor	ch,ch
 10249 000013BB AD                      	lodsw
 10250                                  
 10251                                  ;	(AL) = the buffer length
 10252                                  ;	(AH) = the template length
 10253                                  
 10254 000013BC 08C0                            or	al,al
 10255 000013BE 74E8                            jz	short noscan	;Buffer is 0 length!!?
 10256 000013C0 88E3                    	mov	bl,ah		;Init template counter
 10257 000013C2 88EF                            mov	bh,ch		;Init template counter
 10258                                  
 10259                                  ;	(BL) = the number of bytes in the template
 10260                                  
 10261 000013C4 38D8                            cmp	al,bl
 10262 000013C6 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10263 000013C8 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10264 000013CB 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10265                                  
 10266                                  ; The number of chars in the template is >= the number of chars in buffer or
 10267                                  ; there is no CR at the end of the template. This is an inconsistant state
 10268                                  ; of affairs. Pretend that the template was empty:
 10269                                  ;
 10270                                  
 10271                                  NOEDIT:	
 10272 000013CD 88EB                    	mov	bl,ch		;Reset buffer
 10273                                  EDITON: 
 10274 000013CF 88C2                    	mov	dl,al
 10275 000013D1 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10276                                  
 10277                                  ;	Top level. We begin to read a line in.
 10278                                  
 10279                                  NEWLIN: 
 10280 000013D2 36A0[F901]              	mov	al,[SS:CARPOS]
 10281 000013D6 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10282                                  
 10283 000013DA 56                      	push	si
 10284 000013DB BF[FB01]                	mov	di,INBUF ;Build the new line here
 10285 000013DE 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10286 000013E3 88EF                    	mov	bh,ch		;No chars from template yet
 10287 000013E5 88EE                    	mov	dh,ch		;No chars to new line yet
 10288 000013E7 E867FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10289 000013EA 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10290 000013EC 7503                    	jnz	short GOTCH
 10291                                  
 10292                                  ;	This is the main loop of reading in a character and processing it.
 10293                                  ;
 10294                                  ;	(BH) = the index of the next byte in the template
 10295                                  ;	(BL) = the length of the template
 10296                                  ;	(DH) = the number of bytes in the buffer
 10297                                  ;	(DL) = the length of the buffer
 10298                                  
 10299                                  GETCH:
 10300 000013EE E860FF                  	call	_$STD_CON_INPUT_NO_ECHO
 10301                                  GOTCH:
 10302                                  ;
 10303                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10304                                  ; input queue.
 10305                                  ;
 10306 000013F1 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10307 000013F3 74F9                    	jz	short GETCH
 10308                                  
 10309                                  ;	If the leading char is the function-key lead byte
 10310                                  
 10311                                  	;cmp	al,[SS:ESCCHAR]
 10312                                  
 10313                                  	; 04/05/2019 - Retro DOS v4.0
 10314                                  
 10315                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10316                                  
 10317 000013F5 2E3A06[190A]            	CMP	AL,[cs:ESCCHAR]
 10318 000013FA 7439                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10319                                  
 10320                                  ;	Rubout and ^H are both destructive backspaces.
 10321                                  
 10322 000013FC 3C7F                            cmp	al,c_DEL ; 7FH
 10323                                          ;jz	short BACKSPJ
 10324                                          ; 15/01/2024
 10325 000013FE 7466                    	je	short BACKSP
 10326 00001400 3C08                    	cmp	al,c_BS  ; 8
 10327                                          ;jz	short BACKSPJ
 10328                                          ; 15/01/2024
 10329 00001402 7462                    	je	short BACKSP
 10330                                  
 10331                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10332                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10333                                  	;	   	after CMP and a CMP again!
 10334                                  	;		
 10335                                  	;		-It would be better if they use a 'JMP short' to 
 10336                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10337                                  	;		between them. Then, they would be able use a patch
 10338                                  	;		between 5271h and 5279h when if it will be required.
 10339                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10340                                  	;	
 10341                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10342                                  
 10343                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10344                                  	;
 10345                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10346                                  
 10347                                  ;DOSCODE:526D	cmp     al, 8
 10348                                  ;DOSCODE:526F	jz      short BACKSPJ
 10349                                  ;DOSCODE:5271	cmp     al, 17h
 10350                                  ;DOSCODE:5273	nop
 10351                                  ;DOSCODE:5274	nop
 10352                                  ;DOSCODE:5275	cmp     al, 15h
 10353                                  ;DOSCODE:5277	nop
 10354                                  ;DOSCODE:5278	nop
 10355                                  ;DOSCODE:5279	cmp     al, 0Dh
 10356                                  ;DOSCODE:527B	jz      short ENDLIN
 10357                                  ;DOSCODE:527D	cmp     al, 0Ah
 10358                                  ;DOSCODE:527F	jz      short PHYCRLF
 10359                                  	
 10360                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10361                                  	; DOSCODE:525Dh
 10362                                  
 10363                                  ; 16/12/2022
 10364                                  %if 0
 10365                                  	; MSDOS 6.0
 10366                                  ;	^W deletes backward once and then backs up until a letter is before the
 10367                                  ;	cursor
 10368                                  
 10369                                  	CMP     AL,"W"-"@" ; 17h
 10370                                  
 10371                                  ;	The removal of the comment characters before the jump statement will
 10372                                  ;	cause ^W to backup a word.
 10373                                  
 10374                                  ;***	JZ	short WordDel
 10375                                  	NOP
 10376                                  	NOP
 10377                                  
 10378                                  	CMP     AL,"U"-"@" ; 15h
 10379                                  
 10380                                  ;	The removal of the comment characters before the jump statement will
 10381                                  ;	cause ^U to clear a line.
 10382                                  
 10383                                  ;***	JZ	short LineDel
 10384                                  	NOP
 10385                                  	NOP
 10386                                  
 10387                                  %endif
 10388                                  
 10389                                  ;	CR terminates the line.
 10390                                  
 10391 00001404 3C0D                            cmp	al,c_CR ; 0Dh
 10392 00001406 7430                            jz	short ENDLIN
 10393                                  
 10394                                  ;	LF goes to a new line and keeps on reading.
 10395                                  
 10396 00001408 3C0A                            cmp	al,c_LF ; 0Ah
 10397 0000140A 7442                    	jz	short PHYCRLF
 10398                                  
 10399                                  ;	^X (or ESC) deletes the line and starts over
 10400                                  
 10401                                  	; MSDOS 3.3
 10402                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10403                                  	;jz	short KILNEW
 10404                                  
 10405                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10406                                  
 10407                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10408                                  
 10409 0000140C 2E3A06[180A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10410 00001411 7440                    	jz	short KILNEW
 10411                                  	
 10412                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10413                                  	;jz	short KILNEW
 10414                                  
 10415                                  ; Otherwise, we save the input character.
 10416                                  
 10417                                  SAVCH:	
 10418 00001413 38D6                    	cmp	dh,dl
 10419 00001415 7317                    	jnb	short BUFFUL		; buffer is full.
 10420 00001417 AA                              stosb
 10421 00001418 FEC6                    	inc	dh                      ; increment count in buffer.
 10422 0000141A E8AE02                  	call	BUFOUT			; Print control chars nicely
 10423                                  
 10424 0000141D 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10425 00001423 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10426 00001425 38DF                            cmp	bh,bl
 10427 00001427 73C5                            jnb	short GETCH		; no more characters in template
 10428 00001429 46                              inc	si                      ; Skip to next char in template
 10429 0000142A FEC7                            inc	bh                      ; remember position in template
 10430 0000142C EBC0                            jmp	short GETCH
 10431                                  
 10432                                  	; 15/01/2024
 10433                                  ;BACKSPJ: 
 10434                                  	;jmp	short BACKSP
 10435                                  
 10436                                  BUFFUL: 
 10437 0000142E B007                    	mov	al, 7			; Bell to signal full buffer
 10438 00001430 E80402                  	call	OUTT
 10439 00001433 EBB9                    	jmp	short GETCH
 10440                                  
 10441                                  ESCAPE: 
 10442                                  	;transfer OEMFunctionKey
 10443 00001435 E90CF6                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10444                                  
 10445                                  ENDLIN:
 10446 00001438 AA                              stosb				; Put the CR in the buffer
 10447 00001439 E8FB01                  	call	OUTT                    ; Echo it
 10448 0000143C 5F                              pop	di                      ; Get start of user buffer
 10449 0000143D 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10450 00001440 FEC6                            inc	dh			; DH is length including CR
 10451                                  
 10452                                  COPYNEW:
 10453                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10454                                  	;mov	bp, es
 10455                                  	;mov	bx, ds
 10456                                  	;mov	es, bx
 10457                                  	;mov	ds, bp
 10458                                  	;mov	si, INBUF
 10459                                  	;mov	cl, dh
 10460                                  	;rep	movsb
 10461                                  	;retn
 10462                                  
 10463                                  	; CPMIO.ASM (MSDOS 6.0)
 10464                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10465                                  	;SAVE	<DS,ES>
 10466 00001442 1E                      	PUSH	DS
 10467 00001443 06                      	PUSH	ES
 10468                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10469 00001444 1F                      	POP	DS
 10470 00001445 07                      	POP	ES
 10471                                  
 10472                                  ;;hkn; INBUF is in DOSDATA
 10473 00001446 BE[FB01]                        MOV     SI,INBUF
 10474 00001449 88F1                            MOV     CL,DH                   ; set up count
 10475 0000144B F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10476                                  OLDBAK_RETN:
 10477 0000144D C3                              RETN
 10478                                  
 10479                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10480                                  
 10481                                  PHYCRLF:
 10482 0000144E E81B01                  	CALL	CRLF
 10483 00001451 EB9B                            JMP	short GETCH
 10484                                  
 10485                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10486                                  
 10487                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10488                                  
 10489                                  	; Note: Following routines were not used in IBMDOS.COM
 10490                                  	;	-CRTL+W, CRTL+U is not activated-
 10491                                  	;	but they were in the kernel code!?)
 10492                                  
 10493                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10494                                  	; DOSCODE:52B6h
 10495                                  
 10496                                  ;;;;;;;;
 10497                                  
 10498                                  ; 16/12/2022
 10499                                  %if 0
 10500                                  ;
 10501                                  ; Delete the previous line
 10502                                  ;
 10503                                  LineDel:
 10504                                  	OR      DH,DH
 10505                                  	JZ	short GETCH	 ; 06/12/2022
 10506                                  	Call    BackSpace
 10507                                  	JMP	short LineDel
 10508                                  
 10509                                  %endif
 10510                                  
 10511                                  ;
 10512                                  ; delete the previous word.
 10513                                  ;
 10514                                  WordDel:
 10515                                  WordLoop:
 10516                                  ;	Call    BackSpace               ; backspace the one spot
 10517                                  ;	OR      DH,DH
 10518                                  ;	JZ	short GetChj
 10519                                  ;	MOV     AL,[ES:DI-1]
 10520                                  ;	cmp     al,'0'
 10521                                  ;	jb	short GetChj
 10522                                  ;	cmp     al,'9'
 10523                                  ;	jbe	short WordLoop
 10524                                  ;	OR      AL,20h
 10525                                  ;	CMP     AL,'a'
 10526                                  ;	JB	short GetChj
 10527                                  ;	CMP     AL,'z'
 10528                                  ;	JBE	short WordLoop
 10529                                  ;GetChj: 
 10530                                  ;	JMP	GETCH
 10531                                  
 10532                                  ; 16/12/2022
 10533                                  %if 0
 10534                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10535                                  	; (Worddel is not called or jumped from anywhere!)
 10536                                  WordDel:
 10537                                  WordLoop:
 10538                                  	Call    BackSpace               ; backspace the one spot
 10539                                  	OR      DH,DH
 10540                                  	JZ	short GetChj
 10541                                  	MOV     AL,[ES:DI-1]
 10542                                  	cmp     al,'0'
 10543                                  	jb	short GetChj
 10544                                  	cmp     al,'9'
 10545                                  	jbe	short WordLoop
 10546                                  	OR      AL,20h
 10547                                  	CMP     AL,'a'
 10548                                  	JB	short GetChj
 10549                                  	CMP     AL,'z'
 10550                                  	JBE	short WordLoop
 10551                                  GetChj: 
 10552                                  	JMP	GETCH
 10553                                  
 10554                                  %endif
 10555                                  
 10556                                  ;;;;;;;;
 10557                                  
 10558                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10559                                  
 10560                                  ; The user wants to throw away what he's typed in and wants to start over.
 10561                                  ; We print the backslash and then go to the next line and tab to the correct
 10562                                  ; spot to begin the buffered input.
 10563                                  
 10564                                  KILNEW:
 10565 00001453 B05C                            mov	al,'\'
 10566 00001455 E8DF01                          call	OUTT            ;Print the CANCEL indicator
 10567 00001458 5E                              pop	si		;Remember start of edit buffer
 10568                                  PUTNEW:
 10569 00001459 E81001                  	call	CRLF            ;Go to next line on screen
 10570 0000145C 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10571 00001460 E84802                  	call	TAB             ;Tab over
 10572 00001463 E96CFF                          JMP     NEWLIN		;Start over again
 10573                                  
 10574                                  ;	Destructively back up one character position
 10575                                  
 10576                                  BACKSP:
 10577                                  	; 09/09/2018
 10578 00001466 E80800                  	Call    BackSpace
 10579 00001469 EB83                    	JMP     short GETCH	; 15/01/2024
 10580                                  
 10581                                  	; 15/01/2024
 10582                                  ;User really wants an ESC character in his line
 10583                                  TWOESC:	
 10584 0000146B 2EA0[190A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10585 0000146F EBA2                    	jmp	short SAVCH
 10586                                  
 10587                                  BackSpace:
 10588 00001471 08F6                    	or	dh,dh
 10589 00001473 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10590 00001475 E85800                  	call	BACKUP          ;Do the backup
 10591 00001478 268A05                  	mov	al,[es:di]	;Get the deleted char
 10592 0000147B 3C20                            cmp	al,20h	; ' '
 10593 0000147D 730F                    	jnb	short OLDBAK	;Was a normal char
 10594 0000147F 3C09                            cmp	al,c_HT ; 9
 10595 00001481 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10596                                  ;; 9/27/86 fix for ctrl-U backspace
 10597 00001483 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10598 00001485 7407                    	JZ	short OLDBAK
 10599 00001487 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10600 00001489 7403                    	JZ	short OLDBAK
 10601                                  ;; 9/27/86 fix for ctrl-U backspace
 10602 0000148B E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10603                                  OLDBAK:
 10604 0000148E 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10605 00001494 75B7                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10606 00001496 08FF                    	or	bh,bh
 10607 00001498 74B3                            jz	short OLDBAK_RETN 
 10608                                  				;Not advanced in template, stay where we are
 10609 0000149A FECF                    	dec	bh		;Go back in template
 10610 0000149C 4E                              dec	si
 10611 0000149D C3                      	retn
 10612                                  BAKTAB:
 10613 0000149E 57                              push	di
 10614 0000149F 4F                              dec	di		;Back up one char
 10615 000014A0 FD                              std			;Go backward
 10616 000014A1 88F1                            mov	cl,dh		;Number of chars currently in line
 10617 000014A3 B020                            mov	al,20h	; ' '
 10618 000014A5 53                              push	bx
 10619 000014A6 B307                            mov	bl,7		;Max
 10620 000014A8 E30E                            jcxz	FIGTAB		;At start, do nothing
 10621                                  FNDPOS:
 10622 000014AA AE                              scasb			;Look back
 10623 000014AB 7609                    	jbe	short CHKCNT
 10624 000014AD 26807D0109              	cmp	byte [es:di+1],9
 10625 000014B2 7409                    	jz	short HAVTAB	;Found a tab
 10626 000014B4 FECB                    	dec	bl		;Back one char if non tab control char
 10627                                  CHKCNT:
 10628 000014B6 E2F2                            loop	FNDPOS
 10629                                  FIGTAB:		
 10630 000014B8 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10631                                  HAVTAB:
 10632 000014BD 28F3                    	sub	bl,dh
 10633 000014BF 00D9                    	add	cl,bl
 10634 000014C1 80E107                  	and	cl,7		;CX has correct number to erase
 10635 000014C4 FC                      	cld			;Back to normal
 10636 000014C5 5B                      	pop	bx
 10637 000014C6 5F                      	pop	di
 10638 000014C7 74C5                    	jz	short OLDBAK	;Nothing to erase
 10639                                  TABBAK:
 10640 000014C9 E80700                  	call	BACKMES
 10641 000014CC E2FB                    	loop	TABBAK		;Erase correct number of chars
 10642 000014CE EBBE                    	jmp	short OLDBAK
 10643                                  
 10644                                  BACKUP:
 10645 000014D0 FECE                            dec	dh		;Back up in line
 10646 000014D2 4F                              dec	di
 10647                                  BACKMES:
 10648 000014D3 B008                            mov	al,c_BS ; 8	;Backspace
 10649 000014D5 E85F01                          call	OUTT
 10650 000014D8 B020                            mov	al,20h ; ' '	;Erase
 10651 000014DA E85A01                          call	OUTT
 10652 000014DD B008                            mov	al,c_BS ; 8	;Backspace
 10653 000014DF E95501                  	jmp	OUTT		;Done
 10654                                  
 10655                                  	; 15/01/2024
 10656                                  ;User really wants an ESC character in his line
 10657                                  ;TWOESC:	
 10658                                  ;	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10659                                  ;	jmp	SAVCH
 10660                                  
 10661                                  ;Copy the rest of the template
 10662                                  COPYLIN:
 10663 000014E2 88D9                            mov	cl,bl		;Total size of template
 10664 000014E4 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10665 000014E6 EB07                            jmp	short COPYEACH
 10666                                  
 10667                                  COPYSTR:
 10668 000014E8 E83200                  	call	FINDOLD         ;Find the char
 10669 000014EB EB02                    	jmp	short COPYEACH  ;Copy up to it
 10670                                  
 10671                                  ;Copy one char from template to line
 10672                                  COPYONE:
 10673 000014ED B101                            mov	cl,1
 10674                                  ;Copy CX chars from template to line
 10675                                  COPYEACH:
 10676 000014EF 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10677 000014F5 38D6                    	cmp	dh,dl
 10678 000014F7 740F                            jz	short GETCH2		;At end of line, can't do anything
 10679 000014F9 38DF                            cmp	bh,bl
 10680 000014FB 740B                            jz	short GETCH2		;At end of template, can't do anything
 10681 000014FD AC                              lodsb
 10682 000014FE AA                              stosb
 10683 000014FF E8C901                  	call	BUFOUT
 10684 00001502 FEC7                            inc	bh			;Ahead in template
 10685 00001504 FEC6                            inc	dh			;Ahead in line
 10686 00001506 E2E7                            loop	COPYEACH
 10687                                  GETCH2:
 10688 00001508 E9E3FE                          jmp	GETCH
 10689                                  
 10690                                  ;Skip one char in template
 10691                                  SKIPONE:
 10692 0000150B 38DF                    	cmp	bh,bl
 10693 0000150D 74F9                    	jz	short GETCH2		;At end of template
 10694 0000150F FEC7                    	inc	bh			;Ahead in template
 10695 00001511 46                      	inc	si
 10696                                          ;jmp	GETCH
 10697                                  	; 15/01/2024
 10698 00001512 EBF4                    	jmp	short GETCH2
 10699                                  
 10700                                  SKIPSTR:
 10701 00001514 E80600                  	call	FINDOLD                 ;Find out how far to go
 10702 00001517 01CE                            add	si,cx			;Go there
 10703 00001519 00CF                            add	bh,cl
 10704                                          ;jmp	GETCH
 10705                                  	; 15/01/2024
 10706 0000151B EBEB                    	jmp	short GETCH2
 10707                                  
 10708                                  ;Get the next user char, and look ahead in template for a match
 10709                                  ;CX indicates how many chars to skip to get there on output
 10710                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10711                                  ;       address is popped off and a jump to GETCH is taken.
 10712                                  ;       Make sure nothing extra on stack when this routine
 10713                                  ;       is called!!! (no PUSHes before calling it).
 10714                                  
 10715                                  FINDOLD:
 10716 0000151D E831FE                          call	_$STD_CON_INPUT_NO_ECHO
 10717                                  
 10718                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10719                                  
 10720                                  	;CMP	AL,[SS:ESCCHAR]	
 10721                                  	;JNZ	SHORT FINDSETUP
 10722                                  
 10723                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10724                                  
 10725                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10726                                  
 10727 00001520 2E3A06[190A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10728 00001525 7505                    	JNZ	SHORT FINDSETUP		; no, set up for scan
 10729                                  
 10730 00001527 E827FE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10731 0000152A EB1D                            JMP	SHORT NOTFND		; go try again
 10732                                  FINDSETUP:
 10733 0000152C 88D9                    	mov	cl,bl
 10734 0000152E 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10735 00001530 7417                    	jz	short NOTFND	;At end of template
 10736 00001532 49                              dec	cx		;Cannot point past end, limit search
 10737 00001533 7414                            jz	short NOTFND	;If only one char in template, forget it
 10738 00001535 06                      	push	es
 10739 00001536 1E                      	push	ds
 10740 00001537 07                      	pop	es
 10741 00001538 57                      	push	di
 10742 00001539 89F7                    	mov	di,si		;Template to ES:DI
 10743 0000153B 47                      	inc	di
 10744 0000153C F2AE                    	repne	scasb		;Look
 10745 0000153E 5F                      	pop	di
 10746 0000153F 07                      	pop	es
 10747 00001540 7507                    	jnz	short NOTFND	;Didn't find the char
 10748 00001542 F6D1                            not	cl		;Turn how far to go into how far we went
 10749 00001544 00D9                            add	cl,bl		;Add size of template
 10750 00001546 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10751                                  FINDOLD_RETN:
 10752 00001548 C3                      	retn
 10753                                  
 10754                                  NOTFND:
 10755 00001549 5D                      	pop	bp              ;Chuck return address
 10756                                  	;jmp	GETCH
 10757                                  	; 15/01/2024
 10758                                  GETCH2_j:
 10759 0000154A EBBC                    	jmp	short GETCH2
 10760                                  
 10761                                  REEDIT:
 10762 0000154C B040                    	mov	al,'@'		;Output re-edit character
 10763 0000154E E8E600                  	call	OUTT
 10764 00001551 5F                      	pop	di
 10765 00001552 57                      	push	di
 10766 00001553 06                      	push	es
 10767 00001554 1E                      	push	ds
 10768 00001555 E8EAFE                  	call	COPYNEW		;Copy current line into template
 10769 00001558 1F                      	pop	ds
 10770 00001559 07                      	pop	es
 10771 0000155A 5E                      	pop	si
 10772 0000155B 88F3                    	mov	bl,dh		;Size of line is new size template
 10773 0000155D E9F9FE                  	jmp	PUTNEW		;Start over again
 10774                                  
 10775                                  EXITINS:
 10776                                  ENTERINS:
 10777 00001560 36F616[7905]            	not	byte [SS:INSMODE]
 10778                                  	;jmp	GETCH
 10779                                  	; 15/01/2024
 10780 00001565 EBE3                    	jmp	short GETCH2_j
 10781                                  
 10782                                  ;Put a real live ^Z in the buffer (embedded)
 10783                                  CTRLZ:
 10784 00001567 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10785 00001569 E9A7FE                          jmp	SAVCH
 10786                                  
 10787                                  ;Output a CRLF
 10788                                  CRLF:
 10789 0000156C B00D                    	mov	al,c_CR ; 0Dh 
 10790 0000156E E8C600                  	call	OUTT
 10791 00001571 B00A                    	mov	al,c_LF ; 0Ah
 10792 00001573 E9C100                  	jmp	OUTT
 10793                                  
 10794                                  ;
 10795                                  ;----------------------------------------------------------------------------
 10796                                  ;
 10797                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10798                                  ;
 10799                                  ;	Input or output raw character from console, no echo
 10800                                  ;
 10801                                  ;	ENTRY	DL = -1 if input
 10802                                  ;		   =  output character if output
 10803                                  ;	EXIT	(AL) = input character if input
 10804                                  ;	USES	all
 10805                                  ;
 10806                                  ;----------------------------------------------------------------------------
 10807                                  ; 20/07/2018 - Retro DOS v3.0
 10808                                  
 10809                                  ; 04/05/2019 - Retro DOS v4.0
 10810                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10811                                  
 10812                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10813                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10814                                  
 10815                                  _$RAW_CON_IO:			; System call 6
 10816 00001576 88D0                    	MOV	AL,DL
 10817 00001578 3CFF                    	CMP	AL,-1
 10818 0000157A 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10819                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10820                                  	;jz	short rci1
 10821                                  	;jmp	short RAWOUT
 10822                                  	; 16/12/202
 10823                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10824                                  	;nop
 10825                                  rci1:
 10826                                  			; Get pointer to register save area
 10827 0000157C 36C43E[8405]            	LES	DI,[SS:USER_SP] ; 12/03/2018
 10828 00001581 31DB                    	XOR	BX,BX
 10829                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10830 00001583 E8BF1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10831                                          ;JC	SHORT RET17
 10832 00001586 72C0                            jc	short FINDOLD_RETN
 10833 00001588 B401                    	MOV	AH,1
 10834 0000158A E8B32D                  	CALL	IOFUNC
 10835 0000158D 750B                    	JNZ	SHORT RESFLG
 10836 0000158F E81E3A                  	CALL	SPOOLINT
 10837                                  	;OR	BYTE [ES:DI+16H],40H
 10838 00001592 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10839 00001597 30C0                    	XOR	AL,AL
 10840                                  RET17:
 10841 00001599 C3                      	RETN
 10842                                  
 10843                                  RESFLG:
 10844                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10845 0000159A 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10846                                  				; Reset user's zero flag
 10847                                  ;RILP:
 10848                                  rci0:
 10849 0000159F E80E3A                  	CALL	SPOOLINT
 10850                                  ;
 10851                                  ;----------------------------------------------------------------------------
 10852                                  ;
 10853                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10854                                  ;
 10855                                  ;	Input raw character from console, no echo
 10856                                  ;
 10857                                  ;	ENTRY	none
 10858                                  ;	EXIT	(al) = character
 10859                                  ;	USES	all
 10860                                  ;
 10861                                  ;----------------------------------------------------------------------------
 10862                                  ;
 10863                                  
 10864                                  ;rci0:	invoke	SPOOLINT
 10865                                  
 10866                                  	;entry	$RAW_CON_INPUT
 10867                                  
 10868                                  	; 04/05/2019 - Retro DOS v4.0
 10869                                  
 10870                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10871                                  
 10872                                  _$RAW_CON_INPUT:		; System call 7
 10873 000015A2 53                      	push	bx
 10874 000015A3 31DB                    	XOR	BX,BX
 10875                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10876 000015A5 E89D1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10877 000015A8 5B                      	pop	bx
 10878 000015A9 72EE                    	JC	SHORT RET17
 10879 000015AB B401                    	MOV	AH,1
 10880 000015AD E8902D                  	CALL	IOFUNC
 10881                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10882                                  	;XOR	AH,AH
 10883                                          ;CALL	IOFUNC
 10884                                          ;RETN
 10885 000015B0 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10886 000015B2 B484                    	MOV	AH,84h
 10887 000015B4 CD2A                    	INT	int_IBM  ; int 2Ah
 10888 000015B6 EBE7                    	JMP	short rci0
 10889                                  rci5:	
 10890 000015B8 30E4                    	XOR	AH,AH
 10891                                  	;CALL	IOFUNC
 10892                                  	;RETN
 10893                                  	; 18/12/2022
 10894 000015BA E9832D                  	jmp	IOFUNC
 10895                                  
 10896                                  ;       Output the character in AL to stdout
 10897                                  ;
 10898                                  	;entry	RAWOUT
 10899                                  RAWOUT:
 10900 000015BD 53                      	PUSH    BX
 10901 000015BE BB0100                  	MOV     BX,1
 10902                                  
 10903                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10904 000015C1 E8811F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10905 000015C4 721B                    	JC	SHORT RAWRET1
 10906                                  
 10907                                  	;
 10908                                  	; MSDOS 2.11
 10909                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10910                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10911                                          ;PUSH	DS
 10912                                          ;PUSH	SI
 10913                                          ;LDS	SI,[SI+19H]		; output to special?
 10914                                  	;TEST	BYTE [SI+4],ISSPEC
 10915                                  	;POP	SI
 10916                                  	;
 10917                                          
 10918                                  	; MSDOS 3.3 & MSDOS 6.0
 10919                                  	;mov	bx,[si+5]
 10920 000015C6 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10921                                   ;
 10922                                   ; If we are a network handle OR if we are not a local device then go do the
 10923                                   ; output the hard way.
 10924                                   ;	
 10925                                  	;and	bx,8080h
 10926 000015C9 81E38080                	AND	BX,sf_isnet+devid_device
 10927                                  	;cmp	bx,80h
 10928 000015CD 81FB8000                	CMP	BX,devid_device
 10929 000015D1 7510                    	jnz     short RAWNORM
 10930 000015D3 1E                      	push    ds
 10931                                  	;lds	bx,[si+7]
 10932 000015D4 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10933                                  	;test	byte [bx+4],10h
 10934 000015D7 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10935                                  	;
 10936                                  
 10937 000015DB 1F                      	POP	DS
 10938 000015DC 7405                    	JZ	SHORT RAWNORM		; if not, do normally
 10939                                  
 10940 000015DE CD29                    	INT	int_fastcon  ; int 29h	; quickly output the char
 10941                                  
 10942                                  	;JMP	SHORT RAWRET
 10943                                  ;RAWNORM:
 10944                                  ;	CALL    RAWOUT3
 10945                                  RAWRET: 
 10946 000015E0 F8                      	CLC
 10947                                  RAWRET1:
 10948 000015E1 5B                      	POP     BX
 10949                                  RAWRET2:
 10950 000015E2 C3                      	RETN
 10951                                  RAWNORM:
 10952 000015E3 E80700                  	CALL    RAWOUT3
 10953 000015E6 EBF8                    	jmp	short RAWRET
 10954                                  
 10955                                  ;	Output the character in AL to handle in BX
 10956                                  ;
 10957                                  ;	entry	RAWOUT2
 10958                                  
 10959                                  RAWOUT2:
 10960                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10961                                  	;JC	SHORT RET18
 10962 000015E8 E85A1F                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10963 000015EB 72F5                    	JC	SHORT RAWRET2
 10964                                  RAWOUT3:
 10965 000015ED 50                      	PUSH	AX
 10966 000015EE EB0C                    	JMP	SHORT RAWOSTRT
 10967                                  ROLP:
 10968 000015F0 E8BD39                  	CALL	SPOOLINT
 10969                                  
 10970                                  	; 01/05/2019 - Retro DOS v4.0
 10971                                  
 10972                                  	; MSDOS 6.0
 10973                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10974                                  	; 17/12/2022
 10975 000015F3 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h
 10976                                  	;or	word [ss:DOS34_FLAG],200h
 10977                                  				;AN002; set control break
 10978                                  	;invoke DSKSTATCHK
 10979 000015F9 E83339                  	call	DSKSTATCHK	;AN002; check control break
 10980                                  RAWOSTRT:
 10981 000015FC B403                    	MOV	AH,3
 10982 000015FE E83F2D                  	CALL	IOFUNC
 10983 00001601 74ED                    	JZ	SHORT ROLP
 10984                                  
 10985                                  	; MSDOS 6.0
 10986                                  ;SR;
 10987                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10988                                  ;the user failed. We do not send a char if this happens. We however return
 10989                                  ;to the caller with carry clear because this DOS call does not return any
 10990                                  ;status. 
 10991                                  ;
 10992 00001603 40                      	inc	ax		;fail on I24 if ax = -1
 10993 00001604 58                      	POP	AX
 10994 00001605 7405                    	jz	short nosend	;yes, do not send char
 10995 00001607 B402                    	MOV	AH,2
 10996 00001609 E8342D                  	call	IOFUNC
 10997                                  nosend:
 10998 0000160C F8                      	CLC			; Clear carry indicating successful
 10999 0000160D C3                      	retn
 11000                                  
 11001                                  	; MSDOS 3.3 & MSDOS 2.11
 11002                                  	;POP	AX
 11003                                  	;MOV	AH,2
 11004                                          ;CALL	IOFUNC
 11005                                  	;CLC			; Clear carry indicating successful
 11006                                  ;RET18:    
 11007                                  	;RETN
 11008                                  
 11009                                  ;;10/08/2018
 11010                                  ; 20/07/2018 - Retro DOS v3.0
 11011                                  ; ---------------------------------------------------------------------------
 11012                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 11013                                  ; ---------------------------------------------------------------------------
 11014                                  
 11015                                  ; This routine is called at DOS init
 11016                                  
 11017                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 11018                                  ;;OUTMES:
 11019                                  ;;	;LODS	CS:BYTE PTR [SI]
 11020                                  ;;	CS	LODSB
 11021                                  ;;	CMP     AL,"$" ; 24h
 11022                                  ;;	JZ	SHORT RET18
 11023                                  ;;	CALL	OUTT
 11024                                  ;;	JMP     SHORT OUTMES
 11025                                  
 11026                                  ; ---------------------------------------------------------------------------
 11027                                  
 11028                                  ; 20/07/2018 - Retro DOS v3.0
 11029                                  
 11030                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 11031                                  
 11032                                  ;
 11033                                  ;----------------------------------------------------------------------------
 11034                                  ;
 11035                                  ; Inputs:
 11036                                  ;	AX=0 save the DEVCALL request packet
 11037                                  ;	  =1 restore the DEVCALL request packet
 11038                                  ; Function:
 11039                                  ;	save or restore the DEVCALL packet
 11040                                  ; Returns:
 11041                                  ;	none
 11042                                  ;
 11043                                  ;----------------------------------------------------------------------------
 11044                                  ;
 11045                                  
 11046                                  ; 04/05/2019 - Retro DOS v4.0
 11047                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 11048                                  
 11049                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11050                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 11051                                  
 11052                                  ; 12/05/2019
 11053                                  
 11054                                  	; 15/01/2024
 11055                                  
 11056                                  Save_Restore_Packet:
 11057 0000160E 1E                      	PUSH	DS
 11058 0000160F 06                      	PUSH	ES
 11059 00001610 56                      	PUSH	SI
 11060 00001611 57                      	PUSH	DI
 11061                                  
 11062                                  	; 16/12/2022
 11063                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11064                                  	; 09/09/2018
 11065 00001612 BF[6C0D]                	mov	di,FAKE_STACK_2F
 11066 00001615 BE[5A03]                	mov	si,DEVCALL
 11067                                  	;
 11068                                  	; 21/09/2023
 11069 00001618 09C0                    	or	ax,ax
 11070                                  	;CMP	AX,0		; save packet
 11071 0000161A 7402                    	JZ	short save_packet ; 16/12/2022
 11072                                  	;je	short set_seg
 11073                                  
 11074                                  	; MSDOS 6.0
 11075                                  restore_packet:
 11076                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 11077                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 11078                                  	; MSDOS 3.3
 11079                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11080                                  	;mov	di,DEVCALL  ; 09/09/2018
 11081                                  	;
 11082                                  	;JMP	short set_seg
 11083                                  
 11084                                  	; 16/12/2022	
 11085                                  	; 09/09/2018
 11086 0000161C 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 11087                                  
 11088                                  ; 16/12/2022
 11089                                  %if 0
 11090                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11091                                  	cmp	ax,0		; save packet
 11092                                  	jz	short save_packet
 11093                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 11094                                  	mov	di,DEVCALL 
 11095                                  	jmp	short set_seg
 11096                                  
 11097                                  	; MSDOS 6.0
 11098                                  save_packet:
 11099                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 11100                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 11101                                  	; 09/09/2018
 11102                                  	; MSDOS 3.3
 11103                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11104                                  	;mov	si,DEVCALL ; 09/09/2018
 11105                                  
 11106                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11107                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 11108                                  	mov	si,DEVCALL
 11109                                  %endif
 11110                                  
 11111                                  ; 15/01/2024
 11112                                  ; 16/12/2022
 11113                                  save_packet:
 11114                                  ;set_seg:
 11115                                  	; MSDOS 3.3
 11116                                  	;mov	ax,cs
 11117                                  
 11118                                  	; MSDOS 6.0
 11119                                  	;MOV	AX,SS		; set DS,ES to DOSDATA
 11120                                  	;MOV	DS,AX
 11121                                  	;MOV	ES,AX
 11122                                  	; 15/01/2024
 11123 0000161E 16                      	push	ss
 11124 0000161F 1F                      	pop	ds
 11125 00001620 1E                      	push	ds
 11126 00001621 07                      	pop	es
 11127                                  
 11128 00001622 B90B00                  	MOV	CX,11		; 11 words to move
 11129 00001625 F3A5                    	REP	MOVSW
 11130                                  
 11131 00001627 5F                      	POP	DI
 11132 00001628 5E                      	POP	SI
 11133 00001629 07                      	POP	ES
 11134 0000162A 1F                      	POP	DS
 11135 0000162B C3                      	retn
 11136                                  
 11137                                  ;============================================================================
 11138                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 11139                                  ;============================================================================
 11140                                  ; 20/07/2018 - Retro DOS v3.0
 11141                                  ; 01/05/2019 - Retro DOS v4.0
 11142                                  
 11143                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 11144                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 11145                                  ;hkn;	not valid. 
 11146                                  
 11147                                  ;
 11148                                  ;----------------------------------------------------------------------------
 11149                                  ;
 11150                                  ;**	$STD_CON_INPUT - System Call 1
 11151                                  ;
 11152                                  ;	Input character from console, echo
 11153                                  ;
 11154                                  ;	ENTRY	none
 11155                                  ;	EXIT	(al) = character
 11156                                  ;	USES	ALL
 11157                                  ;
 11158                                  ;----------------------------------------------------------------------------
 11159                                  ;
 11160                                  
 11161                                  _$STD_CON_INPUT:	;System call 1
 11162                                  	
 11163 0000162C E822FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 11164 0000162F 50                      	PUSH	AX
 11165 00001630 E80400                  	CALL	OUTT
 11166 00001633 58                      	POP	AX
 11167                                  CON_INPUT_RETN:	
 11168 00001634 C3                      	RETN
 11169                                  
 11170                                  ;
 11171                                  ;----------------------------------------------------------------------------
 11172                                  ;
 11173                                  ;**	$STD_CON_OUTPUT - System Call 2
 11174                                  ;
 11175                                  ;	Output character to console
 11176                                  ;
 11177                                  ;	ENTRY	(dl) = character
 11178                                  ;	EXIT	none
 11179                                  ;	USES	all
 11180                                  ;
 11181                                  ;----------------------------------------------------------------------------
 11182                                  ;
 11183                                  
 11184                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 11185                                  
 11186                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11187                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 11188                                  
 11189                                  _$STD_CON_OUTPUT:	;System call 2
 11190                                  
 11191 00001635 88D0                    	MOV	AL,DL
 11192                                  OUTT:
 11193 00001637 3C20                    	CMP	AL,20H ; " "
 11194 00001639 725C                    	JB	SHORT CTRLOUT
 11195 0000163B 3C7F                    	CMP	AL,c_DEL ; 7Fh
 11196 0000163D 7405                    	JZ	SHORT OUTCH
 11197                                  OUTCHA:	
 11198                                  	;INC	BYTE PTR [CARPOS]
 11199 0000163F 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 11200                                  OUTCH:
 11201 00001644 1E                      	PUSH	DS
 11202 00001645 56                      	PUSH	SI
 11203                                  	;INC	BYTE PTR [CHARCO]		;invoke statchk...
 11204                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 11205 00001646 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11206                                  	;AND	BYTE [SS:CHARCO],00111111B
 11207                                  	; 01/05/2019 - Retro DOS v4.0
 11208 0000164B 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11209 00001651 7505                    	JNZ	SHORT OUTSKIP
 11210                                  
 11211 00001653 50                      	PUSH	AX
 11212 00001654 E88739                  	CALL	STATCHK
 11213 00001657 58                      	POP	AX
 11214                                  OUTSKIP:
 11215 00001658 E862FF                  	CALL	RAWOUT				;output the character
 11216                                  
 11217 0000165B 5E                      	POP	SI
 11218 0000165C 1F                      	POP	DS
 11219                                  
 11220                                  	;TEST	BYTE PTR [PFLAG],-1
 11221                                  	;retz
 11222 0000165D 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11223 00001663 74CF                    	JZ	SHORT CON_INPUT_RETN
 11224                                  
 11225 00001665 53                      	PUSH	BX
 11226 00001666 1E                      	PUSH	DS
 11227 00001667 56                      	PUSH	SI
 11228 00001668 BB0100                  	MOV	BX,1
 11229                                  	; 20/07/2018 - Retro DOS v3.0
 11230                                  	; MSDOS 3.3
 11231                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11232 0000166B E8D71E                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI
 11233                                  					;hkn; to sft entry
 11234 0000166E 7224                    	JC	SHORT TRIPOPJ
 11235                                  
 11236                                  	; 01/05/2019 - Retro DOS v4.0
 11237                                  
 11238                                  	;mov	bx,[si+5]
 11239 00001670 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11240                                  	;test	bx,8000h
 11241                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11242 00001673 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11243 00001676 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11244                                  	;;test	bx,80h
 11245                                  	;TEST	BX,devid_device 		; output to file?
 11246 00001678 F6C380                  	test	bl,devid_device ; 80h
 11247 0000167B 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11248                                  	; 14/03/2018
 11249                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11250                                  	;jc	short TRIPOPJ
 11251                                  	; MSDOS 2.11
 11252                                  	;test	byte [SI+18H], 80h
 11253                                  	;jz	short TRIPOPJ
 11254 0000167D BB0400                  	MOV	BX,4
 11255 00001680 E8C21E                  	CALL	GET_IO_SFT
 11256 00001683 720F                    	JC	SHORT TRIPOPJ
 11257                                  	;;test	word [si+5], 800h
 11258                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11259                                  	;test	byte [si+6],8 ; 08/11/2022
 11260 00001685 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11261                                  						; StdPrn redirected?
 11262                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11263                                  	;jz	LISSTRT2 ; 10/08/2018 
 11264                                  	; 16/12/2022
 11265 00001689 7503                    	jnz	short outch1
 11266 0000168B E98700                  	jmp	LISSTRT2
 11267                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11268                                  	;jz	short LISSTRT2J
 11269                                  outch1:
 11270                                  	;MOV	BYTE [PFLAG],0
 11271 0000168E 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11272                                  	; MSDOS 2.11
 11273                                  	;mov	bx,4
 11274                                  	;jmp	short LISSTRT2
 11275                                  	
 11276                                  TRIPOPJ:
 11277                                  	; 20/07/2018
 11278 00001694 E98100                  	JMP	TRIPOP
 11279                                  
 11280                                  	; 16/12/2022
 11281                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11282                                  ;LISSTRT2J:
 11283                                  ;	JMP	LISSTRT2
 11284                                  
 11285                                  CTRLOUT:
 11286 00001697 3C0D                    	CMP	AL,c_CR ; 0Dh
 11287 00001699 7420                    	JZ	SHORT ZERPOS
 11288 0000169B 3C08                    	CMP	AL,c_BS ; 8
 11289 0000169D 7424                    	JZ	SHORT BACKPOS
 11290 0000169F 3C09                    	CMP	AL,c_HT ; 9
 11291 000016A1 75A1                    	JNZ	SHORT OUTCH
 11292                                  	;MOV	AL,[CARPOS]
 11293 000016A3 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11294 000016A7 0CF8                    	OR	AL,0F8H
 11295 000016A9 F6D8                    	NEG	AL
 11296                                  TAB:
 11297 000016AB 51                      	PUSH	CX
 11298 000016AC 88C1                    	MOV	CL,AL
 11299 000016AE B500                    	MOV	CH,0
 11300 000016B0 E307                    	JCXZ	POPTAB
 11301                                  TABLP:
 11302 000016B2 B020                    	MOV	AL," "
 11303 000016B4 E880FF                  	CALL	OUTT
 11304 000016B7 E2F9                    	LOOP	TABLP
 11305                                  POPTAB:
 11306 000016B9 59                      	POP	CX
 11307                                  
 11308 000016BA C3                      	RETN
 11309                                  
 11310                                  ZERPOS:
 11311                                  	;MOV	BYTE PTR [CARPOS],0
 11312 000016BB 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11313                                  	; 10/08/2018
 11314 000016C1 EB81                    	JMP	short OUTCH ; 04/05/2019
 11315                                  	
 11316                                  	; 18/12/2022
 11317                                  ;OUTJ:	
 11318                                  	;JMP	OUTT
 11319                                  
 11320                                  BACKPOS:
 11321                                  	;DEC	BYTE PTR [CARPOS]
 11322 000016C3 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11323 000016C8 E979FF                  	JMP	OUTCH
 11324                                  
 11325                                  BUFOUT:
 11326 000016CB 3C20                    	CMP	AL," "
 11327 000016CD 7315                    	JAE	SHORT OUTJ		;Normal char
 11328 000016CF 3C09                    	CMP	AL,9
 11329 000016D1 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11330                                  	;DOS 3.3  7/14/86
 11331 000016D3 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11332 000016D5 740D                    	JZ	short CTRLU
 11333 000016D7 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11334 000016D9 7409                    	JZ	short CTRLU
 11335                                  NOT_CTRLU:
 11336                                  	;DOS 3.3  7/14/86
 11337 000016DB 50                      	PUSH	AX
 11338 000016DC B05E                    	MOV	AL,"^"
 11339 000016DE E856FF                  	CALL	OUTT		;Print '^' before control chars
 11340 000016E1 58                      	POP	AX
 11341 000016E2 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11342                                  CTRLU:
 11343                                  	;CALL	OUTT
 11344                                  	; 18/12/2022
 11345                                  OUTJ:
 11346 000016E4 E950FF                  	jmp	OUTT
 11347                                  ;BUFOUT_RETN:
 11348                                  	;RETN
 11349                                  
 11350                                  ;
 11351                                  ;----------------------------------------------------------------------------
 11352                                  ;
 11353                                  ;**	$STD_AUX_INPUT - System Call 3
 11354                                  ;
 11355                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11356                                  ;
 11357                                  ;	ENTRY	none
 11358                                  ;	EXIT	(al) = character
 11359                                  ;	USES	all
 11360                                  ;
 11361                                  ;----------------------------------------------------------------------------
 11362                                  ;
 11363                                  
 11364                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11365                                  
 11366                                  _$STD_AUX_INPUT:	;System call 3
 11367                                  
 11368 000016E7 E8F438                  	CALL	STATCHK
 11369 000016EA BB0300                  	MOV	BX,3
 11370 000016ED E8551E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11371                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11372                                  	;retc
 11373                                  	; 16/12/2022
 11374                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11375                                  	;JC	SHORT BUFOUT_RETN
 11376                                  	;JMP	SHORT TAISTRT
 11377                                  	; 07/12/2022
 11378 000016F0 7304                    	jnc	SHORT TAISTRT
 11379 000016F2 C3                      	retn	
 11380                                  
 11381                                  AUXILP:
 11382 000016F3 E8BA38                  	CALL	SPOOLINT
 11383                                  TAISTRT:
 11384 000016F6 B401                    	MOV	AH,1
 11385 000016F8 E8452C                  	CALL	IOFUNC
 11386 000016FB 74F6                    	JZ	SHORT AUXILP
 11387 000016FD 30E4                    	XOR	AH,AH
 11388                                  	; 16/12/2022
 11389                                  	;CALL	IOFUNC
 11390                                  	;RETN
 11391                                  	; 07/12/2022
 11392 000016FF E93E2C                  	jmp	IOFUNC
 11393                                  
 11394                                  ;
 11395                                  ;----------------------------------------------------------------------------
 11396                                  ;
 11397                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11398                                  ;
 11399                                  ;	ENTRY	(dl) = character
 11400                                  ;	EXIT	none
 11401                                  ;	USES	all
 11402                                  ;
 11403                                  ;----------------------------------------------------------------------------
 11404                                  ;
 11405                                  
 11406                                  _$STD_AUX_OUTPUT:	;System call 4
 11407                                  
 11408 00001702 53                      	PUSH	BX
 11409 00001703 BB0300                  	MOV	BX,3
 11410 00001706 EB04                    	JMP	SHORT SENDOUT
 11411                                  
 11412                                  ;
 11413                                  ;----------------------------------------------------------------------------
 11414                                  ;
 11415                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11416                                  ;
 11417                                  ;	ENTRY	(dl) = character
 11418                                  ;	EXIT	none
 11419                                  ;	USES	all
 11420                                  ;
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ;
 11423                                  
 11424                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11425                                  
 11426 00001708 53                      	PUSH	BX
 11427 00001709 BB0400                  	MOV	BX,4
 11428                                  
 11429                                  SENDOUT:
 11430 0000170C 88D0                    	MOV	AL,DL
 11431 0000170E 50                      	PUSH	AX
 11432 0000170F E8CC38                  	CALL	STATCHK
 11433 00001712 58                      	POP	AX
 11434 00001713 1E                      	PUSH	DS
 11435 00001714 56                      	PUSH	SI
 11436                                  LISSTRT2:
 11437 00001715 E8D0FE                  	CALL	RAWOUT2
 11438                                  TRIPOP:
 11439 00001718 5E                      	POP	SI
 11440 00001719 1F                      	POP	DS
 11441 0000171A 5B                      	POP	BX
 11442                                  SCIS_RETN:	; 20/07/2018
 11443 0000171B C3                      	RETN
 11444                                  ;
 11445                                  ;----------------------------------------------------------------------------
 11446                                  ;
 11447                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11448                                  ;
 11449                                  ;	Check console input status
 11450                                  ;
 11451                                  ;	ENTRY	none
 11452                                  ;	EXIT	AL = -1 character available, = 0 no character
 11453                                  ;	USES	all
 11454                                  ;
 11455                                  ;----------------------------------------------------------------------------
 11456                                  ;
 11457                                  
 11458                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11459                                  
 11460 0000171C E8BF38                  	CALL	STATCHK
 11461 0000171F B000                    	MOV	AL,0		; no xor!!
 11462                                  	;retz
 11463 00001721 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11464 00001723 0CFF                    	OR	AL,-1
 11465                                  ;SCIS_RETN:
 11466 00001725 C3                      	RETN
 11467                                  
 11468                                  ;
 11469                                  ;----------------------------------------------------------------------------
 11470                                  ;
 11471                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11472                                  ;
 11473                                  ;	Flush console input buffer and perform call in AL
 11474                                  ;
 11475                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11476                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11477                                  ;		return arguments for the fcn supplied in (AL)
 11478                                  ;	USES	all
 11479                                  ;
 11480                                  ;----------------------------------------------------------------------------
 11481                                  ;
 11482                                  
 11483                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11484                                  
 11485 00001726 50                      	PUSH	AX
 11486 00001727 52                      	PUSH	DX
 11487 00001728 31DB                    	XOR	BX,BX
 11488 0000172A E8181E                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11489                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11490 0000172D 7205                    	JC	SHORT BADJFNCON
 11491 0000172F B404                    	MOV	AH,4
 11492 00001731 E80C2C                  	CALL	IOFUNC
 11493                                  
 11494                                  BADJFNCON:
 11495 00001734 5A                      	POP	DX
 11496 00001735 58                      	POP	AX
 11497 00001736 88C4                    	MOV	AH,AL
 11498 00001738 3C01                    	CMP	AL,1
 11499 0000173A 7413                    	JZ	SHORT REDISPJ
 11500 0000173C 3C06                    	CMP	AL,6
 11501 0000173E 740F                    	JZ	SHORT REDISPJ
 11502 00001740 3C07                    	CMP	AL,7
 11503 00001742 740B                    	JZ	SHORT REDISPJ
 11504 00001744 3C08                    	CMP	AL,8
 11505 00001746 7407                    	JZ	SHORT REDISPJ
 11506 00001748 3C0A                    	CMP	AL,10
 11507 0000174A 7403                    	JZ	SHORT REDISPJ
 11508 0000174C B000                    	MOV	AL,0
 11509 0000174E C3                      	RETN
 11510                                  
 11511                                  REDISPJ:
 11512 0000174F FA                      	CLI
 11513                                  	;transfer REDISP
 11514 00001750 E934EC                  	JMP	REDISP
 11515                                  
 11516                                  ;============================================================================
 11517                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11518                                  ;============================================================================
 11519                                  ; 20/07/2018 - Retro DOS v3.0
 11520                                  ; 17/05/2019 - Retro DOS v4.0
 11521                                  
 11522                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11523                                  ;
 11524                                  ;	$GET_FCB_POSITION
 11525                                  ;	$FCB_DELETE
 11526                                  ;	$GET_FCB_FILE_LENGTH
 11527                                  ;	$FCB_CLOSE
 11528                                  ;	$FCB_RENAME
 11529                                  ;	SaveFCBInfo
 11530                                  ;	ResetLRU
 11531                                  ;	SetOpenAge
 11532                                  ;	LRUFCB
 11533                                  ;	FCBRegen
 11534                                  ;	BlastSFT
 11535                                  ;	CheckFCB
 11536                                  ;	SFTFromFCB
 11537                                  ;	FCBHardErr
 11538                                  ;
 11539                                  ;	Revision history:
 11540                                  ;
 11541                                  ;		Created: ARR 4 April 1983"
 11542                                  ;			 MZ  6 June  1983 completion of functions
 11543                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11544                                  ;					  times.  Change so successive closes work by
 11545                                  ;					  always returning OK.	Also, detect I/O to
 11546                                  ;					  already closed FCB and return EOF.
 11547                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11548                                  ;					  out of sft into FCB for reconnection
 11549                                  ;
 11550                                  ;		A000	 version 4.00  Jan. 1988
 11551                                  
 11552                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11553                                  ;----------------------------------------------------------------------------
 11554                                  ;
 11555                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11556                                  ;	extent and next record field and set the random record field to point
 11557                                  ;	to that record
 11558                                  ;
 11559                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11560                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11561                                  ;   Registers modified: all
 11562                                  ;
 11563                                  ;----------------------------------------------------------------------------
 11564                                  ;
 11565                                  
 11566                                  _$GET_FCB_POSITION:
 11567 00001753 E8C904                  	call	GetExtended		; point to FCB
 11568 00001756 E89A04                  	call	GetExtent		; DX:AX is current record
 11569                                  	;mov	[si+21h],ax
 11570 00001759 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11571                                  	;mov	[si+23h],dl
 11572 0000175C 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11573                                  	;cmp	word [si+0Eh],64
 11574 0000175F 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11575 00001763 7303                    	JAE	short GetFCBBye
 11576                                  	;mov	[si+24h],dh
 11577 00001765 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11578                                  GoodPath:	; 16/12/2022
 11579                                  GetFCBBye:
 11580 00001768 E9E6EE                  	jmp	FCB_RET_OK
 11581                                  
 11582                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11583                                  ;----------------------------------------------------------------------------
 11584                                  ;
 11585                                  ;**	$FCB_Delete - Delete from FCB Template
 11586                                  ;
 11587                                  ;	given an FCB, remove all directory entries in the current
 11588                                  ;	directory that have names that match the FCB's ?  marks.
 11589                                  ;
 11590                                  ;	ENTRY	(DS:DX) = address of FCB
 11591                                  ;	EXIT	entries matching the FCB are deleted
 11592                                  ;		(al) = ff iff no entries were deleted
 11593                                  ;	USES	all
 11594                                  ;
 11595                                  ;----------------------------------------------------------------------------
 11596                                  ;
 11597                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11598                                  
 11599                                  _$FCB_DELETE:		; System call 19
 11600                                  					; OpenBuf is in DOSDATA
 11601 0000176B BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11602                                  
 11603 0000176E E8DC51                  	call	TransFCB		; convert FCB to path
 11604 00001771 7207                    	JC	short BadPath 		; signal no deletions
 11605                                  
 11606 00001773 16                      	push	SS
 11607 00001774 1F                      	pop	DS			; SS is DOSDATA
 11608                                  
 11609 00001775 E82B0D                  	call	DOS_DELETE		; wham
 11610                                  	;JC	short BadPath
 11611                                  	; 16/12/2022
 11612 00001778 73EE                    	jnc 	short GoodPath
 11613                                  ;GoodPath:
 11614                                  ;	;jmp	FCB_RET_OK		; do a good return
 11615                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11616                                  ;	jmp	short GetFCBBye
 11617                                  
 11618                                  BadPath:
 11619                                  	; Error code is in AX
 11620                                  
 11621 0000177A E9D7EE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11622                                  
 11623                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11624                                  ;----------------------------------------------------------------------------
 11625                                  ;
 11626                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11627                                  ;	file in records (rounded up if partial).
 11628                                  ;
 11629                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11630                                  ;   Outputs:	Random record field updated to reflect the number of records
 11631                                  ;   Registers modified: all
 11632                                  ;
 11633                                  ;----------------------------------------------------------------------------
 11634                                  ;
 11635                                  	; 15/01/2024
 11636                                  
 11637                                  _$GET_FCB_FILE_LENGTH:
 11638                                  
 11639 0000177D E89F04                  	call	GetExtended		; get real FCB pointer
 11640                                  					; DX points to Input FCB
 11641                                  
 11642                                  					; OpenBuf is in DOSDATA
 11643 00001780 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11644                                  
 11645 00001783 1E                      	push	ds			; save pointer to true FCB
 11646 00001784 56                      	push	si
 11647 00001785 E8C551                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11648 00001788 5E                      	pop	si
 11649 00001789 1F                      	pop	ds
 11650 0000178A 72EE                    	JC	short BadPath
 11651 0000178C 1E                      	push	ds			; save pointer
 11652 0000178D 56                      	push	si
 11653 0000178E 16                      	push	ss		
 11654 0000178F 1F                      	pop	ds
 11655 00001790 E8F610                  	call	GET_FILE_INFO		; grab the info
 11656 00001793 5E                      	pop	si			; get pointer back
 11657 00001794 1F                      	pop	ds
 11658 00001795 72E3                    	JC	short BadPath 		; invalid something
 11659                                  	; 15/01/2024
 11660                                  	;MOV	DX,BX (*)		; get high order size
 11661                                  	;MOV	AX,DI (**)		; get low order size
 11662 00001797 89D8                    	mov	ax,bx ; hw of file size
 11663                                  	;
 11664                                  	;mov	bx,[si+0Eh]
 11665 00001799 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11666 0000179C 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11667 0000179E 7502                    	JNZ	short GetSize 		; not empty
 11668                                  	;MOV	BX,128
 11669 000017A0 B380                    	mov	bl,128	; 15/01/2024
 11670                                  GetSize:
 11671                                  	; 15/01/2024
 11672                                  	;MOV	DI,AX			; save low order word
 11673                                  	;MOV	AX,DX			; move high order for divide
 11674                                  	;xchg	ax,dx ; (*)
 11675                                  	; ax = hw of file size
 11676                                  
 11677 000017A2 31D2                    	XOR	DX,DX			; clear out high
 11678 000017A4 F7F3                    	DIV	BX			; wham
 11679 000017A6 50                      	PUSH	AX			; save dividend
 11680 000017A7 89F8                    	MOV	AX,DI ; (**)		; get low order piece
 11681 000017A9 F7F3                    	DIV	BX			; wham
 11682 000017AB 89D1                    	MOV	CX,DX			; save remainder
 11683 000017AD 5A                      	POP	DX			; get high order dividend
 11684 000017AE E306                    	JCXZ	LengthStore		; no roundup
 11685 000017B0 83C001                  	ADD	AX,1
 11686 000017B3 83D200                  	ADC	DX,0			; 32-bit increment
 11687                                  LengthStore:
 11688                                  	;mov	[si+21h],ax
 11689 000017B6 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11690                                  	;mov	[si+23h],dl
 11691 000017B9 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11692 000017BC 08F6                    	OR	DH,DH
 11693 000017BE 74A8                    	JZ	short GoodPath		; not storing insignificant zero
 11694                                  	;mov	[si+24h],dh
 11695 000017C0 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11696                                  	; 16/12/2022
 11697                                  GoodRet:
 11698                                  	;jmp	FCB_RET_OK
 11699 000017C3 EBA3                    	jmp	short GoodPath
 11700                                  
 11701                                  ;Break <$FCB_Close - close a file>
 11702                                  ;----------------------------------------------------------------------------
 11703                                  ;
 11704                                  ;   $FCB_Close - given an FCB, look up the SFN and close it. Do not free it
 11705                                  ;	as the FCB may be used for further I/O
 11706                                  ;
 11707                                  ;   Inputs:	DS:DX point to FCB
 11708                                  ;   Outputs:	AL = FF if file was not found on disk
 11709                                  ;   Registers modified: all
 11710                                  ;
 11711                                  ;----------------------------------------------------------------------------
 11712                                  ;
 11713                                  	; 16/01/2024
 11714                                  
 11715                                  _$FCB_CLOSE:		; System call 16
 11716                                  
 11717 000017C5 30C0                    	XOR	AL,AL			; default search attributes
 11718 000017C7 E85504                  	call	GetExtended		; DS:SI point to real FCB
 11719 000017CA 7403                    	JZ	short NoAttr		; not extended
 11720 000017CC 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11721                                  NoAttr:
 11722                                  					; SS override
 11723 000017CF 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11724 000017D3 E8B803                  	call	SFTFromFCB
 11725 000017D6 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11726                                  
 11727                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11728                                  	; there is no need to set the SFT's attribute.
 11729                                  
 11730                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11731                                  	;;; done
 11732                                  
 11733                                  	;mov	al,[es:di+4]
 11734 000017D8 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11735 000017DC 30E4                    	XOR	AH,AH
 11736 000017DE 50                      	PUSH	AX
 11737                                  
 11738                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11739                                  	;;; done
 11740                                  
 11741 000017DF E85559                  	call	CheckShare
 11742 000017E2 7508                    	JNZ	short NoStash
 11743 000017E4 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11744                                  	;mov	[es:di+4],al
 11745 000017E8 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11746                                  NoStash:
 11747                                  
 11748                                  ; 16/01/2024
 11749                                  %if 0
 11750                                  	;mov	ax,[si+14h]
 11751                                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11752                                  	;mov	[es:di+0Fh],ax
 11753                                  	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11754                                  	;mov	ax,[si+16h]
 11755                                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11756                                  	;mov	[es:di+0Dh],ax
 11757                                  	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11758                                  	;mov	ax,[si+10h]
 11759                                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11760                                  	;mov	[es:di+11h],ax
 11761                                  	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11762                                  	;mov	ax,[si+12h]
 11763                                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11764                                  	;mov	[es:di+13h],ax
 11765                                  	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11766                                  	;or	word [es:di+5],4000h
 11767                                  	; 17/12/2022
 11768                                  	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11769                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11770                                  %else
 11771                                  	; 16/01/2024 (PCDOS 7.1 IBMDOS.COM)
 11772 000017EC 1E                      	push	ds
 11773                                  	;lds	ax,[si+14h]
 11774 000017ED C54414                  	lds	ax,[si+SYS_FCB.FDATE]	; move in the time and date
 11775                                  	;mov	[es:di+0Fh],ax
 11776 000017F0 2689450F                	mov	[es:di+SF_ENTRY.sf_date],ax
 11777                                  	;mov	[es:di+0Dh],ds		
 11778 000017F4 268C5D0D                	mov	[es:di+SF_ENTRY.sf_time],ds
 11779 000017F8 1F                      	pop	ds
 11780                                  	;lds	ax,[si+10h]
 11781 000017F9 C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 11782                                  	;mov	[es:di+11h],ax
 11783 000017FC 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 11784                                  	;mov	[es:di+13h],ds
 11785 00001800 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 11786                                  	; 16/01/2024
 11787                                  	;;or	word [es:di+5],4000h
 11788                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 11789 00001804 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11790                                  %endif
 11791                                  
 11792 00001809 16                      	push	ss
 11793 0000180A 1F                      	pop	ds
 11794 0000180B E85F16                  	call	DOS_CLOSE	; wham
 11795 0000180E C43E[9E05]              	LES	DI,[THISSFT]
 11796                                  
 11797                                  	;;; 9/8/86 F.C. restore SFT attribute
 11798 00001812 59                      	POP	CX
 11799                                  	;mov	[es:di+4],cl
 11800 00001813 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11801                                  	;;; 9/8/86 F.C. restore SFT attribute
 11802                                  
 11803 00001817 9C                      	PUSHF
 11804                                  	;test	word [es:di],0FFFFh
 11805                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11806                                  				; zero ref count gets blasted
 11807 00001818 26833D00                	cmp	word [ES:DI],0
 11808 0000181C 7507                    	jnz     short CloseOK
 11809 0000181E 50                      	PUSH	AX
 11810 0000181F B04D                    	MOV	AL,'M' ; 4Dh
 11811 00001821 E8E802                  	call	BlastSFT
 11812 00001824 58                      	POP	AX
 11813                                  CloseOK:
 11814 00001825 9D                      	POPF
 11815 00001826 739B                    	JNC	short GoodRet
 11816                                  	;cmp	al,6
 11817 00001828 3C06                    	CMP	AL,error_invalid_handle
 11818 0000182A 7497                    	JZ	short GoodRet
 11819                                  	;mov	al,2
 11820 0000182C B002                    	MOV	AL,error_file_not_found
 11821                                  fren90:
 11822                                  	; 16/12/2022
 11823                                  fcb_close_err:
 11824 0000182E E923EE                  	jmp	FCB_RET_ERR
 11825                                  
 11826                                  ;
 11827                                  ;----------------------------------------------------------------------------
 11828                                  ;
 11829                                  ;**	$FCB_Rename - Rename a File
 11830                                  ;
 11831                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11832                                  ;	multiple files copying from the meta characters.
 11833                                  ;
 11834                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11835                                  ;		    name of the files to be renamed. Starting at offset 11h
 11836                                  ;		    in the FCB is the destination name.
 11837                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11838                                  ;		AL = FF -> some files may have been renamed but:
 11839                                  ;			rename to existing file or source file not found
 11840                                  ;	USES	ALL
 11841                                  ;
 11842                                  ;----------------------------------------------------------------------------
 11843                                  ;
 11844                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11845                                  
 11846                                  _$FCB_RENAME:		; System call 23
 11847                                  
 11848 00001831 E8EB03                  	call	GetExtended		; get pointer to real FCB
 11849 00001834 52                      	push	dx
 11850 00001835 8A04                    	MOV	AL,[SI] 		; get drive byte
 11851 00001837 83C610                  	ADD	SI,10h			; point to destination
 11852                                  
 11853                                  					; RenBuf is in DOSDATA
 11854 0000183A BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11855 0000183D FF34                    	push	word [SI]
 11856 0000183F 1E                      	push	ds
 11857                                  	;push	di			; save source pointer for TransFCB
 11858                                  	; 16/01/2024 - BugFix !
 11859 00001840 56                      	push	si
 11860 00001841 8804                    	MOV	[SI],AL			; drop in real drive
 11861 00001843 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11862 00001845 E80551                  	call	TransFCB		; munch this pathname
 11863 00001848 5E                      	pop	si
 11864 00001849 1F                      	pop	ds	
 11865 0000184A 8F04                    	pop	WORD [SI]		; get path back
 11866 0000184C 5A                      	pop	dx			; Original FCB pointer
 11867 0000184D 72DF                    	JC	short fren90		; bad path -> error
 11868                                  
 11869                                  					; SS override for WFP_Start & Ren_WFP
 11870 0000184F 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11871 00001854 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11872                                  
 11873                                  					; OpenBuf is in DOSDATA
 11874 00001859 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11875 0000185C E8EE50                  	call	TransFCB		; wham
 11876                                  					; NOTE that this call is pointing
 11877                                  					;  back to the ORIGINAL FCB so
 11878                                  					;  SATTRIB gets set correctly
 11879 0000185F 72CD                    	JC	short fren90		; error
 11880 00001861 E8130E                  	call	DOS_RENAME
 11881 00001864 72C8                    	JC	short fren90
 11882                                  	; 16/12/2022
 11883 00001866 E9E8ED                  	jmp	FCB_RET_OK
 11884                                  	
 11885                                  ;	Error -
 11886                                  ;
 11887                                  ;	(al) = error code
 11888                                  
 11889                                  	; 16/12/2022
 11890                                  ;fren90:	
 11891                                  ;	;jmp	FCB_RET_ERR
 11892                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11893                                  ;	jmp	short fcb_close_err
 11894                                  
 11895                                  ;Break <Misbehavior fixers>
 11896                                  ;
 11897                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11898                                  ;   user's space so he may move them at will. Second, they have a small
 11899                                  ;   reserved area that may be used for system information. Third, there was
 11900                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11901                                  ;   usage.
 11902                                  ;
 11903                                  ;   This results in the following misbehavior:
 11904                                  ;
 11905                                  ;	infinite opens of the same file:
 11906                                  ;
 11907                                  ;	While (TRUE) {			While (TRUE) {
 11908                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11909                                  ;	    Read (FCB); 		    Write (FCB);
 11910                                  ;	    }				    }
 11911                                  ;
 11912                                  ;	infinite opens of different files:
 11913                                  ;
 11914                                  ;	While (TRUE) {			While (TRUE) {
 11915                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11916                                  ;	    Read (FCB); 		    Write (FCB);
 11917                                  ;	    }				    }
 11918                                  ;
 11919                                  ;	multiple closes of the same file:
 11920                                  ;
 11921                                  ;	FCBOpen (FCB);
 11922                                  ;	while (TRUE)
 11923                                  ;	    FCBClose (FCB);
 11924                                  ;
 11925                                  ;	I/O after closing file:
 11926                                  ;
 11927                                  ;	FCBOpen (FCB);
 11928                                  ;	while (TRUE) {
 11929                                  ;	    FCBWrite (FCB);
 11930                                  ;	    FCBClose (FCB);
 11931                                  ;	    }
 11932                                  ;
 11933                                  ;   The following is am implementation of a methodology for emulating the
 11934                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11935                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11936                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11937                                  ;   the local machine.
 11938                                  ;
 11939                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11940                                  ;   structures depending on the file itself and the state of operations of the
 11941                                  ;   OS. The information contained in this reserved field is enough to
 11942                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11943                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11944                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11945                                  ;
 11946                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11947                                  ;
 11948                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11949                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11950                                  ;   regenerated.
 11951                                  ;
 11952                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11953                                  ;   longer available. We can make up for this by using the following
 11954                                  ;   information:
 11955                                  ;
 11956                                  ;	The Drive number (from the DPB).
 11957                                  ;	The physical sector of the directory that contains the entry.
 11958                                  ;	The relative position of the entry in the sector.
 11959                                  ;	The first cluster field.
 11960                                  ;	The last used SFT.
 11961                                  ;      OR In the case of a device FCB
 11962                                  ;	The low 6 bits of sf_flags (indicating device type)
 11963                                  ;	The pointer to the device header
 11964                                  ;
 11965                                  ;   We read in the particular directory sector and examine the indicated
 11966                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11967                                  ;
 11968                                  ;   Some key items need to be remembered:
 11969                                  ;
 11970                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11971                                  ;	information. We enforce good behavior on the FCBs.
 11972                                  ;
 11973                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11974                                  ;	open VCs. The VCs may be closed only at process termination.
 11975                                  ;
 11976                                  ;	If this is not an installed version of the DOS, file sharing will
 11977                                  ;	always be present.
 11978                                  ;
 11979                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11980                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11981                                  ;
 11982                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11983                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11984                                  ;	proper OI record.
 11985                                  ;
 11986                                  ;   The test bits are:
 11987                                  ;
 11988                                  ;	00 -> local file
 11989                                  ;	40 -> sharing local
 11990                                  ;	80 -> network
 11991                                  ;	C0 -> local device
 11992                                  
 11993                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11994                                  ;----------------------------------------------------------------------------
 11995                                  ;
 11996                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11997                                  ;	pieces of information into the FCB to allow for subsequent
 11998                                  ;	regeneration. Poke LRU also.
 11999                                  ;
 12000                                  ;   Inputs:	ThisSFT points to a complete SFT.
 12001                                  ;		DS:SI point to the FCB (not an extended one)
 12002                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 12003                                  ;		DS:SI preserved
 12004                                  ;		ES:DI point to sft
 12005                                  ;   Registers modified: All
 12006                                  ;
 12007                                  ;
 12008                                  ;----------------------------------------------------------------------------
 12009                                  ;
 12010                                  	; 20/01/2024
 12011                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12012                                  
 12013                                  SaveFCBInfo:
 12014                                  
 12015 00001869 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 12016 0000186E E8D6F9                  	call	IsSFTNet
 12017 00001871 740B                    	JZ	short SaveLocal		; if not network then save local info
 12018                                  ;
 12019                                  ;----- In net support -----
 12020                                  ;
 12021                                  	; 17/05/2019 - Retro DOS v4.0
 12022                                  
 12023                                  	; MSDOS 3.3
 12024                                  	;;mov	ax,[es:di+1Dh]
 12025                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 12026                                  	;;mov	[si+1Ah],ax
 12027                                  	;mov	[si+fcb_net_handle],ax
 12028                                  	;push	es
 12029                                  	;push	di
 12030                                  	;;les	di,[es:di+19h]
 12031                                  	;LES	DI,[ES:DI+sf_netid]
 12032                                  	;;mov	[si+1Ch],di
 12033                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 12034                                  	;;mov 	[si+1Eh],es
 12035                                  	;MOV	[SI+fcb_netID+2],ES
 12036                                  	;pop	di
 12037                                  	;pop	es
 12038                                  
 12039                                  	; MSDOS 6.0
 12040                                  	;mov	ax,[es:di+0Bh]
 12041 00001873 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 12042                                  	;mov	[si+1Ch],ax
 12043 00001877 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 12044                                  	
 12045                                  	;mov	bl,80h
 12046 0000187A B380                    	MOV	BL,FCBNETWORK
 12047                                  ;
 12048                                  ;----- END In net support -----
 12049                                  ;
 12050 0000187C EB63                    	jmp	SHORT SaveSFN
 12051                                  
 12052                                  SaveLocal:
 12053                                  	;IF	Installed
 12054 0000187E E8B658                  	call	CheckShare
 12055                                  	;JZ	short SaveNoShare	; no sharer
 12056                                  	;JMP	short SaveShare		; sharer present
 12057                                  	; 16/12/2022
 12058                                  	; 28/07/2019
 12059 00001881 7559                    	jnz	short SaveShare
 12060                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12061                                  	;JZ	short SaveNoShare	; no sharer
 12062                                  	;JMP	short SaveShare		; sharer present
 12063                                  
 12064                                  SaveNoShare:
 12065                                  	;;test 	word [es:di+5],80h
 12066                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 12067 00001883 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 12068 00001888 7542                    	JNZ	short SaveNoShareDev	; Device
 12069                                  
 12070                                  	; Save no sharing local file information
 12071                                  
 12072                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 12073                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 12074 0000188A 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 12075                                  	;mov	[si+1Dh],ax
 12076 0000188E 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 12077                                  
 12078                                  	; MSDOS 6.0
 12079                                  
 12080                                  	;SR; Store high byte of directory sector
 12081                                  	;mov	ax,[es:di+1Dh]
 12082 00001891 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 12083                                  	
 12084                                  	; SR;
 12085                                  	; We have to store the read-only and archive attributes of the file.
 12086                                  	; We extract it from the SFT and store it in the top two bits of the 
 12087                                  	; sector number ( sector number == 22 bits only )
 12088                                  
 12089                                  	;mov	bl,[es:di+4]
 12090 00001895 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 12091 00001899 88DF                    	mov	bh,bl
 12092 0000189B D0CB                    	ror	bl,1
 12093 0000189D D0E7                    	shl	bh,1
 12094 0000189F 08FB                    	or	bl,bh
 12095 000018A1 80E3C0                  	and	bl,0C0h
 12096 000018A4 08D8                    	or	al,bl
 12097                                  	;mov	[si+18h],al ; 08/11/2022
 12098 000018A6 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 12099                                  
 12100                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12101                                  	;mov	al,[es:di+1Fh]
 12102 000018A9 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 12103                                  	;mov	[si+1Fh],al
 12104 000018AD 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 12105                                  	;mov	ax,[es:di+0Bh]
 12106 000018B0 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 12107                                  	;mov	[si+1Bh],ax
 12108 000018B4 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 12109 000018B7 B300                    	MOV	BL,0
 12110                                  
 12111                                  	; Create the bits field from the dirty/device bits of the flags word 
 12112                                  	; and the mode byte
 12113                                  
 12114                                  SetFCBBits:
 12115                                  	;mov	ax,[es:di+5]
 12116 000018B9 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12117 000018BD 24C0                    	AND	AL,0C0h 		; mask off drive bits
 12118                                  	;or	al,[es:di+2]
 12119 000018BF 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 12120                                  	;mov	[si+1Ah], al
 12121 000018C3 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 12122                                  
 12123                                  	; MSDOS 6.0
 12124                                  	
 12125                                  	; SR;
 12126                                  	; Check if we came here for local file or device. If for local file, 
 12127                                  	; skip setting of SFT index
 12128                                  	
 12129 000018C6 08DB                    	or	bl,bl
 12130 000018C8 7428                    	jz	short SaveNoSFN		; do not save SFN if local file
 12131                                  
 12132 000018CA EB15                    	JMP	short SaveSFN 		; go and save SFN
 12133                                  
 12134                                  	; Save no sharing local device information
 12135                                  
 12136                                  SaveNoShareDev:
 12137                                  	; 20/01/2024
 12138                                  	;;mov	ax,[es:di+7]
 12139                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 12140                                  	;;mov	[si+1Ah],ax
 12141                                  	;MOV	[SI+fcb_nsld_drvptr],AX
 12142                                  	;;mov	ax,[es:di+9]
 12143                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 12144                                  	;MOV	[SI+fcb_nsld_drvptr+2],AX
 12145                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12146 000018CC 06                      	push	es
 12147 000018CD 26C44507                	les	ax,[es:di+SF_ENTRY.sf_devptr]
 12148 000018D1 89441A                  	mov	[si+fcb_nsld_drvptr],ax
 12149 000018D4 8C441C                  	mov	[si+fcb_nsld_drvptr+2],es
 12150 000018D7 07                      	pop	es
 12151                                  	
 12152                                  	;mov	bl,40h
 12153 000018D8 B340                    	MOV	BL,FCBDEVICE
 12154                                  	; 28/12/2022
 12155 000018DA EBDD                    	JMP	short SetFCBBits	; go and save SFN
 12156                                  
 12157                                  SaveShare:
 12158                                  	;ENDIF
 12159                                  
 12160                                  ;----- In share support -----
 12161                                  
 12162                                  	;call	far [ss:ShSave]
 12163 000018DC 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 12164                                  
 12165                                  ;----- end in share support -----
 12166                                  
 12167                                  	; 17/05/2019
 12168                                  
 12169                                  SaveSFN:
 12170                                  	;lea	ax,[di-6]
 12171 000018E1 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 12172                                  	
 12173                                  	; Adjust for offset to table.
 12174                                  	
 12175 000018E4 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 12176                                  
 12177 000018E9 53                      	push	bx			;bx = FCB type (net/Share or local)
 12178                                  	;;mov	bl,53 ; MSDOS 3.3
 12179                                  	;mov	bl,59 ; MSDOS 6.0
 12180 000018EA B33B                    	MOV	BL,SF_ENTRY.size
 12181 000018EC F6F3                    	DIV	BL
 12182                                  	;mov	[si+18h],al
 12183 000018EE 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 12184 000018F1 5B                      	pop	bx			;restore bx
 12185                                  
 12186                                  SaveNoSFN:
 12187                                  	;mov	ax,[es:di+5]
 12188 000018F2 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12189 000018F6 243F                    	AND	AL,3Fh			; get real drive
 12190 000018F8 08D8                    	OR	AL,BL
 12191                                  	;mov	[si+19h],al
 12192 000018FA 884419                  	MOV	[SI+fcb_l_drive],AL
 12193                                  
 12194 000018FD 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 12195 00001901 40                      	INC	AX
 12196                                  	;mov	[es:di+15h],ax
 12197 00001902 26894515                	MOV	[ES:DI+sf_LRU],AX
 12198 00001906 7506                    	JNZ	short SimpleStuff
 12199                                  	
 12200                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 12201                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 12202                                  	
 12203                                  	;mov	bx,15h
 12204 00001908 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 12205 0000190B E80500                  	call	ResetLRU
 12206                                  
 12207                                  	; Set new LRU to AX
 12208                                  SimpleStuff:
 12209 0000190E 36A3[1000]              	MOV	[SS:FCBLRU],AX
 12210 00001912 C3                      	retn
 12211                                  
 12212                                  ;Break	<ResetLRU - reset overflowed lru counts>
 12213                                  ;----------------------------------------------------------------------------
 12214                                  ;
 12215                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 12216                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 12217                                  ;   at 0.
 12218                                  ;
 12219                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 12220                                  ;		ES:DI point to SFT currently being updated
 12221                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 12222                                  ;		AX has 8000h
 12223                                  ;   Registers modified: none
 12224                                  ;
 12225                                  ;----------------------------------------------------------------------------
 12226                                  ;
 12227                                  
 12228                                  	; 17/05/2019 - Retro DOS v4.0
 12229                                  ResetLRU:
 12230                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 12231                                  	; DOSDATA
 12232                                  
 12233 00001913 B80080                  	MOV	AX,8000h
 12234 00001916 06                      	push	es
 12235 00001917 57                      	push	di
 12236                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 12237 00001918 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 12238                                  	;mov	cx,[es:di+4]
 12239 0000191D 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 12240                                  	;lea	di,[di+6]
 12241 00001921 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 12242                                  ovScan:
 12243 00001924 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 12244 00001927 7703                    	JA	short ovLoop
 12245 00001929 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 12246                                  ovLoop:
 12247                                  	;;add	di,53	; MSDOS 3.3
 12248                                  	;add	di,59	; MSDOS 6.0	
 12249 0000192C 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 12250 0000192F E2F3                    	LOOP	ovScan
 12251 00001931 5F                      	pop	di
 12252 00001932 07                      	pop	es
 12253 00001933 268901                  	MOV	[ES:DI+BX],AX
 12254 00001936 C3                      	retn
 12255                                  
 12256                                  ;IF  0  ; We dont need this routine any more.
 12257                                  ;
 12258                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12259                                  ;----------------------------------------------------------------------------
 12260                                  ;
 12261                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12262                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12263                                  ;   count here and fill in the appropriate field.
 12264                                  ;
 12265                                  ;   Inputs:	ES:DI point to SFT
 12266                                  ;   Outputs:	ES:DI has the open age field filled in.
 12267                                  ;		If open age has wraparound, we will have subtracted 8000h
 12268                                  ;		    from all open ages.
 12269                                  ;   Registers modified: AX
 12270                                  ;
 12271                                  ;----------------------------------------------------------------------------
 12272                                  ;
 12273                                  ;SetOpenAge:
 12274                                  ;	; 20/07/2018 - Retro DOS v3.0
 12275                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12276                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12277                                  ;
 12278                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12279                                  ;
 12280                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12281                                  ;	INC	AX
 12282                                  ;	;mov	[es:di+17h],ax
 12283                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12284                                  ;	JNZ	short SetDone
 12285                                  ;	;mov	bx,17h
 12286                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12287                                  ;	call	ResetLRU
 12288                                  ;SetDone:
 12289                                  ;	MOV	[CS:OpenLRU],AX
 12290                                  ;	retn
 12291                                  ;
 12292                                  ;ENDIF	; SetOpenAge no longer needed
 12293                                  
 12294                                  ; 21/07/2018 - Retro DOS v3.0
 12295                                  ; LRUFCB for MSDOS 6.0 !
 12296                                  
 12297                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12298                                  ;----------------------------------------------------------------------------
 12299                                  ;
 12300                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12301                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12302                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12303                                  ;
 12304                                  ;   Inputs:	none
 12305                                  ;   Outputs:	ES:DI point to SFT
 12306                                  ;		ThisSFT points to SFT
 12307                                  ;		SFT is zeroed
 12308                                  ;		Carry set of closes failed
 12309                                  ;   Registers modified: none
 12310                                  ;
 12311                                  ;----------------------------------------------------------------------------
 12312                                  ;
 12313                                  ; MSDOS 6.0
 12314                                  ;IF 0	; rewritten this routine
 12315                                  ;
 12316                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12317                                  ;	call	save_world
 12318                                  ;	
 12319                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12320                                  ; to find the lease recently used one that is younger than the open age.  We
 12321                                  ; operate be scanning the list n times finding the least age that is greater
 12322                                  ; or equal to the previous minimum age.
 12323                                  ;
 12324                                  ;   BP is the count of times we need to go through this loop.
 12325                                  ;   AX is the current acceptable minimum age to consider
 12326                                  ;
 12327                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12328                                  ;	XOR	AX,AX			; low = 0;
 12329                                  ;
 12330                                  ; If we've scanned the table n times, then we are done.
 12331                                  ;
 12332                                  ;lru1:
 12333                                  ;	CMP	bp,0			; while (k--) {
 12334                                  ;	JZ	short lru75
 12335                                  ;	DEC	bp
 12336                                  ;
 12337                                  ; Set up for scan.
 12338                                  ;
 12339                                  ;   AX is the minimum age for consideration
 12340                                  ;   BX is the minimum age found during the scan
 12341                                  ;   SI is the position of the entry that corresponds to BX
 12342                                  ;
 12343                                  ;	MOV	BX,-1			;     min = 0xffff;
 12344                                  ;	MOV	si,BX			;     pos = 0xffff;
 12345                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12346                                  ;	;mov	cx,[es:di+4]
 12347                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12348                                  ;	;lea	di,[di+6]
 12349                                  ;	LEA	DI,[DI+SFT.SFTable]
 12350                                  ;
 12351                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12352                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12353                                  ; are done.  In both cases, we use the found entry.
 12354                                  ;
 12355                                  ;lru2:
 12356                                  ;	cmp	word [es:di],0
 12357                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12358                                  ;	jz	short lru25
 12359                                  ;	;cmp	word [es:di],-1
 12360                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 12361                                  ;	cmp	word [es:di],sf_busy
 12362                                  ;	jnz	short lru3
 12363                                  ;
 12364                                  ; The entry is usable without further scan.  Go and use it.
 12365                                  ;
 12366                                  ;lru25:
 12367                                  ;	MOV	si,DI			;	      pos = i;
 12368                                  ;	JMP	short lru11		;	      goto got;
 12369                                  ;
 12370                                  ; See if the entry is for the network or for the sharer.
 12371                                  ;
 12372                                  ;  If for the sharer or network then
 12373                                  ;	if the age < current minimum AND >= allowed minimum then
 12374                                  ;	    this entry becomes current minimum
 12375                                  ;
 12376                                  ;lru3:
 12377                                  ;	;test	word [es:di+5],8000h
 12378                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12379                                  ;					;	  if (!net[i]
 12380                                  ;	JNZ	short lru35
 12381                                  ;if installed
 12382                                  ;	call	CheckShare		;		&& !sharing)
 12383                                  ;	JZ	short lru5		;	  else
 12384                                  ;ENDIF
 12385                                  ;
 12386                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12387                                  ; current minimum.
 12388                                  ;
 12389                                  ;lru35:
 12390                                  ;	;mov	dx,[es:di+17h]
 12391                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12392                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12393                                  ;	JB	short lru5
 12394                                  ;	CMP	DX,BX
 12395                                  ;	JAE	short lru5		;	      age[i] < min) {
 12396                                  ;
 12397                                  ; entry is new minimum.  Remember his age.
 12398                                  ;
 12399                                  ;	mov	bx,DX			;	      min = age[i];
 12400                                  ;	mov	si,di			;	      pos = i;
 12401                                  ;
 12402                                  ; End of loop.	gp back for more
 12403                                  ;
 12404                                  ;lru5:
 12405                                  ;	;add	di,53
 12406                                  ;	add	di,SF_ENTRY.size
 12407                                  ;	loop	lru2			;	      }
 12408                                  ;
 12409                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12410                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12411                                  ; complete.  Go find LRU.
 12412                                  ;
 12413                                  ;lru6:	
 12414                                  ;	cmp	si,-1			; position not -1?
 12415                                  ;	jz	short lru75		; no, done with everything
 12416                                  ;	lea	ax,[bx+1]		; set new threshold age
 12417                                  ;	jmp	short lru1		; go and loop for more
 12418                                  ;lru65:	
 12419                                  ;	stc
 12420                                  ;	jmp	short LRUDead		;	  return -1;
 12421                                  ;
 12422                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12423                                  ; network entry. We now make a second pass through to find the LRU entry
 12424                                  ; that is local-no-share or has age >= AX
 12425                                  ;
 12426                                  ;lru75:
 12427                                  ;	mov	bx,-1			; min = 0xffff;
 12428                                  ;	mov	si,bx			; pos = 0xffff;
 12429                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12430                                  ;	;mov	cx,[es:di+4]
 12431                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12432                                  ;	;lea	di,[di+6]
 12433                                  ;	LEA	DI,[DI+SFT.SFTable]
 12434                                  ;
 12435                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12436                                  ; then check for lru.
 12437                                  ;
 12438                                  ;lru8:
 12439                                  ;	;test	word [es:di+5],8000h
 12440                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12441                                  ;	jnz	short lru85		; is for network, go check age
 12442                                  ;	call	CheckShare		; sharer here?
 12443                                  ;	jz	short lru86		; no, go check lru
 12444                                  ;
 12445                                  ; Network or sharer.  Check age
 12446                                  ;
 12447                                  ;lru85:
 12448                                  ;	;cmp	[es:di+17h],ax
 12449                                  ;	cmp	[es:di+sf_OpenAge],ax
 12450                                  ;	jb	short lru9		; age is before threshold, skip it
 12451                                  ;
 12452                                  ; Check LRU
 12453                                  ;
 12454                                  ;lru86:
 12455                                  ;	;cmp	[es:di+15h],bx
 12456                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12457                                  ;	jae	short lru9		; no, skip this
 12458                                  ;	mov	si,di			; remember position
 12459                                  ;	;mov	bx,[es:di+15h]
 12460                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12461                                  ;
 12462                                  ; Done with this entry, go back for more.
 12463                                  ;
 12464                                  ;lru9:
 12465                                  ;	;add	di, 53
 12466                                  ;	add	di,SF_ENTRY.size
 12467                                  ;	loop	lru8
 12468                                  ;
 12469                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12470                                  ; out. The conditions here are:
 12471                                  ;
 12472                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12473                                  ;
 12474                                  ;lru10:
 12475                                  ;	cmp	si,-1			; if no one f
 12476                                  ;	jz	short lru65		;     return -1;
 12477                                  ;lru11:
 12478                                  ;	mov	di,si
 12479                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12480                                  ;	MOV	[CS:THISSFT+2],ES
 12481                                  ;
 12482                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12483                                  ; is 0.
 12484                                  ;
 12485                                  ;	;test	word [es:di+5],8000h
 12486                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12487                                  ;	JNZ	short LRUClose
 12488                                  ;IF INSTALLED
 12489                                  ;	call	CheckShare
 12490                                  ;	JZ	short LRUDone
 12491                                  ;ENDIF
 12492                                  ;
 12493                                  ; Repeat close until ref count is 0
 12494                                  ;
 12495                                  ;LRUClose:
 12496                                  ;	push	ss
 12497                                  ;	pop	ds
 12498                                  ;	LES	DI,[THISSFT]
 12499                                  ;	cmp     word [es:di],0
 12500                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12501                                  ;	JZ	short LRUDone 		; nope, all done
 12502                                  ;	call	DOS_CLOSE
 12503                                  ;	jnc	short LRUClose		; no error => clean up
 12504                                  ;	;cmp	al,6
 12505                                  ;	cmp	al,error_invalid_handle
 12506                                  ;	jz	short LRUClose
 12507                                  ;	stc
 12508                                  ;	JMP	short LRUDead
 12509                                  ;LRUDone:
 12510                                  ;	XOR	AL,AL
 12511                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12512                                  ;
 12513                                  ;LRUDead:
 12514                                  ;	call	restore_world
 12515                                  ;	LES     DI,[CS:THISSFT]
 12516                                  ;	jnc	short LRUFCB_retn
 12517                                  ;LRUFCB_err:
 12518                                  ;	; mov	al, 23h	
 12519                                  ;	MOV	AL,error_FCB_unavailable
 12520                                  ;LRUFCB_retn:	
 12521                                  ;	retn:
 12522                                  ;
 12523                                  ;ENDIF	; LRUFCB has been rewritten below.
 12524                                  
 12525                                  ; 17/05/2019 - Retro DOS v4.0
 12526                                  ; LRUFCB for MSDOS 6.0 !
 12527                                  ;----------------------------------------------------------------------------
 12528                                  ;
 12529                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12530                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12531                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12532                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12533                                  ; optimize regeneration operations by keeping track of the current local
 12534                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12535                                  ; local SFT in the SFT Block.
 12536                                  ;
 12537                                  ; Inputs: al = 0 => Regenerate SFT operation
 12538                                  ;	    = 1 => Allocate new SFT for Open/Create
 12539                                  ;
 12540                                  ; Outputs: Carry clear
 12541                                  ;	 	es:di = Address of allocated SFT
 12542                                  ;	  	ThisSFT = Address of allocated SFT
 12543                                  ;
 12544                                  ;	  carry set if closes of net/Share files failed 
 12545                                  ;		al = error_FCB_unavailable
 12546                                  ;
 12547                                  ; Registers affected: None
 12548                                  ;
 12549                                  ;----------------------------------------------------------------------------
 12550                                  
 12551                                  ;LruFCB	PROC	NEAR
 12552                                  LRUFCB:
 12553                                  	; 17/05/2019 - Retro DOS v4.0
 12554                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12555                                  
 12556                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12557                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12558                                  
 12559                                  	; 20/01/2024
 12560                                  
 12561 00001937 06                      	push	es	; * (MSDOS 6.21)
 12562                                  	
 12563 00001938 E82BEB                  	call	save_world
 12564                                  	
 12565                                  	;getdseg <ds>		;ds = DOSDATA
 12566 0000193B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12567                                  
 12568 00001940 08C0                    	or	al,al		;Check if regenerate allocation
 12569 00001942 7516                    	jnz	short lru1	;Try to find SFT to use
 12570                                  
 12571                                  	; This is a regen call. If LocalSFT contains the address of a valid
 12572                                  	; local SFT, just return that SFT to reuse
 12573                                  
 12574                                  	; 20/01/2024
 12575                                  	;mov	di,[LocalSFT]
 12576                                  	;or	di,[LocalSFT+2]	;is address == 0?
 12577                                  	;jz	short lru1	;invalid local SFT, find one
 12578                                  
 12579                                  	; We have found a valid local SFT. Recycle this SFT
 12580                                  
 12581 00001944 C43E[5D10]              	les	di,[LocalSFT]
 12582                                  
 12583                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12584 00001948 8CC1                    	mov	cx,es
 12585 0000194A 09F9                    	or	cx,di		; is address == 0?
 12586 0000194C 740C                    	jz	short lru1	; invalid local SFT, find one
 12587                                  
 12588                                  gotlocalSFT:
 12589 0000194E 893E[9E05]              	mov	[THISSFT],di
 12590 00001952 8C06[A005]              	mov	[THISSFT+2],es
 12591 00001956 F8                      	clc
 12592 00001957 E9A900                  	jmp	LRUDone		;clear up SFT and return
 12593                                  
 12594                                  lru1:
 12595 0000195A C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12596                                  	;mov	cx,[es:di+4]
 12597 0000195E 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12598                                  	;lea	di,[di+6]
 12599 00001962 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12600                                  
 12601                                  	; We scan through all the SFTs scanning for a free one. It also 
 12602                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately.
 12603                                  	; bx = min. LRU for local SFTs
 12604                                  	; si = pos. of local SFT with min. LRU
 12605                                  	; dx = min. LRU for net/Share SFTs
 12606                                  	; bp = pos. of net/Share SFT with min. LRU
 12607                                  
 12608 00001965 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12609 00001968 89DE                    	mov	si,bx
 12610 0000196A 89DA                    	mov	dx,bx
 12611 0000196C 89DD                    	mov	bp,bx
 12612                                  
 12613                                  findSFT:
 12614                                  	;See if this SFT is a free one. If so, return it
 12615 0000196E 26830D00                	or	word [es:di],0
 12616                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12617 00001972 744C                    	jz	short gotSFT	;yes, SFT is free
 12618                                  	;;cmp	word [es:di],-1
 12619                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12620 00001974 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12621 00001978 7446                    	jz	short gotSFT	;no, can use it
 12622                                  
 12623                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12624                                  	; used for a later regen.
 12625                                  
 12626                                  	; 16/12/2022
 12627                                  	; 08/11/2022
 12628                                  	;test	byte [es:di+6],80h
 12629 0000197A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12630                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12631                                  	;;test	word [es:di+5],8000h
 12632                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12633 0000197F 7531                    	jnz	short lru5	;yes, get net/Share LRU
 12634                                  
 12635                                  ;IF installed
 12636 00001981 E8B357                  	call	CheckShare	;Share present?
 12637                                  ;ENDIF
 12638 00001984 752C                    	jnz	short lru5	;yes, get net/Share LRU
 12639                                  
 12640                                  	;Local SFT, register its address
 12641                                  
 12642                                  	; !!HACK!!!
 12643                                  	; There is a slightly dirty hack out here in a desperate bid to save
 12644                                  	; code space. There is similar code duplicated at label 'gotSFT'. We
 12645                                  	; enter from there if al = 0, update the LocalSFT variable, and since
 12646                                  	; al = 0, we jump out of the loop to the exit point. I have commented
 12647                                  	; out the code that previously existed at label 'gotSFT'
 12648                                  
 12649                                  hackpoint:
 12650 00001986 893E[5D10]              	mov	[LocalSFT],di
 12651 0000198A 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12652                                  
 12653 0000198E 08C0                    	or	al,al		;Is operation = REGEN?
 12654 00001990 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12655                                  
 12656                                  	;Get LRU for local files
 12657                                  	
 12658                                  	;cmp	[es:di+15h],bx
 12659 00001992 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12660 00001996 7306                    	jae	short lru4	;no, skip
 12661                                  
 12662                                  	;mov	bx,[es:di+15h]
 12663 00001998 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12664 0000199C 89FE                    	mov	si,di		;store SFT position
 12665                                  lru4:
 12666                                  	;add	di,59
 12667 0000199E 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12668 000019A1 E2CB                    	loop	findSFT
 12669                                  	
 12670                                  	; 20/01/2024
 12671 000019A3 49                      	dec	cx ; -1
 12672                                  
 12673                                  	; Check whether we got a net/Share or local SFT. If local SFT
 12674                                  	; available, we will reuse it instead of net/Share LRU
 12675                                  
 12676 000019A4 89F7                    	mov	di,si
 12677                                  	;cmp	si,-1		;local SFT available?
 12678 000019A6 39CE                    	cmp	si,cx ; 20/01/2024
 12679 000019A8 7516                    	jnz	short gotSFT	;yes, return it
 12680                                  
 12681                                  	;No local SFT, see if we got a net/Share SFT
 12682                                  
 12683 000019AA 89EF                    	mov	di,bp
 12684                                  
 12685 000019AC 39CD                    	cmp	bp,cx ; -1 ; 20/01/2024
 12686                                  	;cmp	bp,-1		;net/Share SFT available?
 12687 000019AE 752D                    	jnz	short gotnetSFT	;yes, return it
 12688                                  noSFT:
 12689                                  	; NB: This error should never occur. We always must have an LRU SFT.
 12690                                  	; This error can occur only if the SFT has been corrupted or the LRU
 12691                                  	; count is not maintained properly.
 12692                                  
 12693 000019B0 EB4E                    	jmp	short errorbadSFT ;error, no FCB available.
 12694                                  
 12695                                  	; Handle the LRU for net/Share SFTs
 12696                                  lru5:
 12697                                  	;cmp	[es:di+15h],dx
 12698 000019B2 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12699 000019B6 73E6                    	jae	short lru4	;no, skip
 12700                                  
 12701                                  	;mov	dx,[es:di+15h]
 12702 000019B8 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12703                                  
 12704 000019BC 89FD                    	mov	bp,di		;store SFT position
 12705 000019BE EBDE                    	jmp	short lru4	;continue with next SFT
 12706                                  
 12707                                  gotSFT:
 12708 000019C0 08C0                    	or	al,al
 12709 000019C2 74C2                    	jz	short hackpoint	;save es:di in LocalSFT
 12710                                  
 12711                                  	; HACK!!!
 12712                                  	; The code here differs from the code at 'hackpoint' only in the
 12713                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint'
 12714                                  	; and then from there jump out to 'gotlocalSFT'. The original code
 12715                                  	; has been commented out below and replaced by the code just above.
 12716                                  
 12717                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12718                                  ;
 12719                                  ;	or	al,al		  ;Regen?
 12720                                  ;	jnz	short notlocaluse ;yes, register it and return
 12721                                  ;
 12722                                  ;Register this SFT as a local one
 12723                                  ;
 12724                                  ;	mov	[LocalSFT],di
 12725                                  ;	mov	[LocalSFT+2],es
 12726                                  ;	jmp	gotlocalSFT	;return to caller
 12727                                  ;
 12728                                  ;notlocaluse:
 12729                                  
 12730                                  	; The caller is probably going to use this SFT for a net/Share file.
 12731                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN)
 12732                                  	; does not really know whether it is a local file or not. We
 12733                                  	; invalidate LocalSFT if the SFT we are going to use was previously
 12734                                  	; registered as a local SFT that can be recycled.
 12735                                  
 12736 000019C4 8CC0                    	mov	ax,es
 12737 000019C6 393E[5D10]              	cmp	[LocalSFT],di		;Offset same?
 12738 000019CA 750E                    	jne	short notinvalid
 12739 000019CC 3906[5F10]              	cmp	[LocalSFT+2],ax		;Segments same?
 12740                                  	;je	short zerolocalSFT	;no, no need to invalidate
 12741                                  	; 20/01/2024 (PCDOS 7.1 IBMDOS.COM)
 12742 000019D0 7508                    	jne	short notinvalid
 12743                                  zerolocalSFT:	
 12744 000019D2 31C0                    	xor	ax,ax ; 0
 12745 000019D4 A3[5D10]                	mov	[LocalSFT],ax
 12746 000019D7 A3[5F10]                	mov	[LocalSFT+2],ax
 12747                                  	
 12748                                  notinvalid:
 12749 000019DA E971FF                  	jmp	gotlocalSFT
 12750                                  
 12751                                  	; The SFT we are going to use was registered in the LocalSFT variable.
 12752                                  	; Invalidate this variable i.e LocalSFT = NULL
 12753                                  
 12754                                  ;zerolocalSFT:
 12755                                  	;xor	ax,ax ; 0
 12756                                  	;mov	[LocalSFT],ax
 12757                                  	;mov	[LocalSFT+2],ax
 12758                                  	;
 12759                                  	;jmp	gotlocalSFT
 12760                                  
 12761                                  gotnetSFT:
 12762                                  	; We have an SFT that is currently net/Share. If it is going to be
 12763                                  	; used for a regen, we know it has to be a local SFT. Update the
 12764                                  	; LocalSFT variable
 12765                                  
 12766 000019DD 08C0                    	or	al,al
 12767 000019DF 7508                    	jnz	short closenet
 12768                                  
 12769 000019E1 893E[5D10]              	mov	[LocalSFT],di
 12770 000019E5 8C06[5F10]              	mov	[LocalSFT+2],es	;store local SFT address
 12771                                  closenet:
 12772 000019E9 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12773 000019ED 8C06[A005]              	mov	[THISSFT+2],es
 12774                                  
 12775                                  	; If we have sharing or thisSFT is a net sft, then close it until ref
 12776                                  	; count is 0.
 12777                                  	; NB: We come here only if it is a net/Share SFT that is going to be
 12778                                  	; recycled -- no need to check for this.
 12779                                  
 12780                                  LRUClose:
 12781 000019F1 26833D00                	cmp	word [es:di],0
 12782                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12783 000019F5 740C                    	jz	short LRUDone	; nope, all done
 12784                                  
 12785 000019F7 E87314                  	call	DOS_CLOSE
 12786 000019FA 73F5                    	jnc	short LRUClose	; no error => clean up
 12787                                  
 12788                                  	; Bugbug: I dont know why we are trying to close after we get an
 12789                                  	; error closing. Seems like we could have a potential infinite loop
 12790                                  	; here. This has to be verified.
 12791                                  
 12792 000019FC 3C06                    	cmp	al,error_invalid_handle ; 6
 12793 000019FE 74F1                    	je	short LRUClose
 12794                                  errorbadSFT:
 12795 00001A00 F9                      	stc
 12796 00001A01 EB05                    	JMP	short LRUDead
 12797                                  LRUDone:
 12798 00001A03 30C0                    	XOR	AL,AL
 12799 00001A05 E80401                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12800                                  
 12801                                  LRUDead:
 12802 00001A08 E844EA                  	call	restore_world		; use macro
 12803                                  	
 12804 00001A0B 07                      	pop	es ; * (MSDOS 6.21)
 12805                                  
 12806                                  	;getdseg <es>
 12807 00001A0C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12808 00001A11 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12809                                  
 12810                                  	;;retnc
 12811                                  	;jc	short LruFCB_err
 12812                                  	;retn
 12813                                  
 12814                                  	; 16/12/2022
 12815                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12816 00001A16 7302                    	jnc	short LruFCB_retn
 12817                                  	;jc	short LruFCB_err
 12818                                  	;retn
 12819                                  		
 12820                                  LruFCB_err:
 12821 00001A18 B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12822                                  LruFCB_retn:
 12823 00001A1A C3                      	retn
 12824                                  	
 12825                                  ;LruFCB	ENDP
 12826                                  
 12827                                  ; 17/05/2019 - Retro DOS v4.0
 12828                                  
 12829                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12830                                  
 12831                                  ; 26/06/2024
 12832                                  %if 0
 12833                                  
 12834                                  ; --------------------------------------------------------------------------
 12835                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12836                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12837                                  ; to copy the name to different destinations
 12838                                  ;
 12839                                  ; Inputs: ds:si = source string
 12840                                  ;	 es:di = destination string
 12841                                  ;	 cx = length of string
 12842                                  ;
 12843                                  ; Outputs: String copied to destination
 12844                                  ;
 12845                                  ; Registers affected: cx,di,si
 12846                                  ; --------------------------------------------------------------------------
 12847                                  
 12848                                  RegenCopyName:
 12849                                  CopyName:
 12850                                  	lodsb			;load character
 12851                                  	call	UCase		; convert char to upper case
 12852                                  StuffChar2:
 12853                                  	STOSB			;store converted character
 12854                                  	LOOP	CopyName	;
 12855                                  DoneName:
 12856                                  	retn
 12857                                  
 12858                                  %endif
 12859                                  
 12860                                  ; --------------------------------------------------------------------------
 12861                                  
 12862                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12863                                  FCBRegen:
 12864                                  	; called from SFTFromFCB. SS already DOSDATA
 12865                                  
 12866                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12867                                  	; we do not fill, size we do no fill, position we do not fill,
 12868                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12869                                  
 12870                                  	;mov	al,[si+19h]
 12871 00001A1B 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12872                                  
 12873                                  	; We discriminate based on the first two bits in the reserved field.
 12874                                  	
 12875                                  	;test	al,80h
 12876 00001A1E A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12877 00001A20 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12878                                  
 12879                                  	; The FCB is for a network or a sharing based system. At this point 
 12880                                  	; we have already closed the SFT for this guy and reconnection is 
 12881                                  	; impossible.
 12882                                  	;
 12883                                  	; Remember that he may have given us a FCB with bogus information in
 12884                                  	; it. Check to see if sharing is present or if the redir is present.
 12885                                  	; If either is around, presume that we have cycled out the FCB and 
 12886                                  	; give the hard error. Otherwise, just return with carry set.
 12887                                  
 12888 00001A22 E81257                  	call	CheckShare		; test for sharer
 12889 00001A25 7509                    	JNZ	short RegenFail		; yep, fail this.
 12890                                  	
 12891                                  	;mov	ax,1100h
 12892 00001A27 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12893 00001A2A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12894                                  			; Return: AL = 00h  not installed, OK to install
 12895                                  			; 01h  not installed, not OK to install
 12896                                  			; FFh  installed
 12897 00001A2C 08C0                    	OR	AL,AL			; is it there?
 12898 00001A2E 740C                    	JZ	short RegenDead		; no, just fail the operation
 12899                                  RegenFail:
 12900                                  	; 17/05/2019 - Retro DOS v4.0
 12901                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12902 00001A30 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12903                                  
 12904                                  	;cmp	ah,10h
 12905 00001A34 80FC10                  	cmp	AH,FCB_CLOSE
 12906 00001A37 7403                    	jz	short RegenDead
 12907 00001A39 E88801                  	call	FCBHardErr		; massive hard error.
 12908                                  RegenDead:
 12909 00001A3C F9                      	STC				; carry set
 12910                                  FCBRegen_retn:
 12911 00001A3D C3                      	retn
 12912                                  
 12913                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12914                                  	; so fail the operation.
 12915                                  
 12916                                  RegenNoSharing:
 12917 00001A3E E8F656                  	call	CheckShare		; Sharing around?
 12918 00001A41 75ED                    	JNZ	short RegenFail
 12919                                  	
 12920                                  	; Find an SFT for this guy.
 12921                                  	
 12922                                  	; 17/05/2019 - Retro DOS v4.0
 12923                                  
 12924                                  	; MSDOS 3.3
 12925                                  	;call	LRUFCB
 12926                                  	;jc	short FCBRegen_retn
 12927                                  	
 12928                                  	; MSDOS 6.0
 12929 00001A43 50                      	push	ax
 12930 00001A44 B000                    	mov	al,0			;indicate it is a regen operation
 12931 00001A46 E8EEFE                  	call	LRUFCB
 12932 00001A49 58                      	pop	ax
 12933 00001A4A 72F1                    	jc	short FCBRegen_retn
 12934                                  
 12935                                  	;mov	word [es:di+2],8002h
 12936 00001A4C 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12937 00001A52 243F                    	AND	AL,3Fh			; get drive number for flags
 12938 00001A54 98                      	CBW
 12939                                  	;or	ax,4000h
 12940 00001A55 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12941                                  
 12942                                  	; The bits field consists of the upper two bits (dirty and device) 
 12943                                  	; from the SFT and the low 4 bits from the open mode.
 12944                                  
 12945                                  	;mov	cl,[si+1Ah]
 12946 00001A58 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12947 00001A5B 88CD                    	MOV	CH,CL
 12948 00001A5D 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12949 00001A60 08E8                    	OR	AL,CH
 12950                                  	;and	cl,0Fh
 12951 00001A62 80E10F                  	AND	CL,access_mask		; get the mode bits
 12952                                  	;mov	[es:di+2],cl
 12953 00001A65 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12954                                  	;mov	[es:di+5],ax
 12955 00001A69 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12956                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12957 00001A6D 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12958                                  	;mov	[es:di+31h],ax
 12959 00001A71 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12960 00001A75 1E                      	push	ds
 12961 00001A76 56                      	push	si
 12962 00001A77 06                      	push	es
 12963 00001A78 57                      	push	di
 12964 00001A79 16                      	push	ss
 12965 00001A7A 07                      	pop	es
 12966 00001A7B BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12967                                  
 12968 00001A7E B90800                  	MOV	CX,8
 12969 00001A81 46                      	INC	SI			; Skip past drive byte to name in FCB
 12970                                  
 12971                                  	; MSDOS 3.3
 12972                                  ;RegenCopyName:
 12973                                  	;lodsb
 12974                                  	;call	UCase
 12975                                  	;stosb
 12976                                  	;loop	RegenCopyName
 12977                                  
 12978                                  	; MSDOS 6.0
 12979 00001A82 E87F00                  	call	RegenCopyName		;copy the name to NAME1
 12980                                  
 12981 00001A85 16                      	push	ss	; SS is DOSDATA
 12982 00001A86 1F                      	pop	ds
 12983                                  
 12984                                  	;mov	byte [ATTRIB],16h
 12985 00001A87 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12986                                  					; Must set this to something interesting
 12987                                  					; to call DEVNAME.
 12988 00001A8C E8F225                  	call	DEVNAME 		; check for device
 12989 00001A8F 5E                      	pop	si
 12990 00001A90 07                      	pop	es
 12991 00001A91 5E                      	pop	si
 12992 00001A92 1F                      	pop	ds
 12993 00001A93 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12994                                  
 12995                                  	; Device found. We can ignore disk-specific info
 12996                                  
 12997                                  	;mov	[es:di+5],bh
 12998 00001A95 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12999                                  	;mov	byte [es:di+4],0
 13000 00001A99 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 13001                                  					; SS override
 13002                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 13003 00001A9E 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 13004                                  regen_save_dpb:	; 26/06/2024
 13005                                  	;mov	[es:di+7],si
 13006 00001AA3 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13007                                  	;mov	[es:di+9],ds
 13008 00001AA7 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13009 00001AAB C3                      	retn				; carry is clear
 13010                                  
 13011                                  RegenDeadJ:
 13012 00001AAC EB8E                    	JMP	short RegenDead
 13013                                  
 13014                                  	; File found. Just copy in the remaining pieces.
 13015                                  
 13016                                  RegenFileNoSharing:
 13017                                  	;mov	ax,[es:di+5]
 13018 00001AAE 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 13019 00001AB2 83E03F                  	AND	AX,03Fh
 13020 00001AB5 1E                      	push	ds
 13021 00001AB6 56                      	push	si
 13022 00001AB7 E84E4D                  	call	FIND_DPB
 13023                                  	;;mov	[es:di+7],si
 13024                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 13025                                  	;;mov	[es:di+9],ds
 13026                                  	;MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 13027                                  	; 26/06/2024 (PCDOS 7.1 IBMDOS.COM)
 13028 00001ABA E8E6FF                  	call	regen_save_dpb
 13029 00001ABD 5E                      	pop	si
 13030 00001ABE 1F                      	pop	ds
 13031 00001ABF 72EB                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 13032                                  					; indicator was bogus
 13033                                  	;mov	ax,[si+1Dh]
 13034 00001AC1 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 13035                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 13036                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 13037 00001AC4 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 13038                                  
 13039                                  	; MSDOS 6.0
 13040                                  
 13041                                  	; SR;
 13042                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 13043                                  	; number
 13044                                  
 13045                                  	;mov	al,[si+18h]
 13046 00001AC8 8A4418                  	mov	al,[si+fcb_sfn]
 13047 00001ACB 24C0                    	and	al,0C0h		;get the 2 attribute bits
 13048 00001ACD 88C4                    	mov	ah,al
 13049 00001ACF D0C4                    	rol	ah,1
 13050 00001AD1 D0E8                    	shr	al,1
 13051 00001AD3 08E0                    	or	al,ah
 13052 00001AD5 243F                    	and	al,03Fh		;mask off unused bits
 13053                                  	;mov	[es:di+4],al
 13054 00001AD7 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 13055                                  
 13056                                  	; SR;
 13057                                  	; Update the higher word of the directory sector from the FCB
 13058                                  
 13059                                  	;;mov	al,[si+18h]
 13060 00001ADB 8A4418                  	mov	al,[si+fcb_sfn]
 13061 00001ADE 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 13062 00001AE0 28E4                    	sub	ah,ah
 13063                                  	;mov	[es:di+1Dh],ax
 13064 00001AE2 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 13065                                  
 13066                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13067                                  	;mov	ax,[si+1Bh]
 13068 00001AE6 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 13069                                  	;mov	[es:di+0Bh],ax
 13070 00001AE9 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 13071                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 13072                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 13073 00001AED 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 13074                                  	;mov	al,[si+1Fh]
 13075 00001AF1 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 13076                                  	;mov  	[es:di+1Fh],al
 13077 00001AF4 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 13078                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13079 00001AF8 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 13080                                  					; Existing FCB entries would be
 13081                                  					; flushed unnecessarily because of
 13082                                  					; check in CheckFCB of the ref_count.
 13083                                  					; July 22/85 - BAS
 13084                                  	;lea	si,[si+1]
 13085 00001AFB 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 13086                                  	;lea	di,[di+20h]
 13087 00001AFE 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 13088                                  	;mov	cx,11
 13089 00001B01 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13090                                  	
 13091                                  	; 26/06/2024
 13092                                  	; MSDOS 6.0
 13093                                  	;call	RegenCopyName	;copy name to SFT
 13094                                  	; 26/06/2024
 13095                                  	; cf = 0 (at the result of the 'test' instruction) 
 13096                                  	
 13097                                  	; MSDOS 3.3
 13098                                  ;RegenCopyName2:
 13099                                  	;lodsb
 13100                                  	;call    UCase
 13101                                  	;stosb
 13102                                  	;loop    RegenCopyName2
 13103                                  
 13104                                  	; 26/06/2024
 13105                                  	; cf = 0
 13106                                  	;clc
 13107                                  	;retn
 13108                                  
 13109                                  ; 26/06/2024
 13110                                  %if 1
 13111                                  
 13112                                  ; --------------------------------------------------------------------------
 13113                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 13114                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 13115                                  ; to copy the name to different destinations
 13116                                  ;
 13117                                  ; Inputs: ds:si = source string
 13118                                  ;	 es:di = destination string
 13119                                  ;	 cx = length of string
 13120                                  ;
 13121                                  ; Outputs: String copied to destination
 13122                                  ;
 13123                                  ; Registers affected: cx,di,si
 13124                                  ; --------------------------------------------------------------------------
 13125                                  
 13126                                  RegenCopyName:
 13127                                  CopyName:
 13128 00001B04 AC                      	lodsb			;load character
 13129 00001B05 E8B933                  	call	UCase ; *	; convert char to upper case
 13130                                  StuffChar2:
 13131 00001B08 AA                      	STOSB			;store converted character
 13132 00001B09 E2F9                    	LOOP	CopyName	;
 13133                                  	; 26/06/2024
 13134                                  	; cf= 0 ; *
 13135                                  DoneName:
 13136 00001B0B C3                      	retn
 13137                                  
 13138                                  %endif
 13139                                  
 13140                                  ; 17/05/2019 - Retro DOS v4.0
 13141                                  
 13142                                  ;**	BlastSFT - FIll SFT with Garbage
 13143                                  ; --------------------------------------------------------------------------
 13144                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 13145                                  ;	various garbage values to put into the SFT.  I don't know why,
 13146                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 13147                                  ;	necessary to show that the SFT is free after filling it.
 13148                                  ;
 13149                                  ;	ENTRY	(es:di) = address of SFT
 13150                                  ;		(al) = fill character
 13151                                  ;	EXIT	(ax) = -1
 13152                                  ;		'C' clear
 13153                                  ;	USES	AX, CX, Flags
 13154                                  
 13155                                  BlastSFT:
 13156 00001B0C 57                      	push	di
 13157                                  	;mov	cx,53 ; MSDOS 3.3
 13158                                  	;mov	cx,59 ; MSDOS 6.0
 13159 00001B0D B93B00                  	mov	cx,SF_ENTRY.size
 13160 00001B10 F3AA                    	rep	stosb
 13161 00001B12 5F                      	pop	di
 13162 00001B13 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 13163 00001B15 268905                  	mov	[es:di],ax
 13164                                  	;mov	[es:di+SF_ENTRY.sf_ref_count],ax ; set ref count    ;
 13165                                  	;mov	[es:di+15h],ax
 13166 00001B18 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 13167 00001B1C 48                      	dec	ax	; -1					    ;
 13168                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 13169 00001B1D 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 13170                                  BlastSFT_retn:
 13171 00001B21 C3                      	retn				; return with 'C' clear     ;
 13172                                  
 13173                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 13174                                  ; --------------------------------------------------------------------------
 13175                                  ;
 13176                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 13177                                  ;   regenerated.
 13178                                  ;
 13179                                  ;   Inputs:	DS:SI point to FCB (not extended)
 13180                                  ;		AL is SFT index
 13181                                  ;   Outputs:	Carry Set - FCB needs to be regened
 13182                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 13183                                  ;   Registers modified: AX and BX
 13184                                  ;
 13185                                  ; --------------------------------------------------------------------------
 13186                                  
 13187                                  	; 21/01/2024
 13188                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13189                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 13190                                  CheckFCB:
 13191                                  		
 13192                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 13193                                  
 13194                                  	; MSDOS 3.3
 13195                                  
 13196                                  	; LES	DI,[CS:SFTFCB]
 13197                                  
 13198                                  	; MSDOS 6.0
 13199                                  	
 13200                                  	; SR;
 13201                                  	; We check if the given FCB is for a local file. If so, we return a 
 13202                                  	; bad SFT status forcing the caller to regenerate the SFT.
 13203                                  
 13204                                  	;test	byte [si+19h],0C0h
 13205 00001B22 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 13206 00001B26 7464                    	jz	short BadSFT		;Local file, return bad SFT
 13207 00001B28 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 13208                                  
 13209                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13210                                  	;cmp	[es:di+4],al
 13211 00001B2D 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 13212 00001B31 7259                    	JC	short BadSFT
 13213                                  	;;mov	bl,53 ; MSDOS 3.3
 13214                                  	;mov	bl,59 ; MSDOS 6.0
 13215 00001B33 B33B                    	MOV	BL,SF_ENTRY.size
 13216 00001B35 F6E3                    	MUL	BL
 13217                                  	;lea	di,[di+6]
 13218 00001B37 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 13219 00001B3A 01C7                    	ADD	DI,AX
 13220                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 13221 00001B3C 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 13222                                  	;cmp	[es:di+31h],ax
 13223 00001B40 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 13224 00001B44 7546                    	JNZ	short BadSFT		; must match process
 13225 00001B46 26833D00                	cmp	word [es:di],0
 13226                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 13227 00001B4A 7440                    	JZ	short BadSFT		; must also be in use
 13228                                  	;mov	al,[si+19h]
 13229 00001B4C 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 13230                                  	;test	al,80h
 13231 00001B4F A880                    	test	AL,FCBSPECIAL		; a special FCB?
 13232 00001B51 7427                    	JZ	short CheckNoShare	; No. try local or device
 13233                                  
 13234                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 13235                                  	; FCBSHARE is a superset of FCBNETWORK.
 13236                                  
 13237 00001B53 50                      	PUSH	AX
 13238                                  	;and	al,0C0h
 13239 00001B54 24C0                    	AND	AL,FCBMASK
 13240                                  	;cmp	al,0C0h
 13241 00001B56 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 13242 00001B58 58                      	POP	AX
 13243 00001B59 7515                    	JNZ	short CheckNet		; yes
 13244                                  ;
 13245                                  ;----- In share support -----
 13246                                  ;
 13247                                  	;call	far [cs:JShare+(11*4)]
 13248 00001B5B 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 13249 00001B60 722A                    	JC	short BadSFT
 13250                                  
 13251                                  ; 21/01/2024
 13252                                  %if 0
 13253                                  	JMP	SHORT CheckD
 13254                                  ;
 13255                                  ;----- End in share support -----
 13256                                  ;
 13257                                  	; 09/11/2022
 13258                                  	; (There is not any procedure/sub
 13259                                  	;  which calls or jumps to CheckFirClus here)
 13260                                  	;;;
 13261                                  CheckFirClus:
 13262                                  	;cmp     bx,[es:di+0Bh]
 13263                                  	; 07/12/2022
 13264                                  	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 13265                                  	JNZ	short BadSFT
 13266                                  	;;;
 13267                                  %endif
 13268                                  
 13269                                  CheckD:
 13270 00001B62 243F                    	AND	AL,3Fh
 13271                                  	;mov	ah,[es:di+5]
 13272 00001B64 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 13273 00001B68 80E43F                  	AND	AH,3Fh
 13274 00001B6B 38C4                    	CMP	AH,AL
 13275                                  	; 26/06/2024
 13276                                  	; 16/12/2022
 13277                                  	;jz	short BlastSFT_retn	; carry is clear
 13278                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13279 00001B6D 751D                    	jnz	short BadSFT
 13280                                  CheckD_retn:
 13281 00001B6F C3                      	retn
 13282                                  
 13283                                  ; 26/06/2024
 13284                                  ;BadSFT: 
 13285                                  ;	STC
 13286                                  ;	retn
 13287                                  
 13288                                  CheckNet:
 13289                                  	; 17/05/2019 - Retro DOS v4.0
 13290                                  	
 13291                                  ;----- In net support -----
 13292                                  
 13293                                  	; MSDOS 3.3
 13294                                  	;;mov	ax,[si+1Ah]
 13295                                  	;mov	ax,[si+fcb_net_handle]
 13296                                  	;;cmp	ax,[es:di+1Dh]
 13297                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 13298                                  	;jnz	short BadSFT
 13299                                  	;;cmp	ax,[es:di+19h]
 13300                                  	;cmp	ax,[ES:DI+sf_netid]
 13301                                  	;jnz     short BadSFT
 13302                                  	;;mov	ax,[si+1Eh]
 13303                                  	;mov	ax,[si+fcb_l_attr]
 13304                                  	;;cmp	ax,[es:di+1Bh]
 13305                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 13306                                  	;jnz     short BadSFT
 13307                                  
 13308                                  	; MSDOS 6.0
 13309                                  	;mov	ax,[si+1Ch]
 13310 00001B70 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 13311                                  	; 09/11/2022
 13312                                  	;cmp	ax,[es:di+0Bh] 
 13313 00001B73 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 13314 00001B77 7513                    	JNZ	short BadSFT
 13315                                  
 13316                                  ;----- END In net support -----
 13317                                  
 13318                                  CheckNet_retn:
 13319 00001B79 C3                      	retn
 13320                                  
 13321                                  CheckNoShare:
 13322                                  
 13323                                  ; 16/12/2022
 13324                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13325                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13326                                  ;	;test	al,40h
 13327                                  ;	test	AL,FCBDEVICE		; Device?
 13328                                  ;	;jnz	short $+2 ; 09/11/2022
 13329                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13330                                  
 13331                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13332                                  	;;mov	bx,[si+1Dh]
 13333                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13334                                  	;;cmp	bx,[es:di+1Dh]
 13335                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13336                                  	;jnz	short BadSFT
 13337                                  	;;mov	bl,[si+1Fh]
 13338                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13339                                  	;;cmp	bl,[es:di+1Fh]
 13340                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13341                                  	;jnz	short BadSFT
 13342                                  	;;mov	bl,[si+1Ah]
 13343                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13344                                  	;;mov	bh,[es:di+5]
 13345                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13346                                  	;xor	bh,bl
 13347                                  	;and	bh,0C0h
 13348                                  	;jnz	short BadSFT
 13349                                  	;;xor	bl,[es:di+2]
 13350                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13351                                  	;and	bl,0Fh
 13352                                  	;jnz	short BadSFT
 13353                                  	;push	di
 13354                                  	;push	si
 13355                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13356                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13357                                  	;;lea	si,[si+1]
 13358                                  	;LEA	SI,[SI+SYS_FCB.name]
 13359                                  	;;mov	cx,11
 13360                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13361                                  	;repe	cmpsb
 13362                                  	;pop	si
 13363                                  	;pop	di
 13364                                  	;jnz	short BadSFT
 13365                                  	;;mov	bx,[si+1Bh]
 13366                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13367                                  	;jmp	short CheckFirClus
 13368                                  
 13369                                  	; MSDOS 6.0
 13370                                  
 13371                                  	; SR;
 13372                                  	; The code below to match a local FCB with its SFT can no longer be
 13373                                  	; used. We just return a no-match status. This check is done right
 13374                                  	; at the top.
 13375                                  
 13376                                  CheckNoShareDev:
 13377                                  	;mov	bx,[si+1Ah]
 13378 00001B7A 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13379                                  	;cmp	bx,[es:di+7]
 13380 00001B7D 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13381 00001B81 7509                    	JNZ	short BadSFT
 13382                                  	;mov	bx,[si+1Ch]
 13383 00001B83 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13384                                  	;cmp	bx,[es:di+9]
 13385 00001B86 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13386                                  	;JNZ	short BadSFT
 13387                                  	;JMP	short CheckD
 13388                                  	; 26/06/2024
 13389 00001B8A 74D6                    	jz	short CheckD
 13390                                  
 13391                                  ; 26/06/2024
 13392                                  BadSFT: 
 13393 00001B8C F9                      	STC
 13394 00001B8D C3                      	retn
 13395                                  
 13396                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13397                                  ;----------------------------------------------------------------------------
 13398                                  ;
 13399                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13400                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13401                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13402                                  ;	with PID
 13403                                  ;
 13404                                  ;   Inputs:	DS:SI point to FCB
 13405                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13406                                  ;		Carry clear -> OK ES:DI -> SFT
 13407                                  ;		Carry set -> error in ax
 13408                                  ;   Registers modified: ES,DI, AX
 13409                                  ;
 13410                                  ;----------------------------------------------------------------------------
 13411                                  
 13412                                  SFTFromFCB:
 13413                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13414                                  
 13415                                  	; 17/05/2019 - Retro DOS v4.0
 13416                                  
 13417 00001B8E 50                      	push	ax
 13418 00001B8F 53                      	push	bx
 13419                                  	;mov	al,[si+18h]
 13420 00001B90 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13421 00001B93 E88CFF                  	call	CheckFCB
 13422 00001B96 5B                      	pop	bx
 13423 00001B97 58                      	pop	ax
 13424                                  	;MOV	[CS:THISSFT],DI		; SS override
 13425                                  	;MOV	[CS:THISSFT+2],ES
 13426 00001B98 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13427 00001B9D 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13428 00001BA2 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13429                                  	
 13430                                  	; 09/11/2022 (MSDOS 5.0)
 13431                                  	; 31/05/2019
 13432 00001BA4 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13433 00001BA5 E8BEE8                  	call	save_world
 13434 00001BA8 E870FE                  	call	FCBRegen
 13435 00001BAB E8A1E8                  	call	restore_world		; use macro restore world
 13436 00001BAE 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13437                                  
 13438                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13439 00001BAF 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13440 00001BB3 72C4                    	jc	short CheckNet_retn
 13441                                  
 13442                                  Set_SFT: 
 13443                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13444 00001BB5 36C43E[9E05]            	les	di,[ss:THISSFT]
 13445                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13446 00001BBA 36FF36[3C03]            	push	word [ss:PROC_ID]
 13447                                  	;pop	word [es:di+31h]
 13448 00001BBF 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13449 00001BC3 C3                      	retn				; carry is clear
 13450                                  
 13451                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13452                                  ;----------------------------------------------------------------------------
 13453                                  ;
 13454                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13455                                  ;	unavailable FCB.
 13456                                  ;
 13457                                  ;   Inputs:	none.
 13458                                  ;   Outputs:	none.
 13459                                  ;   Registers modified: all
 13460                                  ;
 13461                                  ;----------------------------------------------------------------------------
 13462                                  
 13463                                  FCBHardErr:
 13464                                  	; 17/05/2019 - Retro DOS v4.0
 13465 00001BC4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13466                                  	;
 13467                                  	;mov	ax,23h
 13468 00001BC9 B82300                  	MOV	AX,error_FCB_unavailable
 13469                                  	;;mov	byte [cs:ALLOWED],8
 13470                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13471 00001BCC 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13472                                  	
 13473                                  	;LES	BP,[CS:THISDPB]
 13474 00001BD2 26C42E[8A05]            	les	bp,[es:THISDPB]
 13475                                  	
 13476 00001BD7 BF0100                  	MOV	DI,1			; Fake some registers
 13477 00001BDA 89F9                    	MOV	CX,DI
 13478                                  	;mov	dx,[es:bp+0Bh]
 13479 00001BDC 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13480 00001BE0 E89835                  	call	HARDERR
 13481 00001BE3 F9                      	STC
 13482 00001BE4 C3                      	retn
 13483                                  
 13484                                  ;============================================================================
 13485                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13486                                  ;============================================================================
 13487                                  ; 21/07/2018 - Retro DOS v3.0
 13488                                  ; 17/05/2019 - Retro DOS v4.0
 13489                                  
 13490                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13491                                  ;
 13492                                  ;	GetRR
 13493                                  ;	GetExtent
 13494                                  ;	SetExtent
 13495                                  ;	GetExtended
 13496                                  ;	GetRecSize
 13497                                  ;	FCBIO
 13498                                  ;	$FCB_OPEN
 13499                                  ;	$FCB_CREATE
 13500                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13501                                  ;	$FCB_RANDOM_READ_BLOCK
 13502                                  ;	$FCB_SEQ_READ
 13503                                  ;	$FCB_SEQ_WRITE
 13504                                  ;	$FCB_RANDOM_READ
 13505                                  ;	$FCB_RANDOM_WRITE
 13506                                  ;
 13507                                  ;	Revision history:
 13508                                  ;
 13509                                  ;		Created: ARR 4 April 1983
 13510                                  ;			 MZ  6 June  1983 completion of functions
 13511                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13512                                  ;				  times.  Change so successive closes work by
 13513                                  ;				  always returning OK.	Also, detect I/O to
 13514                                  ;				  already closed FCB and return EOF.
 13515                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13516                                  ;				  out of sft into FCB for reconnection
 13517                                  ;
 13518                                  ;	    A000   version 4.00	Jan. 1988
 13519                                  
 13520                                  ; Defintions for FCBOp flags
 13521                                  
 13522                                  RANDOM	equ 2				; random operation
 13523                                  FCBREAD equ 4				; doing a read
 13524                                  BLOCK	equ 8				; doing a block I/O
 13525                                  
 13526                                  ;Break <GetRR - return the random record field in DX:AX>
 13527                                  ;---------------------------------------------------------------------------
 13528                                  ;
 13529                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13530                                  ;	from the FCB pointed to by DS:SI
 13531                                  ;
 13532                                  ;   Inputs:	DS:SI point to an FCB
 13533                                  ;		BX has record size
 13534                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13535                                  ;   Registers modified: none
 13536                                  ;---------------------------------------------------------------------------
 13537                                  
 13538                                  GetRR:
 13539                                  	;mov	ax,[si+21h]
 13540 00001BE5 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13541                                  	;mov	dx,[si+23h]
 13542 00001BE8 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13543 00001BEB 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13544 00001BEE 7202                    	JB	short GetRRBye
 13545                                  GetExtent_bye:	; 21/01/2024
 13546 00001BF0 30F6                    	XOR	DH,DH
 13547                                  GetRRBye:
 13548 00001BF2 C3                      	retn
 13549                                  
 13550                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13551                                  ;---------------------------------------------------------------------------
 13552                                  ;
 13553                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13554                                  ;	NR fields in the FCB.
 13555                                  ;
 13556                                  ;   Inputs:	DS:SI - point to FCB
 13557                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13558                                  ;   Registers modified: none
 13559                                  ;---------------------------------------------------------------------------
 13560                                  
 13561                                  GetExtent:
 13562                                  	;mov	al,[si+20h]
 13563 00001BF3 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13564                                  	;mov	dx,[si+0Ch]
 13565 00001BF6 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13566 00001BF9 D0E0                    	SHL	AL,1
 13567 00001BFB D1EA                    	SHR	DX,1
 13568 00001BFD D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13569 00001BFF 88D4                    	MOV	AH,DL
 13570 00001C01 88F2                    	MOV	DL,DH
 13571                                  	; 21/01/2024
 13572                                  	;XOR	DH,DH
 13573                                  	;retn
 13574 00001C03 EBEB                    	jmp	short GetExtent_bye
 13575                                  
 13576                                  ;Break <SetExtent - update the extent/NR field>
 13577                                  ;---------------------------------------------------------------------------
 13578                                  ;
 13579                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13580                                  ;	fields
 13581                                  ;
 13582                                  ;   Inputs:	DS:SI point to FCB
 13583                                  ;		DX:AX is a record location in file
 13584                                  ;   Outputs:	Extent/NR fields are filled in
 13585                                  ;   Registers modified: CX
 13586                                  ;---------------------------------------------------------------------------
 13587                                  
 13588                                  SetExtent:
 13589 00001C05 50                      	push	ax
 13590 00001C06 52                      	push	dx
 13591 00001C07 89C1                    	MOV	CX,AX
 13592 00001C09 247F                    	AND	AL,7FH			; next rec field
 13593                                  	;mov	[si+20h],al
 13594 00001C0B 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13595 00001C0E 80E180                  	AND	CL,80H			; save upper bit
 13596 00001C11 D1E1                    	SHL	CX,1
 13597 00001C13 D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13598 00001C15 88E8                    	MOV	AL,CH
 13599 00001C17 88D4                    	MOV	AH,DL
 13600                                  	;mov	[si+0Ch], ax
 13601 00001C19 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13602 00001C1C 5A                      	pop	dx
 13603 00001C1D 58                      	pop	ax
 13604 00001C1E C3                      	retn
 13605                                  
 13606                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13607                                  ;---------------------------------------------------------------------------
 13608                                  ;
 13609                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13610                                  ;
 13611                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13612                                  ;   Outputs:	DS:SI point to the FCB part
 13613                                  ;		zeroflag set if not extended fcb
 13614                                  ;   Registers modified: SI
 13615                                  ;---------------------------------------------------------------------------
 13616                                  
 13617                                  GetExtended:
 13618 00001C1F 89D6                    	MOV	SI,DX			; point to Something
 13619 00001C21 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13620 00001C24 7503                    	JNZ	short GetBye		; not there
 13621 00001C26 83C607                  	ADD	SI,7			; point to FCB
 13622                                  GetBye:
 13623 00001C29 39D6                    	CMP	SI,DX			; set condition codes
 13624                                  getextd_retn:
 13625 00001C2B C3                      	retn
 13626                                  
 13627                                  ;Break <GetRecSize - return in BX the FCB record size>
 13628                                  ;---------------------------------------------------------------------------
 13629                                  ;
 13630                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13631                                  ;
 13632                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13633                                  ;   Outputs:	BX contains the record size
 13634                                  ;   Registers modified: None
 13635                                  ;---------------------------------------------------------------------------
 13636                                  
 13637                                  	; 22/01/2024
 13638                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13639                                  GetRecSize:
 13640                                  	;mov	bx,[si+0Eh]
 13641 00001C2C 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13642 00001C2F 09DB                    	OR	BX,BX			; is it nul?
 13643                                  	;jz	short getextd_retn
 13644                                  	; 22/01/2024 (BugFix)
 13645 00001C31 75F8                    	jnz	short getextd_retn
 13646                                  	;MOV	BX,128			; use default size
 13647 00001C33 B380                    	mov	bl,128
 13648                                  	;mov	[si+0Eh],bx
 13649 00001C35 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13650 00001C38 C3                      	retn
 13651                                  
 13652                                  ; 23/01/2024 - Retro DOS v5.0
 13653                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:61B3h
 13654                                  ; 23/01/2024 - Retro DOS v4.2
 13655                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DC1h
 13656                                  ; 23/01/2024 - Retro DOS v4.1
 13657                                  ; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DADh
 13658                                  
 13659                                  ; 22/07/2018 - Retro DOS v3.0
 13660                                  
 13661                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13662                                  ;----------------------------------------------------------------------------
 13663                                  ;
 13664                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13665                                  ;	and write a number of blocks from it.
 13666                                  ;
 13667                                  ;   Inputs:	DS:DX point to an FCB
 13668                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13669                                  ;		AL <> 0 Not enough room on disk for the output
 13670                                  ;
 13671                                  ;----------------------------------------------------------------------------
 13672                                  
 13673                                  _$FCB_RANDOM_WRITE_BLOCK:
 13674                                  	;mov	AL,0Ah
 13675 00001C39 B00A                    	MOV	AL,RANDOM+BLOCK
 13676 00001C3B EB12                    	JMP	short FCBIO	; 23/01/2024
 13677                                  
 13678                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13679                                  ;----------------------------------------------------------------------------
 13680                                  ;
 13681                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13682                                  ;	and read a number of blocks from it.
 13683                                  ;
 13684                                  ;   Inputs:	DS:DX point to an FCB
 13685                                  ;   Outputs:	AL = error codes defined above
 13686                                  ;
 13687                                  ;----------------------------------------------------------------------------
 13688                                  
 13689                                  _$FCB_RANDOM_READ_BLOCK:
 13690                                  	;mov	AL,0Eh
 13691 00001C3D B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13692 00001C3F EB0E                    	JMP	short FCBIO	; 23/01/2024
 13693                                  
 13694                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13695                                  ;----------------------------------------------------------------------------
 13696                                  ;
 13697                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13698                                  ;	memory
 13699                                  ;
 13700                                  ;   Inputs:	DS:DX point to an FCB
 13701                                  ;   Outputs:	AL = error codes defined above
 13702                                  ;
 13703                                  ;----------------------------------------------------------------------------
 13704                                  
 13705                                  _$FCB_SEQ_READ:
 13706                                  	;mov	AL,4
 13707 00001C41 B004                    	MOV	AL,FCBREAD
 13708 00001C43 EB0A                    	JMP	short FCBIO	; 23/01/2024
 13709                                  
 13710                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13711                                  ;----------------------------------------------------------------------------
 13712                                  ;
 13713                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13714                                  ;	file
 13715                                  ;
 13716                                  ;   Inputs:	DS:DX point to an FCB
 13717                                  ;   Outputs:	AL = error codes defined above
 13718                                  ;
 13719                                  ;----------------------------------------------------------------------------
 13720                                  
 13721                                  _$FCB_SEQ_WRITE:
 13722 00001C45 B000                    	MOV	AL,0
 13723 00001C47 EB06                    	JMP	short FCBIO	; 23/01/2024
 13724                                  
 13725                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13726                                  ;----------------------------------------------------------------------------
 13727                                  ;
 13728                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13729                                  ;	record from it.
 13730                                  ;
 13731                                  ;   Inputs:	DS:DX point to an FCB
 13732                                  ;   Outputs:	AL = error codes defined above
 13733                                  ;
 13734                                  ;----------------------------------------------------------------------------
 13735                                  
 13736                                  _$FCB_RANDOM_READ:
 13737                                  	;mov	AL,6
 13738 00001C49 B006                    	MOV	AL,RANDOM+FCBREAD
 13739                                  	; 23/01/2024
 13740                                  	;jmp	FCBIO 		; single block
 13741 00001C4B EB02                    	jmp	short FCBIO
 13742                                  
 13743                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13744                                  ;----------------------------------------------------------------------------
 13745                                  ;
 13746                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13747                                  ;	a record to it.
 13748                                  ;
 13749                                  ;   Inputs:	DS:DX point to an FCB
 13750                                  ;   Outputs:	AL = error codes defined above
 13751                                  ;
 13752                                  ;----------------------------------------------------------------------------
 13753                                  
 13754                                  _$FCB_RANDOM_WRITE:
 13755                                  	;mov	AL,2
 13756 00001C4D B002                    	MOV	AL,RANDOM
 13757                                  	; 23/01/2024
 13758                                  	;;jmp	FCBIO
 13759                                  	;jmp	short FCBIO
 13760                                  
 13761                                  ;BREAK <FCBIO - do internal FCB I/O>
 13762                                  ;---------------------------------------------------------------------------
 13763                                  ;
 13764                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13765                                  ;
 13766                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13767                                  ;		DS:DX point to FCB
 13768                                  ;		CX may have count of number of records to xfer
 13769                                  ;   Outputs:	AL has error code
 13770                                  ;   Registers modified: all
 13771                                  ;---------------------------------------------------------------------------
 13772                                  
 13773                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13774                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13775                                  
 13776                                  	; 23/01/2024
 13777                                  	; DOSCODE:5B2Bh (MSDOS 6.22 MSDOS.SYS)
 13778                                  
 13779                                  	; 23/01/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 13780                                  	; DOSCODE:61C9h (PCDOS 7.1 IBMDOS.COM)
 13781                                  
 13782                                  FCBIO:
 13783                                  
 13784                                  FEOF	EQU	1
 13785                                  FTRIM	EQU	2
 13786                                  
 13787                                  %define	FCBErr	byte [bp-1]  ; byte
 13788                                  %define	cRec	word [bp-3]  ; word
 13789                                  ;%define RecPos	word [bp-7]  ; dword
 13790                                  %define RecPosL	word [bp-7]  ; word
 13791                                  %define RecPosH	word [bp-5]  ; word
 13792                                  %define	RecSize	word [bp-9]  ; word
 13793                                  ;%define bPos	word [bp-13] ; dword
 13794                                  %define bPosL	word [bp-13] ; word
 13795                                  %define bPosH	word [bp-11] ; word
 13796                                  %define cByte	word [bp-15] ; word
 13797                                  %define cResult word [bp-17] ; word
 13798                                  %define	cRecRes	word [bp-19] ; word
 13799                                  %define	FCBOp	byte [bp-20] ; byte
 13800                                  ; 23/01/2024
 13801                                  %define bPos bp-13
 13802                                  
 13803                                  	;Enter
 13804                                  
 13805 00001C4F 55                      	push	bp
 13806 00001C50 89E5                    	mov	bp,sp
 13807 00001C52 83EC14                  	sub	sp,20
 13808                                  	;mov	[bp-20],al
 13809 00001C55 8846EC                  	MOV	FCBOp,AL
 13810                                  	;mov	byte [bp-1],0
 13811 00001C58 C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13812 00001C5C E8C0FF                  	call	GetExtended		;   FCB = GetExtended ();
 13813                                  	;test	byte [bp-20],8
 13814 00001C5F F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13815 00001C63 7503                    	JNZ	short GetPos
 13816 00001C65 B90100                  	MOV	CX,1			;	cRec = 1;
 13817                                  GetPos:
 13818                                  	;mov	[bp-3],cx
 13819 00001C68 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13820 00001C6B E885FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13821 00001C6E E8BBFF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13822                                  	;mov	[bp-9],bx
 13823 00001C71 895EF7                  	MOV	RecSize,BX
 13824                                  	;test	byte [bp-20],2
 13825 00001C74 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13826 00001C78 7403                    	JZ	short GetRec
 13827 00001C7A E868FF                  	call	GetRR			;	RecPos = GetRR ();
 13828                                  GetRec:
 13829                                  	;mov	[bp-7],ax
 13830 00001C7D 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13831                                  	;mov	[bp-5],dx
 13832 00001C80 8956FB                  	MOV	RecPosH,DX
 13833 00001C83 E87FFF                  	call	SetExtent		;   SetExtent (RecPos);
 13834                                  	;mov	ax,[bp-5]
 13835 00001C86 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13836 00001C89 F7E3                    	MUL	BX
 13837 00001C8B 89C7                    	MOV	DI,AX
 13838                                  	;mov	ax,[bp-7]
 13839 00001C8D 8B46F9                  	MOV	AX,RecPosL
 13840 00001C90 F7E3                    	MUL	BX
 13841 00001C92 01FA                    	ADD	DX,DI
 13842                                  	;mov	[bp-13],ax
 13843 00001C94 8946F3                  	MOV	bPosL,AX
 13844                                  	;mov	[bp-11],dx
 13845 00001C97 8956F5                  	MOV	bPosH,DX
 13846                                  	;mov	ax,[bp-3]
 13847 00001C9A 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13848 00001C9D F7E3                    	MUL	BX
 13849                                  	;mov	[bp-15],ax
 13850 00001C9F 8946F1                  	MOV	cByte,AX
 13851                                  
 13852                                  ;hkn; 	SS override
 13853 00001CA2 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13854 00001CA7 83D200                  	ADC	DX,0
 13855 00001CAA 7419                    	JZ	short DoOper
 13856                                  	;mov	byte [bp-1],2
 13857 00001CAC C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13858                                  
 13859                                  ;hkn; 	SS override
 13860 00001CB0 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13861 00001CB4 F7D8                    	NEG	AX
 13862 00001CB6 7501                    	JNZ	short DoDiv
 13863 00001CB8 48                      	DEC	AX
 13864                                  DoDiv:
 13865 00001CB9 31D2                    	XOR	DX,DX
 13866 00001CBB F7F3                    	DIV	BX
 13867                                  	;mov	[bp-3],ax
 13868 00001CBD 8946FD                  	MOV	cRec,AX
 13869 00001CC0 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13870                                  	;mov	[bp-15],ax
 13871 00001CC2 8946F1                  	MOV	cByte,AX		;	}
 13872                                  DoOper:
 13873 00001CC5 31DB                    	XOR	BX,BX
 13874                                  	;mov	[bp-17],bx
 13875 00001CC7 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13876                                  	;cmp	[bp-15],bx
 13877 00001CCA 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13878 00001CCD 7506                    	JNZ	short DoGetExt
 13879                                  	;test	byte [bp-1],2
 13880 00001CCF F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13881                                  	;JZ	short DoGetExt
 13882                                  	;JMP	short SkipOp
 13883                                  	; 16/12/2022
 13884 00001CD3 7572                    	jnz	short SkipOp
 13885                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13886                                  	;JZ	short DoGetExt
 13887                                  	;JMP	short SkipOp
 13888                                  DoGetExt:
 13889 00001CD5 E8B6FE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13890 00001CD8 730F                    	JNC	short ContinueOp
 13891                                  FCBDeath:
 13892 00001CDA E877E9                  	call	FCB_RET_ERR		; signal error, map for extended
 13893                                  	;mov	word [bp-19],0
 13894 00001CDD C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13895                                  	;mov	byte [bp-1],1
 13896 00001CE2 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13897 00001CE6 E9EB00                  	JMP	FCBSave 		; bam!
 13898                                  ContinueOp:
 13899                                  	; 23/01/2024
 13900                                  	; (PCDOS 7.1 IBMDOS.COM)
 13901                                  	;
 13902                                  	;;mov	ax,[si+10h]
 13903                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ]
 13904                                  	;;mov	[es:di+11h],ax
 13905                                  	;MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13906                                  	;;mov	ax,[si+12h]
 13907                                  	;MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13908                                  	;;mov	[es:di+13h],ax
 13909                                  	;MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13910                                  	;;;
 13911 00001CE9 1E                      	push	ds
 13912 00001CEA C54410                  	lds	ax,[si+SYS_FCB.FILSIZ]
 13913 00001CED 26894511                	mov	[es:di+SF_ENTRY.sf_size],ax
 13914 00001CF1 268C5D13                	mov	[es:di+SF_ENTRY.sf_size+2],ds
 13915 00001CF5 C546F3                  	lds	ax,[bPos] ; lds ax,[bp-13]
 13916 00001CF8 8CDA                    	mov	dx,ds
 13917 00001CFA 1F                      	pop	ds
 13918                                  	;;;
 13919                                  	;;mov	ax,[bp-13]
 13920                                  	;MOV	AX,bPosL
 13921                                  	;;mov	dx,[bp-11]
 13922                                  	;MOV	DX,bPosH
 13923                                  
 13924                                  	;mov	[es:di+15h],ax
 13925 00001CFB 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13926                                  	;xchg	dx,[es:di+17h]
 13927 00001CFF 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13928 00001D03 52                      	PUSH	DX			; save away Open age.
 13929                                  	;mov	cx,[bp-15]
 13930 00001D04 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13931                                  
 13932                                  ;hkn; DOS_Read is in DOSCODE
 13933 00001D07 BF[F231]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13934                                  	;test	byte [bp-20],4
 13935 00001D0A F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13936 00001D0E 7503                    	JNZ	short DoContext
 13937                                  
 13938                                  ;hkn; DOS_Write is in DOSCODE
 13939 00001D10 BF[F333]                	MOV	DI,DOS_WRITE
 13940                                  DoContext:
 13941 00001D13 55                      	push	bp
 13942 00001D14 1E                      	push	ds
 13943 00001D15 56                      	push	si
 13944                                  
 13945                                  ;hkn; SS is DOSDATA
 13946 00001D16 16                      	push	ss
 13947 00001D17 1F                      	pop	ds
 13948                                  
 13949                                  ;; Fix for disk full
 13950 00001D18 FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE
 13951                                  	
 13952 00001D1A 5E                      	pop	si
 13953 00001D1B 1F                      	pop	ds
 13954 00001D1C 5D                      	pop	bp
 13955 00001D1D 72BB                    	JC	short FCBDeath
 13956                                  	
 13957 00001D1F 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13958 00001D25 740A                    	JZ	short NODSKFULL
 13959 00001D27 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13960                                  
 13961                                  	; (MSDOS 5.0-6.22 MSDOS.SYS) ; 23/01/2024
 13962                                  	;mov	byte [bp-1],1 
 13963 00001D2D C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13964                                  
 13965                                  	; 23/01/2024
 13966                                  	; (PCDOS 7.1 IBMDOS.COM)
 13967                                  	;;mov	byte [bp-1],1 
 13968                                  	;MOV	FCBErr,FEOF		; set disk full flag
 13969                                  
 13970                                  NODSKFULL:
 13971                                  ;; Fix for disk full
 13972                                  	;mov	[bp-17],cx
 13973 00001D31 894EEF                  	MOV	cResult,CX
 13974 00001D34 E832FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13975                                  	;pop	word [es:di+17h]	
 13976 00001D37 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13977                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)
 13978                                  
 13979                                  	; 23/01/2024
 13980                                  	; (PCDOS 7.1 IBMDOS.COM)
 13981                                  	;
 13982                                  	;;mov	ax,[es:di+11h]
 13983                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13984                                  	;;mov	[si+10h],ax
 13985                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 13986                                  	;;mov	ax,[es:di+13h]
 13987                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13988                                  	;;mov	[si+12h],ax
 13989                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13990                                  	;;;
 13991 00001D3B 06                      	push	es
 13992 00001D3C 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 13993 00001D40 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 13994 00001D43 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 13995 00001D46 07                      	pop	es
 13996                                  	;;;
 13997                                  					;	}
 13998                                  SkipOp:
 13999                                  	;mov	ax,[bp-17]
 14000 00001D47 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 14001 00001D4A 31D2                    	XOR	DX,DX
 14002                                  	;div	word [bp-9]
 14003 00001D4C F776F7                  	DIV	RecSize
 14004                                  	;mov	[bp-19],ax
 14005 00001D4F 8946ED                  	MOV	cRecRes,AX
 14006                                  	;add	[bp-7],ax
 14007 00001D52 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 14008                                  	;adc	word [bp-5],0
 14009 00001D55 8356FB00                	ADC	RecPosH,0
 14010                                  
 14011                                  ; If we have not gotten the expected number of records, we signal an EOF
 14012                                  ; condition. On input, this is EOF. On output this is usually disk full.
 14013                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 14014                                  ; do we.
 14015                                  
 14016                                  	;cmp	ax,[bp-3]
 14017 00001D59 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 14018 00001D5C 7411                    	JZ	short TryBlank
 14019                                  	;test	byte [bp-20],4
 14020 00001D5E F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 14021 00001D62 7507                    	JNZ	short SetEOF
 14022                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14023                                  	; MSDOS 3.3
 14024                                  	;;test	word [es:di+5],80h
 14025                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14026                                  	;JNZ	short TryBlank
 14027                                  	; MSDOS 5.0 & MSDOS 6.0
 14028                                  	;test	byte [es:di+5],80h
 14029 00001D64 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 14030 00001D69 7504                    	jnz	short TryBlank
 14031                                  
 14032                                  SetEOF:
 14033                                  	;mov	byte [bp-1],1
 14034 00001D6B C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 14035                                  TryBlank:				;
 14036 00001D6F 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 14037 00001D71 7426                    	JZ	short SetExt
 14038                                  	;add	word [bp-7],1
 14039 00001D73 8346F901                	ADD	RecPosL,1		;	RecPos++;
 14040                                  	;adc	word [bp-5],0
 14041 00001D77 8356FB00                	ADC	RecPosH,0
 14042                                  	;test	byte [bp-20],4
 14043 00001D7B F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 14044 00001D7F 7418                    	JZ	short SetExt
 14045                                  	;inc	word [bp-19]
 14046 00001D81 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 14047                                  	;mov	byte [bp-1],3
 14048 00001D84 C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 14049                                  	;mov	cx,[bp-9]
 14050 00001D88 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 14051 00001D8B 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 14052 00001D8D 30C0                    	XOR	AL,AL
 14053                                  ;hkn; 	SS override
 14054 00001D8F 36C43E[2C03]            	les     di,[ss:DMAADD]
 14055                                  	;add	di,[bp-17]
 14056 00001D94 037EEF                  	ADD	DI,cResult
 14057 00001D97 F3AA                    	REP	STOSB			;   }	}
 14058                                  SetExt:
 14059                                  	;mov	dx,[bp-5]
 14060 00001D99 8B56FB                  	MOV	DX,RecPosH
 14061                                  	;mov	ax,[bp-7]
 14062 00001D9C 8B46F9                  	MOV	AX,RecPosL
 14063                                  	;test	byte [bp-20],2
 14064 00001D9F F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 14065 00001DA3 7406                    	JZ	short DoSetExt
 14066                                  	;test	byte [bp-20],8
 14067 00001DA5 F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 14068 00001DA9 7403                    	JZ	short TrySetRR
 14069                                  DoSetExt:
 14070 00001DAB E857FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 14071                                  TrySetRR:
 14072                                  	;test	byte [bp-20],8
 14073 00001DAE F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14074 00001DB2 740F                    	JZ	short TryReturn
 14075                                  	;mov	[si+21h],ax
 14076 00001DB4 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 14077                                  	;mov	[si+23h],dl
 14078 00001DB7 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 14079                                  	;cmp	word [si+0Eh],64
 14080 00001DBA 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 14081 00001DBE 7303                    	JAE	short TryReturn
 14082                                  	;mov	[si+24h],dh
 14083 00001DC0 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 14084                                  TryReturn: 
 14085                                  	;test	byte [bp-20],4
 14086 00001DC3 F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 14087 00001DC7 750B                    	JNZ	short FCBSave
 14088 00001DC9 1E                      	push	ds			;	FCB->FDate = date;
 14089 00001DCA E818ED                  	call	DATE16			;	FCB->FTime = time;
 14090 00001DCD 1F                      	pop	ds
 14091                                  	;mov	[si+14h],ax
 14092 00001DCE 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 14093                                  	;mov	[si+16h],dx
 14094 00001DD1 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 14095                                  FCBSave: 
 14096                                  	;test	byte [bp-20],8
 14097 00001DD4 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 14098 00001DD8 7409                    	jz	short DoReturn
 14099                                  	;mov	cx,[bp-19]
 14100 00001DDA 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 14101 00001DDD E8A5E6                  	call    Get_User_Stack
 14102                                  	;mov	[si+4],cx
 14103 00001DE0 894C04                  	MOV	[SI+user_env.user_CX],CX
 14104                                  DoReturn:
 14105                                  	;mov	al,[bp-1]
 14106 00001DE3 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 14107                                  	;Leave	
 14108 00001DE6 89EC                    	mov     sp,bp
 14109 00001DE8 5D                      	pop     bp
 14110 00001DE9 C3                      	retn
 14111                                  
 14112                                  ; 22/07/2018 - Retro DOS v3.0
 14113                                  
 14114                                  ;Break <$FCB_Open - open an old-style FCB>
 14115                                  ;---------------------------------------------------------------------------
 14116                                  ;
 14117                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 14118                                  ;	for us and asked to have the rest filled in.
 14119                                  ;
 14120                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14121                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14122                                  ;		FCB has the following fields filled in:
 14123                                  ;		    Time/Date Extent/NR Size
 14124                                  ;---------------------------------------------------------------------------
 14125                                  
 14126                                  _$FCB_OPEN:			; System call 15
 14127                                  
 14128 00001DEA B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 14129                                  
 14130                                  ;hkn; DOS_Open is in DOSCODE
 14131 00001DED B9[B82A]                	MOV	CX,DOS_OPEN
 14132                                  
 14133                                  ; The following is common code for Creation and openning of FCBs. AX is
 14134                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 14135                                  ; the FCB
 14136                                  
 14137                                  DoAccess:
 14138 00001DF0 1E                      	push	ds
 14139 00001DF1 52                      	push	dx
 14140 00001DF2 51                      	push	cx
 14141 00001DF3 50                      	push	ax			; save FCB pointer away
 14142                                  
 14143                                  ;hkn; 	OpenBuf is in DOSDATA
 14144 00001DF4 BF[BE03]                	MOV	DI,OPENBUF
 14145 00001DF7 E8534B                  	call	TransFCB		; crunch the fcb
 14146 00001DFA 58                      	pop	ax
 14147 00001DFB 59                      	pop	cx
 14148 00001DFC 5A                      	pop	dx
 14149 00001DFD 1F                      	pop	ds			; get fcb
 14150 00001DFE 7303                    	JNC	short FindFCB		; everything seems ok
 14151                                  FCBOpenErr:
 14152                                  	; AL has error code
 14153 00001E00 E951E8                  	jmp	FCB_RET_ERR
 14154                                  FindFCB:
 14155 00001E03 E819FE                  	call	GetExtended		; DS:SI will point to FCB
 14156                                  
 14157                                  	; 17/05/2019 - Retro DOS v4.0
 14158                                  
 14159                                  	; MSDOS 3.3
 14160                                  	;call	LRUFCB
 14161                                  	;jc	short HardMessage
 14162                                  
 14163                                  	; MSDOS 6.0
 14164 00001E06 50                      	push	ax
 14165 00001E07 B001                    	mov	al,1			;indicate Open/Create operation
 14166 00001E09 E82BFB                  	call	LRUFCB			; get a sft entry (no error)
 14167 00001E0C 58                      	pop	ax
 14168 00001E0D 722A                    	jc	short HardMessage
 14169                                  	
 14170                                  	;mov	word [es:di+2],8000h
 14171 00001E0F 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 14172 00001E15 1E                      	push	ds
 14173 00001E16 56                      	push	si	
 14174 00001E17 53                      	push	bx			; save fcb pointer
 14175 00001E18 89CE                    	MOV	SI,CX
 14176                                  
 14177                                  ;hkn; SS is DOSDATA
 14178 00001E1A 16                      	push	ss
 14179 00001E1B 1F                      	pop	ds			    ; let DOS_Open see variables
 14180 00001E1C FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 14181 00001E1E 5B                      	pop	bx
 14182 00001E1F 5E                      	pop	si
 14183 00001E20 1F                      	pop	ds			; get fcb
 14184                                  
 14185                                  ;hkn; SS override
 14186 00001E21 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 14187 00001E26 7318                    	JNC	short FCBOK		; operation succeeded
 14188                                  failopen:
 14189 00001E28 50                      	PUSH	AX
 14190 00001E29 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 14191 00001E2B E8DEFC                  	call	BlastSFT
 14192 00001E2E 58                      	POP	AX
 14193                                  	;cmp	ax,4
 14194 00001E2F 83F804                  	CMP	AX,error_too_many_open_files
 14195 00001E32 7405                    	JZ	short HardMessage
 14196                                  	;cmp	ax,24h
 14197 00001E34 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 14198 00001E37 7505                    	jnz	short DeadFCB
 14199                                  HardMessage:
 14200 00001E39 50                      	PUSH	AX
 14201 00001E3A E887FD                  	call	FCBHardErr
 14202 00001E3D 58                      	POP	AX
 14203                                  DeadFCB:
 14204                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14205                                  	;jmp	FCB_RET_ERR
 14206 00001E3E EBC0                    	jmp	short FCBOpenErr
 14207                                  FCBOK:
 14208                                  	; MSDOS 6.0
 14209 00001E40 E804F4                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 14210 00001E43 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 14211 00001E45 E8EF52                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 14212 00001E48 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 14213                                  ;SR;
 14214                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 14215                                  ; LocalSFT variable to reflect this.
 14216                                  
 14217 00001E4A 36893E[5D10]            	mov	[ss:LocalSFT],di
 14218 00001E4F 368C06[5F10]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 14219                                  ;;SR;
 14220                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 14221                                  ;;
 14222                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 14223                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 14224                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 14225                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 14226                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 14227                                  
 14228                                  FCBOK2:
 14229                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14230 00001E54 26FF05                  	inc	word [es:di]
 14231                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 14232 00001E57 E80FFA                  	call	SaveFCBInfo
 14233                                  	; MSDOS 3.3
 14234                                  	;call	SetOpenAge
 14235                                  	; MSDOS 6.0 (& MSDOS 3.3)
 14236                                  	;test	word [es:di+5],80h
 14237                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 14238 00001E5A 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 14239 00001E5F 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 14240 00001E61 8A04                    	MOV	AL,[SI]			; get drive byte
 14241 00001E63 E8724A                  	call	GETTHISDRV		; convert
 14242                                  	;INC	AL
 14243                                  	; 17/12/2022
 14244 00001E66 40                      	inc	ax
 14245 00001E67 8804                    	MOV	[SI],AL			; stash in good drive letter
 14246                                  
 14247                                  FCBNoDrive:
 14248                                  	;mov	word [si+0Eh],128
 14249 00001E69 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 14250                                  
 14251                                  	; 23/01/2024
 14252                                  	; (PCDOS 7.1 IBMDOS.COM)
 14253                                  	;;;
 14254                                  	;;mov	ax,[es:di+0Dh]
 14255                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 14256                                  	;;mov	[si+16h],ax
 14257                                  	;MOV	[SI+SYS_FCB.FTIME],AX
 14258                                  	;;mov	ax,[es:di+0Fh]
 14259                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 14260                                  	;;mov	[si+14h],ax
 14261                                  	;MOV	[SI+SYS_FCB.FDATE],AX
 14262                                  	;;mov	ax,[es:di+11h]
 14263                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 14264                                  	;;mov	[si+10h],ax
 14265                                  	;MOV	[SI+SYS_FCB.FILSIZ],AX
 14266                                  	;;mov	ax,[es:di+13h]
 14267                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 14268                                  	;;mov	[si+12h],ax
 14269                                  	;MOV	[SI+SYS_FCB.FILSIZ+2],AX
 14270                                  	;
 14271 00001E6E 06                      	push	es
 14272                                  	;les	ax,[es:di+0Dh]
 14273 00001E6F 26C4450D                	les	ax,[es:di+SF_ENTRY.sf_time]
 14274                                  	;mov	[si+16h],ax
 14275 00001E73 894416                  	mov	[si+SYS_FCB.FTIME],ax	; set time
 14276                                  	;mov	[si+14h],es
 14277 00001E76 8C4414                  	mov	[si+SYS_FCB.FDATE],es	; set date
 14278 00001E79 07                      	pop	es
 14279 00001E7A 06                      	push	es
 14280                                  	;les	ax,[es:di+11h]
 14281 00001E7B 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size] ; set size
 14282                                  	;mov	[si+10h],ax
 14283 00001E7F 894410                  	mov	[si+SYS_FCB.FILSIZ],ax
 14284                                  	;mov	[si+12h],ax
 14285 00001E82 8C4412                  	mov	[si+SYS_FCB.FILSIZ+2],es
 14286 00001E85 07                      	pop	es
 14287                                  	;;;
 14288                                  	
 14289 00001E86 31C0                    	XOR	AX,AX			; convenient zero
 14290                                  	;mov	[si+0Ch],ax
 14291 00001E88 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 14292                                  
 14293                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 14294                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 14295                                  
 14296                                  ;hkn; 	SS override
 14297 00001E8B 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 14298                                  	;mov	ah,[es:di+4]
 14299 00001E90 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 14300                                  OpenScan:
 14301                                  	;cmp	al,[si+18h]
 14302 00001E94 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 14303 00001E97 7407                    	JZ	short SkipCheck
 14304 00001E99 50                      	push	ax			; preserve count
 14305 00001E9A E885FC                  	call	CheckFCB		; do they match
 14306 00001E9D 58                      	pop	ax			; get count back
 14307 00001E9E 7309                    	JNC	short OpenFound		; found a match!
 14308                                  SkipCheck:
 14309 00001EA0 FEC0                    	INC	AL			; advance to next FCB
 14310 00001EA2 38E0                    	CMP	AL,AH			; table full?
 14311 00001EA4 75EE                    	JNZ	short OpenScan		; no, go for more
 14312                                  OpenDone:
 14313 00001EA6 30C0                    	xor	al,al			; return success
 14314 00001EA8 C3                      	retn
 14315                                  
 14316                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 14317                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 14318                                  ; Consider:
 14319                                  ;
 14320                                  ;   open (foo)	delete (foo) open (bar)
 14321                                  ;
 14322                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 14323                                  ; foo even though foo is no longer needed; this is due to the server closing
 14324                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 14325                                  ; If we were to CLOSE bar, the server would then close the only reference to
 14326                                  ; bar and subsequent I/O would be lost to the redirector.
 14327                                  ;
 14328                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 14329                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 14330                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 14331                                  ; around. This will allow us to access the same file through multiple network
 14332                                  ; connections and NOT prematurely terminate when the ref count on one
 14333                                  ; connection goes to zero.
 14334                                  
 14335                                  OpenFound:
 14336                                  	;mov	[si+18h],al
 14337 00001EA9 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 14338 00001EAC 26FF05                  	inc	word [es:di]
 14339                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14340                                  					; remember this new invocation
 14341                                  	; 24/01/2024
 14342 00001EAF 16                      	push	ss
 14343 00001EB0 1F                      	pop	ds
 14344                                  	
 14345                                  	;MOV	AX,[SS:FCBLRU]		; update LRU counts
 14346 00001EB1 A1[1000]                	mov	ax,[FCBLRU] ; 24/01/2024
 14347                                  	;mov	[es:di+15h],ax
 14348 00001EB4 26894515                	MOV	[ES:DI+sf_LRU],AX
 14349                                  ;
 14350                                  ; We have an FCB sft that is now of no use. We release sharing info and then
 14351                                  ; blast it to prevent other reuse.
 14352                                  ;
 14353                                  	;push	ss
 14354                                  	;pop	ds
 14355                                  
 14356 00001EB8 C43E[9E05]              	LES	DI,[THISSFT]
 14357 00001EBC 26FF0D                  	dec	word [es:di]
 14358                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 14359                                  					; free the newly allocated SFT
 14360 00001EBF E8A652                  	call	ShareEnd
 14361 00001EC2 B043                    	MOV	AL,'C'	 ; 43h
 14362 00001EC4 E845FC                  	call	BlastSFT
 14363 00001EC7 EBDD                    	JMP	short OpenDone
 14364                                  
 14365                                  ;BREAK	<$FCB_Create - create a new directory entry>
 14366                                  ;----------------------------------------------------------------------------
 14367                                  ;
 14368                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 14369                                  ;	FCB for us and asked to have the rest filled in.
 14370                                  ;
 14371                                  ;   Inputs:	DS:DX point to an unopenned FCB
 14372                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 14373                                  ;		FCB has the following fields filled in:
 14374                                  ;		    Time/Date Extent/NR Size
 14375                                  ;----------------------------------------------------------------------------
 14376                                  
 14377                                  _$FCB_CREATE:		; System call 22
 14378                                  
 14379                                  ;hkn; DOS_Create is in DOSCODE
 14380 00001EC9 B9[9229]                	MOV	CX,DOS_CREATE		; routine to call
 14381 00001ECC 31C0                    	XOR	AX,AX			; attributes to create
 14382 00001ECE E84EFD                  	call	GetExtended		; get extended FCB
 14383 00001ED1 7403                    	JZ	short DoAccessJ		; not an extended FCB
 14384 00001ED3 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 14385                                  DoAccessJ:
 14386 00001ED6 E917FF                  	JMP	DoAccess		; do dirty work
 14387                                  
 14388                                  ;============================================================================
 14389                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 14390                                  ;============================================================================
 14391                                  ; 22/07/2018 - Retro DOS v3.0
 14392                                  ; 17/05/2019 - Retro DOS v4.0
 14393                                  
 14394                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 14395                                  
 14396                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14397                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 14398                                  
 14399                                  ;**	Search.asm
 14400                                  ;----------------------------------------------------------------------------
 14401                                  ;	Directory search system calls.
 14402                                  ;	These will be passed direct text of the pathname from the user. 
 14403                                  ;	They will need to be passed through the macro expander prior to
 14404                                  ;	being sent through the low-level stuff. 
 14405                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 14406                                  ;
 14407                                  ;	$Dir_Search_First	  written
 14408                                  ;	$Dir_Search_Next	  written
 14409                                  ;	$Find_First	  written
 14410                                  ;	$Find_Next		  written
 14411                                  ;	PackName		  written
 14412                                  ;
 14413                                  ;	Modification history:
 14414                                  ;
 14415                                  ;	  Created: ARR 4 April 1983
 14416                                  
 14417                                  ;----------------------------------------------------------------------------
 14418                                  ; Procedure Name : $DIR_SEARCH_FIRST
 14419                                  ;
 14420                                  ; Inputs:
 14421                                  ;	DS:DX Points to unopenned FCB
 14422                                  ; Function:
 14423                                  ;	Directory is searched for first matching entry and the directory
 14424                                  ;	entry is loaded at the disk transfer address
 14425                                  ; Returns:
 14426                                  ;	AL = -1 if no entries matched, otherwise 0
 14427                                  ;----------------------------------------------------------------------------
 14428                                  
 14429                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14430                                  
 14431                                  	; 24/01/2024
 14432                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5DCBh
 14433                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5DDFh
 14434                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:647Bh
 14435                                  
 14436                                  _$DIR_SEARCH_FIRST:
 14437 00001ED9 368916[A605]            	MOV	[SS:THISFCB],DX
 14438 00001EDE 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14439 00001EE3 89D6                    	MOV	SI,DX
 14440 00001EE5 803CFF                  	CMP	BYTE [SI],0FFH
 14441 00001EE8 7503                    	JNZ	short NORMFCB4
 14442 00001EEA 83C607                  	ADD	SI,7			; Point to drive select byte
 14443                                  NORMFCB4:
 14444 00001EED FF34                    	push	word [SI]		; Save original drive byte for later
 14445                                  
 14446 00001EEF 16                      	push	ss
 14447 00001EF0 07                      	pop	es			; get es to address DOSGroup
 14448                                  
 14449 00001EF1 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14450 00001EF4 E8564A                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14451 00001EF7 7304                    	JNC	short SearchIt		; no error, go and look
 14452 00001EF9 5B                      	pop	bx			; Clean stack
 14453                                  
 14454                                  ; Error code is in AX
 14455                                  
 14456                                  	; 09/11/2022
 14457                                  dcf_errj:
 14458 00001EFA E957E7                  	jmp	FCB_RET_ERR		; error
 14459                                  
 14460                                  SearchIt:
 14461 00001EFD 16                      	push	ss
 14462 00001EFE 1F                      	pop	ds			; get ready for search
 14463                                  	;push	word [DMAADD]
 14464                                  	;push	word [DMAADD+2]
 14465                                  	; 24/01/2024
 14466 00001EFF C43E[2C03]              	les	di,[DMAADD]
 14467 00001F03 57                      	push	di
 14468 00001F04 06                      	push	es
 14469 00001F05 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14470 00001F0B 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14471                                  	; MSDOS 3.3
 14472                                  	;call	DOS_SEARCH_FIRST
 14473                                  	; MSDOS 6.0
 14474 00001F0F E86E0D                  	call	GET_FAST_SEARCH		; search
 14475 00001F12 8F06[2E03]              	pop	word [DMAADD+2]
 14476 00001F16 8F06[2C03]              	pop	word [DMAADD]
 14477 00001F1A 735C                    	JNC	short SearchSet		; no error, transfer info
 14478 00001F1C 5B                      	pop	bx			; Clean stack
 14479                                  
 14480                                  ; Error code is in AX
 14481                                  
 14482                                  	; 09/11/2022
 14483                                  	;jmp	FCB_RET_ERR
 14484 00001F1D EBDB                    	jmp	short dcf_errj
 14485                                  
 14486                                  ;----------------------------------------------------------------------------
 14487                                  ;
 14488                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14489                                  ;
 14490                                  ; Inputs:
 14491                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14492                                  ; Function:
 14493                                  ;	Directory is searched for the next matching entry and the directory
 14494                                  ;	entry is loaded at the disk transfer address
 14495                                  ; Returns:
 14496                                  ;	AL = -1 if no entries matched, otherwise 0
 14497                                  ;----------------------------------------------------------------------------
 14498                                  
 14499                                  	; 24/01/2024
 14500                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5E5Fh
 14501                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5E73h
 14502                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6517h
 14503                                  
 14504                                  _$DIR_SEARCH_NEXT:
 14505 00001F1F 368916[A605]            	MOV	[SS:THISFCB],DX
 14506 00001F24 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14507 00001F29 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14508 00001F2F 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14509                                  
 14510 00001F35 16                      	push	ss
 14511 00001F36 07                      	pop	es
 14512                                  
 14513 00001F37 BF[BE04]                	MOV	DI,SEARCHBUF
 14514                                  
 14515 00001F3A 89D6                    	MOV	SI,DX
 14516 00001F3C 803CFF                  	CMP	BYTE [SI],0FFh
 14517 00001F3F 750D                    	JNZ	short NORMFCB6
 14518 00001F41 83C606                  	ADD	SI,6
 14519 00001F44 AC                      	LODSB
 14520                                  
 14521 00001F45 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14522 00001F49 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14523                                  NORMFCB6:
 14524 00001F4E AC                      	LODSB				; Get original user drive byte
 14525 00001F4F 50                      	push	ax			; Put it on stack
 14526 00001F50 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14527 00001F53 AA                      	STOSB				; Put in correct place
 14528 00001F54 B90A00                  	MOV	CX,20/2
 14529 00001F57 F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14530                                  
 14531 00001F59 16                      	push	ss
 14532 00001F5A 1F                      	pop	ds
 14533                                  
 14534                                  	;push	word [DMAADD]
 14535                                  	;push	word [DMAADD+2]
 14536                                  	; 24/01/2024
 14537 00001F5B C43E[2C03]              	les	di,[DMAADD]
 14538 00001F5F 57                      	push	di
 14539 00001F60 06                      	push	es
 14540 00001F61 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14541 00001F67 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14542 00001F6B E80D0E                  	call	DOS_SEARCH_NEXT 	; Find it
 14543 00001F6E 8F06[2E03]              	pop	word [DMAADD+2]
 14544 00001F72 8F06[2C03]              	pop	word [DMAADD]
 14545 00001F76 7249                    	JC	short SearchNoMore
 14546                                  	; 24/01/2024
 14547                                  	;JMP	SearchSet		; Ok set return
 14548                                  
 14549                                  ;;;	; 24/01/2024
 14550                                  
 14551                                  ; The search was successful (or the search-next). We store the information
 14552                                  ; into the user's FCB for continuation.
 14553                                  
 14554                                  SearchSet:
 14555 00001F78 BE[BE04]                	MOV	SI,SEARCHBUF
 14556 00001F7B C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14557 00001F7F F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14558 00001F84 7403                    	JZ	short NORMFCB1
 14559 00001F86 83C707                  	ADD	DI,7			; Point past the extension
 14560                                  NORMFCB1:
 14561 00001F89 5B                      	pop	bx			; Get original drive byte
 14562 00001F8A 08DB                    	OR	BL,BL
 14563 00001F8C 7506                    	JNZ	short SearchDrv
 14564 00001F8E 8A1E[3603]              	MOV	BL,[CURDRV]
 14565 00001F92 FEC3                    	INC	BL
 14566                                  SearchDrv:
 14567 00001F94 AC                      	LODSB				; Get correct search contin drive byte
 14568 00001F95 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14569 00001F97 47                      	INC	DI
 14570                                  	;STOSB				; Store the correct "user" drive byte
 14571                                  					;  at the start of the search info
 14572 00001F98 B90A00                  	MOV	CX,20/2
 14573 00001F9B F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14574 00001F9D 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14575                                  					;   byte to AL
 14576 00001F9F AA                      	STOSB				; Search contin drive byte at end of
 14577                                  					;   contin info
 14578 00001FA0 C43E[2C03]              	LES	DI,[DMAADD]
 14579 00001FA4 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14580 00001FA9 740C                    	JZ	short NORMFCB2
 14581 00001FAB B0FF                    	MOV	AL,0FFh
 14582 00001FAD AA                      	STOSB
 14583 00001FAE FEC0                    	INC	AL
 14584                                  	;MOV	CX,5
 14585                                  	; 17/12/2022
 14586                                  	;mov	cl,5
 14587                                  	;REP	STOSB
 14588                                  	; 03/07/2024
 14589 00001FB0 AB                      	stosw
 14590 00001FB1 AB                      	stosw
 14591 00001FB2 AA                      	stosb
 14592 00001FB3 A0[6D05]                	MOV	AL,[SATTRIB]
 14593 00001FB6 AA                      	STOSB
 14594                                  NORMFCB2:
 14595 00001FB7 88D8                    	MOV	AL,BL			; User Drive byte
 14596 00001FB9 AA                      	STOSB
 14597                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14598                                  	; 17/12/2022
 14599 00001FBA B110                    	mov	cl,16
 14600 00001FBC F3A5                    	REP	MOVSW
 14601 00001FBE E990E6                  	jmp	FCB_RET_OK
 14602                                  ;;;
 14603                                  
 14604                                  SearchNoMore:
 14605 00001FC1 C43E[A605]              	LES	DI,[THISFCB]
 14606 00001FC5 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14607 00001FCA 7403                    	JZ	short NORMFCB8
 14608 00001FCC 83C707                  	ADD	DI,7			; Point past the extension
 14609                                  NORMFCB8:
 14610 00001FCF 5B                      	pop	bx			; Get original drive byte
 14611 00001FD0 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14612                                  					;  at the right spot
 14613                                  ; error code is in AX
 14614                                  
 14615 00001FD3 E97EE6                  	jmp	FCB_RET_ERR
 14616                                  
 14617                                  ; 17/05/2019 - Retro DOS v4.0
 14618                                  
 14619                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14620                                  
 14621                                  ;---------------------------------------------------------------------------
 14622                                  ;
 14623                                  ;   Procedure Name : $FIND_FIRST
 14624                                  ; 
 14625                                  ;   Assembler usage:
 14626                                  ;	    MOV AH, FindFirst
 14627                                  ;	    LDS DX, name
 14628                                  ;	    MOV CX, attr
 14629                                  ;	    INT 21h
 14630                                  ;	; DMA address has datablock
 14631                                  ;
 14632                                  ;   Error Returns:
 14633                                  ;	    AX = error_path_not_found
 14634                                  ;	       = error_no_more_files
 14635                                  ;---------------------------------------------------------------------------
 14636                                  
 14637                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14638                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14639                                  
 14640                                  	; 24/01/2024
 14641                                  	; DOSCODE:5EE6h (MSDOS 6.22, MSDOS.SYS)
 14642                                  
 14643                                  _$FIND_FIRST:
 14644 00001FD6 89D6                    	MOV	SI,DX			; get name in appropriate place
 14645 00001FD8 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14646                                  
 14647 00001FDD BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14648                                  
 14649 00001FE0 E8D049                  	call	TransPathSet		; convert the path
 14650 00001FE3 7305                    	JNC	short Find_it 		; no error, go and look
 14651                                  FindError:
 14652                                  	;mov	al,3
 14653 00001FE5 B003                    	mov	al,error_path_not_found	; error and map into one.
 14654                                  	; 09/11/2022
 14655                                  FF_errj:
 14656 00001FE7 E954E6                  	jmp	SYS_RET_ERR
 14657                                  Find_it:
 14658 00001FEA 16                      	push	ss
 14659 00001FEB 1F                      	pop	ds
 14660                                  
 14661                                  	;push	word [DMAADD]
 14662                                  	;push	word [DMAADD+2]
 14663                                  	; 24/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14664 00001FEC C43E[2C03]              	les	di,[DMAADD]
 14665 00001FF0 57                      	push	di
 14666 00001FF1 06                      	push	es
 14667 00001FF2 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14668 00001FF8 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14669                                  	; MSDOS 3.3
 14670                                  	;call	DOS_SEARCH_FIRST
 14671                                  	; MSDOS 6.0
 14672 00001FFC E8810C                  	call	GET_FAST_SEARCH 	; search
 14673 00001FFF 8F06[2E03]              	pop	word [DMAADD+2]
 14674 00002003 8F06[2C03]              	pop	word [DMAADD]
 14675                                  	
 14676                                  	; 16/12/2022
 14677                                  	;JNC	short FindSet 		; no error, transfer info
 14678 00002007 72DE                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14679                                  	;
 14680                                  	;jmp	SYS_RET_ERR
 14681                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14682                                  ;FFF_errj:
 14683                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14684                                  
 14685                                  FindSet:
 14686 00002009 BE[BE04]                	MOV	SI,SEARCHBUF
 14687 0000200C C43E[2C03]              	LES	DI,[DMAADD]
 14688 00002010 B91500                  	MOV	CX,21
 14689 00002013 F3A4                    	REP	MOVSB
 14690 00002015 56                      	PUSH	SI			; Save pointer to start of entry
 14691                                  	;mov	al,[si+0Bh]
 14692 00002016 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14693 00002019 AA                      	STOSB
 14694                                  	;add	si,16h ; 22
 14695 0000201A 83C616                  	ADD	SI,dir_entry.dir_time
 14696 0000201D A5                      	MOVSW				; dir_time
 14697 0000201E A5                      	MOVSW				; dir_date
 14698 0000201F 46                      	INC	SI
 14699 00002020 46                      	INC	SI			; Skip dir_first
 14700 00002021 A5                      	MOVSW				; dir_size (2 words)
 14701 00002022 A5                      	MOVSW
 14702 00002023 5E                      	POP	SI			; Point back to dir_name
 14703 00002024 E83300                   	CALL	PackName
 14704 00002027 E90BE6                  	jmp	SYS_RET_OK		; bye with no errors
 14705                                  
 14706                                  ;---------------------------------------------------------------------------
 14707                                  ;
 14708                                  ;   Procedure Name : $FIND_NEXT
 14709                                  ;
 14710                                  ;   Assembler usage:
 14711                                  ;	; dma points at area returned by find_first
 14712                                  ;	    MOV AH, findnext
 14713                                  ;	    INT 21h
 14714                                  ;	; next entry is at dma
 14715                                  ;
 14716                                  ;   Error Returns:
 14717                                  ;	    AX = error_no_more_files
 14718                                  ;---------------------------------------------------------------------------
 14719                                  
 14720                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14721                                  
 14722                                  	; 24/01/2024
 14723                                  	; DOSCODE:5F3Eh (MSDOS 6.22, MSDOS.SYS)
 14724                                  
 14725                                  _$FIND_NEXT:
 14726 0000202A 16                      	push	ss
 14727 0000202B 07                      	pop	es
 14728                                  
 14729 0000202C BF[BE04]                	MOV	DI,SEARCHBUF
 14730                                  
 14731 0000202F 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14732                                  
 14733 00002034 B91500                  	MOV	CX,21
 14734 00002037 F3A4                    	REP	MOVSB			; Put the search continuation info
 14735                                  					;  in the right place
 14736 00002039 16                      	push	ss
 14737 0000203A 1F                      	pop	ds			; get ready for search
 14738                                  	
 14739                                  	;push	word [DMAADD]
 14740                                  	;push	word [DMAADD+2]
 14741                                  	; 24/01/2024
 14742 0000203B C43E[2C03]              	les	di,[DMAADD]
 14743 0000203F 57                      	push	di
 14744 00002040 06                      	push	es
 14745 00002041 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14746 00002047 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14747 0000204B E82D0D                  	call	DOS_SEARCH_NEXT 	; Find it
 14748 0000204E 8F06[2E03]              	pop	word [DMAADD+2]
 14749 00002052 8F06[2C03]              	pop	word [DMAADD]
 14750 00002056 73B1                    	JNC	short FindSet 		; No error, set info
 14751                                  	;jmp	SYS_RET_ERR
 14752                                  	; 16/12/2022
 14753 00002058 EB8D                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14754                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14755                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14756                                  
 14757                                  ;---------------------------------------------------------------------------
 14758                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14759                                  ;
 14760                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14761                                  ;	the ASCIZ format.
 14762                                  ;
 14763                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14764                                  ;		(ES:DI) = destination area (13 bytes)
 14765                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14766                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14767                                  ;---------------------------------------------------------------------------
 14768                                  
 14769                                  	; 25/01/2024 - Retro DOS v4.1
 14770                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F5Ch
 14771                                  
 14772                                  PackName:
 14773                                  ;	Move over 8 characters to cover the name component, then trim it's
 14774                                  ;	trailing blanks.
 14775                                  
 14776                                  	;MOV	CX,8			; Pack the name
 14777                                  	;REP	MOVSB			; Move all of it
 14778                                  	; 25/01/2024
 14779 0000205A B90400                  	mov	cx,4
 14780 0000205D F3A5                    	rep	movsw
 14781                                  main_kill_tail:
 14782 0000205F 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14783 00002064 7507                    	JNZ	short find_check_dot
 14784 00002066 4F                      	DEC	DI			; Back up over trailing space
 14785 00002067 41                      	INC	CX
 14786 00002068 83F908                  	CMP	CX,8
 14787 0000206B 72F2                    	JB	short main_kill_tail
 14788                                  find_check_dot:
 14789                                  	;CMP	WORD [SI],(" " << 8) | " "
 14790 0000206D 813C2020                	cmp     word [si],2020h 
 14791 00002071 7506                    	JNZ	short got_ext 		; Some chars in extension
 14792 00002073 807C0220                	CMP	BYTE [SI+2]," "
 14793 00002077 740F                    	JZ	short find_done		; No extension
 14794                                  got_ext:
 14795 00002079 B02E                    	MOV	AL,"."	; 2Eh
 14796 0000207B AA                      	STOSB
 14797                                  	;MOV	CX,3
 14798                                  	;; 18/12/2022
 14799                                  	;;mov	cl,3
 14800                                  	;;REP	MOVSB
 14801                                  	;movsb
 14802                                  	;movsb
 14803                                  	;movsb
 14804                                  	; 25/01/2024
 14805 0000207C A5                      	movsw
 14806 0000207D A4                      	movsb
 14807                                  ext_kill_tail:
 14808 0000207E 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14809 00002083 7503                    	JNZ	short find_done
 14810 00002085 4F                      	DEC	DI			; Back up over trailing space
 14811 00002086 EBF6                    	JMP	short ext_kill_tail
 14812                                  find_done:
 14813 00002088 31C0                    	XOR	AX,AX
 14814 0000208A AA                      	STOSB				; NUL terminate
 14815 0000208B C3                      	retn
 14816                                  
 14817                                  ;---------------------------------------------------------------------------
 14818                                  
 14819                                  ; 24/01/2024
 14820                                  %if 0
 14821                                  	; 17/05/2019 - Retro DOS v4.0
 14822                                  GET_FAST_SEARCH:
 14823                                  	; 22/07/2018
 14824                                  	; MSDOS 6.0
 14825                                  	; 17/12/2022
 14826                                  	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14827                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14828                                  					;FO.trigger fastopen ;AN000;
 14829                                  	;call	DOS_SEARCH_FIRST
 14830                                  	;retn
 14831                                  	; 17/12/2022
 14832                                  	jmp	DOS_SEARCH_FIRST
 14833                                  %endif
 14834                                  
 14835                                  ;============================================================================
 14836                                  ; PATH.ASM, MSDOS 6.0, 1991
 14837                                  ;============================================================================
 14838                                  ; 06/08/2018 - Retro DOS v3.0
 14839                                  ; 17/05/2019 - Retro DOS v4.0
 14840                                  
 14841                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14842                                  
 14843                                  ;**	Directory related system calls. These will be passed direct text of the
 14844                                  ;	pathname from the user. They will need to be passed through the macro
 14845                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14846                                  ;	defined in DISPATCH. The system calls are:
 14847                                  ;
 14848                                  ;	$CURRENT_DIR  Written
 14849                                  ;	$RMDIR	  Written
 14850                                  ;	$CHDIR	  Written
 14851                                  ;	$MKDIR	  Written
 14852                                  ;
 14853                                  ;
 14854                                  ;	Modification history:
 14855                                  ;
 14856                                  ;	    Created: ARR 4 April 1983
 14857                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14858                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14859                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14860                                  ;				    current directory.
 14861                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14862                                  
 14863                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14864                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14865                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14866                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14867                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14868                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14869                                  ;	I_Need	cMeta,BYTE
 14870                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14871                                  
 14872                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14873                                  ;----------------------------------------------------------------------------
 14874                                  ;
 14875                                  ;   Procedure Name : $CURRENT_DIR
 14876                                  ;
 14877                                  ;   Assembler usage:
 14878                                  ;		LDS	SI,area
 14879                                  ;		MOV	DL,drive
 14880                                  ;		INT	21h
 14881                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14882                                  ;	    ; current directory.
 14883                                  ;   Error returns:
 14884                                  ;	    AX = error_invalid_drive
 14885                                  ;
 14886                                  ;----------------------------------------------------------------------------
 14887                                  
 14888                                  	; 06/08/2018 - Retro DOS v3.0
 14889                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14890                                  
 14891                                  	; 25/01/2024 - Retro DOS v4.1
 14892                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:5F9Ch
 14893                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:5FB0h
 14894                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:6664h
 14895                                  
 14896                                  _$CURRENT_DIR:
 14897 0000208C E858F2                  	call	ECritDisk
 14898 0000208F 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14899 00002091 E82848                  	call	GetVisDrv		; grab it
 14900 00002094 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14901                                  CurdirErr:
 14902 00002096 E869F2                  	call	LCritDisk
 14903                                  
 14904                                  	; MSDOS 3.3
 14905                                  	;mov	al,0Fh
 14906                                  	
 14907                                  	; MSDOS 6.0
 14908 00002099 1E                      	push	ds
 14909 0000209A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14910 0000209F A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14911 000020A2 1F                      	pop	ds
 14912                                  
 14913                                  curdir_errj:
 14914 000020A3 E998E5                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14915                                  
 14916                                  CurrentValidate:
 14917 000020A6 1E                      	push	ds			; save destination
 14918 000020A7 56                      	push	si
 14919                                  	
 14920                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14921                                  	
 14922                                  	; MSDOS 6.0
 14923 000020A8 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14924                                  	; 25/01/2024 (PCDOS 7.1 IBMDOS.COM)
 14925 000020AD C606[4C03]00            	mov	byte [NoSetDir],0 ; *
 14926                                  	
 14927                                  	; 25/01/2024
 14928                                  	;lds     si,[THISCDS]
 14929                                  
 14930                                  ; 16/12/2022
 14931                                  %if 0
 14932                                  	; 09/11/2022 (following test instruction is nonsense!)
 14933                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14934                                  
 14935                                  	;test	word [si+43h],8000h
 14936                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14937                                  	;jnz	short $+2  ; 09/11/2022	
 14938                                  	jnz	short DoCheck
 14939                                  %endif
 14940                                  
 14941                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14942                                  ; media check.
 14943                                  ;	CMP	word [SI+curdir.ID],0
 14944                                  ;	JZ	short GetDst
 14945                                  DoCheck:
 14946                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14947                                  
 14948                                  	; 25/01/2024
 14949                                  	; MSDOS 6.0
 14950                                  	;push	ds
 14951                                  	;mov	ds,[cs:DosDSeg]
 14952                                  	;mov	byte [NoSetDir],0 ; *
 14953                                  	;pop	ds
 14954                                  
 14955 000020B2 BF[BE03]                	MOV	DI,OPENBUF
 14956 000020B5 E85520                  	call	ValidateCDS		; output is ES:DI -> CDS
 14957                                  
 14958 000020B8 06                      	push	es	 		; swap source and destination
 14959 000020B9 57                      	push	di
 14960 000020BA 5E                      	pop	si
 14961 000020BB 1F                      	pop	ds
 14962                                  GetDst:
 14963 000020BC 5F                      	pop	di
 14964 000020BD 07                      	pop	es			; get real destination
 14965 000020BE 72D6                    	JC	short CurdirErr
 14966                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14967                                  	;
 14968                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14969                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14970                                  	; 16/12/2022
 14971                                  	;add	si,0  ; add si,curdir.text
 14972                                  	;
 14973                                  	;add	si,[si+4Fh] ; 17/05/2019
 14974 000020C0 03744F                  	ADD	SI,[SI+curdir.end]
 14975 000020C3 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14976 000020C6 7501                    	JNZ	short CurrentCopy
 14977 000020C8 46                      	INC	SI
 14978                                  CurrentCopy:
 14979                                  ;	call	FStrCpy
 14980                                  ;; 10/29/86 E5 char
 14981 000020C9 50                      	PUSH	AX
 14982 000020CA AC                      	LODSB				; get char
 14983 000020CB 08C0                    	OR	AL,AL
 14984 000020CD 7413                    	JZ	short FOK
 14985 000020CF 3C05                    	CMP	AL,05H
 14986 000020D1 740D                    	JZ	short FCHANGE
 14987 000020D3 EB01                    	JMP	short FFF
 14988                                  FCPYNEXT:
 14989 000020D5 AC                      	LODSB				; get char
 14990                                  FFF:
 14991 000020D6 3C5C                    	CMP	AL,'\'			; beginning of directory
 14992 000020D8 7508                    	JNZ	short FOK		; no
 14993 000020DA AA                      	STOSB				; put into user's buffer
 14994 000020DB AC                      	LODSB				; 1st char of dir is 05?
 14995 000020DC 3C05                    	CMP	AL,05H
 14996 000020DE 7502                    	JNZ	short FOK		; no
 14997                                  FCHANGE:
 14998 000020E0 B0E5                    	MOV	AL,0E5H			; make it E5
 14999                                  FOK:
 15000 000020E2 AA                      	STOSB				; put into user's buffer
 15001 000020E3 08C0                    	OR	AL,AL			; final char
 15002 000020E5 75EE                    	JNZ	short FCPYNEXT		; no
 15003 000020E7 58                      	POP	AX
 15004                                  
 15005                                  ;; 10/29/86 E5 char
 15006 000020E8 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 15007 000020EA E815F2                  	call	LCritDisk
 15008 000020ED E945E5                  	jmp	SYS_RET_OK		; no more, bye!
 15009                                  
 15010                                  ; 17/05/2019 - Retro DOS v4.0
 15011                                  
 15012                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 15013                                  
 15014                                  ;BREAK <$RmDir -- Remove a directory>
 15015                                  ;----------------------------------------------------------------------------
 15016                                  ;
 15017                                  ; Procedure Name : $RmDir
 15018                                  ;
 15019                                  ; Inputs:
 15020                                  ;	DS:DX Points to asciz name
 15021                                  ; Function:
 15022                                  ;	Delete directory if empty
 15023                                  ; Returns:
 15024                                  ;	STD XENIX Return
 15025                                  ;	AX = error_path_not_found If path bad
 15026                                  ;	AX = error_access_denied If
 15027                                  ;		Directory not empty
 15028                                  ;		Path not directory
 15029                                  ;		Root directory specified
 15030                                  ;		Directory malformed (. and .. not first two entries)
 15031                                  ;		User tries to delete a current directory
 15032                                  ;	AX = error_current_directory
 15033                                  ;
 15034                                  ;----------------------------------------------------------------------------
 15035                                  
 15036                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15037                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 15038                                  
 15039                                  _$RMDIR:
 15040 000020F0 52                      	push	dx			; Save ptr to name
 15041 000020F1 1E                      	push	ds
 15042 000020F2 89D6                    	mov	si,dx			; Load ptr into si
 15043 000020F4 BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 15044 000020F7 57                      	push	di
 15045 000020F8 E8C048                  	call	TransPathNoSet		; Translate the name
 15046 000020FB 5F                      	pop	di			; di = ptr to buf for trans name
 15047 000020FC 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 15048 000020FE 1F                      	pop	ds
 15049 000020FF 5A                      	pop	dx			; Restore the name
 15050                                  	;mov	al,3
 15051 00002100 B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 15052                                  	; 16/12/2022
 15053                                  rmdir_errj: ; 10/08/2018
 15054                                  chdir_errj:
 15055 00002102 EB9F                    	jmp	short curdir_errj
 15056                                  	;jmp	SYS_RET_ERR
 15057                                  rmlset:
 15058 00002104 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 15059 0000210A 7512                    	Jnz	short rmerr		;	return (-1);
 15060 0000210C 16                      	push	ss
 15061 0000210D 07                      	pop	es
 15062 0000210E 30C0                    	xor	al,al			; al = 0 , ie drive a:
 15063                                  rmloop: 
 15064 00002110 E81A48                  	call	GetCDSFromDrv		; Get curdir for drive in al
 15065 00002113 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 15066 00002115 E87CF0                  	call	StrCmp			; Are the 2 paths the same?
 15067 00002118 7404                    	jz	short rmerr		; Yes, report error.
 15068 0000211A FEC0                    	inc	al			; No, inc al to next drive number
 15069 0000211C EBF2                    	jmp	short rmloop		; Go check next drive.
 15070                                  rmerr:
 15071 0000211E 1F                      	pop	ds
 15072 0000211F 5A                      	pop	dx			; Restore the name
 15073                                  	;mov	al,10h
 15074 00002120 B010                    	mov	al,error_current_directory ; error
 15075                                  	; 16/12/2022
 15076                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15077                                  ;chdir_errj:
 15078 00002122 EBDE                    	jmp	short rmdir_errj
 15079                                  rmcont:
 15080 00002124 1F                      	pop	ds
 15081 00002125 5A                      	pop	dx			; Restore the name
 15082 00002126 BE[1C31]                	MOV	SI,DOS_RMDIR
 15083 00002129 EB7C                    	JMP	DoDirCall
 15084                                  
 15085                                  ; 17/05/2019 - Retro DOS v4.0
 15086                                  
 15087                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 15088                                  
 15089                                  ;BREAK <$ChDir -- Change current directory on a drive>
 15090                                  ;----------------------------------------------------------------------------
 15091                                  ;
 15092                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 15093                                  ; for setting up the CDS for the specified drive appropriately.  There are
 15094                                  ; several cases to consider:
 15095                                  ;
 15096                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 15097                                  ;	it into a WFP.	We verify the existance of this directory and then
 15098                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 15099                                  ;	directory cluster.
 15100                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 15101                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 15102                                  ;	WFP back into the CDS.
 15103                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 15104                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 15105                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 15106                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 15107                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 15108                                  ;	to process the path but to return the logical CDS and the logical
 15109                                  ;	path.  We then copy the logical path into the logical CDS.
 15110                                  ;
 15111                                  ; Inputs:
 15112                                  ;	DS:DX Points to asciz name
 15113                                  ; Returns:
 15114                                  ;	STD XENIX Return
 15115                                  ;	AX = chdir_path_not_found if error
 15116                                  ;
 15117                                  ;----------------------------------------------------------------------------
 15118                                  
 15119                                  _$CHDIR:
 15120 0000212B BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15121 0000212E 89D6                    	MOV	SI,DX			; get source
 15122 00002130 E87C48                  	call	TransPath		; go munge the path and get real CDS
 15123 00002133 7304                    	JNC	short ChDirCrack	; no errors, try path
 15124                                  ChDirErrP:
 15125                                  	;mov	al,3
 15126 00002135 B003                    	MOV	AL,error_path_not_found
 15127                                  ChDirErr:
 15128                                  	;jmp	SYS_RET_ERR 	; oops!
 15129                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15130 00002137 EBC9                    	jmp	short chdir_errj
 15131                                  
 15132                                  ChDirCrack:
 15133 00002139 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 15134 0000213E 75F5                    	JNZ	short ChDirErrP
 15135                                  
 15136                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 15137                                  ; found.
 15138                                  
 15139 00002140 C43E[A205]              	LES	DI,[THISCDS]
 15140 00002144 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 15141 00002147 74EC                    	JZ	short ChDirErrP		;	error ();
 15142                                  
 15143                                  ; Find out if the directory exists.
 15144                                  
 15145 00002149 E88E0F                  	call	DOS_CHDIR
 15146                                  	;Jc	short ChDirErr
 15147                                  	; 16/12/2022
 15148 0000214C 72B4                    	jc	short chdir_errj
 15149                                  ;
 15150                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 15151                                  ; not network). If one was seen, all we need to do is copy in the text
 15152                                  ;
 15153 0000214E C43E[A205]              	LES	DI,[THISCDS]
 15154                                  	;test	word [es:di+43h],2000h
 15155                                  	; 17/12/2022
 15156 00002152 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15157                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 15158 00002157 7425                    	JZ	short GotCDS
 15159                                  
 15160                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 15161                                  
 15162 00002159 06                      	push	es	
 15163 0000215A 57                      	push	di
 15164 0000215B 51                      	push	cx			; save CDS and cluster...
 15165 0000215C E826E3                  	call	Get_User_Stack		; get original text
 15166                                  	
 15167                                  	;mov	di,[si+6]
 15168 0000215F 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 15169                                  	;mov	ds,[si+0Eh]
 15170 00002162 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 15171                                  	
 15172 00002165 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 15173 00002168 87F7                    	XCHG	SI,DI
 15174 0000216A 30C0                    	XOR	AL,AL			; do no splicing
 15175 0000216C 57                      	push	di
 15176 0000216D E84B48                  	call	TransPathNoSet		; Munge path
 15177 00002170 5E                      	pop	si
 15178                                  
 15179                                  ; There should NEVER be an error here.
 15180                                  
 15181                                  ;IF FALSE
 15182                                  ;	JNC SKipErr
 15183                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 15184                                  ;SkipErr:
 15185                                  ;ENDIF
 15186 00002171 C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 15187                                  	;mov	word [es:di+49h],-1
 15188 00002175 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 15189                                  					; no valid cluster here...
 15190 0000217B 59                      	pop	cx
 15191 0000217C 5F                      	pop	di
 15192 0000217D 07                      	pop	es
 15193                                  
 15194                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 15195                                  
 15196                                  GotCDS:
 15197                                  
 15198                                  ; wfp_start points to the text. See if it is long enough
 15199                                  
 15200                                  	; MSDOS 3.3
 15201                                  	;push	ss
 15202                                  	;pop	ds
 15203                                  	;mov	si,[WFP_START]
 15204                                  	;push	cx
 15205                                  	;call	DStrLen
 15206                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 15207                                  	;pop	cx
 15208                                  	;ja	short ChDirErrP
 15209                                  
 15210                                  	; MSDOS 6.0
 15211 0000217E E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 15212 00002181 77B2                    	JA	short ChDirErrP
 15213                                  	; MSDOS 3.3 & MSDOS 6.0
 15214                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 15215                                  	; 17/12/2022
 15216 00002183 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 15217 00002188 7512                    	JNZ	short SkipRecency
 15218                                  	; MSDOS 6.0
 15219                                  	;test	word [es:di+43h],2000h
 15220                                  	; 17/12/2022
 15221 0000218A 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 15222                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 15223                                  					;PTM. for Join and Subst ;AN000;
 15224 0000218F 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 15225 00002191 B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 15226                                  setdirclus:
 15227                                  	;mov	[es:di+49h],cx
 15228 00002194 26894D49                	MOV	[ES:DI+curdir.ID],CX
 15229 00002198 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 15230                                  SkipRecency:
 15231 0000219C E826F0                  	call	FStrCpy
 15232 0000219F 30C0                    	XOR	AL,AL
 15233                                  mkdir_ok:
 15234 000021A1 E991E4                  	jmp	SYS_RET_OK
 15235                                  
 15236                                  ; 17/05/2019 - Retro DOS v4.0
 15237                                  
 15238                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 15239                                  
 15240                                  ;BREAK <$MkDir - Make a directory entry>
 15241                                  ;---------------------------------------------------------------------------
 15242                                  ;
 15243                                  ; Procedure Name : $MkDir
 15244                                  ; Inputs:
 15245                                  ;	DS:DX Points to asciz name
 15246                                  ; Function:
 15247                                  ;	Make a new directory
 15248                                  ; Returns:
 15249                                  ;	STD XENIX Return
 15250                                  ;	AX = mkdir_path_not_found if path bad
 15251                                  ;	AX = mkdir_access_denied  If
 15252                                  ;		Directory cannot be created
 15253                                  ;		Node already exists
 15254                                  ;		Device name given
 15255                                  ;		Disk or directory(root) full
 15256                                  ;---------------------------------------------------------------------------
 15257                                  
 15258                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15259                                  
 15260                                  _$MKDIR:
 15261 000021A4 BE[F92F]                	MOV	SI,DOS_MKDIR
 15262                                  DoDirCall:
 15263 000021A7 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 15264                                  
 15265 000021AA 56                      	push	si
 15266 000021AB 89D6                    	MOV	SI,DX			; get source
 15267 000021AD E8FF47                  	call	TransPath		; go munge the path
 15268 000021B0 5E                      	pop	si
 15269 000021B1 7305                    	JNC	short MkDirCrack	; no errors, try path
 15270                                  MkErrP:
 15271 000021B3 B003                    	MOV	AL,error_path_not_found	; oops!
 15272                                  MkErr:
 15273 000021B5 E986E4                  	jmp	SYS_RET_ERR
 15274                                  MkDirCrack:
 15275 000021B8 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 15276 000021BE 75F3                    	JNZ	short MkErrP
 15277                                  
 15278                                  	; MSDOS 3.3
 15279                                  	;push	ss
 15280                                  	;pop	ds
 15281                                  	;call	si
 15282                                  	;jb	short MkErr
 15283                                  	;;jmp	short mkdir_ok
 15284                                  	;jmp	SYS_RET_OK
 15285                                  
 15286                                  	; MSDOS 6.0
 15287 000021C0 56                      	PUSH	SI			;PTM.			;AN000;
 15288 000021C1 E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 15289 000021C4 5E                      	POP	SI			;PTM.			;AN000;
 15290 000021C5 7604                    	JBE	short pathok		;PTM.			;AN000;
 15291                                  	;mov	al,5
 15292 000021C7 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 15293                                  	;jmp	SYS_RET_ERR		;PTM.
 15294 000021C9 EBEA                    	jmp	short MkErr
 15295                                  pathok:
 15296 000021CB FFD6                    	CALL	SI			; go get file
 15297 000021CD 72E6                    	JC	short MkErr		; no errors
 15298                                  	; 16/12/2022
 15299                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15300 000021CF EBD0                    	jmp	short mkdir_ok
 15301                                  	;jmp	SYS_RET_OK
 15302                                  
 15303                                  ;----------------------------------------------------------------------------
 15304                                  ;
 15305                                  ; Procedure Name : Check_PathLen
 15306                                  ;
 15307                                  ; Inputs:
 15308                                  ;	nothing
 15309                                  ; Function:
 15310                                  ;	check if final path length greater than 67
 15311                                  ; Returns:
 15312                                  ;	Above flag set if > 67
 15313                                  ;
 15314                                  ;---------------------------------------------------------------------------
 15315                                  
 15316                                  Check_PathLen:
 15317                                  	; 09/09/2018
 15318                                  	;mov	SI,[WFP_START]
 15319 000021D1 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 15320                                  Check_PathLen2:
 15321 000021D6 16                      	push	ss
 15322 000021D7 1F                      	pop	ds
 15323                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 15324 000021D8 51                      	push	CX	
 15325 000021D9 E800F0                  	CALL	DStrLen
 15326 000021DC 83F943                  	CMP	CX,DIRSTRLEN ; 67
 15327 000021DF 59                      	POP	CX
 15328 000021E0 C3                      	retn
 15329                                  
 15330                                  ;============================================================================
 15331                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 15332                                  ;============================================================================
 15333                                  ; 07/08/2018 - Retro DOS v3.0
 15334                                  ; 17/05/2019 - Retro DOS v4.0
 15335                                  
 15336                                  ;**	IOCTL system call.
 15337                                  ;----------------------------------------------------------------------------
 15338                                  ;	$IOCTL
 15339                                  ;
 15340                                  ;	  Revision history:
 15341                                  ;
 15342                                  ;		Created: ARR 4 April 1983
 15343                                  ;
 15344                                  ;		GenericIOCTL added:		KGS	22 April 1985
 15345                                  ;
 15346                                  ;		A000	version 4.00	Jan. 1988
 15347                                  ;
 15348                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 15349                                  ;
 15350                                  
 15351                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 15352                                  ;---------------------------------------------------------------------------
 15353                                  ;
 15354                                  ;   Assembler usage:
 15355                                  ;	    MOV     BX, Handle
 15356                                  ;	    MOV     DX, Data
 15357                                  ;
 15358                                  ;	(or LDS     DX,BUF
 15359                                  ;	    MOV     CX,COUNT)
 15360                                  ;
 15361                                  ;	    MOV     AH, Ioctl
 15362                                  ;	    MOV     AL, Request
 15363                                  ;	    INT     21h
 15364                                  ;
 15365                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 15366                                  ;	    attribute word in DX, handle in BX:
 15367                                  ;	    DH = high word of device driver attributes
 15368                                  ;	    DL = low byte of sf_flags
 15369                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 15370                                  ;	    in BX.
 15371                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 15372                                  ;	    into DS:DX.  Return number read in AX.
 15373                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 15374                                  ;	    DS:DX.  Return bytes written in AX.
 15375                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 15376                                  ;	    into DS:DX.  Return number read in AX.
 15377                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 15378                                  ;	    DS:DX.  Return bytes written in AX.
 15379                                  ;	 6  Return input status of handle in BX. If a read will go to the
 15380                                  ;	    device, AL = 0FFh, otherwise 0.
 15381                                  ;	 7  Return output status of handle in BX. If a write will go to the
 15382                                  ;	    device, AL = 0FFh, otherwise 0.
 15383                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 15384                                  ;	    removable media, 0 otherwise.
 15385                                  ;	 9  Return the contents of the device attribute word in DX for the
 15386                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 15387                                  ;	    network. 8000h is the bit for local use.
 15388                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 15389                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 15390                                  ;	    the count and CX is the delay.
 15391                                  ;
 15392                                  ;   Error returns:
 15393                                  ;	    AX = error_invalid_handle
 15394                                  ;	       = error_invalid_function
 15395                                  ;	       = error_invalid_data
 15396                                  ;
 15397                                  ;-------------------------------------------------------------------------------
 15398                                  ;
 15399                                  ;   This is the documentation copied from DOS 4.0 it is much better
 15400                                  ;   than the above
 15401                                  ;
 15402                                  ;	There are several basic forms of IOCTL calls:
 15403                                  ;
 15404                                  ;
 15405                                  ;	** Get/Set device information:	**
 15406                                  ;
 15407                                  ;	ENTRY	(AL) = function code
 15408                                  ;		  0 - Get device information
 15409                                  ;		  1 - Set device information
 15410                                  ;		(BX) = file handle
 15411                                  ;		(DX) = info for "Set Device Information"
 15412                                  ;	EXIT	'C' set if error
 15413                                  ;		  (AX) = error code
 15414                                  ;		'C' clear if OK
 15415                                  ;		  (DX) = info for "Get Device Information"
 15416                                  ;	USES	ALL
 15417                                  ;
 15418                                  ;
 15419                                  ;	**  Read/Write Control Data From/To Handle  **
 15420                                  ;
 15421                                  ;	ENTRY	(AL) = function code
 15422                                  ;		  2 - Read device control info
 15423                                  ;		  3 - Write device control info
 15424                                  ;		(BX) = file handle
 15425                                  ;		(CX) = transfer count
 15426                                  ;		(DS:DX) = address for data
 15427                                  ;	EXIT	'C' set if error
 15428                                  ;		  (AX) = error code
 15429                                  ;		'C' clear if OK
 15430                                  ;		  (AX) = count of bytes transfered
 15431                                  ;	USES	ALL
 15432                                  ;
 15433                                  ;
 15434                                  ;	**  Read/Write Control Data From/To Block Device  **
 15435                                  ;
 15436                                  ;	ENTRY	(AL) = function code
 15437                                  ;		  4 - Read device control info
 15438                                  ;		  5 - Write device control info
 15439                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15440                                  ;		(CX) = transfer count
 15441                                  ;		(DS:DX) = address for data
 15442                                  ;	EXIT	'C' set if error
 15443                                  ;		  (AX) = error code
 15444                                  ;		'C' clear if OK
 15445                                  ;		  (AX) = count of bytes transfered
 15446                                  ;	USES	ALL
 15447                                  ;
 15448                                  ;
 15449                                  ;	**  Get Input/Output Status  **
 15450                                  ;
 15451                                  ;	ENTRY	(AL) = function code
 15452                                  ;		  6 - Get Input status
 15453                                  ;		  7 - Get Output Status
 15454                                  ;		(BX) = file handle
 15455                                  ;	EXIT	'C' set if error
 15456                                  ;		  (AX) = error code
 15457                                  ;		'C' clear if OK
 15458                                  ;		  (AL) = 00 if not ready
 15459                                  ;		  (AL) = FF if ready
 15460                                  ;	USES	ALL
 15461                                  ;
 15462                                  ;
 15463                                  ;	**  Get Drive Information  **
 15464                                  ;
 15465                                  ;	ENTRY	(AL) = function code
 15466                                  ;		  8 - Check for removable media
 15467                                  ;		  9 - Get device attributes
 15468                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 15469                                  ;	EXIT	'C' set if error
 15470                                  ;		  (AX) = error code
 15471                                  ;		'C' clear if OK
 15472                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 15473                                  ;		  (DX) = device attribute word (func. 9)
 15474                                  ;	USES	ALL
 15475                                  ;
 15476                                  ;
 15477                                  ;	**  Get Redirected bit	**
 15478                                  ;
 15479                                  ;	ENTRY	(AL) = function code
 15480                                  ;		  0Ah - Network stuff
 15481                                  ;		(BX) = file handle
 15482                                  ;	EXIT	'C' set if error
 15483                                  ;		  (AX) = error code
 15484                                  ;		'C' clear if OK
 15485                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15486                                  ;	USES	ALL
 15487                                  ;
 15488                                  ;
 15489                                  ;	**  Change sharer retry parameters  **
 15490                                  ;
 15491                                  ;	ENTRY	(AL) = function code
 15492                                  ;		  0Bh - Set retry parameters
 15493                                  ;		(CX) = retry loop count
 15494                                  ;		(DX) = number of retries
 15495                                  ;	EXIT	'C' set if error
 15496                                  ;		  (AX) = error code
 15497                                  ;		'C' clear if OK
 15498                                  ;	USES	ALL
 15499                                  ;
 15500                                  ;
 15501                                  ;   =================================================================
 15502                                  ;
 15503                                  ;	**  New Standard Control  **
 15504                                  ;
 15505                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15506                                  ;	FORMS ARE OBSOLETE.
 15507                                  ;
 15508                                  ;   =================================================================
 15509                                  ;
 15510                                  ;	ENTRY	(AL) = function code
 15511                                  ;		  0Ch - Control Function subcode
 15512                                  ;		(BX) = File Handle
 15513                                  ;		(CH) = Category Indicator
 15514                                  ;		(CL) = Function within category
 15515                                  ;		(DS:DX) = address for data, if any
 15516                                  ;		(SI) = Passed to device as argument, use depends upon function
 15517                                  ;		(DI) = Passed to device as argument, use depends upon function
 15518                                  ;	EXIT	'C' set if error
 15519                                  ;		  (AX) = error code
 15520                                  ;		'C' clear if OK
 15521                                  ;		  (SI) = Return value, meaning is function dependent
 15522                                  ;		  (DI) = Return value, meaning is function dependent
 15523                                  ;		  (DS:DX) = Return address, use is function dependent
 15524                                  ;	USES	ALL
 15525                                  ;
 15526                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15527                                  ;     (See inc\ioctl.inc for more info)
 15528                                  ;
 15529                                  ;	ENTRY	(AL) = function code
 15530                                  ;		  0Dh - Control Function subcode
 15531                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15532                                  ;		(CH) = Category Indicator
 15533                                  ;		(CL) = Function within category
 15534                                  ;		(DS:DX) = address for data, if any
 15535                                  ;		(SI) = Passed to device as argument, use depends upon function
 15536                                  ;		(DI) = Passed to device as argument, use depends upon function
 15537                                  ;
 15538                                  ;	EXIT	'C' set if error
 15539                                  ;		  (AX) = error code
 15540                                  ;		'C' clear if OK
 15541                                  ;		  (DS:DX) = Return address, use is function dependent
 15542                                  ;	USES	ALL
 15543                                  ;
 15544                                  ;---------------------------------------------------------------------------
 15545                                  	
 15546                                  	; 17/05/2019 - Retro DOS v4.0
 15547                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15548                                  
 15549                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15550                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15551                                  
 15552                                  IOCTLJMPTABLE:	;label	word
 15553                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15554 000021E1 [1D22]                  	dw	ioctl_getset_data	; 0
 15555 000021E3 [1D22]                  	dw	ioctl_getset_data   	; 1
 15556 000021E5 [6D22]                  	dw	ioctl_control_string	; 2
 15557 000021E7 [6D22]                  	dw	ioctl_control_string	; 3
 15558 000021E9 [BB23]                  	dw	ioctl_get_dev		; 4
 15559 000021EB [BB23]                  	dw	ioctl_get_dev		; 5
 15560 000021ED [8722]                  	dw	ioctl_status		; 6
 15561 000021EF [8722]                  	dw	ioctl_status		; 7
 15562 000021F1 [2823]                  	dw	ioctl_rem_media		; 8
 15563 000021F3 [6323]                  	dw	ioctl_drive_attr	; 9
 15564 000021F5 [AD23]                  	dw	ioctl_handle_redir	; A
 15565 000021F7 [A322]                  	dw	Set_Retry_Parameters	; B
 15566 000021F9 [B122]                  	dw	GENERICIOCTLHANDLE	; C
 15567 000021FB [C822]                  	dw	GENERICIOCTL		; D
 15568                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15569 000021FD [5E24]                  	dw	ioctl_drive_owner	; E
 15570 000021FF [5E24]                  	dw	ioctl_drive_owner	; F
 15571                                  	; MSDOS 6.0
 15572 00002201 [B122]                  	dw	query_handle_support	; 10h
 15573 00002203 [C822]                  	dw	query_device_support	; 11h
 15574                                  
 15575                                  	; 11/11/2022
 15576                                  _$IOCTL:
 15577 00002205 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15578 00002207 16                      	push	ss
 15579 00002208 1F                      	pop	ds			;hkn; SS is DOSDATA
 15580                                  
 15581                                  	; MSDOS 3.3
 15582                                  	;cmp	al,0Fh 
 15583                                  	; MSDOS 6.0
 15584 00002209 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15585 0000220B 770D                    	ja	short ioctl_bad_funj2	; if not bad function #
 15586                                  
 15587                                  	; 14/01/2024
 15588                                  	; 28/05/2019
 15589                                  	;push	AX	; 14/01/2024	; Need to save AL for generic IOCTL
 15590 0000220D 89C7                    	mov	di,ax			; di NOT a PARM
 15591 0000220F 81E7FF00                	and	di,0FFh			; di = al
 15592 00002213 D1E7                    	shl	di,1			; di = index into jmp table
 15593                                  	;pop	AX			; Restore AL for generic IOCTL
 15594                                  
 15595 00002215 2EFFA5[E121]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15596                                  
 15597                                  ioctl_bad_funj2:
 15598 0000221A E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15599                                  
 15600                                  ;--------------------------------------------------------------------------
 15601                                  ;
 15602                                  ; IOCTL: AL = 0,1
 15603                                  ;
 15604                                  ; ENTRY: DS = DOSDATA
 15605                                  ;
 15606                                  ;--------------------------------------------------------------------------
 15607                                  
 15608                                  ioctl_getset_data:
 15609                                  	; MSDOS 6.0
 15610 0000221D E8A942                  	call	SFFromHandle		; ES:DI -> SFT
 15611 00002220 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15612                                  ioctl_bad_handle:
 15613                                  	;mov	al,6
 15614 00002222 B006                    	mov	al,error_invalid_handle
 15615                                  ioctl_error:
 15616 00002224 E917E4                  	jmp	SYS_RET_ERR
 15617                                  
 15618                                  ioctl_check_permissions:
 15619 00002227 3C00                    	CMP	AL,0
 15620                                  	;mov	al,[es:di+5]
 15621 00002229 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15622 0000222D 741B                    	JZ	short ioctl_read	; read the byte
 15623                                  
 15624 0000222F 08F6                    	or	dh,dh
 15625 00002231 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15626                                  	;mov	al,0Dh
 15627 00002233 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15628                                  	;jmp	SYS_RET_ERR
 15629 00002235 EBED                    	jmp	short ioctl_error
 15630                                  
 15631                                  ioctl_check_device:
 15632 00002237 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15633 00002239 74DF                    	jz	short ioctl_bad_funj2
 15634 0000223B 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15635                                  					;   device bit!! He can muck with the
 15636                                  					;   others at will.
 15637 0000223E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15638 00002243 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15639                                  ioctl_ok:
 15640 00002247 E9EBE3                  	jmp	SYS_RET_OK
 15641                                  
 15642                                  ioctl_read:
 15643 0000224A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15644 0000224F 30E4                    	XOR	AH,AH
 15645 00002251 A880                    	test	AL,devid_device 	; Should I set high byte
 15646 00002253 740D                    	JZ	short ioctl_no_high	; no
 15647 00002255 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15648                                  	;les	di,[es:di+7]
 15649 0000225A 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15650                                  	;mov	ah,[es:di+5]
 15651 0000225E 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15652                                  ioctl_no_high:
 15653 00002262 89C2                    	MOV	DX,AX
 15654                                  ioctl_set_dx:	; 16/12/2022
 15655 00002264 E81EE2                  	call	Get_User_Stack
 15656                                  	;mov	[si+6],dx
 15657 00002267 895406                  	MOV	[SI+user_env.user_DX],DX
 15658                                  	;;jmp	SYS_RET_OK
 15659                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15660                                  ioctl_ok_j:
 15661                                  	; 16/12/2022
 15662 0000226A E9CBE3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15663                                  	;jmp	short ioctl_ok
 15664                                  	; 26/07/2019
 15665                                  	;jmp	SYS_RET_OK_clc
 15666                                  
 15667                                  ;--------------------------------------------------------------------------
 15668                                  ;
 15669                                  ; IOCTL: AL = 2,3
 15670                                  ;
 15671                                  ; ENTRY: DS = DOSDATA
 15672                                  ;	 SI = user's DS
 15673                                  ;
 15674                                  ;--------------------------------------------------------------------------
 15675                                  
 15676                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15677                                  ioctl_control_string:
 15678 0000226D E85942                  	call	SFFromHandle		; ES:DI -> SFT
 15679 00002270 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15680                                  	; 07/12/2022
 15681                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15682                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15683                                  	; MSDOS 5.0 & MSDOS 6.0
 15684 00002272 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15685 00002277 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15686 00002279 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15687 0000227E 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15688 00002282 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15689 00002284 E93C01                  	JMP	ioctl_do_string
 15690                                  
 15691                                  ;--------------------------------------------------------------------------
 15692                                  ;
 15693                                  ; IOCTL: AL = 6,7
 15694                                  ;
 15695                                  ; ENTRY: DS = DOSDATA
 15696                                  ;
 15697                                  ;--------------------------------------------------------------------------
 15698                                  
 15699                                  ioctl_status:
 15700 00002287 B401                    	MOV	AH,1
 15701 00002289 2C06                    	SUB	AL,6			; 6=0,7=1
 15702 0000228B 7402                    	JZ	short ioctl_get_status
 15703 0000228D B403                    	MOV	AH,3
 15704                                  ioctl_get_status:
 15705 0000228F 50                      	PUSH	AX
 15706 00002290 E8B212                  	call	GET_IO_SFT
 15707 00002293 58                      	POP	AX
 15708                                  	;JNC	short DO_IOFUNC
 15709                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15710                                  	; 16/12/2022
 15711 00002294 728C                    	jc	short ioctl_bad_handle
 15712                                  DO_IOFUNC:
 15713 00002296 E8A720                  	call	IOFUNC
 15714 00002299 88C4                    	MOV	AH,AL
 15715 0000229B B0FF                    	MOV	AL,0FFH
 15716                                  	;JNZ	short ioctl_status_ret
 15717                                  	; 29/01/2024
 15718 0000229D 75A8                    	jnz	short ioctl_ok
 15719 0000229F FEC0                    	INC	AL
 15720                                  ioctl_status_ret:
 15721                                  	;jmp	SYS_RET_OK
 15722                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15723                                  	;jmp	short ioctl_ok_j
 15724                                  	; 16/12/2022
 15725 000022A1 EBA4                    	jmp	short ioctl_ok
 15726                                  
 15727                                  ;--------------------------------------------------------------------------
 15728                                  ;
 15729                                  ; IOCTL: AL = B
 15730                                  ;
 15731                                  ; ENTRY: DS = DOSDATA
 15732                                  ;
 15733                                  ;--------------------------------------------------------------------------
 15734                                  
 15735                                  Set_Retry_Parameters:
 15736                                  	; 09/09/2018
 15737 000022A3 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15738 000022A7 09D2                    	OR	DX,DX			; zero retries not allowed
 15739 000022A9 7475                    	JZ	short ioctl_bad_fun
 15740 000022AB 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15741                                  doneok:
 15742                                  	;jmp	SYS_RET_OK		; Done
 15743                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15744                                  	;jmp	short ioctl_status_ret
 15745                                  	; 16/12/2022
 15746 000022AF EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15747                                  
 15748                                  ;--------------------------------------------------------------------------
 15749                                  ;
 15750                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15751                                  ;
 15752                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15753                                  ;	SI:DX -> Users Device Parameter Table
 15754                                  ;	IOCALL -> IOCTL_Req structure
 15755                                  ;
 15756                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15757                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15758                                  ;	call.
 15759                                  ;
 15760                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15761                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15762                                  ;         return address off the stack if the drive is invalid.
 15763                                  ;
 15764                                  ;--------------------------------------------------------------------------
 15765                                  
 15766                                  query_handle_support:	; Entry point for handles
 15767                                  GENERICIOCTLHANDLE:
 15768 000022B1 E81542                  	call	SFFromHandle		; Get SFT for device.
 15769 000022B4 726F                    	jc	short ioctl_bad_handlej
 15770                                  
 15771                                  	;test	word [es:di+5],8000h
 15772                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15773                                  	;test	byte [es:di+6],80h
 15774 000022B6 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15775 000022BB 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15776                                  
 15777 000022BD C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15778                                  	;les	di,[es:di+7]
 15779 000022C2 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15780 000022C6 EB0F                    	jmp	short Do_GenIOCTL
 15781                                  
 15782                                  query_device_support:	; Entry point for devices:
 15783                                  GENERICIOCTL:
 15784 000022C8 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15785 000022CD 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15786 000022D0 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15787                                  
 15788 000022D2 E87A01                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15789 000022D5 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15790                                  
 15791                                  Do_GenIOCTL:
 15792                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15793                                  					; Can device handle Generic IOCTL funcs
 15794                                  	; 09/09/2018
 15795                                  	;test	byte [es:di+4],40h
 15796 000022D7 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15797 000022DC 7442                    	jz	short ioctl_bad_fun
 15798                                  
 15799                                  	; 17/05/2019 - Retro DOS v4.0
 15800                                  
 15801                                  	; MSDOS 6.0
 15802                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15803 000022DE C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15804                                  	;cmp	al,10h
 15805 000022E3 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15806 000022E5 7C0C                    	jl	short SetIOCtlBlock
 15807                                  	
 15808                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15809                                  	;test	byte [es:di+4],80h 
 15810 000022E7 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15811 000022EC 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15812                                  	;
 15813                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15814 000022EE C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15815                                  
 15816                                  SetIOCtlBlock:
 15817 000022F3 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15818 000022F4 57                      	PUSH	DI			; in DS:SI
 15819                                  					; Setup Generic IOCTL Request Block
 15820                                  	;mov	byte [IOCALL_REQLEN],23
 15821 000022F5 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15822                                  	; 07/09/2018 (MSDOS 3.3)
 15823                                  	;;mov	byte [IOCALL_REQFUNC],19
 15824                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15825                                  	;
 15826 000022FA 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15827 000022FE 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15828 00002302 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15829 00002306 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15830 0000230A 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15831 0000230E 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15832 00002312 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15833                                  
 15834                                  ;hkn; IOCALL is in DOSDATA
 15835 00002316 BB[7C03]                	MOV	BX,IOCALL
 15836                                  
 15837 00002319 16                      	PUSH	SS
 15838 0000231A 07                      	POP	ES
 15839                                  					; DS:SI -> Device header.
 15840 0000231B 5E                      	POP	SI
 15841 0000231C 1F                      	POP	DS
 15842                                  	; 10/08/2018
 15843 0000231D E9DC00                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15844                                  
 15845                                  ioctl_bad_fun:
 15846 00002320 B001                    	mov	al, error_invalid_function  ; 1
 15847 00002322 E919E3                  	jmp	SYS_RET_ERR	
 15848                                  
 15849                                  ioctl_bad_handlej:
 15850 00002325 E9FAFE                  	jmp	ioctl_bad_handle
 15851                                  
 15852                                  ;---------------------------------------------------------------------------
 15853                                  ;
 15854                                  ; IOCTL: AL = 8
 15855                                  ;
 15856                                  ; ENTRY: DS = DOSDATA
 15857                                  ;
 15858                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15859                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15860                                  ;         return address off the stack if the drive is invalid.
 15861                                  ;
 15862                                  ;-------------------------------------------------------------------------
 15863                                  
 15864                                  	; 30/01/2024
 15865                                  ioctl_rem_media:
 15866                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15867 00002328 E82401                  	CALL	Check_If_Net
 15868 0000232B 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15869                                  					;   certainly don't know how to do this
 15870                                  					;   call.
 15871                                  	;test	word [es:di+4],800h
 15872                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15873                                  	;test	byte [es:di+5],8
 15874 0000232D 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15875 00002332 74EC                    	JZ	short ioctl_bad_fun		; NO
 15876                                  
 15877                                  ;hkn; SS override for IOCALL
 15878                                  	; 30/01/2024
 15879                                  	; ds = ss = DOSDATA segment ('Get_Driver_BL' in 'Check_If_Net')
 15880                                  	;MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15881 00002334 C606[7E03]0F            	mov	byte [IOCALL_REQFUNC],DEVRMD ; 15
 15882 00002339 B00D                    	MOV	AL,REMHL  ; 13
 15883 0000233B 88DC                    	MOV	AH,BL			; Unit number
 15884                                  	;MOV	[SS:IOCALL_REQLEN],AX
 15885 0000233D A3[7C03]                	mov	[IOCALL_REQLEN],ax	
 15886 00002340 31C0                    	XOR	AX,AX
 15887                                  	;MOV	[SS:IOCALL_REQSTAT],AX
 15888 00002342 A3[7F03]                	mov	[IOCALL_REQSTAT],ax ; 0
 15889                                  	
 15890 00002345 06                      	PUSH	ES
 15891 00002346 1F                      	POP	DS
 15892 00002347 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15893 00002349 16                      	PUSH	SS
 15894 0000234A 07                      	POP	ES
 15895                                  
 15896                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15897 0000234B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15898 0000234E 1E                      	push	ds
 15899 0000234F 56                      	push	si
 15900 00002350 E8BA21                  	call	DEVIOCALL2
 15901 00002353 5E                      	pop	si
 15902 00002354 1F                      	pop	ds
 15903                                  
 15904                                  ;hkn; SS override
 15905                                  	; 30/01/2024
 15906                                  	; (ds <> ss, ss = DOSDATA segment)
 15907 00002355 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15908                                  	;AND	AX,STBUI ; 200h		; Mask to busy bit
 15909                                  	; 29/01/2024
 15910 00002359 80E402                  	and	ah,STBUI>>8
 15911 0000235C B109                    	MOV	CL,9
 15912 0000235E D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15913                                  ioctl_da_ok_j:	; 11/11/2022
 15914 00002360 E9D2E2                  	jmp	SYS_RET_OK
 15915                                  
 15916                                  ;-------------------------------------------------------------------------
 15917                                  ;
 15918                                  ; IOCTL: AL = 9
 15919                                  ;
 15920                                  ; ENTRY: DS = DOSDATA
 15921                                  ;
 15922                                  ;-------------------------------------------------------------------------
 15923                                  
 15924                                  ioctl_drive_attr:
 15925                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15926 00002363 88D8                    	mov	al,bl
 15927 00002365 E87045                  	call	GETTHISDRV
 15928 00002368 723E                    	jc	short ioctl_drv_err
 15929 0000236A E8B500                  	call	Get_Driver_BL
 15930                                  	; MSDOS 6.0
 15931 0000236D 7239                    	JC	short ioctl_drv_err	; drive not valid
 15932                                  
 15933                                  	;mov	dx,[es:di+4]
 15934 0000236F 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15935                                  					; get device attribute word
 15936 00002373 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15937                                  
 15938                                  ;hkn; SS override
 15939                                  	;LES	DI,[SS:THISCDS]
 15940                                  	; 30/01/2024
 15941 00002375 C43E[A205]              	les	di,[THISCDS] ; (Get_Driver_BL)
 15942                                  
 15943                                  	;test	word [es:di+43h],8000h
 15944                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15945                                  	;test	byte [es:di+44h],80h
 15946 00002379 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15947 0000237E 7403                    	JZ	short IOCTLShare
 15948                                  
 15949                                  	;or	dx,1000h ; (MSDOS 3.3)
 15950                                  
 15951                                  ;	Net devices don't return a device attribute word.
 15952                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15953                                  
 15954 00002380 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15955                                  
 15956                                  IOCTLShare:
 15957                                  	; 30/01/2024
 15958                                  	; ds = ss = DOSDATA segment
 15959                                  	;push	ss
 15960                                  	;pop	ds
 15961                                  
 15962 00002383 BE[BE03]                	MOV	SI,OPENBUF
 15963 00002386 80C341                  	ADD	BL,"A"	; 41h
 15964 00002389 881C                    	MOV	[SI],BL
 15965 0000238B C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15966 00002390 B80003                  	MOV	AX,0300h
 15967 00002393 F8                      	CLC
 15968                                  	;INT	int_IBM
 15969 00002394 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15970                                  			; DS:SI -> ASCIZ disk device name 
 15971                                  			; (may be full path or only drive
 15972                                  			; specifier--must include the colon)
 15973                                  			; Return: CF clear if absolute disk access allowed
 15974 00002396 7303                    	JNC	short IOCTLLocal	; Not shared
 15975                                  	;OR	DX,0200H		; Shared, bit 9
 15976                                  	; 17/12/2022
 15977 00002398 80CE02                  	or	dh,02h
 15978                                  IOCTLLocal:
 15979                                  	;test	word [es:di+43h],1000h
 15980                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15981                                  	;test	byte [es:di+44h],10h
 15982 0000239B 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15983                                  	;JZ	short ioctl_set_DX
 15984                                  	; 16/12/2022
 15985 000023A0 7403                    	jz	short _ioctl_set_DX
 15986                                  	;OR	DX,8000h
 15987                                  	; 17/12/2022
 15988 000023A2 80CE80                  	or	dh,80h
 15989                                  ;ioctl_set_DX:
 15990                                  _ioctl_set_DX:
 15991                                  	; 16/12/2022
 15992 000023A5 E9BCFE                  	jmp	ioctl_set_dx
 15993                                  ; 16/12/2022
 15994                                  %if 0	
 15995                                  	call	Get_User_Stack
 15996                                  	MOV	[SI+user_env.user_DX],DX
 15997                                  	;;jmp	SYS_RET_OK
 15998                                  	;; 25/06/2019
 15999                                  	;jmp	SYS_RET_OK_clc
 16000                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16001                                  ioctl_gd_ok_j:
 16002                                  	jmp	short ioctl_da_ok_j
 16003                                  %endif
 16004                                  
 16005                                  ioctl_drv_err:
 16006 000023A8 B00F                    	mov	al,error_invalid_drive ; 0Fh
 16007                                  ioctl_gd_err_j:	; 11/11/2022
 16008 000023AA E991E2                  	jmp	SYS_RET_ERR
 16009                                  
 16010                                  ;--------------------------------------------------------------------------
 16011                                  ;
 16012                                  ; IOCTL: AL = A
 16013                                  ;
 16014                                  ; ENTRY: DS = DOSDATA
 16015                                  ;
 16016                                  ;--------------------------------------------------------------------------
 16017                                  
 16018                                  ioctl_handle_redir:
 16019 000023AD E81941                  	call	SFFromHandle		; ES:DI -> SFT
 16020 000023B0 7303                    	JNC	short ioctl_got_sft	; have valid handle
 16021 000023B2 E96DFE                  	jmp	ioctl_bad_handle ; 10/08/2018
 16022                                  
 16023                                  ioctl_got_sft:
 16024                                  	;mov	dx,[es:di+5]
 16025 000023B5 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 16026                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 16027                                  	; 16/12/2022
 16028 000023B9 EBEA                    	jmp	short _ioctl_set_DX
 16029                                  
 16030                                  	; 16/12/2022
 16031                                  ;ioctl_bad_funj:
 16032                                  	;JMP	ioctl_bad_fun
 16033                                  
 16034                                  ;--------------------------------------------------------------------------
 16035                                  ;
 16036                                  ; IOCTL: AL= 4,5
 16037                                  ;
 16038                                  ; ENTRY: DS = DOSDATA
 16039                                  ;	 SI = user's DS
 16040                                  ;
 16041                                  ;
 16042                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 16043                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16044                                  ;         return address off the stack if the drive is invalid.
 16045                                  ;
 16046                                  ;-------------------------------------------------------------------------
 16047                                  
 16048                                  ioctl_get_dev:
 16049 000023BB E89100                  	CALL	Check_If_Net
 16050                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 16051                                  					; certainly don't know how to do this
 16052                                  					; call.
 16053                                  	; 16/12/2022
 16054 000023BE 7403                    	jz	short ioctl_do_string
 16055                                  ioctl_bad_funj:
 16056 000023C0 E95DFF                  	JMP	ioctl_bad_fun
 16057                                  
 16058                                  ioctl_do_string:
 16059                                  	;test	word [es:di+4],4000h
 16060                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 16061                                  	;test	byte [es:di+5],40h
 16062 000023C3 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 16063 000023C8 74F6                    	JZ	short ioctl_bad_funj		; NO
 16064                                  					; assume IOCTL read
 16065 000023CA C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 16066                                  
 16067 000023CF A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 16068 000023D1 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 16069                                  
 16070                                  					; it is an IOCTL write
 16071 000023D3 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 16072                                  
 16073                                  ioctl_control_call:
 16074 000023D8 B016                    	MOV	AL,DRDWRHL ; 22
 16075                                  ioctl_setup_pkt:
 16076 000023DA 88DC                    	MOV	AH,BL			; Unit number
 16077 000023DC A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16078 000023DF 31C0                    	XOR	AX,AX
 16079 000023E1 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16080 000023E4 A2[8903]                	MOV	[IOMED],AL
 16081 000023E7 890E[8E03]              	MOV	[IOSCNT],CX
 16082 000023EB 8916[8A03]              	MOV	[IOXAD],DX
 16083 000023EF 8936[8C03]              	MOV	[IOXAD+2],SI
 16084 000023F3 06                      	PUSH	ES
 16085 000023F4 1F                      	POP	DS
 16086 000023F5 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16087 000023F7 16                      	PUSH	SS
 16088 000023F8 07                      	POP	ES
 16089                                  
 16090 000023F9 BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16091                                  ioctl_do_IO:
 16092 000023FC E80E21                  	call	DEVIOCALL2
 16093                                  
 16094                                  ;hkn; SS override for IOCALL
 16095                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 16096                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16097                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16098 000023FF 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16099 00002405 7507                    	JNZ	short ioctl_string_err
 16100                                  
 16101                                  ;hkn; SS override
 16102 00002407 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 16103                                  	; 16/12/2022
 16104 0000240B E927E2                  	jmp	SYS_RET_OK
 16105                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16106                                  	;jmp	short ioctl_gd_ok_j
 16107                                  
 16108                                  ioctl_string_err:
 16109 0000240E 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 16110                                  device_err:
 16111 00002413 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 16112 00002417 89F8                    	MOV	AX,DI
 16113 00002419 E8572F                  	call	SET_I24_EXTENDED_ERROR
 16114                                  
 16115                                  ;hkn; use SS override
 16116                                  ;hkn;	mov	ax,[CS:EXTERR]
 16117 0000241C 36A1[2403]              	mov	ax,[SS:EXTERR]
 16118                                  	;jmp	SYS_RET_ERR
 16119                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16120 00002420 EB88                    	jmp	short ioctl_gd_err_j
 16121                                  
 16122                                  ; 17/05/2019 - Retro DOS v4.0
 16123                                  
 16124                                  ;--------------------------------------------------------------------------
 16125                                  ; Proc name : Get_Driver_BL
 16126                                  ;
 16127                                  ;	DS is DOSDATA
 16128                                  ;	BL is drive number (0=default)
 16129                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 16130                                  ;	No regs modified
 16131                                  ;
 16132                                  ;---------------------------------------------------------------------------
 16133                                  
 16134                                  	; 30/01/2024
 16135                                  Get_Driver_BL:
 16136 00002422 50                      	PUSH	AX
 16137 00002423 88D8                    	MOV	AL,BL			; Drive
 16138 00002425 E8B044                  	call	GETTHISDRV
 16139 00002428 7223                    	jc	short ioctl_bad_drv
 16140 0000242A 30DB                    	XOR	BL,BL			; Unit zero on Net device
 16141 0000242C C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 16142 00002431 C43E[A205]              	LES	DI,[THISCDS]
 16143                                  	;test	word [es:di+43h],8000h
 16144                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16145                                  	;test	byte [es:di+44h],80h
 16146 00002435 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16147                                  	;les	di,[es:di+45h]
 16148 0000243A 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 16149 0000243E 750D                    	JNZ	short got_dev_ptr	 ; Is net
 16150 00002440 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16151                                  	;mov	bl,[es:di+1]
 16152 00002445 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 16153                                  	;les	di,[es:di+13h]
 16154 00002449 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 16155                                  got_dev_ptr:
 16156                                  	; 30/01/2024
 16157                                  	; cf=0
 16158                                  	;CLC
 16159                                  ioctl_bad_drv:
 16160 0000244D 58                      	POP	AX
 16161 0000244E C3                      	retn
 16162                                  
 16163                                  ;-------------------------------------------------------------------------
 16164                                  ; Proc Name : Check_If_Net:
 16165                                  ;
 16166                                  ;
 16167                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 16168                                  ; If no device is found, the return address is popped off the stack, and a
 16169                                  ; jump is made to ioctl_drv_err.
 16170                                  ;
 16171                                  ; On Entry:
 16172                                  ; Registers same as those for Get_Driver_BL
 16173                                  ;
 16174                                  ; On Exit:
 16175                                  ; ZERO flag	- set if not a net device
 16176                                  ;		- reset if net device
 16177                                  ; ES:DI -> the device
 16178                                  ;
 16179                                  ;
 16180                                  ; BUGBUG: This function assumes the following stack setup on entry
 16181                                  ;
 16182                                  ;	  SP+2 -> Error return address
 16183                                  ;	  SP   -> Normal return address
 16184                                  ;
 16185                                  ;-------------------------------------------------------------------------
 16186                                  
 16187                                  Check_If_Net:
 16188                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16189 0000244F E8D0FF                  	CALL	Get_Driver_BL
 16190 00002452 7201                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 16191                                  
 16192                                  ; 30/01/2024 ('Get_Driver_BL' returns with
 16193                                  ;	      'curdir_isnet' condition/ZF, no need to a second test)
 16194                                  %if 0
 16195                                  	;;;
 16196                                  	; (PCDOS 7.1 IBMDOS.COM, Windows ME IO.SYS)
 16197                                  	PUSH	ES
 16198                                  	PUSH	DI
 16199                                  	LES	DI,[THISCDS]
 16200                                  	;test	word [es:di+43h],8000h
 16201                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 16202                                  	;test	byte [es:di+44h],80h
 16203                                  	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 16204                                  	POP	DI
 16205                                  	POP	ES
 16206                                  	;;;
 16207                                  %endif
 16208 00002454 C3                      	retn
 16209                                  
 16210                                  ioctl_drv_err_pop:
 16211 00002455 58                      	pop	ax			; pop off return address
 16212 00002456 E94FFF                  	jmp	ioctl_drv_err
 16213                                  
 16214                                  ioctl_bad_funj3:
 16215 00002459 E9C4FE                  	jmp	ioctl_bad_fun
 16216                                  
 16217                                  ioctl_string_errj:
 16218 0000245C EBB0                    	jmp	short ioctl_string_err  ; 25/05/2019
 16219                                  
 16220                                  ;--------------------------------------------------------------------------
 16221                                  ;
 16222                                  ; IOCTL: AL = E, F
 16223                                  ;
 16224                                  ; ENTRY: DS = DOSDATA
 16225                                  ;
 16226                                  ;
 16227                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 16228                                  ;         the call to Check_If_Net because Check_If_Net gets our
 16229                                  ;         return address off the stack if the drive is invalid.
 16230                                  ;
 16231                                  ;--------------------------------------------------------------------------
 16232                                  
 16233                                  ioctl_drive_owner:
 16234                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16235 0000245E E8EEFF                  	Call	Check_If_Net
 16236 00002461 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 16237                                  					;   certainly don't know how to do this
 16238                                  					;   call.
 16239                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 16240                                  	; 09/09/2018
 16241                                  	;test	byte [es:di+4],40h
 16242 00002463 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 16243 00002468 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 16244                                  	;mov	byte [IOCALL_REQFUNC],23
 16245 0000246A C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 16246 0000246F 3C0E                    	cmp	al,0Eh			; Get Owner ?
 16247 00002471 7405                    	jz	short GetOwner
 16248                                  SetOwner:
 16249 00002473 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 16250                                  GetOwner:
 16251 00002478 B00D                    	MOV	AL,OWNHL ; 13
 16252 0000247A 88DC                    	MOV	AH,BL			; Unit number
 16253 0000247C A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 16254 0000247F 31C0                    	XOR	AX,AX
 16255 00002481 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 16256 00002484 06                      	PUSH	ES
 16257 00002485 1F                      	POP	DS
 16258 00002486 89FE                    	MOV	SI,DI			; DS:SI -> driver
 16259 00002488 16                      	PUSH	SS
 16260 00002489 07                      	POP	ES
 16261 0000248A BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 16262 0000248D 1E                      	push	ds
 16263 0000248E 56                      	push	si
 16264 0000248F E87B20                  	call	DEVIOCALL2
 16265 00002492 5E                      	pop	si
 16266 00002493 1F                      	pop	ds
 16267                                  ;hkn; SS override
 16268                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 16269                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 16270 00002494 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 16271 0000249A 75C0                    	jnz	short ioctl_string_errj
 16272 0000249C 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 16273                                  					; owner returned is 1-based.
 16274 000024A0 E992E1                  	jmp	SYS_RET_OK
 16275                                  
 16276                                  ;============================================================================
 16277                                  ; DELETE.ASM, MSDOS 6.0, 1991
 16278                                  ;============================================================================
 16279                                  ; 07/08/2018 - Retro DOS v3.0
 16280                                  ; 17/05/2019 - Retro DOS v4.0
 16281                                  
 16282                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 16283                                  ;	NAME	DOS_DELETE
 16284                                  
 16285                                  ;
 16286                                  ;	Microsoft Confidential
 16287                                  ;	Copyright (C) Microsoft Corporation 1991
 16288                                  ;	All Rights Reserved.
 16289                                  ;
 16290                                  
 16291                                  ;**	DELETE.ASM - Low level routine for deleting files
 16292                                  ;----------------------------------------------------------------------------
 16293                                  ;		DOS_DELETE
 16294                                  ;		REN_DEL_Check
 16295                                  ;		FastOpen_Delete	       ; DOS 3.3
 16296                                  ;		FastOpen_Update	       ; DOS 3.3
 16297                                  
 16298                                  ;   Revision history:
 16299                                  ;
 16300                                  ;   A000  version 4.00	Jan. 1988
 16301                                  ;   A001  Fastopen Rename fix	April 1989
 16302                                  
 16303                                  ;Installed = TRUE
 16304                                  
 16305                                  ;	i_need	NoSetDir,BYTE
 16306                                  ;	i_need	Creating,BYTE
 16307                                  ;	i_need	DELALL,BYTE
 16308                                  ;	i_need	THISDPB,DWORD
 16309                                  ;	i_need	THISSFT,DWORD
 16310                                  ;	i_need	THISCDS,DWORD
 16311                                  ;	i_need	CURBUF,DWORD
 16312                                  ;	i_need	ATTRIB,BYTE
 16313                                  ;	i_need	SATTRIB,BYTE
 16314                                  ;	i_need	WFP_START,WORD
 16315                                  ;	i_need	REN_WFP,WORD			 ;BN001
 16316                                  ;	i_need	NAME1,BYTE			 ;BN001
 16317                                  ;	i_need	FoundDel,BYTE
 16318                                  ;	i_need	AUXSTACK,BYTE
 16319                                  ;	i_need	VOLCHNG_FLAG,BYTE
 16320                                  ;	i_need	JShare,DWORD
 16321                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 16322                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 16323                                  ;
 16324                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 16325                                  ;
 16326                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 16327                                  ;	i_need	DMAADD,DWORD
 16328                                  ;	i_need	RENAMEDMA,BYTE
 16329                                  
 16330                                  ;----------------------------------------------------------------------------
 16331                                  ;
 16332                                  ; Procedure Name : DOS_DELETE
 16333                                  ;
 16334                                  ; Inputs:
 16335                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16336                                  ;		terminated)
 16337                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16338                                  ;		( = -1 if current dir not involved, else
 16339                                  ;		 Points to first char after last "/" of current dir part)
 16340                                  ;	[THISCDS] Points to CDS being used
 16341                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16342                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16343                                  ; Function:
 16344                                  ;	Delete the specified file(s)
 16345                                  ; Outputs:
 16346                                  ;	CARRY CLEAR
 16347                                  ;		OK
 16348                                  ;	CARRY SET
 16349                                  ;	    AX is error code
 16350                                  ;		error_file_not_found
 16351                                  ;			Last element of path not found
 16352                                  ;		error_path_not_found
 16353                                  ;			Bad path (not in curr dir part if present)
 16354                                  ;		error_bad_curr_dir
 16355                                  ;			Bad path in current directory part of path
 16356                                  ;		error_access_denied
 16357                                  ;			Attempt to delete device or directory
 16358                                  ;		***error_sharing_violation***
 16359                                  ;			Deny both access required, generates an INT 24.
 16360                                  ;			This error is NOT returned. The INT 24H is generated,
 16361                                  ;			  and the file is ignored (not deleted). Delete will
 16362                                  ;			  simply continue on looking for more files.
 16363                                  ;			  Carry will NOT be set in this case.
 16364                                  ; DS preserved, others destroyed
 16365                                  ;
 16366                                  ;----------------------------------------------------------------------------
 16367                                  
 16368                                  FILEFOUND   equ 01h
 16369                                  FILEDELETED equ 10h
 16370                                  
 16371                                  
 16372                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16373                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 16374                                  
 16375                                  	; 30/01/2024
 16376                                  
 16377                                  DOS_DELETE:
 16378                                  
 16379                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 16380                                  ;hkn; appropriately at this point.
 16381                                  
 16382 000024A3 E888ED                  	call	TestNet
 16383 000024A6 7306                    	JNC	short LOCAL_DELETE
 16384                                  
 16385                                  ;IF NOT Installed
 16386                                  ;	transfer NET_DELETE
 16387                                  ;ELSE
 16388                                  	;MOV	AX,(MultNET SHL 8) | 19
 16389                                  	;INT	2FH
 16390                                  	;return
 16391                                  
 16392 000024A8 B81311                  	mov	ax,1113h
 16393 000024AB CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 16394                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 16395                                  			;		fully-qualified filename in DOS CS
 16396                                  			; SDA CDS pointer -> current directory structure for drive with file
 16397                                  			; Return: CF set on error
 16398 000024AD C3                      	retn
 16399                                  ;ENDIF
 16400                                  
 16401                                  LOCAL_DELETE:
 16402 000024AE C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 16403 000024B3 E831EE                  	call	ECritDisk
 16404                                  	;mov	word [CREATING],0E500h
 16405 000024B6 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 16406 000024BC 8B36[B205]              	MOV	SI,[WFP_START]
 16407                                  SKPNUL:
 16408 000024C0 AC                      	LODSB
 16409 000024C1 08C0                    	OR	AL,AL
 16410 000024C3 75FB                    	JNZ	short SKPNUL		; go to end
 16411 000024C5 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 16412 000024C8 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 16413 000024CC 7506                    	JNZ	short TEST_QUEST
 16414 000024CE 807C022A                	CMP	BYTE [SI+2],"*"
 16415 000024D2 741F                    	JZ	short CHECK_ATTS
 16416                                  TEST_QUEST:
 16417 000024D4 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 16418 000024D7 87FE                    	XCHG	DI,SI
 16419                                  
 16420 000024D9 16                      	push	ss
 16421                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 16422 000024DA 07                      	pop	es ; 17/05/2019
 16423                                  
 16424 000024DB B83F3F                  	MOV	AX,"??" ; 3F3Fh
 16425 000024DE B90400                  	MOV	CX,4		; four sets of "??"
 16426 000024E1 F3AF                    	REPE	SCASW
 16427 000024E3 751C                    	JNZ	short NOT_ALL
 16428 000024E5 87FE                    	XCHG	DI,SI
 16429 000024E7 AD                      	LODSW
 16430 000024E8 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 16431 000024EB 7514                    	JNZ	short NOT_ALL
 16432 000024ED AD                      	LODSW
 16433 000024EE 3D3F3F                  	CMP	AX,"??"
 16434 000024F1 750E                    	JNZ	short NOT_ALL
 16435                                  CHECK_ATTS:
 16436 000024F3 A0[6D05]                	MOV	AL,[SATTRIB]
 16437                                  	;and	al,1Fh
 16438 000024F6 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16439                                  					; Look only at hidden bits
 16440                                  	;cmp	al,1Fh
 16441 000024F8 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 16442                                  					; All must be set
 16443 000024FA 7505                    	JNZ	short NOT_ALL
 16444                                  
 16445                                  ; NOTE WARNING DANGER-----
 16446                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 16447                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 16448                                  
 16449 000024FC C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 16450                                  NOT_ALL:
 16451 00002501 C606[4C03]01            	MOV	byte [NoSetDir],1
 16452 00002506 E8E518                  	call	GetPathNoSet
 16453 00002509 7312                    	JNC	short Del_found
 16454 0000250B 750B                    	JNZ	short _bad_path
 16455 0000250D 08C9                    	OR	CL,CL
 16456 0000250F 7407                    	JZ	short _bad_path
 16457                                  No_file:
 16458 00002511 B80200                  	MOV	AX,error_file_not_found
 16459                                  ErrorReturn:
 16460 00002514 F9                      	STC
 16461                                  	;call	LCritDisk
 16462                                  	;retn
 16463                                  	; 18/12/2022
 16464 00002515 E9EAED                  	jmp	LCritDisk
 16465                                  
 16466                                  _bad_path:
 16467 00002518 B80300                  	MOV	AX,error_path_not_found
 16468 0000251B EBF7                    	JMP	short ErrorReturn
 16469                                  
 16470                                  Del_found:
 16471 0000251D 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 16472 0000251F 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 16473 00002524 7405                    	JZ	short NOT_DIR
 16474                                  Del_access_err:
 16475 00002526 B80500                  	MOV	AX,error_access_denied
 16476 00002529 EBE9                    	JMP	short ErrorReturn
 16477                                  
 16478                                  NOT_DIR:
 16479 0000252B 08E4                    	OR	AH,AH			; Check if device name
 16480 0000252D 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 16481                                  
 16482                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 16483                                  
 16484                                  DELFILE:
 16485 0000252F 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 16486                                  
 16487                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 16488                                  ; DOS issue a build BPB call the next time this drive is accessed.
 16489                                  
 16490 00002534 1E                      	PUSH	DS
 16491 00002535 8A26[7F05]              	MOV	AH,[DELALL]
 16492 00002539 C53E[E205]              	LDS	DI,[CURBUF]
 16493                                  	
 16494                                  ;hkn; SS override
 16495 0000253D 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 16496 00002543 7509                    	JNZ	short DoDelete		; yes
 16497                                  
 16498 00002545 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 16499 00002549 7403                    	JZ	short DoDelete		; not read only
 16500                                  
 16501                                  	; 30/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16502                                  Skip_it:
 16503 0000254B 1F                      	POP	DS
 16504 0000254C EB2F                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 16505                                  
 16506                                  DoDelete:
 16507 0000254E E88100                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 16508                                  	;JNC	short DEL_SHARE_OK
 16509                                  	;POP	DS
 16510                                  	;JMP	SHORT DELNXT		; Skip it
 16511                                  	; 30/01/2024
 16512 00002551 72F8                    	jc	short Skip_it
 16513                                  
 16514                                  DEL_SHARE_OK:
 16515                                  	; 17/05/2019 - Retro DOS v4.0
 16516                                  	; MSDOS 6.0
 16517                                  	;test	byte [di+5],40h
 16518 00002553 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16519                                  					;LB. if already dirty		  ;AN000;
 16520 00002557 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 16521 00002559 E86B34                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16522                                  	;or	byte [di+5],40h
 16523 0000255C 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16524                                  yesdirty:
 16525 00002560 8827                    	mov	[bx],ah 
 16526                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16527 00002562 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16528 00002564 1F                      	POP	DS
 16529 00002565 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16530                                  
 16531 0000256A 83FB02                  	CMP	BX,2
 16532 0000256D 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16533                                  	;cmp	bx,[es:bp+0Dh]
 16534 0000256F 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16535 00002573 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16536                                  
 16537 00002575 E8C927                  	call	RELEASE 		; Free file data
 16538 00002578 7252                    	JC	short No_fileJ
 16539                                  
 16540                                  ; DOS 3.3  FastOpen
 16541                                  
 16542 0000257A E8C200                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16543                                  
 16544                                  ; DOS 3.3  FastOpen
 16545                                  
 16546                                  DELNXT:
 16547 0000257D C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16548 00002581 E8D717                  	call	GETENTRY		; Registers need to be reset
 16549 00002584 7246                    	JC	short No_fileJ
 16550 00002586 E81217                  	call	NEXTENT
 16551 00002589 73A4                    	JNC	short DELFILE
 16552 0000258B C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16553                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16554                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16555                                  	;;mov	al,[es:bp+0]
 16556                                  	; 15/12/2022
 16557 0000258F 268A4600                	MOV	AL,[ES:BP]
 16558 00002593 E82333                  	call	FLUSHBUF
 16559 00002596 7234                    	JC	short No_fileJ
 16560                                  ;
 16561                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16562                                  ;
 16563                                  ;   not found not deleted		file not found
 16564                                  ;   not found	  deleted		*** impossible ***
 16565                                  ;	found not deleted		access denied (read-only)
 16566                                  ;	found	  deleted		no error
 16567                                  ;
 16568 00002598 F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16569 0000259D 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16570                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16571                                  ; and to force the DOS to issue a media check.
 16572 0000259F F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16573 000025A4 741C                    	jz	short No_Set_Flag
 16574 000025A6 50                      	PUSH	AX
 16575 000025A7 06                      	PUSH	ES
 16576 000025A8 57                      	PUSH	DI
 16577 000025A9 C43E[A205]              	LES	DI,[THISCDS]
 16578 000025AD 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16579 000025B0 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16580 000025B3 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16581                                  	
 16582                                  	; MSDOS 6.0
 16583 000025B7 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16584 000025B9 E8A404                  	call	Set_Media_ID		;>32mb set volume id to boot record	 ;AN000;
 16585                                  	 
 16586 000025BC E8872F                  	call	FATREAD_CDS		; force media check
 16587 000025BF 5F                      	POP	DI
 16588 000025C0 07                      	POP	ES
 16589 000025C1 58                      	POP	AX
 16590                                  No_Set_Flag:
 16591                                  	;call	LCritDisk		; carry is clear
 16592                                  	;retn
 16593                                  	; 18/12/2022
 16594 000025C2 E93DED                  	jmp	LCritDisk
 16595                                  DelError:
 16596 000025C5 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16597 000025CA 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16598                                  No_fileJ:
 16599 000025CC E942FF                  	JMP	No_file ; 10/08/2018 		; Nope
 16600                                  Del_access_errJ:
 16601 000025CF E954FF                  	JMP	Del_access_err ; 10/08/2018
 16602                                  
 16603                                  ; 08/08/2018 - Retro DOS v3.0
 16604                                  
 16605                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16606                                  ;---------------------------------------------------------------------------
 16607                                  ; Procedure Name : REN_DEL_Check
 16608                                  ;
 16609                                  ; Inputs:
 16610                                  ;	[THISDPB] set
 16611                                  ;	[CURBUF+2]:BX points to entry
 16612                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16613                                  ;	[WFP_Start] points to name
 16614                                  ; Function:
 16615                                  ;	Check for Exclusive access on given file.
 16616                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16617                                  ; Outputs:
 16618                                  ;	ES:BP = [THISDPB]
 16619                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16620                                  ;		last element will be loaded from the directory entry.  This is
 16621                                  ;		so the name given to the sharer doesn't have any meta chars in
 16622                                  ;		it.
 16623                                  ;	Carry set if sharing violation, INT 24H generated
 16624                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16625                                  ;		This is because input AX is preserved.
 16626                                  ;		Caller must set the error if needed.
 16627                                  ;	Carry clear
 16628                                  ;		OK
 16629                                  ; AX,DS,BX,SI,DI preserved
 16630                                  ;---------------------------------------------------------------------------
 16631                                  
 16632                                  REN_DEL_Check:
 16633                                  
 16634 000025D2 1E                      	PUSH	DS
 16635 000025D3 57                      	PUSH	DI
 16636 000025D4 50                      	PUSH	AX
 16637 000025D5 53                      	PUSH	BX
 16638 000025D6 56                      	PUSH	SI		; Save CURBUF pointers
 16639                                  	
 16640 000025D7 16                      	push	ss
 16641 000025D8 07                      	pop	es
 16642                                  
 16643                                  ;hkn; context ES will assume ES to DOSDATA
 16644                                  ;hkn; ASSUME	ES:DOSGROUP
 16645                                  
 16646                                  ;hkn; SS override
 16647 000025D9 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16648 000025DE 89DE                    	MOV	SI,BX
 16649                                  
 16650                                  ;hkn; SS override
 16651 000025E0 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16652 000025E5 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16653                                  	;ADD	BX,2		; Skip over d: to point to leading '\'
 16654                                  	; 31/01/2024
 16655 000025E7 43                      	inc	bx
 16656 000025E8 43                      	inc	bx
 16657 000025E9 E8E2EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16658 000025EC 49                      	DEC	CX		; Don't include nul in count
 16659 000025ED 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16660 000025EF E89E45                  	call	SkipBack	; Back up one element
 16661 000025F2 47                      	INC	DI		; Point to start of last element
 16662                                  
 16663                                  	; 17/05/2019 - Retro DOS v4.0
 16664                                  ;hkn; SS override
 16665                                  	; MSDOS 6.0
 16666 000025F3 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16667                                  	;
 16668 000025F8 E85FFA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16669 000025FB 5E                      	POP	SI		; Get back entry pointers
 16670 000025FC 5B                      	POP	BX
 16671 000025FD 53                      	PUSH	BX
 16672 000025FE 56                      	PUSH	SI		; Back on stack
 16673                                  	
 16674 000025FF 16                      	push	ss
 16675 00002600 1F                      	pop	ds
 16676                                  
 16677                                  ;hkn; context DS will assume ES to DOSDATA
 16678                                  ;hkn; ASSUME	DS:DOSGROUP
 16679                                  
 16680                                  ; Close the file if possible by us.
 16681                                  ;
 16682                                  ;if installed
 16683 00002601 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16684                                  ;else
 16685                                  ;	Call	ShCloseFile
 16686                                  ;endif
 16687 00002605 8C1E[A005]              	MOV	[THISSFT+2],DS
 16688                                  
 16689                                  ;hkn; AUXSTACK is in DOSDATA
 16690 00002609 C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16691                                  				; Scratch space
 16692 0000260F 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16693 00002611 E8C023                  	call	DOOPEN		; Fill in SFT for share check
 16694 00002614 C43E[9E05]              	LES	DI,[THISSFT]
 16695                                  	;mov	word [es:di+2],10h
 16696 00002618 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16697                                  				; requires exclusive access
 16698                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16699 0000261E 26C7050100              	mov	word [ES:DI],1
 16700 00002623 E8474B                  	call	ShareEnter
 16701 00002626 720D                    	jc	short CheckDone
 16702 00002628 C43E[9E05]              	LES	DI,[THISSFT]
 16703                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16704 0000262C 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16705                                  	
 16706 00002631 E8344B                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16707 00002634 F8                      	CLC
 16708                                  CheckDone:
 16709 00002635 C42E[8A05]              	LES	BP,[THISDPB]
 16710 00002639 5E                      	POP	SI
 16711 0000263A 5B                      	POP	BX
 16712 0000263B 58                      	POP	AX
 16713 0000263C 5F                      	POP	DI
 16714 0000263D 1F                      	POP	DS
 16715 0000263E C3                      	retn
 16716                                  
 16717                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16718                                  ;---------------------------------------------------------------------------
 16719                                  ; Procedure Name : FastOpen_Delete
 16720                                  ; Inputs:
 16721                                  ;	None
 16722                                  ; Function:
 16723                                  ;	Call FastOpen to delete the dir info.
 16724                                  ; Outputs:
 16725                                  ;	None
 16726                                  ;---------------------------------------------------------------------------
 16727                                  
 16728                                  	; 31/01/2024
 16729                                  
 16730                                  FastOpen_Delete:
 16731 0000263F 9C                      	PUSHF			; save flag
 16732 00002640 56                      	PUSH	SI		; save registers
 16733 00002641 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16734 00002642 53                      	PUSH	BX
 16735 00002643 50                      	PUSH	AX
 16736                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16737                                  ;hkn; SS override
 16738                                  	; 17/05/2019 - Retro DOS v4.0
 16739                                  	; MSDOS 6.0
 16740 00002644 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16741                                  	
 16742 00002649 B003                    	MOV	AL,FONC_delete	; al = 3
 16743                                  
 16744                                  ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16745                                  %if 0 
 16746                                  fastinvoke:
 16747                                  ;hkn; FastTable is in DOSDATA
 16748                                  	MOV	BX,FastTable+2
 16749                                  	CALL	far [BX]	; call fastopen
 16750                                  	POP	AX		; restore registers
 16751                                  	POP	BX
 16752                                  	;pop	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16753                                  	POP	SI
 16754                                  	POPF			; restore flag
 16755                                  	retn
 16756                                  %else
 16757 0000264B EB0F                    	jmp	short fastinvoke ; 31/01/2024
 16758                                  %endif
 16759                                  
 16760                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16761                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16762                                  
 16763                                  	; 31/01/2024 Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 16764                                  	; DOSCODE:65B4h (MSDOS 6.22 MSDOS.SYS)
 16765                                  	; DOSCODE:6D07h (PCDOS 7.1 IBMDOS.COM)
 16766                                  
 16767                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16768                                  ;---------------------------------------------------------------------------
 16769                                  ; PROCEDURE Name : FastOpen_Rename
 16770                                  ;
 16771                                  ; Inputs:
 16772                                  ;	 REN_WFP   = Path Name
 16773                                  ;	 NAME1	   = New Name
 16774                                  ; Function:
 16775                                  ;	Call FastOpen to rename the dir entry in the cache
 16776                                  ; Outputs:
 16777                                  ;	None
 16778                                  ;---------------------------------------------------------------------------
 16779                                  
 16780                                  FastOpen_Rename:
 16781                                  	; 17/05/2019 - Retro DOS v4.0
 16782                                  	; 08/08/2018 - Retro DOS v3.0
 16783                                  	; MSDOS 6.0
 16784 0000264D 9C                      	PUSHF			;AN001 save flag
 16785 0000264E 56                      	PUSH	SI		;AN001 save registers
 16786 0000264F 57                      	PUSH	DI		;AN001
 16787 00002650 53                      	PUSH	BX		;AN001
 16788 00002651 50                      	PUSH	AX		;AN001
 16789                                  	;
 16790                                  ;hkn; SS override
 16791 00002652 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16792                                  
 16793                                  ;hkn; NAME1 is in DOSDATA
 16794 00002657 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16795                                  	;mov	al,6
 16796 0000265A B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16797                                  
 16798                                  fastinvoke:	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16799                                  	
 16800                                  ;hkn; FastTable is in DOSDATA
 16801 0000265C BB[320D]                	MOV	BX,FastTable+2
 16802 0000265F FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16803                                  	
 16804 00002661 58                      	POP	AX		; restore registers  ;AN001
 16805 00002662 5B                      	POP	BX				     ;AN001
 16806 00002663 5F                      	POP	DI				     ;AN001
 16807 00002664 5E                      	POP	SI				     ;AN001
 16808 00002665 9D                      	POPF			; restore flag	     ;AN001
 16809 00002666 C3                      	retn					     ;AN001
 16810                                  
 16811                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16812                                  ;---------------------------------------------------------------------------
 16813                                  ; Procedure Name : FastOpen_Update
 16814                                  ;
 16815                                  ; Inputs:
 16816                                  ;	DL     drive number (A=0,B=1,,,)
 16817                                  ;	CX     first cluster #
 16818                                  ;	AH     0 updates dir entry
 16819                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16820                                  ;	ES:DI  directory entry
 16821                                  ; Function:
 16822                                  ;	Call FastOpen to update the dir info.
 16823                                  ; Outputs:
 16824                                  ;	None
 16825                                  ;---------------------------------------------------------------------------
 16826                                  
 16827                                  FastOpen_Update:
 16828 00002667 9C                      	PUSHF			; save flag
 16829 00002668 56                      	PUSH	SI
 16830 00002669 57                      	push	di ; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 16831 0000266A 53                      	PUSH	BX		; save regs
 16832 0000266B 50                      	PUSH	AX
 16833 0000266C B004                    	MOV	AL,FONC_update	; al = 4
 16834 0000266E EBEC                    	JMP	short fastinvoke
 16835                                  
 16836                                  	; 17/05/2019
 16837                                  
 16838                                  	; MSDOS 6.0
 16839                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16840                                  ;---------------------------------------------------------------------------
 16841                                  Fast_Dispatch:
 16842                                  ;hkn; FastTable is in DOSDATA
 16843 00002670 BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16844                                  ;hkn; use SS override
 16845 00002673 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16846 00002676 C3                      	retn
 16847                                  
 16848                                  ;============================================================================
 16849                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16850                                  ;============================================================================
 16851                                  ; 08/08/2018 - Retro DOS v3.0
 16852                                  ; 17/05/2019 - Retro DOS v4.0
 16853                                  
 16854                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16855                                  ;	NAME	DOS_RENAME
 16856                                  
 16857                                  ;**	Low level routine for renaming files
 16858                                  ;----------------------------------------------------------------------------
 16859                                  ;	DOS_RENAME
 16860                                  ;
 16861                                  ;	Modification history:
 16862                                  ;
 16863                                  ;	    Created: ARR 30 March 1983
 16864                                  
 16865                                  ;----------------------------------------------------------------------------
 16866                                  ;
 16867                                  ; Procedure Name : DOS_RENAME
 16868                                  ;
 16869                                  ; Inputs:
 16870                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16871                                  ;		chars, NUL terminated)
 16872                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16873                                  ;		( = -1 if current dir not involved, else
 16874                                  ;		 Points to first char after last "/" of current dir part)
 16875                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16876                                  ;		chars, NUL terminated)
 16877                                  ;	[THISCDS] Points to CDS being used
 16878                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16879                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16880                                  ; Function:
 16881                                  ;	Rename the specified file(s)
 16882                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16883                                  ; Outputs:
 16884                                  ;	CARRY CLEAR
 16885                                  ;	    OK
 16886                                  ;	CARRY SET
 16887                                  ;	    AX is error code
 16888                                  ;		error_file_not_found
 16889                                  ;			No match for source, or dest path invalid
 16890                                  ;		error_not_same_device
 16891                                  ;			Source and dest are on different devices
 16892                                  ;		error_access_denied
 16893                                  ;			Directory specified (not simple rename),
 16894                                  ;			Device name given, Destination exists.
 16895                                  ;			NOTE: In third case some renames may have
 16896                                  ;			 been done if metas.
 16897                                  ;		error_path_not_found
 16898                                  ;			Bad path (not in curr dir part if present)
 16899                                  ;			SOURCE ONLY
 16900                                  ;		error_bad_curr_dir
 16901                                  ;			Bad path in current directory part of path
 16902                                  ;			SOURCE ONLY
 16903                                  ;		error_sharing_violation
 16904                                  ;			Deny both access required, generates an INT 24.
 16905                                  ; DS preserved, others destroyed
 16906                                  ;
 16907                                  ;----------------------------------------------------------------------------
 16908                                  
 16909                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16910                                  
 16911                                  	; 31/01/2024
 16912                                  
 16913                                  DOS_RENAME:
 16914                                  
 16915                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16916                                  ;hkn; at this point to DOSDATA.
 16917                                  
 16918 00002677 E8B4EB                  	call	TestNet
 16919 0000267A 7306                    	JNC	short LOCAL_RENAME
 16920                                  
 16921                                  ;IF NOT Installed
 16922                                  ;	transfer NET_RENAME
 16923                                  ;ELSE
 16924                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16925                                  	;INT	2FH
 16926                                  	;return
 16927                                  
 16928 0000267C B81111                  	mov     ax, 1111h
 16929 0000267F CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16930                                  			; SS = DS = DOS CS, 
 16931                                  			; SDA first filename pointer = offset of fully-qualified old name
 16932                                  			; SDA CDS pointer -> current directory
 16933                                  			; Return: CF set on error
 16934 00002681 C3                      	retn
 16935                                  ;ENDIF
 16936                                  
 16937                                  LOCAL_RENAME:
 16938 00002682 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16939 00002687 8B36[B205]              	MOV	SI,[WFP_START]
 16940 0000268B 8B3E[B405]              	MOV	DI,[REN_WFP]
 16941 0000268F 8A04                    	MOV	AL,[SI]
 16942 00002691 8A25                    	MOV	AH,[DI]
 16943 00002693 0D2020                  	OR	AX,2020H		; Lower case
 16944 00002696 38E0                    	CMP	AL,AH
 16945 00002698 7405                    	JZ	short SAMEDRV
 16946 0000269A B81100                  	MOV	AX,error_not_same_device ; 11h
 16947 0000269D F9                      	STC
 16948 0000269E C3                      	retn
 16949                                  
 16950                                  SAMEDRV:
 16951 0000269F FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16952 000026A3 FF36[2C03]              	PUSH	WORD [DMAADD]
 16953 000026A7 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16954                                  
 16955                                  ;hkn; RENAMEDMA is in DOSDATA
 16956 000026AB C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16957 000026B1 C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16958 000026B6 E82EEC                  	call	ECritDisk
 16959 000026B9 E8CA05                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16960                                  					;    points to entry
 16961 000026BC 7314                    	JNC	short Check_Dev
 16962 000026BE 83F812                  	CMP	AX,error_no_more_files ; 12h
 16963 000026C1 7503                    	JNZ	short GOTERR
 16964 000026C3 B80200                  	MOV	AX,error_file_not_found ; 2
 16965                                  GOTERR:
 16966 000026C6 F9                      	STC
 16967                                  RENAME_POP:
 16968 000026C7 8F06[2C03]              	POP	WORD [DMAADD]
 16969 000026CB 8F06[2E03]              	POP	WORD [DMAADD+2]
 16970                                  	;call	LCritDisk
 16971                                  	;retn
 16972                                  	; 16/12/2022
 16973 000026CF E930EC                  	jmp	LCritDisk
 16974                                  
 16975                                  Check_Dev:
 16976                                  	; 17/05/2019 - Retro DOS v4.0
 16977                                  	;mov	ax,5
 16978 000026D2 B80500                  	MOV	AX,error_access_denied	; Assume error
 16979                                  	
 16980                                  	; MSDOS 6.0
 16981 000026D5 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16982 000026D6 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  check if source a dir  ;AN000;
 16983                                  	;add	si,21
 16984 000026DA 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16985                                  	;test	byte [si+11],10h
 16986 000026DD F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16987 000026E1 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16988 000026E3 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16989 000026E7 E8ECFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16990                                  notdir:
 16991 000026EA 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16992 000026EB 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16993                                  
 16994                                  	; MSDOS 3.3 & MSDOS 6.0
 16995 000026ED 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16996 000026F2 75D2                    	JNZ	short GOTERR
 16997                                  
 16998                                  ; At this point a source has been found. There is search continuation info (a
 16999                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 17000                                  ; directory entry found.
 17001                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 17002                                  ; throughout the RENAME since it is known at this point that the source and
 17003                                  ; destination are both on the same device.
 17004                                  ; [SATTRIB] is also set.
 17005                                  
 17006 000026F4 89DE                    	MOV	SI,BX
 17007                                  	;add	si,26
 17008 000026F6 83C61A                  	ADD	SI,dir_entry.dir_first
 17009 000026F9 E8D6FE                  	call	REN_DEL_Check
 17010 000026FC 7305                    	JNC	short REN_OK1
 17011 000026FE B82000                  	MOV	AX,error_sharing_violation  ; 20h
 17012 00002701 EBC4                    	JMP	short RENAME_POP
 17013                                  
 17014                                  ;------------------------------------------------------------------------------
 17015                                  ; Check if the source is a file or directory. If file, delete the entry
 17016                                  ; from the Fastopen cache. If directory, rename it later
 17017                                  ;------------------------------------------------------------------------------
 17018                                  
 17019                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 17020                                  	; MSDOS 6.0
 17021                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17022                                  	;PUSH	SI
 17023 00002703 C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 17024                                  	;add	si,21
 17025 00002707 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17026                                  	;test	byte [si+11],10h
 17027 0000270A F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 17028                                  	;JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 17029 0000270E 7503                    	jnz	short SWAP_SOURCE ; 31/01/2024
 17030                                  	;POP	SI			;BN00X
 17031                                  	;JMP	SHORT SWAP_SOURCE	;BN00X
 17032                                  ;NOT_DIR1:				;;BN00X it is a file, delete the entry
 17033                                  	;POP	SI
 17034                                  
 17035                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17036 00002710 E82CFF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 17037                                  SWAP_SOURCE:
 17038                                  	; MSDOS 3.3
 17039                                  	;MOV	SI,[REN_WFP]
 17040                                  	;MOV	[WFP_START],SI
 17041                                  	; MSDOS 6.0
 17042 00002713 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 17043 00002716 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 17044 0000271A 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 17045 0000271E A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 17046                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17047 00002721 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 17048                                  	;mov	word [CREATING],0E5FFh
 17049 00002727 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 17050                                  					; A rename is like a CREATE_NEW as far
 17051                                  					; as the destination is concerned.
 17052 0000272D E8BE16                  	call	GetPathNoSet
 17053                                  
 17054                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 17055                                  ;   since no files match the destination name. If it fails for any other
 17056                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 17057                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 17058                                  ;   if the rename should fail because we haven't built an explicit name by
 17059                                  ;   substituting for the meta chars in it. In this case the destination file
 17060                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 17061                                  ;   in the directory entry part.
 17062                                  	
 17063 00002730 7223                    	JC	short NODEST
 17064                                  	
 17065                                  	; MSDOS 6.0
 17066                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 17067                                  	; !! MSDOS 3.3 !!
 17068                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 17069                                  
 17070 00002732 08E4                    	OR	AH,AH			; Device?
 17071 00002734 792C                    	JNS	short SAVEDEST		; No, continue
 17072                                  BAD_ACC:
 17073 00002736 B80500                  	MOV	AX,error_access_denied
 17074 00002739 F9                      	STC
 17075                                  RENAME_CLEAN:
 17076 0000273A 9C                      	PUSHF				; Save carry state
 17077 0000273B 50                      	PUSH	AX			; and error code (if carry set)
 17078 0000273C A0[7605]                	MOV	AL,[THISDRV]
 17079 0000273F E87731                  	call	FLUSHBUF
 17080 00002742 58                      	POP	AX
 17081 00002743 803E[4A03]00            	CMP	byte [FAILERR],0
 17082 00002748 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 17083 0000274A 9D                      	POPF
 17084 0000274B E979FF                  	JMP	RENAME_POP
 17085                                  
 17086                                  BAD_ERR:
 17087 0000274E 58                      	POP	AX			; Saved flags
 17088                                  	; 16/12/202
 17089                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17090                                  BAD_PATH: ; *
 17091 0000274F B80300                  	MOV	AX,error_path_not_found
 17092 00002752 E971FF                  	JMP	GOTERR
 17093                                  
 17094                                  NODEST:
 17095 00002755 75F8                    	JNZ	short BAD_PATH
 17096 00002757 803E[4A03]00            	CMP	byte [FAILERR],0
 17097 0000275C 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 17098                                  					; because user FAILed on I 24
 17099                                  	; 14/11/2022
 17100 0000275E 08C9                    	OR	CL,CL
 17101                                  	;JNZ	short SAVEDEST
 17102                                  	; 17/05/2019
 17103 00002760 74ED                    	jz	short BAD_PATH ; *
 17104                                  ;BAD_PATH: ; *
 17105                                  ;	MOV	AX,error_path_not_found
 17106                                  ;	;STC
 17107                                  ;	;JMP	RENAME_POP
 17108                                  ;	; 17/05/2019
 17109                                  ;	jmp	GOTERR 
 17110                                  
 17111                                  ; 16/12/2022
 17112                                  %if 0
 17113                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17114                                  	or	cl,cl
 17115                                  	jnz	short SAVEDEST
 17116                                  	;jz	short BAD_PATH ; *
 17117                                  BAD_PATH: ; *
 17118                                  	;mov	ax,3
 17119                                  	mov	ax,error_path_not_found
 17120                                  	stc
 17121                                  	jmp	RENAME_POP
 17122                                  %endif
 17123                                  
 17124                                  SAVEDEST:
 17125 00002762 16                      	push	ss
 17126 00002763 07                      	pop	es
 17127                                  
 17128                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 17129 00002764 BF[5705]                	MOV	DI,NAME2
 17130 00002767 BE[4B05]                	MOV	SI,NAME1
 17131                                  
 17132 0000276A B90B00                  	MOV	CX,11
 17133 0000276D F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 17134 0000276F A1[C205]                	MOV	AX,[DIRSTART]
 17135 00002772 A3[6405]                	MOV	[DESTSTART],AX
 17136                                  BUILDDEST:
 17137                                  	; 31/01/2024
 17138                                  	;push	ss
 17139                                  	;pop	es			; needed due to JMP BUILDDEST below
 17140                                  
 17141                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 17142 00002775 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 17143 00002778 BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 17144 0000277B BE[5705]                	MOV	SI,NAME2		; Raw dest
 17145                                  
 17146 0000277E B90B00                  	MOV	CX,11
 17147                                  
 17148                                  	; 17/05/2019 - Retro DOS v4.0
 17149                                  	
 17150                                  	; MSDOS 6.0
 17151 00002781 E8F900                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 17152                                  
 17153                                  	; MSDOS 3.3
 17154                                  
 17155                                  ; 08/08/2018 - Retro DOS v3.0
 17156                                  ; MSDOS 6.0 
 17157                                  ;---------------------------------------------------------------------------
 17158                                  ;Procedure: NEW_RENAME
 17159                                  ;
 17160                                  ;Input: DS:SI -> raw string with ?
 17161                                  ;	ES:DI -> destination string
 17162                                  ;	DS:BX -> source string
 17163                                  ;Function: replace ? chars of raw string with chars in source string and
 17164                                  ;	   put in destination string
 17165                                  ;Output: ES:DI-> new string
 17166                                  ;---------------------------------------------------------------------------
 17167                                  ;
 17168                                  ;NEW_RENAME:
 17169                                  ;NEWNAM:
 17170                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 17171                                  ;	LODSB
 17172                                  ;	CMP	AL,"?"
 17173                                  ;	JNZ	short NOCHG
 17174                                  ;	MOV	AL,[BX] 		; Get replace char
 17175                                  ;NOCHG:
 17176                                  ;	STOSB
 17177                                  ;	INC	BX			; Next replace char
 17178                                  ;	LOOP	NEWNAM
 17179                                  ;	; MSDOS 6.0
 17180                                  ;	;retn
 17181                                  
 17182                                  	; MSDOS 3.3 & MSDOS 6.0
 17183                                  	;mov	byte [ATTRIB],16h
 17184 00002784 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 17185 00002789 C606[7E05]FF            	MOV	byte [CREATING],0FFH
 17186 0000278E E8F018                  	call	DEVNAME 		; Check if we built a device name
 17187 00002791 73A3                    	JNC	short BAD_ACC
 17188 00002793 8B1E[6405]              	MOV	BX,[DESTSTART]
 17189 00002797 C42E[8A05]              	LES	BP,[THISDPB]
 17190 0000279B E8ED15                  	call	SETDIRSRCH		; Reset search to start of dir
 17191 0000279E 7296                    	JC	short BAD_ACC 		; Screw up
 17192 000027A0 E8AE14                  	call	FINDENTRY		; See if new name already exists
 17193 000027A3 7391                    	JNC	short BAD_ACC 		; Error if found
 17194 000027A5 803E[4A03]00            	CMP	byte [FAILERR],0
 17195 000027AA 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 17196 000027AC A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 17197 000027AF 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 17198 000027B3 7451                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 17199                                  
 17200                                  	;mov	al,[RENAMEDMA+32]
 17201 000027B5 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 17202 000027B8 A810                    	TEST	AL,attr_directory ; 10h
 17203 000027BA 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 17204                                  					; otherwise the . and .. entries get
 17205                                  					; wiped.
 17206 000027BC A2[6B05]                	MOV	[ATTRIB],AL
 17207 000027BF 8C1E[A005]              	MOV	[THISSFT+2],DS
 17208                                  
 17209                                  ;hkn; AUXSTACK is in DOSDATA
 17210                                  	;mov	si,RENAMEDMA+145h
 17211 000027C3 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 17212 000027C6 8936[9E05]              	MOV	[THISSFT],SI
 17213                                  	;mov	word [SI+2],2
 17214 000027CA C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17215 000027CF 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 17216 000027D1 E87520                  	call	RENAME_MAKE		; This is in mknode
 17217 000027D4 7303                    	JNC	short GOT_DEST
 17218                                  BAD_ACCJ:
 17219 000027D6 E95DFF                  	JMP	BAD_ACC
 17220                                  
 17221                                  GOT_DEST:
 17222 000027D9 53                      	push	bx
 17223 000027DA C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 17224 000027DE E88749                  	call	ShareEnd		; we need to remove it.
 17225 000027E1 5B                      	pop	bx
 17226                                  
 17227                                  ; A zero length entry with the correct new name has now been made at
 17228                                  ;   [CURBUF+2]:BX.
 17229                                  
 17230 000027E2 C43E[E205]              	LES	DI,[CURBUF]
 17231                                  
 17232                                  ; 07/07/2024 - Retro DOS v4.1
 17233                                  %if 0
 17234                                  	; MSDOS 6.0
 17235                                  	;test	byte [es:di+5],40h
 17236                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17237                                  					;LB. if already dirty		  ;AN000;
 17238                                  	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 17239                                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17240                                  	;or	byte [es:di+5],40h
 17241                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17242                                  yesdirty1:
 17243                                  %else
 17244                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17245 000027E6 E8D231                  	call	SET_BUF_DIRTY
 17246                                  %endif
 17247 000027E9 89DF                    	MOV	DI,BX
 17248                                  	;add	di,11
 17249 000027EB 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 17250                                  
 17251                                  ;hkn; RENAMEDMA is in DOSDATA
 17252                                  	;mov	si,RENAMEDMA+32 ; 05/07/2024
 17253 000027EE BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 17254                                  	;mov	cx,21
 17255 000027F1 B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 17256 000027F4 F3A4                    	REP	MOVSB
 17257 000027F6 E86E00                  	CALL	GET_SOURCE
 17258 000027F9 7269                    	JC	short RENAME_OVER
 17259 000027FB 89DF                    	MOV	DI,BX
 17260 000027FD 8E06[E405]              	MOV	ES,[CURBUF+2]
 17261 00002801 B0E5                    	MOV	AL,DIRFREE ; 0E5h
 17262 00002803 AA                      	STOSB				; "free" the source
 17263 00002804 EB13                    	JMP	SHORT DIRTY_IT
 17264                                  
 17265                                  SIMPLE_RENAME:
 17266 00002806 E85E00                  	CALL	GET_SOURCE		; Get the source back
 17267 00002809 7259                    	JC	short RENAME_OVER
 17268 0000280B 89DF                    	MOV	DI,BX
 17269 0000280D 8E06[E405]              	MOV	ES,[CURBUF+2]
 17270                                  
 17271                                  ;hkn; NAME1 is in DOSDATA
 17272 00002811 BE[4B05]                	MOV	SI,NAME1		; New Name
 17273 00002814 B90B00                  	MOV	CX,11
 17274 00002817 F3A4                    	REP	MOVSB
 17275                                  DIRTY_IT:
 17276 00002819 8B3E[E205]              	MOV	DI,[CURBUF]
 17277                                  
 17278                                  ; 07/07/2024 - Retro DOS v4.1
 17279                                  %if 0
 17280                                  	; MSDOS 6.0
 17281                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17282                                  					;LB. if already dirty		  ;AN000;
 17283                                  	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 17284                                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17285                                  	
 17286                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17287                                  %else
 17288                                  	; 31/01/2024 (PCDOS 7.1 IBMDOS.COM)
 17289 0000281D E89B31                  	call	SET_BUF_DIRTY
 17290                                  %endif
 17291                                  
 17292                                  ;------------------------------------------------------------------------------
 17293                                  ; Check if the source is a directory of file. If directory rename it to the
 17294                                  ; the new name in the Fastopen cache buffer. If file name it has been
 17295                                  ; previously deleted.
 17296                                  ;------------------------------------------------------------------------------
 17297                                  
 17298                                  ;yesdirty2:
 17299                                  	; MSDOS 6.0
 17300 00002820 56                      	PUSH	SI
 17301 00002821 C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 17302 00002825 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 17303 00002828 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 17304 0000282C 7403                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 17305 0000282E E81CFE                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 17306                                  	; 31/01/2024
 17307                                  	;POP	SI
 17308                                  	;JMP	SHORT NOT_DIRTY1
 17309                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 17310 00002831 5E                      	POP	SI
 17311                                  NOT_DIRTY1:				;;BN00X
 17312                                  NEXT_SOURCE:
 17313                                  ;hkn; RENAMEDMA is in DOSDATA
 17314 00002832 BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 17315                                  
 17316                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 17317                                  ; to enter it before going to RENAME_Next.
 17318                                  
 17319 00002835 E8AFEA                  	call	ECritDisk
 17320 00002838 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 17321                                  				  ;  to FF when we made the prev new file).
 17322 0000283D E88705                  	call	RENAME_NEXT
 17323                                  
 17324                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 17325                                  ; we were before.
 17326                                  
 17327 00002840 7222                    	JC	short RENAME_OVER
 17328                                  
 17329                                  	;lea	si,[bx+26]
 17330 00002842 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 17331 00002845 E88AFD                  	call	REN_DEL_Check
 17332 00002848 7306                    	JNC	short REN_OK2
 17333 0000284A B82000                  	MOV	AX,error_sharing_violation ; 20h
 17334                                  jmp_to_rename_clean: ; 28/12/2022
 17335 0000284D E9EAFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 17336                                  
 17337                                  ;------------------------------------------------------------------------------
 17338                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 17339                                  ; if directory, rename directory name in the Fastopen cache.
 17340                                  ;-----------------------------------------------------------------------------
 17341                                  
 17342                                  REN_OK2:
 17343                                  	; MSDOS 6.0
 17344                                  	;mov	al,[RENAMEDMA+32]
 17345 00002850 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 17346                                  	;test	al,10h
 17347 00002853 A810                    	TEST	AL,attr_directory	;;BN00X directory
 17348 00002855 7408                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 17349                                  	
 17350                                  	; MSDOS 3.3 & MSDOS 6.0
 17351 00002857 E8E5FD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 17352                                  jmp_to_builddest: ; 28/12/2022
 17353                                  	; 31/01/2024
 17354 0000285A 16                      	push	ss
 17355 0000285B 07                      	pop	es
 17356 0000285C E916FF                  	JMP	BUILDDEST		;;BN00X
 17357                                  
 17358                                  	; MSDOS 6.0
 17359                                  Ren_Directory:
 17360 0000285F E8EBFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 17361                                  	;JMP	BUILDDEST
 17362                                  	; 28/12/2022
 17363 00002862 EBF6                    	jmp	short jmp_to_builddest
 17364                                  
 17365                                  RENAME_OVER:
 17366 00002864 F8                      	CLC
 17367                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 17368                                  	; 28/12/2022
 17369 00002865 EBE6                    	jmp	short jmp_to_rename_clean
 17370                                  
 17371                                  ;----------------------------------------------------------------------------
 17372                                  ; Procedure: GET_SOURCE
 17373                                  ;
 17374                                  ; Inputs:
 17375                                  ;	RENAMEDMA has source info
 17376                                  ; Function:
 17377                                  ;	Re-find the source
 17378                                  ; Output:
 17379                                  ;	[CURBUF] set
 17380                                  ;	[CURBUF+2]:BX points to entry
 17381                                  ;	Carry set if error (currently user FAILed to I 24)
 17382                                  ; DS preserved, others destroyed
 17383                                  ;----------------------------------------------------------------------------
 17384                                  
 17385                                  GET_SOURCE:
 17386 00002867 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 17387 0000286B C42E[8A05]              	LES	BP,[THISDPB]
 17388 0000286F E81915                  	call	SETDIRSRCH
 17389 00002872 7214                    	JC	short gs_ret_label	; retc
 17390 00002874 E8E917                  	call	STARTSRCH
 17391 00002877 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 17392                                  	;call	GETENT
 17393                                  	; 18/12/2022
 17394 0000287A E9E114                  	jmp	GETENT
 17395                                  ;gs_ret_label:
 17396                                  	;retn
 17397                                  
 17398                                  ; MSDOS 6.0 
 17399                                  ;---------------------------------------------------------------------------
 17400                                  ;Procedure: NEW_RENAME
 17401                                  ;
 17402                                  ;Input: DS:SI -> raw string with ?
 17403                                  ;	ES:DI -> destination string
 17404                                  ;	DS:BX -> source string
 17405                                  ;Function: replace ? chars of raw string with chars in source string and
 17406                                  ;	   put in destination string
 17407                                  ;Output: ES:DI-> new string
 17408                                  ;---------------------------------------------------------------------------
 17409                                  
 17410                                  NEW_RENAME:
 17411                                  	; 17/05/2019 - Retro DOS v4.0
 17412                                  NEWNAM:
 17413                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 17414 0000287D AC                      	LODSB
 17415 0000287E 3C3F                    	CMP	AL,"?" ; 3Fh
 17416 00002880 7502                    	JNZ	short NOCHG
 17417 00002882 8A07                    	MOV	AL,[BX] 		; Get replace char
 17418                                  NOCHG:
 17419 00002884 AA                      	STOSB
 17420 00002885 43                      	INC	BX			; Next replace char
 17421 00002886 E2F5                    	LOOP	NEWNAM
 17422                                  	; MSDOS 6.0
 17423                                  gs_ret_label:	; 18/12/2022
 17424 00002888 C3                      	retn
 17425                                  
 17426                                  ;============================================================================
 17427                                  ; FINFO.ASM, MSDOS 6.0, 1991
 17428                                  ;============================================================================
 17429                                  ; 08/08/2018 - Retro DOS v3.0
 17430                                  ; 17/05/2019 - Retro DOS v4.0
 17431                                  
 17432                                  ;**	Low level routines for returning file information and setting file
 17433                                  ;	attributes
 17434                                  ;
 17435                                  ;	GET_FILE_INFO
 17436                                  ;	SET_FILE_ATTRIBUTE
 17437                                  ;
 17438                                  ;	Modification history:
 17439                                  ;
 17440                                  ;	    Created: ARR 30 March 1983
 17441                                  ;
 17442                                  ;	M025: Return access_denied if attempting to set
 17443                                  ;	      attribute of root directory.
 17444                                  ;
 17445                                  
 17446                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 17447                                  
 17448                                  ;---------------------------------------------------------------------------
 17449                                  ; Procedure Name : GET_FILE_INFO
 17450                                  ;
 17451                                  ; Inputs:
 17452                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17453                                  ;		terminated)
 17454                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17455                                  ;		( = -1 if current dir not involved, else
 17456                                  ;		 Points to first char after last "/" of current dir part)
 17457                                  ;	[THISCDS] Points to CDS being used
 17458                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17459                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17460                                  ; Function:
 17461                                  ;	Get Information about a file
 17462                                  ; Returns:
 17463                                  ;	CARRY CLEAR
 17464                                  ;	    AX = Attribute of file
 17465                                  ;	    CX = Time stamp of file
 17466                                  ;	    DX = Date stamp of file
 17467                                  ;	    BX:DI = Size of file (32 bit)
 17468                                  ;	CARRY SET
 17469                                  ;	    AX is error code
 17470                                  ;		error_file_not_found
 17471                                  ;			Last element of path not found
 17472                                  ;		error_path_not_found
 17473                                  ;			Bad path (not in curr dir part if present)
 17474                                  ;		error_bad_curr_dir
 17475                                  ;			Bad path in current directory part of path
 17476                                  ; DS preserved, others destroyed
 17477                                  ;---------------------------------------------------------------------------
 17478                                  
 17479                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17480                                  
 17481                                  GET_FILE_INFO:
 17482                                  
 17483                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 17484                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17485                                  
 17486 00002889 E8A2E9                  	call	TestNet
 17487 0000288C 7306                    	JNC	short LOCAL_INFO
 17488                                  
 17489                                  ;IF NOT Installed
 17490                                  ;	transfer NET_GET_FILE_INFO
 17491                                  ;ELSE
 17492                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 17493                                  ;	INT	2FH
 17494                                  ;	return
 17495                                  
 17496 0000288E B80F11                  	mov     ax, 110Fh
 17497 00002891 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 17498                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17499                                  			; SDA CDS pointer -> current directory
 17500                                  			; Return: CF set on error, AX = file attributes
 17501 00002893 C3                      	retn
 17502                                  ;ENDIF
 17503                                  
 17504                                  LOCAL_INFO:
 17505 00002894 E850EA                  	call	ECritDisk
 17506 00002897 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17507                                  	; MSDOS 3.3
 17508                                  	;call	GETPATH
 17509                                  	; MSDOS 6.0
 17510 0000289C E8CB00                  	call	GET_FAST_PATH
 17511                                  	; MSDOS 3.3 & MSDOS 6.0
 17512 0000289F 7312                    	JNC	short info_check_dev
 17513                                  NO_PATH:
 17514 000028A1 750B                    	JNZ	short bad_path1
 17515 000028A3 08C9                    	OR	CL,CL
 17516 000028A5 7407                    	JZ	short bad_path1
 17517                                  info_no_file:
 17518 000028A7 B80200                  	MOV	AX,error_file_not_found
 17519                                  BadRet:
 17520 000028AA F9                      	STC
 17521                                  JustRet:
 17522                                  	;call	LCritDisk
 17523                                  	;retn
 17524                                  	; 18/12/2022
 17525 000028AB E954EA                  	jmp	LCritDisk
 17526                                  
 17527                                  bad_path1:
 17528 000028AE B80300                  	MOV	AX,error_path_not_found
 17529 000028B1 EBF7                    	jmp	short BadRet
 17530                                  
 17531                                  info_check_dev:
 17532 000028B3 08E4                    	OR	AH,AH
 17533 000028B5 78F0                    	JS	short info_no_file	; device
 17534                                  
 17535                                  	; MSDOS 6.0
 17536                                  ;SR;
 17537                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 17538                                  ;for a root dir
 17539                                  
 17540 000028B7 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 17541 000028BC 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 17542                                  
 17543 000028BE 30E4                    	xor	ah,ah
 17544 000028C0 B010                    	mov	al,attr_directory ; 10h
 17545                                  	;clc
 17546                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17547                                  	; (DOSCODE:683Eh)
 17548                                  	; 16/12/2022
 17549                                  	;clc
 17550 000028C2 EBE7                    	jmp	short JustRet
 17551                                  
 17552                                  not_root:
 17553                                  	; MSDOS 3.3 (& MSDOS 6.0)
 17554 000028C4 1E                      	PUSH	DS
 17555 000028C5 8E1E[E405]              	MOV	DS,[CURBUF+2]
 17556 000028C9 89DE                    	MOV	SI,BX
 17557 000028CB 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 17558 000028CD 89DF                    	MOV	DI,BX
 17559                                  	;mov	cx,[si+16h]
 17560 000028CF 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 17561                                  	;mov	dx,[si+18h]
 17562 000028D2 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17563 000028D5 30E4                    	XOR	AH,AH
 17564                                  	;mov	al,[si+0Bh]
 17565 000028D7 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17566                                  	;test	al,10h
 17567 000028DA A810                    	TEST	AL,attr_directory
 17568 000028DC 7506                    	JNZ	short NO_SIZE
 17569                                  	;mov	di,[si+1Ch]
 17570 000028DE 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17571                                  	;mov	bx,[si+1Eh]
 17572 000028E1 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17573                                  NO_SIZE:
 17574 000028E4 1F                      	POP	DS
 17575                                  	;CLC
 17576                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17577                                  	; (DOSCODE:6864h)
 17578                                  	; 16/12/2022
 17579                                  	;clc
 17580 000028E5 EBC4                    	jmp	short JustRet
 17581                                  
 17582                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17583                                  ;-------------------------------------------------------------------------------
 17584                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17585                                  ; Inputs:
 17586                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17587                                  ;		terminated)
 17588                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17589                                  ;		( = -1 if current dir not involved, else
 17590                                  ;		 Points to first char after last "/" of current dir part)
 17591                                  ;	[THISCDS] Points to CDS being used
 17592                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17593                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17594                                  ;	AX is new attributes to give to file
 17595                                  ; Function:
 17596                                  ;	Set File Attributes
 17597                                  ; Returns:
 17598                                  ;	CARRY CLEAR
 17599                                  ;	    No error
 17600                                  ;	CARRY SET
 17601                                  ;	    AX is error code
 17602                                  ;		error_file_not_found
 17603                                  ;			Last element of path not found
 17604                                  ;		error_path_not_found
 17605                                  ;			Bad path (not in curr dir part if present)
 17606                                  ;		error_bad_curr_dir
 17607                                  ;			Bad path in current directory part of path
 17608                                  ;		error_access_denied
 17609                                  ;			Attempt to set an attribute which cannot be set
 17610                                  ;			(attr_directory, attr_volume_ID)
 17611                                  ;		error_sharing_violation
 17612                                  ;			Sharing mode of file did not allow the change
 17613                                  ;			(this request requires exclusive write/read access)
 17614                                  ;			(INT 24H generated)
 17615                                  ; DS preserved, others destroyed
 17616                                  ;----------------------------------------------------------------------------
 17617                                  
 17618                                  SET_FILE_ATTRIBUTE:
 17619                                  
 17620                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17621                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17622                                  
 17623 000028E7 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17624 000028EA 7414                    	JZ	short set_look
 17625                                  _BAD_ACC:
 17626 000028EC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17627 000028F1 C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17628 000028F6 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17629 000028FB B80500                  	MOV	AX,error_access_denied ; 5
 17630 000028FE F9                      	STC
 17631 000028FF C3                      	retn
 17632                                  
 17633                                  set_look:
 17634 00002900 E82BE9                  	call	TestNet
 17635 00002903 7308                    	JNC	short LOCAL_SET
 17636                                  
 17637                                  ;IF NOT Installed
 17638                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17639                                  ;ELSE
 17640 00002905 50                      	PUSH	AX
 17641                                  	
 17642                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17643                                  	;INT	2FH
 17644                                  
 17645 00002906 B80E11                  	mov     ax, 110Eh
 17646 00002909 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17647                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17648                                  			; SDA CDS pointer -> current directory
 17649                                  			; STACK: WORD new file attributes
 17650                                  			; Return: CF set on error
 17651                                  
 17652 0000290B 5B                      	POP	BX			; clean stack
 17653 0000290C C3                      	retn
 17654                                  ;ENDIF
 17655                                  
 17656                                  LOCAL_SET:
 17657 0000290D E8D7E9                  	call	ECritDisk
 17658 00002910 50                      	PUSH	AX			; Save new attributes
 17659 00002911 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17660 00002916 E8CF14                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17661 00002919 7308                    	JNC	short set_check_device
 17662 0000291B 5B                      	POP	BX			; Clean stack (don't zap AX)
 17663 0000291C EB83                    	JMP	short NO_PATH
 17664                                  
 17665                                  	; MSDOS 6.0
 17666                                  cannot_set_root:			; M025:
 17667 0000291E B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17668                                  	;stc				; M025: to set attr. of root
 17669                                  	;jmp	short OK_BYE		; M025:
 17670                                  	; 01/02/2024
 17671 00002921 EB87                    	jmp	short BadRet
 17672                                  
 17673                                  set_check_device:
 17674 00002923 08E4                    	OR	AH,AH
 17675 00002925 7906                    	JNS	short set_check_share
 17676 00002927 58                      	POP	AX
 17677 00002928 E8D7E9                  	call	LCritDisk
 17678 0000292B EBBF                    	JMP	short _BAD_ACC 		; device
 17679                                  
 17680                                  set_check_share:
 17681 0000292D 58                      	POP	AX			; Get new attributes
 17682                                  
 17683                                  	; MSDOS 6.0
 17684 0000292E 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17685 00002933 74E9                    	je	short cannot_set_root	; M025: Y: return error
 17686                                  
 17687                                  	; MSDOS 3.3 & MSDOS 6.0
 17688 00002935 E89AFC                  	call	REN_DEL_Check
 17689 00002938 7305                    	JNC	short set_do
 17690 0000293A B82000                  	MOV	AX,error_sharing_violation ; 32
 17691 0000293D EB28                    	jmp	short OK_BYE
 17692                                  
 17693                                  set_do:
 17694                                  	; MSDOS 3.3 & MSDOS 6.0
 17695 0000293F C43E[E205]              	LES	DI,[CURBUF]
 17696 00002943 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17697 00002948 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17698                                  
 17699                                  ; 07/07/2024 - Retro DOS v4.1
 17700                                  %if 0
 17701                                  	; MSDOS 6.0
 17702                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17703                                  					;LB. if already dirty		  ;AN000;
 17704                                  	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17705                                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17706                                  	
 17707                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17708                                  yesdirty3:
 17709                                  %else
 17710                                  	; 01/02/2024
 17711                                  	; (PCDOS 7.1 IBMDOS.COM)
 17712 0000294C E86C30                  	call	SET_BUF_DIRTY
 17713                                  %endif
 17714 0000294F A0[7605]                	MOV	AL,[THISDRV]
 17715                                  ;;;; 10/1/86 F.C update fastopen cache
 17716 00002952 52                      	PUSH	DX
 17717 00002953 57                      	PUSH	DI
 17718 00002954 B400                    	MOV	AH,0		  ; dir entry update
 17719 00002956 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17720 00002958 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17721 0000295A E80AFD                  	call	FastOpen_Update
 17722 0000295D 5F                      	POP	DI
 17723 0000295E 5A                      	POP	DX
 17724                                  ;;;; 9/11/86 F.C update fastopen cache
 17725 0000295F E8572F                  	call	FLUSHBUF
 17726 00002962 7303                    	JNC	short OK_BYE
 17727 00002964 B80200                  	MOV	AX,error_file_not_found
 17728                                  OK_BYE:
 17729                                  	;call	LCritDisk
 17730                                  	;retn
 17731                                  	; 16/12/2022
 17732 00002967 E998E9                  	jmp	LCritDisk
 17733                                  
 17734                                  	; 17/05/2019 - Retro DOS v4.0
 17735                                  
 17736                                  	; MSDOS 6.0
 17737                                  GET_FAST_PATH:
 17738                                  ;hkn; use SS override for FastOpenFlg
 17739 0000296A 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17740                                  					;FO. trigger fastopen	;AN000;
 17741 00002970 E87514                  	call	GETPATH
 17742 00002973 9C                      	PUSHF			 	;FO.			;AN000;
 17743 00002974 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17744                                  					;FO. clear all fastopen flags ;AN000;
 17745 0000297A 9D                      	POPF				;FO.			;AN000;
 17746 0000297B C3                      	retn
 17747                                  
 17748                                  ;============================================================================
 17749                                  ; DUP.ASM, MSDOS 6.0, 1991
 17750                                  ;============================================================================
 17751                                  ; 08/08/2018 - Retro DOS v3.0
 17752                                  ; 17/05/2019 - Retro DOS v4.0
 17753                                  
 17754                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17755                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17756                                  ;
 17757                                  ;	DOS_DUP
 17758                                  ;
 17759                                  ;	Modification history:
 17760                                  ;
 17761                                  ;	  Created: ARR 30 March 1983
 17762                                  
 17763                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17764                                  ;---------------------------------------------------------------------------
 17765                                  ; Procedure Name : DOS_DUP
 17766                                  ;
 17767                                  ; Inputs:
 17768                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17769                                  ;		(a non net SFT is OK, in this case the ref
 17770                                  ;		 count is simply incremented)
 17771                                  ; Function:
 17772                                  ;	Signal to the devices that a logical open is occurring
 17773                                  ; Returns:
 17774                                  ;	ES:DI point to SFT
 17775                                  ;    Carry clear
 17776                                  ;	SFT ref_count is incremented
 17777                                  ; Registers modified: None.
 17778                                  ; NOTE:
 17779                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17780                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17781                                  ;	that time.
 17782                                  ;---------------------------------------------------------------------------
 17783                                  
 17784                                  DOS_DUP:
 17785                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17786                                  
 17787                                  	; MSDOS 6.0
 17788 0000297C 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17789 00002981 26C43E[9E05]            	les	di,[es:THISSFT]
 17790                                  
 17791                                  	;Entry	Dos_Dup_Direct
 17792                                  DOS_Dup_Direct:
 17793 00002986 E8BEE8                  	call	IsSFTNet
 17794 00002989 7503                    	JNZ	short DO_INC
 17795 0000298B E8FE1A                  	call	DEV_OPEN_SFT
 17796                                  DO_INC:
 17797                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17798 0000298E 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17799                                  					;   we're in big trouble anyway)
 17800 00002991 C3                      	retn
 17801                                  
 17802                                  ;============================================================================
 17803                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17804                                  ;============================================================================
 17805                                  ; 08/08/2018 - Retro DOS v3.0
 17806                                  ; 18/05/2019 - Retro DOS v4.0
 17807                                  
 17808                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17809                                  ;NAME	DOS_CREATE
 17810                                  ;----------------------------------------------------------------------------
 17811                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17812                                  ;
 17813                                  ;	DOS_CREATE
 17814                                  ;	DOS_CREATE_NEW
 17815                                  ;	SET_MKND_ERR
 17816                                  ;	SET_Media_ID
 17817                                  ;	SET_EXT_Mode
 17818                                  ;
 17819                                  ;	Revision history:
 17820                                  ;
 17821                                  ;	    A000 version 4.00	  Jan. 1988
 17822                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17823                                  
 17824                                  ;Installed = TRUE
 17825                                  
 17826                                  ;	i_need	THISSFT,DWORD
 17827                                  ;	i_need	THISCDS,DWORD
 17828                                  ;	I_need	EXTERR,WORD
 17829                                  ;	I_Need	ExtErr_locus,BYTE
 17830                                  ;	I_need	JShare,DWORD
 17831                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17832                                  ;	I_need	SATTRIB,BYTE
 17833                                  ;	I_need	CALLVIDM,DWORD
 17834                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17835                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17836                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17837                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17838                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17839                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17840                                  
 17841                                  ;***	DOS_CREATE - Create a File
 17842                                  ;----------------------------------------------------------------------------
 17843                                  ;	DOS_Create is called to create the specified file, truncating
 17844                                  ;	the old one if it exists.
 17845                                  ;
 17846                                  ;	ENTRY	AX is Attribute to create
 17847                                  ;		(ds) = DOSDATA
 17848                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17849                                  ;			terminated)
 17850                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17851                                  ;			( = -1 if current dir not involved, else
 17852                                  ;			 Points to first char after last "/" of current dir part)
 17853                                  ;		[THISCDS] Points to CDS being used
 17854                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17855                                  ;		[THISSFT] Points to SFT to fill in if file created
 17856                                  ;			(sf_mode field set so that FCB may be detected)
 17857                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17858                                  ;
 17859                                  ;	EXIT	sf_ref_count is NOT altered
 17860                                  ;		CARRY CLEAR
 17861                                  ;		    THISSFT filled in.
 17862                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17863                                  ;		CARRY SET
 17864                                  ;		    AX is error code
 17865                                  ;			error_path_not_found
 17866                                  ;				Bad path (not in curr dir part if present)
 17867                                  ;			error_bad_curr_dir
 17868                                  ;				Bad path in current directory part of path
 17869                                  ;			error_access_denied
 17870                                  ;				Attempt to re-create read only file , or
 17871                                  ;				create a second volume id or create a dir
 17872                                  ;			error_sharing_violation
 17873                                  ;				The sharing mode was correct but not allowed
 17874                                  ;				generates an INT 24
 17875                                  ;	USES	all but DS
 17876                                  ;----------------------------------------------------------------------------
 17877                                  
 17878                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17879                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17880                                  
 17881                                  DOS_CREATE:
 17882                                  	; 18/05/2019 - Retro DOS v4.0
 17883                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17884                                  
 17885                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17886                                  ;hkn; this point.
 17887                                  
 17888 00002992 30E4                    	XOR	AH,AH		; Truncate is OK
 17889                                  
 17890                                  ;	Enter here from Dos_Create_New
 17891                                  ;
 17892                                  ;	(ah) = 0 iff truncate OK
 17893                                  
 17894                                  Create_inter:
 17895 00002994 A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17896                                  				; Mask out any meaningless bits
 17897 00002996 7511                    	JNZ	short AttErr
 17898 00002998 A808                    	TEST	AL,attr_volume_id
 17899 0000299A 7407                    	JZ	short NoReset
 17900                                  	
 17901                                  	; MSDOS 6.0
 17902                                  	; 16/12/2022
 17903 0000299C 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17904                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17905                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17906                                  	
 17907 000029A1 B008                    	MOV	AL,attr_volume_id ; 8
 17908                                  NoReset:
 17909 000029A3 0C20                    	OR	AL,attr_archive ; File changed  ; 20h
 17910 000029A5 A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17911 000029A7 740A                    	JZ	short ATT_OK
 17912                                  AttErr:
 17913 000029A9 B80500                  	MOV	AX,5		; Attribute problem
 17914 000029AC C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17915 000029B1 EB62                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17916                                  				   ;	attr_device to be set.
 17917                                  ATT_OK:
 17918 000029B3 C43E[9E05]              	LES	DI,[THISSFT]
 17919 000029B7 06                      	PUSH	ES
 17920 000029B8 C436[A205]              	LES	SI,[THISCDS]
 17921 000029BC 83FEFF                  	CMP	SI,-1
 17922 000029BF 751B                    	JNE	short TEST_RE_NET
 17923                                  
 17924                                  ;	No CDS, it must be redirected.
 17925                                  
 17926 000029C1 07                      	POP	ES
 17927                                  
 17928                                  	; MSDOS 6.0
 17929                                  ;Extended open hooks
 17930                                  	;test	byte [EXTOPEN_ON],1
 17931 000029C2 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17932 000029C7 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17933                                  IFS_extopen:				    ;AN000;EO.
 17934 000029C9 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17935                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17936 000029CA B82E11                  	mov	ax,112Eh
 17937                                  NOEXTOP2:	; 01/02/2024 (PCDOS 7.1 IBMDOS.COM)
 17938 000029CD CD2F                    	INT	2FH			    ;AN000;EO.
 17939 000029CF 5B                      	POP	BX			    ;AN000;EO. trash bx
 17940 000029D0 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17941 000029D5 C3                      	retn				    ;AN000;EO.
 17942                                  NOEXTOP:				    ;AN000;
 17943                                  ;Extended open hooks
 17944                                  
 17945                                  ;IF NOT Installed
 17946                                  ;	transfer NET_SEQ_CREATE
 17947                                  ;ELSE
 17948 000029D6 50                      	PUSH	AX
 17949                                  
 17950                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17951                                  	;INT	2FH
 17952                                  
 17953 000029D7 B81811                  	mov	ax,1118h
 17954                                  	; 01/02/2024
 17955                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17956                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17957                                  			; SDA first filename pointer -> fully-qualified name of file
 17958                                  			; STACK: WORD file creation mode???
 17959                                  
 17960                                  	;POP	BX			; BX is trashed anyway
 17961                                  	;retn
 17962 000029DA EBF1                    	jmp	short NOEXTOP2 ; 01/02/2024
 17963                                  ;ENDIF
 17964                                  
 17965                                  ;	We have a CDS. See if it's network
 17966                                  
 17967                                  TEST_RE_NET:
 17968                                  	;;test	word [es:si+43h],8000h
 17969                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17970                                  	; 07/12/2022
 17971                                  	;test	byte [es:si+44h],80h
 17972                                  	; 17/12/2022
 17973 000029DC 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17974 000029E1 07                      	POP	ES
 17975 000029E2 7417                    	JZ	short LOCAL_CREATE
 17976                                  
 17977                                  	; MSDOS 6.0
 17978 000029E4 E8BD00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17979 000029E7 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17980                                  	;;or	word [es:di+2],2
 17981                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17982                                  	; 17/12/2022
 17983 000029E9 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17984                                  
 17985                                  ;Extended open hooks
 17986                                  dochk:
 17987 000029EE F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17988 000029F3 75D4                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17989                                  ;Extended open hooks
 17990                                  
 17991                                  ;IF NOT Installed
 17992                                  ;	transfer NET_CREATE
 17993                                  ;ELSE
 17994 000029F5 50                      	PUSH	AX
 17995                                  	
 17996                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17997                                  	;INT	2FH
 17998                                  	
 17999 000029F6 B81711                  	mov	ax,1117h
 18000                                  	
 18001                                  	; 01/02/2024
 18002                                  	;int	2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 18003                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18004                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18005                                  			; SDA CDS pointer -> current directory
 18006                                  			; Return: CF set on error
 18007                                  
 18008                                  	;POP	BX			; BX is trashed anyway
 18009                                  ;nomore:
 18010                                  	;retn
 18011 000029F9 EBD2                    	jmp	short NOEXTOP2 ; 01/02/2024
 18012                                  ;ENDIF
 18013                                  
 18014                                  ;**	It's a local create. We have a local CDS for it.
 18015                                  
 18016                                  LOCAL_CREATE:
 18017                                  	; MSDOS 6.0
 18018 000029FB E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 18019 000029FE 7205                    	JC	short setdone	;AN000;EO.
 18020                                  	
 18021                                  	; MSDOS 3.3 & MSDOS 6.0
 18022                                  	; 17/12/2022
 18023                                  	;;or	word [es:di+2],2
 18024                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 18025                                  	;or	byte [es:di+2],2
 18026 00002A00 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 18027                                  setdone:
 18028 00002A05 E8DFE8                  	call	ECritDisk
 18029 00002A08 E81A1E                  	call	MakeNode
 18030 00002A0B 7317                    	JNC	short Create_ok
 18031 00002A0D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 18032 00002A12 E8EDE8                  	call	LCritDisk
 18033                                  
 18034                                  	;entry	SET_MKND_ERR
 18035                                  SET_MKND_ERR:
 18036                                  
 18037                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 18038                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 18039                                  
 18040                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 18041 00002A15 BB[1C2A]                	MOV     BX,CRTERRTAB
 18042                                  	;XLAT  ; MSDOS 3.3
 18043                                  	; 18/05/2019 - Retro DOS v4.0
 18044 00002A18 2E                      	CS
 18045 00002A19 D7                      	XLAT
 18046                                  CreatBadRet:
 18047 00002A1A F9                      	STC
 18048 00002A1B C3                      	retn
 18049                                  
 18050                                  ; 13/05/2019 - Retro DOS v4.0
 18051                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 18052                                  ; ---------------------------------------------------------------------------
 18053                                  
 18054                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 18055                                  
 18056                                  ; 17/07/2018 - Retro DOS v3.0
 18057                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 18058                                  
 18059                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 18060                                  ;	db	0,5,52h,50h,3,5,20h
 18061                                  
 18062                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 18063                                  ;	db	0,5,52h,50h,3,5,20h,2
 18064                                  
 18065                                  ; 08/08/2018
 18066                                  
 18067                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 18068 00002A1C 00                      	DB	0			; none
 18069 00002A1D 05                      	DB	error_access_denied	; MakeNode error 1
 18070 00002A1E 52                      	DB	error_cannot_make	; MakeNode error 2
 18071 00002A1F 50                      	DB	error_file_exists	; MakeNode error 3
 18072 00002A20 03                      	DB	error_path_not_found	; MakeNode error 4
 18073 00002A21 05                      	DB	error_access_denied	; MakeNode error 5
 18074 00002A22 20                      	DB	error_sharing_violation ; MakeNode error 6
 18075                                  	; MSDOS 6.0
 18076 00002A23 02                      	DB	error_file_not_found	; MakeNode error 7
 18077                                  
 18078                                  ; ---------------------------------------------------------------------------
 18079                                  
 18080                                  ; We have just created a new file. This results in the truncation of old
 18081                                  ; files. We must inform the sharer to slash all the open SFT's for this
 18082                                  ; file to the current size.
 18083                                  
 18084                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 18085                                  ; drive number to force a Build BPB after Media Check.
 18086                                  
 18087                                  ;;; FASTOPEN 8/29/86
 18088                                  Create_ok:
 18089 00002A24 E818FC                  	call	FastOpen_Delete
 18090                                  ;;; FASTOPEN 8/29/86
 18091 00002A27 A0[6D05]                	mov	al,[SATTRIB]
 18092 00002A2A A808                    	test	al,attr_volume_id
 18093 00002A2C 741C                    	jz	short NoVolLabel
 18094 00002A2E C43E[A205]              	LES	DI,[THISCDS]
 18095                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 18096 00002A32 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 18097 00002A35 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 18098 00002A38 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 18099                                  	
 18100                                  	; 18/05/2019 - Retro DOS v4.0
 18101                                  
 18102                                  	; MSDOS 6.0
 18103 00002A3C B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 18104 00002A3E E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 18105                                  	
 18106 00002A41 E8A3E8                  	call	ECritDisk
 18107 00002A44 E8FF2A                  	call	FATREAD_CDS		; force a media check
 18108 00002A47 E8B8E8                  	call	LCritDisk
 18109                                  
 18110                                  NoVolLabel:
 18111 00002A4A B80200                  	MOV	ax,2
 18112 00002A4D C43E[9E05]              	LES	DI,[THISSFT]
 18113                                  ;if installed
 18114                                  	;call	JShare + 14 * 4
 18115 00002A51 FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 18116                                  ;else
 18117                                  ;	Call	ShSU
 18118                                  ;endif
 18119 00002A55 E8AAE8                  	call	LCritDisk
 18120 00002A58 E94901                  	jmp	SET_SFT_MODE
 18121                                  
 18122                                  ;---------------------------------------------------------------------------
 18123                                  ; Procedure Name : Dos_Create_New
 18124                                  ;
 18125                                  ; Inputs:
 18126                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18127                                  ;		terminated)
 18128                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18129                                  ;		( = -1 if current dir not involved, else
 18130                                  ;		 Points to first char after last "/" of current dir part)
 18131                                  ;	[THISCDS] Points to CDS being used
 18132                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18133                                  ;	[THISSFT] Points to SFT to fill in if file created
 18134                                  ;		(sf_mode field set so that FCB may be detected)
 18135                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18136                                  ;	AX is Attribute to create
 18137                                  ; Function:
 18138                                  ;	Try to create the specified file truncating an old one that exists
 18139                                  ; Outputs:
 18140                                  ;	sf_ref_count is NOT altered
 18141                                  ;	CARRY CLEAR
 18142                                  ;	    THISSFT filled in.
 18143                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 18144                                  ;	CARRY SET
 18145                                  ;	    AX is error code
 18146                                  ;		error_path_not_found
 18147                                  ;			Bad path (not in curr dir part if present)
 18148                                  ;		error_bad_curr_dir
 18149                                  ;			Bad path in current directory part of path
 18150                                  ;		error_access_denied
 18151                                  ;			Create a second volume id or create a dir
 18152                                  ;		error_file_exists
 18153                                  ;			Already a file by this name
 18154                                  ; DS preserved, others destroyed
 18155                                  ;---------------------------------------------------------------------------
 18156                                  
 18157                                  DOS_Create_New:
 18158 00002A5B B401                    	MOV	AH,1		; Truncate is NOT OK
 18159 00002A5D E934FF                  	JMP	Create_inter
 18160                                  
 18161                                  ; MSDOS 6.0
 18162                                  ;---------------------------------------------------------------------------
 18163                                  ; Procedure Name : Set_Media_ID
 18164                                  ;
 18165                                  ; Inputs:
 18166                                  ;	NAME1= Volume ID
 18167                                  ;	BH= 0, delete volume id
 18168                                  ;	    1, set new volume id
 18169                                  ;	DS= DOSGROUP
 18170                                  ; Function:
 18171                                  ;	Set Volume ID to DOS 4.00 Boot record.
 18172                                  ; Outputs:
 18173                                  ;	CARRY CLEAR
 18174                                  ;	    volume id set
 18175                                  ;	CARRY SET
 18176                                  ;	    AX is error code
 18177                                  ;---------------------------------------------------------------------------
 18178                                  
 18179                                  	; 18/05/2019 - Retro DOS v4.0
 18180                                  Set_Media_ID:
 18181 00002A60 50                      	PUSH	AX		;AN000;;>32mb
 18182 00002A61 06                      	PUSH	ES		;AN000;;>32mb
 18183 00002A62 57                      	PUSH	DI		;AN000;;>32mb
 18184                                  
 18185 00002A63 FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 18186 00002A65 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 18187 00002A67 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 18188 00002A69 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 18189                                  
 18190                                  ;hkn; PACKET_TEMP is in DOSDATA
 18191 00002A6C BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 18192                                  
 18193 00002A6F 53                      	PUSH	BX		;AN000;;>32mb
 18194 00002A70 52                      	PUSH	DX		;AN000;;>32mb
 18195 00002A71 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18196                                  
 18197                                  	;invoke	$IOCTL		;AN000;;>32mb
 18198 00002A73 E88FF7                  	call	_$IOCTL	
 18199                                  
 18200 00002A76 5A                      	POP	DX		;AN000;;>32mb
 18201 00002A77 5B                      	POP	BX		;AN000;;>32mb
 18202 00002A78 7224                    	JC	short geterr	;AN000;;>32mb
 18203                                  
 18204 00002A7A 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 18205 00002A7C 7405                    	JZ	short NoName	;AN000;>32mb yes
 18206                                  
 18207                                  ;hkn; NAME1 is in DOSDATA
 18208 00002A7E BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 18209                                  
 18210 00002A81 EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 18211                                  NoName: 			;AN000;
 18212                                  
 18213                                  ;hkn; NO_NAME_ID is in DOSDATA
 18214 00002A83 BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 18215                                  
 18216                                  doset:				;AN000;
 18217 00002A86 89D7                    	MOV	DI,DX		;AN000;;>32mb
 18218                                  	;add	di,6
 18219 00002A88 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 18220                                  
 18221                                  ;hkn; ES & DS must point to SS
 18222                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 18223 00002A8B 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 18224                                  
 18225 00002A8C 1F                      	POP	DS		;AN000;;>32mb
 18226                                  
 18227                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 18228 00002A8D 16                      	PUSH	SS		;AN000;;>32mb
 18229                                  
 18230 00002A8E 07                      	POP	ES		;AN000;;>32mb
 18231 00002A8F B90B00                  	MOV	CX,11		;AN000;;>32mb
 18232 00002A92 F3A4                    	REP	MOVSB		;AN000;;>32mb
 18233 00002A94 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 18234 00002A97 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 18235 00002A99 30FF                    	XOR	BH,BH		;AN000;;>32mb
 18236                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 18237 00002A9B E867F7                  	call	_$IOCTL	
 18238                                  geterr: 			;AN000;
 18239                                  ;hkn;	PUSH	CS		;AN000;>32mb
 18240 00002A9E 16                      	PUSH	SS		;AN000;>32mb
 18241                                  
 18242 00002A9F 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 18243                                  
 18244 00002AA0 5F                      	POP	DI		;AN000;;>32mb
 18245 00002AA1 07                      	POP	ES		;AN000;;>32mb
 18246 00002AA2 58                      	POP	AX		;AN000;;>32mb
 18247 00002AA3 C3                      	retn			;AN000;>32mb
 18248                                  
 18249                                  ; MSDOS 6.0
 18250                                  ;---------------------------------------------------------------------------
 18251                                  ; Procedure Name : Set_EXT_mode
 18252                                  ;
 18253                                  ; Inputs:
 18254                                  ;	[EXTOPEN_ON]= flag for extended open
 18255                                  ;	SAVE_BX= mode specified in Extended Open
 18256                                  ; Function:
 18257                                  ;	Set mode in ThisSFT
 18258                                  ; Outputs:
 18259                                  ;	carry set,mode is set if from Extended Open
 18260                                  ;	carry clear, mode not set yet
 18261                                  ;---------------------------------------------------------------------------
 18262                                  
 18263                                  ; 13/05/2019 - Retro DOS v4.0
 18264                                  
 18265                                  Set_EXT_mode:
 18266                                  
 18267                                  ;hkn; SS override
 18268 00002AA4 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 18269 00002AAA 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 18270 00002AAC 50                      	PUSH	AX			    ;AN000;EO.
 18271                                  
 18272                                  ;hkn; SS override
 18273 00002AAD 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 18274                                  	;or	[es:di+2],ax
 18275 00002AB1 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 18276 00002AB5 58                      	POP	AX			    ;AN000;EO.
 18277 00002AB6 F9                      	STC				    ;AN000;EO.
 18278                                  NOTEX:					    ;AN000;
 18279 00002AB7 C3                      	retn				    ;AN000;EO.
 18280                                  
 18281                                  ;============================================================================
 18282                                  ; OPEN.ASM, MSDOS 6.0, 1991
 18283                                  ;============================================================================
 18284                                  ; 08/08/2018 - Retro DOS v3.0
 18285                                  ; 18/05/2019 - Retro DOS v4.0
 18286                                  
 18287                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 18288                                  ;	NAME	DOS_OPEN
 18289                                  
 18290                                  ;**	OPEN.ASM - File Open
 18291                                  ;----------------------------------------------------------------------------
 18292                                  ;	Low level routines for openning a file from a file spec.
 18293                                  ;	Also misc routines for sharing errors
 18294                                  ;
 18295                                  ;	DOS_Open
 18296                                  ;	Check_Access_AX
 18297                                  ;	SHARE_ERROR
 18298                                  ;	SET_SFT_MODE
 18299                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 18300                                  ;
 18301                                  ;	Revision history:
 18302                                  ;
 18303                                  ;	    Created: ARR 30 March 1983
 18304                                  ;	    A000	version 4.00   Jan. 1988
 18305                                  ;
 18306                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 18307                                  ; 	       remote extended opens and not save_cx.
 18308                                  ;
 18309                                  ;	M035 - if open made from exec then we must set the appropriate bits
 18310                                  ;	       on the stack before calling off to the redir.
 18311                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 18312                                  ;	       to handle open from exec. In this case set the appropriate bit
 18313                                  ;	       else do not.
 18314                                  ;----------------------------------------------------------------------------	
 18315                                  
 18316                                  ;Installed = TRUE
 18317                                  
 18318                                  ;	i_need	NoSetDir,BYTE
 18319                                  ;	i_need	THISSFT,DWORD
 18320                                  ;	i_need	THISCDS,DWORD
 18321                                  ;	i_need	CURBUF,DWORD
 18322                                  ;	i_need	CurrentPDB,WORD
 18323                                  ;	i_need	CURR_DIR_END,WORD
 18324                                  ;	I_need	RetryCount,WORD
 18325                                  ;	I_need	Open_Access,BYTE
 18326                                  ;	I_need	fSharing,BYTE
 18327                                  ;	i_need	JShare,DWORD
 18328                                  ;	I_need	FastOpenFlg,byte
 18329                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 18330                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 18331                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 18332                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 18333                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 18334                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 18335                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 18336                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 18337                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 18338                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 18339                                  ;	I_need	SAVE_BX,WORD			  ;M034
 18340                                  ;
 18341                                  ;	I_need	DOS_FLAG,BYTE
 18342                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 18343                                  
 18344                                  ;Break	<DOS_Open - internal file access>
 18345                                  ;---------------------------------------------------------------------------
 18346                                  ; Procedure Name : DOS_Open
 18347                                  ;
 18348                                  ; Inputs:
 18349                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18350                                  ;		terminated)
 18351                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18352                                  ;		( = -1 if current dir not involved, else
 18353                                  ;		 Points to first char after last "/" of current dir part)
 18354                                  ;	[THISCDS] Points to CDS being used
 18355                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18356                                  ;	[THISSFT] Points to SFT to fill in if file found
 18357                                  ;		(sf_mode field set so that FCB may be detected)
 18358                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18359                                  ;	AX is Access and Sharing mode
 18360                                  ;	  High NIBBLE of AL (Sharing Mode)
 18361                                  ;		sharing_compat	   file is opened in compatibility mode
 18362                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18363                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18364                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18365                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18366                                  ;	  Low NIBBLE of AL (Access Mode)
 18367                                  ;		open_for_read	file is opened for reading
 18368                                  ;		open_for_write	file is opened for writing
 18369                                  ;		open_for_both	file is opened for both reading and writing.
 18370                                  ;
 18371                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 18372                                  ;		(not checked)
 18373                                  ; Function:
 18374                                  ;	Try to open the specified file
 18375                                  ; Outputs:
 18376                                  ;	sf_ref_count is NOT altered
 18377                                  ;	CARRY CLEAR
 18378                                  ;	    THISSFT filled in.
 18379                                  ;	CARRY SET
 18380                                  ;	    AX is error code
 18381                                  ;		error_file_not_found
 18382                                  ;			Last element of path not found
 18383                                  ;		error_path_not_found
 18384                                  ;			Bad path (not in curr dir part if present)
 18385                                  ;		error_bad_curr_dir
 18386                                  ;			Bad path in current directory part of path
 18387                                  ;		error_invalid_access
 18388                                  ;			Bad sharing mode or bad access mode or bad combination
 18389                                  ;		error_access_denied
 18390                                  ;			Attempt to open read only file for writting, or
 18391                                  ;			open a directory
 18392                                  ;		error_sharing_violation
 18393                                  ;			The sharing mode was correct but not allowed
 18394                                  ;			generates an INT 24 on compatibility mode SFTs
 18395                                  ; DS preserved, others destroyed
 18396                                  ;----------------------------------------------------------------------------
 18397                                  
 18398                                  ; 18/05/2019 - Retro DOS v4.0
 18399                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 18400                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18401                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 18402                                  
 18403                                  DOS_OPEN:
 18404                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 18405                                  
 18406 00002AB8 C606[4C03]00            	MOV	byte [NoSetDir],0
 18407 00002ABD E83301                  	CALL	Check_Access_AX
 18408 00002AC0 722B                    	JC	short do_ret_label	    ; retc
 18409                                  
 18410 00002AC2 C43E[9E05]              	LES	DI,[THISSFT]
 18411 00002AC6 30E4                    	XOR	AH,AH
 18412                                  
 18413                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 18414                                  
 18415 00002AC8 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 18416 00002ACC 06                      	PUSH	ES
 18417 00002ACD C436[A205]              	LES	SI,[THISCDS]
 18418                                  	; 18/08/2018
 18419 00002AD1 83FEFF                  	CMP	SI,-1
 18420 00002AD4 7530                    	JNZ	short TEST_RE_NET1
 18421 00002AD6 07                      	POP	ES
 18422                                  
 18423                                  	; MSDOS 6.0
 18424                                  ;Extended open hooks
 18425 00002AD7 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 18426 00002ADC 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 18427                                  _IFS_extopen:									;AN000;
 18428 00002ADE A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 18429                                  					    ; with which call was made. This
 18430                                  					    ; has the open access bits. 
 18431                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 18432                                  	
 18433 00002AE1 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 18434                                  	;mov	ax,112Eh
 18435                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 18436 00002AE2 B82E11                  	mov	ax,(MultNET*256)+46 
 18437 00002AE5 CD2F                    	INT	2FH			    ;FT.				;AN000;
 18438 00002AE7 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 18439 00002AE8 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 18440                                  
 18441                                  do_ret_label:
 18442 00002AED C3                      	retn				    ;FT.				;AN000;
 18443                                  _NOEXTOP:
 18444                                  ;Extended open hooks
 18445                                  	;
 18446                                  ;IF NOT Installed
 18447                                  	;transfer NET_SEQ_OPEN
 18448                                  ;ELSE
 18449                                  	
 18450                                  do_net_int2f:
 18451 00002AEE F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 18452 00002AF3 7409                    	jz	short not_exec_open	; N: just do net open
 18453                                  					; Y: check to see if redir is aware
 18454                                  					;    of this 
 18455                                  	
 18456                                  					; M042 - start
 18457                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 18458 00002AF5 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 18459                                  					; Q: does this redir know how to 
 18460                                  					;    this
 18461 00002AFA 7402                    	jz	short not_exec_open	; N: just do net open
 18462                                  					; Y: set bit 3 of access byte and 
 18463                                  					;    set sharing mode to DENY_WRITE
 18464                                  					; M042 - end
 18465                                  	
 18466                                  	; NOTE: This specific mode has not been set for the code assembled
 18467                                  	; under the "NOT Installed" conditional. Currently Installed is 
 18468                                  	; always one.
 18469                                  					; M035 - set the bits on the stack
 18470                                  	;mov	al,23h
 18471 00002AFC B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 18472                                  	
 18473                                  not_exec_open:
 18474                                  	; MSDOS 3.3 & MSDOS 6.0
 18475 00002AFE 50                      	PUSH	AX
 18476                                  
 18477                                  	;MOV	AX,(MultNET SHL 8) OR 22
 18478                                  	;INT	2FH
 18479                                  
 18480 00002AFF B81611                  	mov     ax,1116h
 18481 00002B02 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 18482                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 18483                                  			; SDA first filename pointer -> fully-qualified name of file to open
 18484                                  			; STACK: WORD file open mode
 18485                                  			; Return: CF set on error
 18486                                  
 18487 00002B04 5B                      	POP	BX			; clean stack
 18488                                  ;do_ret_label: ; 09/08/2018
 18489 00002B05 C3                      	retn
 18490                                  ;ENDIF
 18491                                  
 18492                                  TEST_RE_NET1:
 18493                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 18494                                  	; 17/12/2022
 18495 00002B06 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 18496 00002B0B 07                      	POP	ES
 18497                                  	; 18/05/2019
 18498 00002B0C 7409                    	JZ	short LOCAL_OPEN
 18499                                  
 18500                                  ;Extended open hooks
 18501                                  	; MSDOS 6.0
 18502 00002B0E F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 18503 00002B13 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 18504                                  ;Extended open hooks
 18505                                  
 18506                                  ;IF NOT Installed
 18507                                  ;	transfer NET_OPEN
 18508                                  ;ELSE
 18509 00002B15 EBD7                    	jmp	short do_net_int2f
 18510                                  ;ENDIF
 18511                                  
 18512                                  LOCAL_OPEN:
 18513                                  	; MSDOS 3.3 & MSDOS 6.0
 18514 00002B17 E8CDE7                  	call	ECritDisk
 18515                                  
 18516                                  ; DOS 3.3 FastOPen 6/16/86
 18517                                  
 18518                                  	;or	byte [FastOpenFlg],5
 18519 00002B1A 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 18520                                  
 18521 00002B1F E8C612                  	call	GETPATH
 18522                                  
 18523                                  ; DOS 3.3 FastOPen 6/16/86
 18524                                  
 18525 00002B22 731D                    	JNC	short Open_found
 18526 00002B24 7511                    	JNZ	short bad_path2
 18527 00002B26 08C9                    	OR	CL,CL
 18528 00002B28 740D                    	JZ	short bad_path2
 18529                                  OpenFNF:
 18530 00002B2A B80200                  	MOV	AX,error_file_not_found	; 2
 18531                                  OpenBadRet:
 18532                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 18533                                  	; 12/08/2018
 18534                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 18535                                  	; MSDOS 6.0
 18536 00002B2D 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 18537 00002B33 F9                      	STC
 18538                                  	;call	LCritDisk
 18539                                  	; 16/12/2022
 18540 00002B34 E9CBE7                  	jmp	LCritDisk
 18541                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 18542                                  	;retn 	; 08/09/2018
 18543                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18544                                  	;jmp	Clear_FastOpen
 18545                                  
 18546                                  bad_path2:
 18547 00002B37 B80300                  	MOV	AX,error_path_not_found	; 3
 18548 00002B3A EBF1                    	JMP	short OpenBadRet
 18549                                  
 18550                                  Open_Bad_Access:
 18551 00002B3C B80500                  	MOV	AX,error_access_denied	; 5
 18552 00002B3F EBEC                    	JMP	short OpenBadRet
 18553                                  
 18554                                  Open_found:
 18555 00002B41 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 18556 00002B43 08E4                    	OR	AH,AH
 18557 00002B45 783E                    	JS	short open_ok		; Devices don't have attributes
 18558 00002B47 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 18559                                  	;mov	al,[es:bx+0Bh]
 18560 00002B4B 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 18561 00002B4F A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 18562 00002B51 75E9                    	JNZ	short Open_Bad_Access
 18563 00002B53 A801                    	TEST	AL,attr_read_only	; check write on read only
 18564 00002B55 742E                    	JZ	short open_ok
 18565                                  
 18566                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 18567                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 18568                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 18569                                  ; processing until the actual write operation:
 18570                                  ;
 18571                                  ; If FCB, then we change the mode to be read_only.
 18572                                  ; If net_FCB, then we change the mode to be read_only.
 18573                                  ; If not open for read then error.
 18574                                  
 18575 00002B57 1E                      	push	ds
 18576 00002B58 56                      	push	si
 18577 00002B59 C536[9E05]              	LDS	SI,[THISSFT]
 18578                                  	;mov	cx,[si+2]
 18579 00002B5D 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18580                                  	; 17/12/2022
 18581                                  	;test	ch,80h
 18582 00002B60 F6C580                  	test	ch,sf_isFCB>>8
 18583                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18584 00002B63 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18585 00002B65 88CA                    	MOV	DL,CL
 18586 00002B67 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18587 00002B6A 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18588 00002B6D 7508                    	JNZ	short NormalOpen	; no
 18589                                  ResetAccess:
 18590                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18591                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18592                                  	; 16/12/2022
 18593 00002B6F 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18594                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18595 00002B72 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18596 00002B75 EB0C                    	JMP	SHORT FillSFT
 18597                                  
 18598                                  ; The SFT is normal. See if the requested access is open_for_read
 18599                                  
 18600                                  NormalOpen:
 18601 00002B77 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18602 00002B7A 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18603 00002B7D 7404                    	JZ	short FillSFT
 18604 00002B7F 5E                      	pop	si
 18605 00002B80 1F                      	pop	ds
 18606 00002B81 EBB9                    	JMP	short Open_Bad_Access
 18607                                  ;
 18608                                  ; All done, restore registers and fill the SFT.
 18609                                  ;
 18610                                  FillSFT:
 18611 00002B83 5E                      	pop	si
 18612 00002B84 1F                      	pop	ds
 18613                                  open_ok:
 18614 00002B85 E84C1E                  	call	DOOPEN			; Fill in SFT
 18615                                  
 18616                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18617                                  	; 18/05/2019
 18618                                  	;and	byte [ss:FastOpenFlag],80h
 18619 00002B88 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18620                                  	; 12/08/2018
 18621                                  	;and	byte [FastOpenFlg],Fast_yes	
 18622                                  
 18623                                  	; MSDOS 6.0
 18624 00002B8E E84300                  	CALL	DO_SHARE_CHECK
 18625 00002B91 7303                    	JNC	short SHARE_OK
 18626                                  	;call	LCritDisk
 18627                                  	; 16/12/2022
 18628 00002B93 E96CE7                  	jmp	LCritDisk
 18629                                  	;;JMP	short Clear_FastOpen
 18630                                  	;retn	; 18/05/2019
 18631                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18632                                  	;jmp	short Clear_FastOpen	
 18633                                  
 18634                                  	; MSDOS 3.3
 18635                                  ;DO_SHARE_CHECK:
 18636                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18637                                  ;OpenShareRetry:
 18638                                  ;	push	cx			; Save number left to do
 18639                                  ;	call	SHARE_CHECK		; Final Check
 18640                                  ;	pop	cx			; CX = # left
 18641                                  ;	JNC	short SHARE_OK		; No problem with access
 18642                                  ;	call	Idle
 18643                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18644                                  ;OpenShareFail:
 18645                                  ;	LES	DI,[THISSFT]
 18646                                  ;	call	SHARE_ERROR
 18647                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18648                                  	
 18649                                  	;12/08/2018
 18650                                  	;mov	byte [ss:FastOpenFlg],0
 18651                                  	;08/09/2018
 18652                                  	;mov	byte [FastOpenFlg],0
 18653                                  	;call	LCritDisk
 18654                                  	;JMP	short Clear_FastOpen
 18655                                  	;retn
 18656                                  
 18657                                  SHARE_OK:
 18658                                  	; MSDOS 3.3 & MSDOS 6.0
 18659 00002B96 B80300                  	MOV	AX,3
 18660 00002B99 C43E[9E05]              	LES	DI,[THISSFT]
 18661                                  ;if installed
 18662                                  	;call	JShare + 14 * 4
 18663 00002B9D FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18664                                  ;else
 18665                                  ;	Call	ShSU
 18666                                  ;endif
 18667 00002BA1 E85EE7                  	call	LCritDisk
 18668                                  	
 18669                                  	;FallThru Set_SFT_Mode
 18670                                  
 18671                                  ;----------------------------------------------------------------------------
 18672                                  ; Procedure Name : SET_SFT_MODE
 18673                                  ;
 18674                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18675                                  ;
 18676                                  ;   Inputs:
 18677                                  ;	ThisSFT points to SFT
 18678                                  ;
 18679                                  ;   Outputs:
 18680                                  ;	Carry clear
 18681                                  ;   Registers modified: AX.
 18682                                  ;---------------------------------------------------------------------------
 18683                                  
 18684                                  ;hkn; called from create. DS already set up to DOSDATA.
 18685                                  
 18686                                  SET_SFT_MODE:
 18687 00002BA4 C43E[9E05]              	LES	DI,[THISSFT]
 18688 00002BA8 E8E118                  	call	DEV_OPEN_SFT
 18689                                  	;test	word [es:di+2],8000h
 18690                                  	; 17/12/2022
 18691                                  	;test	byte [es:di+3],80h
 18692 00002BAB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18693                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18694 00002BB0 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18695 00002BB2 A1[3003]                	MOV	AX,[CurrentPDB]
 18696                                  	;mov	[es:di+31h],ax
 18697 00002BB5 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18698                                  
 18699                                  Clear_FastOpen:
 18700 00002BB9 C3                      	retn			       ;;;;; DOS 3.3
 18701                                  
 18702                                  ;----------------------------------------------------------------------------
 18703                                  ; Procedure Name : SHARE_ERROR
 18704                                  ;
 18705                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18706                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18707                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18708                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18709                                  ;---------------------------------------------------------------------------
 18710                                  
 18711                                  SHARE_ERROR:
 18712                                  	; 17/12/2022
 18713                                  	;test	byte [es:di+3],80h
 18714 00002BBA 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18715                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18716 00002BBF 7509                    	JNZ	short _HARD_ERR
 18717 00002BC1 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18718 00002BC5 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18719                                  	;CMP	CL,SHARING_COMPAT ; 0
 18720                                  	;JNE	short _NO_HARD_ERR
 18721                                  	; 21/09/2023
 18722 00002BC8 7505                    	jnz	short _NO_HARD_ERR
 18723                                  _HARD_ERR:
 18724 00002BCA E87C45                  	call	SHARE_VIOLATION
 18725                                  	;retnc				; User wants retry
 18726 00002BCD 73EA                    	jnc	short Clear_FastOpen
 18727                                  _NO_HARD_ERR:
 18728 00002BCF B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18729 00002BD2 F9                      	STC
 18730 00002BD3 C3                      	retn
 18731                                  
 18732                                  ; MSDOS 6.0
 18733                                  ;----------------------------------------------------------------------------
 18734                                  ; Procedure Name : DO_SHARE_CHECK
 18735                                  ;
 18736                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18737                                  ; Functions: check file sharing mode is valid
 18738                                  ; Output: carry set, error
 18739                                  ;	  carry clear, share ok
 18740                                  ;----------------------------------------------------------------------------
 18741                                  
 18742                                  	; 18/05/2019 - Retro DOS v4.0
 18743                                  DO_SHARE_CHECK:
 18744 00002BD4 E810E7                  	call	ECritDisk		; enter critical section
 18745                                  OPN_RETRY:
 18746 00002BD7 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18747                                  OpenShareRetry:
 18748 00002BDB 51                      	push	cx			; Save number left to do
 18749 00002BDC E86545                  	call	SHARE_CHECK		; Final Check
 18750 00002BDF 59                      	pop	cx			; CX = # left
 18751 00002BE0 730E                    	JNC	short Share_Ok2		; No problem with access
 18752 00002BE2 E804E6                  	call	Idle
 18753 00002BE5 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18754                                  OpenShareFail:
 18755 00002BE7 C43E[9E05]              	LES	DI,[THISSFT]
 18756 00002BEB E8CCFF                  	call	SHARE_ERROR
 18757 00002BEE 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18758                                  Share_Ok2:
 18759                                  	;call	LCritDisk		; leave critical section
 18760                                  	;retn
 18761                                  	; 18/12/2022
 18762 00002BF0 E90FE7                  	jmp	LCritDisk
 18763                                  
 18764                                  ;-----------------------------------------------------------------------------
 18765                                  ; Procedure Name : Check_Access
 18766                                  ;
 18767                                  ; Inputs:
 18768                                  ;	AX is mode
 18769                                  ;	  High NIBBLE of AL (Sharing Mode)
 18770                                  ;		sharing_compat	   file is opened in compatibility mode
 18771                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18772                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18773                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18774                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18775                                  ;	  Low NIBBLE of AL (Access Mode)
 18776                                  ;		open_for_read	file is opened for reading
 18777                                  ;		open_for_write	file is opened for writing
 18778                                  ;		open_for_both	file is opened for both reading and writing.
 18779                                  ; Function:
 18780                                  ;	Check this access mode for correctness
 18781                                  ; Outputs:
 18782                                  ;	[open_access] = AL input
 18783                                  ;	Carry Clear
 18784                                  ;		Mode is correct
 18785                                  ;		AX unchanged
 18786                                  ;	Carry Set
 18787                                  ;		Mode is bad
 18788                                  ;		AX = error_invalid_access
 18789                                  ; No other registers effected
 18790                                  ;----------------------------------------------------------------------------
 18791                                  
 18792                                  Check_Access_AX:
 18793 00002BF3 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18794 00002BF6 53                      	PUSH	BX
 18795                                  
 18796                                  ;	If sharing, then test for special sharing mode for FCBs
 18797                                  
 18798 00002BF7 88C3                    	MOV	BL,AL
 18799 00002BF9 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18800 00002BFC 803E[7205]FF            	CMP	byte [FSHARING],-1
 18801 00002C01 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18802 00002C03 80FB70                  	CMP	BL,SHARING_NET_FCB
 18803 00002C06 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18804                                  CheckShareMode:
 18805 00002C08 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18806 00002C0B 770D                    	JA	short Make_Bad_Access
 18807                                  CheckAccessMode:
 18808 00002C0D 88C3                    	MOV	BL,AL
 18809 00002C0F 80E30F                  	AND	BL,access_mask
 18810 00002C12 80FB02                  	CMP	BL,2
 18811 00002C15 7703                    	JA	short Make_Bad_Access
 18812 00002C17 5B                      	POP	BX
 18813 00002C18 F8                      	CLC
 18814 00002C19 C3                      	retn
 18815                                  
 18816                                  Make_Bad_Access:
 18817 00002C1A B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18818 00002C1D 5B                      	POP	BX
 18819 00002C1E F9                      	STC
 18820 00002C1F C3                      	retn
 18821                                  
 18822                                  ;============================================================================
 18823                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18824                                  ;============================================================================
 18825                                  ; 08/08/2018 - Retro DOS v3.0
 18826                                  ; 18/05/2019 - Retro DOS v4.0
 18827                                  
 18828                                  ;**	Low level routine for returning disk drive information from a local
 18829                                  ;	  or NET device
 18830                                  ;
 18831                                  ;	DISK_INFO
 18832                                  ;
 18833                                  ;	  Modification history:
 18834                                  ;
 18835                                  ;		Created: ARR 30 March 1983
 18836                                  
 18837                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18838                                  ;---------------------------------------------------------------------------
 18839                                  ; Procedure Name : DISK_INFO
 18840                                  ;
 18841                                  ; Inputs:
 18842                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18843                                  ;		(It MAY NOT be NUL, error not detected)
 18844                                  ; Function:
 18845                                  ;	Get Interesting Drive Information
 18846                                  ; Returns:
 18847                                  ;	DX = Number of free allocation units
 18848                                  ;	BX = Total Number of allocation units on disk
 18849                                  ;	CX = Sector size
 18850                                  ;	AL = Sectors per allocation unit
 18851                                  ;	AH = FAT ID BYTE
 18852                                  ;	Carry set if error (currently user FAILed to I 24)
 18853                                  ; Segs except ES preserved, others destroyed
 18854                                  ;----------------------------------------------------------------------------
 18855                                  
 18856                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18857                                  ;hkn; DOSDATA. 
 18858                                  
 18859                                  DISK_INFO:
 18860                                  	; 08/08/2018 - Retro DOS v3.0
 18861                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18862                                  
 18863 00002C20 E80BE6                  	call	TestNet
 18864 00002C23 7306                    	JNC	short LOCAL_DSK_INFO
 18865                                  
 18866                                  ;IF NOT Installed
 18867                                  ;	transfer NET_DISK_INFO
 18868                                  ;ELSE
 18869                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18870                                  	;INT	2FH
 18871                                  	;return
 18872                                  
 18873 00002C25 B80C11                  	mov     ax,110Ch
 18874 00002C28 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18875                                  			; ES:DI -> current directory
 18876                                  			; Return: AL = sectors per cluster, BX = total clusters
 18877                                  			; CX = bytes per sector, DX = number of available clusters
 18878 00002C2A C3                      	retn
 18879                                  ;ENDIF
 18880                                  
 18881                                  LOCAL_DSK_INFO:
 18882 00002C2B C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18883 00002C30 E8B4E6                  	call	ECritDisk
 18884 00002C33 E81029                  	call	FATREAD_CDS		; perform media check.
 18885 00002C36 7241                    	JC	short CRIT_LEAVE
 18886 00002C38 BB0200                  	MOV	BX,2
 18887 00002C3B E87327                  	call	UNPACK			; Get first FAT sector into CURBUF
 18888 00002C3E 7239                    	JC	short CRIT_LEAVE
 18889 00002C40 C536[E205]              	LDS	SI,[CURBUF]
 18890                                  	;mov	ah,[si+20]
 18891 00002C44 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18892                                  
 18893                                  ;hkn; SS is DOSDATA
 18894 00002C47 16                      	push	ss
 18895 00002C48 1F                      	pop	ds
 18896                                  	;mov	cx,[es:bp+0Dh]
 18897 00002C49 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18898                                  
 18899                                  ; Examine the current free count. If it indicates that we have an invalid
 18900                                  ; count, do the expensive calculation.
 18901                                  
 18902                                  	;mov	dx,[es:bp+1Fh]
 18903 00002C4D 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18904 00002C51 83FAFF                  	CMP	DX,-1			; is it valid?
 18905 00002C54 7404                    	JZ	short DoScan
 18906                                  
 18907                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18908                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18909                                  ; the count.
 18910                                  
 18911 00002C56 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18912 00002C58 7222                    	JB	short GotVal		; yes, trust it.
 18913                                  DoScan:
 18914 00002C5A 31D2                    	XOR	DX,DX
 18915 00002C5C 49                      	DEC	CX
 18916                                  SCANFREE:
 18917 00002C5D E85127                  	call	UNPACK
 18918 00002C60 7217                    	JC	short CRIT_LEAVE
 18919 00002C62 7501                    	JNZ	short NOTFREECLUS
 18920 00002C64 42                      	INC	DX			; A free one
 18921                                  NOTFREECLUS:
 18922 00002C65 43                      	INC	BX			; Next cluster
 18923 00002C66 E2F5                    	LOOP	SCANFREE
 18924 00002C68 4B                      	DEC	BX			; BX was next cluster. Convert to
 18925                                  ReturnVals:
 18926 00002C69 4B                      	DEC	BX			; count
 18927                                  	;mov	al,[es:bp+4]
 18928 00002C6A 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18929 00002C6E FEC0                    	INC	AL			; Sectors/cluster
 18930                                  	;mov	cx,[es:bp+2]
 18931 00002C70 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18932                                  	;mov	[es:bp+1Fh],dx
 18933 00002C74 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18934 00002C78 F8                      	CLC
 18935                                  CRIT_LEAVE:
 18936                                  	;call	LCritDisk
 18937                                  	;retn
 18938                                  	; 17/12/2022
 18939 00002C79 E986E6                  	jmp	LCritDisk
 18940                                  
 18941                                  ; We have correctly computed everything previously. Load up registers for
 18942                                  ; return.
 18943                                  
 18944                                  GotVal: 
 18945 00002C7C 89CB                    	MOV	BX,CX			; get cluster count
 18946 00002C7E EBE9                    	JMP	short ReturnVals
 18947                                  
 18948                                  ;============================================================================
 18949                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18950                                  ;============================================================================
 18951                                  ; 22/07/2018 - Retro DOS v3.0
 18952                                  
 18953                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18954                                  ;	NAME	DOS_SEARCH
 18955                                  
 18956                                  ;**	Low level routines for doing local and NET directory searches
 18957                                  ;
 18958                                  ;	DOS_SEARCH_FIRST
 18959                                  ;	DOS_SEARCH_NEXT
 18960                                  ;	RENAME_NEXT
 18961                                  ;
 18962                                  ;	Revision history:
 18963                                  ;
 18964                                  ;	    Created: ARR 30 March 1983
 18965                                  ;	    A000	version 4.00  Jan. 1988
 18966                                  ;	    A001	PTM 3564 -- search for fastopen
 18967                                  
 18968                                  ;Installed = TRUE
 18969                                  
 18970                                  ;--------------------------------------------------------------------------
 18971                                  ;
 18972                                  ; Procedure Name : DOS_SEARCH_FIRST
 18973                                  ;
 18974                                  ; Inputs:
 18975                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18976                                  ;		terminated)
 18977                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18978                                  ;		( = -1 if current dir not involved, else
 18979                                  ;		 Points to first char after last "/" of current dir part)
 18980                                  ;	[THISCDS] Points to CDS being used
 18981                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18982                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18983                                  ;	[DMAADD] Points to 53 byte buffer
 18984                                  ; Function:
 18985                                  ;	Initiate a search for the given file spec
 18986                                  ; Outputs:
 18987                                  ;	CARRY CLEAR
 18988                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18989                                  ;
 18990                                  ;	LOCAL
 18991                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18992                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18993                                  ;	    11 byte search name with Meta chars in it
 18994                                  ;	    Search Attribute Byte, attribute of search
 18995                                  ;	    WORD LastEnt value
 18996                                  ;	    WORD DirStart
 18997                                  ;	    4 byte pad
 18998                                  ;	    32 bytes of the directory entry found
 18999                                  ;	NET
 19000                                  ;	    21 bytes First byte has high bit set
 19001                                  ;	    32 bytes of the directory entry found
 19002                                  ;
 19003                                  ;	CARRY SET
 19004                                  ;	    AX = error code
 19005                                  ;		error_no_more_files
 19006                                  ;			No match for this file
 19007                                  ;		error_path_not_found
 19008                                  ;			Bad path (not in curr dir part if present)
 19009                                  ;		error_bad_curr_dir
 19010                                  ;			Bad path in current directory part of path
 19011                                  ; DS preserved, others destroyed
 19012                                  ;---------------------------------------------------------------------------
 19013                                  
 19014                                  ; 24/01/2024
 19015                                  %if 1
 19016                                  	; 17/05/2019 - Retro DOS v4.0
 19017                                  GET_FAST_SEARCH:
 19018                                  	; 22/07/2018
 19019                                  	; MSDOS 6.0
 19020                                  	; 17/12/2022
 19021 00002C80 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 19022                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 19023                                  					;FO.trigger fastopen ;AN000;
 19024                                  	;call	DOS_SEARCH_FIRST
 19025                                  	;retn
 19026                                  	; 24/01/2024
 19027                                  	; 17/12/2022
 19028                                  	;jmp	DOS_SEARCH_FIRST
 19029                                  %endif
 19030                                  
 19031                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19032                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 19033                                  
 19034                                  DOS_SEARCH_FIRST:
 19035                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 19036                                  
 19037 00002C86 C43E[A205]              	LES	DI,[THISCDS]
 19038 00002C8A 83FFFF                  	CMP	DI,-1
 19039 00002C8D 7506                    	JNZ	short TEST_RE_NET2
 19040                                  
 19041                                  ;IF NOT Installed
 19042                                  ;	transfer NET_SEQ_SEARCH_FIRST
 19043                                  ;ELSE
 19044                                  	;mov	ax,1119h
 19045 00002C8F B81911                  	MOV	AX,(MultNET<<8)|25
 19046 00002C92 CD2F                    	INT	2Fh
 19047 00002C94 C3                      	retn
 19048                                  ;ENDIF
 19049                                  
 19050                                  TEST_RE_NET2:
 19051                                  	;test	word [es:di+43h],8000h
 19052                                  	; 17/12/2022
 19053                                  	;test	byte [es:di+44h],80h
 19054                                  	; 28/12/2022
 19055 00002C95 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 19056                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 19057 00002C9A 7406                    	JZ	short LOCAL_SEARCH_FIRST
 19058                                  
 19059                                  ;IF NOT Installed
 19060                                  ;	transfer NET_SEARCH_FIRST
 19061                                  ;ELSE
 19062                                  	;mov	ax,111Bh
 19063 00002C9C B81B11                  	MOV	AX,(MultNET<<8)|27
 19064 00002C9F CD2F                    	INT	2FH
 19065 00002CA1 C3                      	retn
 19066                                  ;ENDIF
 19067                                  	; 18/05/2019 - Retro DOS v4.0
 19068                                  LOCAL_SEARCH_FIRST:
 19069 00002CA2 E842E6                  	call	ECritDisk
 19070                                  	; MSDOS 6.0
 19071                                  	;;test	word [DOS34_FLAG],400h
 19072                                  	; 17/12/2022
 19073                                  	;test	byte [DOS34_FLAG+1],04h
 19074 00002CA5 F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 19075                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 19076 00002CAA 7405                    	JZ	short NOFN			;AN000;
 19077                                  	;or	byte [FastOpenFlg],1
 19078 00002CAC 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 19079                                  NOFN:						;AN000;
 19080 00002CB1 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19081                                  
 19082                                  ; 03/02/2024
 19083                                  %if 0
 19084                                  	; MSDOS 6.0
 19085                                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 19086                                  	JNC	short norm_GETPATH	;AN000;;FO. no
 19087                                  %else
 19088                                  	; 03/02/2024
 19089 00002CB6 16                      	push	ss
 19090 00002CB7 1F                      	pop	ds			;AN000;;FO. ds:si -> final path
 19091 00002CB8 8B36[B205]              	mov	si,[WFP_START]		;AN000;;FO.
 19092                                  getnext:				;AN000;
 19093 00002CBC AC                      	lodsb				;AN000;;FO. get char
 19094 00002CBD 08C0                    	or	al,al			;AN000;;FO. is it null
 19095 00002CBF 7409                    	jz	short NO_Question	;AN000;;FO. yes
 19096 00002CC1 3C3F                    	cmp	al,'?'                  ;AN000;;FO. is '?'
 19097 00002CC3 75F7                    	jne	short getnext 		;AN000;;FO. no
 19098                                  %endif
 19099                                  	;and	byte [FastOpenFlg],80h
 19100 00002CC5 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19101                                  NO_Question:	; 03/02/2024
 19102                                  norm_GETPATH:
 19103 00002CCA E81B11                  	call	GETPATH
 19104                                  	; BX = offset NAME1
 19105                                  ;_getdone:
 19106 00002CCD 7318                    	JNC	short find_check_dev
 19107 00002CCF 7511                    	JNZ	short bad_path3
 19108 00002CD1 08C9                    	OR	CL,CL
 19109 00002CD3 740D                    	JZ	short bad_path3
 19110                                  find_no_more:
 19111                                  	;mov	ax,12h
 19112 00002CD5 B81200                  	MOV	AX,error_no_more_files
 19113                                  BadBye:
 19114                                  	; MSDOS 6.0
 19115 00002CD8 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 19116                                  
 19117 00002CDE F9                      	STC
 19118                                  	;call	LCritDisk
 19119                                  	;retn
 19120                                  	; 18/12/2022
 19121 00002CDF E920E6                  	jmp	LCritDisk
 19122                                  
 19123                                  bad_path3:
 19124                                  	;mov	ax,3
 19125 00002CE2 B80300                  	MOV	AX,error_path_not_found
 19126 00002CE5 EBF1                    	JMP	short BadBye
 19127                                  
 19128                                  find_check_dev:
 19129 00002CE7 08E4                    	OR	AH,AH
 19130 00002CE9 790A                    	JNS	short found_entry
 19131 00002CEB C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 19132 00002CF1 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 19133                                  found_entry:
 19134                                  
 19135                                  ; We set the physical drive byte here Instead of after found_it; Doing
 19136                                  ; a search-next may not have wfp_start set correctly
 19137                                  
 19138 00002CF5 C43E[2C03]              	LES	DI,[DMAADD]
 19139 00002CF9 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 19140 00002CFD AC                      	LODSB
 19141 00002CFE 2C40                    	SUB	AL,'A'-1                ; logical drive
 19142 00002D00 AA                      	STOSB				; High bit not set (local)
 19143                                  found_it:
 19144 00002D01 C43E[2C03]              	LES	DI,[DMAADD]
 19145 00002D05 47                      	INC	DI
 19146                                  
 19147                                  	; MSDOS 6.0
 19148 00002D06 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 19149                                  	;test	byte [FastOpenFlg],10h
 19150 00002D07 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 19151 00002D0C 7408                    	JZ	short notfast			  ;FO.;AN001;
 19152 00002D0E 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 19153 00002D10 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 19154 00002D14 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 19155                                  
 19156                                  notfast:
 19157 00002D16 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 19158                                  movmov:
 19159                                  ; Special E5 code
 19160 00002D19 A4                      	MOVSB
 19161 00002D1A 26807DFF05              	CMP	BYTE [ES:DI-1],5
 19162 00002D1F 7505                    	JNZ	short NOTKANJB
 19163 00002D21 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 19164                                  NOTKANJB:
 19165                                  	;MOV	CX,10
 19166                                  	;REP	MOVSB
 19167                                  	; 03/02/2024
 19168 00002D26 B90500                  	mov	cx,5
 19169 00002D29 F3A5                    	rep	movsw
 19170                                  
 19171                                  	; 08/09/2018
 19172 00002D2B 1F                      	POP	DS			;FO.;AN001; restore ds
 19173                                  
 19174 00002D2C A0[6B05]                	MOV	AL,[ATTRIB]
 19175 00002D2F AA                      	STOSB
 19176 00002D30 50                      	PUSH	AX			; Save AH device info
 19177 00002D31 A1[4803]                	MOV	AX,[LASTENT]
 19178 00002D34 AB                      	STOSW
 19179 00002D35 A1[C205]                	MOV	AX,[DIRSTART]
 19180 00002D38 AB                      	STOSW
 19181                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 19182 00002D39 83C704                  	ADD	DI,4
 19183 00002D3C 58                      	POP	AX			; Recover AH device info
 19184 00002D3D 08E4                    	OR	AH,AH
 19185 00002D3F 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 19186 00002D41 833E[E205]FF            	CMP	WORD [CURBUF],-1
 19187 00002D46 7510                    	JNZ	short OKSTORE
 19188                                  
 19189                                  	; MSDOS 6.0
 19190 00002D48 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 19191                                  					;AN000;;FO. from fastopen and is good
 19192 00002D4D 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 19193                                  
 19194                                  	; The user has specified the root directory itself, rather than some
 19195                                  	; contents of it. We can't "find" that.
 19196                                  
 19197 00002D4F 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 19198                                  					;   stuffing a -1 at Lastent
 19199 00002D55 E97DFF                  	JMP	find_no_more
 19200                                  
 19201                                  OKSTORE:
 19202 00002D58 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19203                                  DOSREL:
 19204                                  	; BX = offset NAME1 (from GETPATH)
 19205 00002D5C 89DE                    	MOV	SI,BX			; SI-> start of entry
 19206                                  
 19207                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 19208                                  
 19209                                  	;;mov	cx,32
 19210                                  	;MOV	CX,dir_entry.size
 19211                                  	; 03/02/2024
 19212 00002D5E B91000                  	mov	cx,dir_entry.size>>1
 19213                                  ;;;;; 7/29/86
 19214 00002D61 89F8                    	MOV	AX,DI			; save the 1st byte addr
 19215                                  	;REP	MOVSB
 19216 00002D63 F3A5                    	rep	movsw
 19217                                  	;
 19218 00002D65 89C7                    	MOV	DI,AX			; restore 1st byte addr
 19219 00002D67 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 19220 00002D6B 7504                    	JNZ	short NO05
 19221 00002D6D 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 19222                                  NO05:
 19223                                  
 19224                                  ;;;;; 7/29/86
 19225                                  
 19226                                  ;hkn; FastOpenflg is in DOSDATA use SS
 19227                                  	; 16/12/2022
 19228                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19229                                  	; MSDOS 6.0
 19230                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 19231                                  	; 18/05/2019 - Retro DOS v4.0
 19232 00002D71 16                      	push	ss
 19233 00002D72 1F                      	pop	ds
 19234                                  	; 16/12/2022
 19235 00002D73 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 19236                                  
 19237                                  ;hkn; SS is DOSDATA
 19238                                  	;push	ss
 19239                                  	;pop	ds
 19240                                  	
 19241                                  	; 27/06/2024
 19242                                  	; cf=0
 19243                                  	;CLC
 19244                                  	
 19245                                  	;call	LCritDisk
 19246                                  	;retn
 19247                                  	; 16/12/2022
 19248 00002D78 E987E5                  	jmp	LCritDisk
 19249                                  
 19250                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 19251                                  ;----------------------------------------------------------------------------
 19252                                  ;
 19253                                  ; Procedure Name : DOS_SEARCH_NEXT
 19254                                  ;
 19255                                  ; Inputs:
 19256                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 19257                                  ;	    (only first 21 bytes must have valid information)
 19258                                  ; Function:
 19259                                  ;	Look for subsequent matches
 19260                                  ; Outputs:
 19261                                  ;	CARRY CLEAR
 19262                                  ;	    The 53 bytes at DMAADD are updated for next call
 19263                                  ;		(see DOS_SEARCH_FIRST)
 19264                                  ;	CARRY SET
 19265                                  ;	    AX = error code
 19266                                  ;		error_no_more_files
 19267                                  ;			No more files to find
 19268                                  ; DS preserved, others destroyed
 19269                                  ;---------------------------------------------------------------------------
 19270                                  
 19271                                  ;hkn; called from search.asm. DS already set up at this point.
 19272                                  
 19273                                  DOS_SEARCH_NEXT:
 19274 00002D7B C43E[2C03]              	LES	DI,[DMAADD]
 19275 00002D7F 268A05                  	MOV	AL,[ES:DI]
 19276 00002D82 A880                    	TEST	AL,80H			; Test for NET
 19277 00002D84 7406                    	JZ	short LOCAL_SEARCH_NEXT
 19278                                  ;IF NOT Installed
 19279                                  ;	transfer NET_SEARCH_NEXT
 19280                                  ;ELSE
 19281                                  	;mov	ax,111Ch
 19282 00002D86 B81C11                  	MOV	AX,(MultNET<<8)|28
 19283 00002D89 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 19284                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 19285                                  		     ; Return: CF set on error, AX = DOS error code
 19286                                  		     ; CF clear if successful
 19287 00002D8B C3                      	retn
 19288                                  ;ENDIF
 19289                                  
 19290                                  LOCAL_SEARCH_NEXT:
 19291                                  	;AL is drive A=1
 19292                                  	;mov	byte [EXTERR_LOCUS],2
 19293 00002D8C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19294 00002D91 E853E5                  	call	ECritDisk
 19295                                  
 19296                                  ;hkn; DummyCDS is in DOSDATA
 19297 00002D94 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 19298                                  ;hkn; Segment address is DOSDATA - use ds
 19299                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 19300 00002D9A 8C1E[A405]              	mov	[THISCDS+2],DS
 19301                                  
 19302 00002D9E 0440                    	ADD	AL,'A'-1
 19303 00002DA0 E87A3A                  	call	InitCDS
 19304                                  
 19305                                  ;	call	GETTHISDRV		; Set CDS pointer
 19306                                  
 19307 00002DA3 7246                    	JC	short No_files		; Bogus drive letter
 19308 00002DA5 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 19309                                  	;les	bp,[es:di+45h]
 19310 00002DA9 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 19311 00002DAD E87CD8                  	call	GOTDPB			; [THISDPB] = ES:BP
 19312                                  
 19313                                  	; 16/12/2022
 19314 00002DB0 268A4600                	mov	al,[ES:BP]
 19315                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19316                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 19317 00002DB4 A2[7605]                	mov	[THISDRV],AL
 19318                                  	;mov	word [CREATING],0E500h
 19319 00002DB7 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 19320 00002DBD C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 19321 00002DC2 C536[2C03]              	LDS	SI,[DMAADD]
 19322 00002DC6 AC                      	LODSB				; Drive Byte
 19323                                  
 19324                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 19325                                  RENAME_NEXT:
 19326                                  	;context ES
 19327 00002DC7 16                      	push	ss
 19328 00002DC8 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 19329                                  
 19330                                  ;hkn; NAME1 is in DOSDATA
 19331 00002DC9 BF[4B05]                	MOV	DI,NAME1
 19332                                  
 19333 00002DCC B90B00                  	MOV	CX,11
 19334 00002DCF F3A4                    	REP	MOVSB			; Search name
 19335 00002DD1 AC                      	LODSB				; Attribute
 19336                                  
 19337                                  ;hkn; SS override
 19338 00002DD2 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19339 00002DD6 AD                      	LODSW				; LastEnt
 19340 00002DD7 09C0                    	OR	AX,AX
 19341                                  	; 03/02/2024
 19342                                  	;JNS	short cont_load
 19343 00002DD9 7810                    	js	short No_files
 19344                                  ;No_files:
 19345                                  	;JMP	find_no_more
 19346                                  
 19347                                  cont_load:
 19348 00002DDB 50                      	PUSH	AX			; Save LastEnt
 19349 00002DDC AD                      	LODSW				; DirStart
 19350 00002DDD 89C3                    	MOV	BX,AX
 19351                                  
 19352                                  ;hkn; SS is DOSDATA
 19353                                  	;context DS
 19354 00002DDF 16                      	push	ss
 19355 00002DE0 1F                      	pop	ds
 19356 00002DE1 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 19357                                  	;invoke	SetDirSrch
 19358 00002DE5 E8A30F                  	call	SETDIRSRCH
 19359 00002DE8 7304                    	JNC	short SEARCH_GOON
 19360 00002DEA 58                      	POP	AX			; Clean stack
 19361                                  	;JMP	short No_files
 19362                                  	; 03/02/2024
 19363                                  No_files:
 19364 00002DEB E9E7FE                  	JMP	find_no_more
 19365                                  
 19366                                  SEARCH_GOON:
 19367 00002DEE E86F12                  	call	STARTSRCH
 19368 00002DF1 58                      	POP	AX
 19369 00002DF2 E8690F                  	call	GETENT
 19370 00002DF5 72F4                    	JC	short No_files
 19371 00002DF7 E8A10E                  	call	NEXTENT
 19372 00002DFA 72EF                    	JC	short No_files
 19373 00002DFC 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 19374 00002DFE E900FF                  	JMP	found_it ; 10/08/2018
 19375                                  
 19376                                  ; MSDOS 6.0
 19377                                  ;---------------------------------------------------------------------------
 19378                                  ;
 19379                                  ; Procedure Name : CHECK_QUESTION
 19380                                  ;
 19381                                  ; Input: [WFP_START]= pointer to final path
 19382                                  ; Function: check '?' char
 19383                                  ; Output: carry clear, if no '?'
 19384                                  ;	 carry set, if '?' exists
 19385                                  ;---------------------------------------------------------------------------
 19386                                  
 19387                                  ; 03/02/2024
 19388                                  %if 0
 19389                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19390                                  CHECK_QUESTION:
 19391                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 19392                                  ;hkn;	PUSH	CS			;AN000;;FO.
 19393                                  	push	ss
 19394                                  	POP	DS			;AN000;;FO. ds:si -> final path
 19395                                  	; 16/12/2022
 19396                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 19397                                  	MOV	SI,[WFP_START]		;AN000;;FO.
 19398                                  	;mov	si,[ss:WFP_START]
 19399                                  getnext:				;AN000;
 19400                                  	LODSB				;AN000;;FO. get char
 19401                                  	OR	AL,AL			;AN000;;FO. is it null
 19402                                  	JZ	short NO_Question	;AN000;;FO. yes
 19403                                  	CMP	AL,'?'                  ;AN000;;FO. is '?'
 19404                                  	JNZ	short getnext 		;AN000;;FO. no
 19405                                  	STC				;AN000;;FO.
 19406                                  NO_Question:				;AN000;
 19407                                  	retn				;AN000;;FO.
 19408                                  %endif
 19409                                  
 19410                                  ;============================================================================
 19411                                  ; ABORT.ASM, MSDOS 6.0, 1991
 19412                                  ;============================================================================
 19413                                  ; 23/07/2018 - Retro DOS v3.0
 19414                                  ; 18/05/2019 - Retro DOS v4.0
 19415                                  
 19416                                  ;**
 19417                                  ;
 19418                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 19419                                  ;  If process has NET resources a close all is sent out over the net.
 19420                                  ;
 19421                                  ;   DOS_ABORT
 19422                                  ;
 19423                                  ;   Modification history:
 19424                                  ;
 19425                                  ;       Created: ARR 30 March 1983
 19426                                  ;
 19427                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 19428                                  ;				being terminated only if it is busy.
 19429                                  ;
 19430                                  
 19431                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 19432                                  ;--------------------------------------------------------------------------
 19433                                  ;
 19434                                  ; Procedure Name : DOS_ABORT
 19435                                  ;
 19436                                  ; Inputs:
 19437                                  ;       [CurrentPDB] set to PID of process aborting
 19438                                  ; Function:
 19439                                  ;       Close all files and free all SFTs for this PID
 19440                                  ; Returns:
 19441                                  ;       None
 19442                                  ; All destroyed except stack
 19443                                  ;---------------------------------------------------------------------------
 19444                                  
 19445                                  DOS_ABORT:
 19446 00002E01 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 19447 00002E06 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 19448                                  reset_free_jfn:
 19449 00002E0B 89CB                    	MOV     BX,CX
 19450 00002E0D 51                      	PUSH    CX
 19451 00002E0E 4B                      	DEC     BX                      ; get jfn (start with last one)
 19452                                  
 19453 00002E0F E85137                  	CALL	_$CLOSE
 19454 00002E12 59                      	POP     CX
 19455 00002E13 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 19456                                  
 19457                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 19458                                  ; are running in the no-sharing no-network environment, we are simulating the
 19459                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 19460                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 19461                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 19462                                  ;
 19463                                  ; If sharing is loaded, then the following call to close process will
 19464                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 19465                                  ;
 19466                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 19467                                  ; known network resources. These resources are then responsible for cleaning
 19468                                  ; up after this process.
 19469                                  ;
 19470                                  ; Sleazy, eh?
 19471                                  
 19472                                  	;context DS			; SS is DOSDATA
 19473 00002E15 16                      	push	ss
 19474 00002E16 1F                      	pop	ds  ; 09/09/2018
 19475                                  
 19476                                  	;CallInstall Net_Abort, MultNET, 29
 19477 00002E17 B81D11                  	mov	ax,111Dh
 19478 00002E1A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 19479                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 19480                                  			; DS???, SS = DOS CS
 19481                                  ;if installed
 19482 00002E1C FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 19483                                  ;else
 19484                                  ;	call 	MFTCloseP
 19485                                  ;endif
 19486                                  
 19487                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 19488                                  ; counts.
 19489                                  					; SS override
 19490 00002E20 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 19491                                  	;mov	cx,[es:di+4]
 19492 00002E25 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 19493 00002E29 E317                    	jcxz    FCBScanDone
 19494                                  	;lea	di,[di+6]
 19495 00002E2B 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 19496 00002E2E 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19497                                  FCBTest:
 19498                                  	;cmp	[es:di+31h],ax
 19499 00002E32 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 19500 00002E36 7505                    	jnz	short FCBNext		; no, skip it
 19501 00002E38 26C7050000              	mov	word [es:di],0
 19502                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 19503                                  FCBNext:
 19504 00002E3D 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 19505 00002E40 E2F0                    	loop    FCBTest
 19506                                  FCBScanDone:
 19507                                  
 19508                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 19509                                  
 19510 00002E42 31DB                    	XOR     BX,BX
 19511                                  Scan:
 19512 00002E44 53                      	push    bx
 19513 00002E45 E89736                  	call	SFFromSFN
 19514 00002E48 5B                      	pop     bx
 19515                                  	;jnc	short Scan1
 19516                                  	;retn
 19517                                  
 19518                                  	; 18/12/2022
 19519                                  	;jc	short NO_Question ; retn
 19520                                  	; 03/02/2024
 19521 00002E49 7234                    	jc	short RET2
 19522                                  
 19523                                  ;M038
 19524                                  ; Do what the comment above says, check for busy state
 19525                                  
 19526                                  Scan1:
 19527                                  	;cmp	word [es:di],0
 19528                                  	;jz	short scan_next  ; MSDOS 3.3
 19529                                  	; MSDOS 6.0
 19530 00002E4B 26833DFF                	cmp	word [es:di],sf_busy ; -1
 19531                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 19532                                  				; Is Sft busy? ;M038
 19533 00002E4F 7519                    	jnz	short scan_next
 19534                                  ;
 19535                                  ; we have a SFT that is busy. See if it is for the current process
 19536                                  ;
 19537 00002E51 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 19538                                  	;cmp	[es:di+31h],ax
 19539 00002E55 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 19540 00002E59 750F                    	jnz	short scan_next
 19541 00002E5B 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 19542                                  	;cmp	[es:di+2Fh],ax
 19543 00002E5F 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 19544 00002E63 7505                    	jnz	short scan_next
 19545                                  
 19546                                  ; This SFT is labelled as ours.
 19547                                  
 19548 00002E65 26C7050000              	mov	word [es:di],0
 19549                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 19550                                  scan_next:
 19551 00002E6A 43                      	inc     bx
 19552 00002E6B EBD7                    	jmp     short Scan
 19553                                  
 19554                                  ;============================================================================
 19555                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 19556                                  ;============================================================================
 19557                                  ; 23/07/2018 - Retro DOS v3.0
 19558                                  ; 18/05/2019 - Retro DOS v4.0
 19559                                  
 19560                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 19561                                  ;
 19562                                  ;	DOS_CLOSE
 19563                                  ;	DOS_COMMIT
 19564                                  ;	FREE_SFT
 19565                                  ;	SetSFTTimes
 19566                                  ;
 19567                                  ;	Revision history:
 19568                                  ;
 19569                                  ;	   AN000  version 4.00	Jan. 1988
 19570                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 19571                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 19572                                  
 19573                                  ;Installed = TRUE
 19574                                  
 19575                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 19576                                  ;---------------------------------------------------------------------------
 19577                                  ;
 19578                                  ; Procedure Name : DOS_CLOSE
 19579                                  ;
 19580                                  ; Inputs:
 19581                                  ;	[THISSFT] set to the SFT for the file being used
 19582                                  ; Function:
 19583                                  ;	Close the indicated file via the SFT
 19584                                  ; Returns:
 19585                                  ;	sf_ref_count decremented otherwise
 19586                                  ;	ES:DI point to SFT
 19587                                  ;	Carry set if error
 19588                                  ;	    AX has error code
 19589                                  ; DS preserved, others destroyed
 19590                                  ;---------------------------------------------------------------------------
 19591                                  
 19592                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS already set up.
 19593                                  
 19594                                  ; 18/05/2019 - Retro DOS v4.0
 19595                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 19596                                  
 19597                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19598                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 19599                                  
 19600                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 19601                                  
 19602                                  DOS_CLOSE:
 19603 00002E6D C43E[9E05]              	LES	DI,[THISSFT]
 19604                                  	;mov	bx,[ES:DI+5]
 19605 00002E71 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19606                                  
 19607                                  ; Network closes are handled entirely by the net code.
 19608                                  
 19609                                  	;;test	bx,8000h
 19610                                  	;TEST	BX,sf_isnet
 19611                                  	; 17/12/2022
 19612                                  	;test	bh,80h
 19613 00002E75 F6C780                  	test	bh,(sf_isnet>>8)
 19614 00002E78 7406                    	JZ	short LocalClose
 19615                                  
 19616                                  	;CallInstall Net_Close,MultNET,6
 19617 00002E7A B80611                  	mov     ax,1106h
 19618 00002E7D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 19619                                  			; ES:DI -> SFT
 19620                                  			; SFT DPB field -> DPB of drive containing file
 19621                                  			; Return: CF set on error, AX = DOS error code
 19622                                  			; CF clear if successful
 19623                                  RET2:		; 03/02/2024
 19624 00002E7F C3                      	retn
 19625                                  
 19626                                  ; All closes release the sharing information.
 19627                                  ; No commit releases sharing information
 19628                                  ;
 19629                                  ; All closes decrement the ref count.
 19630                                  ; No commit decrements the ref count.
 19631                                  
 19632                                  LocalClose:
 19633 00002E80 E864E4                  	call	ECritDisk
 19634 00002E83 E85701                  	CALL	SetSFTTimes
 19635 00002E86 E8D800                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19636                                  
 19637                                  ;hkn; SS is DOSDATA
 19638                                  	;Context DS
 19639 00002E89 16                      	push	ss
 19640 00002E8A 1F                      	pop	ds
 19641                                  
 19642 00002E8B 50                      	push	ax
 19643 00002E8C 53                      	push	bx
 19644 00002E8D E8D842                  	call	ShareEnd
 19645 00002E90 5B                      	pop	bx
 19646 00002E91 58                      	pop	ax
 19647                                  
 19648                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19649                                  
 19650                                  CloseEntry:
 19651 00002E92 50                      	PUSH	AX
 19652                                  
 19653                                  ; File clean or device does not get stamped nor disk looked at.
 19654                                  
 19655                                  	;test	bx,0C0h
 19656                                  	; 17/12/2022
 19657 00002E93 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19658                                  	;TEST	BX,devid_file_clean+devid_device
 19659 00002E96 7403                    	JZ	short rdir
 19660                                  	; 14/11/2022
 19661 00002E98 E9B400                  	JMP	FREE_SFT_OK		; either clean or device
 19662                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19663                                  
 19664                                  ; Retrieve the directory entry for the file
 19665                                  
 19666                                  rdir:
 19667 00002E9B E8D000                  	CALL	DirFromSFT
 19668                                  	;mov	al,5
 19669 00002E9E B005                    	MOV	AL,error_access_denied
 19670 00002EA0 7303                    	JNC	short clook
 19671                                  	; 14/11/2022
 19672 00002EA2 E9AB00                  	JMP	CloseFinish		; pretend the close worked.
 19673                                  	;jc	short CloseFinish ; 24/07/2019
 19674                                  clook:
 19675                                  
 19676                                  ; ES:DI points to entry
 19677                                  ; DS:SI points to SFT
 19678                                  ; ES:BX points to buffer header
 19679                                  
 19680 00002EA5 57                      	push	di
 19681 00002EA6 56                      	push	si
 19682                                  	;lea	si,[si+20h]
 19683 00002EA7 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19684                                  
 19685                                  ; ES:DI point to directory entry
 19686                                  ; DS:SI point to unpacked name
 19687                                  
 19688 00002EAA E835E3                  	call	XCHGP
 19689                                  
 19690                                  ; ES:DI point to unpacked name
 19691                                  ; DS:SI point to directory entry
 19692                                  
 19693 00002EAD E8490E                  	call	MetaCompare
 19694 00002EB0 E82FE3                  	call	XCHGP
 19695 00002EB3 5E                      	pop	si
 19696 00002EB4 5F                      	pop	di
 19697 00002EB5 740C                    	JZ	short CLOSE_GO		; Name OK
 19698                                  Bye:	
 19699 00002EB7 89F7                    	MOV	DI,SI
 19700 00002EB9 1E                      	PUSH	DS
 19701 00002EBA 07                      	POP	ES			; ES:DI points to SFT
 19702 00002EBB 16                      	PUSH	SS
 19703 00002EBC 1F                      	POP	DS
 19704 00002EBD F9                      	STC
 19705                                  	;mov	al,2
 19706 00002EBE B002                    	MOV	AL,error_file_not_found
 19707 00002EC0 E98D00                  	JMP	CloseFinish ; 24/07/2019
 19708                                  
 19709                                  	; 18/05/2019 - Retro DOS v4.0
 19710                                  CLOSE_GO:
 19711                                  	; 03/02/2024
 19712                                  	;mov	al,[si+4]
 19713 00002EC3 8A4404                  	mov	al,[si+SF_ENTRY.sf_attr]
 19714                                  	
 19715                                  	; MSDOS 6.0
 19716                                  	;test	word [si+2],8000h
 19717                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19718                                  	; 17/12/2022
 19719                                  	;test	byte [si+3],80h
 19720 00002EC6 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19721 00002ECA 740A                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19722                                  	; MSDOS 3.3 & MSDOS 6.0
 19723                                  	;mov	ch,[es:di+0Bh]
 19724 00002ECC 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19725                                  
 19726                                  	; 03/02/2024
 19727                                  	;;mov	al,[si+4]
 19728                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr]
 19729                                  
 19730                                  ;hkn; SS override
 19731 00002ED0 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19732                                  	; MSDOS 3.3
 19733                                  	;;call	MatchAttributes
 19734                                  	;;JNZ	short Bye		; attributes do not match
 19735                                  	; 18/05/2019
 19736 00002ED4 EB04                    	JMP	SHORT setattr		;FT.
 19737                                  nofcb:
 19738                                  	; 03/02/2024
 19739                                  	; MSDOS 6.0
 19740                                  	;;mov	al,[si+4]
 19741                                  	;MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19742                                  
 19743 00002ED6 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19744                                  setattr:
 19745                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19746                                  	;or	byte [es:di+0Bh],20h
 19747 00002EDA 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19748                                  	; MSDOS 6.0
 19749                                  	;mov	ax,[es:di+1Ah]
 19750 00002EDF 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19751                                  					;F.O. save old first cluster
 19752                                  ;hkn; SS override
 19753 00002EE3 36A3[BE0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19754                                  
 19755                                  ; 03/02/2024
 19756                                  %if 0
 19757                                  	;mov	ax,[si+0Bh]
 19758                                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19759                                  	;mov	[es:di+1Ah],ax
 19760                                  	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19761                                  	;mov	ax,[si+11h]
 19762                                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19763                                  	;mov	[es:di+1Ch],ax
 19764                                  	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19765                                  	;mov	ax,[si+13h]
 19766                                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19767                                  	;mov	[es:di+1Eh],ax
 19768                                  	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19769                                  	;mov	ax,[si+0Fh]
 19770                                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19771                                  	;mov	[es:di+18h],ax
 19772                                  	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19773                                  	;mov	ax,[si+0Dh]
 19774                                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19775                                  	;mov	[es:di+16h],ax
 19776                                  	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19777                                  %else
 19778                                  	; 03/02/2024 - Retro DOS v4.1
 19779 00002EE7 56                      	push	si
 19780 00002EE8 83C60B                  	add	si,0Bh
 19781 00002EEB AD                      	lodsw	; [si+SF_ENTRY.sf_firclus]
 19782                                  	;mov	[es:di+1Ah],ax
 19783 00002EEC 2689451A                	mov	[es:di+dir_entry.dir_first],ax	; Set first cluster
 19784 00002EF0 AD                      	lodsw	; [si+SF_ENTRY.sf_time]
 19785 00002EF1 26894516                	mov	[es:di+dir_entry.dir_time],ax	; Set time
 19786 00002EF5 AD                      	lodsw	; [si+SF_ENTRY.sf_date]
 19787 00002EF6 26894518                	mov	[es:di+dir_entry.dir_date],ax	; Set date
 19788 00002EFA AD                      	lodsw	; [si+SF_ENTRY.sf_size]
 19789 00002EFB 2689451C                	mov	[es:di+dir_entry.dir_size_l],ax	; Set size
 19790 00002EFF AD                      	lodsw	; [si+SF_ENTRY.sf_size+2]
 19791 00002F00 2689451E                	mov	[es:di+dir_entry.dir_size_h],ax
 19792 00002F04 5E                      	pop	si
 19793                                  %endif
 19794                                  
 19795                                  	; MSDOS 6.0
 19796                                  ;; File Tagging
 19797 00002F05 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty
 19798                                  				  ;LB. if already dirty		    ;AN000;
 19799 00002F0A 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19800                                  	; 02/06/2019
 19801 00002F0C E8B82A                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19802                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19803                                  	;or	byte [es:bx+5],40h
 19804 00002F0F 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19805                                  yesdirty4:
 19806 00002F14 1E                      	push	ds
 19807 00002F15 56                      	push	si
 19808                                  	; MSDOS 6.0
 19809                                  	;mov	cx,[si+0Bh]
 19810                                  	; 07/12/2022
 19811 00002F16 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19812                                  ;hkn; SS override
 19813 00002F19 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19814                                  	; MSDOS 3.3 
 19815                                  	;push	ss
 19816                                  	;pop	ds
 19817                                  	;MOV	AL,[THISDRV]
 19818                                  ;;; 10/1/86  update fastopen cache
 19819                                  	; MSDOS 3.3 & MSDOS 6.0
 19820 00002F1D 52                      	PUSH	DX
 19821 00002F1E B400                    	MOV	AH,0			; dir entry update
 19822 00002F20 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19823                                  	; MSDOS 6.0
 19824 00002F22 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19825 00002F24 750C                    	JNZ	short do_update2	;AN005; no, do update
 19826 00002F26 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19827                                  	; 27/06/2024
 19828                                  	;;;
 19829                                  	;;mov	di,[si+1Bh]
 19830                                  	;MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19831                                  	;;mov	cx,[si+1Dh]
 19832                                  	;MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19833 00002F28 C57C1B                  	lds	di,[si+SF_ENTRY.sf_dirsec]
 19834 00002F2B 8CD9                      	mov	cx,ds
 19835                                  	;;;
 19836                                  	;mov	dh,[si+1Fh]
 19837 00002F2D 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19838 00002F30 EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19839                                  
 19840                                  do_update2:				;AN011;F.O.
 19841                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19842                                  	; 
 19843 00002F32 363B0E[BE0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19844 00002F37 7407                    	JZ	short do_update		;AN011;F.O. yes
 19845 00002F39 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19846 00002F3B 368B0E[BE0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19847                                  do_update:				;AN005;
 19848                                  ;hkn; SS is DOSDATA
 19849                                  	;Context DS
 19850 00002F40 16                      	push	ss
 19851 00002F41 1F                      	pop	ds
 19852                                  	; MSDOS 3.3 & MSDOS 6.0
 19853 00002F42 E822F7                  	call	FastOpen_Update 	; invoke fastopen
 19854 00002F45 5A                      	POP	DX
 19855                                  
 19856                                  ;;; 10/1/86  update fastopen cache
 19857 00002F46 E87029                  	call	FLUSHBUF		; flush all relevant buffers
 19858 00002F49 5F                      	pop	di
 19859 00002F4A 07                      	pop	es
 19860                                  	;mov	al,5
 19861 00002F4B B005                    	MOV	AL,error_access_denied
 19862 00002F4D 7201                    	JC	short CloseFinish
 19863                                  FREE_SFT_OK:
 19864 00002F4F F8                      	CLC				; signal no error.
 19865                                  CloseFinish:
 19866                                  
 19867                                  ; Indicate to the device that the SFT is being closed.
 19868                                  
 19869                                  ;;;; 7/21/86
 19870 00002F50 9C                      	PUSHF				; save flag from DirFromSFT
 19871 00002F51 E84015                  	call	DEV_CLOSE_SFT
 19872 00002F54 9D                      	POPF
 19873                                  ;;;; 7/21/86
 19874                                  ;
 19875                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19876                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19877                                  ; going to be moving from busy to free.
 19878                                  ;
 19879 00002F55 59                      	POP	CX			; get old ref count
 19880 00002F56 9C                      	PUSHF
 19881                                  	; 03/02/2024
 19882                                  	;DEC	CX			; if cx != 1
 19883                                  	;JNZ	short NoFree		; then do NOT free SFT
 19884 00002F57 E203                    	loop	NoFree ; PCDOS 7.1 IBMDOS.COM
 19885                                  
 19886 00002F59 26890D                  	mov	[es:di],cx ; 0
 19887                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19888                                  NoFree:
 19889 00002F5C E8A3E3                  	call	LCritDisk
 19890 00002F5F 9D                      	POPF
 19891 00002F60 C3                      	retn
 19892                                  
 19893                                  ;---------------------------------------------------------------------------
 19894                                  ;
 19895                                  ; Procedure Name : FREE_SFT
 19896                                  ;
 19897                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19898                                  ; Flags preserved. Return old ref count in AX
 19899                                  ;
 19900                                  ; Note that busy is indicated by the SFT ref count being -1.
 19901                                  ;
 19902                                  ;---------------------------------------------------------------------------
 19903                                  
 19904                                  FREE_SFT:
 19905 00002F61 9C                      	PUSHF		; Save carry state
 19906 00002F62 268B05                  	mov	ax,[es:di]
 19907                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19908 00002F65 48                      	DEC	AX
 19909 00002F66 7501                    	JNZ	short SetCount
 19910 00002F68 48                      	DEC	AX
 19911                                  SetCount:
 19912 00002F69 268705                  	xchg	ax,[es:di]
 19913                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19914 00002F6C 9D                      	POPF
 19915 00002F6D C3                      	retn
 19916                                  
 19917                                  	; 18/05/2019 - Retro DOS v4.0
 19918                                  
 19919                                  ;----------------------------------------------------------------------------
 19920                                  ;
 19921                                  ; Procedure Name : DirFromSFT
 19922                                  ;
 19923                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19924                                  ;
 19925                                  ;   Inputs:	ES:DI point to SFT
 19926                                  ;		DS = DOSDATA
 19927                                  ;   Outputs:
 19928                                  ;		EXTERR_LOCUS = errLOC_Disk
 19929                                  ;		CurBuf points to buffer
 19930                                  ;		Carry Clear -> operation OK
 19931                                  ;		    ES:DI point to entry
 19932                                  ;		    ES:BX point to buffer
 19933                                  ;		    DS:SI point to SFT
 19934                                  ;		Carry SET   -> operation failed
 19935                                  ;		    registers trashified
 19936                                  ;   Registers modified: ALL
 19937                                  ;----------------------------------------------------------------------------
 19938                                  
 19939                                  DirFromSFT:
 19940                                  	;mov	byte [EXTERR_LOCUS],2
 19941 00002F6E C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19942 00002F73 06                      	push	es
 19943 00002F74 57                      	push	di
 19944                                  	; MSDOS 3.3
 19945                                  	;;mov	dx,[es:di+1Dh]
 19946                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19947                                  	; MSDOS 6.0
 19948                                  	;mov	dx,[es:[di+1Dh]
 19949 00002F75 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19950 00002F79 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19951                                  	; 04/02/2024
 19952 00002F7D 52                      	push	dx
 19953                                  	;mov	dx,[es:di+1Bh]
 19954 00002F7E 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19955                                  	; 04/02/2024
 19956                                  	; 19/05/2019
 19957                                  	;PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19958                                  	; MSDOS 3.3 & MSDOS 6.0
 19959 00002F82 52                      	PUSH	DX
 19960 00002F83 E8B025                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19961                                  					; [THISDPB] set
 19962 00002F86 5A                      	POP	DX
 19963 00002F87 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19964 00002F8B 721E                    	JC	short PopDone
 19965                                  	; 22/09/2023
 19966                                  	;XOR	AL,AL	; *		; Pre read
 19967                                  	;;mov	byte [ALLOWED],18h
 19968                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 19969                                  	;call	GETBUFFR
 19970                                  	; 22/09/2023
 19971 00002F8D E82528                  	call	GETBUFFER ; * 		; Pre read
 19972 00002F90 7219                    	JC	short PopDone
 19973 00002F92 5E                      	pop	si
 19974 00002F93 1F                      	pop	ds			; Get back SFT pointer
 19975                                  
 19976                                  ;hkn; SS override
 19977 00002F94 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19978                                  	;or	byte [es:di+5],4
 19979 00002F99 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19980 00002F9E 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19981                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19982                                  	;lea	di,[di+20] ; MSDOS 6.0
 19983 00002FA0 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19984                                  	;mov	al,32
 19985 00002FA3 B020                    	MOV	AL,dir_entry.size
 19986                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19987 00002FA5 F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19988 00002FA8 01C7                    	ADD	DI,AX			; Point at the entry
 19989 00002FAA C3                      	retn				; carry is clear
 19990                                  PopDone:
 19991 00002FAB 5F                      	pop	di
 19992 00002FAC 07                      	pop	es
 19993                                  PopDone_retn:
 19994 00002FAD C3                      	retn
 19995                                  
 19996                                  ;----------------------------------------------------------------------------
 19997                                  ;
 19998                                  ;**	DOS_Commit - UPdate Directory Entries
 19999                                  ;
 20000                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 20001                                  ;		(DS) = DOSGROUP
 20002                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 20003                                  ;	USES	all but DS
 20004                                  ;
 20005                                  ;----------------------------------------------------------------------------
 20006                                  
 20007                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20008                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 20009                                  
 20010                                  DOS_COMMIT:
 20011                                  	;hkn; called from srvcall. DS already set up.
 20012 00002FAE C43E[9E05]              	LES	DI,[THISSFT]
 20013                                  	;mov	bx,[es:di+5]
 20014 00002FB2 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 20015                                  	;test	bx,0C0h
 20016                                  	; 17/12/2022
 20017 00002FB6 F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 20018                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 20019 00002FB9 75F2                    	jnz	short PopDone_retn
 20020                                  	;test	bx,8000h
 20021                                  	; 17/12/2022
 20022                                  	;test	bh,80h
 20023 00002FBB F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 20024                                  	;TEST	BX,sf_isnet ; 8000h
 20025 00002FBE 7406                    	JZ	short LOCAL_COMMIT
 20026                                  
 20027                                  ;IF NOT Installed
 20028                                  ;	transfer NET_COMMIT
 20029                                  ;ELSE
 20030                                  	;mov	ax,1107h
 20031 00002FC0 B80711                  	MOV	AX,(MultNET<<8)|7
 20032 00002FC3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 20033                                  			; ES:DI -> SFT
 20034                                  			; SFT DPB field -> DPB of drive containing file
 20035                                  			; Return: CF set on error, AX = DOS error code
 20036                                  			; CF clear if successful
 20037                                  localcommit_retn: ; 18/12/2022	
 20038 00002FC5 C3                      	retn
 20039                                  ;ENDIF
 20040                                  
 20041                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 20042                                  ; There are three ways we can do this. One is to enter a critical section to
 20043                                  ; protect a potential free. The second is to increment the ref count to mask
 20044                                  ; the close decrementing.
 20045                                  ;
 20046                                  ; The proper way is to let the caller's of close decide if a decrement should
 20047                                  ; be done. We do this by providing another entry into close after the
 20048                                  ; decrement and after the share information release.
 20049                                  
 20050                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 20051                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 20052                                  
 20053                                  LOCAL_COMMIT:
 20054 00002FC6 E81EE3                  	call	ECritDisk
 20055                                  	; MSDOS 6.0
 20056 00002FC9 E81BE3                  	call	ECritDisk	;PTM.
 20057 00002FCC E80E00                  	call	SetSFTTimes
 20058 00002FCF B8FFFF                  	MOV	AX,-1
 20059 00002FD2 E8BDFE                  	call	CloseEntry
 20060                                  	; MSDOS 6.0
 20061 00002FD5 9C                      	PUSHF			;PTM.				;AN000;
 20062 00002FD6 E8B314                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 20063 00002FD9 9D                      	POPF			;PTM.				;AN000;
 20064                                  	;call	LCritDisk	;PTM.				;AN000;
 20065                                  	; 18/12/2022
 20066 00002FDA E925E3                  	jmp	LCritDisk
 20067                                  ;localcommit_retn:
 20068                                  ;	retn
 20069                                  
 20070                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 20071                                  ;----------------------------------------------------------------------------
 20072                                  ;
 20073                                  ; Procedure Name : SetSFTTimes
 20074                                  ;
 20075                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 20076                                  ;   Reflect these times in other SFT's for the same file.
 20077                                  ;
 20078                                  ;   Inputs:	ES:DI point to SFT
 20079                                  ;		BX = sf_flags set apprpriately
 20080                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 20081                                  ;   Registers modified: All except ES:DI, BX, AX
 20082                                  ;
 20083                                  ;----------------------------------------------------------------------------
 20084                                  
 20085                                  	; 04/02/2024 - Retro DOS v4.1
 20086                                  
 20087                                  SetSFTTimes:
 20088                                  
 20089                                  ; 04/02/2024
 20090                                  %if 0
 20091                                  ;	File clean or device does not get stamped nor disk looked at.
 20092                                  	
 20093                                  	;test	bx,0C0h
 20094                                  	; 17/12/2022
 20095                                  	test	bl,devid_file_clean+devid_device
 20096                                  	;TEST	BX,devid_file_clean+devid_device
 20097                                  	;retnz				; clean or device => no timestamp
 20098                                  	jnz	short localcommit_retn
 20099                                  
 20100                                  ;	file and dirty. See if date is good
 20101                                  
 20102                                  	;test	bx,4000h
 20103                                  	; 17/12/2022
 20104                                  	;test	bh,40h
 20105                                  	test	bh,(sf_close_nodate>>8)
 20106                                  	;TEST	BX,sf_close_nodate
 20107                                  	;retnz				; nodate => no timestamp
 20108                                  	jnz	short localcommit_retn
 20109                                  %else
 20110                                  	; 04/02/2024
 20111                                  	; (PCDOS 7.1 IBMDOS.COM)
 20112                                  	;test	bx,40C0h
 20113 00002FDD F7C3C040                	test	bx,sf_close_nodate+devid_file_clean+devid_device
 20114 00002FE1 75E2                    	jnz	short localcommit_retn
 20115                                  %endif
 20116                                  
 20117 00002FE3 50                      	push	ax
 20118 00002FE4 53                      	push	bx
 20119 00002FE5 E8FDDA                  	call	DATE16			; Date/Time to AX/DX
 20120                                  	;mov	[es:di+0Fh],ax
 20121 00002FE8 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 20122                                  	;mov	[es:di+0Dh],dx
 20123 00002FEC 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 20124 00002FF0 31C0                    	XOR	AX,AX
 20125                                  ;if installed
 20126                                  	;call	JShare + 14 * 4
 20127 00002FF2 FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 20128                                  ;else
 20129                                  ;	call	ShSU
 20130                                  ;endif
 20131 00002FF6 5B                      	pop	bx
 20132 00002FF7 58                      	pop	ax
 20133 00002FF8 C3                      	retn
 20134                                  
 20135                                  ;============================================================================
 20136                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 20137                                  ;============================================================================
 20138                                  ; 23/07/2018 - Retro DOS v3.0
 20139                                  ; 18/05/2019 - Retro DOS v4.0
 20140                                  
 20141                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 20142                                  
 20143                                  ;TITLE DIRCALL - Directory manipulation internal calls
 20144                                  ;NAME  DIRCALL
 20145                                  
 20146                                  ;**	Low level directory manipulation routines for making removing and
 20147                                  ;	  verifying local or NET directories
 20148                                  ;
 20149                                  ;	DOS_MKDIR
 20150                                  ;	DOS_CHDIR
 20151                                  ;	DOS_RMDIR
 20152                                  ;
 20153                                  ;	Modification history:
 20154                                  ;
 20155                                  ;		Created: ARR 30 March 1983
 20156                                  
 20157                                  ;BREAK <DOS_MkDir - Make a directory entry>
 20158                                  ;---------------------------------------------------------------------------
 20159                                  ;
 20160                                  ; Procedure Name : DOS_MkDir
 20161                                  ;
 20162                                  ; Inputs:
 20163                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20164                                  ;		terminated)
 20165                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20166                                  ;		( = -1 if current dir not involved, else
 20167                                  ;		 Points to first char after last "/" of current dir part)
 20168                                  ;	[THISCDS] Points to CDS being used
 20169                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20170                                  ; Function:
 20171                                  ;	Make a new directory
 20172                                  ; Returns:
 20173                                  ;	Carry Clear
 20174                                  ;		No error
 20175                                  ;	Carry Set
 20176                                  ;	    AX is error code
 20177                                  ;		error_path_not_found
 20178                                  ;			Bad path (not in curr dir part if present)
 20179                                  ;		error_bad_curr_dir
 20180                                  ;			Bad path in current directory part of path
 20181                                  ;		error_access_denied
 20182                                  ;			Already exists, device name
 20183                                  ; DS preserved, Others destroyed
 20184                                  ;---------------------------------------------------------------------------
 20185                                  
 20186                                  ;hkn; called from path.asm. DS already set up.
 20187                                  
 20188                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20189                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 20190                                  
 20191                                  ; 04/02/2024 - Retro DOS v4.1
 20192                                  
 20193                                  DOS_MKDIR:
 20194 00002FF9 E832E2                  	call	TestNet
 20195 00002FFC 7313                    	JNC	short LOCAL_MKDIR
 20196                                  
 20197                                  ;IF NOT Installed
 20198                                  ;	transfer NET_MKDIR
 20199                                  ;ELSE
 20200                                  	;mov	ax,1103h
 20201 00002FFE B80311                  	MOV	AX,(MultNET<<8)|3
 20202 00003001 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 20203                                  			; SS = DOS CS
 20204                                  			; SDA first filename pointer -> fully-qualified directory name
 20205                                  			; SDA CDS pointer -> current directory
 20206                                  			; Return: CF set on error, AX = DOS error code
 20207                                  			; CF clear if successful
 20208 00003003 C3                      	retn
 20209                                  ;ENDIF
 20210                                  
 20211                                  NODEACCERRJ:
 20212                                  	;mov	ax,5
 20213 00003004 B80500                  	MOV	AX,error_access_denied
 20214                                  _BadRet:
 20215 00003007 F9                      	STC
 20216                                  	;call	LCritDisk
 20217                                  	;retn
 20218                                  	; 18/12/2022
 20219 00003008 E9F7E2                  	jmp	LCritDisk
 20220                                  
 20221                                  PATHNFJ:
 20222 0000300B E8F4E2                  	call	LCritDisk
 20223 0000300E E904FA                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 20224                                  
 20225                                  LOCAL_MKDIR:
 20226 00003011 E8D3E2                  	call	ECritDisk
 20227                                  
 20228                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 20229                                  
 20230 00003014 8C16[A005]              	MOV	[THISSFT+2],SS
 20231                                  
 20232                                  ;hkn; DOSDATA
 20233 00003018 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 20234                                  
 20235                                  ;  NOTE: Need WORD PTR because MASM takes type of
 20236                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 20237                                  
 20238                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 20239 0000301E C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 20240                                  				; make sure SHARER won't complain.
 20241                                  	;mov	al,10h
 20242 00003024 B010                    	MOV	AL,attr_directory
 20243 00003026 E8FC17                  	call	MakeNode
 20244 00003029 72E0                    	JC	short PATHNFJ
 20245 0000302B 83F803                  	CMP	AX,3
 20246 0000302E 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 20247 00003030 C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 20248 00003034 C53E[E205]              	LDS	DI,[CURBUF]
 20249 00003038 29FE                    	SUB	SI,DI
 20250 0000303A 56                      	PUSH	SI		; Pointer to dir_first
 20251                                  
 20252                                  ; 04/02/2024
 20253                                  %if 0
 20254                                  	; MSDOS 6.0
 20255                                  	;push	word [DI+8]
 20256                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 20257                                  	; MSDOS 3.3 & MSDOS 6.0
 20258                                  	;push	word [di+6]
 20259                                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 20260                                  %else
 20261                                  	; 04/02/2024
 20262                                  	; (PCDOS 7.1 IBMDOS.COM)
 20263 0000303B C54506                  	lds	ax,[di+BUFFINFO.buf_sector] ; Sector of new node
 20264 0000303E 1E                      	push	ds
 20265 0000303F 50                      	push	ax
 20266                                  %endif
 20267                                  
 20268 00003040 16                      	push	ss
 20269 00003041 1F                      	pop	ds
 20270                                  
 20271                                  	; 04/02/2024
 20272                                  	;PUSH	word [DIRSTART]	; Parent for .. entry
 20273 00003042 31C0                    	XOR	AX,AX
 20274                                  	;MOV	[DIRSTART],AX	; Null directory
 20275 00003044 8706[C205]              	xchg	ax,[DIRSTART]
 20276 00003048 50                      	push	ax
 20277                                  
 20278 00003049 E82317                  	call	NEWDIR
 20279 0000304C 7263                    	JC	short NODEEXISTSPOPDEL ; No room
 20280 0000304E E80D0D                  	call	GETENT		; First entry
 20281 00003051 725E                    	JC	short NODEEXISTSPOPDEL ; Screw up
 20282 00003053 C43E[E205]              	LES	DI,[CURBUF]
 20283                                  
 20284                                  ; 07/07/2024 - Retro DOS v4.1
 20285                                  %if 0
 20286                                  	; MSDOS 6.0
 20287                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20288                                  				 ;LB. if already dirty		    ;AN000;
 20289                                  	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 20290                                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 20291                                  	
 20292                                  	; MSDOS 3.3 & MSDOS 6.0
 20293                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 20294                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 20295                                  %else
 20296                                  	; 04/02/2024
 20297                                  	; (PCDOS 7.1 IBMDOS.COM)
 20298 00003057 E86129                  	call	SET_BUF_DIRTY
 20299                                  %endif
 20300                                  
 20301                                  yesdirty5:
 20302                                  	;;add	di,16 ; MSDOS 3.3
 20303                                  	;add	di,20 ; MSDOS 6.0
 20304 0000305A 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 20305 0000305D B82E20                  	MOV	AX,202EH	; ". "
 20306 00003060 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 20307 00003064 E89B17                  	call	SETDOTENT
 20308 00003067 B82E2E                  	MOV	AX,2E2EH	; ".."
 20309 0000306A 5A                      	POP	DX		; Parent
 20310 0000306B E89417                  	call	SETDOTENT
 20311 0000306E C42E[8A05]              	LES	BP,[THISDPB]
 20312                                  	; 22/09/2023
 20313                                  	;;mov	byte [ALLOWED],18h
 20314                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20315 00003072 5A                      	POP	DX		; Entry sector
 20316                                  	; MSDOS 6.0
 20317 00003073 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 20318                                  
 20319                                  	;XOR	AL,AL ; *	; Pre read
 20320                                  	;call	GETBUFFR
 20321                                  	; 22/09/2023
 20322 00003077 E83B27                  	call	GETBUFFER ; *	 ;Pre read
 20323 0000307A 725B                    	JC	short NODEEXISTSP
 20324 0000307C 8B16[C205]              	MOV	DX,[DIRSTART]
 20325 00003080 C53E[E205]              	LDS	DI,[CURBUF]
 20326                                  	;or	byte [di+5],4
 20327 00003084 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20328 00003088 5E                      	POP	SI		; dir_first pointer
 20329 00003089 01FE                    	ADD	SI,DI
 20330 0000308B 8914                    	MOV	[SI],DX
 20331 0000308D 31D2                    	XOR	DX,DX
 20332 0000308F 895402                  	MOV	[SI+2],DX	; Zero size
 20333 00003092 895404                  	MOV	[SI+4],DX
 20334                                  DIRUP:
 20335                                  	; MSDOS 6.0
 20336 00003095 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 20337                                  	;			 ;LB. if already dirty 		   ;AN000;
 20338 00003099 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 20339 0000309B E82929                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 20340                                  	
 20341                                  	; MSDOS 3.3 & MSDOS 6.0
 20342                                  	;or	byte [di+5],40h
 20343 0000309E 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 20344                                  yesdirty6:
 20345 000030A2 16                      	push	ss
 20346 000030A3 1F                      	pop	ds
 20347 000030A4 268A4600                	mov	al,[es:bp]
 20348                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 20349 000030A8 E80E28                  	call	FLUSHBUF
 20350                                  	;mov	ax,5
 20351 000030AB B80500                  	MOV	AX,error_access_denied
 20352                                  	;call	LCritDisk
 20353                                  	;retn
 20354                                  	; 18/12/2022
 20355 000030AE E951E2                  	jmp	LCritDisk
 20356                                  
 20357                                  NODEEXISTSPOPDEL:
 20358 000030B1 5A                      	POP	DX		; Parent
 20359 000030B2 5A                      	POP	DX		; Entry sector
 20360                                  	; MSDOS 6.0 
 20361 000030B3 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 20362 000030B7 C42E[8A05]              	LES	BP,[THISDPB]
 20363                                  	; 22/09/2023
 20364                                  	;;mov	byte [ALLOWED],18h
 20365                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20366                                  	;XOR	AL,AL ; *	; Pre read
 20367                                  	;call	GETBUFFR
 20368                                  	; 22/09/2023
 20369 000030BB E8F726                  	call	GETBUFFER ; *	; Pre read
 20370 000030BE 7217                    	JC	short NODEEXISTSP
 20371 000030C0 C53E[E205]              	LDS	DI,[CURBUF]
 20372                                  	;or	byte [di+5],4
 20373 000030C4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20374 000030C8 5E                      	POP	SI		; dir_first pointer
 20375 000030C9 01FE                    	ADD	SI,DI
 20376                                  	;sub	si,1Ah ; 26
 20377 000030CB 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 20378 000030CE C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 20379 000030D1 E8C1FF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 20380                                  NODEEXISTS:
 20381 000030D4 E92DFF                  	JMP	NODEACCERRJ ; 10/08/2018
 20382                                  
 20383                                  NODEEXISTSP:
 20384 000030D7 5E                      	POP	SI		; Clean stack
 20385 000030D8 EBFA                    	JMP	short NODEEXISTS
 20386                                  
 20387                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20388                                  
 20389                                  ;BREAK <DOS_ChDir -- Verify a directory>
 20390                                  ;----------------------------------------------------------------------------
 20391                                  ;
 20392                                  ; Procedure Name : DOS_ChDir
 20393                                  ;
 20394                                  ; Inputs:
 20395                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20396                                  ;		terminated)
 20397                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20398                                  ;		( = -1 if current dir not involved, else
 20399                                  ;		 Points to first char after last "/" of current dir part)
 20400                                  ;	[THISCDS] Points to CDS being used May not be NUL
 20401                                  ; Function:
 20402                                  ;	Validate the path for potential new current directory
 20403                                  ; Returns:
 20404                                  ;	NOTE:
 20405                                  ;	    [SATTRIB] is modified by this call
 20406                                  ;	Carry Clear
 20407                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 20408                                  ;		Caller must NOT set ID fields on a NET CDS.
 20409                                  ;	Carry Set
 20410                                  ;	    AX is error code
 20411                                  ;		error_path_not_found
 20412                                  ;			Bad path
 20413                                  ;		error_access_denied
 20414                                  ;			device or file name
 20415                                  ; DS preserved, Others destroyed
 20416                                  ;----------------------------------------------------------------------------
 20417                                  
 20418                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 20419                                  
 20420                                  ; 18/05/2019 - Retro DOS v4.0
 20421                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 20422                                  
 20423                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20424                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 20425                                  
 20426                                  DOS_CHDIR:
 20427 000030DA E851E1                  	call	TestNet
 20428 000030DD 7306                    	JNC	short LOCAL_CHDIR
 20429                                  
 20430                                  ;IF NOT Installed
 20431                                  ;	transfer NET_CHDIR
 20432                                  ;ELSE
 20433                                  	;mov	ax,1105h
 20434 000030DF B80511                  	MOV	AX,(MultNET<<8)|5
 20435 000030E2 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 20436                                  			; SS = DOS CS
 20437                                  			; SDA first filename pointer -> fully-qualified directory name
 20438                                  			; SDA CDS pointer -> current directory
 20439                                  			; Return: CF set on error, AX = DOS error code
 20440                                  			; CF clear if successful
 20441 000030E4 C3                      	retn
 20442                                  ;ENDIF
 20443                                  
 20444                                  LOCAL_CHDIR:
 20445 000030E5 E8FFE1                  	call	ECritDisk
 20446                                  	; MSDOS 6.0
 20447                                  	;;test	word [es:di+43h],2000h
 20448                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 20449                                  	; 17/12/2022
 20450                                  	;test	byte [es:di+44h],20h
 20451 000030E8 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 20452 000030ED 7406                    	JZ	short nojoin		   ;PTM.
 20453                                  	;mov	word [es:di+49h], 0FFFFh
 20454 000030EF 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 20455                                  nojoin:
 20456                                  	; MSDOS 3.3 & MSDOS 6.0
 20457 000030F5 C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 20458                                  	;mov	byte [SATTRIB],16h
 20459 000030FA C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20460                                  				; Dir calls can find these
 20461                                  ; DOS 3.3  6/24/86 FastOpen
 20462 000030FF 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 20463 00003104 E8E10C                  	call	GETPATH
 20464                                  	
 20465                                  	; 04/02/2024
 20466                                  	;PUSHF						;AN000;
 20467 00003107 9F                      	lahf						
 20468 00003108 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 20469                                  	;POPF						;AN000;
 20470 0000310D 9E                      	sahf
 20471                                  
 20472                                  ; DOS 3.3  6/24/86 FastOpen
 20473                                  
 20474                                  	; MSDOS 3.3
 20475                                  	;mov	byte [FastOpenFlg],0
 20476                                  	
 20477                                  	;mov	ax,3
 20478 0000310E B80300                  	MOV	AX,error_path_not_found
 20479 00003111 7206                    	JC	short ChDirDone
 20480 00003113 7539                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20481 00003115 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 20482                                  	; 27/06/2024
 20483                                  	;CLC
 20484                                  ChDirDone:
 20485                                  	;call	LCritDisk
 20486                                  	;retn
 20487                                  	; 18/12/2022
 20488 00003119 E9E6E1                  	jmp	LCritDisk
 20489                                  
 20490                                  ;BREAK <DOS_RmDir -- Remove a directory>
 20491                                  ;----------------------------------------------------------------------------
 20492                                  ;
 20493                                  ; Procedure Name : DOS_RmDir
 20494                                  ;
 20495                                  ; Inputs:
 20496                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 20497                                  ;		terminated)
 20498                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 20499                                  ;		( = -1 if current dir not involved, else
 20500                                  ;		 Points to first char after last "/" of current dir part)
 20501                                  ;	[THISCDS] Points to CDS being used
 20502                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 20503                                  ; Function:
 20504                                  ;	Remove a directory
 20505                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 20506                                  ; Returns:
 20507                                  ;	NOTE:
 20508                                  ;	    [SATTRIB] is modified by this call
 20509                                  ;	Carry Clear
 20510                                  ;		No error
 20511                                  ;	Carry Set
 20512                                  ;	    AX is error code
 20513                                  ;		error_path_not_found
 20514                                  ;			Bad path (not in curr dir part if present)
 20515                                  ;		error_bad_curr_dir
 20516                                  ;			Bad path in current directory part of path
 20517                                  ;		error_access_denied
 20518                                  ;			device or file name, root directory
 20519                                  ;			Bad directory ('.' '..' messed up)
 20520                                  ; DS preserved, Others destroyed
 20521                                  ;----------------------------------------------------------------------------
 20522                                  
 20523                                  ;hkn; called from path.asm. DS already set up.
 20524                                  
 20525                                  ; 18/05/2019 - Retro DOS v4.0
 20526                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 20527                                  
 20528                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20529                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 20530                                  
 20531                                  DOS_RMDIR:
 20532 0000311C E80FE1                  	call	TestNet
 20533 0000311F 7306                    	JNC	short LOCAL_RMDIR
 20534                                  
 20535                                  ;IF NOT Installed
 20536                                  ;	transfer NET_RMDIR
 20537                                  ;ELSE
 20538                                  	;mov	ax,1101h
 20539 00003121 B80111                  	MOV	AX,(MultNET<<8)|1
 20540 00003124 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 20541                                  			; SS = DOS CS
 20542                                  			; SDA first filename pointer -> fully-qualified directory name
 20543                                  			; SDA CDS pointer -> current directory
 20544                                  			; Return: CF set on error, AX = DOS error code
 20545                                  			; CF clear if successful
 20546 00003126 C3                      	retn
 20547                                  ;ENDIF
 20548                                  
 20549                                  LOCAL_RMDIR:
 20550 00003127 E8BDE1                  	call	ECritDisk
 20551 0000312A C606[4C03]00            	MOV	byte [NoSetDir],0
 20552                                  	;mov	byte [SATTRIB],16h
 20553 0000312F C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 20554                                  					; Dir calls can find these
 20555 00003134 E8B10C                  	call	GETPATH
 20556 00003137 720C                    	JC	short NOPATH		; Path not found
 20557 00003139 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 20558 0000313B 8B3E[C205]              	MOV	DI,[DIRSTART]
 20559 0000313F 09FF                    	OR	DI,DI			; Root ?
 20560 00003141 750E                    	JNZ	short rmdir_get_buf	; No
 20561 00003143 EB09                    	JMP	SHORT NOTDIRPATH
 20562                                  
 20563                                  NOPATH:
 20564                                  	;mov	ax,3
 20565 00003145 B80300                  	MOV	AX,error_path_not_found
 20566 00003148 E9BCFE                  	JMP	_BadRet
 20567                                  
 20568                                  NOTDIRPATHPOP:
 20569 0000314B 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 20570 0000314C 58                      	POP	AX
 20571                                  NOTDIRPATHPOP2:
 20572 0000314D 58                      	POP	AX
 20573                                  NOTDIRPATH:
 20574 0000314E E9B3FE                  	JMP	NODEACCERRJ
 20575                                  
 20576                                  rmdir_get_buf:
 20577 00003151 C53E[E205]              	LDS	DI,[CURBUF]
 20578 00003155 29FB                    	SUB	BX,DI		; Compute true offset
 20579 00003157 53                      	PUSH	BX		; Save entry pointer
 20580                                  	
 20581                                  	; MSDOS 6.0
 20582                                  	;push	word [di+8]
 20583 00003158 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 20584                                  	
 20585                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20586                                  	;push	word [di+6]
 20587 0000315B FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 20588                                  
 20589                                  ;hkn; SS is DOSDATA
 20590                                  	;context DS
 20591 0000315E 16                      	push	ss
 20592 0000315F 1F                      	pop	ds
 20593                                  	;context ES
 20594 00003160 16                      	push	ss
 20595 00003161 07                      	pop	es
 20596                                  
 20597                                  ;hkn; NAME1 is in DOSDATA
 20598 00003162 BF[4B05]                	MOV	DI,NAME1
 20599                                  	;MOV	AL,'?' ; 3Fh
 20600                                  	;MOV	CX,11
 20601                                  	;REP	STOSB
 20602                                  	;XOR	AL,AL
 20603                                  	;STOSB				; Nul terminate it
 20604                                  	; 27/06/2024
 20605 00003165 B83F00                  	mov	ax,3Fh
 20606 00003168 B90A00                  	mov	cx,10
 20607 0000316B F3AA                    	rep	stosb	; al = "?"
 20608 0000316D AB                      	stosw		; ah = 0
 20609                                  	;
 20610 0000316E E8EF0E                  	call	STARTSRCH		; Set search
 20611 00003171 E8E70B                  	call	GETENTRY		; Get start of directory
 20612 00003174 72D5                    	JC	short NOTDIRPATHPOP	; Screw up
 20613 00003176 8E1E[E405]              	MOV	DS,[CURBUF+2]
 20614 0000317A 89DE                    	MOV	SI,BX
 20615 0000317C AD                      	LODSW
 20616                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 20617 0000317D 3D2E20                  	cmp	ax,202Eh ; ". "
 20618 00003180 75C9                    	JNZ	short NOTDIRPATHPOP	; Nope
 20619                                  	;add	si,30
 20620 00003182 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 20621 00003185 AD                      	LODSW
 20622                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 20623                                  	;cmp	ax, '..'
 20624 00003186 3D2E2E                  	cmp	ax,2E2Eh
 20625 00003189 75C0                    	JNZ	short NOTDIRPATHPOP	; Nope
 20626                                  
 20627                                  ;hkn; SS is DOSDATA
 20628                                  	;context DS
 20629 0000318B 16                      	push	ss
 20630 0000318C 1F                      	pop	ds
 20631 0000318D C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 20632 00003193 E8C50B                  	call	GETENTRY		; Get next entry
 20633 00003196 72B3                    	JC	short NOTDIRPATHPOP	; Screw up
 20634                                  	;mov	byte [ATTRIB],16h
 20635 00003198 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 20636 0000319D E8C50A                  	call	SRCH			; Do a search
 20637 000031A0 73A9                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 20638 000031A2 803E[4A03]00            	CMP	byte [FAILERR],0
 20639 000031A7 75A2                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 20640 000031A9 C42E[8A05]              	LES	BP,[THISDPB]
 20641 000031AD 8B1E[C205]              	MOV	BX,[DIRSTART]
 20642 000031B1 E88D1B                  	call	RELEASE 		; Release data in sub dir
 20643 000031B4 7295                    	JC	short NOTDIRPATHPOP	; Screw up
 20644 000031B6 5A                      	POP	DX			; Sector # of entry
 20645 000031B7 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 20646                                  	; 22/09/2023
 20647                                  	;;mov	byte [ALLOWED],18h
 20648                                  	;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 20649                                  	;XOR	AL,AL ; *		; Pre read
 20650                                  	;call	GETBUFFR		; Get sector back
 20651 000031BB E8F725                  	call	GETBUFFER ; *		; Pre Read
 20652 000031BE 728D                    	JC	short NOTDIRPATHPOP2	; Screw up
 20653 000031C0 C53E[E205]              	LDS	DI,[CURBUF]
 20654                                  	;or	byte [di+5],4
 20655 000031C4 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 20656 000031C8 5B                      	POP	BX			; Pointer to start of entry
 20657 000031C9 01FB                    	ADD	BX,DI			; Corrected
 20658 000031CB C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 20659                                  
 20660                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20661 000031CE 1E                      	PUSH	DS
 20662                                  
 20663                                  ;hkn; SS is DOSDATA
 20664                                  	;context DS
 20665 000031CF 16                      	push	ss
 20666 000031D0 1F                      	pop	ds
 20667                                  
 20668                                  	; MSDOS 6.0
 20669 000031D1 E86BF4                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 20670                                  
 20671                                  ;	; MSDOS 3.3
 20672                                  ;_FastOpen_Delete:
 20673                                  ;	push	ax
 20674                                  ;	mov	si,[WFP_START]
 20675                                  ;	mov	bx,FastTable
 20676                                  ;	;mov	al,3  ; FONC_delete
 20677                                  ;	mov	al,FONC_delete
 20678                                  ;	call	far [BX+2]  ; FastTable+2
 20679                                  ;	pop	ax
 20680                                  
 20681 000031D4 1F                      	POP	DS
 20682                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 20683                                  
 20684 000031D5 E9BDFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 20685                                  
 20686                                  ;============================================================================
 20687                                  ; DISK.ASM, MSDOS 6.0, 1991
 20688                                  ;============================================================================
 20689                                  ; 23/07/2018 - Retro DOS v3.0 
 20690                                  ; 04/05/2019 - Retro DOS v4.0
 20691                                  
 20692                                  ;	TITLE	DISK - Disk utility routines
 20693                                  ;	NAME	Disk
 20694                                  
 20695                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 20696                                  ;
 20697                                  ;	SWAPCON
 20698                                  ;	SWAPBACK
 20699                                  ;	DOS_READ
 20700                                  ;	DOS_WRITE
 20701                                  ;	get_io_sft
 20702                                  ;	DirRead
 20703                                  ;	FIRSTCLUSTER
 20704                                  ;	SET_BUF_AS_DIR
 20705                                  ;	FATSecRd
 20706                                  ;	DREAD
 20707                                  ;	CHECK_WRITE_LOCK
 20708                                  ;	CHECK_READ_LOCK
 20709                                  ;
 20710                                  ;	Revision history:
 20711                                  ;
 20712                                  ;		A000   version 4.00  Jan. 1988
 20713                                  ;
 20714                                  ;----------------------------------------------------------------------------
 20715                                  ;
 20716                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 20717                                  ;		error happens, DOS retries the entire block assuming that
 20718                                  ;		zero characters were transferred. Modified the code to take
 20719                                  ;		into account the number of characters transfered before
 20720                                  ;		retrying the operation.
 20721                                  ;
 20722                                  ;----------------------------------------------------------------------------
 20723                                  ;
 20724                                  
 20725                                  ;Installed = TRUE
 20726                                  
 20727                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 20728                                  
 20729                                  ; **** Drivers for file input from devices ****
 20730                                  ;----------------------------------------------------------------------------
 20731                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 20732                                  ;   of handles 0 and 1
 20733                                  ;
 20734                                  ;   Inputs:	DS is DOSDATA
 20735                                  ;   Outputs:	CONSWAP is set to false.
 20736                                  ;   Registers modified: none
 20737                                  ;----------------------------------------------------------------------------
 20738                                  
 20739                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20740                                  
 20741                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20742                                  ; 04/05/2019 - Retro DOS v4.0
 20743                                  
 20744                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20745                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20746                                  
 20747                                  SWAPBACK:
 20748 000031D8 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20749 000031DD C3                      	retn
 20750                                  
 20751                                  ;----------------------------------------------------------------------------
 20752                                  ;
 20753                                  ; Procedure Name : SWAPCON
 20754                                  ;
 20755                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20756                                  ;
 20757                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20758                                  ;		DS is DOSDATA
 20759                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20760                                  ;   Registers modified: none
 20761                                  ;--------------------------------------------------------------------------
 20762                                  
 20763                                  SWAPCON:
 20764                                  	; MSDOS 3.3
 20765                                  	;push	es
 20766                                  	;push	di
 20767                                  	;mov	byte [CONSWAP],1
 20768                                  	;les	di,[THISSFT]
 20769                                  	;mov	word [CONSFT],di
 20770                                  	;mov	word [CONSFT+2],es
 20771                                  	;pop	di
 20772                                  	;pop	es
 20773                                  	;retn
 20774                                  
 20775                                  	; MSDOS 6.0
 20776 000031DE C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20777 000031E3 50                      	push	ax
 20778 000031E4 A1[9E05]                	mov	ax,[THISSFT]
 20779 000031E7 A3[E605]                	mov	[CONSFT],ax
 20780 000031EA A1[A005]                	mov	ax,[THISSFT+2]
 20781 000031ED A3[E805]                	mov	[CONSFT+2],ax
 20782 000031F0 58                      	pop	ax
 20783 000031F1 C3                      	retn
 20784                                  
 20785                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20786                                  ; 04/05/2019 - Retro DOS v4.0
 20787                                  
 20788                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20789                                  ;-----------------------------------------------------------------------------
 20790                                  ;
 20791                                  ; Inputs:
 20792                                  ;	ThisSFT set to the SFT for the file being used
 20793                                  ;	[DMAADD] contains transfer address
 20794                                  ;	CX = No. of bytes to read
 20795                                  ;	DS = DOSDATA
 20796                                  ; Function:
 20797                                  ;	Perform read operation
 20798                                  ; Outputs:
 20799                                  ;    Carry clear
 20800                                  ;	SFT Position and cluster pointers updated
 20801                                  ;	CX = No. of bytes read
 20802                                  ;	ES:DI point to SFT
 20803                                  ;    Carry set
 20804                                  ;	AX is error code
 20805                                  ;	CX = 0
 20806                                  ;	ES:DI point to SFT
 20807                                  ; DS preserved, all other registers destroyed
 20808                                  ;
 20809                                  ;-----------------------------------------------------------------------------
 20810                                  
 20811                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20812                                  
 20813                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20814                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20815                                  
 20816                                  DOS_READ:
 20817 000031F2 C43E[9E05]              	LES	DI,[THISSFT]
 20818                                  
 20819                                  ; Verify that the sft has been opened in a mode that allows reading.
 20820                                  
 20821                                  	;mov	al,[es:di+2]
 20822 000031F6 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20823                                  	;and	al,0Fh
 20824 000031FA 240F                    	AND	AL,access_mask
 20825                                  	;cmp	al,1
 20826 000031FC 3C01                    	CMP	AL,open_for_write
 20827 000031FE 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20828 00003200 E9CE05                  	jmp	SET_ACC_ERR
 20829                                  
 20830                                  READ_NO_MODE:
 20831 00003203 E8B304                  	call	SETUP
 20832 00003206 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20833 00003208 E83CE0                  	call	IsSFTNet
 20834 0000320B 7408                    	JZ	short LOCAL_READ
 20835                                  
 20836                                  ;IF NOT Installed
 20837                                  ;	transfer NET_READ
 20838                                  ;ELSE
 20839                                  	;mov	ax,1108h
 20840 0000320D B80811                  	MOV	AX,(MultNET<<8)|8
 20841 00003210 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20842                                  			; ES:DI -> SFT
 20843                                  			; SFT DPB field -> DPB of drive containing file
 20844                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20845                                  			; Return: CF set on error, CX = bytes read
 20846 00003212 C3                      	retn
 20847                                  ;ENDIF
 20848                                  
 20849                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20850                                  ; except return immediately.
 20851                                  
 20852                                  NoIORet:
 20853 00003213 F8                      	CLC
 20854 00003214 C3                      	retn
 20855                                  
 20856                                  LOCAL_READ:
 20857                                  	;test	word [es:di+5],80h
 20858                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20859 00003215 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20860 0000321A 750E                    	JNZ	short READDEV
 20861                                  
 20862                                  	;mov	byte [EXTERR_LOCUS],2
 20863 0000321C C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20864 00003221 E8C3E0                  	call	ECritDisk
 20865 00003224 E86D05                  	call	DISKREAD
 20866                                  
 20867                                  critexit:
 20868                                  	;call	LCritDisk
 20869                                  	;retn
 20870                                  	; 16/12/2022
 20871 00003227 E9D8E0                  	jmp	LCritDisk
 20872                                  
 20873                                  ; We are reading from a device. Examine the status of the device to see if we
 20874                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20875                                  ; null device, we can safely indicate no transfer.
 20876                                  
 20877                                  READDEV:
 20878                                  	;mov	byte [EXTERR_LOCUS],4
 20879 0000322A C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20880                                  	;mov	bl,[es:di+5]
 20881 0000322F 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20882 00003233 C43E[2C03]              	LES	DI,[DMAADD]
 20883                                  	;test	bl,40h
 20884 00003237 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20885 0000323A 7407                    	JZ	short ENDRDDEVJ3
 20886                                  	;test	bl,4
 20887 0000323C F6C304                  	test	BL,devid_device_null	; NUL device?
 20888 0000323F 7405                    	JZ	short TESTRAW 		; NO
 20889 00003241 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20890                                  ENDRDDEVJ3:
 20891                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20892                                  	;JMP	short ENDRDDEVJ2
 20893                                  	; 16/12/2022
 20894 00003243 E93F01                  	jmp	ENDRDDEV ; 04/05/2019
 20895                                  
 20896                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20897                                  ; bizarre std_con_string_input.
 20898                                  
 20899                                  TESTRAW:
 20900                                  	;test	bl,20h
 20901 00003246 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20902 00003249 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20903                                  	;test	bl,1
 20904 0000324B F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20905 0000324E 7458                    	JZ	short NOTRDCON
 20906 00003250 E96701                  	JMP	READCON
 20907                                  
 20908                                  DVRDRAW:
 20909 00003253 06                      	PUSH	ES
 20910 00003254 1F                      	POP	DS			; Xaddr to DS:DI
 20911                                  
 20912                                  	; 04/05/2019 - Retro DOS v4.0
 20913                                  
 20914                                  	; MSDOS 6.0
 20915                                  ;SR;
 20916                                  ;Check for win386 presence -- if present, do polled read of characters
 20917                                  
 20918 00003255 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20919 0000325B 7408                    	jz	short ReadRawRetry	;not present
 20920 0000325D F6C301                  	test	bl,devid_device_con_in	;is it console device
 20921 00003260 7403                    	jz	short ReadRawRetry	;no, do normal read
 20922 00003262 E9A800                  	jmp	do_polling		;yes, do win386 polling loop
 20923                                  
 20924                                  ReadRawRetry:
 20925                                  
 20926                                  ; 07/02/2024
 20927                                  %if 0
 20928                                  	MOV	BX,DI			; DS:BX transfer addr
 20929                                  	; 06/02/2024 ; *
 20930                                  	;XOR	AX,AX			; Media Byte, unit = 0
 20931                                  	;;MOV	DX,AX			; Start at 0
 20932                                  	;; 06/02/2024
 20933                                  	;cwd
 20934                                  	;call	SETREAD
 20935                                  	; 06/02/2024 ; *
 20936                                  	call	SETREAD_X
 20937                                  %else
 20938 00003265 E81813                  	call	SETREAD_XJ
 20939                                  %endif
 20940                                  
 20941 00003268 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20942                                  
 20943                                  ;hkn; SS override
 20944 00003269 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20945 0000326E E89912                  	call	DEVIOCALL
 20946 00003271 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20947 00003273 B486                    	MOV	AH,86H			; Read error
 20948                                  
 20949                                  ;hkn; SS override
 20950 00003275 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20951                                  	; MSDOS 3.3
 20952                                  	;test	di,8000h
 20953                                  	;jz	short CRDROK
 20954                                  	; MSDOS 6.0
 20955 0000327A 09FF                    	or	di,di
 20956 0000327C 7920                    	jns	short CRDROK		; no errors
 20957                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20958 0000327E E8C91E                  	call	CHARHARD
 20959                                  
 20960                                  ; 06/02/2024 - Retrro DOS v5.0
 20961                                  %if 0
 20962                                  	MOV	DI,DX			; DS:DI is Xaddr
 20963                                  	; 04/05/2019
 20964                                  	; MSDOS 6.0
 20965                                  	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20966                                  	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20967                                  %else
 20968 00003281 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 20969 00003286 29F9                    	sub	cx,di			; update transfer count
 20970 00003288 01D7                    	add	di,dx			; update pointer
 20971                                  %endif
 20972                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20973 0000328A 08C0                    	OR	AL,AL
 20974 0000328C 7410                    	JZ	short CRDROK		; Ignore
 20975 0000328E 3C03                    	CMP	AL,3
 20976 00003290 7403                    	JZ	short CRDFERR 		; fail.
 20977 00003292 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20978 00003293 EBD0                    	JMP	short ReadRawRetry	; Retry
 20979                                  
 20980                                  ; We have encountered a device-driver error. We have informed the user of it
 20981                                  ; and he has said for us to fail the system call.
 20982                                  
 20983                                  CRDFERR:
 20984 00003295 5F                      	POP	DI			; Clean stack
 20985                                  DEVIOFERR:
 20986                                  
 20987                                  ;hkn; SS override
 20988 00003296 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20989 0000329B E93105                  	jmp	SET_ACC_ERR_DS
 20990                                  
 20991                                  CRDROK:
 20992 0000329E 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20993 0000329F 89D7                    	MOV	DI,DX
 20994                                  
 20995                                  ;hkn; SS override
 20996 000032A1 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20997                                  	;JMP	SHORT ENDRDDEVJ3
 20998                                  	; 16/12/2022
 20999 000032A6 EB63                    	jmp	short ENDRDDEVJ2
 21000                                  
 21001                                  ; We are going to do a cooked read on some character device. There is a
 21002                                  ; problem here, what does the data look like? Is it a terminal device, line
 21003                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 21004                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 21005                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 21006                                  ; included in data). this "simulates" the way con works in cooked mode
 21007                                  ; reading one line at a time. With file data, however, the lines will look
 21008                                  ; like, LF line CR. This is a little weird.
 21009                                  
 21010                                  NOTRDCON:
 21011                                  	;MOV	AX,ES
 21012                                  	;MOV	DS,AX
 21013                                  	; 07/02/2024
 21014 000032A8 06                      	push	es
 21015 000032A9 1F                      	pop	ds
 21016                                  
 21017                                  ; 07/02/2024
 21018                                  %if 0
 21019                                  	MOV	BX,DI
 21020                                  	; 06/02/2024 ; *
 21021                                  	;;XOR	DX,DX
 21022                                  	;;MOV	AX,DX
 21023                                  	;; 06/02/2024
 21024                                  	;xor	ax,ax
 21025                                  	;cwd
 21026                                  	PUSH	CX
 21027                                  	MOV	CX,1
 21028                                  	;call	SETREAD
 21029                                  	; 06/02/2024 ; *
 21030                                  	call	SETREAD_X
 21031                                  	POP	CX
 21032                                  %else
 21033 000032AA 51                      	push	cx
 21034 000032AB B90100                  	mov	cx,1
 21035 000032AE E8CF12                  	call	SETREAD_XJ
 21036 000032B1 59                      	pop	cx
 21037                                  %endif
 21038                                  
 21039                                  ;hkn; SS override
 21040 000032B2 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21041                                  	;lds	si,[si+7]
 21042 000032B7 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21043                                  DVRDLP:
 21044 000032BA E8721C                  	call	DSKSTATCHK
 21045 000032BD E84D12                  	call	DEVIOCALL2
 21046 000032C0 57                      	PUSH	DI			; Save "count" done
 21047 000032C1 B486                    	MOV	AH,86H
 21048                                  
 21049                                  ;hkn; SS override
 21050 000032C3 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21051                                  	
 21052                                  	; MSDOS 3.3
 21053                                  	;test	di,8000h
 21054                                  	;jz	short CRDOK
 21055                                  	; MSDOS 6.0
 21056 000032C8 09FF                    	or	di,di
 21057 000032CA 7917                    	jns	short CRDOK
 21058                                  	
 21059 000032CC E87B1E                  	call	CHARHARD
 21060 000032CF 5F                      	POP	DI
 21061                                  
 21062                                  ;hkn; SS override
 21063 000032D0 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21064 000032D7 3C01                    	CMP	AL,1
 21065 000032D9 74DF                    	JZ	short DVRDLP		; Retry
 21066 000032DB 3C03                    	CMP	AL,3
 21067 000032DD 74B7                    	JZ	short DEVIOFERR		; FAIL
 21068 000032DF 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 21069 000032E1 EB12                    	JMP	SHORT DVRDIGN
 21070                                  
 21071                                  CRDOK:
 21072 000032E3 5F                      	POP	DI
 21073                                  
 21074                                  ;hkn; SS override
 21075 000032E4 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 21076                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21077 000032EA 751F                    	JNZ	short ENDRDDEVJ2
 21078                                  	; 16/12/2022
 21079                                  	;jnz	short ENDRDDEV ; 24/07/2019
 21080                                  
 21081 000032EC 1E                      	PUSH	DS
 21082                                  
 21083                                  ;hkn; SS override
 21084 000032ED 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21085 000032F2 8A05                    	MOV	AL,[DI]			; Get the character we just read
 21086 000032F4 1F                      	POP	DS
 21087                                  DVRDIGN:
 21088                                  
 21089                                  ;hkn; SS override
 21090 000032F5 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 21091 000032FA 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21092 00003301 47                      	INC	DI			; Next character
 21093 00003302 3C1A                    	CMP	AL,1Ah			; ^Z?
 21094                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 21095 00003304 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 21096                                  	; 16/12/2022
 21097                                  	;jz	short ENDRDDEV ; 24/07/2019	
 21098 00003306 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 21099 00003308 E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 21100 0000330A 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 21101                                  					;  AX=FFFF which is not likely
 21102                                  ENDRDDEVJ2:
 21103                                  	; 16/12/2022
 21104                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 21105                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21106 0000330B EB78                    	jmp	ENDRDDEV
 21107                                  
 21108                                  	; 04/05/2019
 21109                                  
 21110                                  	; MSDOS 6.0
 21111                                  ;SR;
 21112                                  ;Polling code for raw read on CON when WIN386 is present
 21113                                  ;
 21114                                  ;At this point -- ds:di is transfer address
 21115                                  ;		  cx is count
 21116                                  
 21117                                  do_polling:
 21118                                  
 21119                                  ; 07/02/2024
 21120                                  %if 0
 21121                                  	mov	bx,di			;ds:bx is Xfer address
 21122                                  	; 06/02/2024 ; *
 21123                                  	;xor	ax,ax
 21124                                  	;;mov	dx,ax
 21125                                  	;; 06/02/2024
 21126                                  	;cwd
 21127                                  	;call	SETREAD			;prepare device packet
 21128                                  	; 06/02/2024 ; *
 21129                                  	call	SETREAD_X
 21130                                  %else
 21131 0000330D E87012                  	call	SETREAD_XJ
 21132                                  %endif
 21133                                  
 21134                                  do_io:
 21135                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 21136                                  
 21137 00003310 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 21138 00003315 1E                      	push	ds
 21139 00003316 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 21140 0000331B E8EC11                  	call	DEVIOCALL		;call device driver
 21141 0000331E 1F                      	pop	ds
 21142                                  	
 21143                                  	;test	word [es:bx+3],8000h
 21144                                  	; 16/12/2022
 21145                                  	;test	byte [es:bx+4],80h
 21146 0000331F 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 21147                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 21148 00003324 7413                    	jz	short check_busy	;no
 21149                                  
 21150 00003326 1E                      	push	ds
 21151 00003327 89FA                    	mov	dx,di
 21152                                  
 21153                                  invoke_charhard:	; 07/02/2024
 21154                                  	;invoke charhard		;invoke int 24h handler
 21155 00003329 E81E1E                  	call	CHARHARD
 21156 0000332C 89D7                    	mov	di,dx
 21157 0000332E 08C0                    	or	al,al
 21158 00003330 744D                    	jz	short pop_done_read	;ignore by user, assume read done
 21159 00003332 3C03                    	cmp	al,3
 21160 00003334 7438                    	jz	short devrderr		;user asked to fail
 21161 00003336 1F                      	pop	ds
 21162 00003337 EBD7                    	jmp	short do_io		;user asked to retry
 21163                                  
 21164                                  check_busy:
 21165                                  	;test	word [es:bx+3],200h
 21166                                  	; 16/12/2022
 21167 00003339 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 21168                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 21169 0000333E 7537                    	jnz	short no_char		;yes, no character available
 21170                                  
 21171                                  ;Character is available. Read in 1 character at a time until all characters
 21172                                  ;are read in or no character is available
 21173                                  
 21174 00003340 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 21175 00003345 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 21176 0000334B 1E                      	push	ds
 21177 0000334C 36C536[9E05]            	lds	si,[ss:THISSFT]
 21178 00003351 E8B611                  	call	DEVIOCALL
 21179                                  
 21180 00003354 89FA                    	mov	dx,di
 21181 00003356 B486                    	mov	ah,86h
 21182                                  	;mov	di,[es:bx+3]
 21183 00003358 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 21184 0000335C F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 21185                                  	;jz	short next_char		;no,read next character
 21186                                  	; 07/02/2024
 21187 00003360 75C7                    	jnz	short invoke_charhard
 21188                                  
 21189                                  ; 07/02/2024
 21190                                  %if 0
 21191                                  	;invoke	charhard		;invoke int 24h handler
 21192                                  	call	CHARHARD
 21193                                  	mov	di,dx			;restore di
 21194                                  	or	al,al			;
 21195                                  	jz	short pop_done_read	;ignore by user,assume read is done
 21196                                  	cmp	al,3
 21197                                  	jz	short devrderr		;user issued a 'fail',indicate error
 21198                                  	pop	ds
 21199                                  	jmp	short do_io		;user issued a retry
 21200                                  %endif
 21201                                  
 21202                                  next_char:
 21203 00003362 1F                      	pop	ds
 21204 00003363 89D7                    	mov	di,dx
 21205 00003365 49                      	dec	cx			;decrement count
 21206                                  	;jcxz	done_read		;all characters read in
 21207                                  	; 07/02/2024
 21208 00003366 7418                    	jz	short done_read
 21209 00003368 26FF470E                	inc	word [es:bx+14]		;update transfer address
 21210 0000336C EBA2                    	jmp	short do_io		;read next character in
 21211                                  
 21212                                  devrderr:
 21213 0000336E 5F                      	pop	di			;discard segment address
 21214 0000336F 36C43E[9E05]            	les	di,[ss:THISSFT]
 21215                                  	;transfer SET_ACC_ERR_DS	;indicate error
 21216 00003374 E95804                  	jmp     SET_ACC_ERR_DS
 21217                                  
 21218                                  no_char:
 21219                                  ;Since no character is available, we let win386 switch the VM out
 21220                                  
 21221 00003377 50                      	push	ax
 21222 00003378 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 21223 0000337A CD2A                    	int	2Ah			;indicate idle to WIN386
 21224                                  
 21225                                  ;When control returns from WIN386, we continue the raw read
 21226                                  
 21227 0000337C 58                      	pop	ax
 21228 0000337D EB91                    	jmp	short do_io	; 27/06/2024
 21229                                  
 21230                                  pop_done_read:
 21231 0000337F 1F                      	pop	ds
 21232                                  done_read:
 21233 00003380 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 21234                                  
 21235                                  	; 16/12/2022
 21236                                  
 21237                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21238                                  	;jmp	ENDRDDEV ; 04/05/2019
 21239                                  
 21240                                  	; 04/05/2019 - Retro DOS v4.0
 21241                                  ENDRDDEV:
 21242 00003385 16                      	push	ss
 21243 00003386 1F                      	pop	ds
 21244 00003387 EB1F                    	jmp	short endrddev1
 21245                                  
 21246                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21247                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 21248                                  
 21249                                  TRANBUF:
 21250 00003389 AC                      	LODSB
 21251 0000338A AA                      	STOSB
 21252 0000338B 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 21253 0000338D 7503                    	JNZ	short NORMCH
 21254 0000338F C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 21255                                  NORMCH:
 21256 00003392 3C0A                    	CMP	AL,c_LF ; 0Ah
 21257 00003394 E0F3                    	LOOPNZ	TRANBUF
 21258 00003396 7507                    	JNZ	short ENDRDCON
 21259 00003398 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 21260 0000339A E89AE2                  	call	OUTT		; Transmit linefeed
 21261 0000339D 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 21262                                  ENDRDCON:
 21263                                  ;hkn; SS is DOSDATA
 21264 0000339F 16                      	push	ss
 21265 000033A0 1F                      	pop	ds
 21266 000033A1 E834FE                  	CALL	SWAPBACK
 21267 000033A4 8936[2200]              	MOV	[CONTPOS],SI
 21268                                  
 21269                                  	; 16/12/2022
 21270                                  ;ENDRDDEV:
 21271                                  ;;hkn; SS is DOSDATA
 21272                                  ;	push	ss
 21273                                  ;	pop	ds
 21274                                  endrddev1:	; 04/05/2019
 21275 000033A8 893E[B805]              	MOV	[NEXTADD],DI
 21276 000033AC 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21277 000033AE C43E[9E05]              	LES	DI,[THISSFT]
 21278                                  	;and	byte [es:di+5],0BFh
 21279 000033B2 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21280                                  				; Mark as no more data available
 21281                                  SETSFTC:
 21282                                  	; 31/07/2019
 21283                                  	;call	SETSFT
 21284                                  	;retn
 21285 000033B7 E9A904                  	jmp	SETSFT
 21286                                  
 21287                                  ; 16/12/2022
 21288                                  %if 0
 21289                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21290                                  ENDRDDEV:
 21291                                  ;hkn; SS is DOSDATA
 21292                                  	push	ss
 21293                                  	pop	ds
 21294                                  	MOV	[NEXTADD],DI
 21295                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 21296                                  	LES	DI,[THISSFT]
 21297                                  	;and	byte [es:di+5],0BFh
 21298                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF
 21299                                  				; Mark as no more data available
 21300                                  SETSFTC:
 21301                                  	;call	SETSFT
 21302                                  	;retn
 21303                                  	jmp	SETSFT	
 21304                                  %endif
 21305                                  
 21306                                  READCON:
 21307 000033BA E821FE                  	CALL	SWAPCON
 21308 000033BD 8B36[2200]              	MOV	SI,[CONTPOS]
 21309 000033C1 09F6                    	OR	SI,SI
 21310 000033C3 75C4                    	JNZ	short TRANBUF
 21311 000033C5 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 21312 000033CA 7406                    	JZ	short GETBUF
 21313 000033CC C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 21314                                  GETBUF:
 21315 000033D2 51                      	PUSH	CX
 21316 000033D3 06                      	PUSH	ES
 21317 000033D4 57                      	PUSH	DI
 21318                                  
 21319                                  ;hkn; CONBUF is in DOSDATA
 21320 000033D5 BA[7B02]                	MOV	DX,CONBUF
 21321                                  
 21322 000033D8 E8DADF                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 21323 000033DB 5F                      	POP	DI
 21324 000033DC 07                      	POP	ES
 21325 000033DD 59                      	POP	CX
 21326                                  
 21327                                  ;hkn; CONBUF is in DOSDATA
 21328 000033DE BE[7D02]                	MOV	SI,CONBUF+2
 21329                                  
 21330 000033E1 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 21331 000033E4 75A3                    	JNZ	short TRANBUF
 21332 000033E6 B01A                    	MOV	AL,1AH
 21333 000033E8 AA                      	STOSB
 21334 000033E9 4F                      	DEC	DI
 21335 000033EA B00A                    	MOV	AL,c_LF
 21336 000033EC E848E2                  	call	OUTT		; Send linefeed
 21337 000033EF 31F6                    	XOR	SI,SI
 21338 000033F1 EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 21339                                  
 21340                                  ; 24/07/2018 - Retro DOS v3.0
 21341                                  
 21342                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 21343                                  ;---------------------------------------------------------------------------
 21344                                  ;
 21345                                  ; Procedure Name : DOS_WRITE
 21346                                  ;
 21347                                  ; Inputs:
 21348                                  ;	ThisSFT set to the SFT for the file being used
 21349                                  ;	[DMAADD] contains transfer address
 21350                                  ;	CX = No. of bytes to write
 21351                                  ; Function:
 21352                                  ;	Perform write operation
 21353                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 21354                                  ;		to current sf_position
 21355                                  ; Outputs:
 21356                                  ;    Carry clear
 21357                                  ;	SFT Position and cluster pointers updated
 21358                                  ;	CX = No. of bytes written
 21359                                  ;	ES:DI point to SFT
 21360                                  ;    Carry set
 21361                                  ;	AX is error code
 21362                                  ;	CX = 0
 21363                                  ;	ES:DI point to SFT
 21364                                  ; DS preserved, all other registers destroyed
 21365                                  ;---------------------------------------------------------------------------
 21366                                  
 21367                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 21368                                  ;hkn; point to DOSDATA.
 21369                                  
 21370                                  ; 04/05/2019 - Retro DOS v4.0
 21371                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 21372                                  
 21373                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21374                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 21375                                  
 21376                                  DOS_WRITE:
 21377 000033F3 C43E[9E05]              	LES	DI,[THISSFT]
 21378                                  	;mov	al,[ES:DI+2]
 21379 000033F7 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 21380                                  	;and	al,0Fh
 21381 000033FB 240F                    	AND	AL,access_mask
 21382                                  	;cmp	al,0
 21383 000033FD 3C00                    	CMP	AL,open_for_read
 21384 000033FF 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 21385                                  BadMode:
 21386 00003401 E9CD03                  	jmp	SET_ACC_ERR
 21387                                  
 21388                                  ; NOTE: The following check for writting to a Read Only File is performed
 21389                                  ;	    ONLY on FCBs!!!!
 21390                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 21391                                  ;	    of a read only file which can then be written to.
 21392                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 21393                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 21394                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 21395                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 21396                                  ;	    to a read-only file.
 21397                                  
 21398                                  Check_FCB_RO:
 21399                                  	;;test	word [es:di+2],8000h
 21400                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21401                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 21402                                  	
 21403                                  	;test	byte [es:di+3],80h
 21404 00003404 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21405 00003409 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 21406                                  
 21407                                  	;test	byte [es:di+4],1
 21408 0000340B 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 21409 00003410 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 21410                                  WRITE_NO_MODE:
 21411 00003412 E8A402                  	call	SETUP
 21412 00003415 E82FDE                  	call	IsSFTNet
 21413 00003418 7406                    	JZ	short LOCAL_WRITE
 21414                                  
 21415                                  ;IF NOT Installed
 21416                                  ;	transfer NET_WRITE
 21417                                  ;ELSE
 21418                                  	;mov	ax,1109h
 21419 0000341A B80911                  	MOV	AX,(MultNET<<8)|9
 21420 0000341D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 21421                                  			; ES:DI -> SFT
 21422                                  			; SFT DPB field -> DPB of drive containing file
 21423                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 21424                                  			; Return: CF set on error, CX = bytes written
 21425 0000341F C3                      	retn
 21426                                  ;ENDIF
 21427                                  
 21428                                  LOCAL_WRITE:
 21429                                  	;;test	word [es:di+5],80h
 21430                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 21431                                  	;jnz	short WRTDEV
 21432                                  
 21433                                  	;test	byte [es:di+5],80h
 21434 00003420 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 21435 00003425 756D                    	jnz	short WRTDEV
 21436                                  
 21437                                  	;mov	byte [EXTERR_LOCUS],2
 21438 00003427 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 21439 0000342C E8B8DE                  	call	ECritDisk
 21440                                  
 21441 0000342F E8E104                  	call	DISKWRITE
 21442                                  
 21443                                  	; 04/05/2019 - Retro DOS v4.0
 21444                                  
 21445                                  	; MSDOS 6.0
 21446                                  ; Extended Open
 21447 00003432 7210                    	JC	short nocommit
 21448                                  	
 21449 00003434 C43E[9E05]              	LES	DI,[THISSFT]
 21450                                  	
 21451                                  	;;test	word [ES:DI+2],4000h
 21452                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 21453                                  	;JZ	short nocommit
 21454                                  	
 21455                                  	;test	byte [ES:DI+3],40h
 21456 00003438 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 21457 0000343D 7405                    	JZ	short nocommit
 21458                                  	
 21459 0000343F 51                      	PUSH	CX
 21460 00003440 E86BFB                  	call	DOS_COMMIT
 21461 00003443 59                      	POP	CX
 21462                                  nocommit:
 21463                                  ; Extended Open
 21464                                  	;call	LCritDisk
 21465                                  	;retn
 21466                                  	; 18/12/2022
 21467 00003444 E9BBDE                  	jmp	LCritDisk
 21468                                  
 21469                                  DVWRTRAW:
 21470 00003447 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 21471 00003449 E87511                  	call	SETWRITE
 21472 0000344C 1E                      	PUSH	DS			; Save seg of transfer
 21473                                  
 21474                                  ;hkn; SS override
 21475 0000344D 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21476 00003452 E8B510                  	call	DEVIOCALL		; DS:SI -> DEVICE
 21477                                  
 21478 00003455 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 21479 00003457 B487                    	MOV	AH,87H
 21480                                  
 21481                                  ;hkn; SS override
 21482 00003459 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21483                                  
 21484                                  	; MSDOS 3.3
 21485                                  	;test	di,8000h
 21486                                  	;jz	short CWRTROK
 21487                                  
 21488                                  	; MSDOS 6.0
 21489 0000345E 09FF                    	or	di,di
 21490 00003460 791F                    	jns	short CWRTROK
 21491                                  	
 21492                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21493 00003462 E8E51C                  	call	CHARHARD
 21494                                  
 21495                                  	; 04/05/2019  - Retro DOS v4.0
 21496                                  
 21497                                  	; MSDOS 6.0
 21498                                  	;sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 21499                                  	; 08/02/2024
 21500 00003465 368B3E[6C03]            	mov	di,[ss:CALLSCNT]
 21501 0000346A 29F9                    	sub	cx,di
 21502 0000346C 89D3                    	mov	bx,dx			; number of chars xferred	M065
 21503                                  	;add	bx,[ss:CALLSCNT]	;				M065
 21504 0000346E 01FB                    	add	bx,di
 21505 00003470 89DF                    	mov	di,bx			;				M065
 21506                                  	
 21507                                  	; MSDOS 3.3
 21508                                  	;MOV	BX,DX			; Recall transfer addr		M065
 21509                                  
 21510                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21511 00003472 08C0                    	OR	AL,AL
 21512 00003474 740B                    	JZ	short CWRTROK 		; Ignore
 21513 00003476 3C03                    	CMP	AL,3
 21514 00003478 7403                    	JZ	short CWRFERR
 21515 0000347A 1F                      	POP	DS			; Recover saved seg of transfer
 21516 0000347B EBCA                    	JMP	short DVWRTRAW		; Try again
 21517                                  CWRFERR:
 21518 0000347D 58                      	POP	AX			; Chuck saved seg of transfer
 21519 0000347E E914FE                  	JMP	CRDFERR 		; Will pop one more stack element
 21520                                  CWRTROK:
 21521 00003481 58                      	POP	AX			; Chuck saved seg of transfer
 21522 00003482 1F                      	POP	DS
 21523 00003483 A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 21524                                  ENDWRDEV:
 21525 00003486 C43E[9E05]              	LES	DI,[THISSFT]
 21526 0000348A 89C1                    	MOV	CX,AX
 21527                                  	;call	ADDREC
 21528                                  	;retn
 21529                                  	; 16/12/2022
 21530                                  	; 10/06/2019
 21531 0000348C E9F503                  	jmp	ADDREC
 21532                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21533                                  	;call	ADDREC
 21534                                  	;retn
 21535                                  	
 21536                                  WRTNUL:
 21537 0000348F 89CA                    	MOV	DX,CX			; Entire transfer done
 21538                                  WRTCOOKJ:
 21539 00003491 E98D00                  	JMP	WRTCOOKDONE
 21540                                  WRTDEV:
 21541                                  	;mov	byte [EXTERR_LOCUS],4
 21542 00003494 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 21543                                  	;or	byte [es:di+5],40h
 21544 00003499 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 21545                                  					; Reset EOF for input
 21546                                  	;mov	bl,[es:di+5]
 21547 0000349E 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 21548 000034A2 31C0                    	XOR	AX,AX
 21549 000034A4 E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 21550 000034A6 1E                      	PUSH	DS
 21551 000034A7 88D8                    	MOV	AL,BL
 21552 000034A9 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 21553 000034AD 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 21554 000034AF 31D2                    	XOR	DX,DX			; Set starting point
 21555                                  	;test	al,20h
 21556 000034B1 A820                    	test	AL,devid_device_raw	; Raw?
 21557                                  	;JZ	short TEST_DEV_CON
 21558                                  	;JMP	DVWRTRAW
 21559                                  	; 16/12/2022
 21560 000034B3 7592                    	jnz	short DVWRTRAW
 21561                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21562                                  	;JZ	short TEST_DEV_CON
 21563                                  	;JMP	short DVWRTRAW
 21564                                  
 21565                                  TEST_DEV_CON:
 21566                                  	;test	al,2
 21567 000034B5 A802                    	test	AL,devid_device_con_out ; Console output device?
 21568 000034B7 756E                    	jnz	short WRITECON
 21569                                  	;test	al,4
 21570 000034B9 A804                    	test	AL,devid_device_null
 21571 000034BB 75D2                    	JNZ	short WRTNUL
 21572 000034BD 89D0                    	MOV	AX,DX
 21573 000034BF 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 21574 000034C2 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 21575 000034C4 51                      	PUSH	CX
 21576 000034C5 B90100                  	MOV	CX,1
 21577 000034C8 E8F610                  	call	SETWRITE
 21578 000034CB 59                      	POP	CX
 21579                                  
 21580                                  ;hkn; SS override
 21581 000034CC 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 21582                                  ;
 21583                                  ;SR; Removed X25 support from here
 21584                                  ;
 21585                                  	;lds	si,[si+7]
 21586 000034D1 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 21587                                  DVWRTLP:
 21588 000034D4 E8581A                  	call	DSKSTATCHK
 21589 000034D7 E83310                  	call	DEVIOCALL2
 21590 000034DA 57                      	PUSH	DI
 21591 000034DB B487                    	MOV	AH,87H
 21592                                  
 21593                                  ;hkn; SS override
 21594 000034DD 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 21595                                  	
 21596                                  	; MSDOS 3.3
 21597                                  	;test	di,8000h
 21598                                  	;jz	short CWROK
 21599                                  
 21600                                  	; MSDOS 6.0
 21601 000034E2 09FF                    	or	di,di
 21602 000034E4 7916                    	jns	short CWROK
 21603                                  	
 21604                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21605 000034E6 E8611C                  	call	CHARHARD
 21606 000034E9 5F                      	POP	DI
 21607                                  
 21608                                  ;hkn; SS override
 21609 000034EA 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 21610 000034F1 3C01                    	CMP	AL,1
 21611 000034F3 74DF                    	JZ	short DVWRTLP 	; Retry
 21612 000034F5 08C0                    	OR	AL,AL
 21613 000034F7 740C                    	JZ	short DVWRTIGN	; Ignore
 21614                                  	; 10/08/2018
 21615 000034F9 E999FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 21616                                  CWROK:
 21617 000034FC 5F                      	POP	DI
 21618                                  
 21619                                  ;hkn; SS override
 21620 000034FD 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 21621 00003503 741C                    	JZ	short WRTCOOKDONE
 21622                                  DVWRTIGN:
 21623 00003505 42                      	INC	DX
 21624                                  
 21625                                  ;hkn; SS override for CALLXAD
 21626 00003506 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 21627 0000350B 47                      	INC	DI
 21628 0000350C 1E                      	PUSH	DS
 21629 0000350D 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 21630 00003512 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 21631 00003515 1F                      	POP	DS
 21632 00003516 7409                    	JZ	short WRTCOOKDONE
 21633                                  
 21634                                  ;hkn; SS override
 21635 00003518 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 21636 0000351F E2B3                    	LOOP	DVWRTLP
 21637                                  WRTCOOKDONE:
 21638 00003521 89D0                    	MOV	AX,DX
 21639 00003523 1F                      	POP	DS
 21640 00003524 E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 21641                                  
 21642                                  WRITECON:
 21643 00003527 1E                      	PUSH	DS
 21644                                  
 21645                                  ;hkn; SS is DOSDATA
 21646 00003528 16                      	push	ss
 21647 00003529 1F                      	pop	ds
 21648 0000352A E8B1FC                  	CALL	SWAPCON
 21649 0000352D 1F                      	POP	DS
 21650 0000352E 89DE                    	MOV	SI,BX
 21651 00003530 51                      	PUSH	CX
 21652                                  WRCONLP:
 21653 00003531 AC                      	LODSB
 21654 00003532 3C1A                    	CMP	AL,1Ah		; ^Z?
 21655 00003534 7405                    	JZ	short CONEOF
 21656 00003536 E8FEE0                  	call	OUTT
 21657 00003539 E2F6                    	LOOP	WRCONLP
 21658                                  CONEOF:
 21659 0000353B 58                      	POP	AX			; Count
 21660 0000353C 1F                      	POP	DS
 21661 0000353D 29C8                    	SUB	AX,CX			; Amount actually written
 21662 0000353F E896FC                  	CALL	SWAPBACK
 21663 00003542 E941FF                  	JMP	ENDWRDEV
 21664                                  
 21665                                  ;---------------------------------------------------------------------------
 21666                                  ;
 21667                                  ; Procedure Name : get_io_sft
 21668                                  ;
 21669                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 21670                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 21671                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 21672                                  ;
 21673                                  ;---------------------------------------------------------------------------
 21674                                  
 21675                                  ; 04/05/2019 - Retro DOS v4.0
 21676                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 21677                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21678                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 21679                                  
 21680                                  GET_IO_SFT:
 21681                                  	;test	byte [SS:CONSWAP],0FFh
 21682 00003545 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 21683 0000354B 7512                    	JNZ	short GetRedir
 21684                                  GetNormal:
 21685 0000354D 16                      	push	ss
 21686 0000354E 1F                      	pop	ds
 21687 0000354F 06                      	PUSH	ES
 21688 00003550 57                      	PUSH	DI
 21689 00003551 E8752F                  	call	SFFromHandle
 21690 00003554 7206                    	JC	short RET44P
 21691 00003556 8CC6                    	MOV	SI,ES
 21692 00003558 8EDE                    	MOV	DS,SI
 21693 0000355A 89FE                    	MOV	SI,DI
 21694                                  RET44P:
 21695 0000355C 5F                      	POP	DI
 21696 0000355D 07                      	POP	ES
 21697 0000355E C3                      	retn
 21698                                  GetRedir:
 21699 0000355F 83FB01                  	CMP	BX,1
 21700 00003562 77E9                    	JA	short GetNormal
 21701 00003564 36C536[E605]            	LDS	SI,[SS:CONSFT]
 21702 00003569 F8                      	CLC
 21703                                  get_io_sft_retn:
 21704 0000356A C3                      	retn
 21705                                  
 21706                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 21707                                  ;---------------------------------------------------------------------------
 21708                                  ;
 21709                                  ; Procedure Name : DIRREAD
 21710                                  ;
 21711                                  ; Inputs:
 21712                                  ;	AX = Directory block number (relative to first block of directory)
 21713                                  ;	ES:BP = Base of drive parameters
 21714                                  ;	[DIRSEC] = First sector of first cluster of directory
 21715                                  ;	[CLUSNUM] = Next cluster
 21716                                  ;	[CLUSFAC] = Sectors/Cluster
 21717                                  ; Function:
 21718                                  ;	Read the directory block into [CURBUF].
 21719                                  ; Outputs:
 21720                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 21721                                  ;	[SECCLUSPOS] Set
 21722                                  ;	ES:BP unchanged
 21723                                  ;	[CURBUF] Points to Buffer with dir sector
 21724                                  ;	Carry set if error (user said FAIL to I 24)
 21725                                  ; DS preserved, all other registers destroyed.
 21726                                  ;---------------------------------------------------------------------------
 21727                                  
 21728                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 21729                                  
 21730                                  DIRREAD:
 21731                                  
 21732                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 21733                                  ; the same as what is in the DPB! In the case of the root directory, we have
 21734                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 21735                                  ; by DIRStart = 0.
 21736                                  
 21737 0000356B 31D2                    	XOR	DX,DX
 21738                                  	;CMP	word [DIRSTART],0
 21739                                  	; 21/09/2023
 21740 0000356D 3916[C205]              	cmp	[DIRSTART],dx ; 0
 21741 00003571 7503                    	jnz	short SubDir
 21742 00003573 92                      	XCHG	AX,DX
 21743 00003574 EB0C                    	JMP	short DoRead
 21744                                  
 21745                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 21746                                  
 21747                                  SubDir:
 21748 00003576 88C2                    	MOV	DL,AL
 21749                                  	;and	dl,[es:bp+4]
 21750 00003578 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 21751                                  
 21752                                  ;	(DX) = sector-in-cluster
 21753                                  
 21754                                  	;mov	cl,[es:bp+5]
 21755 0000357C 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21756 00003580 D3E8                    	SHR	AX,CL
 21757                                  
 21758                                  ;	(DX) = position in cluster
 21759                                  ;	(AX) = number of clusters to skip
 21760                                  
 21761                                  DoRead:
 21762 00003582 8816[7305]              	MOV	[SECCLUSPOS],DL
 21763 00003586 89C1                    	MOV	CX,AX
 21764 00003588 88D4                    	MOV	AH,DL
 21765                                  
 21766                                  ;	(CX) = number of clusters to skip.
 21767                                  ;	(AH) = remainder
 21768                                  
 21769                                  	; 04/05/2019 - Retro DOS v4.0
 21770                                  
 21771                                  	; MSDOS 6.0
 21772                                  	;MOV	DX,[DIRSEC+2]	     	  ;>32mb
 21773                                  	;MOV	[HIGH_SECTOR],DX	  ;>32mb
 21774                                  	;MOV	DX,[DIRSEC]
 21775                                  	;ADD	DL,AH
 21776                                  	;ADC	DH,0
 21777                                  	;ADC	word [HIGH_SECTOR],0	  ;>32mb
 21778                                  	; 21/09/2023
 21779 0000358A 31DB                    	xor	bx,bx ; 0
 21780 0000358C 8B16[BE05]              	mov	dx,[DIRSEC]
 21781 00003590 00E2                    	add	dl,ah
 21782 00003592 10DE                    	adc	dh,bl ; 0
 21783 00003594 131E[C005]              	adc	bx,[DIRSEC+2]
 21784 00003598 891E[0706]              	mov	[HIGH_SECTOR],bx
 21785                                  
 21786 0000359C 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21787 000035A0 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21788 000035A4 E319                    	JCXZ	FIRSTCLUSTER
 21789                                  SKPCLLP:
 21790 000035A6 E8081E                  	call	UNPACK
 21791 000035A9 72BF                    	jc	short get_io_sft_retn
 21792 000035AB 87DF                    	XCHG	BX,DI
 21793 000035AD E8EA1D                  	call	IsEOF			; test for eof based on fat size
 21794 000035B0 7302                    	JAE	short HAVESKIPPED
 21795 000035B2 E2F2                    	LOOP	SKPCLLP
 21796                                  HAVESKIPPED:
 21797 000035B4 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 21798 000035B8 89FA                    	MOV	DX,DI
 21799 000035BA 88E3                    	MOV	BL,AH
 21800 000035BC E8B216                  	call	FIGREC
 21801                                  
 21802                                  	;entry	FIRSTCLUSTER
 21803                                  
 21804                                  FIRSTCLUSTER:
 21805                                  	; 22/09/2023
 21806                                  	;;mov	byte [ALLOWED],18h
 21807                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 21808                                  	;XOR	AL,AL ; *	; Indicate pre-read
 21809                                  	;call	GETBUFFR
 21810 000035BF E8F321                  	call	GETBUFFER ; *	; pre-read
 21811 000035C2 72A6                    	jc	short get_io_sft_retn
 21812                                  
 21813                                  	;entry	SET_BUF_AS_DIR
 21814                                  
 21815                                  SET_BUF_AS_DIR:
 21816                                  
 21817                                  ;	Set the type of CURBUF to be a directory sector.
 21818                                  ;	Only flags are modified.
 21819                                  
 21820 000035C4 1E                      	PUSH	DS
 21821 000035C5 56                      	PUSH	SI
 21822 000035C6 C536[E205]              	LDS	SI,[CURBUF]
 21823                                  	;or	byte [si+5],4
 21824 000035CA 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21825 000035CE 5E                      	POP	SI
 21826 000035CF 1F                      	POP	DS
 21827                                  dirread_retn:
 21828 000035D0 C3                      	retn
 21829                                  
 21830                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21831                                  ;----------------------------------------------------------------------------
 21832                                  ;
 21833                                  ; Procedure Name : FATSECRD
 21834                                  ; Inputs:
 21835                                  ;	Same as DREAD
 21836                                  ;	DS:BX = Transfer address
 21837                                  ;	CX = Number of sectors
 21838                                  ;	DX = Absolute record number
 21839                                  ;	ES:BP = Base of drive parameters
 21840                                  ; Function:
 21841                                  ;	Calls BIOS to perform FAT read.
 21842                                  ; Outputs:
 21843                                  ;	Same as DREAD
 21844                                  ;---------------------------------------------------------------------------
 21845                                  
 21846                                  	; 04/05/2019 - Retro DOS v4.0
 21847                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21848                                  
 21849                                  FATSECRD:
 21850                                  ;hkn; SS override
 21851                                  	;mov	byte [ss:ALLOWED],18h
 21852 000035D1 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21853 000035D7 89CF                    	MOV	DI,CX
 21854                                  	;mov	cl,[es:bp+8]
 21855 000035D9 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21856                                  	; MSDOS 3.3
 21857                                  	;;mov	al,[es:bp+0Fh]
 21858                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE]
 21859                                  	;XOR	AH,AH
 21860                                  	; MSDOS 6.0
 21861                                  	;mov	ax,[es:bp+0Fh]
 21862 000035DD 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21863 000035E1 30ED                    	XOR	CH,CH
 21864 000035E3 52                      	PUSH	DX
 21865                                  NXTFAT:
 21866                                  	; MSDOS 6.0
 21867                                  ;hkn; SS override
 21868 000035E4 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21869 000035EB 51                      	PUSH	CX			;32mb
 21870 000035EC 50                      	PUSH	AX
 21871 000035ED 89F9                    	MOV	CX,DI
 21872 000035EF E85B00                  	call	DSKREAD
 21873 000035F2 58                      	POP	AX
 21874 000035F3 59                      	POP	CX
 21875 000035F4 7420                    	JZ	short RET41P		; Carry clear
 21876 000035F6 01C2                    	ADD	DX,AX
 21877 000035F8 E2EA                    	LOOP	NXTFAT
 21878 000035FA 5A                      	POP	DX
 21879 000035FB 89F9                    	MOV	CX,DI
 21880                                  
 21881                                  ; NOTE FALL THROUGH
 21882                                  
 21883                                  ;Break	<DREAD -- DO A DISK READ>
 21884                                  ;---------------------------------------------------------------------------
 21885                                  ;
 21886                                  ; Procedure Name : DREAD
 21887                                  ;
 21888                                  ; Inputs:
 21889                                  ;	DS:BX = Transfer address
 21890                                  ;	CX = Number of sectors
 21891                                  ;	DX = Absolute record number	      (LOW)
 21892                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21893                                  ;	ES:BP = Base of drive parameters
 21894                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21895                                  ; Function:
 21896                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21897                                  ;	errors, will call HARDERRRW for further action.
 21898                                  ; Outputs:
 21899                                  ;	Carry set if error (currently user FAILED to INT 24)
 21900                                  ; DS,ES:BP preserved. All other registers destroyed.
 21901                                  ;---------------------------------------------------------------------------
 21902                                  
 21903                                  	;entry	DREAD
 21904                                  DREAD:
 21905 000035FD E84D00                  	call	DSKREAD
 21906 00003600 74CE                    	jz	short dirread_retn	; Carry clear
 21907                                  ;hkn; SS override
 21908 00003602 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21909 00003608 E89500                  	call	HARDERRRW
 21910 0000360B 3C01                    	CMP	AL,1			; Check for retry
 21911 0000360D 74EE                    	JZ	short DREAD
 21912                                  
 21913                                  fail_ignore:	; 09/02/2024
 21914 0000360F 3C03                    	CMP	AL,3			; Check for FAIL
 21915 00003611 F8                      	CLC
 21916 00003612 7501                    	JNZ	short NO_CAR		; Ignore
 21917 00003614 F9                      	STC
 21918                                  NO_CAR:
 21919 00003615 C3                      	retn
 21920                                  RET41P: 
 21921 00003616 5A                      	POP	DX
 21922 00003617 C3                      	retn
 21923                                  
 21924                                  ; 24/07/2018 - Retro DOS v3.0
 21925                                  
 21926                                  ;Break	<CHECK_WRITE_LOCK>
 21927                                  ;---------------------------------------------------------------------------
 21928                                  ;
 21929                                  ; Procedure Name : CHECK_WRITE_LOCK
 21930                                  ;
 21931                                  ; Inputs:
 21932                                  ;	output of SETUP
 21933                                  ;	ES:DI -> SFT
 21934                                  ; Function:
 21935                                  ;	check write lock
 21936                                  ; Outputs:
 21937                                  ;	Carry set if error
 21938                                  ;	Carry clear if ok
 21939                                  ;
 21940                                  ;----------------------------------------------------------------------------
 21941                                  
 21942                                  	; 04/05/2019 - Retro DOS v4.0
 21943                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21944                                  
 21945                                  CHECK_WRITE_LOCK:
 21946                                  	; MSDOS 6.0
 21947                                  	;test	byte [es:di+4],8
 21948 00003618 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21949                                  	;JZ	short write_cont			     ;no
 21950                                  	;;call	SET_ACC_ERR_DS
 21951                                  	;;retn
 21952                                  	;;jnz	SET_ACC_ERR_DS
 21953                                  	; 19/08/2018
 21954                                  	;jz	short write_cont
 21955                                  	;jmp	SET_ACC_ERR_DS
 21956                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21957 0000361D 7403                    	JZ	short write_cont
 21958                                  	;call	SET_ACC_ERR_DS
 21959                                  	;retn
 21960                                  	; 16/12/2022
 21961 0000361F E9AD01                  	jmp	SET_ACC_ERR_DS
 21962                                  
 21963                                  write_cont:				;
 21964 00003622 51                      	PUSH	CX			;save reg
 21965 00003623 09C9                    	OR	CX,CX			;
 21966 00003625 7501                    	JNZ	short Not_Truncate	;
 21967 00003627 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21968                                  Not_Truncate:				;
 21969 00003628 B080                    	MOV	AL,80H			;check write access
 21970 0000362A E8CE3A                  	call	LOCK_CHECK		;check lock
 21971 0000362D 59                      	POP	CX			;restore reg
 21972 0000362E 7305                    	JNC	short WRITE_OK		;lock ok
 21973 00003630 E85A01                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21974 00003633 73ED                    	JNC	short write_cont	;retry
 21975                                  WRITE_OK:				;
 21976 00003635 C3                      	retn				;
 21977                                  
 21978                                  ;Break	<CHECK_READ_LOCK>
 21979                                  ;---------------------------------------------------------------------------
 21980                                  ;
 21981                                  ; Procedure Name : CHECK_READ_LOC
 21982                                  ;
 21983                                  ; Inputs:
 21984                                  ;	ES:DI -> SFT
 21985                                  ;	output of SETUP
 21986                                  ; Function:
 21987                                  ;	check read lock
 21988                                  ; Outputs:
 21989                                  ;	Carry set if error
 21990                                  ;	Carry clear if ok
 21991                                  ;----------------------------------------------------------------------------
 21992                                  
 21993                                  CHECK_READ_LOCK:
 21994                                  	; MSDOS 6.0
 21995                                  	;test	byte [es:di+4],8
 21996 00003636 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21997                                  	;JZ	short do_retry			   	     ; no
 21998                                  	;;call	SET_ACC_ERR
 21999                                  	;;retn
 22000                                  	;;jnz	SET_ACC_ERR
 22001                                  	; 16/12/2022
 22002                                  	; 28/07/2019
 22003 0000363B 7403                    	jz	short do_retry
 22004 0000363D E99101                  	jmp	SET_ACC_ERR
 22005                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22006                                  	;JZ	short do_retry
 22007                                  	;call	SET_ACC_ERR
 22008                                  	;retn
 22009                                  do_retry:				;
 22010 00003640 30C0                    	xor	al,al			;check read access
 22011 00003642 E8B63A                  	call	LOCK_CHECK		;check lock
 22012 00003645 7305                    	JNC	short READLOCK_OK 	;lock ok
 22013 00003647 E82301                  	call	READ_LOCK_VIOLATION	;issue I24
 22014 0000364A 73F4                    	JNC	short do_retry		;retry
 22015                                  READLOCK_OK:				;
 22016                                  dw_ret_label:	; 09/02/2024
 22017 0000364C C3                      	retn				;
 22018                                  
 22019                                  ;============================================================================
 22020                                  ; DISK2.ASM, MSDOS 6.0, 1991
 22021                                  ;============================================================================
 22022                                  ; 24/07/2018 - Retro DOS v3.0
 22023                                  ; 04/05/2019 - Retro DOS v4.0
 22024                                  
 22025                                  ;	TITLE	DISK2 - Disk utility routines
 22026                                  ;	NAME	Disk2
 22027                                  
 22028                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 22029                                  ;
 22030                                  ;	DskRead
 22031                                  ;	DWRITE
 22032                                  ;	DSKWRITE
 22033                                  ;	HarderrRW
 22034                                  ;	SETUP
 22035                                  ;	BREAKDOWN
 22036                                  ;	READ_LOCK_VIOLATION
 22037                                  ;	WRITE_LOCK_VIOLATION
 22038                                  ;	DISKREAD
 22039                                  ;	SET_ACC_ERR_DS
 22040                                  ;	SET_ACC_ERR
 22041                                  ;	SETSFT
 22042                                  ;	SETCLUS
 22043                                  ;	AddRec
 22044                                  ;
 22045                                  ;	Revision history:
 22046                                  ;
 22047                                  ;		AN000 version 4.00 Jan. 1988
 22048                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 22049                                  
 22050                                  ; 04/05/2019 - Retro DOS v4.0
 22051                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 22052                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22053                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 22054                                  
 22055                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 22056                                  ;---------------------------------------------------------------------------
 22057                                  ;
 22058                                  ; Procedure Name : DSKREAD
 22059                                  ;
 22060                                  ; Inputs:
 22061                                  ;	DS:BX = Transfer addr
 22062                                  ;	CX = Number of sectors
 22063                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22064                                  ;	DX = Absolute record number	       (LOW)
 22065                                  ;	ES:BP = Base of drive parameters
 22066                                  ; Function:
 22067                                  ;	Call BIOS to perform disk read
 22068                                  ; Outputs:
 22069                                  ;	DI = CX on entry
 22070                                  ;	CX = Number of sectors unsuccessfully transfered
 22071                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22072                                  ;	Zero set if OK (from BIOS) (carry clear)
 22073                                  ;	Zero clear if error (carry clear)
 22074                                  ; SI Destroyed, others preserved
 22075                                  ;---------------------------------------------------------------------------
 22076                                  
 22077                                  DSKREAD:
 22078 0000364D 51                      	PUSH	CX
 22079                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22080 0000364E 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22081                                  	;mov	al,[es:bp+1]
 22082 00003652 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22083 00003656 53                      	PUSH	BX
 22084 00003657 06                      	PUSH	ES
 22085 00003658 E8330F                  	call	SETREAD
 22086 0000365B EB22                    	JMP	short DODSKOP
 22087                                  
 22088                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 22089                                  ;--------------------------------------------------------------------------
 22090                                  ;
 22091                                  ; Procedure Name : DWRITE
 22092                                  ;
 22093                                  ; Inputs:
 22094                                  ;	DS:BX = Transfer address
 22095                                  ;	CX = Number of sectors
 22096                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22097                                  ;	DX = Absolute record number	       (LOW)
 22098                                  ;	ES:BP = Base of drive parameters
 22099                                  ;	[ALLOWED] must be set in case HARDERR called
 22100                                  ; Function:
 22101                                  ;	Calls BIOS to perform disk write. If BIOS reports
 22102                                  ;	errors, will call HARDERRRW for further action.
 22103                                  ; Output:
 22104                                  ;	Carry set if error (currently, user FAILed to I 24)
 22105                                  ; BP preserved. All other registers destroyed.
 22106                                  ;----------------------------------------------------------------------------
 22107                                  
 22108                                  	;entry	DWRITE
 22109                                  DWRITE:
 22110 0000365D E81100                  	CALL	DSKWRITE
 22111 00003660 74EA                    	jz	short dw_ret_label	; Carry clear (retz)
 22112                                  
 22113                                  ;hkn; SS override
 22114 00003662 36C606[7505]01          	MOV	BYTE [SS:READOP],1	; Write
 22115 00003668 E83500                  	call	HARDERRRW
 22116 0000366B 3C01                    	CMP	AL,1			; Check for retry
 22117 0000366D 74EE                    	JZ	short DWRITE
 22118                                  
 22119                                  ; 09/02/2024
 22120                                  %if 0
 22121                                  	CMP	AL,3			; Check for FAIL
 22122                                  	CLC
 22123                                  	JNZ	short NO_CAR2 		; Ignore
 22124                                  	STC
 22125                                  NO_CAR2:
 22126                                  dw_ret_label:
 22127                                  	retn
 22128                                  %else
 22129                                  	; 09/02/2024 - Retro DOS v4.1
 22130 0000366F EB9E                    	jmp	short fail_ignore
 22131                                  %endif
 22132                                  
 22133                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 22134                                  ;---------------------------------------------------------------------------
 22135                                  ;
 22136                                  ; Procedure Name : DSKWRITE
 22137                                  ;
 22138                                  ; Inputs:
 22139                                  ;	DS:BX = Transfer addr
 22140                                  ;	CX = Number of sectors
 22141                                  ;	DX = Absolute record number	       (LOW)
 22142                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 22143                                  ;	ES:BP = Base of drive parameters
 22144                                  ; Function:
 22145                                  ;	Call BIOS to perform disk read
 22146                                  ; Outputs:
 22147                                  ;	DI = CX on entry
 22148                                  ;	CX = Number of sectors unsuccessfully transfered
 22149                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 22150                                  ;	Zero set if OK (from BIOS) (carry clear)
 22151                                  ;	Zero clear if error (carry clear)
 22152                                  ; SI Destroyed, others preserved
 22153                                  ;
 22154                                  ;----------------------------------------------------------------------------
 22155                                  
 22156                                  	;entry	DSKWRITE
 22157                                  DSKWRITE:
 22158 00003671 51                      	PUSH	CX
 22159                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 22160 00003672 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 22161                                  	;mov	al,[es:bp+1]
 22162 00003676 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 22163 0000367A 53                      	PUSH	BX
 22164 0000367B 06                      	PUSH	ES
 22165 0000367C E8420F                  	call	SETWRITE
 22166                                  DODSKOP:
 22167 0000367F 8CD9                    	MOV	CX,DS		; Save DS
 22168 00003681 1F                      	POP	DS		; DS:BP points to DPB
 22169 00003682 1E                      	PUSH	DS
 22170                                  
 22171                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 22172 00003683 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 22173 00003687 E8830E                  	call	DEVIOCALL2
 22174                                  
 22175 0000368A 8ED9                    	MOV	DS,CX		; Restore DS
 22176 0000368C 07                      	POP	ES		; Restore ES
 22177 0000368D 5B                      	POP	BX
 22178                                  
 22179                                  ;hkn; SS override
 22180 0000368E 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 22181 00003693 5F                      	POP	DI
 22182 00003694 29F9                    	SUB	CX,DI
 22183 00003696 F7D9                    	NEG	CX		; Number of sectors not transferred
 22184                                  
 22185                                  ;hkn; SS override
 22186 00003698 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 22187                                  	;test	ax,8000h
 22188                                  	; 17/12/2022
 22189                                  	;test	ah,80h
 22190 0000369C F6C480                  	test	ah,(STERR>>8)
 22191                                  	;test	AX,STERR
 22192 0000369F C3                      	retn
 22193                                  
 22194                                  ;Break	<HardErrRW - map extended errors and call harderr>
 22195                                  ;---------------------------------------------------------------------------
 22196                                  ;
 22197                                  ; Procedure Name : HardErrRW
 22198                                  ;
 22199                                  ; Inputs:
 22200                                  ;	AX is error code from read or write
 22201                                  ;	Other registers set as per HARDERR
 22202                                  ; Function:
 22203                                  ;	Checks the error code for special extended
 22204                                  ;	errors and maps them if needed. Then invokes
 22205                                  ;	Harderr
 22206                                  ; Outputs:
 22207                                  ;	Of HARDERR
 22208                                  ; AX may be modified prior to call to HARDERR.
 22209                                  ; No other registers altered.
 22210                                  ;
 22211                                  ;---------------------------------------------------------------------------
 22212                                  
 22213                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22214                                  HARDERRRW:
 22215                                  	;cmp	al,0Fh
 22216 000036A0 3C0F                    	CMP	AL,error_I24_wrong_disk
 22217 000036A2 7512                    	JNZ	short DO_ERR				; Nothing to do
 22218                                  
 22219                                  	; MSDOS 3.3
 22220                                  	;push	ds
 22221                                  	;push	si
 22222                                  	;lds	si,[ss:CALLVIDRW]
 22223                                  	;mov	[ss:EXTERRPT+2], ds
 22224                                  	;mov	[ss:EXTERRPT], si
 22225                                  	;pop	si
 22226                                  	;pop	ds
 22227                                  
 22228                                  	; MSDOS 6.0
 22229 000036A4 50                      	push	ax
 22230 000036A5 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 22231 000036A9 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 22232 000036AD 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 22233 000036B1 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 22234 000036B5 58                      	pop	ax
 22235                                  DO_ERR:
 22236                                  	;;call	HARDERR
 22237                                  	;;retn
 22238                                  	; 16/12/2022
 22239                                  	; 10/06/2019
 22240 000036B6 E9C21A                  	jmp	HARDERR	
 22241                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22242                                  	;call	HARDERR
 22243                                  	;retn
 22244                                  
 22245                                  ; 24/07/2018 - Retro DOS v3.0
 22246                                  
 22247                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 22248                                  ;----------------------------------------------------------------------------
 22249                                  ;
 22250                                  ; Procedure Name : SETUP
 22251                                  ;
 22252                                  ; Inputs:
 22253                                  ;	ES:DI point to SFT (value also in THISSFT)
 22254                                  ;	DMAAdd contains transfer address
 22255                                  ;	CX = Byte count
 22256                                  ;	DS = DOSDATA
 22257                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 22258                                  ;		2nd of caller of caller.
 22259                                  ; Outputs:
 22260                                  ;	    CX = byte count
 22261                                  ;	    [THISDPB] = Base of drive parameters if file
 22262                                  ;		      = Pointer to device header if device or NET
 22263                                  ;	    ES:DI Points to SFT
 22264                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 22265                                  ;	    [TRANS] = 0 (No transfers yet)
 22266                                  ;	    BytPos = Byte position in file
 22267                                  ;
 22268                                  ;	The following fields are relevant to local files (not devices) only:
 22269                                  ;
 22270                                  ;	    SecPos = Position of first sector (local files only)
 22271                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 22272                                  ;	    [CLUSNUM] = First cluster (local files only)
 22273                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 22274                                  ;	    [THISDRV] = Physical unit number (local files only)
 22275                                  ;
 22276                                  ;      RETURNS ONE LEVEL UP WITH:
 22277                                  ;	   CX = 0
 22278                                  ;	   CARRY = Clear
 22279                                  ;	IF AN ERROR IS DETECTED
 22280                                  ; All other registers destroyed
 22281                                  ;----------------------------------------------------------------------------
 22282                                  
 22283                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 22284                                  
 22285                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 22286                                  
 22287                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22288                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 22289                                  
 22290                                  SETUP:
 22291                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 22292                                  
 22293                                  	;lds 	si,[es:di+7]
 22294 000036B9 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 22295                                  
 22296                                  ;hkn; SS override
 22297 000036BD 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 22298                                  
 22299                                  ;hkn; SS is DOSDATA
 22300 000036C2 16                      	push	ss
 22301 000036C3 1F                      	pop	ds
 22302                                  
 22303 000036C4 8936[8A05]              	MOV	[THISDPB],SI
 22304                                  
 22305 000036C8 8B1E[2C03]              	MOV	BX,[DMAADD]
 22306 000036CC 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 22307 000036D0 C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 22308                                  	;mov	ax,[es:di+15h]
 22309 000036D5 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 22310                                  	;mov	dx,[es:di+17h]
 22311 000036D9 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 22312 000036DD 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 22313 000036E1 A3[CE05]                	MOV	[BYTPOS],AX
 22314                                  	;test	word [es:di+5],8080h
 22315 000036E4 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 22316 000036EA 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 22317 000036EC 06                      	PUSH	ES
 22318 000036ED C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 22319                                  
 22320                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22321                                  	;;mov	bl,[es:bp+0]
 22322                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 22323                                  	; 05/12/2022
 22324 000036F1 268A5E00                	mov	bl,[es:bp]
 22325                                  	
 22326 000036F5 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 22327                                  	;mov	bx,[es:bp+2]
 22328 000036F9 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 22329                                  
 22330                                  	;; MSDOS 3.3
 22331                                  	;cmp	dx,bx
 22332                                  	;jnb	short EOFERR
 22333                                  	;div	bx
 22334                                  	;mov	[SECPOS],ax
 22335                                  	;mov	[BYTSECPOS],dx
 22336                                  	;mov	dx,ax
 22337                                  	;;and	al,[es:bp+4]
 22338                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 22339                                  	;mov	[SECCLUSPOS],al
 22340                                  	;mov	ax,cx
 22341                                  	;;mov	cl,[es:bp+5]
 22342                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22343                                  	;shr	dx,cl
 22344                                  	;mov	[CLUSNUM],dx
 22345                                  	;pop	es
 22346                                  	;mov	cx,ax
 22347                                  
 22348                                  	; 04/05/2019 - Retro DOS v4.0
 22349                                  
 22350                                  	; MSDOS 6.0
 22351                                  ;M039: Optimized this section.
 22352 000036FD 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 22353 000036FE E81A05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 22354 00003701 8916[CC05]              	MOV	[BYTSECPOS],DX
 22355 00003705 A3[C405]                	MOV	[SECPOS],AX
 22356 00003708 890E[C605]              	MOV	[SECPOS+2],CX
 22357 0000370C 89CA                    	MOV	DX,CX
 22358                                  
 22359 0000370E 89C3                    	MOV	BX,AX
 22360                                  	;and	bl,[es:bp+4]
 22361 00003710 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 22362 00003714 881E[7305]              	MOV	[SECCLUSPOS],BL
 22363                                  
 22364 00003718 E82705                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 22365 0000371B 59                      	POP	CX			;CX = byte count.
 22366 0000371C 751F                    	JNZ	short EOFERR		;cluster number above 64k
 22367                                  	;cmp	ax,[es:bp+0Dh]
 22368 0000371E 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 22369 00003722 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 22370                                  
 22371 00003724 A3[BC05]                	MOV	[CLUSNUM],AX
 22372 00003727 07                      	POP	ES			; ES:DI point to SFT
 22373                                  ;M039
 22374                                  
 22375                                  NOSETSTUFF:
 22376 00003728 89C8                    	MOV	AX,CX		; AX = Byte count.
 22377 0000372A 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 22378 0000372E 730C                    	JNC	short setup_OK	; Must be less than 64
 22379 00003730 A1[2C03]                	MOV	AX,[DMAADD]
 22380 00003733 F7D8                    	NEG	AX		; Amount of room left in segment (know
 22381                                  				;    less than 64K since max value of CX
 22382                                  				;    is FFFF).
 22383 00003735 7501                    	JNZ	short NoDec
 22384 00003737 48                      	DEC	AX
 22385                                  NoDec:
 22386 00003738 89C1                    	MOV	CX,AX		; Can do this much
 22387 0000373A E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 22388                                  setup_OK:
 22389 0000373C C3                      	retn
 22390                                  
 22391                                  EOFERR:
 22392 0000373D 07                      	POP	ES		; ES:DI point to SFT
 22393 0000373E 31C9                    	XOR	CX,CX		; No bytes read
 22394                                  ;;;;;;;;;;; 7/18/86
 22395                                  	; MSDOS 3.3
 22396                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 22397                                  ;;;;;;;;;;;
 22398                                  NOROOM:
 22399 00003740 5B                      	POP	BX		; Kill return address
 22400 00003741 F8                      	CLC
 22401 00003742 C3                      	retn			; RETURN TO CALLER OF CALLER
 22402                                  
 22403                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 22404                                  ;---------------------------------------------------------------------------
 22405                                  ;
 22406                                  ; Procedure Name : BREAKDOWN
 22407                                  ;
 22408                                  ; Inputs:
 22409                                  ;	CX = Length of disk transfer in bytes
 22410                                  ;	ES:BP = Base of drive parameters
 22411                                  ;	[BYTSECPOS] = Byte position within first sector
 22412                                  ;	DS = DOSDATA
 22413                                  ; Outputs:
 22414                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 22415                                  ;	[SECCNT] = No. of whole sectors to transfer
 22416                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 22417                                  ; AX, BX, DX destroyed. No other registers affected.
 22418                                  ;---------------------------------------------------------------------------
 22419                                  
 22420                                  BREAKDOWN:
 22421 00003743 A1[CC05]                	MOV	AX,[BYTSECPOS]
 22422 00003746 89CB                    	MOV	BX,CX
 22423 00003748 09C0                    	OR	AX,AX
 22424 0000374A 740E                    	JZ	short SAVFIR	; Partial first sector?
 22425                                  	;sub	ax,[es:bp+2]
 22426 0000374C 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 22427 00003750 F7D8                    	NEG	AX		; Max number of bytes left in first sector
 22428 00003752 29C3                    	SUB	BX,AX		; Subtract from total length
 22429 00003754 7304                    	JAE	short SAVFIR
 22430 00003756 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 22431 00003758 31DB                    	XOR	BX,BX		; And no bytes are left
 22432                                  SAVFIR:
 22433 0000375A A3[D205]                	MOV	[BYTCNT1],AX
 22434 0000375D 89D8                    	MOV	AX,BX
 22435 0000375F 31D2                    	XOR	DX,DX
 22436                                  	;div	word [ES:BP+2]
 22437 00003761 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 22438 00003765 A3[D605]                	MOV	[SECCNT],AX
 22439 00003768 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 22440                                  	; MSDOS 3.3
 22441                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 22442                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 22443                                  	;CMP	AX,1
 22444                                  	;retnz
 22445                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 22446                                  	;MOV	[BYTCNT2],AX
 22447                                  	;MOV	[SECCNT],DX	; DX = 0
 22448                                  _RET45:
 22449 0000376C C3                      	retn
 22450                                  
 22451                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 22452                                  
 22453                                  ;----------------------------------------------------------------------------
 22454                                  ;
 22455                                  ; Procedure Name : READ_LOCK_VIOLATION
 22456                                  ;
 22457                                  ; ES:DI points to SFT. This entry used by NET_READ
 22458                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 22459                                  ; Else do retrys.
 22460                                  ; ES:DI,DS,CX preserved
 22461                                  ;
 22462                                  ;----------------------------------------------------------------------------
 22463                                  
 22464                                  READ_LOCK_VIOLATION:
 22465 0000376D C606[7505]00            	MOV	byte [READOP],0
 22466                                  ERR_ON_CHECK:
 22467                                  	;;test	word [es:di+2],8000h
 22468                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 22469                                  	;JNZ	short HARD_ERR
 22470                                  
 22471                                  	; 04/05/2019
 22472                                  	;test	byte [es:di+3],80h
 22473 00003772 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 22474 00003777 7508                    	JNZ	short HARD_ERR
 22475                                  
 22476                                  	;PUSH	CX
 22477                                  	;;mov	cl,[es:di+2]
 22478                                  	;MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 22479                                  	;;and	cl,0F0h
 22480                                  	;AND	CL,SHARING_MASK
 22481                                  	;;cmp	cl,0
 22482                                  	;CMP	CL,SHARING_COMPAT
 22483                                  	;POP	CX
 22484                                  	;JNE	short NO_HARD_ERR
 22485                                  	; 21/09/2023
 22486 00003779 268A4502                	mov	al,[ES:DI+SF_ENTRY.sf_mode]
 22487 0000377D 24F0                    	and	al,SHARING_MASK
 22488                                  	;cmp	al,SHARING_COMPAT
 22489                                  	;jne	short NO_HARD_ERR
 22490 0000377F 7505                    	jnz	short NO_HARD_ERR
 22491                                  HARD_ERR:
 22492 00003781 E88D39                  	call	LOCK_VIOLATION
 22493 00003784 73E6                    	jnc	short _RET45		; User wants Retrys
 22494                                  NO_HARD_ERR:
 22495 00003786 31C9                    	XOR	CX,CX			;No bytes transferred
 22496                                  	;mov	ax,21h
 22497 00003788 B82100                  	MOV	AX,error_lock_violation
 22498 0000378B F9                      	STC
 22499                                  RET3:		; 06/02/2024
 22500 0000378C C3                      	retn
 22501                                  
 22502                                  ;----------------------------------------------------------------------------
 22503                                  ;
 22504                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 22505                                  ;
 22506                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 22507                                  ; This entry used by NET_WRITE
 22508                                  ;
 22509                                  ;----------------------------------------------------------------------------
 22510                                  
 22511                                  WRITE_LOCK_VIOLATION:
 22512 0000378D C606[7505]01            	MOV	byte [READOP],1
 22513 00003792 EBDE                    	JMP	short ERR_ON_CHECK
 22514                                  
 22515                                  ; 04/05/2019 - Retro DOS v4.0
 22516                                  
 22517                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 22518                                  
 22519                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 22520                                  ;----------------------------------------------------------------------------
 22521                                  ;
 22522                                  ; Procedure Name : DISKREAD
 22523                                  ;
 22524                                  ; Inputs:
 22525                                  ;	Outputs of SETUP
 22526                                  ; Function:
 22527                                  ;	Perform disk read
 22528                                  ; Outputs:
 22529                                  ;    Carry clear
 22530                                  ;	CX = No. of bytes read
 22531                                  ;	ES:DI point to SFT
 22532                                  ;	SFT offset and cluster pointers updated
 22533                                  ;    Carry set
 22534                                  ;	CX = 0
 22535                                  ;	ES:DI point to SFT
 22536                                  ;	AX has error code
 22537                                  ;----------------------------------------------------------------------------
 22538                                  
 22539                                  ;hkn; called from disk.asm. DS already set up.
 22540                                  
 22541                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22542                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 22543                                  
 22544                                  DISKREAD:
 22545                                  	;mov	ax,[es:di+11h]
 22546 00003794 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 22547                                  	;mov	bx,[es:di+13h]
 22548 00003798 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 22549 0000379C 2B06[CE05]              	SUB	AX,[BYTPOS]
 22550 000037A0 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 22551 000037A4 721F                    	JB	short RDERR		;Read starts past EOF
 22552 000037A6 750A                    	JNZ	short ENUF		;More than 64k to EOF
 22553 000037A8 09C0                    	OR	AX,AX
 22554 000037AA 7419                    	JZ	short RDERR		;Read starts at EOF
 22555 000037AC 39C8                    	CMP	AX,CX
 22556 000037AE 7302                    	JAE	short ENUF		;I/O fits
 22557 000037B0 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 22558                                  ENUF:
 22559                                  	; MSDOS 3.3
 22560                                  	;test	byte [es:di+4],8
 22561                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22562                                  	;jnz	short SET_ACC_ERR
 22563                                  	;call	LOCK_CHECK
 22564                                  	;jnb	short _READ_OK
 22565                                  	;call	READ_LOCK_VIOLATION
 22566                                  	;jnb	short ENUF
 22567                                  	;retn
 22568                                  
 22569                                  	; MSDOS 6.0
 22570 000037B2 E881FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 22571                                  	;JNC	short _READ_OK 		; There are no locks
 22572                                  	;retn
 22573                                  	; 06/02/2024
 22574 000037B5 72D5                    	jc	short RET3
 22575                                  
 22576                                  _READ_OK:
 22577 000037B7 C42E[8A05]              	LES	BP,[THISDPB]
 22578 000037BB E885FF                  	CALL	BREAKDOWN
 22579                                  
 22580                                  ; 10/02/2024
 22581                                  %if 0
 22582                                  	MOV	CX,[CLUSNUM] ; *
 22583                                  	call	FNDCLUS
 22584                                       	; MSDOS 6.0			;M022 conditional removed here
 22585                                  	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 22586                                  					; migrated from 330a - HKN
 22587                                  %else
 22588                                  	; 10/02/2024 - Retro DOS v4.1
 22589 000037BE E81313                  	call	FNDCLUS_X ; *
 22590 000037C1 720E                    	jc	short SET_ACC_ERR ; ds=ss
 22591                                  %endif
 22592                                  	;OR	CX,CX
 22593                                  	;JZ	short SKIPERR
 22594                                  	; 06/02/2024
 22595 000037C3 E313                    	jcxz	SKIPERR
 22596                                  
 22597                                  RDERR:
 22598 000037C5 B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 22599 000037C7 E91802                  	jmp	WRTERR22
 22600                                  
 22601                                  ;RDLASTJ: 
 22602                                  	;JMP	RDLAST                  ;M039
 22603                                  
 22604                                  SETSFTJ2: 
 22605 000037CA E99600                  	JMP	SETSFT
 22606                                  
 22607                                  CANOT_READ:
 22608                                  	; MSDOS 3.3
 22609                                  	;POP	CX		;M039.
 22610                                  	; MSDOS 3.3 & MSDOS 6.0
 22611 000037CD 59                      	POP	CX              ;Clean stack.
 22612 000037CE 5B                      	POP	BX
 22613                                  
 22614                                  	;entry	SET_ACC_ERR_DS
 22615                                  SET_ACC_ERR_DS:
 22616                                  
 22617                                  ;hkn; SS is DOSDATA
 22618                                  	;Context DS
 22619 000037CF 16                      	push	ss
 22620 000037D0 1F                      	pop	ds
 22621                                  
 22622                                  	;entry	SET_ACC_ERR
 22623                                  SET_ACC_ERR:
 22624 000037D1 31C9                    	XOR	CX,CX
 22625                                  	;mov	ax,5
 22626 000037D3 B80500                  	MOV	AX,error_access_denied
 22627 000037D6 F9                      	STC
 22628 000037D7 C3                      	retn
 22629                                  
 22630                                  SKIPERR:
 22631 000037D8 8916[BA05]              	MOV	[LASTPOS],DX
 22632 000037DC 891E[BC05]              	MOV	[CLUSNUM],BX
 22633 000037E0 833E[D205]00            	CMP	word [BYTCNT1],0
 22634 000037E5 7405                    	JZ	short RDMID
 22635                                  
 22636 000037E7 E86413                  	call	BUFRD
 22637                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22638                                  	; 10/02/2024
 22639                                  	; ds=ss
 22640 000037EA 72E5                    	jc	short SET_ACC_ERR
 22641                                  
 22642                                  RDMID:
 22643 000037EC 833E[D605]00            	CMP	word [SECCNT],0
 22644                                  	;JZ	RDLAST ; 10/08/2018
 22645 000037F1 7453                    	jz	short RDLAST
 22646                                  
 22647 000037F3 E8EC13                  	call	NEXTSEC
 22648 000037F6 72D2                    	JC	short SETSFTJ2
 22649                                  
 22650 000037F8 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 22651                                  ONSEC:
 22652 000037FD 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 22653 00003801 8B0E[D605]              	MOV	CX,[SECCNT]
 22654 00003805 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 22655                                  RDLP:
 22656 00003809 E80714                  	call	OPTIMIZE
 22657                                  	;JC	short SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 22658                                  	; 10/02/2024
 22659                                  	; ds=ss
 22660 0000380C 72C3                    	jc	short SET_ACC_ERR
 22661                                  
 22662 0000380E 57                      	PUSH	DI                      ;DI = Next physical cluster.
 22663 0000380F 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 22664 00003810 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 22665                                  	;mov	byte [ALLOWED],38h
 22666 00003811 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22667 00003816 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 22668                                  
 22669 0000381A 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 22670 0000381B 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 22671                                  
 22672                                  	; 04/05/2019 - Retro DOS v4.0
 22673                                  
 22674                                  	; MSDOS 6.0
 22675 0000381C E88921                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 22676                                  
 22677                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22678 0000381F E8DBFD                  	call	DREAD
 22679                                  
 22680                                  	; 10/02/2024
 22681                                  	; ds<>ss
 22682                                  
 22683                                  	; MSDOS 3.3 
 22684                                  	;pop	bx
 22685                                  	;pop	dx
 22686                                  	;jc	short CANOT_READ
 22687                                  	;add	bx,dx	; (bx = Extent end)
 22688                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 22689                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 22690                                  	;call	SETVISIT
 22691                                  	; ->***
 22692                                  ;M039
 22693                                  	; MSDOS 6.0 
 22694 00003822 59                      	pop	cx
 22695 00003823 5A                      	pop	dx
 22696 00003824 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 22697 00003829 72A2                    	jc	short CANOT_READ
 22698                                  
 22699 0000382B 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 22700                                  
 22701                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22702                                  ;            sectors, also termed an "Extent".)
 22703                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22704                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22705                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22706                                  ;
 22707                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 22708                                  ;	buffers must be "read" into the transfer memory block, so that the
 22709                                  ;       transfer memory reflects the most recent data.
 22710                                  
 22711 00003830 E85E00                  	call	DskRdBufScan
 22712                                  
 22713                                  	;Context DS
 22714 00003833 16                      	push	ss
 22715 00003834 1F                      	pop	ds
 22716                                          
 22717 00003835 59                      	pop	cx
 22718 00003836 5B                              pop	bx
 22719                                  
 22720                                  ;       CX = # of sector remaining.
 22721                                  ;       BX = Next physical cluster.
 22722                                  
 22723                                  ;M039
 22724                                  
 22725                                  ;;;;;;;;
 22726                                  ;	; 25/07/2018 - Retro DOS v3.0
 22727                                  ;	; ***->
 22728                                  ;	; MSDOS 3.3
 22729                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 22730                                  ;bufq:
 22731                                  ;;	DX = Extent start.
 22732                                  ;;	BX = Extent end.
 22733                                  ;;	 AL = Drive #.
 22734                                  ;;     DS:DI-> 1st buffer in queue.
 22735                                  ;
 22736                                  ;	;or	byte [di+5],20h
 22737                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22738                                  ;	;cmp	al,[di+4]	
 22739                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 22740                                  ;	jnz	short bufq3
 22741                                  ;	;cmp	[di+6],dx
 22742                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 22743                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 22744                                  ;	;cmp	[di+6],bx
 22745                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 22746                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 22747                                  ;	
 22748                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 22749                                  ;
 22750                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 22751                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 22752                                  ;;      as MRU (Most Recently Used).
 22753                                  ;
 22754                                  ;	;test	byte [di+5],40h
 22755                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 22756                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 22757                                  ;	pop	ax ; transfer address
 22758                                  ;	push	ax
 22759                                  ;	push	di
 22760                                  ;	push	dx
 22761                                  ;	;sub	dx,[di+6]
 22762                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 22763                                  ;	neg	dx
 22764                                  ;
 22765                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 22766                                  ;;           block.
 22767                                  ;
 22768                                  ;	mov	si,di
 22769                                  ;	mov	di,ax
 22770                                  ;	mov	ax,dx
 22771                                  ;	;mov	cx,[es:bp+6]	
 22772                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 22773                                  ;	mul	cx
 22774                                  ;	add	di,ax
 22775                                  ;
 22776                                  ;	lea	si,[si+16]
 22777                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 22778                                  ;	shr	cx,1
 22779                                  ;	push	es
 22780                                  ;	mov	es,[SS:DMAADD+2]
 22781                                  ;
 22782                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22783                                  ;;      DS:SI-> Buffer sector data.
 22784                                  ;;      ES:DI-> Destination within Transfer memory block.
 22785                                  ;
 22786                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 22787                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22788                                  ;	;rep	movsb                   ;Copy last byte.
 22789                                  ;	jnc	short bufq1
 22790                                  ;	movsb
 22791                                  ;bufq1:
 22792                                  ;	pop	es
 22793                                  ;	pop	dx
 22794                                  ;	pop	di
 22795                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 22796                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 22797                                  ;bufq2:
 22798                                  ;	call	SCANPLACE
 22799                                  ;bufq3:
 22800                                  ;	call	SKIPVISIT
 22801                                  ;	jnz	short bufq
 22802                                  ;	
 22803                                  ;	push	ss
 22804                                  ;	pop	ds
 22805                                  ;	pop	cx
 22806                                  ;	pop	cx
 22807                                  ;	pop	bx	
 22808                                  ;bufq4:
 22809                                  ;;;;;;;
 22810 00003837 E30D                    	JCXZ	RDLAST
 22811                                  
 22812 00003839 E85E1B                  	call	IsEOF			; test for eof on fat size
 22813 0000383C 7325                    	JAE	short SETSFT
 22814                                  
 22815 0000383E B200                    	MOV	DL,0
 22816 00003840 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 22817 00003844 EBC3                    	JMP	short RDLP ; 19/05/2019
 22818                                  
 22819                                  RDLAST:
 22820 00003846 A1[D405]                	MOV	AX,[BYTCNT2]
 22821 00003849 09C0                    	OR	AX,AX
 22822 0000384B 7416                    	JZ	short SETSFT
 22823 0000384D A3[D205]                	MOV	[BYTCNT1],AX
 22824                                  
 22825 00003850 E88F13                  	call	NEXTSEC
 22826 00003853 720E                    	JC	short SETSFT
 22827                                  
 22828 00003855 C706[CC05]0000          	MOV	word [BYTSECPOS],0
 22829 0000385B E8F012                  	call	BUFRD
 22830                                  	; 10/08/2018
 22831 0000385E 7303                    	JNC	short SETSFT
 22832                                  	;JMP	SET_ACC_ERR_DS
 22833                                  	; 10/02/2024
 22834                                  	; ds=ss
 22835 00003860 E96EFF                  	jmp	SET_ACC_ERR
 22836                                  
 22837                                  ;------------------------------------------------------------------------------
 22838                                  ;
 22839                                  ; Procedure Name : SETSFT
 22840                                  ; Inputs:
 22841                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 22842                                  ;		and set cluster fields
 22843                                  ; Function:
 22844                                  ;	Update [THISSFT] based on the transfer
 22845                                  ; Outputs:
 22846                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22847                                  ;	ES:DI points to [THISSFT]
 22848                                  ;	CX No. of bytes transferred
 22849                                  ;	Carry clear
 22850                                  ;
 22851                                  ;----------------------------------------------------------------------------
 22852                                  
 22853                                  	;entry	SETSFT
 22854                                  
 22855                                  ; 26/07/2018 - Retro DOS v3.0
 22856                                  SETSFT:
 22857 00003863 C43E[9E05]              	LES	DI,[THISSFT]
 22858                                  
 22859                                  ; Same as SETSFT except ES:DI already points to SFT
 22860                                  	;entry	SETCLUS
 22861                                  SETCLUS:	
 22862 00003867 8B0E[B805]              	MOV	CX,[NEXTADD]
 22863 0000386B 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22864                                  	;;test	word [es:di+5],80h
 22865                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22866                                  	;JNZ	short ADDREC		; don't set clusters if device
 22867                                  
 22868                                  	; 04/05/2019 - Retro DOS v4.0
 22869                                  	;test	byte [es:di+5],80h
 22870 0000386F 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22871 00003874 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22872                                  
 22873 00003876 A1[BC05]                	MOV	AX,[CLUSNUM]
 22874                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22875                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22876 00003879 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22877 0000387D A1[BA05]                	MOV	AX,[LASTPOS]
 22878                                  	;mov	[es:di+19h],ax
 22879 00003880 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22880                                  
 22881                                  ;----------------------------------------------------------------------------
 22882                                  ;
 22883                                  ; Procedure : AddRec
 22884                                  ; Inputs:
 22885                                  ;	ES:DI points to SFT
 22886                                  ;	CX is No. Bytes transferred
 22887                                  ; Function:
 22888                                  ;	Update the SFT offset based on the transfer
 22889                                  ; Outputs:
 22890                                  ;	sf_position updated to point to first byte after transfer
 22891                                  ;	ES:DI points to SFT
 22892                                  ;	CX No. of bytes transferred
 22893                                  ;	Carry clear
 22894                                  ;----------------------------------------------------------------------------
 22895                                  
 22896                                  	;entry	AddRec
 22897                                  ADDREC:
 22898 00003884 E309                    	JCXZ	RET28		; If no records read,  don't change position
 22899                                  	;add	[es:di+15h],cx
 22900 00003886 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22901                                  	;adc	word [es:di+17h], 0
 22902 0000388A 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22903                                  RET28:	
 22904 0000388F F8                      	CLC
 22905 00003890 C3                      	retn
 22906                                  
 22907                                  ; 25/07/2018
 22908                                  ; MSDOS 6.0
 22909                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22910                                  ;----------------------------------------------------------------------------
 22911                                  ;
 22912                                  ; Procedure Name : DskRdBufScan
 22913                                  ;
 22914                                  ; Inputs:
 22915                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22916                                  ;            sectors, also termed an "Extent".)
 22917                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22918                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22919                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22920                                  ;
 22921                                  ; Function:
 22922                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22923                                  ;	"read" into the transfer memory block, so that the transfer memory
 22924                                  ;	reflects the most recent data.
 22925                                  ;
 22926                                  ; Outputs:
 22927                                  ;       Transfer memory updated as required.
 22928                                  ;
 22929                                  ; Uses:
 22930                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22931                                  ;       SS override for all global variables.
 22932                                  ;
 22933                                  ; Notes:
 22934                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22935                                  ;	than the FIRST.
 22936                                  ;----------------------------------------------------------------------------
 22937                                  ;M039: Created
 22938                                  
 22939                                  ; 04/05/2019 - Retro DOS v4.0
 22940                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22941                                  
 22942                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22943                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22944                                  
 22945                                  ;procedure DskRdBufScan,NEAR
 22946                                  ;
 22947                                  ;ASSUME  DS:NOTHING
 22948                                  
 22949                                  DskRdBufScan:
 22950 00003891 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22951 00003897 743C                    	je	short bufx		     ; -no, skip all work.
 22952                                  
 22953 00003899 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22954 0000389E 89DE                    	mov     si,bx
 22955 000038A0 01D1                    	add     cx,dx
 22956 000038A2 83D600                  	adc     si,0
 22957                                  
 22958 000038A5 E89B1E                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22959                                  	;mov	ax,[di+2]
 22960 000038A8 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22961 000038AB 36A3[BB0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22962                                  		
 22963                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22964                                  	;;mov	al,[es:bp+0]
 22965                                  	;mov	al,[es:bp+DPB.DRIVE]
 22966                                  	; 15/12/2022
 22967 000038AF 268A4600                	mov	al,[es:bp]
 22968                                  
 22969                                  ;       BX:DX = Extent start.
 22970                                  ;       SI:CX = Extent end + 1.
 22971                                  ;          AL = Drive #.
 22972                                  ;       DS:DI-> 1st buffer in queue.
 22973                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22974                                  
 22975                                  bufq:	
 22976                                  	;cmp	al,[di+4]
 22977 000038B3 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22978 000038B6 7514                    	jne	short bufq1        	;  -no, jump.
 22979                                  
 22980                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22981                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22982                                  
 22983                                  	;cmp	bx,[di+8]
 22984 000038B8 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22985 000038BB 7503                    	jne	short bufq01
 22986                                  	;cmp	dx,[di+6]
 22987 000038BD 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22988                                  bufq01:
 22989 000038C0 770A                    	ja	short bufq1
 22990                                  
 22991                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22992                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22993                                  
 22994                                  	;cmp	si,[di+8]
 22995 000038C2 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22996 000038C5 7503                    	jne	short bufq02
 22997                                  	;cmp	cx,[di+6]
 22998 000038C7 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22999                                  bufq02:
 23000 000038CA 770A                    	ja	short bufq2
 23001                                  bufq1:	
 23002 000038CC 363B3E[BB0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23003 000038D1 8B3D                    	mov	di,[di]
 23004                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 23005 000038D3 75DE                    	jne	short bufq		; -no, do next buffer
 23006                                  bufx:
 23007 000038D5 C3                      	retn				;Exit.
 23008                                  
 23009                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 23010                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 23011                                  ;       as MRU (Most Recently Used).
 23012                                  
 23013                                  bufq2:	
 23014 000038D6 50                      	push	ax
 23015                                  	;test	byte [di+5],40h
 23016 000038D7 F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23017 000038DB 7428                    	jz	short bufq3                    ; -no, jump.
 23018                                  
 23019                                  ;       SaveReg <cx,dx,si,di,es>
 23020 000038DD 51                      	push	cx
 23021 000038DE 52                      	push	dx
 23022 000038DF 56                      	push	si
 23023 000038E0 57                      	push	di
 23024 000038E1 06                      	push	es
 23025                                  
 23026 000038E2 89D0                    	mov     ax,dx
 23027                                  	;sub	ax,[di+6]
 23028 000038E4 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 23029 000038E7 F7D8                    	neg	ax
 23030                                  
 23031                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 23032                                  ;            block. (Note: the upper word of the sector # may be ignored
 23033                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 23034                                  ;            is imposed by the input parameters of the disk read operation.)
 23035                                  
 23036                                  	;lea	si,[di+20]
 23037 000038E9 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 23038                                  	;mov	cx,[es:bp+2]
 23039 000038EC 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 23040 000038F0 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 23041                                  	;mov	di,[ss:TEMP_VAR]
 23042                                  	; 09/02/2024
 23043 000038F2 36C43E[0C06]            	les	di,[ss:TEMP_VAR]
 23044 000038F7 01C7                    	add	di,ax
 23045                                  	;mov	es,[ss:TEMP_VAR2]
 23046 000038F9 D1E9                    	shr	cx,1
 23047                                  
 23048                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 23049                                  ;       DS:SI-> Buffer sector data.
 23050                                  ;       ES:DI-> Destination within Transfer memory block.
 23051                                  
 23052 000038FB F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 23053                                  	;; 04/05/2019
 23054                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 23055                                  	;;rep	movsb                   ;Copy last byte.
 23056                                  	;jnc	short bufq03	
 23057                                  	;movsb
 23058                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23059                                  	;adc	cx,0
 23060                                  	;rep	movsb
 23061                                  	; 22/09/2023
 23062 000038FD 7301                    	jnc	short bufq03
 23063 000038FF A4                      	movsb
 23064                                  bufq03:
 23065                                  	;RestoreReg <es,di,si,dx,cx>
 23066 00003900 07                      	pop	es
 23067 00003901 5F                      	pop	di
 23068 00003902 5E                      	pop	si
 23069 00003903 5A                      	pop	dx
 23070 00003904 59                      	pop	cx
 23071                                  
 23072                                  ;       DS:DI -> current buffer.
 23073                                  bufq3:	
 23074 00003905 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 23075                                          ;invoke SCANPLACE
 23076 00003907 E84B1E                  	call	SCANPLACE
 23077 0000390A 363B06[BB0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 23078 0000390F 58                      	pop	ax
 23079                                  	;jne	short bufq		; -no, jump.
 23080                                  	;;jmp	short bufx		; -yes, exit.
 23081                                  	;; 12/06/2019
 23082                                  	;retn
 23083                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 23084 00003910 75A1                    	jne	short bufq
 23085                                  	;jmp	short bufx
 23086                                  	; 09/02/2024
 23087 00003912 C3                      	retn	; Exit
 23088                                  
 23089                                  ;EndProc DskRdBufScan
 23090                                  
 23091                                  ;============================================================================
 23092                                  ; DISK3.ASM, MSDOS 6.0, 1991
 23093                                  ;============================================================================
 23094                                  ; 04/05/2019 - Retro DOS v4.0
 23095                                  ; 24/07/2018 - Retro DOS v3.0
 23096                                  
 23097                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 23098                                  ;----------------------------------------------------------------------------
 23099                                  ;
 23100                                  ; Procedure Name : DISKWRITE
 23101                                  ;
 23102                                  ; Inputs:
 23103                                  ;       Outputs of SETUP
 23104                                  ; Function:
 23105                                  ;       Perform disk write
 23106                                  ; Outputs:
 23107                                  ;    Carry clear
 23108                                  ;       CX = No. of bytes written
 23109                                  ;       ES:DI point to SFT
 23110                                  ;       SFT offset and cluster pointers updated
 23111                                  ;    Carry set
 23112                                  ;       CX = 0
 23113                                  ;       ES:DI point to SFT
 23114                                  ;       AX has error code
 23115                                  ;----------------------------------------------------------------------------
 23116                                  
 23117                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 23118                                  
 23119                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 23120                                  
 23121                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23122                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 23123                                  
 23124                                  DISKWRITE:
 23125                                  	; MSDOS 3.3
 23126                                  	; IBMDOS.COM - Offset 436Dh
 23127                                  	;;test	byte [es:di+4],8
 23128                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 23129                                  	;jz	short write_cont
 23130                                  	;jmp	SET_ACC_ERR_DS
 23131                                  ;write_cont:
 23132                                  	;push	cx
 23133                                  	;or	cx,cx
 23134                                  	;jnz	short Not_Truncate
 23135                                  	;;mov	cx,-1
 23136                                  	;dec	cx
 23137                                  ;Not_Truncate:
 23138                                  	;call	LOCK_CHECK
 23139                                  	;pop	cx
 23140                                  	;jnb	short _WRITE_OK
 23141                                  	;call	WRITE_LOCK_VIOLATION
 23142                                  	;jnb	short DISKWRITE
 23143                                  	;retn
 23144                                  
 23145                                  	; MSDOS 6.0
 23146 00003913 E802FD                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 23147                                  	; 19/08/2018
 23148 00003916 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 23149 00003918 C3                      	retn
 23150                                  
 23151                                  WRTEOFJ:
 23152 00003919 E9D101                  	JMP     WRTEOF
 23153                                  
 23154                                  _WRITE_OK:
 23155                                   	; 27/07/2018
 23156                                  	; IBMDOS.COM - Offset 438Eh
 23157                                  	
 23158                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23159                                  	;and	word [es:di+5],0BFBFh
 23160 0000391C 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 23161                                  				; Mark file as dirty, clear no date on close
 23162                                  ; 10/02/2024
 23163                                  %if 0
 23164                                  	; 04/05/2019 - Retro DOS v4.0
 23165                                  
 23166                                  	; MSDOS 6.0
 23167                                  	;mov 	ax,[es:di+11h]
 23168                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 23169                                          MOV	[TEMP_VAR],AX                           ;M039
 23170                                  	;mov	ax,[es:di+13h]
 23171                                  	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 23172                                          MOV	[TEMP_VAR2],AX                          ;M039
 23173                                  %else
 23174                                  	; 10/02/2024 (PCDOS 7.1 IBMDOS COM)
 23175                                  	;les	ax,[es:di+11h]
 23176 00003922 26C44511                	les	ax,[es:di+SF_ENTRY.sf_size]
 23177 00003926 8C06[0E06]              	mov	[TEMP_VAR2],es
 23178 0000392A A3[0C06]                	mov	[TEMP_VAR],ax
 23179                                  %endif
 23180                                  
 23181                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 23182                                  
 23183                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23184 0000392D C42E[8A05]              	LES     BP,[THISDPB]
 23185                                  
 23186 00003931 E80FFE                  	call	BREAKDOWN
 23187                                  
 23188 00003934 A1[CE05]                	MOV     AX,[BYTPOS]
 23189 00003937 8B16[D005]              	MOV     DX,[BYTPOS+2]
 23190 0000393B E3DC                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 23191 0000393D 01C8                    	ADD     AX,CX
 23192 0000393F 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 23193                                  
 23194                                  	;mov	bx,[es:bp+2]
 23195 00003942 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 23196                                  
 23197                                  	; MSDOS 3.3
 23198                                  	;cmp	dx,bx
 23199                                  	;jnb	short WRTERR33
 23200                                  	;div	bx
 23201                                  	;mov	bx,ax
 23202                                  	;OR	DX,DX
 23203                                  	;JNZ	short CALCLUS
 23204                                  	;dec	ax
 23205                                  ;CALCLUS:
 23206                                  	; MSDOS 3.3
 23207                                  	;mov	cl,[es:bp+5]
 23208                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 23209                                  	;shr	ax,cl
 23210                                  	;push	ax
 23211                                  	;push	dx
 23212                                  	;push	es
 23213                                  	;les	di,[THISSFT]
 23214                                  	;;mov	ax,[es:di+11h]
 23215                                  	;;mov	dx,[es:di+13h]
 23216                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 23217                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 23218                                  	;pop	es
 23219                                  	;;DX:AX = current file size (in bytes).
 23220                                  	;;div	word [es:bp+2]
 23221                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23222                                  	;mov	cx,ax
 23223                                  	;or	dx,dx
 23224                                  	;jz	short NORND
 23225                                  	;inc	ax
 23226                                  ;NORND:
 23227                                  	; MSDOS 6.0
 23228 00003946 E8D202                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 23229 00003949 89C6                    	MOV	SI,AX
 23230 0000394B 890E[0706]                      MOV	[HIGH_SECTOR],CX
 23231                                  
 23232                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 23233                                  
 23234 0000394F 09D2                    	OR	DX,DX
 23235 00003951 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 23236 00003952 89CA                    	MOV	DX,CX			;M039
 23237 00003954 7506                    	JNZ	short CALCLUS
 23238 00003956 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 23239 00003959 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 23240                                  
 23241                                  CALCLUS:
 23242                                  	; MSDOS 6.0
 23243 0000395C E8E302                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 23244 0000395F 5A                      	POP	DX
 23245                                  
 23246                                  ;       AX = Last cluster to write.
 23247                                  ;       DX = # of bytes in last sector to write (the "tail").
 23248                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 23249                                  
 23250 00003960 50                      	PUSH	AX
 23251 00003961 52                      	PUSH	DX
 23252                                  ;M039
 23253 00003962 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 23254 00003966 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 23255 00003969 E8AF02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 23256 0000396C 890E[0E06]              	mov	[TEMP_VAR2],cx
 23257 00003970 890E[CA05]              	mov	[VALSEC+2],cx
 23258 00003974 89C1                    	mov	cx,ax
 23259 00003976 89F3                    	mov	bx,si
 23260                                  
 23261                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 23262                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 23263                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 23264                                  ;                     DX = # of bytes in last sector of current file.
 23265                                  ;M039
 23266 00003978 09D2                    	OR	DX,DX
 23267 0000397A 7407                    	JZ	short NORND
 23268                                  	;ADD	AX,1            	;Round up if any remainder	;AC000;
 23269                                  	;ADC	word [VALSEC+2],0
 23270                                  	; 22/09/2023
 23271 0000397C 40                      	inc	ax  ; 0FFFFh -> 0
 23272 0000397D 7504                    	jnz	short NORND
 23273 0000397F FF06[CA05]              	inc	word [VALSEC+2]
 23274                                  NORND:		
 23275                                  	; MSDOS 3.3 & MSDOS 6.0
 23276 00003983 A3[C805]                	MOV     [VALSEC],AX
 23277                                  
 23278                                  ;       [VALSEC] = Last sector of current file.
 23279                                  
 23280 00003986 31C0                    	XOR     AX,AX
 23281 00003988 A3[DE05]                	MOV     [GROWCNT],AX
 23282 0000398B A3[E005]                	MOV     [GROWCNT+2],AX
 23283 0000398E 58                      	POP     AX
 23284                                  
 23285                                  	; MSDOS 6.0
 23286 0000398F 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 23287 00003993 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 23288 00003997 7263                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 23289 00003999 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 23290 0000399B 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 23291 0000399D 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 23292 000039A1 EB08                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 23293                                  lowsec:
 23294                                  	;MOV	DI,0			;F.C. >32mb
 23295                                  	; 22/09/2023
 23296 000039A3 31FF                    	xor	di,di
 23297                                  	; MSDOS 3.3 & MSDOS 6.0
 23298 000039A5 29CB                    	SUB	BX,CX			; Number of full sectors
 23299 000039A7 7253                    	JB	short NOGROW
 23300 000039A9 7444                    	JZ	short TESTTAIL
 23301                                  yesgrow:
 23302                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23303 000039AB 89D1                    	MOV     CX,DX
 23304 000039AD 93                      	XCHG    AX,BX
 23305                                  	;mul	word [es:bp+2]
 23306 000039AE 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 23307                                  	
 23308                                  	; MSDOS 6.0
 23309 000039B2 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb save dx		;AN000;
 23310 000039B6 A3[0E06]                	MOV	[TEMP_VAR2],AX		;M039; F.C. >32mb save ax	;AN000;
 23311 000039B9 89F8                    	MOV	AX,DI			;F.C. >32mb			;AN000;
 23312                                  	;mul	word [es:bp+2]
 23313 000039BB 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 23314                                  	
 23315 000039BF 0306[0706]              	ADD	AX,[HIGH_SECTOR]	;F.C. >32mb add lower value	;AN000;
 23316 000039C3 89C2                    	MOV	DX,AX			;F.C. >32mb DX:AX is the result of ;AN000;
 23317 000039C5 A1[0E06]                	MOV	AX,[TEMP_VAR2]		;M039; F.C. >32mb a 32 bit multiply ;AN000;
 23318                                  
 23319                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23320 000039C8 29C8                    	SUB     AX,CX			; Take off current "tail"
 23321 000039CA 83DA00                  	SBB     DX,0			; 32-bit extension
 23322 000039CD 01D8                    	ADD     AX,BX			; Add on new "tail"
 23323 000039CF 83D200                  	ADC     DX,0			; ripple tim's head off
 23324 000039D2 EB21                    	JMP     SHORT SETGRW
 23325                                  
 23326                                  HAVSTART:
 23327                                  	;int 3
 23328 000039D4 89C1                    	MOV     CX,AX
 23329 000039D6 E81F11                  	call	SKPCLP
 23330                                  	;JCXZ	DOWRTJ
 23331                                  	; 16/12/2022
 23332 000039D9 E353                    	jcxz	DOWRT
 23333                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23334                                  	;jcxz	DOWRTJ
 23335                                  
 23336 000039DB E8B712                  	call	ALLOCATE
 23337                                  	;JNC	short DOWRTJ
 23338                                  	; 16/12/2022
 23339 000039DE 734E                    	jnc	short DOWRT
 23340                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23341                                  	;jnc	short DOWRTJ
 23342                                  
 23343                                  	;entry   WRTERR
 23344                                  WRTERR:
 23345 000039E0 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort	;AN000;
 23346                                  
 23347                                  	;entry WRTERR22
 23348                                  WRTERR22:
 23349 000039E2 A0[7605]                	MOV     AL,[THISDRV]		;MS.				;AN000;
 23350                                  
 23351                                  	; 27/07/2018
 23352                                  WRTERR33:
 23353                                  	;MOV	CX,0			;No bytes transferred
 23354 000039E5 31C9                    	XOR     CX,CX
 23355                                  
 23356 000039E7 C43E[9E05]              	LES     DI,[THISSFT]
 23357                                  	;CLC ; 19/05/2019
 23358                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23359                                  	; 16/12/2022
 23360                                  	;clc
 23361 000039EB C3                      	retn
 23362                                  
 23363                                  	; 16/12/2022
 23364                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23365                                  ;DOWRTJ:
 23366                                  	;JMP	short DOWRT
 23367                                  
 23368                                  ACC_ERRWJ:
 23369                                  	; 10/08/2018
 23370                                  	;JMP	SET_ACC_ERRW
 23371                                  	; 16/12/2022
 23372                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23373                                  	; 10/02/2024
 23374                                  	; ds=ss
 23375 000039EC E9E2FD                  	jmp	SET_ACC_ERR
 23376                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23377                                  	;;jmp	SET_ACC_ERRW	
 23378                                  
 23379                                  TESTTAIL:
 23380 000039EF 29D0                    	SUB     AX,DX
 23381 000039F1 7609                    	JBE	short NOGROW
 23382 000039F3 31D2                    	XOR     DX,DX
 23383                                  SETGRW:
 23384 000039F5 A3[DE05]                	MOV	[GROWCNT],AX
 23385 000039F8 8916[E005]              	MOV	[GROWCNT+2],DX
 23386                                  NOGROW:
 23387 000039FC 58                      	POP     AX
 23388                                  
 23389                                  ; 10/02/2024
 23390                                  %if 0
 23391                                  	MOV     CX,[CLUSNUM] ; *+ ; First cluster accessed
 23392                                  	call	FNDCLUS
 23393                                  %else
 23394                                  	; 10/02/2024 - Retro DOS v4.1
 23395 000039FD E8D410                  	call	FNDCLUS_X ; *+
 23396                                  %endif
 23397 00003A00 72EA                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23398                                  
 23399 00003A02 891E[BC05]              	MOV     [CLUSNUM],BX
 23400 00003A06 8916[BA05]              	MOV     [LASTPOS],DX
 23401                                  
 23402 00003A0A 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 23403 00003A0C 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 23404 00003A0E E3C4                    	JCXZ    HAVSTART        ; See if no more data
 23405 00003A10 51                      	PUSH    CX              ; No. of clusters short of first
 23406 00003A11 89C1                    	MOV     CX,AX
 23407 00003A13 E87F12                  	call	ALLOCATE
 23408 00003A16 59                      	POP     CX
 23409 00003A17 72C7                    	JC	short WRTERR
 23410 00003A19 8B16[BA05]              	MOV     DX,[LASTPOS]
 23411 00003A1D 42                      	INC     DX
 23412 00003A1E 49                      	DEC     CX
 23413 00003A1F 7405                    	JZ	short NOSKIP
 23414 00003A21 E8D410                  	call	SKPCLP
 23415 00003A24 72C6                    	JC	short ACC_ERRWJ ; ds=ss ; 10/02/2024
 23416                                  NOSKIP:
 23417 00003A26 891E[BC05]              	MOV     [CLUSNUM],BX
 23418 00003A2A 8916[BA05]              	MOV     [LASTPOS],DX
 23419                                  DOWRT:
 23420 00003A2E 833E[D205]00            	CMP     word [BYTCNT1],0
 23421 00003A33 7405                    	JZ	short WRTMID
 23422                                  	; 09/02/2024
 23423                                  	;MOV	BX,[CLUSNUM]	 ; (not used in 'BUFWRT') ; 09/02/2024
 23424 00003A35 E84F11                  	call	BUFWRT
 23425 00003A38 72B2                    	JC	short ACC_ERRWJ
 23426                                  WRTMID:
 23427 00003A3A A1[D605]                	MOV     AX,[SECCNT]
 23428 00003A3D 09C0                    	OR      AX,AX
 23429                                  	; 20/11/2022
 23430 00003A3F 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 23431 00003A41 0106[C405]              	ADD     [SECPOS],AX
 23432                                  	; 19/05/2019
 23433                                  	; MSDOS 6.0
 23434 00003A45 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 23435 00003A4A E89511                  	call	NEXTSEC
 23436                                  	; 16/12/2022
 23437 00003A4D 729D                    	JC	short ACC_ERRWJ
 23438                                  	;JC	short SET_ACC_ERRW	;M039
 23439 00003A4F C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 23440 00003A54 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 23441 00003A58 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 23442 00003A5C 8B0E[D605]              	MOV     CX,[SECCNT]
 23443                                  WRTLP:
 23444 00003A60 E8B011                  	call	OPTIMIZE
 23445 00003A63 7248                    	JC	short SET_ACC_ERRW
 23446                                  	; 16/12/2022
 23447                                  	;JC	short ACC_ERRWJ
 23448                                  
 23449                                  ;M039
 23450                                  ;       DI = Next physical cluster.
 23451                                  ;       AX = # sectors remaining.
 23452                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 23453                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23454                                  ;	     sectors, also termed an "Extent".)
 23455                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23456                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23457                                  ;
 23458                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23459                                  ;	are in Extent; they are being over-written.
 23460                                  
 23461 00003A65 57                      	push    di
 23462 00003A66 50                      	push    ax
 23463                                  
 23464                                  	; MSDOS 3.3
 23465                                  	; IBMDOS.COM (1987) - Offset 4497h
 23466                                  	;push	dx
 23467                                  	;push	bx
 23468                                  	;mov	al,[es:bp]
 23469                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 23470                                  	;mov	bx,cx
 23471                                  	;add	bx,dx	; (bx = Extent end)
 23472                                  
 23473                                  ;	DX = Extent start.
 23474                                  ;	BX = Extent end.
 23475                                  ;	AL = Drive #.
 23476                                  
 23477                                  	;call	SETVISIT
 23478                                  
 23479                                  ;wbufq1:
 23480                                  	;;or	byte [di+5],20h
 23481                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 23482                                  	;;cmp	al,[di+4]	
 23483                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 23484                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 23485                                  	;;cmp	[di+6],dx
 23486                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 23487                                  	;jb	short wbufq2
 23488                                  	;;cmp	[di+6],bx
 23489                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 23490                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 23491                                  
 23492                                  	;; Buffer sector is in the Extent
 23493                                  
 23494                                  	;;mov	word [di+4],20FFh
 23495                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 23496                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 23497                                  	;				; .buf_flags, AH = 0, reset/clear
 23498                                  	;call	SCANPLACE
 23499                                  ;wbufq2:
 23500                                  	;call	SKIPVISIT
 23501                                  	;jnz	short wbufq1
 23502                                  	;pop	bx
 23503                                  	;pop	dx
 23504                                  
 23505                                          ; MSDOS 6.0
 23506 00003A67 E82B01                  	call	DskWrtBufPurge		;DS trashed.
 23507                                  
 23508                                  ;ASSUME DS:NOTHING
 23509                                  ;M039
 23510                                  	; MSDOS 3.3 & MSDOS 6.0
 23511                                  ;hkn; SS override for DMAADD and ALLOWED
 23512 00003A6A 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 23513                                  	;mov	byte [ss:ALLOWED],38h
 23514 00003A6F 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 23515                                  
 23516                                  ;	put logic from DWRITE in-line here so we can modify it
 23517                                  ;	for DISK FULL conditions.
 23518                                  
 23519                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23520                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 23521                                  
 23522                                  	; 16/12/2022
 23523                                  	; MSDOS 3.3 (& MSDOS 5.0)
 23524                                  	;call	DWRITE
 23525                                  
 23526                                  ;DWRITE_OKAY:
 23527                                  
 23528                                  	; 16/12/2022
 23529                                  	; MSDOS 5.0 (& MSDOS 3.3)
 23530                                  	;pop	cx
 23531                                  	;pop	bx
 23532                                  	;push	ss
 23533                                  	;pop	ds
 23534                                  	;jc	short SET_ACC_ERRW
 23535                                  	;jcxz	WRTLAST
 23536                                  	;mov	dl,0
 23537                                  	;inc	word [LASTPOS]
 23538                                  	;jmp	short WRTLP
 23539                                  
 23540                                  	; 16/12/2022
 23541                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23542                                  DWRITE_LUP:
 23543                                  	; 23/07/2019 - Retro DOS v3.2
 23544                                  
 23545                                  	; MSDOS 6.0
 23546 00003A75 E8F9FB                  	call	DSKWRITE
 23547 00003A78 7417                    	jz	short DWRITE_OKAY
 23548                                  
 23549                                  ;;	int	3
 23550                                  
 23551 00003A7A 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 23552 00003A7C 7423                    	jz	short DWRITE_DISK_FULL
 23553                                  
 23554                                  	; 16/12/2022
 23555                                  
 23556                                  ;;hkn; SS override
 23557 00003A7E 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 23558 00003A84 E819FC                  	call	HARDERRRW
 23559 00003A87 3C01                    	CMP	AL,1		; Check for retry
 23560 00003A89 74EA                    	JZ	short DWRITE_LUP
 23561                                  
 23562                                  	; 16/12/2022
 23563                                  	; 23/07/2019
 23564                                  	;POP	CX ; *4*
 23565                                  	;POP	BX ; *5*
 23566                                  	;
 23567                                  	;push	ss
 23568                                  	;pop	ds
 23569                                  	;
 23570                                  
 23571                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23572                                  
 23573                                  	; 16/12/2022
 23574 00003A8B 3C03                    	CMP	AL,3		; Check for FAIL
 23575 00003A8D F8                      	CLC
 23576 00003A8E 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 23577 00003A90 F9                      	STC
 23578                                  
 23579                                  DWRITE_OKAY:
 23580                                  	; 16/12/2022
 23581                                  	; 23/07/2019
 23582                                  	; MSDOS 3.3 (& MSDOS 6.0)
 23583 00003A91 59                      	POP	CX ; *4*
 23584 00003A92 5B                      	POP	BX ; *5*
 23585                                  
 23586                                  ;       CX = # sectors remaining.
 23587                                  ;       BX = Next physical cluster.
 23588                                  
 23589                                  ;hkn; SS override
 23590                                          ;Context DS
 23591                                  	; 16/12/2022
 23592                                  	;push	ss
 23593                                  	;pop	ds
 23594                                  
 23595                                  	; 10/02/2024
 23596                                  	; 16/12/2022
 23597                                  	;jc	short SET_ACC_ERRW
 23598                                  
 23599                                  	; 16/12/2022
 23600 00003A93 16                      	push	ss
 23601 00003A94 1F                      	pop	ds
 23602                                  
 23603                                  	; 10/02/2024
 23604 00003A95 7216                    	jc	short SET_ACC_ERRW
 23605                                  
 23606 00003A97 E317                    	JCXZ    WRTLAST
 23607                                  
 23608                                  	; 10/02/2024
 23609 00003A99 B200                    	MOV	DL,0
 23610                                  	;xor	dl,dl ; 23/07/2019
 23611 00003A9B FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 23612 00003A9F EBBF                    	JMP     short WRTLP
 23613                                  
 23614                                  	; 23/07/2019 - Retro DOS v3.2
 23615                                  	; 09/08/2018
 23616                                  	; MSDOS 6.0
 23617                                  DWRITE_DISK_FULL:
 23618                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 23619                                  	; 16/12/2022
 23620 00003AA1 16                      	push	ss
 23621 00003AA2 1F                      	pop	ds
 23622 00003AA3 59                      	pop	cx		; unjunk stack
 23623 00003AA4 5B                      	pop	bx
 23624 00003AA5 C606[0B06]01            	mov	byte [DISK_FULL],1
 23625                                  	;stc
 23626 00003AAA E933FF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 23627                                  
 23628                                  	; 16/12/2022
 23629                                  SET_ACC_ERRW:
 23630                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss ; 10/02/2024
 23631                                  	; 10/02/2024
 23632                                  	; ds=ss
 23633 00003AAD E921FD                  	jmp	SET_ACC_ERR
 23634                                  
 23635                                  WRTLAST:
 23636 00003AB0 A1[D405]                	MOV     AX,[BYTCNT2]
 23637 00003AB3 09C0                    	OR      AX,AX
 23638 00003AB5 7413                    	JZ	short FINWRT
 23639 00003AB7 A3[D205]                	MOV     [BYTCNT1],AX
 23640 00003ABA E82511                  	call	NEXTSEC
 23641 00003ABD 72EE                    	JC	short SET_ACC_ERRW
 23642 00003ABF C706[CC05]0000          	MOV     word [BYTSECPOS],0
 23643 00003AC5 E8BF10                  	call	BUFWRT
 23644 00003AC8 72E3                    	JC	short SET_ACC_ERRW
 23645                                  FINWRT:
 23646 00003ACA C43E[9E05]              	LES     DI,[THISSFT]
 23647 00003ACE A1[DE05]                	MOV     AX,[GROWCNT]
 23648 00003AD1 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 23649 00003AD5 09C0                    	OR      AX,AX
 23650 00003AD7 7502                    	JNZ	short UPDATE_size
 23651 00003AD9 E30F                    	JCXZ    SAMSIZ
 23652                                  UPDATE_size:
 23653                                  	;add	[es:di+11h],ax
 23654 00003ADB 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 23655                                  	;adc	[es:di+13h],cx
 23656 00003ADF 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 23657                                  
 23658                                  ; Make sure that all other SFT's see this growth also.
 23659                                  
 23660 00003AE3 B80100                  	MOV     AX,1
 23661                                  ;if installed
 23662                                  	;Call	JShare + 14 * 4
 23663 00003AE6 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23664                                  ;else
 23665                                  ;	Call    ShSU
 23666                                  ;endif
 23667                                  
 23668                                  SAMSIZ:
 23669 00003AEA E97AFD                  	jmp	SETCLUS	; ES:DI already points to SFT
 23670                                  
 23671                                  	; 16/12/2022
 23672                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23673                                  ;SET_ACC_ERRW:
 23674                                  	;jmp	SET_ACC_ERR_DS
 23675                                  
 23676                                  WRTEOF:
 23677 00003AED 89C1                    	MOV     CX,AX
 23678 00003AEF 09D1                    	OR      CX,DX
 23679 00003AF1 746A                    	JZ	short KILLFIL
 23680 00003AF3 83E801                  	SUB     AX,1
 23681 00003AF6 83DA00                  	SBB     DX,0
 23682                                  
 23683                                  	; MSDOS 3.3
 23684                                  	;;div	word [es:bp+2]
 23685                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 23686                                  	;;mov	cl,[es:bp+5]
 23687                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23688                                  	;shr	ax,cl
 23689                                  
 23690                                  	; MSDOS 6.0
 23691 00003AF9 53                      	PUSH	BX
 23692                                  	;mov	bx,[es:bp+2]
 23693 00003AFA 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 23694 00003AFE E81A01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 23695 00003B01 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 23696 00003B02 89CA                    	MOV	DX,CX			      ;M039
 23697 00003B04 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 23698 00003B08 E83701                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 23699                                  
 23700 00003B0B 89C1                    	MOV     CX,AX
 23701 00003B0D E8C80F                  	call	FNDCLUS
 23702                                  SET_ACC_ERRWJ2:
 23703 00003B10 729B                    	JC	short SET_ACC_ERRW
 23704                                  
 23705 00003B12 E324                    	JCXZ    RELFILE
 23706 00003B14 E87E11                  	call	ALLOCATE
 23707                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 23708                                  	; 16/12/2022
 23709 00003B17 7303                    	jnc	short UPDATE
 23710 00003B19 E9C4FE                  	JMP	WRTERR
 23711                                  UPDATE:
 23712 00003B1C C43E[9E05]              	LES	DI,[THISSFT]
 23713 00003B20 A1[CE05]                	MOV	AX,[BYTPOS]
 23714                                  	;mov	[es:di+11h],ax
 23715 00003B23 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 23716 00003B27 A1[D005]                	MOV	AX,[BYTPOS+2]
 23717                                  	;mov	[es:di+13h],ax
 23718 00003B2A 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 23719                                  ;
 23720                                  ; Make sure that all other SFT's see this growth also.
 23721                                  ;
 23722 00003B2E B80200                  	MOV     AX,2
 23723                                  ;if installed
 23724                                  	;Call	JShare + 14 * 4
 23725 00003B31 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 23726                                  ;else
 23727                                  ;	Call    ShSU
 23728                                  ;endif
 23729 00003B35 31C9                    	XOR     CX,CX ; 0
 23730                                  	;jmp	ADDREC
 23731                                  	; 08/02/2024
 23732 00003B37 C3                      	retn
 23733                                  
 23734                                  	; 16/12/2022
 23735                                  ;WRTERRJ: 
 23736                                  	;JMP	WRTERR
 23737                                  
 23738                                  ;;;;;;;;;;;;;;;; 7/18/86
 23739                                  ;;;;;;;;;;;;;;;;
 23740                                  
 23741                                  RELFILE:
 23742                                  	; MSDOS 6.0
 23743 00003B38 06                      	PUSH	ES			;AN002; BL Reset Lstclus and cluspos to
 23744 00003B39 C43E[9E05]              	LES	DI,[THISSFT]		;AN002; BL beginning of file if current
 23745                                  	;cmp	dx,[es:di+19h]
 23746 00003B3D 263B5519                	CMP	DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 23747 00003B41 730E                    	JAE	short SKIPRESET			;AN002; BL
 23748                                  	;mov	[es:di+19h],0
 23749 00003B43 26C745190000            	MOV	word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 23750                                  	;mov	dx,[es:di+0Bh]
 23751 00003B49 268B550B                	MOV	DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 23752                                  	;mov	[es:di+35h],dx
 23753 00003B4D 26895535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 23754                                  SKIPRESET:					;AN002; BL
 23755 00003B51 07                      	POP	ES                    		;AN002; BL
 23756                                  ;
 23757 00003B52 BAFFFF                  	MOV	DX,0FFFFH
 23758 00003B55 E8EB11                  	call	RELBLKS
 23759                                  	; 16/12/2022
 23760                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23761 00003B58 73C2                    	jnc	short UPDATE
 23762                                  SET_ACC_ERRWJ:
 23763                                  	;JC	short SET_ACC_ERRWJ2
 23764                                  	;JMP	SHORT UPDATE
 23765                                  	; 16/12/2022
 23766                                  	;jmp	SET_ACC_ERR_DS ; ds<>ss
 23767                                  	; 10/02/2024
 23768                                  	; ds=ss
 23769 00003B5A E974FC                  	jmp	SET_ACC_ERR
 23770                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23771                                  	;JC	short SET_ACC_ERRWJ2
 23772                                  	;JMP	SHORT UPDATE
 23773                                  
 23774                                  KILLFIL:
 23775 00003B5D 31DB                    	XOR	BX,BX
 23776 00003B5F 06                      	PUSH	ES
 23777 00003B60 C43E[9E05]              	LES	DI,[THISSFT]
 23778                                  	;mov	[es:di+19h],bx
 23779 00003B64 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 23780                                  	;mov	[es:di+35h],bx ; 04/05/2019
 23781 00003B68 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 23782                                  	;xchg	bx,[es:di+0Bh]
 23783 00003B6C 26875D0B                	XCHG	BX,[ES:DI+SF_ENTRY.sf_firclus]
 23784 00003B70 07                      	POP	ES
 23785                                  
 23786 00003B71 09DB                    	OR	BX,BX
 23787                                  	;JZ	short UPDATEJ
 23788                                  	; 16/12/2022
 23789 00003B73 74A7                    	jz	short UPDATE
 23790                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23791                                  	;jz	short UPDATEJ
 23792                                  
 23793                                  ;; 10/23/86 FastOpen update
 23794 00003B75 06                      	PUSH	ES			; since first cluster # is 0
 23795 00003B76 55                      	PUSH	BP			; we must delete the old cache entry
 23796 00003B77 50                      	PUSH	AX
 23797 00003B78 51                      	PUSH	CX
 23798 00003B79 52                      	PUSH	DX
 23799 00003B7A C42E[8A05]              	LES	BP,[THISDPB]		; get current DPB
 23800                                  	; 15/12/2022
 23801 00003B7E 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 23802                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23803                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 23804 00003B82 89D9                    	MOV	CX,BX			; first cluster #
 23805 00003B84 B402                    	MOV	AH,2			; delete cache entry by drive:firclus
 23806 00003B86 E8DEEA                  	call	FastOpen_Update		; call fastopen
 23807 00003B89 5A                      	POP	DX
 23808 00003B8A 59                      	POP	CX
 23809 00003B8B 58                      	POP	AX
 23810 00003B8C 5D                      	POP	BP
 23811 00003B8D 07                      	POP	ES
 23812                                  ;; 10/23/86 FastOpen update
 23813                                  
 23814 00003B8E E8B011                  	call	RELEASE
 23815 00003B91 72C7                    	JC	short SET_ACC_ERRWJ
 23816                                  UPDATEJ:
 23817                                  	; 20/11/2022
 23818 00003B93 EB87                    	JMP	short UPDATE ; 10/08/2018
 23819                                  
 23820                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 23821                                  ;----------------------------------------------------------------------------
 23822                                  ;
 23823                                  ; Procedure Name : DskWrtBufPurge
 23824                                  ;
 23825                                  ; Inputs:
 23826                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 23827                                  ;	     sectors, also termed an "Extent".)
 23828                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 23829                                  ;       ES:BP -> Drive Parameter Block (DPB).
 23830                                  ;
 23831                                  ; Function:
 23832                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 23833                                  ;	are in Extent; they are being over-written.
 23834                                  ;
 23835                                  ; Outputs:
 23836                                  ;       (Same as Input.)
 23837                                  ; Uses:
 23838                                  ;       All registers except DS,AX,SI,DI preserved.
 23839                                  ;       SS override for all global variables.
 23840                                  ;----------------------------------------------------------------------------
 23841                                  ;M039: Created
 23842                                  
 23843                                  ;procedure   DskWrtBufPurge,NEAR
 23844                                  ;
 23845                                  ;ASSUME  DS:NOTHING
 23846                                  
 23847                                  ; 04/05/2019 - Retro DOS v4.0
 23848                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 23849                                  
 23850                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23851                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 23852                                  
 23853                                  DskWrtBufPurge:
 23854                                  	;SaveReg <bx,cx>
 23855 00003B95 53                      	push	bx
 23856 00003B96 51                      	push	cx
 23857                                  
 23858 00003B97 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 23859 00003B9C 89DE                    	mov	si,bx
 23860 00003B9E 01D1                    	add	cx,dx
 23861 00003BA0 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 23862                                  
 23863                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23864                                  	;;mov	al,[es:bp+0]
 23865                                  	;mov	al,[es:bp+DPB.DRIVE]
 23866                                  	; 15/12/2022
 23867 00003BA3 268A4600                	mov	al,[es:bp]
 23868                                  
 23869                                  ;	BX:DX = Extent start.
 23870                                  ;	SI:CX = Extent end + 1.
 23871                                  ;	AL = Drive #
 23872                                  
 23873 00003BA7 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 23874 00003BAD 7431                    	je	short nosc		; -no, jump.
 23875                                  
 23876                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 23877                                  ;	invalidate the entire SC. (This is an optimization; we really only
 23878                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 23879                                  
 23880 00003BAF 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 23881 00003BB4 752A                    	jne	short nosc		; -no, jump.
 23882                                  
 23883 00003BB6 50                      	push    ax
 23884 00003BB7 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 23885 00003BBB 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 23886                                  
 23887                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 23888                                  	;jbe	short sc5		; -yes, jump.
 23889                                  
 23890 00003BC0 39FE                    	cmp	si,di
 23891 00003BC2 7502                    	jne	short sc01
 23892 00003BC4 39C1                    	cmp	cx,ax
 23893                                  sc01: 
 23894 00003BC6 7617                    	jbe	short sc5
 23895                                  
 23896 00003BC8 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23897 00003BCD 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23898                                  	
 23899                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23900                                  	;jae	short sc5		; -yes, jump.
 23901                                  
 23902 00003BD0 39FB                    	cmp	bx,di
 23903 00003BD2 7502                    	jne	short sc02
 23904 00003BD4 39C2                    	cmp	dx,ax
 23905                                  sc02:
 23906 00003BD6 7307                    	jnb	short sc5
 23907                                  
 23908 00003BD8 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23909                                  sc5:	
 23910 00003BDF 58                      	pop     ax
 23911                                  
 23912                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23913                                  ;	written.
 23914                                  
 23915                                  nosc:	
 23916 00003BE0 E8601B                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23917                                  
 23918                                  _bufq:	
 23919                                  	;cmpo	al,[di+4]
 23920 00003BE3 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23921 00003BE6 7527                    	jne	short bufq5		; -no, jump.
 23922                                  
 23923                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23924                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23925                                  
 23926                                  	;cmp	bx,[di+8]
 23927 00003BE8 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23928 00003BEB 7503                    	jne	short bufq04
 23929                                  	;cmp	dx,[di+6]
 23930 00003BED 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23931                                  bufq04:
 23932 00003BF0 771D                    	ja	short bufq5
 23933                                  
 23934                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23935                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23936                                  
 23937                                  	;cmp	si,[di+8]
 23938 00003BF2 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23939 00003BF5 7503                    	jne	short bufq05
 23940                                  	;cmp	cx,[di+6]
 23941 00003BF7 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23942                                  bufq05:
 23943 00003BFA 7613                    	jbe	short bufq5
 23944                                  
 23945                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23946                                  
 23947                                  	;test	byte [di+5],40h
 23948 00003BFC F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23949 00003C00 7403                    	jz	short bufq4		; -no, jump.
 23950 00003C02 E8C81D                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23951                                  bufq4:
 23952                                  	;mov	word [di+4],20FFh
 23953 00003C05 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23954                                  
 23955 00003C0A E8481B                  	call	SCANPLACE
 23956 00003C0D EB02                    	jmp     short bufq6
 23957                                  bufq5: 
 23958 00003C0F 8B3D                    	mov     di,[di]
 23959                                  	;mov	di,[di+BUFFINFO.buf_next]
 23960                                  bufq6: 
 23961 00003C11 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23962 00003C16 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23963                                  	
 23964                                  	;RestoreReg <cx,bx>
 23965 00003C18 59                      	pop	cx
 23966 00003C19 5B                      	pop	bx
 23967 00003C1A C3                      	retn
 23968                                  
 23969                                  ;EndProc DskWrtBufPurge
 23970                                  
 23971                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23972                                  ;----------------------------------------------------------------------------
 23973                                  ;
 23974                                  ; Procedure Name : DIV32
 23975                                  ;
 23976                                  ; Inputs:
 23977                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23978                                  ; Function:
 23979                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23980                                  ; Outputs:
 23981                                  ;       CX:AX = quotient , DX= remainder
 23982                                  ; Uses:
 23983                                  ;       All registers except AX,CX,DX preserved.
 23984                                  ;----------------------------------------------------------------------------
 23985                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23986                                  
 23987                                  ; 04/05/2019 - Retro DOS v4.0
 23988                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23989                                  
 23990                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23991                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23992                                  
 23993                                  DIV32:
 23994 00003C1B 81FB0002                	cmp	bx,512
 23995 00003C1F 7515                    	jne	short div5
 23996                                  
 23997 00003C21 89D1                    	mov	cx,dx
 23998 00003C23 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23999 00003C25 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 24000 00003C29 88E0                    	mov	al,ah
 24001 00003C2B 88CC                    	mov	ah,cl
 24002 00003C2D 88E9                    	mov	cl,ch
 24003 00003C2F 30ED                    	xor	ch,ch
 24004 00003C31 D1E9                    	shr	cx,1
 24005 00003C33 D1D8                    	rcr	ax,1
 24006 00003C35 C3                      	retn
 24007                                  div5:	
 24008 00003C36 89C1                    	mov	cx,ax
 24009 00003C38 89D0                    	mov	ax,dx
 24010 00003C3A 31D2                    	xor	dx,dx
 24011 00003C3C F7F3                    	div	bx              ; 0:AX/BX
 24012 00003C3E 91                      	xchg	cx,ax
 24013 00003C3F F7F3                    	div	bx              ; DX:AX/BX
 24014 00003C41 C3                      	retn
 24015                                  
 24016                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 24017                                  ;----------------------------------------------------------------------------
 24018                                  ;
 24019                                  ; Procedure Name : SHR32
 24020                                  ;
 24021                                  ; Inputs:
 24022                                  ;	DX:AX = 32 bit sector number
 24023                                  ; Function:
 24024                                  ;       Perform 32 bit shift right
 24025                                  ; Outputs:
 24026                                  ;	AX = cluster number
 24027                                  ;	ZF = 1 if no error
 24028                                  ;	   = 0 if error (cluster number > 64k)
 24029                                  ; Uses:
 24030                                  ;       DX,CX
 24031                                  ;---------------------------------------------------------------------------
 24032                                  ; M017	- SHR32 rewritten for better performance
 24033                                  ; M039	- Additional optimization
 24034                                  
 24035                                  ; 04/05/2019 - Retro DOS v4.0
 24036                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 24037                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24038                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS)
 24039                                  SHR32:
 24040                                  	;mov	cl,[es:bp+5]
 24041 00003C42 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 24042 00003C46 30ED                    	xor	ch,ch	    ;ZF=1
 24043 00003C48 E306                    	jcxz	norota
 24044                                  
 24045                                  rotashft2:
 24046 00003C4A D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 24047 00003C4C D1D8                    	rcr	ax,1	    ;ZF not affected.
 24048 00003C4E E2FA                    	loop	rotashft2
 24049                                  norota:
 24050 00003C50 C3                      	retn
 24051                                  
 24052                                  ;============================================================================
 24053                                  ; DIR.ASM, MSDOS 6.0, 1991
 24054                                  ;============================================================================
 24055                                  ; 27/07/2018 - Retro DOS v3.0
 24056                                  ; 19/05/2019 - Retro DOS v4.0
 24057                                  
 24058                                  ;	TITLE	DIR - Directory and path cracking
 24059                                  ;	NAME	Dir
 24060                                  
 24061                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 24062                                  ;---------------------------------------------------------------------------
 24063                                  ;
 24064                                  ; Procedure Name : FINDENTRY,SEARCH
 24065                                  ;
 24066                                  ; Inputs:
 24067                                  ;	[THISDPB] set
 24068                                  ;	[SECCLUSPOS] = 0
 24069                                  ;	[DIRSEC] = Starting directory sector number
 24070                                  ;	[CLUSNUM] = Next cluster of directory
 24071                                  ;	[CLUSFAC] = Sectors/Cluster
 24072                                  ;	[NAME1] = Name to look for
 24073                                  ; Function:
 24074                                  ;	Find file name in disk directory.
 24075                                  ;	"?" matches any character.
 24076                                  ; Outputs:
 24077                                  ;	Carry set if name not found
 24078                                  ;	ELSE
 24079                                  ;	Zero set if attributes match (always except when creating)
 24080                                  ;	AH = Device ID (bit 7 set if not disk)
 24081                                  ;	[THISDPB] = Base of drive parameters
 24082                                  ;	DS = DOSGROUP
 24083                                  ;	ES = DOSGROUP
 24084                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 24085                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 24086                                  ;	[CURBUF] has directory record with match
 24087                                  ;	[NAME1] has file name
 24088                                  ;	[LASTENT] is entry number of the entry
 24089                                  ; All other registers destroyed.
 24090                                  ;----------------------------------------------------------------------------
 24091                                  
 24092                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 24093                                  ;hkn; this point.
 24094                                  
 24095                                  SEARCH:
 24096                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24097                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 24098                                  
 24099                                  	; 19/05/2019 - Retro DOS v4.0
 24100                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 24101                                  
 24102                                  	; 27/07/2018 - Retro DOS v3.0
 24103                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 24104                                  	; 15/03/2018 - Retro DOS v2.0
 24105                                  
 24106                                  	; 24/01/2024
 24107                                  
 24108                                  	;entry	FindEntry
 24109                                  FINDENTRY:
 24110 00003C51 E80C04                  	call	STARTSRCH
 24111 00003C54 A0[6B05]                	MOV	AL,[ATTRIB]
 24112                                  	;and	al,9Eh
 24113 00003C57 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 24114                                  	;cmp	al,8
 24115 00003C59 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 24116 00003C5B 7503                    	JNZ	short NOTVOLSRCH	; No
 24117 00003C5D E86601                  	CALL	SETROOTSRCH		; Yes force search of root
 24118                                  NOTVOLSRCH:
 24119 00003C60 E8F800                  	CALL	GETENTRY
 24120                                  	;JNC	short SRCH
 24121                                  	;JMP	SETESRET
 24122                                  	; 24/01/2024
 24123 00003C63 723F                    	jc	short SETESRET
 24124                                  
 24125                                  	;entry	Srch
 24126                                  SRCH:
 24127 00003C65 1E                      	PUSH	DS
 24128 00003C66 8E1E[E405]              	MOV	DS,[CURBUF+2]
 24129                                  
 24130                                  ;	(DS:BX) = directory entry address
 24131                                  
 24132 00003C6A 8A27                    	mov	ah,[BX]
 24133                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 24134 00003C6C 08E4                    	OR	AH,AH			; End of directory?
 24135 00003C6E 7437                    	JZ	short FREE
 24136                                  
 24137                                  ;hkn; SS override
 24138 00003C70 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 24139 00003C75 7430                    	JZ	short FREE
 24140                                  	;test	byte [bx+0Bh],8
 24141 00003C77 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 24142                                  					; Volume ID file?
 24143 00003C7B 7405                    	JZ	short CHKFNAM 		; NO
 24144                                  
 24145                                  ;hkn; SS override
 24146 00003C7D 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 24147                                  CHKFNAM:
 24148                                  ;	Context ES
 24149 00003C82 8CD6                    	MOV	SI,SS
 24150 00003C84 8EC6                    	MOV	ES,SI
 24151 00003C86 89DE                    	MOV	SI,BX
 24152                                  
 24153                                  ;hkn; NAME1 is in DOSDATA
 24154 00003C88 BF[4B05]                	MOV	DI,NAME1
 24155                                  ;;;;; 7/29/86
 24156                                  
 24157                                  ;hkn; SS override for NAME1
 24158                                  	;CMP	BYTE [SS:NAME1],0E5H	; special char check
 24159                                  	;JNZ	short NO_E5
 24160                                  	;MOV	BYTE [SS:NAME1],05H
 24161                                  	; 22/09/2023
 24162 00003C8B 26803DE5                	cmp	byte [es:di],0E5h
 24163 00003C8F 7504                    	jnz	short NO_E5
 24164 00003C91 26C60505                	mov	byte [es:di],05h
 24165                                  NO_E5:
 24166                                  ;;;;; 7/29/86
 24167 00003C95 E86100                  	CALL	MetaCompare
 24168 00003C98 7429                    	JZ	short FOUND
 24169 00003C9A 1F                      	POP	DS
 24170                                  
 24171                                  	;entry	NEXTENT
 24172                                  NEXTENT:
 24173 00003C9B C42E[8A05]              	LES	BP,[THISDPB]
 24174 00003C9F E86600                  	CALL	NEXTENTRY
 24175 00003CA2 73C1                    	JNC	short SRCH
 24176                                  	;JMP	SHORT SETESRET
 24177                                  	; 24/01/2024
 24178                                  SETESRET:
 24179 00003CA4 16                      	PUSH	SS
 24180 00003CA5 07                      	POP	ES
 24181 00003CA6 C3                      	retn
 24182                                  FREE:
 24183 00003CA7 1F                      	POP	DS
 24184 00003CA8 8B0E[4803]              	MOV	CX,[LASTENT]
 24185 00003CAC 3B0E[D805]              	CMP	CX,[ENTFREE]
 24186 00003CB0 7304                    	JAE	short TSTALL
 24187 00003CB2 890E[D805]              	MOV	[ENTFREE],CX
 24188                                  TSTALL:
 24189 00003CB6 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 24190                                  NEXTENTJ:
 24191 00003CBA 74DF                    	je	short NEXTENT 		; No - continue search
 24192 00003CBC 890E[DA05]              	MOV	[ENTLAST],CX
 24193 00003CC0 F9                      	STC
 24194 00003CC1 EBE1                    	JMP	SHORT SETESRET
 24195                                  
 24196                                  FOUND:
 24197                                  ; We have a file with a matching name. We must now consider the attributes:
 24198                                  ; ATTRIB	Action
 24199                                  ; ------	------
 24200                                  ; Volume_ID	Is Volume_ID in test?
 24201                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 24202                                  ;		If create then Is ATTRIB equal to test?
 24203                                  
 24204 00003CC3 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 24205 00003CC5 1F                      	POP	DS
 24206 00003CC6 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 24207                                  	;and	ah,9Eh
 24208 00003CCA 80E4DE                  	AND	AH,~attr_ignore
 24209                                  	;lea	si,[si+15]
 24210 00003CCD 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 24211                                  					; point to first cluster field
 24212                                  	;test	ch,8
 24213 00003CD0 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 24214 00003CD3 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 24215                                  	;test	ah,8
 24216 00003CD5 F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 24217                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 24218                                  	; 16/12/2022
 24219 00003CD8 74C1                    	jz	short NEXTENT ; 19/05/2019
 24220                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24221                                  	;JZ	short NEXTENTJ
 24222 00003CDA 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 24223 00003CDC EB11                    	JMP	SHORT RETFF		; Found Volume ID
 24224                                  check_one_volume_id:
 24225                                  	;CMP	ah,8
 24226 00003CDE 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 24227                                  	;JZ	short NEXTENTJ		; Yes, continue search
 24228                                  	; 16/12/2022
 24229 00003CE1 74B8                    	je	short NEXTENT ; 19/05/2019
 24230                                  	;JZ	short NEXTENTJ
 24231 00003CE3 E88E03                  	CALL	MatchAttributes
 24232 00003CE6 7407                    	JZ	SHORT RETFF
 24233 00003CE8 F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 24234                                  	; 16/12/2022
 24235                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 24236 00003CED 74AC                    	jz	short NEXTENT ; 19/05/2019
 24237                                  RETFF:
 24238 00003CEF C42E[8A05]              	LES	BP,[THISDPB]
 24239                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24240                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 24241                                  	; 15/12/2022
 24242 00003CF3 268A6600                	MOV	AH,[ES:BP]
 24243                                  ;SETESRET:
 24244                                  	;PUSH	SS
 24245                                  	;POP	ES
 24246                                  	;retn
 24247                                  	; 24/01/2024
 24248 00003CF7 EBAB                    	jmp	short SETESRET	
 24249                                  
 24250                                  ;----------------------------------------------------------------------------
 24251                                  ;
 24252                                  ; Procedure Name : MetaCompare
 24253                                  ;
 24254                                  ; Inputs:
 24255                                  ;	DS:SI -> 11 character FCB style name NO '?'
 24256                                  ;	    Typically this is a directory entry. It MUST be in upper case
 24257                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 24258                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 24259                                  ; Function:
 24260                                  ;	Compare FCB style names allowing for ? match to any char
 24261                                  ; Outputs:
 24262                                  ;	Zero if match else NZ
 24263                                  ; Destroys CX,SI,DI all others preserved
 24264                                  ;----------------------------------------------------------------------------
 24265                                  
 24266                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24267                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 24268                                  
 24269                                  MetaCompare:
 24270 00003CF9 B90B00                  	MOV	CX,11
 24271                                  WILDCRD:
 24272 00003CFC F3A6                    	REPE	CMPSB
 24273 00003CFE 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 24274                                  CHECK_META:
 24275 00003D00 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 24276 00003D05 74F5                    	JZ	short WILDCRD
 24277                                  MetaRet:
 24278 00003D07 C3                       	retn				; Zero set, Match
 24279                                  
 24280                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 24281                                  ;----------------------------------------------------------------------------
 24282                                  ;
 24283                                  ; Procedure Name : NEXTENTRY
 24284                                  ;
 24285                                  ; Inputs:
 24286                                  ;	Same as outputs of GETENTRY, above
 24287                                  ; Function:
 24288                                  ;	Update BX, and [LASTENT] for next directory entry.
 24289                                  ;	Carry set if no more.
 24290                                  ;----------------------------------------------------------------------------
 24291                                  
 24292                                  NEXTENTRY:
 24293                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24294                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 24295                                  
 24296                                  	; 19/05/2019 - Retro DOS v4.0
 24297                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 24298                                  
 24299                                  	; 27/07/2018 - Retro DOS v3.0
 24300                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 24301                                  	; 15/03/2018 - Retro DOS v2.0
 24302                                  
 24303 00003D08 A1[4803]                	MOV	AX,[LASTENT]
 24304 00003D0B 3B06[DA05]              	CMP	AX,[ENTLAST]
 24305 00003D0F 7422                    	JZ	short NONE
 24306 00003D11 40                      	INC	AX
 24307                                  	;ADD	BX,32
 24308 00003D12 8D5F20                  	LEA	BX,[BX+32]
 24309 00003D15 39D3                    	CMP	BX,DX
 24310                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 24311                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 24312                                  	; 16/12/2022
 24313 00003D17 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 24314 00003D19 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 24315 00003D1D FEC3                    	INC	BL
 24316 00003D1F 3A1E[7705]              	CMP	BL,[CLUSFAC]
 24317 00003D23 7215                    	JB	short SAMECLUS
 24318 00003D25 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 24319 00003D29 E86E16                  	call	IsEOF
 24320 00003D2C 7305                    	JAE	short NONE
 24321                                  	; 23/07/2019
 24322 00003D2E 83FB02                  	CMP	BX,2
 24323                                  	;JB	short NONE
 24324                                  	;JMP	short GETENT
 24325                                  	; 16/12/2022
 24326 00003D31 732B                    	jnb	short GETENT
 24327                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24328                                  	;JB	short NONE
 24329                                  	;JMP	short GETENT
 24330                                  NONE:
 24331 00003D33 F9                      	STC
 24332 00003D34 C3                      	retn
 24333                                  HAVIT:
 24334 00003D35 A3[4803]                	MOV	[LASTENT],AX
 24335 00003D38 F8                      	CLC
 24336                                  nextentry_retn:
 24337 00003D39 C3                      	retn
 24338                                  
 24339                                  SAMECLUS:
 24340 00003D3A 881E[7305]              	MOV	[SECCLUSPOS],BL
 24341 00003D3E A3[4803]                	MOV	[LASTENT],AX
 24342 00003D41 1E                      	PUSH	DS
 24343 00003D42 C53E[E205]              	LDS	DI,[CURBUF]
 24344                                  	; 19/05/2019
 24345                                  	; MSDOS 6.0
 24346                                  	;;mov	dx,[di+8]
 24347                                  	; 23/09/2023
 24348                                  	;MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 24349                                  ;hkn; SS override
 24350                                  	;MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 24351                                  
 24352                                  ; 14/02/2024
 24353                                  %if 0
 24354                                  	; 23/09/2023
 24355                                  	mov	si,[di+BUFFINFO.buf_sector+2]
 24356                                  	
 24357                                  	;mov	dx,[di+6]
 24358                                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 24359                                  
 24360                                  	;inc	dx ; MSDOS 3.3
 24361                                  	; MSDOS 6.0
 24362                                  	;ADD	DX,1				;AN000; >32mb
 24363                                  	;ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 24364                                  	; 23/09/2023
 24365                                  	inc	dx
 24366                                  	jnz	short nextexntry_fc
 24367                                  	inc	si
 24368                                  	;inc	word [SS:HIGH_SECTOR]
 24369                                  nextexntry_fc:
 24370                                  	; 23/09/2023
 24371                                  	mov	[SS:HIGH_SECTOR],si
 24372                                  	; MSDOS 3.3 & MSDOS 6.0
 24373                                  	POP	DS
 24374                                  %else
 24375                                  	; 14/02/2024 - Retro DOS v5.0
 24376 00003D46 C55506                  	lds	dx,[di+BUFFINFO.buf_sector]
 24377 00003D49 8CDE                    	mov	si,ds
 24378 00003D4B 1F                      	pop	ds
 24379 00003D4C 42                      	inc	dx
 24380 00003D4D 7501                    	jnz	short nextexntry_fc
 24381 00003D4F 46                      	inc	si
 24382                                  nextexntry_fc:
 24383 00003D50 8936[0706]              	mov	[HIGH_SECTOR],si
 24384                                  %endif
 24385                                  
 24386 00003D54 E868F8                  	call	FIRSTCLUSTER
 24387 00003D57 31DB                    	XOR	BX,BX
 24388 00003D59 EB21                    	JMP	short SETENTRY
 24389                                  
 24390                                  ;----------------------------------------------------------------------------
 24391                                  ;
 24392                                  ; Procedure Name : GETENTRY
 24393                                  ;
 24394                                  ; Inputs:
 24395                                  ;	[LASTENT] has directory entry
 24396                                  ;	ES:BP points to drive parameters
 24397                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 24398                                  ; Function:
 24399                                  ;	Locates directory entry in preparation for search
 24400                                  ;	GETENT provides entry for passing desired entry in AX
 24401                                  ; Outputs:
 24402                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 24403                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 24404                                  ;	[LASTENT] = New directory entry number
 24405                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 24406                                  ;	Carry set if error (currently user FAILed to I 24)
 24407                                  ;----------------------------------------------------------------------------
 24408                                  
 24409                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24410                                  GETENTRY:
 24411                                  	; 27/07/2018 - Retro DOS v3.0
 24412 00003D5B A1[4803]                	MOV	AX,[LASTENT]
 24413                                  
 24414                                  	;entry	GETENT
 24415                                  GETENT:
 24416 00003D5E A3[4803]                	MOV	[LASTENT],AX
 24417                                  ;
 24418                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 24419                                  ; directory.
 24420                                  ;
 24421 00003D61 B105                    	mov	cl,5			; shift left by 5 = mult by 32
 24422 00003D63 D3C0                    	rol	ax,cl			; keep hight order bits
 24423 00003D65 89C2                    	mov	dx,ax
 24424                                  	; 19/05/2019 - Retro DOS v4.0
 24425                                  	;and	ax,0FFE0h
 24426                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24427                                  	;and	ax,~(32-1)		; mask off high order bits
 24428                                  	; 16/12/2022
 24429 00003D67 24E0                    	and	al,0E0h ; ~31
 24430 00003D69 83E21F                  	and	dx,1Fh
 24431                                  	;and	dx,32-1			; mask off low order bits
 24432                                  ;
 24433                                  ; DX:AX contain the byte offset of the required directory entry from the
 24434                                  ; beginning of the directory. Convert this to a sector number. Round the
 24435                                  ; sector size down to a multiple of 32.
 24436                                  ;
 24437                                  	;mov	bx,[es:bp+2]
 24438 00003D6C 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 24439 00003D70 80E3E0                  	and	bl,0E0h
 24440                                  	;AND	BL,255-31		; Must be multiple of 32
 24441 00003D73 F7F3                    	DIV	BX
 24442                                  	; 14/02/2024
 24443                                  	;MOV	BX,DX			; Position within sector
 24444                                  				; NOTE: This BX value is not used in DIRREAD
 24445                                  				; Erdogan Tan - 14/02/2024
 24446                                  	;PUSH	BX
 24447 00003D75 52                      	push	dx
 24448                                  	;
 24449 00003D76 E8F2F7                  	call	DIRREAD
 24450 00003D79 5B                      	POP	BX
 24451                                  	;retc
 24452 00003D7A 72BD                    	jc	short nextentry_retn
 24453                                  SETENTRY:
 24454 00003D7C 8B16[E205]              	MOV	DX,[CURBUF]
 24455                                  	;add	dx,16 ; MSDOS 3.3
 24456                                  	;add	dx,20 ; MSDOS 6.0 
 24457 00003D80 83C214                  	ADD	DX,BUFINSIZ
 24458 00003D83 01D3                    	ADD	BX,DX
 24459                                  	;add	dx,[es:bp+2]
 24460 00003D85 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 24461                                  	; 29/12/2022
 24462                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 24463 00003D89 F8                      	clc
 24464 00003D8A C3                      	retn
 24465                                  
 24466                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 24467                                  ;----------------------------------------------------------------------------
 24468                                  ;
 24469                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 24470                                  ;
 24471                                  ; Inputs:
 24472                                  ;	BX cluster number of start of directory
 24473                                  ;	ES:BP Points to DPB
 24474                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 24475                                  ; Function:
 24476                                  ;	Set up a directory search
 24477                                  ; Outputs:
 24478                                  ;	[DIRSTART] = BX
 24479                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 24480                                  ;	Carry set if error (currently user FAILed to I 24)
 24481                                  ; destroys AX,DX,BX
 24482                                  ;----------------------------------------------------------------------------
 24483                                  
 24484                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24485                                  SETDIRSRCH:
 24486 00003D8B 09DB                    	OR	BX,BX
 24487 00003D8D 7437                    	JZ	short SETROOTSRCH
 24488 00003D8F 891E[C205]              	MOV	[DIRSTART],BX
 24489                                  	;mov	al,[es:bp+4]
 24490 00003D93 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 24491 00003D97 FEC0                    	INC	AL
 24492 00003D99 A2[7705]                	MOV	[CLUSFAC],AL
 24493                                  
 24494                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24495                                  	;SAVE	<SI>
 24496 00003D9C 56                      	push	si
 24497                                  	;test	byte [FastOpenFlg],2
 24498 00003D9D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24499 00003DA2 7507                    	JNZ	short UNP_OK
 24500                                  
 24501                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 24502                                  	;invoke	UNPACK
 24503 00003DA4 E80A16                  	call	UNPACK
 24504 00003DA7 7302                    	JNC	short UNP_OK
 24505                                  	;RESTORE <SI>
 24506 00003DA9 5E                      	pop	si
 24507                                  	;return
 24508 00003DAA C3                      	retn
 24509                                  
 24510                                  UNP_OK:
 24511 00003DAB 893E[BC05]              	MOV	[CLUSNUM],DI
 24512 00003DAF 89DA                    	MOV	DX,BX
 24513 00003DB1 30DB                    	XOR	BL,BL
 24514 00003DB3 881E[7305]              	MOV	[SECCLUSPOS],BL
 24515                                  	;invoke	FIGREC
 24516 00003DB7 E8B70E                  	call	FIGREC
 24517                                  	;RESTORE <SI>
 24518 00003DBA 5E                      	pop	si
 24519                                  	
 24520                                  	; 19/05/2019 - Retro DOS v4.0
 24521                                  
 24522                                  	; MSDOS 6.0
 24523                                  	;PUSH	DX			   ;AN000; >32mb
 24524                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 24525                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 24526                                  	;POP	DX			   ;AN000; >32mb
 24527                                  
 24528                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24529                                  	;push	dx
 24530                                  	;mov	dx,[HIGH_SECTOR]
 24531                                  	;mov	[DIRSEC+2],dx
 24532                                  	;pop	dx
 24533                                  	;MOV	[DIRSEC],dx
 24534                                  	; 16/12/2022
 24535 00003DBB A1[0706]                	mov	ax,[HIGH_SECTOR]
 24536 00003DBE A3[C005]                	mov	[DIRSEC+2],AX
 24537 00003DC1 8916[BE05]              	MOV	[DIRSEC],DX
 24538                                  
 24539                                  	; 16/12/2022
 24540                                  	; cf=0 (at the return of FIGREC)
 24541                                  	;CLC
 24542 00003DC5 C3                      	retn
 24543                                  
 24544                                  	;entry	SETROOTSRCH
 24545                                  SETROOTSRCH:
 24546 00003DC6 31C0                    	XOR	AX,AX
 24547 00003DC8 A3[C205]                	MOV	[DIRSTART],AX
 24548                                  	; 22/09/2023
 24549 00003DCB A3[C005]                	mov	[DIRSEC+2],ax ; 0
 24550 00003DCE A2[7305]                	MOV	[SECCLUSPOS],AL
 24551 00003DD1 48                      	DEC	AX
 24552 00003DD2 A3[BC05]                	MOV	[CLUSNUM],AX
 24553                                  	;mov	ax,[es:bp+0Bh]
 24554 00003DD5 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 24555                                  	; 19/05/2019
 24556                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 24557                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 24558 00003DD9 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 24559 00003DDD 29D0                    	SUB	AX,DX
 24560 00003DDF A2[7705]                	MOV	[CLUSFAC],AL
 24561 00003DE2 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 24562                                  	; 22/09/2023
 24563                                  	; MSDOS 6.0
 24564                                  	;MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 24565 00003DE6 F8                      	CLC
 24566 00003DE7 C3                      	retn
 24567                                  
 24568                                  ;============================================================================
 24569                                  ; DIR2.ASM, MSDOS 6.0, 1991
 24570                                  ;============================================================================
 24571                                  ; 27/07/2018 - Retro DOS v3.0
 24572                                  ; 19/05/2019 - Retro DOS v4.0 
 24573                                  
 24574                                  ;	TITLE	DIR2 - Directory and path cracking
 24575                                  ;	NAME	Dir2
 24576                                  
 24577                                  ;Break	<GETPATH -- PARSE A WFP>
 24578                                  ;----------------------------------------------------------------------------
 24579                                  ;
 24580                                  ; Procedure Name : GETPATH
 24581                                  ;
 24582                                  ; Inputs:
 24583                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 24584                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 24585                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24586                                  ;		( = -1 if current dir not involved, else
 24587                                  ;		 Points to first char after last "/" of current dir part)
 24588                                  ;	[THISCDS] Points to CDS being used
 24589                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 24590                                  ;	[NoSetDir] set
 24591                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 24592                                  ; Function:
 24593                                  ;	Crack the path
 24594                                  ; Outputs:
 24595                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 24596                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 24597                                  ;	ID1 field of [THISCDS] updated appropriately
 24598                                  ;	[ATTRIB] = [SATTRIB]
 24599                                  ;	ES:BP Points to DPB
 24600                                  ;	Carry set if bad path
 24601                                  ;	   SI Points to path element causing failure
 24602                                  ;	   Zero set
 24603                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24604                                  ;	      start a search on the last directory
 24605                                  ;	      CL is zero if there is a bad name in the path
 24606                                  ;	      CL is non-zero if the name was simply not found
 24607                                  ;		 [ENTFREE] may have free spot in directory
 24608                                  ;		 [NAME1] is the name.
 24609                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24610                                  ;	   Zero reset
 24611                                  ;	      File in middle of path or bad name in path or attribute mismatch
 24612                                  ;		or path too long or malformed path
 24613                                  ;	ELSE
 24614                                  ;	   [CurBuf] = -1 if root directory
 24615                                  ;	   [CURBUF] contains directory record with match
 24616                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24617                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 24618                                  ;	   AH = device ID
 24619                                  ;	      bit 7 of AH set if device SI and BX
 24620                                  ;	      will point DOSGROUP relative The firclus
 24621                                  ;	      field of the device entry contains the device pointer
 24622                                  ;	   [NAME1] Has name looked for
 24623                                  ;	   If last element is a directory zero is set and:
 24624                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24625                                  ;	      are set up to start a search on it.
 24626                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24627                                  ;	      like that for a file (except for zero flag)
 24628                                  ;	   If last element is a file zero is reset
 24629                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24630                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24631                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24632                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24633                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24634                                  ; DS preserved, Others destroyed
 24635                                  ;---------------------------------------------------------------------------
 24636                                  
 24637                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 24638                                  ;hkn; DS already set up at this point.
 24639                                  
 24640                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24641                                  GETPATH:
 24642                                  	;mov	word [CREATING],0E500h
 24643 00003DE8 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 24644                                  
 24645                                  ; Same as GetPath only CREATING and DELALL already set
 24646                                  
 24647                                  	;entry	GetPathNoSet
 24648                                  GetPathNoSet:
 24649                                  	;mov	byte [EXTERR_LOCUS],2	
 24650 00003DEE C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 24651 00003DF3 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 24652                                  
 24653                                  ; See if the input indicates a device that has already been detected. If so,
 24654                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 24655                                  
 24656 00003DF9 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 24657                                  	;cmp	word [DI+1],5C3Ah
 24658                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 24659 00003DFD 817D013A5C              	cmp	word [DI+1],':\'
 24660 00003E02 7437                    	JZ	short CrackIt
 24661                                  
 24662                                  ; Let ChkDev find it in the device list
 24663                                  
 24664 00003E04 83C703                  	ADD	DI,3
 24665                                  	; 18/08/2018
 24666                                  	;MOV	SI,DI			; let CHKDEV see the original name
 24667                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24668                                  	; 16/12/2022
 24669                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 24670 00003E07 E89E00                  	CALL	CHKDEV
 24671 00003E0A 722D                    	JC	short InternalError
 24672                                  
 24673                                  Build_devJ:
 24674 00003E0C A0[6D05]                	MOV	AL,[SATTRIB]
 24675 00003E0F A2[6B05]                	MOV	[ATTRIB],AL
 24676                                  	;mov	byte [EXTERR_LOCUS],1
 24677 00003E12 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 24678                                  					; "finding" a char device
 24679                                  					; set LOCUS to Unknown. This makes
 24680                                  					; certain idiotic problems reported
 24681                                  					; by a certain 3 letter OEM go away.
 24682                                  
 24683                                  ; Take name in name1 and pack it back into where wfp_start points. This
 24684                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 24685                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 24686                                  ; wfp into the share set.
 24687                                  ;
 24688                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 24689                                  ; non-space seen +1.  This position is kept in DX.
 24690                                  
 24691                                  ;hkn; SS is DOSDATA
 24692 00003E17 16                      	push	ss
 24693 00003E18 07                      	pop	es
 24694                                  
 24695                                  ;hkn; NAME1 is in DOSDATA
 24696 00003E19 BE[4B05]                	mov	si,NAME1
 24697 00003E1C 8B3E[B205]              	mov	di,[WFP_START]
 24698 00003E20 89FA                    	mov	dx,di
 24699 00003E22 B90800                  	mov	cx,8			; 8 chars in device name
 24700                                  MoveLoop:
 24701 00003E25 AC                      	lodsb
 24702 00003E26 AA                      	stosb
 24703 00003E27 3C20                    	cmp	al," "
 24704 00003E29 7402                    	jz	short NoSave
 24705                                  
 24706 00003E2B 89FA                    	mov	dx,di
 24707                                  NoSave:
 24708 00003E2D E2F6                    	loop	MoveLoop
 24709                                  
 24710                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 24711                                  ; at this point.
 24712                                  
 24713 00003E2F 89D7                    	mov	di,dx
 24714                                  	;mov	byte [di],0		; end of string
 24715                                  	; 15/02/2024
 24716 00003E31 880D                    	mov	[di],cl ; 0
 24717 00003E33 E8A902                  	call	Build_device_ent	; Clears carry sets zero
 24718 00003E36 FEC0                    	INC	AL			; reset zero
 24719 00003E38 C3                      	retn
 24720                                  
 24721                                  InternalError:
 24722                                  InternalError_loop:
 24723 00003E39 EBFE                    	JMP	short InternalError_loop ; freeze
 24724                                  
 24725                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 24726                                  
 24727                                  CrackIt:
 24728                                  ; 15/02/2024
 24729                                  %if 0
 24730                                  	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 24731                                  	CMP	SI,-1			; valid?
 24732                                  	JNZ	short LOOK_SING		; Yes, use it.
 24733                                  	LEA	SI,[DI+3]		; skip D:\.
 24734                                  LOOK_SING:
 24735                                  %endif
 24736                                  	;mov	byte [ATTRIB],16h
 24737 00003E3B C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 24738                                  					; Attributes to search through Dirs
 24739 00003E40 C43E[A205]              	LES	DI,[THISCDS]
 24740 00003E44 B8FFFF                  	MOV	AX,-1
 24741                                  	;mov	bx,[es:di+73]
 24742 00003E47 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 24743 00003E4B 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 24744                                  
 24745                                  ; AX = -1
 24746                                  ; BX = cluster number of current directory. THis number is -1 if the media
 24747                                  ;      has been uncertainly changed.
 24748                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 24749                                  ;      may be -1 if no current directory part has been used.
 24750                                  
 24751 00003E4F 39C6                    	CMP	SI,AX			; if Current directory is not part
 24752 00003E51 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 24753 00003E53 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 24754                                  
 24755                                  ; DOS 3.3  6/25/86
 24756 00003E55 7437                    	JZ	short NO_CURR_D		; no, crack from the root
 24757                                  	;test	byte [FastOpenFlg],1
 24758 00003E57 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 24759 00003E5C 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 24760 00003E5E 06                      	PUSH	ES			; save registers
 24761 00003E5F 57                      	PUSH	DI
 24762 00003E60 51                      	PUSH	CX
 24763 00003E61 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 24764 00003E64 56                      	PUSH	SI
 24765 00003E65 53                      	PUSH	BX
 24766                                  
 24767 00003E66 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 24768 00003E6A 8B36[B205]              	MOV	SI,[WFP_START]
 24769                                  
 24770                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 24771 00003E6E BB[300D]                	MOV	BX,FastOpenTable
 24772 00003E71 BF[460D]                	MOV	DI,Dir_Info_Buff
 24773 00003E74 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24774                                  	;mov	al,1
 24775 00003E77 B001                    	MOV	AL,FONC_Look_up
 24776 00003E79 1E                      	PUSH	DS
 24777 00003E7A 07                      	POP	ES
 24778                                  	;call	far [BX+2]
 24779 00003E7B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 24780 00003E7E 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 24781                                  					; Go to Got_Srch_cluster
 24782                                  	; 29/12/2022
 24783                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 24784                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 24785                                  	;stc
 24786                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 24787                                  
 24788 00003E80 803C01                  	cmp	byte [si],1
 24789                                  GO_Chk_end1:	; 29/12/2022
 24790 00003E83 F5                      	cmc 
 24791                                  	; [si] = 0 -> cf = 0
 24792                                  	; [si] > 0 -> cf = 1
 24793                                  
 24794                                  ;GO_Chk_end1:
 24795                                  	; 29/12/2022
 24796                                  	;clc
 24797                                  
 24798                                  GO_Chk_end:				; restore registers
 24799 00003E84 5B                      	POP	BX
 24800 00003E85 5E                      	POP	SI
 24801 00003E86 8F44FF                  	POP	word [SI-1]
 24802 00003E89 59                      	POP	CX
 24803 00003E8A 5F                      	POP	DI
 24804 00003E8B 07                      	POP	ES
 24805 00003E8C 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 24806                                  
 24807                                  ; DOS 3.3  6/25/86
 24808                                  ;
 24809                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 24810                                  ; of path and go crack from root.
 24811                                  
 24812                                  NO_CURR_D:
 24813 00003E8E 8B36[B205]              	MOV	SI,[WFP_START]
 24814                                  	;LEA	SI,[SI+3]		; Skip "d:/"
 24815                                  	; 15/02/2024
 24816 00003E92 83C603                  	add	si,3
 24817 00003E95 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24818 00003E99 EB37                    	JMP	short ROOTPATH
 24819                                  
 24820                                  ; We are able to crack from the current directory part. Go set up for search
 24821                                  ; of specified cluster.
 24822                                  
 24823                                  GOT_SEARCH_CLUSTER:
 24824 00003E9B C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 24825 00003E9F E8E9FE                  	call	SETDIRSRCH
 24826                                  	;JC	short SETFERR
 24827                                  	;JMP	short FINDPATH
 24828                                  	; 16/12/2022
 24829 00003EA2 733F                    	jnc	short FINDPATH ; 17/08/2018
 24830                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24831                                  	;JC	short SETFERR
 24832                                  	;JMP	short FINDPATH
 24833                                  SETFERR:
 24834 00003EA4 30C9                    	XOR	CL,CL			; set zero
 24835 00003EA6 F9                      	STC
 24836 00003EA7 C3                      	retn
 24837                                  
 24838                                  ;---------------------------------------------------------------------------
 24839                                  ;
 24840                                  ; Procedure Name : ChkDev
 24841                                  ;
 24842                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 24843                                  ;   device.
 24844                                  ; Blasts CX,SI,DI,AX,BX
 24845                                  ;---------------------------------------------------------------------------
 24846                                  
 24847                                  CHKDEV:
 24848 00003EA8 89FE                    	MOV	SI,DI
 24849                                  	;MOV	DI,SS
 24850                                  	;MOV	ES,DI
 24851                                  	; 27/06/2024
 24852 00003EAA 16                      	push	ss
 24853 00003EAB 07                      	pop	es
 24854                                  
 24855 00003EAC BF[4B05]                	MOV	DI,NAME1
 24856 00003EAF B90900                  	MOV	CX,9
 24857                                  TESTLOOP:
 24858 00003EB2 E80B10                  	call	GETLET
 24859                                  
 24860 00003EB5 3C2E                    	CMP	AL,'.'
 24861 00003EB7 740E                    	JZ	short TESTDEVICE
 24862 00003EB9 E85A10                  	call	PATHCHRCMP
 24863 00003EBC 7407                    	JZ	short NOTDEV
 24864 00003EBE 08C0                    	OR	AL,AL
 24865 00003EC0 7405                    	JZ	short TESTDEVICE
 24866                                  
 24867 00003EC2 AA                      	STOSB
 24868 00003EC3 E2ED                    	LOOP	TESTLOOP
 24869                                  NOTDEV:
 24870 00003EC5 F9                      	STC
 24871 00003EC6 C3                      	retn
 24872                                  
 24873                                  TESTDEVICE:
 24874                                  	;ADD	CX,2
 24875                                  	; 24/09/2023
 24876 00003EC7 41                      	inc	cx
 24877 00003EC8 41                      	inc	cx
 24878 00003EC9 B020                    	MOV	AL,' '
 24879 00003ECB F3AA                    	REP	STOSB
 24880                                  	;MOV	AX,SS
 24881                                  	;MOV	DS,AX
 24882                                  	; 27/06/2024
 24883 00003ECD 16                      	push	ss
 24884 00003ECE 1F                      	pop	ds
 24885                                  	;call	DEVNAME
 24886                                  	;retn
 24887                                  	; 18/12/2022
 24888 00003ECF E9AF01                  	jmp	DEVNAME
 24889                                  
 24890                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 24891                                  ;----------------------------------------------------------------------------
 24892                                  ;
 24893                                  ; Procedure Name : ROOTPATH,FINDPATH
 24894                                  ;
 24895                                  ; Inputs:
 24896                                  ;	Same as FINDPATH but,
 24897                                  ;	SI Points to asciz string of path which is assumed to start at
 24898                                  ;		the root (no leading '/').
 24899                                  ; Function:
 24900                                  ;	Search from root for path
 24901                                  ; Outputs:
 24902                                  ;	Same as FINDPATH but:
 24903                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 24904                                  ;	[NoSetDir] is ignored.
 24905                                  ;----------------------------------------------------------------------------
 24906                                  
 24907                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24908                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 24909                                  
 24910                                  ROOTPATH:
 24911 00003ED2 E8F1FE                  	call	SETROOTSRCH
 24912 00003ED5 803C00                  	CMP	BYTE [SI],0
 24913 00003ED8 7509                    	JNZ	short FINDPATH
 24914                                  
 24915                                  ; Root dir specified
 24916 00003EDA A0[6D05]                	MOV	AL,[SATTRIB]
 24917 00003EDD A2[6B05]                	MOV	[ATTRIB],AL
 24918 00003EE0 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 24919                                  					; (dir), clears carry.
 24920 00003EE2 C3                      	retn
 24921                                  
 24922                                  ; Inputs:
 24923                                  ;	[ATTRIB] Set to get through directories
 24924                                  ;	[SATTRIB] Set to find last element
 24925                                  ;	ES:BP Points to DPB
 24926                                  ;	SI Points to asciz string of path (no leading '/').
 24927                                  ;	[SECCLUSPOS] = 0
 24928                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 24929                                  ;	[CLUSNUM] = Cluster # of next cluster
 24930                                  ;	[CLUSFAC] = Sectors per cluster
 24931                                  ;	[NoSetDir] set
 24932                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 24933                                  ;		( = -1 if current dir not involved, else
 24934                                  ;		 Points to first char after last "/" of current dir part)
 24935                                  ;	[THISCDS] Points to CDS being used
 24936                                  ;	[CREATING] and [DELALL] set
 24937                                  ; Function:
 24938                                  ;	Parse path name
 24939                                  ; Outputs:
 24940                                  ;	ID1 field of [THISCDS] updated appropriately
 24941                                  ;	[ATTRIB] = [SATTRIB]
 24942                                  ;	ES:BP Points to DPB
 24943                                  ;	[THISDPB] = ES:BP
 24944                                  ;	Carry set if bad path
 24945                                  ;	   SI Points to path element causing failure
 24946                                  ;	   Zero set
 24947                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 24948                                  ;	      start a search on the last directory
 24949                                  ;	      CL is zero if there is a bad name in the path
 24950                                  ;	      CL is non-zero if the name was simply not found
 24951                                  ;		 [ENTFREE] may have free spot in directory
 24952                                  ;		 [NAME1] is the name.
 24953                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 24954                                  ;	   Zero reset
 24955                                  ;	      File in middle of path or bad name in path
 24956                                  ;		or path too long or malformed path
 24957                                  ;	ELSE
 24958                                  ;	   [CURBUF] contains directory record with match
 24959                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24960                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24961                                  ;	   [NAME1] Has name looked for
 24962                                  ;	   AH = device ID
 24963                                  ;	      bit 7 of AH set if device SI and BX
 24964                                  ;	      will point DOSGROUP relative The firclus
 24965                                  ;	      field of the device entry contains the device pointer
 24966                                  ;	   If last element is a directory zero is set and:
 24967                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24968                                  ;	      are set up to start a search on it,
 24969                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24970                                  ;	      like that for a file (except for zero flag)
 24971                                  ;	   If last element is a file zero is reset
 24972                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24973                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24974                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24975                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24976                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24977                                  ; Destroys all other registers
 24978                                  
 24979                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24980                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24981                                  
 24982                                      	;entry	FINDPATH
 24983                                  FINDPATH:
 24984 00003EE3 06                      	PUSH	ES			; Save ES:BP
 24985 00003EE4 56                      	PUSH	SI
 24986 00003EE5 89F7                    	MOV	DI,SI
 24987 00003EE7 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24988 00003EEB 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24989 00003EF0 740E                    	JZ	short NOIDS		; No current dir part
 24990 00003EF2 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24991 00003EF6 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24992 00003EF8 C43E[A205]              	LES	DI,[THISCDS]
 24993                                  	;mov	[es:di+73],cx
 24994 00003EFC 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory cluster
 24995                                  NOIDS:
 24996                                  
 24997                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24998                                  ; character in the string. CX,DI may be destroyed.
 24999                                  ;
 25000                                  ;	invoke	NAMETRANS
 25001                                  ;	MOV	CL,AL
 25002                                  ;
 25003                                  ; The above is the slow method. The name has *already* been munged by
 25004                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 25005                                  ; the name until ., \ or 0 is hit.
 25006                                  
 25007                                  	;MOV	AX,SS
 25008                                  	;MOV	ES,AX
 25009                                  	; 15/02/2024 - Retro DOS v4.1
 25010 00003F00 16                      	push	ss
 25011 00003F01 07                      	pop	es
 25012                                  
 25013                                  ;hkn; Name1 is in DOSDATA
 25014 00003F02 BF[4B05]                	MOV	DI,NAME1
 25015 00003F05 B82020                  	MOV	AX,'  ' ; 2020h
 25016 00003F08 AA                      	STOSB
 25017 00003F09 AB                      	STOSW
 25018 00003F0A AB                      	STOSW
 25019 00003F0B AB                      	STOSW
 25020 00003F0C AB                      	STOSW
 25021 00003F0D AB                      	STOSW
 25022                                  
 25023                                  ;hkn; Name1 is in DOSDATA
 25024 00003F0E BF[4B05]                	MOV	DI,NAME1
 25025 00003F11 30E4                    	XOR	AH,AH			; bits for CL
 25026                                  GetNam:
 25027                                  	; 19/05/2019 - Retro DOS v4.0
 25028                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 25029                                  
 25030                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25031                                  	; 16/12/2022
 25032                                  	;inc	cl ; not required !
 25033                                  	
 25034 00003F13 AC                      	LODSB
 25035 00003F14 3C2E                    	CMP	AL,'.'	; 2Eh
 25036 00003F16 7412                    	JZ	short _SetExt
 25037 00003F18 08C0                    	OR	AL,AL
 25038 00003F1A 7424                    	JZ	short _GetDone
 25039 00003F1C 3C5C                    	CMP	AL,'\'	; 5Ch
 25040 00003F1E 7420                    	JZ	short _GetDone
 25041 00003F20 3C3F                    	CMP	AL,'?'	; 3Fh
 25042 00003F22 7503                    	JNZ	short StoNam
 25043 00003F24 80CC01                  	OR	AH,1
 25044                                  StoNam: 
 25045 00003F27 AA                      	STOSB
 25046 00003F28 EBE9                    	JMP	short GetNam
 25047                                  _SetExt:
 25048 00003F2A BF[5305]                	MOV	DI,NAME1+8
 25049                                  GetExt:
 25050 00003F2D AC                      	LODSB
 25051 00003F2E 08C0                    	OR	AL,AL
 25052 00003F30 740E                    	JZ	short _GetDone
 25053 00003F32 3C5C                    	CMP	AL,'\'
 25054 00003F34 740A                    	JZ	short _GetDone
 25055 00003F36 3C3F                    	CMP	AL,'?'
 25056 00003F38 7503                    	JNZ	short StoExt
 25057 00003F3A 80CC01                  	OR	AH,1
 25058                                  StoExt: 
 25059 00003F3D AA                      	STOSB
 25060 00003F3E EBED                    	JMP	short GetExt
 25061                                  _GetDone:
 25062 00003F40 4E                      	DEC	SI
 25063 00003F41 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 25064 00003F43 80C980                  	OR	CL,80H
 25065 00003F46 5F                      	POP	DI			; Start of this element
 25066 00003F47 07                      	POP	ES			; Restore ES:BP
 25067 00003F48 39FE                    	CMP	SI,DI
 25068 00003F4A 7503                    	JNZ	short check_device
 25069 00003F4C E9DD00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 25070                                  check_device:
 25071 00003F4F 56                      	PUSH	SI			; Start of next element
 25072                                  	;MOV	AL,[SI]
 25073                                  	; 15/02/2024
 25074 00003F50 08C0                    	OR	AL,AL
 25075                                  	; 23/09/2023
 25076                                  	;cmp	byte [si],0
 25077 00003F52 7508                    	JNZ	short NOT_LAST
 25078                                  
 25079                                  ; for last element of the path switch to the correct search attributes
 25080                                  
 25081 00003F54 8A3E[6D05]              	MOV	BH,[SATTRIB]
 25082 00003F58 883E[6B05]              	MOV	[ATTRIB],BH
 25083                                  
 25084                                  NOT_LAST:
 25085                                  
 25086                                  ; check name1 to see if we have a device...
 25087                                  
 25088 00003F5C 06                      	PUSH	ES			; Save ES:BP
 25089                                  
 25090                                  ;hkn; SS is DOSDATA
 25091                                  	;context ES
 25092 00003F5D 16                      	push	ss
 25093 00003F5E 07                      	pop	es
 25094 00003F5F E81F01                  	call	DEVNAME 		; blast BX
 25095 00003F62 07                      	POP	ES			; Restore ES:BP
 25096 00003F63 7208                    	JC	short FindFile		; Not a device
 25097 00003F65 08C0                    	OR	AL,AL			; Test next char again
 25098                                  	;JZ	short GO_BDEV
 25099                                  	;JMP	FILEINPATH		; Device name in middle of path
 25100                                  	; 27/06/2024
 25101 00003F67 752D                    	jnz	short FILEINPATH_j
 25102                                  
 25103                                  GO_BDEV:
 25104 00003F69 5E                      	POP	SI			; Points to NUL at end of path
 25105 00003F6A E99FFE                  	JMP	Build_devJ
 25106                                  
 25107                                  FindFile:
 25108                                  ;;;; 7/28/86
 25109 00003F6D 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 25110 00003F72 7505                    	JNZ	short NOE5		; no
 25111 00003F74 C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 25112                                  NOE5:
 25113                                  ;;;; 7/28/86
 25114 00003F79 57                      	PUSH	DI			; Start of this element
 25115 00003F7A 06                      	PUSH	ES			; Save ES:BP
 25116 00003F7B 51                      	PUSH	CX			; CL return from NameTrans
 25117                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25118                                  
 25119 00003F7C E88A02                  	CALL	LookupPath		; call fastopen to get dir entry
 25120 00003F7F 7303                    	JNC	short DIR_FOUND		; found dir entry
 25121                                  
 25122                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25123 00003F81 E8CDFC                  	call	FINDENTRY
 25124                                  DIR_FOUND:
 25125 00003F84 59                      	POP	CX
 25126 00003F85 07                      	POP	ES
 25127 00003F86 5F                      	POP	DI
 25128 00003F87 7303                    	JNC	short LOAD_BUF
 25129 00003F89 E9C500                  	JMP	BADPATHPOP
 25130                                  
 25131                                  LOAD_BUF:
 25132 00003F8C C53E[E205]              	LDS	DI,[CURBUF]
 25133                                  	;test	byte [bx+0Bh],10h
 25134 00003F90 F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 25135 00003F94 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 25136                                  FILEINPATH_j:	; 27/06/2024
 25137 00003F96 E99700                  	JMP	FILEINPATH		; Error or end of path
 25138                                  
 25139                                  ; if we are not setting the directory, then check for end of string
 25140                                  
 25141                                  GO_NEXT:
 25142                                  ;hkn; SS override
 25143 00003F99 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 25144 00003F9F 7423                    	JZ	short SetDir
 25145 00003FA1 89FA                    	MOV	DX,DI			; Save pointer to entry
 25146 00003FA3 8CD9                    	MOV	CX,DS
 25147                                  
 25148                                  ;hkn; SS is DOSDATA
 25149                                  	;context DS
 25150 00003FA5 16                      	push	ss
 25151 00003FA6 1F                      	pop	ds
 25152 00003FA7 5F                      	POP	DI			; Start of next element
 25153                                  	; 19/05/2019 - Retro DOS v4.0
 25154                                  	; MSDOS 6.0
 25155 00003FA8 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25156 00003FAD 740B                    	JZ	short _nofast			; the FastOpen
 25157 00003FAF F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 25158 00003FB4 7404                    	JZ	short _nofast			; no
 25159 00003FB6 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 25160                                  _nofast:
 25161 00003FBA 803D00                  	CMP	BYTE [DI],0
 25162                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 25163                                  	;;JMP	_SETRET  ; retn		; Got it
 25164                                  	;retn	; 05/09/2018
 25165                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25166                                  	;jmp	_SETRET
 25167                                  	; 16/12/2022
 25168 00003FBD 7421                    	jz	short _SETRET
 25169                                  
 25170                                  NEXT_ONE:
 25171 00003FBF 57                      	PUSH	DI			; Put start of next element back on stack
 25172 00003FC0 89D7                    	MOV	DI,DX
 25173 00003FC2 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 25174                                  SetDir:
 25175 00003FC4 8B14                    	MOV	DX,[SI] 		; Dir_first
 25176                                  
 25177                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25178 00003FC6 1E                      	PUSH	DS		      ; save [curbuf+2]
 25179                                  ;hkn; SS is DOSDATA
 25180 00003FC7 16                      	push	ss
 25181 00003FC8 1F                      	pop	ds		      ; set DS Dosgroup
 25182                                  	;test	byte [FastOpenFlg],2
 25183 00003FC9 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25184 00003FCE 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 25185 00003FD0 89D3                    	MOV	BX,DX		      ; not found
 25186 00003FD2 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 25187 00003FD6 50                      	PUSH	AX		      ; save device id (AH)
 25188 00003FD7 E8B1FD                  	call	SETDIRSRCH
 25189 00003FDA 58                      	POP	AX		      ; restore device id (AH)
 25190 00003FDB 83C402                  	ADD	SP,2		      ; pop ds in stack
 25191 00003FDE EB36                    	JMP	short FAST_OPEN_SKIP
 25192                                  
 25193                                  	; 16/12/2022
 25194                                  _SETRET:
 25195 00003FE0 C3                      	retn
 25196                                  
 25197                                  DO_NORMAL:
 25198 00003FE1 1F                      	POP	DS			; DS = [curbuf + 2]
 25199                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 25200                                  
 25201 00003FE2 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 25202 00003FE4 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 25203 00003FE6 53                      	PUSH	BX
 25204 00003FE7 50                      	PUSH	AX
 25205 00003FE8 56                      	PUSH	SI
 25206 00003FE9 51                      	PUSH	CX
 25207                                  
 25208                                  ; 16/02/2024
 25209                                  %if 0
 25210                                  	;push	word [di+6]
 25211                                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 25212                                  	; 19/05/2019
 25213                                  	; MSDOS 6.0
 25214                                  	;push	word [di+8]
 25215                                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 25216                                  %else	
 25217                                  	; 16/02/2024
 25218                                  	;lds	bx,[di+6]
 25219 00003FEA C55D06                  	lds	bx,[di+BUFFINFO.buf_sector]
 25220 00003FED 53                      	push	bx
 25221 00003FEE 1E                      	push	ds
 25222                                  %endif
 25223                                  
 25224 00003FEF 89D3                    	MOV	BX,DX
 25225                                  
 25226                                  ;hkn; SS is DOSDATA
 25227                                  	;context DS
 25228 00003FF1 16                      	push	ss
 25229 00003FF2 1F                      	pop	ds
 25230                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 25231 00003FF3 E895FD                  	call	SETDIRSRCH		; the entry sector buffer
 25232                                  	; 19/05/2019
 25233                                  	; MSDOS 6.0
 25234 00003FF6 8F06[0706]              	POP	word [HIGH_SECTOR]
 25235 00003FFA 5A                      	POP	DX
 25236 00003FFB 7203                    	JC	short SKIP_GETB
 25237                                  	; 22/09/2023
 25238                                  	;;mov	byte [ALLOWED],18h
 25239                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 25240                                  	;XOR	AL,AL ; *
 25241                                  	;;invoke GETBUFFR		; Get the entry buffer back
 25242                                  	;call	GETBUFFR
 25243 00003FFD E8B517                  	call	GETBUFFER ; * ; pre-read
 25244                                  SKIP_GETB:
 25245 00004000 59                      	POP	CX
 25246 00004001 5E                      	POP	SI
 25247 00004002 58                      	POP	AX
 25248 00004003 5B                      	POP	BX
 25249 00004004 7305                    	JNC	short SET_THE_BUF
 25250 00004006 5F                      	POP	DI			; Start of next element
 25251 00004007 89FE                    	MOV	SI,DI			; Point with SI
 25252 00004009 EB21                    	JMP	SHORT _BADPATH
 25253                                  
 25254                                  SET_THE_BUF:
 25255 0000400B E8B6F5                  	call	SET_BUF_AS_DIR
 25256 0000400E 8B3E[E205]              	MOV	DI,[CURBUF]
 25257 00004012 01FE                    	ADD	SI,DI			; Get the offsets back
 25258 00004014 01FB                    	ADD	BX,DI
 25259                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25260                                  FAST_OPEN_SKIP:
 25261 00004016 5F                      	POP	DI			; Start of next element
 25262 00004017 E89302                  	CALL	InsertPath		; insert dir entry info
 25263                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 25264 0000401A 8A05                    	MOV	AL,[DI]
 25265 0000401C 08C0                    	OR	AL,AL
 25266 0000401E 74C0                    	JZ	short _SETRET		; At end
 25267 00004020 47                      	INC	DI			; Skip over "/"
 25268 00004021 89FE                    	MOV	SI,DI			; Point with SI
 25269 00004023 E8F00E                  	call	PATHCHRCMP
 25270 00004026 7503                    	JNZ	short find_bad_name	; oops
 25271 00004028 E9B8FE                  	JMP	FINDPATH		; Next element
 25272                                  
 25273                                  find_bad_name:
 25274 0000402B 4E                      	DEC	SI			; Undo above INC to get failure point
 25275                                  _BADPATH:
 25276 0000402C 30C9                    	XOR	CL,CL			; Set zero
 25277 0000402E EB28                    	JMP	SHORT BADPRET
 25278                                  
 25279                                  FILEINPATH:
 25280 00004030 5F                      	POP	DI			; Start of next element
 25281                                  
 25282                                  ;hkn; SS is DOSDATA
 25283                                  	;context DS			; Got to from one place with DS gone
 25284 00004031 16                      	push	ss
 25285 00004032 1F                      	pop	ds
 25286                                  
 25287                                  ; DOS 3.3 FastOpen
 25288                                  	;test	byte [FastOpenFlg],1
 25289 00004033 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 25290 00004038 740B                    	JZ	short NO_FAST		; device info to fastopen
 25291                                  	;test	byte [FastOpenFlg],2
 25292 0000403A F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 25293 0000403F 7404                    	JZ	short NO_FAST
 25294 00004041 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 25295                                  					 ; success
 25296                                  NO_FAST:
 25297                                  ; DOS 3.3 FastOpen
 25298 00004045 8A05                    	MOV	AL,[DI]
 25299 00004047 08C0                    	OR	AL,AL
 25300                                  	;JZ	short INCRET
 25301                                  	;MOV	SI,DI			; Path too long
 25302                                  	;JMP	SHORT BADPRET
 25303                                  	; 27/06/2024
 25304 00004049 750B                    	jnz 	short BADPRET_X
 25305                                  
 25306                                  INCRET:
 25307                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25308                                  
 25309 0000404B E85F02                  	CALL   InsertPath		; insert dir entry info
 25310                                  
 25311                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 25312 0000404E FEC0                    	INC	AL			; Reset zero
 25313                                  	; 16/12/2022	
 25314                                  ;_SETRET:
 25315 00004050 C3                      	retn
 25316                                  
 25317                                  BADPATHPOP:
 25318 00004051 5E                      	POP	SI			; Start of next element
 25319 00004052 8A04                    	MOV	AL,[SI]
 25320                                  	; 27/06/2024
 25321                                  	;MOV	SI,DI			; Start of bad element
 25322 00004054 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 25323                                  BADPRET_X:	; 27/06/2024
 25324 00004056 89FE                    	mov	si,di
 25325                                  BADPRET:
 25326 00004058 A0[6D05]                	MOV	AL,[SATTRIB]
 25327 0000405B A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 25328 0000405E F9                      	STC
 25329 0000405F C3                      	retn
 25330                                  
 25331                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 25332                                  ;---------------------------------------------------------------------------
 25333                                  ;
 25334                                  ; Procedure Name : STARTSRCH
 25335                                  ;
 25336                                  ; Inputs:
 25337                                  ;	[THISDPB] Set
 25338                                  ; Function:
 25339                                  ;	Set up a search for GETENTRY and NEXTENTRY
 25340                                  ; Outputs:
 25341                                  ;	ES:BP = Drive parameters
 25342                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 25343                                  ; Destroys ES,BP,AX
 25344                                  ;--------------------------------------------------------------------------
 25345                                  
 25346                                  STARTSRCH:
 25347 00004060 C42E[8A05]              	LES	BP,[THISDPB]
 25348 00004064 31C0                    	XOR	AX,AX
 25349 00004066 A3[4803]                	MOV	[LASTENT],AX
 25350 00004069 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 25351 0000406C 48                      	DEC	AX
 25352 0000406D A3[D805]                	MOV	[ENTFREE],AX
 25353 00004070 A3[DA05]                	MOV	[ENTLAST],AX
 25354 00004073 C3                      	retn
 25355                                  
 25356                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 25357                                  ;----------------------------------------------------------------------------
 25358                                  ; Procedure Name : MatchAttributes
 25359                                  ;
 25360                                  ; Input:    [Attrib] = attribute to search for
 25361                                  ;	    CH = found attribute
 25362                                  ; Output:   JZ <match>
 25363                                  ;	    JNZ <nomatch>
 25364                                  ; Registers modified: noneski
 25365                                  ;----------------------------------------------------------------------------
 25366                                  
 25367                                  MatchAttributes:
 25368 00004074 50                      	PUSH	AX
 25369                                  
 25370                                  ;hkn; SS override
 25371 00004075 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 25372 00004079 F6D0                    	NOT	AL			; AL <- SearchSet'
 25373 0000407B 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 25374                                  	;and	al,16h
 25375 0000407D 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 25376                                  ;
 25377                                  ; the result is non-zero if an attribute is not in the search set
 25378                                  ; and in the found set and in the important set. This means that we do not
 25379                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 25380                                  ;
 25381 0000407F 58                      	POP	AX
 25382 00004080 C3                      	retn
 25383                                  
 25384                                  ; 19/05/2019 - Retro DOS v4.0
 25385                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 25386                                  
 25387                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25388                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 25389                                  
 25390                                  ;Break <DevName - Look for name of device>
 25391                                  ;---------------------------------------------------------------------------
 25392                                  ;
 25393                                  ; Procedure Name : DevName
 25394                                  ;
 25395                                  ; Inputs:
 25396                                  ;	DS,ES:DOSDATA
 25397                                  ;	Filename in NAME1
 25398                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 25399                                  ; Function:
 25400                                  ;	Determine if file is in list of I/O drivers
 25401                                  ; Outputs:
 25402                                  ;	Carry set if not a device
 25403                                  ;	ELSE
 25404                                  ;	Zero flag set
 25405                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 25406                                  ;	     bits 0-4 set from low byte of attribute word
 25407                                  ;	DEVPT = DWORD pointer to Device header of device
 25408                                  ; BX destroyed, others preserved
 25409                                  ;---------------------------------------------------------------------------
 25410                                  
 25411                                  DEVNAME:
 25412                                  	; 28/07/2018 - Retro DOS v3.0
 25413                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 25414                                  
 25415 00004081 56                      	PUSH	SI
 25416 00004082 57                      	PUSH	DI
 25417 00004083 51                      	PUSH	CX
 25418 00004084 50                      	PUSH	AX
 25419                                  
 25420                                  ; E5 special code
 25421 00004085 FF36[4B05]              	PUSH	WORD [NAME1]
 25422 00004089 803E[4B05]05            	CMP	byte [NAME1],5
 25423 0000408E 7505                    	JNZ	short NOKTR
 25424 00004090 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 25425                                  NOKTR:
 25426                                  	;test	byte [ATTRIB],8
 25427 00004095 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 25428                                  					; If looking for VOL id don't find devs
 25429 0000409A 7520                    	JNZ	short RET31
 25430                                  
 25431                                  ;hkn; NULDEV is in DOSDATA
 25432 0000409C BE[4800]                	MOV	SI,NULDEV
 25433                                  LOOKIO:
 25434                                  	; 21/11/2022
 25435                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 25436                                  	; 17/12/2022
 25437                                  	;test	byte [si+5],80h
 25438 0000409F F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25439                                  	;;test	word [si+4],8000h
 25440                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25441 000040A3 7410                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 25442 000040A5 89F0                    	MOV	AX,SI
 25443                                  	;add	si,10
 25444 000040A7 83C60A                  	ADD	SI,SYSDEV.NAME
 25445                                  
 25446                                  ;hkn; NAME1 is in DOSDATA
 25447 000040AA BF[4B05]                	MOV	DI,NAME1
 25448 000040AD B90400                  	MOV	CX,4			; All devices are 8 letters
 25449 000040B0 F3A7                    	REPE	CMPSW			; Check for name in list
 25450                                  	;MOV	SI,AX
 25451                                  	; 27/06/2024
 25452 000040B2 96                      	xchg	ax,si
 25453 000040B3 7415                    	JZ	short IOCHK		; Found it?
 25454                                  SKIPDEV:
 25455 000040B5 C534                    	LDS	SI,[SI]			; Get address of next device
 25456 000040B7 83FEFF                  	CMP	SI,-1			; At end of list?
 25457 000040BA 75E3                    	JNZ	short LOOKIO
 25458                                  RET31:	
 25459 000040BC F9                      	STC				; Not found
 25460                                  RETNV:	
 25461 000040BD 8CD1                    	MOV	CX,SS
 25462 000040BF 8ED9                    	MOV	DS,CX
 25463                                  
 25464 000040C1 8F06[4B05]              	POP	WORD [NAME1]
 25465 000040C5 58                      	POP	AX
 25466 000040C6 59                      	POP	CX
 25467 000040C7 5F                      	POP	DI
 25468 000040C8 5E                      	POP	SI
 25469 000040C9 C3                      	RETN
 25470                                  
 25471                                  IOCHK:
 25472                                  ;hkn; SS override for DEVPT
 25473 000040CA 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 25474                                  	;mov	bh,[si+4]
 25475 000040CF 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 25476 000040D2 80CFC0                  	OR	BH,0C0h
 25477 000040D5 80E7DF                  	and	bh,0DFh
 25478                                  	;AND	BH,~(020h)		; Clears Carry
 25479 000040D8 368936[9A05]            	MOV	[SS:DEVPT],SI
 25480 000040DD EBDE                    	JMP	short RETNV
 25481                                  
 25482                                  ;BREAK <Build_device_ent - Make a Directory entry>
 25483                                  ;---------------------------------------------------------------------------
 25484                                  ; Procedure Name : Build_device_ent
 25485                                  ;
 25486                                  ; Inputs:
 25487                                  ;	[NAME1] has name
 25488                                  ;	BH is attribute field (supplied by DEVNAME)
 25489                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 25490                                  ; Function:
 25491                                  ;	Build a directory entry for a device at DEVFCB
 25492                                  ; Outputs:
 25493                                  ;	BX points to DEVFCB
 25494                                  ;	SI points to dir_first field
 25495                                  ;	AH = input BH
 25496                                  ;	AL = 0
 25497                                  ;	dir_first = DEVPT
 25498                                  ;	Zero Set, Carry Clear
 25499                                  ; DS,ES,BP preserved, others destroyed
 25500                                  ;--------------------------------------------------------------------------
 25501                                  
 25502                                  Build_device_ent:
 25503 000040DF B82020                  	MOV	AX,"  " ; 2020h
 25504                                  
 25505                                  ;hkn; DEVFCB is in DOSDATA
 25506 000040E2 BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 25507                                  
 25508                                  ;	Fill dir_ext  BUGBUG - use ERRNZs for this stuff!
 25509                                  
 25510 000040E5 AB                      	STOSW
 25511 000040E6 AA                      	STOSB				; Blank out extent field
 25512                                  	;mov	al,40h
 25513 000040E7 B040                    	MOV	AL,attr_device
 25514                                  
 25515                                  ;	Fill Dir_attr
 25516                                  
 25517 000040E9 AA                      	STOSB				; Set attribute field
 25518 000040EA 31C0                    	XOR	AX,AX
 25519 000040EC B90A00                  	MOV	CX,10
 25520                                  
 25521                                  ; Fill dir_pad
 25522                                  
 25523 000040EF F3AB                    	REP	STOSW			; Fill rest with zeros
 25524 000040F1 E8F1C9                  	call	DATE16
 25525                                  
 25526                                  ;hkn; DEVFCB is in DOSDATA
 25527 000040F4 BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 25528 000040F7 92                      	XCHG	AX,DX
 25529                                  
 25530                                  ; Fill dir_time
 25531                                  
 25532 000040F8 AB                      	STOSW
 25533 000040F9 92                      	XCHG	AX,DX
 25534                                  
 25535                                  ; Fill dir_date
 25536                                  
 25537 000040FA AB                      	STOSW
 25538 000040FB 89FE                    	MOV	SI,DI			; SI points to dir_first field
 25539 000040FD A1[9A05]                	MOV	AX,[DEVPT]
 25540                                  
 25541                                  ; Fill dir_first
 25542                                  
 25543 00004100 AB                      	STOSW				; Dir_first points to device
 25544 00004101 A1[9C05]                	MOV	AX,[DEVPT+2]
 25545                                  ;
 25546                                  ; Fill dir_size_l
 25547                                  ;
 25548 00004104 AB                      	STOSW
 25549 00004105 88FC                    	MOV	AH,BH			; Put device atts in AH
 25550                                  
 25551                                  ;hkn; DEVFCB is in DOSDATA
 25552 00004107 BB[4B05]                	MOV	BX,DEVFCB
 25553 0000410A 30C0                    	XOR	AL,AL			; Set zero, clear carry
 25554 0000410C C3                      	retn
 25555                                  
 25556                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 25557                                  ;----------------------------------------------------------------------------
 25558                                  ;
 25559                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 25560                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 25561                                  ;   If invalid, reset original CDS to root.
 25562                                  ;
 25563                                  ;   Inputs:	ThisCDS points to CDS of interest
 25564                                  ;		SS:DI points to temp buffer
 25565                                  ;   Outputs:	The current directory string is validated on the appropriate
 25566                                  ;		    drive
 25567                                  ;		ThisDPB changed
 25568                                  ;		ES:DI point to CDS
 25569                                  ;		Carry set if error (currently user FAILed to I 24)
 25570                                  ;   Registers modified: all
 25571                                  ;----------------------------------------------------------------------------
 25572                                  
 25573                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25574                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 25575                                  
 25576                                  ValidateCDS:
 25577                                  	; 19/05/2019 - Retro DOS v4.0
 25578                                  	; 28/07/2018 - Retro DOS v3.0
 25579                                  
 25580                                     %define  Temp	[bp-2]	; word
 25581                                     %define  SaveCDS	[bp-6]	; dword
 25582                                     %define  SaveCDSL	[bp-6]	; word
 25583                                     %define  SaveCDSH	[bp-4]	; word
 25584                                  
 25585                                  	;Enter
 25586 0000410D 55                      	push	bp
 25587 0000410E 89E5                    	mov	bp,sp
 25588 00004110 83EC06                  	sub	sp,6
 25589                                  
 25590 00004113 897EFE                  	MOV	Temp,DI
 25591                                  
 25592                                  ;hkn; SS override
 25593 00004116 36C536[A205]            	LDS	SI,[SS:THISCDS]
 25594 0000411B 8976FA                  	MOV	SaveCDSL,SI
 25595 0000411E 8C5EFC                  	MOV	SaveCDSH,DS
 25596                                  	;EnterCrit critDisk
 25597 00004121 E8C3D1                  	call	ECritDisk
 25598                                  	; 21/11/2022
 25599                                  	;test	byte [SI+curdir.flags+1],80h
 25600                                  	;test	word [si+67],8000h
 25601                                  	; 17/12/2022
 25602                                  	;test	byte [SI+68],80h
 25603 00004124 F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 25604                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 25605 00004128 7403                    	JZ	short _DoSplice
 25606 0000412A E98D00                  	JMP	FatFail
 25607                                  _DoSplice:
 25608 0000412D 30D2                    	XOR	DL,DL
 25609 0000412F 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 25610                                  
 25611                                  ;hkn; SS is DOSDATA
 25612                                  	;Context ES
 25613 00004134 16                      	push	ss
 25614 00004135 07                      	pop	es
 25615                                  	;Invoke	FStrcpy
 25616 00004136 E88CD0                  	call	FStrCpy
 25617 00004139 8B76FE                  	MOV	SI,Temp
 25618                                  
 25619                                  ;hkn; SS is DOSDATA
 25620                                  	;Context DS
 25621 0000413C 16                      	push	ss
 25622 0000413D 1F                      	pop	ds	
 25623                                  	;Invoke	Splice
 25624 0000413E E8EE2A                  	call	Splice
 25625                                  
 25626                                   ;hkn; SS is DOSDATA
 25627                                  	;Context DS			;   FatReadCDS (ThisCDS);
 25628 00004141 16                      	push	ss
 25629 00004142 1F                      	pop	ds
 25630 00004143 8816[4C03]              	MOV	[NoSetDir],DL
 25631 00004147 C43E[A205]              	LES	DI,[THISCDS]
 25632                                  	;SAVE	<BP>
 25633 0000414B 55                      	push	bp
 25634                                  	;Invoke	FATREAD_CDS
 25635 0000414C E8F713                  	call	FATREAD_CDS	
 25636                                  	;RESTORE <BP>
 25637 0000414F 5D                      	pop	bp
 25638 00004150 7268                    	JC	short FatFail
 25639                                  
 25640 00004152 C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 25641                                  	;cmp	word [si+73],-1
 25642 00004156 837C49FF                	CMP	word [SI+curdir.ID],-1
 25643 0000415A 7550                    	JNZ	short RestoreCDS
 25644                                  
 25645                                  ;hkn; SS is DOSDATA
 25646                                  	;Context ES
 25647 0000415C 16                      	push	ss
 25648 0000415D 07                      	pop	es
 25649                                  
 25650                                  ;hkn; SS override
 25651                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 25652 0000415E 36FF36[B205]            	push	word [SS:WFP_START]
 25653                                  	;cmp	si,[bp-6]
 25654 00004163 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 25655 00004166 750B                    	JNZ	short DoChdir
 25656                                  	;mov	di,[bp-2]
 25657 00004168 8B7EFE                  	MOV	DI,Temp
 25658                                  
 25659                                  ;hkn; SS override
 25660 0000416B 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 25661                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 25662 00004170 E852D0                  	call	FStrCpy
 25663                                  DoChdir:
 25664                                  ;hkn; SS is DOSDATA
 25665                                  	;Context DS
 25666 00004173 16                      	push	ss
 25667 00004174 1F                      	pop	ds
 25668                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 25669 00004175 FF36[6D05]              	push	word [SATTRIB]
 25670 00004179 55                      	push	bp
 25671                                  	;Invoke	DOS_ChDir
 25672 0000417A E85DEF                  	call	DOS_CHDIR
 25673                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 25674 0000417D 5D                      	pop	bp
 25675 0000417E 5B                      	pop	bx
 25676 0000417F 8F06[B205]              	pop	word [WFP_START]
 25677 00004183 881E[6D05]              	MOV	[SATTRIB],BL
 25678 00004187 C576FA                  	LDS	SI,SaveCDS
 25679 0000418A 730F                    	JNC	short SetCluster	;	if (c == -1) {
 25680                                  
 25681                                  ;hkn; SS override for THISCDS
 25682 0000418C 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 25683 00004191 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 25684 00004196 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 25685 00004198 884C03                  	MOV	[SI+3],CL		;	    }
 25686                                  SetCluster:
 25687                                  	; 16/02/2024
 25688                                  	;;mov	word [si+73],0FFFFh
 25689                                  	;MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 25690                                  	;
 25691 0000419B 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 25692                                  	; 21/11/2022
 25693                                  	;test	byte [si+curdir.flags+1],20h
 25694                                  	; 19/05/2019
 25695                                  	; MSDOS 6.0
 25696                                  	; 17/12/2022
 25697                                  	;test	byte [si+68],20h
 25698 000041A0 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 25699                                  	;;test	word [si+67],2000h
 25700                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 25701 000041A4 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 25702 000041A6 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 25703                                  _setdirclus:
 25704                                  	;mov	[si+73],cx
 25705 000041A9 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 25706                                  RestoreCDS:
 25707 000041AC C47EFA                  	LES	DI,SaveCDS
 25708 000041AF 36893E[A205]            	MOV	[SS:THISCDS],DI
 25709 000041B4 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 25710 000041B9 F8                      	CLC
 25711                                  FatFail:
 25712                                  	;LeaveCrit critDisk
 25713 000041BA E845D1                  	call	LCritDisk
 25714                                  
 25715                                  	;les	di,[bp-6]
 25716 000041BD C47EFA                  	LES	DI,SaveCDS
 25717                                  	;Leave
 25718 000041C0 89EC                    	mov	sp,bp
 25719 000041C2 5D                      	pop	bp
 25720 000041C3 C3                      	retn
 25721                                  
 25722                                  ; 28/07/2018 - Retro DOS v3.0
 25723                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 25724                                  
 25725                                  ;Break	<CheckThisDevice - Check for being a device>
 25726                                  ;---------------------------------------------------------------------------
 25727                                  ;
 25728                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 25729                                  ;   device specified. We will return carry if there is a device present. 
 25730                                  ;   The forms of devices we will recognize are:
 25731                                  ;
 25732                                  ;	[path]device
 25733                                  ;
 25734                                  ;   Note that the drive letter has *already* been removed. All other forms
 25735                                  ;   are not considered to be devices. If such a device is found we change
 25736                                  ;   the source pointer to point to the device component.
 25737                                  ;
 25738                                  ;   Inputs:	ES is DOSDATA
 25739                                  ;		DS:SI contains name
 25740                                  ;   Outputs:	ES is DOSDATA
 25741                                  ;		DS:SI point to name or device
 25742                                  ;		Carry flag set if device was found
 25743                                  ;		Carry flag reset otherwise
 25744                                  ;   Registers Modified: all except ES:DI, DS
 25745                                  ;----------------------------------------------------------------------------
 25746                                  
 25747                                  CheckThisDevice:
 25748 000041C4 57                      	push	di
 25749 000041C5 56                      	push	si
 25750 000041C6 89F7                    	MOV	DI,SI
 25751                                  
 25752                                  ; Check for presence of \dev\ (Dam multiplan!)
 25753                                  
 25754 000041C8 8A04                    	MOV	AL,[SI]
 25755 000041CA E8490D                  	call	PATHCHRCMP		; is it a path char?
 25756 000041CD 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 25757 000041CF 46                      	INC	SI			; simulate LODSB
 25758                                  
 25759                                  ; We have the leading path separator. Look for DEV part.
 25760                                  
 25761 000041D0 AD                      	LODSW
 25762 000041D1 0D2020                  	OR	AX,2020h
 25763 000041D4 3D6465                  	cmp	ax,"de"
 25764                                  	;CMP	AX,"e"<< 8 + "d"
 25765 000041D7 752D                    	JNZ	short NotDevice		; not "de", assume not device
 25766 000041D9 AC                      	LODSB
 25767 000041DA 0C20                    	OR	AL,20h
 25768 000041DC 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 25769 000041DE 7526                    	JNZ	short NotDevice
 25770 000041E0 AC                      	LODSB
 25771 000041E1 E8320D                  	call	PATHCHRCMP		; do we have the last path separator?
 25772 000041E4 7520                    	JNZ	short NotDevice		; no. go for it.
 25773                                  
 25774                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 25775                                  ; SI and DevName may destroy DS.
 25776                                  
 25777                                  ParseDev:
 25778 000041E6 1E                      	push	ds
 25779 000041E7 56                      	push	si			; preserve the source pointer
 25780 000041E8 E86D0C                  	call	NameTrans		; advance DS:SI
 25781 000041EB 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 25782 000041EE F9                      	STC				; simulate a Carry return from DevName
 25783 000041EF 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 25784                                  
 25785                                  ;hkn; SS is DOSDATA
 25786 000041F1 16                      	push	ss
 25787 000041F2 1F                      	pop	ds
 25788                                  
 25789                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 25790                                  ;
 25791                                  ; SR;
 25792                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 25793                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 25794                                  ; old call set the volume attribute bit.
 25795                                  
 25796 000041F3 A0[6D05]                	mov	al,[SATTRIB]
 25797 000041F6 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 25798                                  
 25799                                  ; M026 - end
 25800                                  
 25801 000041F9 E885FE                  	call	DEVNAME
 25802                                  
 25803                                  SkipSearch:
 25804 000041FC 5E                      	pop	si
 25805 000041FD 1F                      	pop	ds
 25806                                  
 25807                                  ; SI points to the beginning of the potential device. If we have a device
 25808                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 25809                                  ; original value. At this point Carry set indicates FILE.
 25810                                  
 25811                                  CheckReturn:
 25812 000041FE 5F                      	pop	di			; get original SI
 25813 000041FF 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 25814 00004201 89FE                    	MOV	SI,DI
 25815                                  Check_Done:
 25816 00004203 5F                      	pop	di
 25817 00004204 F5                      	CMC				; invert carry. Carry => device
 25818 00004205 C3                      	retn
 25819                                  NotDevice:
 25820 00004206 F9                      	STC
 25821 00004207 EBF5                    	JMP	short CheckReturn
 25822                                  
 25823                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 25824                                  ;-----------------------------------------------------------------------------
 25825                                  ;
 25826                                  ; Procedure Name : LookupPath
 25827                                  ;
 25828                                  ; Output  DS:SI -> path name,
 25829                                  ;	  ES:DI -> dir entry info buffer
 25830                                  ;	  ES:CX -> extended dir info buffer
 25831                                  ;
 25832                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 25833                                  ;			     FastOpen, DS:SI points to char just one after
 25834                                  ;			     the last char of path name which is fully or
 25835                                  ;			     partially found in FastOPen
 25836                                  ;	  carry flag set : FastOpen not in memory or path name not found
 25837                                  ;
 25838                                  ;----------------------------------------------------------------------------
 25839                                  
 25840                                  LookupPath:
 25841                                  ;	PUSH	AX
 25842                                  
 25843                                  ;hkn; SS override
 25844                                  	;test	byte [ss:FastOpenFlg],1
 25845 00004209 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 25846 0000420F 7503                    	JNZ	short FASTINST			    ; and this routine is
 25847                                  NOLOOK:
 25848 00004211 E99700                  	JMP	NOLOOKUP			    ; executed once
 25849                                  
 25850                                  FASTINST:
 25851                                  ;hkn; SS override
 25852                                  	;test	byte [ss:FastOpenFlg],8
 25853 00004214 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 25854 0000421A 75F5                    	JNZ	short NOLOOK			    ; yes
 25855                                  
 25856 0000421C BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 25857                                  
 25858                                  ;hkn; SS override
 25859 0000421F 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 25860 00004224 BF[460D]                	MOV	DI,Dir_Info_Buff
 25861 00004227 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 25862 0000422A B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 25863 0000422C 1E                      	PUSH	DS
 25864 0000422D 07                      	POP	ES
 25865                                  
 25866                                  ;hkn; SS override
 25867                                  	;call	far [bx+2]
 25868 0000422E FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 25869 00004231 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 25870                                  
 25871 00004233 8D5CFE                  	LEA	BX,[SI-2]
 25872                                  
 25873                                  ;hkn; SS override
 25874 00004236 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 25875 0000423B 745D                    	JZ	short NOTFOUND			    ; no
 25876                                  
 25877                                  	; 19/05/2019 - Retro DOS v4.0
 25878                                  
 25879                                  	; MSDOS 6.0				    ; fully or partially found
 25880 0000423D 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 25881 00004240 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 25882 00004242 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 25883                                  
 25884                                  ;hkn; SS override for attrib/sattrib
 25885 00004243 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 25886 00004248 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 25887 0000424D 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 25888                                  	;mov	ch,[es:di+0Bh]
 25889 00004252 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 25890 00004256 E81BFE                  	call	MatchAttributes 		    ;AN000;FO.;
 25891                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 25892 00004259 59                      	POP	CX				    ;AN000;FO.;
 25893 0000425A 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 25894                                  parfnd:
 25895                                  
 25896                                  ;hkn; SS override
 25897 0000425C 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 25898 00004261 89CB                    	MOV	BX,CX
 25899                                  	; MSDOS 6.0
 25900                                  	;mov	ax,[bx+7]
 25901 00004263 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 25902                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 25903 00004266 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 25904 0000426A 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 25905 0000426D 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 25906                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25907                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 25908                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 25909 00004271 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 25910 00004274 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 25911                                  
 25912 00004278 06                      	PUSH	ES				    ; save ES
 25913                                  ;hkn; SS override
 25914 00004279 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 25915 0000427E 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 25916                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 25917 00004281 07                      	POP	ES				    ; pop ES
 25918                                  ;SR;
 25919                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 25920                                  ;indicate it is not a root dir
 25921                                  
 25922 00004282 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 25923 00004289 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 25924 0000428E 89FB                    	MOV	BX,DI				    ; start of entry
 25925                                  	;lea	si,[di+1Ah]
 25926 00004290 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 25927                                  						    ; dir_first field in the
 25928                                  						    ; dir entry
 25929                                  ;hkn; SS override for FastOpenFlg
 25930                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 25931 00004293 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 25932                                  ;	POP	AX
 25933 00004299 C3                      	RETN
 25934                                  NOTFOUND:
 25935 0000429A 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 25936 0000429D 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 25937 0000429F 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 25938                                  Partial_Success:
 25939                                  	;and	byte [SS:FastOpenFlg],0FBh
 25940 000042A5 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 25941                                  NOLOOKUP:
 25942                                  ;	POP	AX
 25943 000042AB F9                      	STC
 25944 000042AC C3                      	RETN
 25945                                  
 25946                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 25947                                  ;-----------------------------------------------------------------------------
 25948                                  ;
 25949                                  ; Procedure Name : InsertPath
 25950                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 25951                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 25952                                  ;	  DS = DOSDATA
 25953                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 25954                                  ;
 25955                                  ;-----------------------------------------------------------------------------
 25956                                  
 25957                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25958                                  
 25959                                  InsertPath:
 25960 000042AD 9C                      	PUSHF
 25961                                  ;hkn; SS override for FastOpenFlag
 25962                                  	;test	byte [SS:FastOpenFlg], 1
 25963 000042AE 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 25964 000042B4 7476                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 25965                                  	;test	byte [ss:FastOpenFlg],2
 25966 000042B6 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 25967 000042BC 740D                    	JZ	short INSERT_DIR_INFO		; no
 25968                                  	;and	byte [ss:FastOpenFlg],0FDh
 25969 000042BE 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 25970 000042C4 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 25971 000042C9 EB5B                    	JMP	short GET_NEXT2
 25972                                  
 25973                                  INSERT_DIR_INFO:				; save registers
 25974 000042CB 1E                      	PUSH	DS
 25975 000042CC 06                      	PUSH	ES
 25976 000042CD 53                      	PUSH	BX
 25977 000042CE 56                      	PUSH	SI
 25978 000042CF 57                      	PUSH	DI
 25979 000042D0 51                      	PUSH	CX
 25980 000042D1 50                      	PUSH	AX
 25981                                  
 25982                                  ;hkn; SS override
 25983 000042D2 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 25984 000042D7 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 25985                                  
 25986                                  ; 21/02/2024
 25987                                  %if 0
 25988                                  	;mov	ax,[di+6]
 25989                                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 25990                                  	; MSDOS 6.0
 25991                                  	;mov	[ss:si+1],ax
 25992                                  	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25993                                  	; 19/05/2019 - Retro DOS v4.0
 25994                                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25995                                  
 25996                                  ;hkn; SS is DOSDATA
 25997                                  	push	ss
 25998                                  	pop	ds
 25999                                  	; MSDOS 3.3
 26000                                  	;;mov	[si+1],ax
 26001                                  	;MOV	[SI+FEI.dirsec],AX
 26002                                  	; MSDOS 6.0
 26003                                  	;mov	[si+3],ax
 26004                                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 26005                                  %else
 26006                                  	;lds	ax,[di+6]
 26007 000042DA C54506                  	lds	ax,[di+BUFFINFO.buf_sector]	; get directory sector
 26008                                  	;mov	[ss:si+1],ax
 26009                                  	; 27/06/2024
 26010                                  	;mov	[ss:si+FEI.dirsec],ax
 26011                                  	;
 26012                                  	;mov	[ss:si+3],ax
 26013 000042DD 368C5C03                	mov	[ss:si+FEI.dirsec+2],ds
 26014 000042E1 16                      	push	ss
 26015 000042E2 1F                      	pop	ds
 26016                                  	; 27/06/2024
 26017 000042E3 894401                  	mov	[si+FEI.dirsec],ax
 26018                                  %endif
 26019                                  
 26020                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26021 000042E6 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 26022                                  	;mov	[si+5],ax ; MSDOS 6.0
 26023                                  	;;mov	[si+3],ax ; MSDOS 3.3
 26024 000042E9 894405                  	MOV	[SI+FEI.clusnum],AX
 26025                                  	; MSDOS 6.0
 26026 000042EC A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 26027                                  	;mov	[si+7],ax
 26028 000042EF 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 26029 000042F2 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 26030                                  	;mov	[si+9],ax
 26031 000042F5 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 26032                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26033 000042F8 89D8                    	MOV	AX,BX
 26034                                  	;;add	di,16  ; MSDOS 3.3
 26035                                  	;add	di,20  ; MSDOS 6.0
 26036 000042FA 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 26037 000042FD 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 26038                                  	;mov	cl,32
 26039 000042FF B120                    	MOV	CL,dir_entry.size
 26040 00004301 F6F1                    	DIV	CL
 26041                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 26042 00004303 8804                    	mov	[si],al
 26043                                  
 26044 00004305 1E                      	PUSH	DS
 26045 00004306 07                      	POP	ES
 26046                                  
 26047 00004307 8E1E[E405]              	MOV	DS,[CURBUF+2]
 26048 0000430B 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 26049                                  	;cmp	word [di+1Ah],0
 26050 0000430D 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 26051                                  					; never insert info when file is empty
 26052 00004311 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 26053                                  
 26054 00004313 56                      	PUSH	SI			; ES:BX -> extended info
 26055 00004314 5B                      	POP	BX
 26056                                  
 26057                                  	;mov	al,2
 26058 00004315 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 26059 00004317 BE[300D]                	MOV	SI,FastOpenTable
 26060                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 26061                                  	; 07/12/2022
 26062 0000431A 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 26063                                  
 26064 0000431E F8                      	CLC
 26065                                  SKIP_INSERT:
 26066 0000431F 58                      	POP	AX
 26067 00004320 59                      	POP	CX			; restore registers
 26068 00004321 5F                      	POP	DI
 26069 00004322 5E                      	POP	SI
 26070 00004323 5B                      	POP	BX
 26071 00004324 07                      	POP	ES
 26072 00004325 1F                      	POP	DS
 26073                                  GET_NEXT2:
 26074                                  	;or	[ss:FastOpenFlg],8
 26075 00004326 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 26076                                  					; we got dir info from fastopen so
 26077                                  GET_NEXT_ELEMENT:
 26078 0000432C 9D                      	POPF
 26079 0000432D C3                      	RETN
 26080                                  
 26081                                  ;============================================================================
 26082                                  ; DEV.ASM (MSDOS 6.0, 1991)
 26083                                  ;============================================================================
 26084                                  ; 17/07/2018 - Retro DOS v3.0
 26085                                  ; 30/04/2019 - Retro DOS v4.0
 26086                                  
 26087                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 26088                                  
 26089                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 26090                                  
 26091                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 26092                                  
 26093                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 26094                                  ;DEV001s:
 26095                                  ;		length of packets
 26096 0000432E 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 26097                                  ;LenTab: db	22,14,22,13,15,14
 26098                                  
 26099                                  ;	Error Function
 26100                                  
 26101                                  CmdTab:
 26102 00004334 8604                    	DB	86h, DEVRD	; 0 input
 26103 00004336 8605                    	DB	86h, DEVRDND	; 1 input status
 26104 00004338 8708                    	DB	87h, DEVWRT	; 2 output
 26105 0000433A 870A                    	DB	87h, DEVOST	; 3 output status
 26106 0000433C 8607                    	DB	86h, DEVIFL	; 4 input flush
 26107 0000433E 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 26108                                  
 26109                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 26110                                  
 26111                                  ;CmdTab:
 26112                                  ;	db	86h, 4
 26113                                  ;	db	86h, 5
 26114                                  ;	db	87h, 8
 26115                                  ;	db	87h, 10
 26116                                  ;	db	86h, 7
 26117                                  ;	db	86h, 5
 26118                                  
 26119                                  ;DEV001E:
 26120                                  
 26121                                  ; 30/04/2019 - Retro DOS v4.0
 26122                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 26123                                  
 26124                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 26125                                  ;----------------------------------------------------------------------------
 26126                                  ;
 26127                                  ; Procedure Name : IOFUNC
 26128                                  ;
 26129                                  ; Inputs:
 26130                                  ;	DS:SI Points to SFT
 26131                                  ;	AH is function code
 26132                                  ;		= 0 Input
 26133                                  ;		= 1 Input Status
 26134                                  ;		= 2 Output
 26135                                  ;		= 3 Output Status
 26136                                  ;		= 4 Flush
 26137                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 26138                                  ;				   present.
 26139                                  ;	AL = character if output
 26140                                  ; Function:
 26141                                  ;	Perform indicated I/O to device or file
 26142                                  ; Outputs:
 26143                                  ;	AL is character if input
 26144                                  ;	If a status call
 26145                                  ;		zero set if not ready
 26146                                  ;		zero reset if ready (character in AL for input status)
 26147                                  ; For regular files:
 26148                                  ;	Input Status
 26149                                  ;		Gets character but restores position
 26150                                  ;		Zero set on EOF
 26151                                  ;	Input
 26152                                  ;		Gets character advances position
 26153                                  ;		Returns ^Z on EOF
 26154                                  ;	Output Status
 26155                                  ;		Always ready
 26156                                  ; AX altered, all other registers preserved
 26157                                  ;----------------------------------------------------------------------------
 26158                                  
 26159                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26160                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 26161                                  
 26162                                  IOFUNC:
 26163 00004340 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 26164                                  					; DEVIOBUF
 26165 00004345 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 26166 0000434C 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 26167 00004353 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 26168                                  	;test	byte [si+6],80h
 26169                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 26170 00004357 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26171 0000435B 7403                    	JZ	short IOTO22		;AN000;
 26172 0000435D E9A300                  	JMP	IOTOFILE		;AN000;
 26173                                  IOTO22:
 26174                                  	;test	word [si+5],80h
 26175                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 26176 00004360 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 26177 00004364 7503                    	JNZ	short IOTO33		;AN000;
 26178 00004366 E99A00                  	JMP	IOTOFILE		;AN000;
 26179                                  IOTO33:
 26180 00004369 06                      	push	es ; * (MSDOS 6.21)
 26181 0000436A E8F9C0                  	call	save_world
 26182 0000436D 8CDA                    	MOV	DX,DS
 26183 0000436F 8CD3                    	MOV	BX,SS
 26184 00004371 8EDB                    	MOV	DS,BX
 26185 00004373 8EC3                    	MOV	ES,BX
 26186 00004375 31DB                    	XOR	BX,BX
 26187 00004377 80FC05                  	cmp	ah,5		    ; system wait enabled?
 26188 0000437A 7502                    	jnz	short _no_sys_wait
 26189                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26190                                  	; 16/12/2022
 26191                                  	;or	bh,04h
 26192                                  	;;or	bx,0400H	    ; Set bit 10 in status word for driver
 26193                                  				    ; It is up to device driver to carry out
 26194                                  				    ; appropriate action.
 26195                                  	; 04/07/2024
 26196 0000437C B704                    	mov	bh,4
 26197                                  _no_sys_wait:
 26198 0000437E 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 26199 00004382 31DB                    	XOR	BX,BX
 26200 00004384 881E[8903]              	MOV	[IOMED],BL
 26201                                  
 26202 00004388 88E3                    	MOV	BL,AH		 	; get function
 26203 0000438A 2E8AA7[2E43]            	MOV	AH,[cs:BX+LenTab]
 26204 0000438F D1E3                    	SHL	BX,1
 26205 00004391 2E8B8F[3443]            	MOV	CX,[cs:BX+CmdTab]
 26206 00004396 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 26207 00004399 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 26208 0000439D 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 26209                                  
 26210 000043A1 8EDA                    	MOV	DS,DX
 26211 000043A3 E86401                  	CALL	DEVIOCALL
 26212 000043A6 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 26213 000043AB 21FF                    	and	di,di
 26214 000043AD 7833                    	js	short DevErr
 26215                                  OKDevIO:
 26216 000043AF 8CD0                    	MOV	AX,SS
 26217 000043B1 8ED8                    	MOV	DS,AX
 26218                                  
 26219                                  	;cmp	ch,5
 26220 000043B3 80FD05                  	CMP	CH,DEVRDND
 26221 000043B6 7506                    	JNZ	short DNODRD
 26222 000043B8 A0[8903]                	MOV	AL,[IORCHR]
 26223 000043BB A2[BC03]                	MOV	[DEVIOBUF],AL
 26224                                  
 26225                                  DNODRD: 
 26226 000043BE 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 26227 000043C2 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 26228                                  	;and	ah,2
 26229 000043C4 80E402                  	AND	AH,STBUI>>8
 26230                                  
 26231                                  QuickReturn:				;AN000; 2/13/KK
 26232 000043C7 E885C0                  	call	restore_world
 26233 000043CA 07                      	pop	es ; * (MSDOS 6.21)
 26234                                  
 26235                                  	; SR;
 26236                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 26237                                  	; IoStatFail = -1 (set after return from the I24)
 26238                                  
 26239                                  	; MSDOS 6.0
 26240 000043CB 9C                      	pushf
 26241 000043CC 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 26242 000043D0 98                      	cbw				;sign extend to word
 26243                                  	;cmp	ax,-1
 26244                                  	; 27/06/2024
 26245 000043D1 3CFF                    	cmp	al,0FFh ; -1
 26246 000043D3 7507                    	jne	short not_fail_ret
 26247 000043D5 36FE06[8300]            	inc	byte [ss:IoStatFail]
 26248 000043DA 9D                      	popf
 26249 000043DB C3                      	retn
 26250                                  
 26251                                  not_fail_ret:
 26252 000043DC 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 26253 000043E0 9D                      	popf
 26254 000043E1 C3                      	retn
 26255                                  
 26256                                  DevErr:
 26257 000043E2 88CC                    	MOV	AH,CL
 26258 000043E4 E8630D                  	call	CHARHARD
 26259 000043E7 3C01                    	CMP	AL,1
 26260 000043E9 7507                    	JNZ	short NO_RETRY
 26261 000043EB E861C0                  	call	restore_world
 26262                                  	; 12/05/2019
 26263 000043EE 07                      	pop	es ; * (MSDOS 6.21)		
 26264 000043EF E94EFF                  	JMP	IOFUNC	; 10/08/2018
 26265                                  
 26266                                  NO_RETRY:
 26267                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 26268                                  	; ready so that DOS doesn't get caught in a status loop when user 
 26269                                  	; simply wants to ignore the error.
 26270                                  	;
 26271                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 26272                                  	; should be checked by the caller on return
 26273                                  
 26274                                  					; SS override
 26275 000043F2 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 26276                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 26277                                  
 26278                                  	; SR;
 26279                                  	; Check if user failed
 26280                                  
 26281                                  	; MSDOS 6.0
 26282 000043F8 3C03                    	cmp	al,3
 26283 000043FA 7505                    	jnz	short not_fail
 26284 000043FC 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 26285                                  not_fail:
 26286 00004401 EBAC                    	JMP	short OKDevIO
 26287                                  
 26288                                  IOTOFILE:
 26289 00004403 08E4                    	OR	AH,AH
 26290 00004405 7421                    	JZ	short IOIN
 26291 00004407 FECC                    	DEC	AH
 26292 00004409 7405                    	JZ	short IOIST
 26293 0000440B FECC                    	DEC	AH
 26294 0000440D 7411                    	JZ	short IOUT
 26295                                  IOUT_retn:	; 18/12/2022
 26296 0000440F C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 26297                                  IOIST:
 26298                                  	;push	word [si+15h]
 26299 00004410 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 26300                                  	;push	word [si+17h]
 26301 00004413 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 26302 00004416 E80F00                  	CALL	IOIN
 26303                                  	;pop	word [si+17h]
 26304 00004419 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 26305                                  	;pop	word [si+15h]
 26306 0000441C 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 26307 0000441F C3                      	retn
 26308                                  IOUT:
 26309 00004420 E82500                  	CALL	SETXADDR
 26310 00004423 E8CDEF                  	call	DOS_WRITE
 26311                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 26312                                  	; 18/12/2022
 26313 00004426 EB4F                    	jmp	RESTXADDR
 26314                                  ;IOUT_retn:
 26315                                  	;retn			; come crying to me when things don't
 26316                                  				; work ARR
 26317                                  IOIN:
 26318 00004428 E81D00                  	CALL	SETXADDR
 26319                                  					; SS override for DOS34_FLAG
 26320                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 26321                                  	;or	word [ss:DOS34_FLAG],40h
 26322                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26323                                  	; 16/12/2022
 26324 0000442B 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 26325 00004431 E8BEED                  	CALL	DOS_READ
 26326                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 26327                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 26328                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26329                                  	; 16/12/2022
 26330 00004434 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 26331 0000443A 09C9                    	OR	CX,CX			; Check EOF
 26332 0000443C E83800                  	CALL	RESTXADDR
 26333                                  					; SS override
 26334 0000443F 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 26335 00004443 75CA                    	jnz	short IOUT_retn	
 26336 00004445 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 26337 00004447 C3                      	retn
 26338                                  
 26339                                  SETXADDR:
 26340                                  					; SS override
 26341 00004448 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 26342                                  
 26343 0000444D 06                      	push	es ; * (MSDOS 6.21)
 26344                                  
 26345 0000444E E815C0                  	call	save_world
 26346                                  					; SS override for DMAADD and THISSFT
 26347                                  	; 24/09/2023
 26348                                  	;PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 26349                                  	;PUSH	WORD [SS:DMAADD+2]
 26350 00004451 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 26351                                  
 26352                                  ; 22/02/2024
 26353                                  %if 0
 26354                                  	push	ss
 26355                                  	pop	ds
 26356                                  
 26357                                  	; 24/09/2023
 26358                                  	push	word [DMAADD]
 26359                                  	push	word [DMAADD+2]
 26360                                  
 26361                                  	MOV	[THISSFT],SI		; Finish setting SFT pointer
 26362                                  	MOV	CX,[IOXAD+2]
 26363                                  	MOV	[DMAADD+2],CX
 26364                                  	MOV	CX,[IOXAD]
 26365                                  	MOV	[DMAADD],CX		; Set byte trans addr
 26366                                  %else
 26367                                  	; 22/02/2024 - Retro DOS v4.1
 26368                                  	; PCDOS 7.1 IBMDOS.COM
 26369                                  	
 26370 00004456 36C50E[2C03]            	lds	cx,[ss:DMAADD]		; Save Disk transfer address
 26371 0000445B 51                      	push	cx
 26372 0000445C 1E                      	push	ds
 26373 0000445D 36C50E[8A03]            	lds	cx,[ss:IOXAD]		; Set byte trans address
 26374 00004462 368C1E[2E03]            	mov	[ss:DMAADD+2],ds
 26375 00004467 16                      	push	ss
 26376 00004468 1F                      	pop	ds
 26377 00004469 890E[2C03]              	mov	[DMAADD],cx
 26378 0000446D 8936[9E05]              	mov	[THISSFT],si
 26379                                  %endif
 26380 00004471 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 26381 00004475 EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 26382                                  
 26383                                  RESTXADDR:
 26384 00004477 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 26385 0000447B 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 26386 0000447F 8F06[2C03]              	POP	WORD [DMAADD]
 26387                                  
 26388 00004483 E8C9BF                  	call	restore_world
 26389                                  
 26390 00004486 07                      	pop	es ; * (MSDOS 6.21)
 26391                                  					; SS override
 26392                                  RESTRET:
 26393 00004487 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 26394                                  
 26395                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 26396                                  ; 21/11/2022
 26397                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 26398                                  
 26399                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 26400                                  
 26401                                  ;----------------------------------------------------------------------------
 26402                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 26403                                  ;
 26404                                  ;	Dev_Open_SFT issues an open call to the device associated with
 26405                                  ;	the SFT.
 26406                                  ;
 26407                                  ;	ENTRY	(ES:DI) = SFT
 26408                                  ;	EXIT	none
 26409                                  ;	USES	all
 26410                                  ;----------------------------------------------------------------------------
 26411                                  
 26412                                  DEV_OPEN_SFT:
 26413 0000448C 06                      	push	es ; * (MSDOS 6.21)
 26414 0000448D E8D6BF                  	call	save_world
 26415                                  	;mov	al,0Dh	
 26416 00004490 B00D                    	MOV	AL,DEVOPN
 26417 00004492 EB06                    	JMP	SHORT DO_OPCLS
 26418                                  
 26419                                  ;----------------------------------------------------------------------------
 26420                                  ; Procedure Name : DEV_CLOSE_SFT
 26421                                  ;
 26422                                  ; Inputs:
 26423                                  ;	ES:DI Points to SFT
 26424                                  ; Function:
 26425                                  ;	Issue a CLOSE call to the correct device
 26426                                  ; Outputs:
 26427                                  ;	None
 26428                                  ; ALL preserved
 26429                                  ;----------------------------------------------------------------------------
 26430                                  
 26431                                  DEV_CLOSE_SFT:
 26432 00004494 06                      	push	es ; * (MSDOS 6.21)
 26433 00004495 E8CEBF                  	call	save_world
 26434                                  	;mov	al,0Eh	
 26435 00004498 B00E                    	MOV	AL,DEVCLS
 26436                                  
 26437                                  	; Main entry for device open and close. AL contains the function 
 26438                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 26439                                  	; open/close to block devices. This allows networks to function but 
 26440                                  	; does NOT hang up with bogus change-line code.
 26441                                  
 26442                                  	;entry	DO_OPCLS
 26443                                  DO_OPCLS:
 26444                                  	; Is the SFT for the net? If so, no action necessary.
 26445                                  
 26446                                  	; MSDOS 6.0
 26447                                  	;test	word [es:di+5],8000h
 26448                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 26449 0000449A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 26450 0000449F 7564                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 26451 000044A1 30E4                    	XOR	AH,AH			; Unit
 26452                                  	;test	byte [es:di+5],80h
 26453 000044A3 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26454                                  	;les	di,[es:di+7]
 26455 000044A8 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 26456 000044AC 7511                    	JNZ	short GOT_DEV_ADDR
 26457                                  
 26458                                  	; We are about to call device open/close on a block driver. If no 
 26459                                  	; sharing then just short circuit to done.
 26460                                  	
 26461                                  	; MSDOS 6.0
 26462                                  					; SS override
 26463 000044AE 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 26464 000044B4 764F                    	JBE	short OPCLS_DONE	;AN010; yes
 26465                                  
 26466                                  ; 22/02/2024
 26467                                  %if 0
 26468                                  	; MSDOS 3.3 (& MSDOS 6.0)
 26469                                  	;mov	ah,[es:di+1]
 26470                                  	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 26471                                  	mov	cl,[es:di]
 26472                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 26473                                  %else
 26474                                  	; 22/02/2024 - Retro DOS v4.1
 26475                                  	; (PCDOS 7.1 IBMDOS.COM)
 26476                                  	;mov	cx,[es:di+DPB.DRIVE]
 26477 000044B6 268B0D                  	mov	cx,[es:di]
 26478 000044B9 88EC                    	mov	ah,ch			; AH = unit
 26479                                  					; CL = drive
 26480                                  %endif
 26481                                  
 26482                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 26483                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 26484 000044BB 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 26485                                  GOT_DEV_ADDR:				; ES:DI -> device
 26486                                  	;test	word [es:di+4],800h
 26487                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 26488 000044BF 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 26489 000044C4 743F                    	JZ	short OPCLS_DONE	; Device can't
 26490 000044C6 06                      	PUSH	ES
 26491 000044C7 1F                      	POP	DS
 26492 000044C8 89FE                    	MOV	SI,DI			; DS:SI -> device
 26493                                  
 26494                                  OPCLS_RETRY:
 26495                                  	;Context ES
 26496 000044CA 16                      	push	ss
 26497 000044CB 07                      	pop	es
 26498                                  					; DEVCALL is in DOSDATA
 26499 000044CC BF[5A03]                	MOV	DI,DEVCALL
 26500                                  
 26501 000044CF 89FB                    	MOV	BX,DI
 26502 000044D1 50                      	PUSH	AX
 26503                                  	;mov	al,13
 26504 000044D2 B00D                    	MOV	AL,DOPCLHL
 26505 000044D4 AA                      	STOSB				; Length
 26506 000044D5 58                      	POP	AX
 26507                                  
 26508 000044D6 86E0                    	XCHG	AH,AL
 26509                                  	;STOSB				; Unit
 26510                                  	; 22/02/2024 (PCDOS 7.1 IBMDOS.COM)
 26511 000044D8 AB                      	stosw				; Unit, Command
 26512 000044D9 86E0                    	XCHG	AH,AL
 26513                                  	;STOSB				; Command
 26514                                  
 26515 000044DB 26C7050000              	MOV	WORD [ES:DI],0		; Status
 26516 000044E0 50                      	PUSH	AX			; Save Unit,Command
 26517                                  	;invoke	DEVIOCALL2
 26518 000044E1 E82900                  	call	DEVIOCALL2
 26519                                  
 26520                                  	;mov	di,[es:bx+3]
 26521 000044E4 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 26522                                  	;test	di,8000h
 26523                                  	;jz	short OPCLS_DONEP	
 26524 000044E8 21FF                    	and	di,di
 26525 000044EA 7918                    	jns	short OPCLS_DONEP	; No error
 26526                                  	; 21/11/2022
 26527                                  	;test	word [si+4],8000h
 26528                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 26529                                  	;test	word [si+5],80h
 26530 000044EC F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 26531 000044F0 7404                    	JZ	short BLKDEV
 26532 000044F2 B486                    	MOV	AH,86H			; Read error in data, Char dev
 26533 000044F4 EB04                    	JMP	SHORT HRDERR
 26534                                  BLKDEV:
 26535 000044F6 88C8                    	MOV	AL,CL			; Drive # in AL
 26536 000044F8 B406                    	MOV	AH,6			; Read error in data, Blk dev
 26537                                  HRDERR:
 26538                                  	;invoke	CHARHARD
 26539 000044FA E84D0C                  	call	CHARHARD
 26540 000044FD 3C01                    	cmp	al,1
 26541 000044FF 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 26542                                  					;  Note that FAIL is essentually IGNORED
 26543 00004501 58                      	POP	AX			; Get back Unit, Command
 26544 00004502 EBC6                    	JMP	short OPCLS_RETRY
 26545                                  OPCLS_DONEP:
 26546 00004504 58                      	POP	AX			; Clean stack
 26547                                  OPCLS_DONE:
 26548 00004505 E847BF                  	call	restore_world
 26549 00004508 07                      	pop	es ; * (MSDOS 6.21)
 26550 00004509 C3                      	retn
 26551                                  
 26552                                  ; 30/04/2019 - Retro DOS v4.0
 26553                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 26554                                  
 26555                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26556                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 26557                                  
 26558                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 26559                                  ;----------------------------------------------------------------------------
 26560                                  ;**	DevIoCall  - Call Device
 26561                                  ;
 26562                                  ;	ENTRY	DS:SI Points to device SFT
 26563                                  ;		ES:BX Points to request data
 26564                                  ;	EXIT	DS:SI -> Device driver
 26565                                  ;	USES	DS:SI,AX
 26566                                  ;----------------------------------------------------------------------------
 26567                                  ;**	DevIoCall2 - Call Device
 26568                                  ;
 26569                                  ;	ENTRY	DS:SI Points to DPB
 26570                                  ;		ES:BX Points to request data
 26571                                  ;	EXIT	DS:SI -> Device driver
 26572                                  ;	USES	DS:SI,AX
 26573                                  ;----------------------------------------------------------------------------
 26574                                  
 26575                                  DEVIOCALL:
 26576                                  					; SS override for CALLSSEC, 
 26577                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 26578 0000450A C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 26579                                  
 26580                                  	;entry	DEVIOCALL2
 26581                                  DEVIOCALL2:
 26582                                  	;EnterCrit critDevice
 26583 0000450D E80CCE                  	call	ECritDevice
 26584                                  
 26585                                  	; MSDOS 6.0
 26586                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 26587                                  	;test	byte [si+5],80h
 26588 00004510 F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 26589 00004514 7545                    	jnz	short chardev2		;AN000; >32mb no
 26590                                  
 26591                                  	; 16/12/2022
 26592                                  	; 22/11/2022
 26593 00004516 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 26594 0000451A 3C04                    	cmp	al,DEVRD	; 4
 26595 0000451C 7408                    	je	short chkext	
 26596 0000451E 3C08                    	cmp	al,DEVWRT	; 8
 26597 00004520 7404                    	je	short chkext
 26598 00004522 3C09                    	cmp	al,DEVWRTV	; 9
 26599 00004524 7535                    	jne	short chardev2
 26600                                  
 26601                                  	; 16/12/2022
 26602                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26603                                  	;;cmp	byte [es:bx+2],4
 26604                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 26605                                  	;JZ	short chkext		;AN000; >32mb   yes
 26606                                  	;;cmp	byte [es:bx+2],8
 26607                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 26608                                  	;JZ	short chkext		;AN000; >32mb   yes
 26609                                  	;;cmp	byte [es:bx+2],9
 26610                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 26611                                  	;				;AN000; >32mb write/verify ?
 26612                                  	;JNZ	short chardev2		;AN000; >32mb no
 26613                                  chkext:
 26614 00004526 E8A400                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 26615 00004529 7252                    	JC	short dev_exit		;AN000;LB. done
 26616                                  
 26617                                  	;test	byte [si+4],2
 26618 0000452B F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 26619 0000452F 741A                    	JZ	short chksector		;AN000;>32mb   no
 26620 00004531 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 26621                                  
 26622                                  	;MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 26623                                  	;MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 26624                                  	; 22/02/2024
 26625 00004535 B8FFFF                  	mov	ax,-1 ; 0FFFFh
 26626 00004538 368706[6E03]            	xchg    ax,[ss:CALLSSEC]
 26627                                  
 26628 0000453D 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 26629 00004541 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 26630 00004545 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 26631 00004549 EB10                    	JMP	short chardev2		;AN000; >32mb
 26632                                  chksector:				;AN000; >32mb
 26633 0000454B 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 26634 00004551 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 26635                                  	;mov	word [es:bx+3],8107h
 26636 00004553 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 26637                                  					;AN000; >32mb
 26638 00004559 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 26639                                  
 26640                                  chardev2:				;AN000;
 26641                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 26642                                  	; preserved
 26643                                  
 26644                                  	;mov	ax,[si+6]
 26645 0000455B 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 26646 0000455E 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26647 00004562 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 26648 00004567 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26649                                  
 26650                                  	;mov	ax,[si+8]
 26651 0000456C 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 26652 0000456F 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 26653 00004573 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 26654                                  
 26655                                  	; MSDOS 6.0
 26656 00004578 E84801                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 26657 0000457B 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 26658                                  
 26659                                  dev_exit:
 26660                                  	;LeaveCrit critDevice
 26661                                  	;call	LCritDevice
 26662                                  	;retn
 26663                                  	; 18/12/2022
 26664 0000457D E9B7CD                  	jmp	LCritDevice
 26665                                  
 26666                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 26667                                  ; 22/11/2022
 26668                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 26669                                  
 26670                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 26671                                  ;---------------------------------------------------------------------------
 26672                                  ;
 26673                                  ; Procedure Name : SETREAD, SETWRITE
 26674                                  ;
 26675                                  ; Inputs:
 26676                                  ;	DS:BX = Transfer Address
 26677                                  ;	CX = Record Count
 26678                                  ;	DX = Starting Record
 26679                                  ;	AH = Media Byte
 26680                                  ;	AL = Unit Code
 26681                                  ; Function:
 26682                                  ;	Set up the device call header at DEVCALL
 26683                                  ; Output:
 26684                                  ;	ES:BX Points to DEVCALL
 26685                                  ; No other registers effected
 26686                                  ;
 26687                                  ;---------------------------------------------------------------------------
 26688                                  
 26689                                  SETREAD_XJ:
 26690                                  	;;;
 26691                                  	; 07/02/2024 - Retro DOS v4.1
 26692 00004580 89FB                    	mov	bx,di
 26693 00004582 EB07                    	jmp	short SETREAD_X
 26694                                  	;;;
 26695                                  
 26696                                  SETREAD_XT:
 26697                                  	;;;
 26698                                  	; 07/02/2024 - Retro DOS v4.1
 26699 00004584 BB[B603]                	mov	bx,TIMEBUF
 26700 00004587 53                      	push	bx
 26701                                  SETREAD_XTC:
 26702 00004588 B90600                  	mov	cx,6
 26703                                  	;;;
 26704                                  SETREAD_X:
 26705                                  	;;;
 26706                                  	; 06/02/2024 - Retro DOS v4.1
 26707 0000458B 31C0                    	xor	ax,ax
 26708                                  	;mov	dx,ax ; 0
 26709 0000458D 99                      	cwd
 26710                                  	;;;
 26711                                  
 26712                                  ; ------------------------------------
 26713                                  
 26714                                  SETREAD:
 26715 0000458E 57                      	PUSH	DI
 26716 0000458F 51                      	PUSH	CX
 26717 00004590 50                      	PUSH	AX
 26718 00004591 B104                    	MOV	CL,DEVRD ; mov cl,4
 26719                                  SETCALLHEAD:
 26720 00004593 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 26721 00004595 16                      	PUSH	SS
 26722 00004596 07                      	POP	ES
 26723                                  					; DEVCALL is in DOSDATA
 26724 00004597 BF[5A03]                	MOV	DI,DEVCALL
 26725                                  
 26726 0000459A AA                      	STOSB				; length
 26727 0000459B 58                      	POP	AX			; 
 26728 0000459C AA                      	STOSB				; Unit
 26729 0000459D 50                      	PUSH	AX
 26730 0000459E 88C8                    	MOV	AL,CL
 26731 000045A0 AA                      	STOSB				; Command code
 26732 000045A1 31C0                    	XOR	AX,AX
 26733 000045A3 AB                      	STOSW				; Status
 26734 000045A4 83C708                  	ADD	DI,8			; Skip link fields
 26735 000045A7 58                      	POP	AX
 26736 000045A8 86E0                    	XCHG	AH,AL
 26737 000045AA AA                      	STOSB				; Media byte
 26738 000045AB 86C4                    	XCHG	AL,AH
 26739 000045AD 50                      	PUSH	AX
 26740 000045AE 89D8                    	MOV	AX,BX
 26741 000045B0 AB                      	STOSW
 26742                                  
 26743 000045B1 8CD8                    	MOV	AX,DS
 26744 000045B3 AB                      	STOSW				; Transfer addr
 26745                                  
 26746 000045B4 59                      	POP	CX			; Real AX
 26747 000045B5 58                      	POP	AX			; Real CX
 26748 000045B6 AB                      	STOSW				; Count
 26749                                  
 26750 000045B7 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 26751 000045B8 AB                      	STOSW				; Start
 26752 000045B9 91                      	XCHG	AX,CX
 26753 000045BA 87D1                    	XCHG	DX,CX
 26754 000045BC 5F                      	POP	DI
 26755                                  					; DEVCALL is in DOSDATA
 26756 000045BD BB[5A03]                	MOV	BX,DEVCALL
 26757 000045C0 C3                      	retn
 26758                                  
 26759                                  	;entry	SETWRITE
 26760                                  SETWRITE:
 26761                                  
 26762                                  ; Inputs:
 26763                                  ;	DS:BX = Transfer Address
 26764                                  ;	CX = Record Count
 26765                                  ;	DX = Starting Record
 26766                                  ;	AH = Media Byte
 26767                                  ;	AL = Unit Code
 26768                                  ; Function:
 26769                                  ;	Set up the device call header at DEVCALL
 26770                                  ; Output:
 26771                                  ;	ES:BX Points to DEVCALL
 26772                                  ; No other registers effected
 26773                                  
 26774 000045C1 57                      	PUSH	DI
 26775 000045C2 51                      	PUSH	CX
 26776 000045C3 50                      	PUSH	AX
 26777 000045C4 B108                    	MOV	CL,DEVWRT ; mov cl,8
 26778 000045C6 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 26779 000045CB EBC6                    	JMP	SHORT SETCALLHEAD
 26780                                  
 26781                                  ; 30/04/2019 - Retro DOS v4.0
 26782                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 26783                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26784                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 26785                                  
 26786                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 26787                                  ;---------------------------------------------------------------------------
 26788                                  ;
 26789                                  ; Procedure Name : RW_SC
 26790                                  ;
 26791                                  ; Inputs:
 26792                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 26793                                  ;	 [SC_STATUS]= SC validity status
 26794                                  ;	 [SEQ_SECTOR]= last sector read
 26795                                  ; Function:
 26796                                  ;	Read from or write through secondary cache
 26797                                  ; Output:
 26798                                  ;	ES:BX Points to DEVCALL
 26799                                  ;	carry clear, I/O is not done
 26800                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 26801                                  ;	carry set, I/O is done
 26802                                  ;
 26803                                  ;----------------------------------------------------------------------------
 26804                                  
 26805                                  RW_SC:
 26806                                  	; SS override for all variables used.
 26807                                  	
 26808 000045CD 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 26809 000045D3 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 26810 000045D5 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 26811 000045DB 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 26812 000045DD 51                      	PUSH	CX			    ;AN000;LB.
 26813 000045DE 52                      	PUSH	DX			    ;AN000;LB. yes
 26814 000045DF 1E                      	PUSH	DS			    ;AN000;LB. save registers
 26815 000045E0 56                      	PUSH	SI			    ;AN000;LB.
 26816 000045E1 06                      	PUSH	ES			    ;AN000;LB.
 26817 000045E2 57                      	PUSH	DI			    ;AN000;LB.
 26818                                  
 26819 000045E3 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 26820 000045E8 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 26821 000045EE 7408                    	JZ	short doread		    ;AN000;LB. yes
 26822 000045F0 E8BE00                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 26823 000045F3 E98B00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 26824                                  scexit4:				    ;AN000;
 26825 000045F6 F8                      	CLC				    ;AN000;LB. I/O not done yet
 26826 000045F7 C3                      	retn				    ;AN000;LB.
 26827                                  doread: 				    ;AN000;
 26828 000045F8 E82001                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 26829 000045FB 720A                    	JC	short readSC		    ;AN000;LB.
 26830 000045FD 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 26831 00004604 F9                      	STC				    ;AN000;LB. set carry
 26832 00004605 EB68                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 26833                                  readSC: 				    ;AN000;
 26834 00004607 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 26835 0000460B 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 26836 00004610 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 26837 00004615 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 26838                                  	; 24/09/2023
 26839                                  	;CMP	AX,0			    ;AN000;LB. greater than 64K
 26840 0000461A 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 26841                                  chklow: 						
 26842 0000461C 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 26843 0000461F 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 26844 00004621 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 26845 00004628 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 26846 0000462C 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 26847                                  readsr:
 26848 00004630 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 26849 00004634 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 26850 00004638 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 26851 0000463C 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 26852                                  
 26853 00004640 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 26854 00004644 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 26855 00004648 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 26856 0000464C 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 26857 00004650 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 26858 00004656 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 26859 0000465A 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 26860 0000465E 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 26861 00004662 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 26862 00004666 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 26863 0000466A 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 26864                                  saveseq2:				    ;AN000;
 26865 0000466E F8                      	CLC				    ;AN000;LB. clear carry
 26866                                  saveseq:				    ;AN000;	
 26867 0000466F 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 26868 00004673 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 26869 00004677 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 26870 0000467B 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 26871 0000467F EB01                    	JMP	short scexit 		    ;AN000;LB.	
 26872                                  scexit2:				    ;AN000;LB.
 26873 00004681 F8                      	CLC				    ;AN000;LB.	clear carry
 26874                                  scexit: 				    ;AN000;		
 26875 00004682 5F                      	POP	DI			    ;AN000;LB.
 26876 00004683 07                      	POP	ES			    ;AN000;LB. restore registers
 26877 00004684 5E                      	POP	SI			    ;AN000;LB.
 26878 00004685 1F                      	POP	DS			    ;AN000;LB.
 26879 00004686 5A                      	POP	DX			    ;AN000;LB.
 26880 00004687 59                      	POP	CX			    ;AN000;LB.
 26881 00004688 C3                      	retn				    ;AN000;LB.
 26882                                  
 26883                                  ;Break	<IN_SC -- check if in secondary cache>
 26884                                  ;--------------------------------------------------------------------------
 26885                                  ;
 26886                                  ; Procedure Name : IN_SC
 26887                                  ;
 26888                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26889                                  ;	   [CURSC_DRIVE]= current SC drive
 26890                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26891                                  ;	   [SC_CACHE_COUNT]= SC count
 26892                                  ;	   [HIGH_SECTOR]:DX= sector number
 26893                                  ; Function:
 26894                                  ;	Check if the sector is in secondary cache
 26895                                  ; Output:
 26896                                  ;	carry clear, in SC
 26897                                  ;	   CX= the index in the secondary cache
 26898                                  ;	carry set, not in SC
 26899                                  ;
 26900                                  ;---------------------------------------------------------------------------
 26901                                  
 26902                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26903                                  IN_SC:
 26904                                  	; SS override for all variables used
 26905 00004689 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 26906 0000468D 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 26907 00004692 751B                    	JNZ	short outrange2		    ;AN000;;LB. no
 26908 00004694 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 26909 00004698 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 26910 0000469A 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 26911 0000469F 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 26912                                  	; 24/09/2023
 26913                                  	;CMP	AX,0			    ;AN000;;LB. greater than 64K
 26914 000046A4 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 26915 000046A6 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 26916 000046AB 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 26917 000046AD F8                      	CLC				    ;AN000;;LB. clear carry
 26918                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 26919                                  	; 16/12/2022
 26920 000046AE C3                      	retn	; 30/04/2019
 26921                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26922                                  	;jmp	short inexit
 26923                                  
 26924                                  outrange2:				    ;AN000;;LB. set carry
 26925 000046AF F9                      	STC				    ;AN000;;LB.
 26926                                  inexit: 				    ;AN000;;LB.
 26927 000046B0 C3                      	retn				    ;AN000;;LB.
 26928                                  
 26929                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 26930                                  ;---------------------------------------------------------------------------
 26931                                  ;
 26932                                  ; Procedure Name : Invalidate_Sc
 26933                                  ;
 26934                                  ; Inputs:  [SC_DRIVE]= requesting drive
 26935                                  ;	   [CURSC_DRIVE]= current SC drive
 26936                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 26937                                  ;	   [SC_CACHE_COUNT]= SC count
 26938                                  ;	   [SC_STATUS]= SC status word
 26939                                  ;	   [HIGH_SECTOR]:DX= sector number
 26940                                  ;
 26941                                  ; Function:
 26942                                  ;	invalidate secondary cache if in there
 26943                                  ; Output:
 26944                                  ;	[SC_STATUS] is updated
 26945                                  ;---------------------------------------------------------------------------
 26946                                  
 26947                                  INVALIDATE_SC:
 26948                                  	; SS override for all variables used
 26949                                  
 26950 000046B1 E8D5FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 26951 000046B4 720C                    	JC	short outrange		    ;AN000;;LB. no
 26952 000046B6 B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 26953 000046B9 D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 26954 000046BB F7D0                    	NOT	AX			    ;AN000;;LB.
 26955 000046BD 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 26956                                  outrange:				    ;AN000;;LB.
 26957 000046C2 C3                      	retn				    ;AN000;;LB.
 26958                                  
 26959                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 26960                                  ; 22/11/2022
 26961                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 26962                                  
 26963                                  ;Break	<VIRREAD- virtually read data into buffer>
 26964                                  ;--------------------------------------------------------------------------
 26965                                  ;
 26966                                  ; Procedure Name : SC_FLAG
 26967                                  ;
 26968                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 26969                                  ;		     1, continuous sectors were read into SC
 26970                                  ; Function:
 26971                                  ;	   Move data from SC to buffer
 26972                                  ; Output:
 26973                                  ;	 carry clear, data is moved to buffer
 26974                                  ;	 carry set, bad sector or exceeds maximum sector
 26975                                  ;	   SC_FLAG =0
 26976                                  ;	   CALLSCNT=1
 26977                                  ;	   SC_STATUS= -1 if succeeded
 26978                                  ;     
 26979                                  ;		       0 if failed
 26980                                  ;--------------------------------------------------------------------------
 26981                                  
 26982                                  VIRREAD:
 26983                                  	; SS override for all variables used
 26984                                  
 26985 000046C3 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 26986 000046C9 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 26987 000046CB 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 26988 000046CF 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 26989 000046D3 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 26990 000046D7 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 26991 000046DB 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 26992 000046E1 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 26993                                  
 26994                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 26995 000046E8 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 26996 000046EE 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 26997 000046F0 1E                      	PUSH	DS			    ;AN000;;LB.
 26998 000046F1 56                      	PUSH	SI			    ;AN000;;LB.
 26999 000046F2 06                      	PUSH	ES			    ;AN000;;LB.
 27000 000046F3 57                      	PUSH	DI			    ;AN000;;LB.
 27001 000046F4 52                      	PUSH	DX			    ;AN000;;LB.
 27002 000046F5 51                      	PUSH	CX			    ;AN000;;LB.
 27003 000046F6 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 27004 000046F8 E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC to buf
 27005 000046FB 59                      	POP	CX
 27006 000046FC 5A                      	POP	DX			    ;AN000;;LB.
 27007 000046FD 5F                      	POP	DI			    ;AN000;;LB.
 27008 000046FE 07                      	POP	ES			    ;AN000;;LB.
 27009 000046FF 5E                      	POP	SI			    ;AN000;;LB.
 27010 00004700 1F                      	POP	DS			    ;AN000;;LB.
 27011 00004701 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 27012                                  scerror:				    ;AN000;
 27013 00004703 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 27014 0000470A 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 27015 00004711 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 27016 00004717 F9                      	STC				    ;AN000;;LB. carry set
 27017 00004718 C3                      	retn				    ;AN000;;LB.
 27018                                  sc2end: 				    ;AN000;
 27019 00004719 F8                      	CLC				    ;AN000;;LB. carry clear
 27020 0000471A C3                      	retn				    ;AN000;;LB.
 27021                                  
 27022                                  ; 30/04/2019 - Retro  DOS v4.0
 27023                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 27024                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27025                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 27026                                  
 27027                                  ;Break	<SC2BUF- move data from SC to buffer>
 27028                                  ;----------------------------------------------------------------------------
 27029                                  ;
 27030                                  ; Procedure Name : SC2BUF
 27031                                  ;
 27032                                  ; Inputs:  [SC_STATUS] = SC validity status
 27033                                  ;	   [SC_SECTOR_SIZE] = request sector size
 27034                                  ;	   [SC_CACHE_PTR] = pointer to SC
 27035                                  ; Function:
 27036                                  ;	   Move data from SC to buffer
 27037                                  ; Output:
 27038                                  ;	   carry clear, in SC  and data is moved
 27039                                  ;	   carry set, not in SC and data is not moved
 27040                                  ;---------------------------------------------------------------------------
 27041                                  
 27042                                  SC2BUF:
 27043                                  	; SS override for all variables used
 27044 0000471B E86BFF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 27045                                  	;JC	short noSC		    ;AN000;LB. no
 27046                                  	; 24/09/2023
 27047 0000471E 723D                    	jc	short sexit
 27048 00004720 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 27049 00004723 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 27050 00004725 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 27051 0000472A 7430                    	JZ	short noSC		    ;AN000;LB. invalid
 27052                                  ;entry SC2BUF2
 27053                                  SC2BUF2:				    ;AN000;
 27054                                  	;MOV	AX,CX			    ;AN000;LB. times index with
 27055                                  	;MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 27056                                  	; 24/09/2023
 27057 0000472C 36A1[AD0D]              	mov	ax,[ss:SC_SECTOR_SIZE]
 27058 00004730 91                      	xchg	ax,cx ; cx = [ss:SC_SECTOR_SIZE]
 27059 00004731 F7E1                    	mul	cx
 27060 00004733 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 27061 00004738 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 27062 0000473D 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 27063 0000473F 89C6                    	MOV	SI,AX			    ;AN000;LB.
 27064 00004741 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 27065 00004746 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 27066                                  	; 24/09/2023
 27067                                  	;MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 27068 0000474B D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 27069                                  ;entry MOVWORDS
 27070                                  MOVWORDS:				    ;AN000;
 27071 0000474D 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 27072 00004753 7403                    	JZ	short nodd		    ;AN000;LB. no
 27073 00004755 D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 27074 00004757 66                      	DB	66H			    ;AN000;LB. use double word move
 27075                                  nodd:
 27076 00004758 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 27077 0000475A F8                      	CLC				    ;AN000;LB. clear carry
 27078 0000475B C3                      	retn				    ;AN000;LB. exit
 27079                                  noSC:					    ;AN000;
 27080 0000475C F9                      	STC				    ;AN000;LB. set carry
 27081                                  sexit:					    ;AN000;
 27082 0000475D C3                      	retn				    ;AN000;LB.
 27083                                  
 27084                                  ;============================================================================
 27085                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 27086                                  ;============================================================================
 27087                                  ; 29/07/2018 - Retro DOS v3.0
 27088                                  ; 19/05/2019 - Retro DOS v4.0
 27089                                  
 27090                                  ;	TITLE	MKNODE - Node maker
 27091                                  ;	NAME	MKNODE
 27092                                  
 27093                                  ;**	MKNODE.ASM
 27094                                  ;----------------------------------------------------------------------------
 27095                                  ;	Low level routines for making a new local file system node
 27096                                  ;	and filling in an SFT from a directory entry
 27097                                  ;
 27098                                  ;	BUILDDIR
 27099                                  ;	SETDOTENT
 27100                                  ;	MakeNode
 27101                                  ;	NEWENTRY
 27102                                  ;	FREEENT
 27103                                  ;	NEWDIR
 27104                                  ;	DOOPEN
 27105                                  ;	RENAME_MAKE
 27106                                  ;	CHECK_VIRT_OPEN
 27107                                  ;
 27108                                  ;	Revision history:
 27109                                  ;
 27110                                  ;	 AN000	version 4.0  Jan. 1988
 27111                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 27112                                  
 27113                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 27114                                  ;----------------------------------------------------------------------------
 27115                                  ;
 27116                                  ; Procedure Name : BUILDDIR,NEWDIR
 27117                                  ;
 27118                                  ; Inputs:
 27119                                  ;       ES:BP Points to DPB
 27120                                  ;       [THISSFT] Set if using NEWDIR entry point
 27121                                  ;               (used by ALLOCATE)
 27122                                  ;       [LASTENT] current last valid entry number in directory if no free
 27123                                  ;               entries
 27124                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 27125                                  ; Function:
 27126                                  ;       Grow directory if no free entries and not root
 27127                                  ; Outputs:
 27128                                  ;       CARRY SET IF FAILURE
 27129                                  ;       ELSE
 27130                                  ;          AX entry number of new entry
 27131                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 27132                                  ;               AX = first entry of new dir
 27133                                  ;       GETENT should be called to set [LASTENT]
 27134                                  ;
 27135                                  ;----------------------------------------------------------------------------
 27136                                  
 27137                                  ; 19/05/2019 - Retro DOS v4.0
 27138                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 27139                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27140                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 27141                                  
 27142                                  BUILDDIR:
 27143                                  	; 29/07/2018 - Retro DOS v3.0
 27144                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 27145                                  
 27146 0000475E A1[D805]                        MOV     AX,[ENTFREE]
 27147 00004761 83F8FF                          CMP     AX,-1 ; 0FFFFh
 27148                                  	;JZ	short CHECK_IF_ROOT
 27149                                          ;CLC
 27150                                          ;retn
 27151                                  	; 24/09/2023
 27152 00004764 7507                    	jne	short builddir_cmc_retn  ; cf=1 (will be 0)
 27153                                  
 27154                                  CHECK_IF_ROOT:
 27155 00004766 833E[C205]00                    CMP     word [DIRSTART],0
 27156 0000476B 7502                            JNZ	short NEWDIR
 27157                                          ;STC
 27158                                  	; 24/09/2023
 27159                                  	; [DIRSTART]=0, cf=0, zf=1 (cf will be 1 after cmc instruction)
 27160                                  builddir_cmc_retn:
 27161                                  	; 24/09/2023
 27162 0000476D F5                      	cmc	; cf=1 <-> cf=0
 27163                                  builddir_retn:
 27164 0000476E C3                              retn				; Can't grow root
 27165                                  
 27166                                  	;entry   NEWDIR
 27167                                  NEWDIR: 
 27168 0000476F 8B1E[C205]              	MOV     BX,[DIRSTART]
 27169 00004773 09DB                            OR      BX,BX
 27170 00004775 7405                            JZ	short NULLDIR
 27171 00004777 E80206                  	call	GETEOF
 27172 0000477A 72F2                            jc	short builddir_retn	; Screw up
 27173                                  NULLDIR:
 27174 0000477C B90100                          MOV     CX,1
 27175 0000477F E81305                  	call	ALLOCATE
 27176 00004782 72EA                            jc	short builddir_retn
 27177 00004784 8B16[C205]                      MOV     DX,[DIRSTART]
 27178 00004788 09D2                            OR      DX,DX
 27179 0000478A 750D                            JNZ	short ADDINGDIR
 27180 0000478C E8FCF5                  	call	SETDIRSRCH
 27181 0000478F 72DD                            jc	short builddir_retn
 27182 00004791 C706[4803]FFFF                  MOV     word [LASTENT],-1
 27183 00004797 EB29                            JMP     SHORT GOTDIRREC
 27184                                  ADDINGDIR:
 27185 00004799 53                              PUSH    BX
 27186 0000479A 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27187 0000479E E8F90B                          call	IsEOF
 27188 000047A1 5B                              POP     BX
 27189 000047A2 7217                            JB	short NOTFIRSTGROW
 27190                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27191 000047A4 891E[BC05]                      MOV     [CLUSNUM],BX
 27192                                  	; 24/09/2023
 27193                                  	;PUSH	CX ; (not necessary)
 27194 000047A8 50                      	PUSH	AX
 27195 000047A9 55                      	PUSH	BP
 27196 000047AA B401                            MOV     AH,1			; CLUSNUM update
 27197                                  	; 15/12/2022
 27198 000047AC 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 27199                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27200                                  	;;mov	dl,[es:bp+0]
 27201                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 27202 000047B0 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 27203 000047B4 89DD                            MOV     BP,BX 			; CLUSNUM
 27204 000047B6 E8AEDE                  	call	FastOpen_Update
 27205 000047B9 5D                              POP     BP
 27206 000047BA 58                              POP     AX
 27207                                  	; 24/09/2023
 27208                                          ;POP	CX
 27209                                  
 27210                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 27211                                  NOTFIRSTGROW:
 27212 000047BB 89DA                            MOV     DX,BX
 27213 000047BD 30DB                            XOR     BL,BL
 27214 000047BF E8AF04                  	call	FIGREC
 27215                                  GOTDIRREC:
 27216                                  	;mov	cl,[es:bp+4]
 27217 000047C2 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 27218                                  	;INC	CL
 27219                                  	; 27/06/2024
 27220 000047C6 41                      	inc	cx
 27221 000047C7 30ED                            XOR     CH,CH
 27222                                  ZERODIR:
 27223 000047C9 51                              PUSH    CX
 27224                                  	; 22/09/2023
 27225                                  	;;mov	byte [ALLOWED],18h
 27226                                          ;MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY ; *
 27227 000047CA B0FF                            MOV     AL,0FFH
 27228                                          ;call	GETBUFFR
 27229 000047CC E8E80F                          call	GETBUFFRD ; *
 27230 000047CF 7302                    	JNC	short GET_SSIZE
 27231 000047D1 59                              POP     CX
 27232 000047D2 C3                              retn
 27233                                  
 27234                                  GET_SSIZE:
 27235                                  	;mov	cx,[es:bp+2]
 27236 000047D3 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 27237 000047D7 06                              PUSH    ES
 27238 000047D8 C43E[E205]                      LES     DI,[CURBUF]
 27239                                  	;or	byte [es:di+5],4
 27240 000047DC 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 27241 000047E1 57                              PUSH    DI
 27242                                  	;;add	di,16	; MSDOS 3.3
 27243                                  	;add	di,20	; MSDOS 6.0	
 27244 000047E2 83C714                          ADD     DI,BUFINSIZ
 27245 000047E5 31C0                            XOR     AX,AX
 27246 000047E7 D1E9                            SHR     CX,1
 27247 000047E9 F3AB                            REP     STOSW
 27248 000047EB 7301                            JNC	short EVENZ
 27249 000047ED AA                              STOSB
 27250                                  EVENZ:
 27251 000047EE 5F                              POP     DI
 27252                                  
 27253                                  ; 07/07/2024 - Retro DOS v4.1
 27254                                  %if 0
 27255                                  	; MSDOS 6.0
 27256                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27257                                  					;LB. if already dirty		  ;AN000;
 27258                                  	JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 27259                                  	call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 27260                                  	
 27261                                  	;or	byte [es:di+5],40h
 27262                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27263                                  %else
 27264                                  	; 23/02/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 27265 000047EF E8C911                  	call	SET_BUF_DIRTY
 27266                                  %endif
 27267                                  
 27268                                  yesdirty7:
 27269 000047F2 07                              POP	ES
 27270 000047F3 59                              POP	CX
 27271                                  
 27272                                  	; 19/05/2019 - Retro DOS v4.0
 27273                                  
 27274                                  	; MSDOS 3.3
 27275                                  	;INC	DX
 27276                                  
 27277                                  	; MSDOS 6.0
 27278                                  	; 24/09/2023
 27279                                  	;add	dx,1
 27280                                  	;;adc	word [HIGH_SECTOR],0
 27281                                  	;; 24/09/2023
 27282                                  	;; ax=0
 27283                                  	;adc	[HIGH_SECTOR],ax ; 0
 27284                                  	; 24/09/2023
 27285 000047F4 42                      	inc	dx
 27286 000047F5 7504                    	jnz	short loop_zerodir
 27287 000047F7 FF06[0706]              	inc	word [HIGH_SECTOR]
 27288                                  loop_zerodir:
 27289 000047FB E2CC                            LOOP    ZERODIR
 27290                                  
 27291 000047FD A1[4803]                        MOV     AX,[LASTENT]
 27292 00004800 40                              INC     AX
 27293                                  	; 24/09/2023
 27294                                  	; cf=0
 27295                                  	;CLC
 27296 00004801 C3                              retn
 27297                                  
 27298                                  ;--------------------------------------------------------------------------
 27299                                  ;
 27300                                  ; Procedure Name : SETDOTENT
 27301                                  ;
 27302                                  ; set up a . or .. directory entry for a directory.
 27303                                  ;
 27304                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 27305                                  ;               AX contains ". " or ".."
 27306                                  ;               DX contains first cluster of entry
 27307                                  ;
 27308                                  ;----------------------------------------------------------------------------
 27309                                  
 27310                                  SETDOTENT:
 27311                                  ;	Fill in name field
 27312 00004802 AB                      	STOSW
 27313 00004803 B90400                  	MOV	CX,4
 27314 00004806 B82020                  	MOV	AX,"  " ; 2020h
 27315 00004809 F3AB                    	REP	STOSW
 27316 0000480B AA                      	STOSB
 27317                                  
 27318                                  ;	Set up attribute
 27319                                  	;mov	al, 10h
 27320 0000480C B010                    	MOV	AL,attr_directory
 27321 0000480E AA                      	STOSB
 27322                                  
 27323                                  ;	Initialize time and date of creation
 27324 0000480F 83C70A                  	ADD	DI,10
 27325 00004812 8B36[9E05]              	MOV	SI,[THISSFT]
 27326                                  	;mov	ax,[si+0Dh]
 27327 00004816 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 27328 00004819 AB                      	STOSW
 27329                                  	;mov	ax,[si+0Fh]
 27330 0000481A 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 27331 0000481D AB                      	STOSW
 27332                                  
 27333                                  ;	Set up first cluster field
 27334 0000481E 89D0                    	MOV	AX,DX
 27335 00004820 AB                      	STOSW
 27336                                  
 27337                                  ;	0 file size
 27338                                  	;XOR	AX,AX
 27339 00004821 91                      	xchg	ax,cx ; 23/02/2024
 27340 00004822 AB                      	STOSW
 27341 00004823 AB                      	STOSW
 27342 00004824 C3                      	retn
 27343                                  
 27344                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 27345                                  ;---------------------------------------------------------------------------
 27346                                  ;
 27347                                  ; Procedure Name : MakeNode
 27348                                  ;
 27349                                  ; Inputs:
 27350                                  ;       AL - attribute to create
 27351                                  ;       AH = 0 if it is ok to truncate a file already by this name
 27352                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 27353                                  ;               (AH ignored on dirs and devices)
 27354                                  ;
 27355                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 27356                                  ;               a name already existant is ALWAYS an error in these cases.
 27357                                  ;
 27358                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 27359                                  ;               terminated)
 27360                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 27361                                  ;               ( = -1 if current dir not involved, else
 27362                                  ;                Points to first char after last "/" of current dir part)
 27363                                  ;       [THISCDS] Points to CDS being used
 27364                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 27365                                  ; Function:
 27366                                  ;       Make a new node
 27367                                  ; Outputs:
 27368                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 27369                                  ;       CARRY SET IF ERROR
 27370                                  ;          AX = 1 A node by this name exists and is a directory
 27371                                  ;          AX = 2 A new node could not be created
 27372                                  ;          AX = 3 A node by this name exists and is a disk file
 27373                                  ;               (AH was NZ on input)
 27374                                  ;          AX = 4 Bad Path
 27375                                  ;               SI return from GetPath maintained
 27376                                  ;          AX = 5 Attribute mismatch
 27377                                  ;          AX = 6 Sharing Violation
 27378                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 27379                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 27380                                  ;       ELSE
 27381                                  ;          AX = 0 Disk Node
 27382                                  ;          AX = 3 Device Node (error in some cases)
 27383                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 27384                                  ;               containing new node.
 27385                                  ;          [CURBUF+2]:BX Points to entry
 27386                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 27387                                  ;          [THISSFT] is filled in
 27388                                  ;               sf_mode = unchanged.
 27389                                  ;          Attribute byte in entry is input AL
 27390                                  ; DS preserved, others destroyed
 27391                                  ;
 27392                                  ;-------------------------------------------------------------------------
 27393                                  
 27394                                  ; 19/05/2019 - Retro DOS v4.0
 27395                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 27396                                  
 27397                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27398                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 27399                                  
 27400                                  ; 23/02/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 27401                                  ; DOSCODE:8925h (MSDOS 6.22, MSDOS.SYS)
 27402                                  ; DOSCODE:951Ah (PCDOS 7.1, IBMDOS.COM)
 27403                                  
 27404                                  MakeNode:
 27405                                  	;mov	word [CREATING],0E5FFh
 27406 00004825 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 27407 0000482B 50                      	PUSH	AX 		; Save AH value
 27408 0000482C C606[4C03]00            	MOV	byte [NoSetDir],0
 27409 00004831 A2[6D05]                	MOV	[SATTRIB],AL
 27410 00004834 E8B7F5                  	call	GetPathNoSet
 27411 00004837 88CA                    	MOV	DL,CL		; Save CL info
 27412                                  	;MOV	CX,AX		; Device ID to CH
 27413                                  	; 23/02/2024
 27414 00004839 91                      	xchg	ax,cx
 27415 0000483A 58                      	POP	AX		; Get back AH
 27416 0000483B 732D                    	JNC	short make_exists ; File existed
 27417 0000483D 7505                    	JNZ	short make_err_4 ; Path bad
 27418 0000483F 80FA80                  	CMP	DL,80h		; Check "CL" return from GETPATH
 27419 00004842 7405                    	JZ	short make_type	; Name simply not found, and no metas
 27420                                  make_err_4:
 27421 00004844 B004                    	MOV	AL,4		; case 1 bad path
 27422                                  make_err_ret:
 27423                                  	;XOR	AH,AH
 27424                                  	; 23/02/2024
 27425 00004846 98                      	cbw
 27426 00004847 F9                      	STC
 27427                                  ;make_retn:	; 22/11/2022
 27428 00004848 C3                      	retn
 27429                                  
 27430                                  	;entry	RENAME_MAKE	; Used by DOS_RENAME to "copy" a node
 27431                                  RENAME_MAKE:
 27432                                  make_type:
 27433                                  ;Extended Open hooks
 27434                                  	; MSDOS 6.0
 27435                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 27436 00004849 F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 27437 0000484E 7411                    	JZ	short make_type2	;FT. no				;AN000;
 27438 00004850 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 27439                                  					;FT. set for extended open ;AN000;
 27440                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 27441 00004855 F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 27442 0000485A 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 27443 0000485C F9                      	STC				;FT. set carry			;AN000;
 27444 0000485D B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 27445                                  	; 22/11/2022
 27446                                  make_retn:
 27447                                  	;return
 27448 00004860 C3                      	retn				;FT.				;AN000;
 27449                                  
 27450                                  ;	Extended Open hooks
 27451                                  
 27452                                  make_type2:
 27453 00004861 C43E[9E05]              	LES	DI,[THISSFT]
 27454 00004865 31C0                    	XOR	AX,AX		; nothing exists Disk Node
 27455 00004867 F9                      	STC			; Not found
 27456 00004868 EB59                    	JMP	short make_new
 27457                                  
 27458                                  ; The node exists. It may be either a device, directory or file:
 27459                                  ;   Zero set => directory
 27460                                  ;   High bit of CH on => device
 27461                                  ;   else => file
 27462                                  
 27463                                  make_exists:
 27464 0000486A 7447                    	JZ	short make_exists_dir
 27465 0000486C B003                    	MOV	AL,3		; file exists type 3  (error or device node)
 27466                                  	;test	byte [ATTRIB],18h
 27467 0000486E F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 27468 00004873 753A                    	JNZ	short make_err_ret_5
 27469                                  				; Cannot already exist as Disk or Device Node
 27470                                  				;  if making DIR or Volume ID
 27471 00004875 08ED                    	OR	CH,CH
 27472 00004877 781A                    	JS	short make_share ; No further checks on attributes if device
 27473 00004879 08E4                    	OR	AH,AH
 27474 0000487B 75C9                    	JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 27475 0000487D 51                      	PUSH	CX		; Save device ID
 27476 0000487E 8E06[E405]              	MOV	ES,[CURBUF+2]
 27477                                  	;mov	ch,[es:bx+0Bh]
 27478 00004882 268A6F0B                	MOV	CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 27479                                  	;test	ch,1
 27480 00004886 F6C501                  	test	CH,attr_read_only
 27481 00004889 7523                    	JNZ	short make_err_ret_5P ; Cannot create on read only files
 27482 0000488B E8E6F7                  	call	MatchAttributes
 27483 0000488E 59                      	POP	CX		; Devid back in CH
 27484 0000488F 751E                    	JNZ	short make_err_ret_5 ; Attributes not ok
 27485 00004891 30C0                    	XOR	AL,AL		; AL = 0, Disk Node
 27486                                  
 27487                                  make_share:
 27488                                  	;XOR	AH,AH
 27489                                  	; 23/02/2024
 27490 00004893 98                      	cbw
 27491 00004894 50                      	PUSH	AX		; Save Disk or Device node
 27492 00004895 51                      	PUSH	CX		; Save Device ID
 27493 00004896 88EC                    	MOV	AH,CH		; Device ID to AH
 27494 00004898 E83901                  	CALL	DOOPEN		; Fill in SFT for share check
 27495 0000489B C43E[9E05]              	LES	DI,[THISSFT]
 27496 0000489F 56                      	push	si
 27497 000048A0 53                      	push	bx		; Save CURBUF pointers
 27498 000048A1 E8C928                  	call	ShareEnter
 27499 000048A4 734E                    	jnc	short MakeEndShare
 27500                                  
 27501                                  ; User failed request.
 27502 000048A6 5B                      	pop	bx
 27503 000048A7 5E                      	pop	si
 27504 000048A8 59                      	pop	cx
 27505 000048A9 58                      	pop	ax
 27506                                  
 27507                                  Make_Share_ret:
 27508 000048AA B006                    	MOV	AL,6
 27509 000048AC EB98                    	JMP	short make_err_ret
 27510                                  
 27511                                  make_err_ret_5P:
 27512 000048AE 59                      	POP	CX		; Get back device ID
 27513                                  make_err_ret_5:
 27514 000048AF B005                    	MOV     AL,5		; Attribute mismatch
 27515                                          ; 22/11/2022
 27516 000048B1 EB93                    	JMP	short make_err_ret
 27517                                  
 27518                                  make_exists_dir:
 27519 000048B3 B001                    	MOV	AL,1		; exists as directory, always an error
 27520                                  	; 22/11/2022
 27521 000048B5 EB8F                    	JMP	short make_err_ret
 27522                                  
 27523                                  make_save:
 27524 000048B7 50                      	PUSH	AX		; Save whether Disk or File
 27525 000048B8 89C8                    	MOV	AX,CX		; Device ID to AH
 27526 000048BA E86800                  	CALL	NEWENTRY
 27527 000048BD 58                      	POP	AX		; 0 if Disk, 3 if File
 27528 000048BE 73A0                    	jnc	short make_retn
 27529 000048C0 B002                    	MOV	AL,2		; create failed case 2
 27530                                  make_save_retn:
 27531 000048C2 C3                      	retn
 27532                                  
 27533                                  make_new:
 27534 000048C3 E8F1FF                  	call	make_save
 27535 000048C6 72FA                    	jc	short make_save_retn	; case 2 fail
 27536                                  	;test	byte [ATTRIB],10h
 27537 000048C8 F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 27538 000048CD 75F3                    	jnz	short make_save_retn	; Don't "open" directories,
 27539                                  					; so don't tell the sharer about them
 27540 000048CF 50                      	push	ax
 27541 000048D0 53                      	push	bx
 27542 000048D1 56                      	push	si
 27543 000048D2 E89828                  	call	ShareEnter
 27544 000048D5 5E                      	pop	si
 27545 000048D6 5B                      	pop	bx
 27546 000048D7 58                      	pop	ax
 27547 000048D8 73E8                    	jnc	short make_save_retn
 27548                                  
 27549                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 27550                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 27551                                  ; possible: delete the newly created directory entry and return share_error.
 27552                                  
 27553 000048DA 50                      	PUSH	AX
 27554 000048DB C43E[E205]              	LES	DI,[CURBUF]
 27555                                  	;mov	byte [es:bx],0E5h
 27556 000048DF 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 27557                                  	
 27558                                  ; 07/07/2024 - Retro DOS v4.1
 27559                                  %if 0	
 27560                                  	; MSDOS 6.0
 27561                                  	;test	byte [es:di+5],40h
 27562                                  	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 27563                                  					;LB. if already dirty		  ;AN000;
 27564                                  	JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 27565                                  	; 22/11/2022
 27566                                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27567                                  	;or	byte [es:di+5],40h
 27568                                  	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 27569                                  yesdirty8:
 27570                                  %else
 27571                                  	; 23/02/2024 - Retro DOS v5.0 (PCDOS 7.1 IBMDOS.COM)
 27572 000048E3 E8D510                  	call	SET_BUF_DIRTY
 27573                                  %endif
 27574 000048E6 C42E[8A05]              	LES	BP,[THISDPB]
 27575                                  	; 15/12/2022
 27576 000048EA 268A4600                	mov	al,[ES:BP]
 27577                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27578                                  	;;mov	al,[es:bp+0]
 27579                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 27580 000048EE E8C80F                  	call	FLUSHBUF		; write out buffer.
 27581 000048F1 58                      	POP	AX
 27582 000048F2 EBB6                    	jmp	short Make_Share_ret
 27583                                  
 27584                                  ; We have found an existing file. We have also entered it into the share set.
 27585                                  ; At this point we need to call newentry to correctly address the problem of
 27586                                  ; getting rid of old data (create an existing file) or creating a new
 27587                                  ; directory entry (create a new file). Unfortunately, this operation may
 27588                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 27589                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 27590                                  ; the share set now, do the operation and then reassert the share access.
 27591                                  ;
 27592                                  ; We are allowed to do this! There is no window! After all, we are in
 27593                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 27594                                  
 27595                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27596                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 27597                                  
 27598                                  MakeEndShare:
 27599 000048F4 C43E[9E05]              	LES	DI,[THISSFT]		; grab SFT
 27600 000048F8 31C0                    	XOR	AX,AX
 27601 000048FA E8EAC9                  	call	ECritSFT
 27602 000048FD 268705                  	xchg	AX,[ES:DI]
 27603                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 27604 00004900 50                      	push	ax
 27605 00004901 57                      	push	di
 27606 00004902 06                      	push	es
 27607 00004903 9C                      	PUSHF
 27608 00004904 E86128                  	call	ShareEnd		; remove sharing
 27609 00004907 9D                      	POPF
 27610 00004908 07                      	pop	es
 27611 00004909 5F                      	pop	di
 27612 0000490A 268F05                  	pop	word [ES:DI]
 27613                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 27614 0000490D E8F2C9                  	call	LCritSFT
 27615                                  	; 22/11/2022
 27616                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 27617 00004910 5B                      	pop	bx
 27618 00004911 5E                      	pop	si
 27619 00004912 59                      	pop	cx
 27620 00004913 58                      	pop	ax
 27621 00004914 E8A0FF                  	CALL	make_save
 27622                                  
 27623                                  ; If the user failed, we do not reenter into the sharing set.
 27624                                  
 27625 00004917 72A9                    	jc	short make_save_retn	; bye if error
 27626 00004919 50                      	push	ax
 27627 0000491A 53                      	push	bx
 27628 0000491B 56                      	push	si
 27629 0000491C 9C                      	PUSHF
 27630 0000491D E84D28                  	call	ShareEnter
 27631 00004920 9D                      	POPF
 27632 00004921 5E                      	pop	si
 27633 00004922 5B                      	pop	bx
 27634 00004923 58                      	pop	ax
 27635                                  
 27636                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 27637                                  
 27638                                  makeendshare_retn:
 27639 00004924 C3                      	retn
 27640                                  
 27641                                  ;---------------------------------------------------------------------------
 27642                                  ;
 27643                                  ; Procedure Name : NEWENTRY
 27644                                  ;
 27645                                  ; Inputs:
 27646                                  ;	  [THISSFT] set
 27647                                  ;	  [THISDPB] set
 27648                                  ;	  [LASTENT] current last valid entry number in directory if no free
 27649                                  ;		  entries
 27650                                  ;	  [VOLID] set if a volume ID was found during search
 27651                                  ;	Attrib Contains attributes for new file
 27652                                  ;	  [DIRSTART] Points to first cluster of dir (0 means root)
 27653                                  ;	  CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 27654                                  ;		  NC means file existed (device)
 27655                                  ;		  C  means file did not exist
 27656                                  ;	  AH = Device ID byte
 27657                                  ;	  If FILE
 27658                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27659                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27660                                  ;	  If device
 27661                                  ;	  DS:BX points to start of "fake" directory entry
 27662                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27663                                  ;		  (has DWORD pointer to device header)
 27664                                  ; Function:
 27665                                  ;	  Make a new directory entry
 27666                                  ;	  If an old one existed it is truncated first
 27667                                  ; Outputs:
 27668                                  ;	  Carry set if error
 27669                                  ;		  Can't grow dir, atts didn't match, attempt to make 2nd
 27670                                  ;		  vol ID, user FAILed to I 24
 27671                                  ;	  else
 27672                                  ;		  outputs of DOOPEN
 27673                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 27674                                  ;
 27675                                  ;----------------------------------------------------------------------------
 27676                                  
 27677                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27678                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 27679                                  
 27680                                  NEWENTRY:
 27681 00004925 C42E[8A05]              	LES	BP,[THISDPB]
 27682 00004929 7315                    	JNC	short EXISTENT
 27683 0000492B 803E[4A03]00            	CMP	byte [FAILERR],0
 27684                                  	;STC
 27685                                  	;jnz	short makeendshare_retn	; User FAILed, node might exist
 27686                                  	; 24/09/2023
 27687 00004930 750C                    	jnz	short ERRRET3
 27688 00004932 E829FE                  	CALL	BUILDDIR	; Try to build dir
 27689 00004935 72ED                    	jc	short makeendshare_retn	; Failed
 27690 00004937 E824F4                  	call	GETENT		; Point at that free entry
 27691 0000493A 72E8                    	jc	short makeendshare_retn	; Failed
 27692 0000493C EB0E                    	JMP	SHORT FREESPOT
 27693                                  
 27694                                  ERRRET3:
 27695 0000493E F9                      	STC
 27696                                  newentry_retn:
 27697 0000493F C3                      	retn
 27698                                  
 27699                                  EXISTENT:
 27700 00004940 08E4                    	OR	AH,AH		; Check if file is I/O device
 27701 00004942 7903                    	JNS	short NOT_DEV1
 27702 00004944 E98D00                  	JMP	DOOPEN		; If so, proceed with open
 27703                                  
 27704                                  NOT_DEV1:
 27705 00004947 E82801                  	call	FREEENT	; Free cluster chain
 27706 0000494A 72F3                    	jc	short newentry_retn ; Failed
 27707                                  FREESPOT:
 27708                                  	;test	byte [ATTRIB],8
 27709 0000494C F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 27710 00004951 7407                    	JZ	short NOTVOLID
 27711 00004953 803E[7B05]00            	CMP	BYTE [VOLID],0
 27712 00004958 75E4                    	JNZ	short ERRRET3	; Can't create a second volume ID
 27713                                  NOTVOLID:
 27714 0000495A 8E06[E405]              	MOV	ES,[CURBUF+2]
 27715 0000495E 89DF                    	MOV	DI,BX
 27716                                  
 27717 00004960 BE[4B05]                	MOV	SI,NAME1
 27718                                  
 27719 00004963 B90500                  	MOV	CX,5
 27720 00004966 F3A5                    	REP	MOVSW
 27721 00004968 A4                      	MOVSB			; Move name into dir entry
 27722 00004969 A0[6B05]                	MOV	AL,[ATTRIB]
 27723 0000496C AA                      	STOSB			; Attributes
 27724                                  
 27725                                  ;; File Tagging for Create DOS 4.00
 27726 0000496D B105                    	MOV	CL,5		;FT. assume normal FBUGBUG	;AN000;
 27727                                  ;; File Tagging for Create DOS 4.00
 27728                                  
 27729 0000496F 31C0                    	XOR	AX,AX
 27730 00004971 F3AB                    	REP	STOSW		; Zero pad
 27731 00004973 E86FC1                  	call	DATE16
 27732 00004976 92                      	XCHG	AX,DX
 27733 00004977 AB                      	STOSW			; dir_time
 27734 00004978 92                      	XCHG	AX,DX
 27735 00004979 AB                      	STOSW			; dir_date
 27736 0000497A 31C0                    	XOR	AX,AX
 27737 0000497C 57                      	PUSH	DI		; Correct SI input value
 27738                                  				; (recomputed for new buffer)
 27739 0000497D AB                      	STOSW			; Zero dir_first and size
 27740 0000497E AB                      	STOSW
 27741 0000497F AB                      	STOSW
 27742                                  updnxt:
 27743 00004980 8B36[E205]              	MOV	SI,[CURBUF]
 27744                                  
 27745                                  	; 19/05/2019 - Retro DOS v4.0
 27746                                  
 27747                                  	; MSDOS 6.0
 27748 00004984 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27749                                  				;LB. if already dirty		  ;AN000;
 27750 00004989 7508                    	JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 27751 0000498B E83910                  	call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 27752                                  	
 27753                                  	;or	byte [es:si+5],40h
 27754 0000498E 26804C0540              	OR	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 27755                                  yesdirty9:
 27756 00004993 C42E[8A05]              	LES	BP,[THISDPB]
 27757                                  	; 15/12/2022
 27758 00004997 268A4600                	MOV	AL,[ES:BP]
 27759                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27760                                  	;;mov	al,[es:bp+0]
 27761                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 27762 0000499B 50                      	PUSH	AX
 27763 0000499C 53                      	PUSH	BX
 27764                                  
 27765                                  ; If we have a file, we need to increment the open ref. count so that
 27766                                  ; we have some protection against invalid media changes if an Int 24
 27767                                  ; error occurs.
 27768                                  ; Do nothing for a device.
 27769                                  
 27770 0000499D 06                      	push	es
 27771 0000499E 57                      	push	di
 27772 0000499F C43E[9E05]              	LES	DI,[THISSFT]
 27773                                  	;test	word [es:di+5],80h
 27774                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 27775 000049A3 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 27776 000049A8 751A                    	jnz	short GotADevice
 27777 000049AA 1E                      	push	ds
 27778 000049AB 53                      	push	bx
 27779 000049AC C51E[8A05]              	LDS	BX,[THISDPB]
 27780                                  	;mov	[es:di+7],bx
 27781 000049B0 26895D07                	MOV	[ES:DI+SF_ENTRY.sf_devptr],BX
 27782 000049B4 8CDB                    	MOV	BX,DS
 27783                                  	;mov	[es:di+9],bx
 27784 000049B6 26895D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],BX
 27785 000049BA 5B                      	pop	bx
 27786 000049BB 1F                      	pop	ds ; need to use DS for segment later on
 27787                                  
 27788 000049BC E8CDFA                  	call	DEV_OPEN_SFT	; increment ref. count
 27789 000049BF C606[A20A]01            	mov	byte [VIRTUAL_OPEN],1; set flag
 27790                                  
 27791                                  GotADevice:
 27792 000049C4 5F                      	pop	di
 27793 000049C5 07                      	pop	es
 27794                                  
 27795 000049C6 E8F00E                  	call	FLUSHBUF
 27796                                  
 27797 000049C9 E8EC00                  	Call	CHECK_VIRT_OPEN	; decrement ref. count	;AN000;
 27798                                  
 27799 000049CC 5B                      	POP	BX
 27800 000049CD 58                      	POP	AX
 27801 000049CE 5E                      	POP	SI		; Get SI input back
 27802 000049CF 88C4                    	MOV	AH,AL		; Get I/O driver number back
 27803 000049D1 7301                    	jnc	short DOOPEN	
 27804 000049D3 C3                      	retn			; Failed
 27805                                  	
 27806                                  ;NOTE FALL THROUGH
 27807                                  
 27808                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 27809                                  
 27810                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27811                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 27812                                  
 27813                                  ; DOOPEN
 27814                                  ;----------------------------------------------------------------------------
 27815                                  ;
 27816                                  ; Inputs:
 27817                                  ;	  [THISDPB] points to DPB if file
 27818                                  ;	  [THISSFT] points to SFT being used
 27819                                  ;	  AH = Device ID byte
 27820                                  ;	  If FILE
 27821                                  ;	  [CURBUF+2]:BX points to start of directory entry
 27822                                  ;	  [CURBUF+2]:SI points to dir_first of directory entry
 27823                                  ;	  If device
 27824                                  ;	  DS:BX points to start of "fake" directory entry
 27825                                  ;	  DS:SI points to dir_first of "fake" directory entry
 27826                                  ;		  (has DWORD pointer to device header)
 27827                                  ; Function:
 27828                                  ;	  Fill in SFT from dir entry
 27829                                  ; Outputs:
 27830                                  ;	  CARRY CLEAR
 27831                                  ;	  sf_ref_count and sf_mode fields not altered
 27832                                  ;	  sf_flags high byte = 0
 27833                                  ;	  sf_flags low byte = AH except
 27834                                  ;	  sf_flags Bit 6 set (not dirty or not EOF)
 27835                                  ;	  sf_attr sf_date sf_time sf_name set from entry
 27836                                  ;	  sf_position = 0
 27837                                  ;	  If device
 27838                                  ;	  sf_devptr = dword at dir_first (pointer to device header)
 27839                                  ;	  sf_size = 0
 27840                                  ;	  If file
 27841                                  ;	  sf_firclus sf_size set from entry
 27842                                  ;	  sf_devptr = [THISDPB]
 27843                                  ;	  sf_cluspos = 0
 27844                                  ;	  sf_lstclus = sf_firclus
 27845                                  ;	  sf_dirsec sf_dirpos set
 27846                                  ; DS,SI,BX preserved, others destroyed
 27847                                  ;
 27848                                  ;----------------------------------------------------------------------------
 27849                                  
 27850                                  	;entry	DOOPEN
 27851                                  DOOPEN:
 27852                                  ;	Generate and store attribute
 27853                                  
 27854 000049D4 88E6                    	MOV	DH,AH	  	; AH to different place
 27855 000049D6 C43E[9E05]              	LES	DI,[THISSFT]
 27856                                  	;add	di,4
 27857 000049DA 83C704                  	ADD	DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 27858                                  	; 24/09/2023
 27859 000049DD 31C0                    	xor	ax,ax
 27860                                  	;XOR	AL,AL		; Assume it's a device, devices have an
 27861                                  				;  attribute of 0 (for R/O testing etc).
 27862 000049DF 08F6                    	OR	DH,DH		; See if our assumption good.
 27863 000049E1 7807                    	JS	short DEV_SFT1	; If device DS=DOSGROUP
 27864 000049E3 8E1E[E405]              	MOV	DS,[CURBUF+2]
 27865                                  	;mov	al,[BX+0Bh]
 27866 000049E7 8A470B                  	MOV	AL,[BX+dir_entry.dir_attr]
 27867                                  				; If file, get attrib from dir entry
 27868                                  DEV_SFT1:
 27869 000049EA AA                      	STOSB			; sf_attr, ES:DI -> sf_flags
 27870                                  
 27871                                  ;	Generate and store flags word
 27872                                  
 27873                                  	; 24/09/2023
 27874                                  	;XOR	AX,AX
 27875                                  	; ah=0
 27876 000049EB 88F0                    	MOV	AL,DH
 27877                                  	;or	al,40h
 27878 000049ED 0C40                    	OR	AL,devid_file_clean
 27879 000049EF AB                      	STOSW			; sf_flags, ES:DI -> sf_devptr
 27880                                  
 27881                                  ;	Generate and store device pointer
 27882                                  
 27883 000049F0 1E                      	PUSH	DS
 27884                                  	;lds	ax,[bx+1Ah]
 27885 000049F1 C5471A                  	LDS	AX,[BX+dir_entry.dir_first] ; Assume device
 27886 000049F4 08F6                    	OR	DH,DH
 27887 000049F6 7805                    	JS	short DEV_SFT2
 27888                                  
 27889                                  ;hkn; SS override
 27890 000049F8 36C506[8A05]            	LDS	AX,[SS:THISDPB]	; Was file
 27891                                  DEV_SFT2:
 27892 000049FD AB                      	STOSW			; store offset
 27893 000049FE 8CD8                    	MOV	AX,DS
 27894 00004A00 1F                      	POP	DS
 27895 00004A01 AB                      	STOSW			; store segment
 27896                                  				; ES:DI -> sf_firclus
 27897                                  
 27898                                  ;	Generate pointer to, generate and store first cluster
 27899                                  ;	(irrelevant for devices)
 27900                                  
 27901 00004A02 56                      	PUSH	SI		; Save pointer to dir_first
 27902 00004A03 A5                      	MOVSW			; dir_first -> sf_firclus
 27903                                  				; DS:SI -> dir_size_l, ES:DI -> sf_time
 27904                                  
 27905                                  ;	Copy time/date of last modification
 27906                                  
 27907                                  	;sub	si,6
 27908 00004A04 83EE06                  	SUB	SI,dir_entry.dir_size_l - dir_entry.dir_time 
 27909                                  				; DS:SI->dir_time
 27910 00004A07 A5                      	MOVSW			; dir_time -> sf_time
 27911                                  				; DS:SI -> dir_date, ES:DI -> sf_date
 27912 00004A08 A5                      	MOVSW			; dir_date -> sf_date
 27913                                  				; DS:SI -> dir_first, ES:DI -> sf_size
 27914                                  
 27915                                  ;	Generate and store file size (0 for devices)
 27916                                  
 27917 00004A09 AD                      	LODSW			; skip dir_first, DS:SI -> dir_size_l
 27918 00004A0A AD                      	LODSW			; dir_size_l in AX, DS:SI -> dir_size_h
 27919                                  	;MOV	CX,AX		; dir_size_l in CX
 27920                                  	; 23/02/2024
 27921 00004A0B 91                      	xchg	ax,cx
 27922 00004A0C AD                      	LODSW			; dir_size_h (size AX:CX), DS:SI -> ????
 27923 00004A0D 08F6                    	OR	DH,DH
 27924 00004A0F 7904                    	JNS	short FILE_SFT1
 27925 00004A11 31C0                    	XOR	AX,AX
 27926 00004A13 89C1                    	MOV	CX,AX		; Devices are open ended
 27927                                  FILE_SFT1:
 27928 00004A15 91                      	XCHG	AX,CX
 27929 00004A16 AB                      	STOSW			; Low word of sf_size
 27930 00004A17 91                      	XCHG	AX,CX
 27931 00004A18 AB                      	STOSW			; High word of sf_size
 27932                                  				; ES:DI -> sf_position
 27933                                  ; Initialize position to 0
 27934                                  
 27935 00004A19 31C0                    	XOR	AX,AX
 27936 00004A1B AB                      	STOSW
 27937 00004A1C AB                      	STOSW			; sf_position
 27938                                  				; ES:DI -> sf_cluspos
 27939                                  
 27940                                  ; Generate cluster optimizations for files
 27941                                  
 27942 00004A1D 08F6                    	OR	DH,DH
 27943 00004A1F 7843                    	JS	short DEV_SFT3
 27944 00004A21 AB                      	STOSW			; sf_cluspos ; 19h
 27945                                  	;mov	ax,[bx+1Ah]
 27946 00004A22 8B471A                  	MOV	AX,[BX+dir_entry.dir_first]
 27947                                  	; 19/05/2019
 27948                                  	; MSDOS 3.3
 27949                                  	;STOSW			; sf_lstclus ; 1Bh
 27950                                  	; MSDOS 6.0
 27951 00004A25 57                      	PUSH	DI		;AN004; save dirsec offset
 27952                                  	;sub	di,1Bh
 27953 00004A26 83EF1B                  	SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 27954                                  	;mov	[es:di+35h],ax
 27955 00004A29 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 27956 00004A2D 5F                      	POP	DI		;AN004; restore dirsec offset
 27957                                  
 27958                                  ; DOS 3.3  FastOpen  6/13/86
 27959                                  
 27960 00004A2E 1E                      	PUSH	DS
 27961                                  
 27962                                  ;hkn; SS is DOSDATA
 27963 00004A2F 16                      	push	ss
 27964 00004A30 1F                      	pop	ds
 27965                                  	;test	byte [FastOpenFlg],4
 27966 00004A31 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 27967 00004A36 7411                    	JZ	short Not_FastOpen
 27968                                  
 27969                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 27970 00004A38 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 27971                                  
 27972                                  	;mov	ax,[si+1]
 27973 00004A3B 8B4401                  	MOV	AX,[SI+FEI.dirsec]
 27974 00004A3E AB                      	STOSW		  	; sf_dirsec
 27975                                  	; MSDOS 6.0
 27976                                  	;mov	ax,[si+3]
 27977 00004A3F 8B4403                  	MOV	AX,[SI+FEI.dirsec+2]
 27978                                  		;;; changed for >32mb
 27979 00004A42 AB                      	STOSW		  	; sf_dirsec
 27980                                  	; 19/08//2018
 27981 00004A43 8A04                    	mov	al,[SI]
 27982                                  	;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 27983 00004A45 AA                      	STOSB		  	; sf_dirpos
 27984 00004A46 1F                      	POP	DS
 27985                                  	;JMP	short Next_Name
 27986                                  	; 24/09/2023
 27987 00004A47 EB1E                    	jmp	short FILE_SFT2	; cf=0 (after 'test' instruction)
 27988                                  
 27989                                  ; DOS 3.3  FastOpen  6/13/86
 27990                                  
 27991                                  Not_FastOpen:
 27992                                  	;POP	DS		; normal path
 27993                                  
 27994                                  ;hkn; SS override
 27995                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 27996                                  	; 16/12/2022
 27997                                  	; 28/07/2019
 27998 00004A49 8B36[E205]              	mov	si,[CURBUF]
 27999 00004A4D 1F                      	pop	ds
 28000                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28001                                  	;pop	ds
 28002                                  	;mov	si,[ss:CURBUF]
 28003                                  	
 28004                                  	;mov	ax,[si+6]
 28005 00004A4E 8B4406                  	MOV	AX,[SI+BUFFINFO.buf_sector]	;F.C. >32mb ;AN000;
 28006 00004A51 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 28007                                  	; 19/05/2019	
 28008                                  	; MSDOS 6.0
 28009                                  	;mov	ax,[si+8]
 28010 00004A52 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 28011 00004A55 AB                      	STOSW		  	; sf_dirsec	;F.C. >32mb ;AN000;
 28012                                  	
 28013 00004A56 89D8                    	MOV	AX,BX
 28014                                  	;;add	si,16	; MSDOS 3.3
 28015                                  	;add	si,20	; MSDOS 6.0
 28016 00004A58 83C614                  	ADD	SI,BUFINSIZ	; DS:SI-> start of data in buffer
 28017 00004A5B 29F0                    	SUB	AX,SI		; AX = BX relative to start of sector
 28018                                  	;mov	cl,32
 28019 00004A5D B120                    	MOV	CL,dir_entry.size
 28020 00004A5F F6F1                    	DIV	CL
 28021 00004A61 AA                      	STOSB		  	; sf_dirpos
 28022                                  Next_Name:
 28023 00004A62 EB03                    	JMP	SHORT FILE_SFT2
 28024                                  
 28025                                  	; 24/09/2023
 28026                                  	; cf=0 (after 'or' instruction)
 28027                                  DEV_SFT3:
 28028                                  	;add	di,7
 28029 00004A64 83C707                  	ADD	DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 28030                                  FILE_SFT2:
 28031                                  
 28032                                  ; Copy in the object's name
 28033                                  
 28034 00004A67 89DE                    	MOV	SI,BX		; DS:SI points to dir_name
 28035 00004A69 B90B00                  	MOV	CX,11
 28036 00004A6C F3A4                    	REP	MOVSB		; sf_name
 28037 00004A6E 5E                      	POP	SI		; recover DS:SI -> dir_first
 28038                                  
 28039                                  ;hkn; SS is DOSDATA
 28040 00004A6F 16                      	push	ss
 28041 00004A70 1F                      	pop	ds
 28042                                  	; 24/09/2023
 28043                                  	; cf=0
 28044                                  	;CLC
 28045 00004A71 C3                      	retn
 28046                                  
 28047                                  ;---------------------------------------------------------------------------
 28048                                  ;
 28049                                  ; Procedure Name : FREEENT
 28050                                  ;
 28051                                  ; Inputs:
 28052                                  ;	  ES:BP -> DPB
 28053                                  ;	  [CURBUF] Set
 28054                                  ;	  [CURBUF+2]:BX points to directory entry
 28055                                  ;	  [CURBUF+2]:SI points to above dir_first
 28056                                  ; Function:
 28057                                  ;	  Free the cluster chain for the entry if present
 28058                                  ; Outputs:
 28059                                  ;	  Carry set if error (currently user FAILed to I 24)
 28060                                  ;	  (NOTE dir_firclus and dir_size_l/h are wrong)
 28061                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 28062                                  ;---------------------------------------------------------------------------
 28063                                  
 28064                                  	; 24/02/2024 - Retro DOS v4.1
 28065                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28066                                  FREEENT:
 28067 00004A72 1E                      	PUSH	DS
 28068 00004A73 C53E[E205]              	LDS	DI,[CURBUF]
 28069 00004A77 8B0C                    	MOV	CX,[SI]		; Get pointer to clusters
 28070                                  	; 19/05/2019 - Retro DOS v4.0
 28071                                  	; MSDOS 6.0
 28072 00004A79 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb  ;AN000;
 28073                                  ;hkn; SS override
 28074 00004A7C 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	      ;F.C. >32mb  ;AN000;
 28075 00004A81 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]
 28076 00004A84 1F                      	POP	DS
 28077 00004A85 83F902                  	CMP	CX,2
 28078 00004A88 722C                    	JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 28079                                  	;cmp	cx,[es:bp+0Dh]
 28080 00004A8A 263B4E0D                	CMP	CX,[ES:BP+DPB.MAX_CLUSTER]
 28081                                  	;JA	short RET1	; Treat like zero length file (firclus mucked)
 28082 00004A8E 7715                    	ja	short freeent_retn ; 24/02/2024
 28083 00004A90 29FB                    	SUB	BX,DI
 28084 00004A92 53                      	PUSH	BX		; Save offset
 28085 00004A93 FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28086 00004A97 52                      	PUSH	DX		; Save sector number
 28087 00004A98 89CB                    	MOV	BX,CX
 28088 00004A9A E8A402                  	call	RELEASE		; Free any data allocated
 28089 00004A9D 5A                      	POP	DX
 28090 00004A9E 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 28091 00004AA2 7302                    	JNC	short GET_BUF_BACK
 28092 00004AA4 5B                      	POP	BX
 28093                                  freeent_retn:
 28094 00004AA5 C3                      	retn			; Screw up
 28095                                  
 28096                                  GET_BUF_BACK:
 28097                                  	; 22/09/2023
 28098                                  	;;mov	byte [ALLOWED],18h
 28099                                  	;MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL ; *
 28100                                  	;XOR	AL,AL ; *
 28101                                  	;call	GETBUFFR	; Get sector back
 28102 00004AA6 E80C0D                  	call	GETBUFFER ; *	; pre read
 28103                                  
 28104 00004AA9 5B                      	POP	BX		; Get offset back
 28105 00004AAA 72F9                    	jc	short freeent_retn
 28106 00004AAC E815EB                  	call	SET_BUF_AS_DIR
 28107 00004AAF 031E[E205]              	ADD	BX,[CURBUF]	; Correct it for new buffer
 28108                                  
 28109                                  	;MOV	SI,BX
 28110                                  	;;add	si,1Ah
 28111                                  	;ADD	SI,dir_entry.dir_first	; Get corrected SI
 28112                                  	; 24/02/2024 - Retro DOS v4.1
 28113                                  	;lea	si,[bx+1Ah]
 28114 00004AB3 8D771A                  	lea	si,[bx+dir_entry.dir_first]
 28115                                  RET1:
 28116 00004AB6 F8                      	CLC
 28117 00004AB7 C3                      	retn
 28118                                  
 28119                                  ;---------------------------------------------------------------------------
 28120                                  ;
 28121                                  ; Procedure Name : CHECK_VIRT_OPEN
 28122                                  ;
 28123                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 28124                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 28125                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 28126                                  ; flag [VIRTUAL_OPEN].
 28127                                  ; No registers affected (including flags).
 28128                                  ; On input, [THISSFT] points to current SFT.
 28129                                  ;
 28130                                  ;---------------------------------------------------------------------------
 28131                                  
 28132                                  CHECK_VIRT_OPEN:
 28133 00004AB8 50                      	PUSH	AX
 28134 00004AB9 9F                      	lahf			; preserve flags
 28135 00004ABA 803E[A20A]00            	CMP	byte [VIRTUAL_OPEN],0
 28136 00004ABF 7410                    	JZ	short ALL_CLOSED
 28137 00004AC1 C606[A20A]00            	mov	byte [VIRTUAL_OPEN],0 ; reset flag
 28138 00004AC6 06                      	push	es
 28139 00004AC7 57                      	push	di
 28140 00004AC8 C43E[9E05]              	LES	DI,[THISSFT]
 28141 00004ACC E8C5F9                  	call	DEV_CLOSE_SFT
 28142 00004ACF 5F                      	pop	di
 28143 00004AD0 07                      	pop	es
 28144                                  
 28145                                  ALL_CLOSED:
 28146 00004AD1 9E                      	sahf			; restore flags
 28147 00004AD2 58                      	POP	AX
 28148 00004AD3 C3                      	retn
 28149                                  
 28150                                  ;============================================================================
 28151                                  ; ROM.ASM, MSDOS 6.0, 1991
 28152                                  ;============================================================================
 28153                                  ; 29/07/2018 - Retro DOS v3.0
 28154                                  ; 20/05/2019 - Retro DOS v4.0
 28155                                  
 28156                                  ;	TITLE	ROM - Miscellaneous routines
 28157                                  ;	NAME	ROM
 28158                                  
 28159                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 28160                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 28161                                  ;
 28162                                  ;	SKPCLP
 28163                                  ;	FNDCLUS
 28164                                  ;	BUFSEC
 28165                                  ;	BUFRD
 28166                                  ;	BUFWRT
 28167                                  ;	NEXTSEC
 28168                                  ;	OPTIMIZE
 28169                                  ;	FIGREC
 28170                                  ;	ALLOCATE
 28171                                  ;	RESTFATBYT
 28172                                  ;	RELEASE
 28173                                  ;	RELBLKS
 28174                                  ;	GETEOF
 28175                                  ;
 28176                                  ;	Modification history:
 28177                                  ;
 28178                                  ;		Created: ARR 30 March 1983
 28179                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 28180                                  
 28181                                  ;Break   <FNDCLUS -- Skip over allocation units>
 28182                                  ;--------------------------------------------------------------------------
 28183                                  ;
 28184                                  ; Procedure Name : FNDCLUS
 28185                                  ;
 28186                                  ; Inputs:
 28187                                  ;       CX = No. of clusters to skip
 28188                                  ;       ES:BP = Base of drive parameters
 28189                                  ;       [THISSFT] point to SFT
 28190                                  ; Outputs:
 28191                                  ;       BX = Last cluster skipped to
 28192                                  ;       CX = No. of clusters remaining (0 unless EOF)
 28193                                  ;       DX = Position of last cluster
 28194                                  ;       Carry set if error (currently user FAILed to I 24)
 28195                                  ; DI destroyed. No other registers affected.
 28196                                  ;--------------------------------------------------------------------------
 28197                                  
 28198                                  	; 10/02/2024 - Retro DOS v4.1
 28199                                  FNDCLUS_X:
 28200 00004AD4 8B0E[BC05]              	mov	cx,[CLUSNUM]
 28201                                  
 28202                                  ; 20/05/2019 - Retro DOS v4.0
 28203                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 28204                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28205                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 28206                                  
 28207                                  FNDCLUS:
 28208 00004AD8 06                      	PUSH	ES
 28209 00004AD9 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 28210                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 28211                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 28212 00004ADD 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 28213                                  	;mov	dx,[es:di+19h]
 28214 00004AE1 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 28215 00004AE5 09DB                    	OR	BX,BX
 28216 00004AE7 7424                    	JZ	short NOCLUS
 28217                                  
 28218 00004AE9 29D1                            SUB     CX,DX
 28219 00004AEB 7308                            JNB	short FINDIT
 28220                                  
 28221 00004AED 01D1                            ADD     CX,DX
 28222 00004AEF 31D2                            XOR     DX,DX
 28223                                  	;mov	bx,[es:di+0Bh]
 28224 00004AF1 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 28225                                  FINDIT:
 28226 00004AF5 07                              POP	ES
 28227 00004AF6 E313                    	JCXZ	RET9
 28228                                  
 28229                                  	;entry	SKPCLP
 28230                                  SKPCLP:
 28231 00004AF8 E8B608                  	call	UNPACK
 28232 00004AFB 7214                            jc	short fndclus_retn	; retc
 28233                                  
 28234                                  	; 09/09/2018
 28235                                  
 28236                                  	; MSDOS 3.3
 28237                                  	;push	bx
 28238                                  	;mov	bx,di
 28239                                  	;call	IsEOF
 28240                                  	;pop	bx	
 28241                                  	;jae	short RET9
 28242                                  
 28243                                  	; 20/05/2019 - Retro DOS v4.0
 28244                                  
 28245                                  	; MSDOS 6.0
 28246 00004AFD 87DF                    	xchg	bx,di
 28247 00004AFF E89808                  	call	IsEOF
 28248 00004B02 87DF                    	xchg	bx,di
 28249 00004B04 7305                    	jae	short RET9
 28250                                  
 28251 00004B06 87DF                            XCHG    BX,DI
 28252 00004B08 42                              INC     DX
 28253                                  
 28254 00004B09 E2ED                    	LOOP	SKPCLP			; RMFS
 28255                                  RET9:	
 28256 00004B0B F8                      	CLC
 28257 00004B0C C3                              retn
 28258                                  NOCLUS:
 28259 00004B0D 07                              POP	ES
 28260 00004B0E 41                              INC	CX
 28261 00004B0F 4A                              DEC	DX
 28262 00004B10 F8                              CLC
 28263                                  
 28264                                  fndclus_retn:
 28265 00004B11 C3                              retn
 28266                                  
 28267                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 28268                                  ;--------------------------------------------------------------------------
 28269                                  ;
 28270                                  ; Procedure Name : BUFSEC
 28271                                  ;
 28272                                  ; Inputs:
 28273                                  ;       AH = priority of buffer
 28274                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 28275                                  ;       ES:BP = Base of drive parameters
 28276                                  ;       [CLUSNUM] = Physical cluster number
 28277                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 28278                                  ;       [BYTCNT1] = Size of transfer
 28279                                  ; Function:
 28280                                  ;       Insure specified sector is in buffer, flushing buffer before
 28281                                  ;       read if necessary.
 28282                                  ; Outputs:
 28283                                  ;       ES:DI = Pointer to buffer
 28284                                  ;       SI = Pointer to transfer address
 28285                                  ;       CX = Number of bytes
 28286                                  ;       [NEXTADD] updated
 28287                                  ;       [TRANS] set to indicate a transfer will occur
 28288                                  ;       Carry set if error (user FAILed to I 24)
 28289                                  ;--------------------------------------------------------------------------
 28290                                  
 28291                                  BUFSEC:
 28292 00004B12 8B16[BC05]              	MOV	DX,[CLUSNUM]
 28293 00004B16 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 28294                                  	;mov	byte [ALLOWED],38h
 28295 00004B1A C606[4B03]38            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 28296 00004B1F E84F01                  	CALL	FIGREC
 28297 00004B22 E8970C                  	call	GETBUFFR
 28298 00004B25 72EA                    	jc	short fndclus_retn
 28299                                  
 28300 00004B27 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 28301 00004B2C 8B36[B805]              	MOV	SI,[NEXTADD]
 28302 00004B30 89F7                    	MOV	DI,SI
 28303 00004B32 8B0E[D205]              	MOV	CX,[BYTCNT1]
 28304 00004B36 01CF                    	ADD	DI,CX
 28305 00004B38 893E[B805]              	MOV	[NEXTADD],DI
 28306 00004B3C C43E[E205]              	LES	DI,[CURBUF]
 28307                                  	;or	byte [es:di+5],8
 28308 00004B40 26804D0508              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 28309                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 28310                                  	;lea	di,[di+20] ; MSDOS 6.0
 28311 00004B45 8D7D14                  	LEA	DI,[DI+BUFINSIZ]        ; Point to buffer
 28312 00004B48 033E[CC05]              	ADD	DI,[BYTSECPOS]
 28313 00004B4C F8                      	CLC
 28314 00004B4D C3                      	retn
 28315                                  
 28316                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 28317                                  
 28318                                  ;---------------------------------------------------------------------------
 28319                                  ;
 28320                                  ; Procedure Name : BUFRD
 28321                                  ;
 28322                                  ; Do a partial sector read via one of the system buffers
 28323                                  ; ES:BP Points to DPB
 28324                                  ; Carry set if error (currently user FAILed to I 24)
 28325                                  ;
 28326                                  ; DS - set to DOSDATA
 28327                                  ;
 28328                                  ;----------------------------------------------------------------------------
 28329                                  
 28330                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28331                                  	; 20/05/2019 - Retro DOS v4.0
 28332                                  BUFRD:
 28333 00004B4E 06                      	PUSH	ES
 28334 00004B4F 31C0                    	xor	ax,ax			; pre-read sector
 28335 00004B51 E8BEFF                  	CALL	BUFSEC
 28336 00004B54 7303                    	JNC	short BUF_OK ; ds=ss
 28337                                  
 28338                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 28339 00004B56 07                      	POP	ES
 28340 00004B57 EB2D                    	JMP	SHORT RBUFPLACED ; ds=ss ; 25/02/2024 - Retro DOS v4.1
 28341                                  
 28342                                  BUF_OK:
 28343 00004B59 8CC3                    	MOV	BX,ES
 28344 00004B5B 8E06[2E03]              	MOV	ES,[DMAADD+2]
 28345 00004B5F 8EDB                    	MOV	DS,BX
 28346 00004B61 87FE                    	XCHG	DI,SI
 28347 00004B63 D1E9                    	SHR	CX,1
 28348                                  ;M039
 28349                                  	; MSDOS 3.3
 28350                                  	;JNC	short EVENRD
 28351                                  	;MOVSB
 28352                                  ;EVENRD:
 28353                                  	;REP	MOVSW
 28354                                  
 28355                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 28356                                  ;       DS:SI-> Source within Buffer.
 28357                                  ;       ES:DI-> Destination within Transfer memory block.
 28358                                  
 28359                                  	; MSDOS 6.0
 28360 00004B65 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 28361                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28362                                  	;rep	movsb			;Copy last byte.
 28363                                  	; 16/12/2022
 28364 00004B67 7301                    	jnc	short EVENRD ; **** 20/05/2019
 28365 00004B69 A4                      	movsb ; ****
 28366                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28367                                  	;adc	cx,0
 28368                                  	;rep	movsb
 28369                                  ;M039
 28370                                  EVENRD: ; ****
 28371 00004B6A 07                      	POP	ES
 28372                                  ;hkn; SS override
 28373 00004B6B 36C53E[E205]            	LDS	DI,[SS:CURBUF]
 28374                                  	;;lea	bx,[di+16]
 28375                                  	;lea	bx,[di+20] ; MSDOS 6.0
 28376 00004B70 8D5D14                  	LEA	BX,[DI+BUFINSIZ]
 28377 00004B73 29DE                    	SUB	SI,BX			; Position in buffer
 28378 00004B75 E8E40B                  	call	PLACEBUF
 28379                                  	;cmp	si,[es:bp+2]
 28380 00004B78 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 28381 00004B7C 7205                    	JB	short RBUFPLACEDC ; ds<>ss ; No, leave buf where it is
 28382                                  ;M039
 28383                                  	; MSDOS 3.3
 28384                                  	;call	PLACEHEAD 		; Make it prime candidate for chucking
 28385                                  					;  even though it is MRU.
 28386                                  	; MSDOS 6.0
 28387 00004B7E 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 28388                                  ;M039					; chucking even though it is MRU.
 28389                                  
 28390                                  RBUFPLACEDC:
 28391 00004B83 F8                      	CLC
 28392                                  ;RBUFPLACED:
 28393 00004B84 16                      	push	ss
 28394 00004B85 1F                      	pop	ds
 28395                                  RBUFPLACED:	; 25/02/2024 (ds=ss)
 28396 00004B86 C3                      	retn
 28397                                  
 28398                                  ;----------------------------------------------------------------------------
 28399                                  ;
 28400                                  ; Procedure : BUFWRT
 28401                                  ;
 28402                                  ; Do a partial sector write via one of the system buffers
 28403                                  ; ES:BP Points to DPB
 28404                                  ; Carry set if error (currently user FAILed to I 24)
 28405                                  ;
 28406                                  ; DS - set to DOSDATA
 28407                                  ;
 28408                                  ;----------------------------------------------------------------------------
 28409                                  
 28410                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28411                                  	; 20/05/2019 - Retro DOS v4.0
 28412                                  BUFWRT:
 28413                                  	;MOV	AX,[SECPOS]
 28414                                  	; MSDOS 6.0
 28415                                  	;ADD	AX,1			; Set for next sector
 28416                                  	;MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 28417                                  	;ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 28418                                  	; 24/09/2023
 28419 00004B87 FF06[C405]              	inc	word [SECPOS]
 28420 00004B8B 7504                    	jnz	short bufw_secpos
 28421 00004B8D FF06[C605]              	inc	word [SECPOS+2]
 28422                                  bufw_secpos:
 28423 00004B91 A1[C605]                	MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 28424 00004B94 3B06[CA05]              	CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 28425 00004B98 B001                    	MOV	AL,1			;F.C. >32mb	;AN000;
 28426 00004B9A 770F                    	JA	short NOREAD		;F.C. >32mb	;AN000;
 28427 00004B9C 720B                    	JB	short _doread		;F.C. >32mb	;AN000;
 28428 00004B9E A1[C405]                	MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 28429                                  
 28430                                  	; MSDOS 3.3
 28431                                  	;INC	AX
 28432                                  	;MOV	[SECPOS],AX ; 09/09/2018
 28433                                  
 28434                                  	; 20/05/2019
 28435                                  	; MSDOS 3.3 & MSDOS 6.0
 28436 00004BA1 3B06[C805]              	CMP	AX,[VALSEC]		; Has sector been written before?
 28437 00004BA5 B001                    	MOV	AL,1
 28438 00004BA7 7702                    	JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 28439                                  _doread:
 28440 00004BA9 30C0                    	XOR	AL,AL
 28441                                  NOREAD:
 28442 00004BAB 06                      	PUSH	ES
 28443 00004BAC E863FF                  	CALL	BUFSEC
 28444 00004BAF 72A5                    	JC	short BUF_IO_FAIL
 28445 00004BB1 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 28446 00004BB5 D1E9                    	SHR	CX,1
 28447                                  ;M039
 28448                                  	; MSDOS 3.3
 28449                                  	;JNC	short EVENWRT ; 09/09/2018
 28450                                  	;MOVSB
 28451                                  ;EVENWRT:
 28452                                  	;REP	MOVSW
 28453                                  
 28454                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 28455                                  ;	DS:SI-> Source within Transfer memory block.
 28456                                  ;	ES:DI-> Destination within Buffer.
 28457                                  
 28458                                  	; MSDOS 6.0
 28459 00004BB7 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 28460                                  	;adc	cx,0			;CX=1 if odd # of bytes, else CX=0.
 28461                                  	;rep	movsb		  	;Copy last byte.
 28462                                  	; 16/12/2022
 28463 00004BB9 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 28464 00004BBB A4                      	movsb ; ****
 28465                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28466                                  	;adc	cx,0
 28467                                  	;rep	movsb
 28468                                  ;M039
 28469                                  EVENWRT: ; ****
 28470 00004BBC 07                      	POP	ES
 28471                                  
 28472                                  ;hkn; SS override
 28473 00004BBD 36C51E[E205]            	LDS	BX,[SS:CURBUF]
 28474                                  
 28475                                  	; MSDOS 6.0
 28476 00004BC2 F6470540                	TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28477                                  					;LB. if already dirty		 ;AN000;
 28478 00004BC6 7507                    	JNZ	short yesdirty10	;LB. don't increment dirty count ;AN000;
 28479 00004BC8 E8FC0D                  	call	INC_DIRTY_COUNT		;LB.				 ;AN000;
 28480                                  	
 28481                                  	;or	byte [bx+5],40h
 28482 00004BCB 804F0540                	OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 28483                                  yesdirty10:
 28484                                  	;;lea	si,[bx+16]
 28485                                  	;lea	si,[bx+20] ; MSDOS 6.0
 28486 00004BCF 8D7714                  	LEA	SI,[BX+BUFINSIZ]
 28487 00004BD2 29F7                    	SUB	DI,SI		  	; Position in buffer
 28488                                  ;M039
 28489                                  	; MSDOS 3.3
 28490                                  	;MOV	SI,DI
 28491                                  	;MOV	DI,BX
 28492                                  	;call	PLACEBUF
 28493                                  	;;cmp	si,[es:bp+2]
 28494                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28495                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 28496                                  	;call	PLACEHEAD		; Make it prime candidate for chucking
 28497                                  					;  even though it is MRU.
 28498                                  	; 10/02/2024
 28499 00004BD4 16                      	push	ss
 28500 00004BD5 1F                      	pop	ds
 28501                                  
 28502                                  	; MSDOS 6.0
 28503                                  	;cmp	di,[es:bp+2]
 28504 00004BD6 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 28505 00004BDA 7204                    	JB	short WBUFPLACED	; No, leave buf where it is
 28506                                  
 28507                                  	; 10/02/2024
 28508                                  	;MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 28509                                  					; chucking even though it is MRU.
 28510 00004BDC 891E[6D00]              	mov	[BufferQueue],bx
 28511                                  ;M039
 28512                                  
 28513                                  WBUFPLACED:
 28514 00004BE0 F8                      	CLC
 28515                                  	; 10/02/2024
 28516                                  	;push	ss
 28517                                  	;pop	ds
 28518 00004BE1 C3                      	retn
 28519                                  
 28520                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 28521                                  ;---------------------------------------------------------------------------
 28522                                  ;
 28523                                  ; Procedure Name : NEXTSEC
 28524                                  ;
 28525                                  ; Compute the next sector to read or write
 28526                                  ; ES:BP Points to DPB
 28527                                  ;
 28528                                  ;---------------------------------------------------------------------------
 28529                                  
 28530                                  NEXTSEC:
 28531 00004BE2 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 28532                                  	;JZ	short CLRET
 28533                                  	; 29/02/2024
 28534 00004BE7 7427                    	jz	short CLRET2
 28535                                  
 28536 00004BE9 A0[7305]                	MOV	AL,[SECCLUSPOS]
 28537 00004BEC FEC0                    	INC	AL
 28538                                  	;cmp	al,[es:bp+4]
 28539 00004BEE 263A4604                	CMP	AL,[ES:BP+DPB.CLUSTER_MASK]
 28540 00004BF2 7618                    	JBE	short SAVPOS
 28541                                  
 28542 00004BF4 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 28543 00004BF8 E89F07                  	call	IsEOF
 28544 00004BFB 7314                    	JAE	short NONEXT
 28545                                  
 28546 00004BFD E8B107                  	call	UNPACK
 28547                                  	;JC	short NONEXT
 28548                                  	; 26/02/2024
 28549 00004C00 7210                    	jc	short NONEXT2
 28550                                  clusgot:
 28551 00004C02 893E[BC05]              	MOV	[CLUSNUM],DI
 28552 00004C06 FF06[BA05]              	INC	word [LASTPOS]
 28553 00004C0A B000                    	MOV	AL,0
 28554                                  SAVPOS:
 28555 00004C0C A2[7305]                	MOV	[SECCLUSPOS],AL
 28556                                  CLRET:
 28557 00004C0F F8                              CLC
 28558                                  CLRET2:		; 29/02/2024
 28559 00004C10 C3                      	retn
 28560                                  NONEXT:
 28561 00004C11 F9                      	STC
 28562                                  NONEXT2:	; 26/02/2024
 28563 00004C12 C3                      	retn
 28564                                  
 28565                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 28566                                  ;----------------------------------------------------------------------------
 28567                                  ;
 28568                                  ; Procedure Name : OPTIMIZE
 28569                                  ;
 28570                                  ; Inputs:
 28571                                  ;	  BX = Physical cluster
 28572                                  ;	  CX = No. of records
 28573                                  ;	  DL = sector within cluster
 28574                                  ;	  ES:BP = Base of drive parameters
 28575                                  ;	  [NEXTADD] = transfer address
 28576                                  ; Outputs:
 28577                                  ;	  AX = No. of records remaining
 28578                                  ;	  BX = Transfer address
 28579                                  ;	  CX = No. or records to be transferred
 28580                                  ;	  DX = Physical sector address (LOW)
 28581                                  ;	  [HIGH_SECTOR] = Physical sector address (HIGH)
 28582                                  ;	  DI = Next cluster
 28583                                  ;	  [CLUSNUM] = Last cluster accessed
 28584                                  ;	  [NEXTADD] updated
 28585                                  ;	  Carry set if error (currently user FAILed to I 24)
 28586                                  ; ES:BP unchanged. Note that segment of transfer not set.
 28587                                  ;
 28588                                  ;---------------------------------------------------------------------------
 28589                                  
 28590                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28591                                  OPTIMIZE:
 28592 00004C13 52                      	PUSH	DX
 28593 00004C14 53                      	PUSH	BX
 28594                                  	;mov	al,[es:bp+4]
 28595 00004C15 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 28596 00004C19 FEC0                    	INC	AL		; Number of sectors per cluster
 28597 00004C1B 88C4                    	MOV	AH,AL
 28598 00004C1D 28D0                    	SUB	AL,DL		; AL = Num of sectors left in first cluster
 28599 00004C1F 89CA                    	MOV	DX,CX
 28600                                  	;MOV	CX,0
 28601                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28602                                  	; 16/12/2022
 28603 00004C21 31C9                    	xor	cx,cx	; sub cx,cx
 28604                                  OPTCLUS:
 28605                                  ; AL has number of sectors available in current cluster
 28606                                  ; AH has number of sectors available in next cluster
 28607                                  ; BX has current physical cluster
 28608                                  ; CX has number of sequential sectors found so far
 28609                                  ; DX has number of sectors left to transfer
 28610                                  ; ES:BP Points to DPB
 28611                                  ; ES:SI has FAT pointer
 28612                                  
 28613                                  do_norm3:
 28614 00004C23 E88B07                  	call	UNPACK
 28615 00004C26 7236                    	JC	short OP_ERR
 28616                                  clusgot2:
 28617 00004C28 00C1                    	ADD	CL,AL
 28618 00004C2A 80D500                  	ADC	CH,0
 28619 00004C2D 39D1                    	CMP	CX,DX
 28620 00004C2F 7332                    	JAE	short BLKDON
 28621 00004C31 88E0                    	MOV	AL,AH
 28622 00004C33 43                      	INC	BX
 28623 00004C34 39DF                    	CMP	DI,BX
 28624 00004C36 74EB                    	JZ	short OPTCLUS
 28625 00004C38 4B                      	DEC	BX
 28626                                  FINCLUS:
 28627 00004C39 891E[BC05]              	MOV	[CLUSNUM],BX	; Last cluster accessed
 28628 00004C3D 29CA                    	SUB	DX,CX		; Number of sectors still needed
 28629 00004C3F 52                      	PUSH	DX
 28630 00004C40 89C8                    	MOV	AX,CX
 28631                                  	;mul	word[ES:BP+2]
 28632 00004C42 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 28633                                  				; Number of sectors times sector size
 28634 00004C46 8B36[B805]              	MOV	SI,[NEXTADD]
 28635 00004C4A 01F0                    	ADD	AX,SI		; Adjust by size of transfer
 28636 00004C4C A3[B805]                	MOV	[NEXTADD],AX
 28637 00004C4F 58                      	POP	AX		; Number of sectors still needed
 28638 00004C50 5A                      	POP	DX		; Starting cluster
 28639 00004C51 29D3                    	SUB	BX,DX		; Number of new clusters accessed
 28640 00004C53 011E[BA05]              	ADD	[LASTPOS],BX
 28641 00004C57 5B                      	POP	BX		; BL = sector position within cluster
 28642 00004C58 E81600                  	call	FIGREC
 28643 00004C5B 89F3                    	MOV	BX,SI
 28644                                  	; 24/09/2023
 28645                                  	; cf=0 (at the return of FIGREC)
 28646                                  	;CLC
 28647 00004C5D C3                      	retn
 28648                                  OP_ERR:
 28649 00004C5E 83C404                  	ADD	SP,4
 28650 00004C61 F9                      	STC
 28651 00004C62 C3                      	retn
 28652                                  BLKDON:
 28653 00004C63 29D1                    	SUB	CX,DX	  	; Number of sectors in cluster we don't want
 28654 00004C65 28CC                    	SUB	AH,CL	  	; Number of sectors in cluster we accepted
 28655 00004C67 FECC                    	DEC	AH		; Adjust to mean position within cluster
 28656 00004C69 8826[7305]              	MOV	[SECCLUSPOS],AH
 28657 00004C6D 89D1                    	MOV	CX,DX		; Anyway, make the total equal to the request
 28658 00004C6F EBC8                    	JMP	SHORT FINCLUS
 28659                                  
 28660                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 28661                                  ;---------------------------------------------------------------------------
 28662                                  ;
 28663                                  ; Procedure Name : FIGREC
 28664                                  ;
 28665                                  ; Inputs:
 28666                                  ;	  DX = Physical cluster number
 28667                                  ;	  BL = Sector position within cluster
 28668                                  ;	  ES:BP = Base of drive parameters
 28669                                  ; Outputs:
 28670                                  ;	  DX = physical sector number (LOW)
 28671                                  ;	  [HIGH_SECTOR] Physical sector address (HIGH)
 28672                                  ; No other registers affected.
 28673                                  ;
 28674                                  ;---------------------------------------------------------------------------
 28675                                  
 28676                                  	; 10/06/2019
 28677                                  	; 20/05/2019 - Retro DOS v4.0
 28678                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 28679                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28680                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)
 28681                                  
 28682                                  	; 27/02/2024 - Retro DOS v4.1
 28683                                  	; (ds=ss)
 28684                                  FIGREC:
 28685 00004C71 51                      	PUSH	CX
 28686                                  	;
 28687                                  	; 27/02/2024
 28688 00004C72 31C9                    	xor	cx,cx
 28689 00004C74 890E[0706]              	mov	[HIGH_SECTOR],cx ;0
 28690                                  	;
 28691                                  	;mov	cl,[es:bp+5]
 28692 00004C78 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 28693 00004C7C 4A                      	DEC	DX
 28694 00004C7D 4A                      	DEC	DX
 28695                                  
 28696                                  	; MSDOS 3.3
 28697                                  	;SHL	DX,CL
 28698                                  
 28699                                  ;hkn; SS override HIGH_SECTOR
 28700                                  	; MSDOS 6.0
 28701                                  	;MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 28702                                  	; 27/02/2024
 28703                                  	;mov	word [HIGH_SECTOR],0
 28704                                  	; 24/09/2023
 28705                                  	;;xor	ch,ch				;F.C. >32mb
 28706                                  	;OR	CL,CL				;F.C. >32mb
 28707                                  	;JZ	short noshift			;F.C. >32mb
 28708                                  	; 27/02/2024
 28709 00004C7E E309                    	jcxz	noshift
 28710                                  	; 27/02/2024
 28711                                  	;;XOR	CH,CH				;F.C. >32mb
 28712                                  rotleft:					;F.C. >32mb
 28713 00004C80 F8                      	CLC					;F.C. >32mb
 28714 00004C81 D1D2                    	RCL	DX,1				;F.C. >32mb
 28715                                  	; 10/06/2019
 28716                                  	;RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 28717                                  	; 27/02/2024
 28718 00004C83 D116[0706]              	rcl	word [HIGH_SECTOR],1
 28719 00004C87 E2F7                    	LOOP	rotleft				;F.C. >32mb
 28720                                  noshift:
 28721                                  	; MSDOS 3.3 & MSDOS 6.0
 28722 00004C89 08DA                    	OR	DL,BL
 28723                                  	;add	dx,[es:bp+0Bh]
 28724 00004C8B 2603560B                	ADD	DX,[ES:BP+DPB.FIRST_SECTOR]
 28725                                  	; MSDOS 6.0
 28726                                  	; 10/06/2019
 28727                                  	;ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 28728                                  	; 24/09/2023
 28729                                  	; cx=0
 28730                                  	;ADC	word [ss:HIGH_SECTOR],cx ; 0
 28731                                  	; 27/02/2024
 28732 00004C8F 110E[0706]              	adc	word [HIGH_SECTOR],cx ; 0
 28733                                  
 28734                                  	; MSDOS 3.3 & MSDOS 6.0
 28735 00004C93 59                      	POP	CX
 28736                                  figrec_retn:
 28737 00004C94 C3                      	retn
 28738                                  
 28739                                  ; 20/05/2019 - Retro DOS v4.0
 28740                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 28741                                  
 28742                                  ; 30/07/2018 - Retro DOS v3.0
 28743                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 28744                                  
 28745                                  ;Break   <ALLOCATE -- Assign disk space>
 28746                                  ;---------------------------------------------------------------------------
 28747                                  ;
 28748                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 28749                                  ;
 28750                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 28751                                  ;   FAT-chained onto the end of the existing file.
 28752                                  ;
 28753                                  ;   The DPB contains the cluster # of the last free cluster allocated
 28754                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 28755                                  ;   numbered clusters, looking for the necessary free blocks.
 28756                                  ;
 28757                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 28758                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 28759                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 28760                                  ;
 28761                                  ;       If we get to the end of the disk without satisfaction:
 28762                                  ;
 28763                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 28764                                  ;               return (insufficient_disk_space)
 28765                                  ;           ELSE
 28766                                  ;               dpb_next_free = 2; start scan over from the beginning.
 28767                                  ;
 28768                                  ;   Note that there is no multitasking interlock. There is no race when
 28769                                  ;   examining the entrys in an in-core FAT block since there will be no
 28770                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 28771                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 28772                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 28773                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 28774                                  ;   satisfied. We can't allow another activation to think this cluster is
 28775                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 28776                                  ;   allocated.
 28777                                  ;
 28778                                  ;   Note that when we run out of space this algorithem will scan from
 28779                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 28780                                  ;   redundantly scanning the later part of the disk. This only happens when
 28781                                  ;   we run out of space, so sue me.
 28782                                  ;
 28783                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28784                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28785                                  ;                                                                          ;
 28786                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 28787                                  ;   explanation:
 28788                                  ;
 28789                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 28790                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 28791                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 28792                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 28793                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 28794                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 28795                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 28796                                  ;   the
 28797                                  ;           LOOP   findfre         ; alloc more if needed
 28798                                  ;   instruction when the first cluster is allocated to the nul file. The
 28799                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 28800                                  ;
 28801                                  ;   This method is obviously useless (because it is non-reentrant) for
 28802                                  ;   multitasking, and will have to be changed. Storing the required value on
 28803                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 28804                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 28805                                  ;   problems with INT 24 well.
 28806                                  ;
 28807                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 28808                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 28809                                  ;                                                                          ;
 28810                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 28811                                  ;               CX = No. of clusters to allocate
 28812                                  ;               ES:BP = Base of drive parameters
 28813                                  ;               [THISSFT] = Points to SFT
 28814                                  ;
 28815                                  ;       EXIT    'C' set if insufficient space
 28816                                  ;                 [FAILERR] can be tested to see the reason for failure
 28817                                  ;                 CX = max. no. of clusters that could be added to file
 28818                                  ;               'C' clear if space allocated
 28819                                  ;                 BX = First cluster allocated
 28820                                  ;                 FAT is fully updated
 28821                                  ;                 sf_FIRCLUS field of SFT set if file was null
 28822                                  ;
 28823                                  ;       USES    ALL but SI, BP
 28824                                  
 28825                                  ;callmagic  proc near
 28826                                  ;       push    ds                             ;push segment of routine 
 28827                                  ;       push    Offset MagicPatch              ;push offset for routine
 28828                                  ;       retf                                   ;simulate jmp far
 28829                                  ;                                              ;far return address is on
 28830                                  ;                                              ;stack, so far return from
 28831                                  ;                                              ;call will return this routine
 28832                                  ;callmagic  endp
 28833                                  
 28834                                  ALLOCATE:
 28835                                  	; 10/09/2018
 28836                                  ;BEGIN MAGICDRV MODIFICATIONS
 28837                                  ;
 28838                                  ;7/5/92 scottq
 28839                                  ;
 28840                                  ;This is the disk compression patch location which allows
 28841                                  ;the disk compression software to fail allocations if the
 28842                                  ;FAT would allows allocation, but the free space for compressed
 28843                                  ;data would not.
 28844                                  ;        
 28845                                  ;;;	call    far ptr MAGICPATCH
 28846                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 28847                                  ;;; but we do know the segment and offset of the routine
 28848                                  ;;; so simulate a far call to dosdata:magicpatch
 28849                                  ;;; note dosassume above, so DS -> dosdata
 28850                                  
 28851                                  	; MSDOS 6.0
 28852                                          ;clc				;clear carry so we fall through
 28853                                  	;				;if no patch is present
 28854                                  	;push	cs			;push segment for far return
 28855                                          ;call	callmagic		;this is a near call
 28856                                          ;jnc	short Regular_Allocate_Path
 28857                                  	;jmp	Disk_Full_Return
 28858                                  
 28859                                  ;Regular_Allocate_Path:
 28860                                  	; 20/05/2019 - Retro DOS v4.0
 28861                                  ;END MAGICDRV MODIFICATIONS
 28862                                  
 28863                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28864                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 28865                                  
 28866 00004C95 53                              PUSH    BX                      ; save (bx)
 28867 00004C96 31DB                            XOR     BX,BX
 28868 00004C98 E81607                  	call	UNPACK
 28869 00004C9B 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 28870 00004C9F 5B                              POP     BX
 28871 00004CA0 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 28872                                  
 28873 00004CA2 51                              PUSH    CX
 28874 00004CA3 53                              PUSH    BX
 28875                                  
 28876 00004CA4 89DA                            MOV     DX,BX
 28877                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 28878                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 28879 00004CA6 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 28880 00004CAA 83FB02                          cmp     bx,2
 28881 00004CAD 7709                            ja	short FINDFRE
 28882                                  
 28883                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 28884                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 28885                                  
 28886                                  ads1:
 28887                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 28888                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 28889 00004CAF 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 28890 00004CB5 BB0100                          mov     bx,1                    ; Counter next instruction so first
 28891                                                                          ;       cluster examined is 2
 28892                                  
 28893                                  ;   Scanning both forwards and backwards for a free cluster
 28894                                  ;
 28895                                  ;       (BX) = forwards scan pointer
 28896                                  ;       (CX) = clusters remaining to be allocated
 28897                                  ;       (DX) = current last cluster in file
 28898                                  ;       (TOS) = last cluster of file
 28899                                  
 28900                                  FINDFRE:
 28901 00004CB8 43                              INC     BX
 28902                                  	;cmp	bx,[es:bp+0Dh]
 28903 00004CB9 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 28904 00004CBD 7757                    	ja	short ads7	; at end of disk
 28905 00004CBF E8EF06                          call	UNPACK          ; check out this cluster
 28906 00004CC2 722F                            jc	short ads4	; FAT error             [INTERR?]
 28907 00004CC4 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 28908                                  
 28909                                  ;   Have found a free cluster. Chain it to the file
 28910                                  ;
 28911                                  ;       (BX) = found free cluster #
 28912                                  ;       (DX) = current last cluster in file
 28913                                  
 28914                                  	;;mov	[es:bp+1Ch],bx
 28915                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 28916 00004CC6 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 28917 00004CCA 92                              xchg    ax,dx           ; save (dx) in ax
 28918 00004CCB BA0100                          mov     dx,1            ; mark this free guy as "1"
 28919 00004CCE E83407                  	call	PACK            ; set special "temporary" mark
 28920 00004CD1 7220                            jc	short ads4	; FAT error             [INTERR?]
 28921                                  	;;cmp	word [es:bp+1Eh],-1
 28922                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 28923 00004CD3 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 28924 00004CD8 7404                            JZ	short NO_ALLOC	; No
 28925                                  	;;dec	word [es:bp+1Eh]
 28926                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 28927 00004CDA 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 28928                                  NO_ALLOC:
 28929 00004CDE 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 28930 00004CDF 87DA                            XCHG    BX,DX
 28931 00004CE1 89D0                            MOV     AX,DX
 28932 00004CE3 E81F07                  	call	PACK            ; link free cluster onto file
 28933                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 28934                                                                  ;    cluster 0 with FIRCLUS value.
 28935 00004CE6 720B                            jc	short ads4	; FAT error [INTERR?]
 28936 00004CE8 93                              xchg    BX,AX           ; (BX) = last one we looked at
 28937 00004CE9 89DA                            mov     dx,bx           ; (dx) = current end of file
 28938 00004CEB E2CB                            LOOP    FINDFRE         ; alloc more if needed
 28939                                  
 28940                                  ;   We've successfully extended the file. Clean up and exit
 28941                                  ;
 28942                                  ;       (BX) = last cluster in file
 28943                                  
 28944 00004CED BAFFFF                          MOV     DX,0FFFFH
 28945 00004CF0 E81207                  	call	PACK            ; mark last cluster EOF
 28946                                  
 28947                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 28948                                  ;   2 whole bytes. Hope its worth it...
 28949                                  ;
 28950                                  ;       'C' set if error
 28951                                  ;       calling (BX) and (CX) pushed on stack
 28952                                  
 28953                                  ads4:   
 28954 00004CF3 5B                      	POP     BX
 28955 00004CF4 59                              POP     CX              ; Don't need this stuff since we're successful
 28956 00004CF5 729D                            jc	short figrec_retn
 28957 00004CF7 E8B706                          call	UNPACK          ; Get first cluster allocated for return
 28958                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 28959 00004CFA 7298                            jc	short figrec_retn
 28960 00004CFC E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 28961 00004CFF 7293                            jc	short figrec_retn
 28962 00004D01 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 28963 00004D03 09FF                            OR      DI,DI           ; clear 'C'
 28964 00004D05 758D                    	jnz	short figrec_retn ; we were extending an existing file
 28965                                  
 28966                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 28967                                  ;   info
 28968                                  dofastk:
 28969                                  	; 20/05/2019
 28970                                  	; MSDOS 6.0
 28971                                  	;push	dx ; * MSDOS 6.0
 28972                                  	;;mov	dl,[es:bp+0]
 28973                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 28974                                  	;mov	dl,[es:bp]
 28975                                  
 28976                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28977                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 28978                                  	
 28979                                  	; 16/12/2022
 28980                                  	;push	dx ; *
 28981                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 28982                                  	; 15/12/2022
 28983                                  	;mov	dl,[es:bp]
 28984                                  	
 28985                                  	; MSDOS 3.3 & MSDOS 6.0
 28986 00004D07 06                      	PUSH	ES
 28987 00004D08 C43E[9E05]              	LES     DI,[THISSFT]
 28988                                  	;mov	[es:di+0Bh],bx
 28989 00004D0C 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 28990                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 28991                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 28992 00004D10 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 28993 00004D14 07                      	POP	ES
 28994                                  	;retn
 28995                                  
 28996                                  	;pop	dx ; * MSDOS 6.0
 28997                                  
 28998                                  	; 16/12/2022
 28999                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29000                                  	;pop	dx ; *
 29001                                  
 29002 00004D15 C3                      	retn	
 29003                                  
 29004                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 29005                                  ;   of the disk...
 29006                                  
 29007                                  ads7:   
 29008 00004D16 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 29009 00004D1B 7592                    	jnz	short ads1	; start scan from front of disk
 29010                                  
 29011                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 29012                                  ;   the space back to the free list and tell the caller how much he could have
 29013                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 29014                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 29015                                  ;
 29016                                  ;       (CX) = clusters remaining to be allocated
 29017                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 29018                                  ;       (TOS+1) = # of clusters wanted to allocate
 29019                                  
 29020 00004D1D 5B                              POP     BX              ; (BX) = last cluster of file
 29021 00004D1E BAFFFF                          MOV     DX,0FFFFH
 29022 00004D21 E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 29023 00004D24 58                              POP     AX              ; No. of clusters requested
 29024                                                                  ; Don't "retc". We are setting Carry anyway,
 29025                                                                  ;   Alloc failed, so proceed with return CX
 29026                                                                  ;   setup.
 29027 00004D25 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 29028 00004D27 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 29029                                                                  ;   Alloc failed.
 29030                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 29031                                          ; MSDOS 6.0
 29032 00004D2A C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 29033 00004D2F F9                              STC
 29034 00004D30 C3                              retn
 29035                                  
 29036                                  ;-----------------------------------------------------------------------
 29037                                  ;
 29038                                  ; Procedure Name : RESTFATBYT
 29039                                  ;
 29040                                  ; SEE ALLOCATE CAVEAT
 29041                                  ;       Carry set if error (currently user FAILed to I 24)
 29042                                  ;-----------------------------------------------------------------------
 29043                                  
 29044                                  RESTFATBYT:
 29045 00004D31 53                              PUSH    BX
 29046 00004D32 52                              PUSH    DX
 29047 00004D33 57                              PUSH    DI
 29048 00004D34 31DB                            XOR     BX,BX
 29049 00004D36 8B16[9605]                      MOV     DX,[FATBYT]
 29050 00004D3A E8C806                  	call	PACK
 29051 00004D3D 5F                              POP     DI
 29052 00004D3E 5A                              POP     DX
 29053 00004D3F 5B                              POP     BX
 29054                                  ; 16/12/2022
 29055                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29056                                  ;RELEASE_flush:
 29057 00004D40 C3                      	retn
 29058                                  
 29059                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 29060                                  ;---------------------------------------------------------------------------
 29061                                  ;
 29062                                  ; Procedure Name : RELEASE
 29063                                  ;
 29064                                  ; Inputs:
 29065                                  ;       BX = Cluster in file
 29066                                  ;       ES:BP = Base of drive parameters
 29067                                  ; Function:
 29068                                  ;       Frees cluster chain starting with [BX]
 29069                                  ;       Carry set if error (currently user FAILed to I 24)
 29070                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 29071                                  ;
 29072                                  ;-----------------------------------------------------------------------------
 29073                                  
 29074                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29075                                  	; 20/05/2019 - Retro DOS v4.0
 29076                                  RELEASE:
 29077 00004D41 31D2                            XOR     DX,DX
 29078                                  
 29079                                  	;entry	RELBLKS
 29080                                  RELBLKS:
 29081                                  
 29082                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 29083                                  ;   and free the rest in the chain.
 29084                                  
 29085 00004D43 E86B06                  	call	UNPACK
 29086 00004D46 7224                    	jc	short RELEASE_flush
 29087 00004D48 7422                    	jz	short RELEASE_flush
 29088 00004D4A 89F8                            MOV     AX,DI
 29089 00004D4C 52                              PUSH    DX
 29090 00004D4D E8B506                  	call	PACK
 29091 00004D50 5A                              POP     DX
 29092 00004D51 7219                    	jc	short RELEASE_flush
 29093 00004D53 09D2                            OR      DX,DX
 29094 00004D55 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 29095                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 29096                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 29097 00004D57 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 29098 00004D5C 7404                            JZ	short NO_DEALLOC	; No
 29099 00004D5E 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 29100                                  NO_DEALLOC:
 29101 00004D62 89C3                            MOV     BX,AX
 29102 00004D64 48                              dec     ax              ; check for "1"
 29103 00004D65 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 29104 00004D67 E83006                  	call	IsEOF
 29105 00004D6A 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 29106                                  
 29107                                  	; 16/12/2022
 29108                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29109                                  ;%if 0
 29110                                  RELEASE_flush:
 29111                                  	; MSDOS 6.0
 29112 00004D6C 268A4600                	mov	al,[es:bp]
 29113                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29114 00004D70 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 29115 00004D71 51                      	push	cx		;  them to be preserved.
 29116 00004D72 06                      	push	es
 29117 00004D73 55                      	push	bp
 29118 00004D74 E8420B                  	call	FLUSHBUF	; commit buffers for this drive
 29119 00004D77 5D                      	pop	bp
 29120 00004D78 07                      	pop	es
 29121 00004D79 59                      	pop	cx
 29122 00004D7A 5E                      	pop	si
 29123                                  ;%endif
 29124                                  RET12:
 29125 00004D7B C3                      	retn
 29126                                  
 29127                                  ;Break	<GETEOF -- Find the end of a file>
 29128                                  ;------------------------------------------------------------------------
 29129                                  ;
 29130                                  ; Procedure Name : GETEOF
 29131                                  ;
 29132                                  ; Inputs:
 29133                                  ;       ES:BP Points to DPB
 29134                                  ;       BX = Cluster in a file
 29135                                  ;       DS = CS
 29136                                  ; Outputs:
 29137                                  ;       BX = Last cluster in the file
 29138                                  ;       Carry set if error (currently user FAILed to I 24)
 29139                                  ; DI destroyed. No other registers affected.
 29140                                  ;
 29141                                  ;--------------------------------------------------------------------------
 29142                                  
 29143                                  GETEOF:
 29144 00004D7C E83206                  	call	UNPACK
 29145 00004D7F 72FA                            jc	short RET12
 29146 00004D81 53                              PUSH    BX
 29147 00004D82 89FB                            MOV     BX,DI
 29148 00004D84 E81306                  	call	IsEOF
 29149 00004D87 5B                              POP     BX
 29150 00004D88 73F1                            JAE     short RET12
 29151 00004D8A 89FB                            MOV     BX,DI
 29152 00004D8C EBEE                            JMP     short GETEOF
 29153                                  
 29154                                  ;============================================================================
 29155                                  ; FCB.ASM, MSDOS 6.0, 1991
 29156                                  ;============================================================================
 29157                                  ; 30/07/2018 - Retro DOS v3.0
 29158                                  ; 20/05/2019 - Retro DOS v4.0
 29159                                  
 29160                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 29161                                  ;	NAME	FCB
 29162                                  
 29163                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 29164                                  ;		  filename characters
 29165                                  ;
 29166                                  ;	MakeFcb
 29167                                  ;	NameTrans
 29168                                  ;	PATHCHRCMP
 29169                                  ;	GetLet
 29170                                  ;	UCase
 29171                                  ;	GetLet3
 29172                                  ;	GetCharType
 29173                                  ;	TESTKANJ
 29174                                  ;	NORMSCAN
 29175                                  ;	DELIM
 29176                                  ;
 29177                                  ;	Revision history:
 29178                                  ;
 29179                                  ;		A000  version 4.00  Jan. 1988
 29180                                  ;	
 29181                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 29182                                  
 29183                                  TableLook	EQU	-1
 29184                                  
 29185                                  SCANSEPARATOR	EQU	1
 29186                                  DRVBIT		EQU	2
 29187                                  NAMBIT		EQU	4
 29188                                  EXTBIT		EQU	8
 29189                                  
 29190                                  ;----------------------------------------------------------------------------
 29191                                  ;
 29192                                  ; Procedure : MakeFcb
 29193                                  ;
 29194                                  ;----------------------------------------------------------------------------
 29195                                  
 29196                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29197                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 29198                                  
 29199                                  	; 29/02/2024 - Retro DOS v4.1
 29200                                  MAKEFCB:
 29201                                  ;hkn; SS override
 29202                                  	;MOV	BYTE [SS:SpaceFlag],0
 29203 00004D8E 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 29204                                  	; 29/02/2024
 29205 00004D90 368816[4E03]            	mov	[ss:SpaceFlag],dl ; 0
 29206                                  	;test	al,2
 29207 00004D95 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 29208 00004D97 7503                    	JNZ	short DEFDRV
 29209                                  	;MOV	BYTE [ES:DI],0	; No - use default drive
 29210                                  	; 29/02/2024
 29211 00004D99 268815                  	mov	[es:di],dl ; 0
 29212                                  DEFDRV:
 29213 00004D9C 47                      	INC	DI
 29214 00004D9D B90800                  	MOV	CX,8
 29215                                  	;test	al,4
 29216 00004DA0 A804                    	test	AL,NAMBIT	; Use current name fields as default?
 29217 00004DA2 93                      	XCHG	AX,BX		; Save bits in BX
 29218 00004DA3 B020                    	MOV	AL," "
 29219 00004DA5 7404                    	JZ	short FILLB	; If not, go fill with blanks
 29220 00004DA7 01CF                    	ADD	DI,CX
 29221 00004DA9 31C9                    	XOR	CX,CX		; Don't fill any
 29222                                  FILLB:
 29223 00004DAB F3AA                    	REP	STOSB
 29224 00004DAD B103                    	MOV	CL,3
 29225 00004DAF F6C308                  	test	BL,EXTBIT	; Use current extension as default
 29226 00004DB2 7404                    	JZ	short FILLB2
 29227 00004DB4 01CF                    	ADD	DI,CX
 29228 00004DB6 31C9                    	XOR	CX,CX
 29229                                  FILLB2:
 29230 00004DB8 F3AA                    	REP	STOSB
 29231 00004DBA 91                      	XCHG	AX,CX		; Put zero in AX
 29232 00004DBB AB                      	STOSW
 29233 00004DBC AB                      	STOSW			; Initialize two words after to zero
 29234 00004DBD 83EF10                  	SUB	DI,16		; Point back at start
 29235                                  	;test	bl,1
 29236 00004DC0 F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 29237 00004DC3 7409                    	JZ	short SKPSPC
 29238 00004DC5 E88800                  	CALL	SCANB		; Peel off blanks and tabs
 29239 00004DC8 E81E01                  	CALL	DELIM		; Is it a one-time-only delimiter?
 29240 00004DCB 7504                    	JNZ	short NOSCAN
 29241 00004DCD 46                      	INC	SI		; Skip over the delimiter
 29242                                  SKPSPC:
 29243 00004DCE E87F00                  	CALL	SCANB		; Always kill preceding blanks and tabs
 29244                                  NOSCAN:
 29245 00004DD1 E8EC00                  	CALL	GETLET
 29246 00004DD4 761E                    	JBE	short NODRV	; Quit if termination character
 29247 00004DD6 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 29248 00004DD9 7519                    	JNZ	short NODRV
 29249 00004DDB 46                      	INC	SI		; Skip over colon
 29250 00004DDC 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 29251 00004DDE 760F                    	JBE	short BADDRV	; Drive letter out of range
 29252                                  
 29253 00004DE0 50                      	PUSH	AX
 29254 00004DE1 E8D81A                  	call	GetVisDrv
 29255 00004DE4 58                      	POP	AX
 29256 00004DE5 730A                    	JNC	short HAVDRV
 29257                                  
 29258                                  	; 20/05/2019 - Retro DOS v4.0
 29259                                  	; MSDOS 6.0
 29260                                  ;hkn; SS override
 29261 00004DE7 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 29262                                  					; if not FAT drive ;AN000;
 29263 00004DED 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 29264                                  BADDRV:
 29265 00004DEF B2FF                    	MOV	DL,-1
 29266                                  HAVDRV:
 29267 00004DF1 AA                      	STOSB			; Put drive specifier in first byte
 29268 00004DF2 46                      	INC	SI
 29269 00004DF3 4F                      	DEC	DI		; Counteract next two instructions
 29270                                  NODRV:
 29271 00004DF4 4E                      	DEC	SI		; Back up
 29272 00004DF5 47                      	INC	DI		; Skip drive byte
 29273                                  
 29274                                  	;entry	NORMSCAN
 29275                                  NORMSCAN:
 29276 00004DF6 B90800                  	MOV	CX,8
 29277 00004DF9 E82200                  	CALL	GETWORD 	; Get 8-letter file name
 29278 00004DFC 803C2E                  	CMP	BYTE [SI],"."
 29279 00004DFF 7510                    	JNZ	short NODOT
 29280 00004E01 46                      	INC	SI		; Skip over dot if present
 29281                                  
 29282                                  	; 24/09/2023
 29283                                  	;mov	cx,3
 29284 00004E02 B103                    	mov	cl,3	; ch=0
 29285                                  
 29286                                  	; MSDOS 6.0
 29287                                  ;hkn; SS override
 29288                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 29289                                  	; 10/06/2019
 29290 00004E04 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 29291 00004E0A 7402                    	JZ	short VOLOK				;AN000;
 29292 00004E0C A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 29293                                  	; 24/09/2023
 29294                                  	;MOV	CX,2					;AN000;
 29295 00004E0D 49                      	dec	cx  ; cx=2
 29296                                  	;JMP	SHORT contvol				;AN000;
 29297                                  VOLOK:
 29298                                  	;MOV	CX,3		; Get 3-letter extension
 29299                                  contvol:
 29300 00004E0E E81300                  	CALL	MUSTGETWORD
 29301                                  NODOT:
 29302 00004E11 88D0                    	MOV	AL,DL
 29303                                  
 29304                                  	; MSDOS 6.0
 29305                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 29306                                  	; 18/12/2022
 29307 00004E13 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 29308                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 29309                                  
 29310 00004E19 C3                      	retn
 29311                                  
 29312                                  NONAM:
 29313 00004E1A 01CF                    	ADD	DI,CX
 29314 00004E1C 4E                      	DEC	SI
 29315 00004E1D C3                      	retn
 29316                                  
 29317                                  GETWORD:
 29318 00004E1E E89F00                  	CALL	GETLET		
 29319 00004E21 76F7                    	JBE	short NONAM	; Exit if invalid character
 29320 00004E23 4E                      	DEC	SI
 29321                                  
 29322                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 29323                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 29324                                  
 29325                                  MUSTGETWORD:
 29326 00004E24 E89900                  	CALL	GETLET
 29327                                  
 29328                                  ;	If spaceFlag is set then we allow spaces in a pathname
 29329                                  
 29330                                  ;IF NOT TABLELOOK
 29331                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 29332                                  ;ENDIF
 29333 00004E27 750C                    	JNZ	short MustCheckCX
 29334                                  
 29335                                  ;hkn; SS override
 29336 00004E29 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 29337 00004E2F 7419                    	JZ	short FILLNAM
 29338 00004E31 3C20                    	CMP	AL," "
 29339 00004E33 7515                    	JNZ	short FILLNAM
 29340                                  
 29341                                  MustCheckCX:
 29342 00004E35 E3ED                    	JCXZ	MUSTGETWORD
 29343 00004E37 49                      	DEC	CX
 29344 00004E38 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 29345 00004E3A 7504                    	JNZ	short NOSTAR
 29346 00004E3C B03F                    	MOV	AL,"?"
 29347 00004E3E F3AA                    	REP	STOSB
 29348                                  NOSTAR:
 29349 00004E40 AA                      	STOSB
 29350 00004E41 3C3F                    	CMP	AL,"?"
 29351 00004E43 75DF                    	JNZ	short MUSTGETWORD
 29352 00004E45 80CA01                  	OR	DL,1		; Flag ambiguous file name
 29353 00004E48 EBDA                    	JMP	short MUSTGETWORD
 29354                                  FILLNAM:
 29355 00004E4A B020                    	MOV	AL," "
 29356 00004E4C F3AA                    	REP	STOSB
 29357 00004E4E 4E                      	DEC	SI
 29358 00004E4F C3                      	retn
 29359                                  
 29360                                  SCANB:
 29361 00004E50 AC                      	LODSB
 29362 00004E51 E89D00                  	CALL	SPCHK
 29363 00004E54 74FA                    	JZ	short SCANB
 29364 00004E56 4E                      	DEC	SI
 29365                                  scanb_retn:
 29366 00004E57 C3                      	retn
 29367                                  
 29368                                  ;----------------------------------------------------------------------------
 29369                                  ;
 29370                                  ; Procedure Name : NameTrans
 29371                                  ;
 29372                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 29373                                  ; allow spaces in pathnames
 29374                                  ;
 29375                                  ;   Inputs:	DS:SI points to start of path element
 29376                                  ;   Outputs:	Name1 has unpacked name, uppercased
 29377                                  ;		ES = DOSGroup
 29378                                  ;		DS:SI advanced after name
 29379                                  ;   Registers modified: DI,AX,DX,CX
 29380                                  ;
 29381                                  ;----------------------------------------------------------------------------
 29382                                  
 29383                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29384                                  	; 20/05/2019 - Retro DOS v4.0
 29385                                  
 29386                                  	; 29/02/2024 - Retro DOS v4.1
 29387                                  
 29388                                  NameTrans:
 29389                                  ;hkn; SS override
 29390 00004E58 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 29391 00004E5E 16                      	push	ss
 29392 00004E5F 07                      	pop	es
 29393                                  
 29394                                  ;hkn; NAME1 is in DOSDATA
 29395 00004E60 BF[4B05]                	MOV	DI,NAME1
 29396 00004E63 57                      	PUSH	DI
 29397                                  
 29398                                  ; 29/02/2024
 29399                                  %if 0
 29400                                  	MOV	AX,'  '	; 2020h
 29401                                  	MOV	CX,5
 29402                                  	STOSB
 29403                                  	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 29404                                  	XOR	AL,AL		; Set stuff for NORMSCAN
 29405                                  	MOV	DL,AL
 29406                                  %else
 29407                                  	; 29/02/2024
 29408                                  	; (PCDOS 7.1 IBMDOS.COM)
 29409 00004E64 B020                    	mov     al,20h ; ' '
 29410 00004E66 B90B00                  	mov     cx,11
 29411 00004E69 F3AA                    	rep stosb               ; Fill "FCB" at NAME1 with spaces
 29412 00004E6B 91                      	xchg    ax,cx
 29413 00004E6C 99                      	cwd
 29414                                  %endif
 29415                                  
 29416 00004E6D AA                      	STOSB
 29417 00004E6E 5F                      	POP	DI
 29418                                  
 29419 00004E6F E884FF                  	CALL	NORMSCAN
 29420                                  
 29421                                  ;hkn; SS override for NAME1
 29422 00004E72 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 29423 00004E78 75DD                    	jnz	short scanb_retn
 29424 00004E7A 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 29425 00004E80 C3                      	retn
 29426                                  
 29427                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 29428                                  ;============================================================================
 29429                                  
 29430                                  ; 20/05/2019 - Retro DOS v4.0
 29431                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29432                                  
 29433                                  ;If TableLook
 29434                                  
 29435                                  ;hkn; Table	SEGMENT
 29436                                  ;	PUBLIC	CharType
 29437                                  ;----------------------------------------------------------------------------
 29438                                  
 29439                                  ; Character type table for file name scanning
 29440                                  ; Table provides a mapping of characters to validity bits.
 29441                                  ; Four bits are provided for each character. Values 7Dh and above
 29442                                  ; have all bits set, so that part of the table is chopped off, and
 29443                                  ; the translation routine is responsible for screening these values.
 29444                                  ; The bit values are defined in DOSSYM.INC
 29445                                  
 29446                                  ;	      ; ^A and NUL
 29447                                  ;CharType:
 29448                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29449                                  ;	      ; ^C and ^B
 29450                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29451                                  ;	      ; ^E and ^D
 29452                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29453                                  ;	      ; ^G and ^F
 29454                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29455                                  ;	      ; TAB and BS
 29456                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29457                                  ;	      ; ^K and ^J
 29458                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29459                                  ;	      ; ^M and ^L
 29460                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29461                                  ;	      ; ^O and ^N
 29462                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29463                                  ;	      ; ^Q and ^P
 29464                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29465                                  ;	      ; ^S and ^R
 29466                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29467                                  ;	      ; ^U and ^T
 29468                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29469                                  ;	      ; ^W and ^V
 29470                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29471                                  ;	      ; ^Y and ^X
 29472                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29473                                  ;	      ; ESC and ^Z
 29474                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29475                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29477                                  ;	      ; ^_ and ^^
 29478                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29479                                  ;	      ; ! and SPACE
 29480                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 29481                                  ;	      ; # and "
 29482                                  ;	 db   LOW (NOT FFCB+FCHK)
 29483                                  ;	      ; $ - )
 29484                                  ;	 db   3 dup (0FFh)
 29485                                  ;	      ; + and *
 29486                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 29487                                  ;	      ; - and '
 29488                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 29489                                  ;	      ; / and .
 29490                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 29491                                  ;	      ; 0 - 9
 29492                                  ;	 db   5 dup (0FFh)
 29493                                  ;	      ; ; and :
 29494                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29495                                  ;	      ; = and <
 29496                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 29497                                  ;	      ; ? and >
 29498                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29499                                  ;	      ; A - Z
 29500                                  ;	 db   13 dup (0FFh)
 29501                                  ;	      ; \ and [
 29502                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 29503                                  ;	      ; ^ and ]
 29504                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 29505                                  ;	      ; _ - {
 29506                                  ;	 db   15 dup (0FFh)
 29507                                  ;	      ; } and |
 29508                                  ;	 db   NOT FFCB+FCHK+FDELIM
 29509                                  
 29510                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 29511                                  ;					; character in the table
 29512                                  
 29513                                  ;FCHK	equ 1		; normal name char, no chks needed
 29514                                  ;FDELIM	equ 2		; is a delimiter
 29515                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 29516                                  ;FFCB	equ 8		; is valid in an FCB
 29517                                  
 29518                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 29519                                  ;----------------------------------------------------------------------------
 29520                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 29521                                  
 29522                                  CharType: ; 63 bytes
 29523 00004E81 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 29524 00004E89 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 29525 00004E91 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 29526 00004E99 FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 29527 00004EA1 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 29528 00004EA9 FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 29529 00004EB1 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 29530 00004EB9 FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 29531                                  
 29532                                  CharType_last equ ($ - CharType) * 2
 29533                                  
 29534                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 29535                                  ;----------------------------------------------------------------------------
 29536                                  ;CharType:
 29537                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29538                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29539                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29540                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 29541                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 29542                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 29543                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29544                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 29545                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29546                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29547                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29548                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 29549                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29550                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29551                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29552                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 29553                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29554                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29555                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29556                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29557                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29558                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29559                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29560                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29561                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29562                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29563                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29564                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29565                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29566                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29567                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29568                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 29569                                  
 29570                                  ;hkn; Table	ENDS
 29571                                  
 29572                                  ;ENDIF
 29573                                  
 29574                                  ; 20/05/2019 - Retro DOS v4.0
 29575                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 29576                                  
 29577                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29578                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 29579                                  
 29580                                  ;----------------------------------------------------------------------------
 29581                                  ;
 29582                                  ; Procedure Names : GetLet, UCase, GetLet3
 29583                                  ;
 29584                                  ; These routines take a character, convert it to upper case, and check
 29585                                  ; for delimiters.  Three different entry points:
 29586                                  ;	GetLet -  DS:[SI] = character to convert
 29587                                  ;	UCase  -  AL = character to convert
 29588                                  ;	GetLet3 - AL = character
 29589                                  ;		  [BX] = translation table to use
 29590                                  ;
 29591                                  ;	Exit (in all cases) : AL = upper case character
 29592                                  ;			      CY set if char is control char other than TAB
 29593                                  ;			      ZF set if char is a delimiter
 29594                                  ;	Uses : AX, flags
 29595                                  ;
 29596                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 29597                                  ; inline version.  Return with carry set is only possible in the inline
 29598                                  ; version. The table lookup version is the one in use.
 29599                                  ;
 29600                                  ;----------------------------------------------------------------------------
 29601                                  
 29602                                  ; This entry point has character at [SI]
 29603                                  
 29604                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 29605                                  GETLET:	
 29606 00004EC0 AC                      	LODSB
 29607                                  
 29608                                  ; This entry point has character in AL
 29609                                  
 29610                                  	;entry	UCase
 29611                                  UCase:	
 29612                                  	; 09/08/2018
 29613                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 29614                                  _UCase:
 29615 00004EC1 53                      	PUSH	BX
 29616 00004EC2 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 29617                                  
 29618                                  ; Convert the character in AL to upper case
 29619                                  
 29620                                  gl_0:
 29621 00004EC5 3C61                    	CMP	AL,"a"
 29622 00004EC7 7214                    	JB	short gl_2	; Already upper case, go check type
 29623 00004EC9 3C7A                    	CMP	AL,"z"
 29624 00004ECB 7702                    	JA	short gl_1
 29625 00004ECD 2C20                    	SUB	AL,20H		; Convert to upper case
 29626                                  
 29627                                  ; Map European character to upper case
 29628                                  
 29629                                  gl_1:
 29630 00004ECF 3C80                    	CMP	AL,80H
 29631 00004ED1 720A                    	JB	short gl_2	; Not EuroChar, go check type
 29632 00004ED3 2C80                    	SUB	AL,80H		; translate to upper case with this index
 29633                                  
 29634                                  	; M048 - Start 
 29635                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 29636                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 29637                                  	; preserve it.
 29638                                  
 29639                                  	; 09/08/2018 - Retro DOS v3.0
 29640                                  	; MSDOS 3.3
 29641                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 29642                                  	;CS	XLAT
 29643                                  
 29644                                  	; 20/05/2019 - Retro DOS v4.0
 29645                                  
 29646                                  	; MSDOS 6.0
 29647 00004ED5 1E                      	push	ds
 29648                                  	;getdseg <ds>
 29649 00004ED6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29650 00004EDB D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 29651 00004EDC 1F                      	pop	ds
 29652                                  
 29653                                  	; M048 - End
 29654                                  
 29655                                  ; Now check the type
 29656                                  
 29657                                  ;If TableLook
 29658                                  gl_2:
 29659                                  	; 20/05/2019 - Retro DOS v4.0
 29660 00004EDD 50                      	PUSH	AX
 29661                                  
 29662                                  	; MSDOS 3.3
 29663                                  	;mov	bx,CharType
 29664                                  	;; 09/08/2018
 29665                                  	;;xlat	byte [cs:bx]
 29666                                  	;cs	xlat	
 29667                                  	
 29668                                  	; MSDOS 6.0
 29669 00004EDE E81800                  	CALL	GetCharType	; returns type flags in AL
 29670                                  	
 29671                                  	;test	al,1	
 29672 00004EE1 A801                    	TEST	AL,FCHK 	; test for normal character
 29673 00004EE3 58                      	POP	AX
 29674 00004EE4 5B                      	POP	BX
 29675 00004EE5 C3                      	RETN
 29676                                  
 29677                                  ; This entry has character in AL and lookup table in BX
 29678                                  
 29679                                  	; MSDOS 6.0
 29680                                  ;	;entry GetLet3
 29681                                  GETLET3: ; 10/08/2018
 29682 00004EE6 53                      	PUSH	BX
 29683 00004EE7 EBDC                    	JMP	short gl_0
 29684                                  ;ELSE
 29685                                  ;
 29686                                  ;gl_2:
 29687                                  ;	POP	BX
 29688                                  ;	CMP	AL,"."
 29689                                  ;	retz
 29690                                  ;	CMP	AL,'"'
 29691                                  ;	retz
 29692                                  ;	CALL	PATHCHRCMP
 29693                                  ;	retz
 29694                                  ;	CMP	AL,"["
 29695                                  ;	retz
 29696                                  ;	CMP	AL,"]"
 29697                                  ;	retz
 29698                                  ;ENDIF
 29699                                  
 29700                                  ;---------------------------------------------------------------------
 29701                                  ;
 29702                                  ; DELIM - check if character is a delimiter
 29703                                  ;	Entry : AX = character to check
 29704                                  ;	Exit  : ZF set if character is not a delimiter
 29705                                  ;	Uses  : Flags
 29706                                  ;
 29707                                  ;--------------------------------------------------------------------
 29708                                  
 29709                                  	;entry	DELIM
 29710                                  DELIM:
 29711                                  ;IF TableLook
 29712                                  	; 20/05/2019 - Retro DOS v4.0
 29713 00004EE9 50                      	PUSH	AX
 29714                                  
 29715                                  	; MSDOS 3.3
 29716                                  	;push	bx
 29717                                  	;mov	bx,CharType
 29718                                  	;;09/08/2018
 29719                                  	;;xlat	byte [cs:bx]
 29720                                  	;cs	xlat
 29721                                  	;pop	bx
 29722                                  
 29723                                  	; MSDOS 6.0
 29724 00004EEA E80C00                  	CALL	GetCharType
 29725                                  	
 29726                                  	;test	al,2
 29727 00004EED A802                    	TEST	AL,FDELIM
 29728 00004EEF 58                      	POP	AX
 29729 00004EF0 C3                      	RETN
 29730                                  ;ELSE
 29731                                  ;	CMP	AL,":"
 29732                                  ;	retz
 29733                                  ;
 29734                                  ;	CMP	AL,"<"
 29735                                  ;	retz
 29736                                  ;	CMP	AL,"|"
 29737                                  ;	retz
 29738                                  ;	CMP	AL,">"
 29739                                  ;	retz
 29740                                  ;
 29741                                  ;	CMP	AL,"+"
 29742                                  ;	retz
 29743                                  ;	CMP	AL,"="
 29744                                  ;	retz
 29745                                  ;	CMP	AL,";"
 29746                                  ;	retz
 29747                                  ;	CMP	AL,","
 29748                                  ;	retz
 29749                                  ;ENDIF
 29750                                  
 29751                                  ;-------------------------------------------------------------------------
 29752                                  ;
 29753                                  ;  SPCHK - checks to see if a character is a space or equivalent
 29754                                  ;	Entry : AL = character to check
 29755                                  ;	Exit  : ZF set if character is a space
 29756                                  ;	Uses  : flags
 29757                                  ;
 29758                                  ;-------------------------------------------------------------------------
 29759                                  
 29760                                  	;entry SPCHK
 29761                                  SPCHK:
 29762                                  ;IF TableLook
 29763                                  	; 20/05/2019 - Retro DOS v4.0
 29764 00004EF1 50                      	PUSH	AX
 29765                                  
 29766                                  	; MSDOS 3.3
 29767                                  	;push	bx
 29768                                  	;mov	bx,CharType
 29769                                  	;; 09/08/2018
 29770                                  	;;xlat	byte [cs:bx]
 29771                                  	;cs	xlat
 29772                                  	;pop	bx
 29773                                  
 29774                                  	; MSDOS 6.0
 29775 00004EF2 E80400                  	CALL	GetCharType
 29776                                  	
 29777                                  	;test	al,4
 29778 00004EF5 A804                    	TEST	AL,FSPCHK
 29779 00004EF7 58                      	POP	AX
 29780 00004EF8 C3                      	RETN
 29781                                  ;ELSE
 29782                                  ;	CMP	AL,9		; Filter out tabs too
 29783                                  ;	retz
 29784                                  ;; WARNING! " " MUST be the last compare
 29785                                  ;	CMP	AL," "
 29786                                  ;	return
 29787                                  ;ENDIF
 29788                                  
 29789                                  ;-------------------------------------------------------------------------
 29790                                  ;
 29791                                  ;  GetCharType - return flag bits indicating character type
 29792                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 29793                                  ;	defined above at label CharType.
 29794                                  ;
 29795                                  ;	Entry : AL = character to return type flags for
 29796                                  ;	Exit  : AL = type flags
 29797                                  ;	Uses  : AL, flags
 29798                                  ;
 29799                                  ;-------------------------------------------------------------------------
 29800                                  
 29801                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29802                                  
 29803                                  	; 20/05/2019 - Retro DOS v4.0
 29804                                  	; MSDOS 6.0
 29805                                  GetCharType:
 29806                                  	;cmp	al,7Eh
 29807 00004EF9 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 29808 00004EFB 7316                    	jae	short gct_90		; return standard value
 29809                                  
 29810 00004EFD 53                      	push	bx
 29811 00004EFE BB[814E]                	mov	bx,CharType		; load lookup table
 29812 00004F01 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 29813                                  	;xlat	cs:[bx] 		; get flags
 29814 00004F03 2ED7                    	cs	xlat	
 29815 00004F05 5B                      	pop	bx
 29816                                  
 29817                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 29818                                  ; we have to shift the flags down to the low nibble
 29819                                  
 29820 00004F06 7308                    	jnc	short gct_80		; carry clear, no shift needed
 29821                                  
 29822 00004F08 D0E8                    	shr	al,1			; we want high nibble, shift it down
 29823 00004F0A D0E8                    	shr	al,1
 29824 00004F0C D0E8                    	shr	al,1
 29825 00004F0E D0E8                    	shr	al,1
 29826                                  gct_80:
 29827 00004F10 240F                    	and	al,0Fh			; clear the unused nibble
 29828 00004F12 C3                      	retn
 29829                                  gct_90:
 29830 00004F13 B00F                    	mov	al,0Fh			; set all flags
 29831 00004F15 C3                      	retn
 29832                                  
 29833                                  ;----------------------------------------------------------------------------
 29834                                  ;
 29835                                  ; Procedure : PATHCHRCMP
 29836                                  ;
 29837                                  ;----------------------------------------------------------------------------
 29838                                  
 29839                                  PATHCHRCMP:
 29840 00004F16 3C2F                    	CMP	AL,'/'
 29841 00004F18 7606                    	JBE	short PathRet
 29842 00004F1A 3C5C                    	CMP	AL,'\'
 29843 00004F1C C3                      	retn
 29844                                  GotFor:
 29845 00004F1D B05C                    	MOV	AL,'\'
 29846 00004F1F C3                      	retn
 29847                                  PathRet:
 29848 00004F20 74FB                    	JZ	short GotFor
 29849 00004F22 C3                      	retn
 29850                                  
 29851                                  ;============================================================================
 29852                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 29853                                  ;============================================================================
 29854                                  ; 30/07/2018 - Retro DOS v3.0
 29855                                  ; 29/04/2019 - Retro DOS v4.0
 29856                                  
 29857                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 29858                                  
 29859                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 29860                                  
 29861                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 29862                                  ;	NAME	IBMCTRLC
 29863                                  
 29864                                  ;**	Low level routines for detecting special characters on CON input,
 29865                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 29866                                  ;	process termination code, and the INT 0 divide overflow handler.
 29867                                  ;
 29868                                  ;	FATAL
 29869                                  ;	FATAL1
 29870                                  ;	reset_environment
 29871                                  ;	DSKSTATCHK
 29872                                  ;	SPOOLINT
 29873                                  ;	STATCHK
 29874                                  ;	CNTCHAND
 29875                                  ;	DIVOV
 29876                                  ;	CHARHARD
 29877                                  ;	HardErr
 29878                                  ;
 29879                                  ;	Revision history:
 29880                                  ;
 29881                                  ;	    AN000	version 4.0   Jan 1988
 29882                                  ;	    A002	PTM    -- dir >lpt3 hangs
 29883                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 29884                                  ;
 29885                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 29886                                  ;	      flags register. In order to return to user normally DOS used to
 29887                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 29888                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 29889                                  ;
 29890                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 29891                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 29892                                  ;	      charhard.
 29893                                  
 29894                                  ; 29/04/2019 - Retro DOS v4.0
 29895                                  	; MSDOS 6.0
 29896                                  ;		public	LowInt23Addr		
 29897                                  LowInt23Addr: ;	LABEL	DWORD
 29898 00004F23 [E710]0000              	DW	LowInt23, 0
 29899                                  
 29900                                  ;		public	LowInt24Addr
 29901                                  LowInt24Addr: ;	LABEL	DWORD
 29902 00004F27 [FB10]0000              	DW	LowInt24, 0
 29903                                  
 29904                                  ;		public	LowInt28Addr
 29905                                  LowInt28Addr: ;	LABEL	DWORD
 29906 00004F2B [0F11]0000              	DW	LowInt28, 0
 29907                                  
 29908                                  ;Break	<Checks for ^C in CON I/O>
 29909                                  
 29910                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29911                                  ; 05/05/2019 - Retro DOS v4.0
 29912                                  
 29913                                  ;---------------------------------------------------------------------------
 29914                                  ;
 29915                                  ; Procedure Name : DSKSTATCHK
 29916                                  ;
 29917                                  ; Check for ^C if only one level in
 29918                                  ;
 29919                                  ;---------------------------------------------------------------------------
 29920                                  
 29921                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 29922                                  
 29923                                  	; 29/02/2024 - Retro DOS v4.1
 29924                                  
 29925                                  DSKSTATCHK:        
 29926                                  	;CMP	BYTE [INDOS],1
 29927 00004F2F 36803E[2103]01          	CMP	BYTE [SS:INDOS],1 ; 15/03/2018
 29928                                  	;retnz			; Do NOTHING
 29929                                  	; 16/12/2022
 29930 00004F35 7537                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018
 29931                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29932                                  	;jz	short _RET37 ; dskstatchk1
 29933                                  	;retn
 29934                                  ;_RET37:
 29935                                  ;dskstatchk1:
 29936 00004F37 51                      	PUSH    CX
 29937 00004F38 06                      	PUSH    ES
 29938 00004F39 53                      	PUSH    BX
 29939 00004F3A 1E                      	PUSH    DS
 29940 00004F3B 56                      	PUSH    SI
 29941                                          
 29942                                  	;PUSH	CS
 29943                                  	;POP	ES
 29944                                  	;PUSH	CS
 29945                                  	;POP	DS
 29946                                  
 29947 00004F3C 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 29948 00004F3E 8EC3                    	MOV	ES,BX		; for deviocall2
 29949 00004F40 8EDB                    	MOV	DS,BX
 29950                                  
 29951                                  	; 16/12/2022
 29952                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29953                                  
 29954                                  	; 05/05/2019
 29955                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 29956                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 29957                                  	;mov	word [ss:DSKSTST],0
 29958                                  
 29959                                  	; 16/12/2022
 29960                                  	; 25/06/2019
 29961 00004F42 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 29962 00004F47 C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 29963 00004F4C C706[9503]0000          	mov	word [DSKSTST],0
 29964                                  
 29965 00004F52 BB[9203]                        MOV     BX,DSKSTCALL
 29966                                  
 29967                                  	;LDS	SI,[ss:BCON]
 29968                                          ; 25/062019
 29969 00004F55 C536[3200]              	lds	si,[BCON]
 29970                                  
 29971                                  ; 16/12/2022
 29972                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29973                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 29974                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 29975                                  ;	mov	word [ss:DSKSTST],0
 29976                                  ;	mov	bx,DSKSTCALL
 29977                                  ;	lds	si,[ss:BCON]
 29978                                  
 29979 00004F59 E8B1F5                  	CALL	DEVIOCALL2
 29980                                  
 29981                                  	; 29/02/2024
 29982 00004F5C 1E                      	push	ds ; *
 29983 00004F5D 16                      	push	ss
 29984 00004F5E 1F                      	pop	ds
 29985                                  
 29986                                   	; 15/03/2018
 29987                                  	;;test	word [ss:DSKSTST],200h
 29988                                          ;TEST	WORD [SS:DSKSTST],STBUI
 29989                                  	; 05/05/2019
 29990                                  	;test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 29991                                  	; 29/02/2024
 29992 00004F5F F606[9603]02            	test	byte [DSKSTST+1],(STBUI>>8) ; 2
 29993 00004F64 7409                    	jz	short _GotCh		; No characters available
 29994                                  
 29995 00004F66 30C0                    	XOR	AL,AL			; Set zero
 29996                                  RET36:
 29997                                  	; 29/02/2024
 29998 00004F68 5E                      	pop	si ; *
 29999                                  	;
 30000 00004F69 5E                      	POP	SI
 30001 00004F6A 1F                      	POP	DS
 30002 00004F6B 5B                      	POP	BX
 30003 00004F6C 07                      	POP	ES
 30004 00004F6D 59                      	POP	CX
 30005                                  	; 16/12/2022
 30006                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30007                                  _RET37:
 30008 00004F6E C3                      	RETN
 30009                                  
 30010                                  _GotCh:
 30011                                  
 30012                                  ; 29/02/2024
 30013                                  %if 0
 30014                                  	MOV	AL,[SS:DSKCHRET]	; SS override
 30015                                  
 30016                                  	CMP	AL,"C"-"@" ; cmp al,3
 30017                                  	JNZ	SHORT RET36
 30018                                  	MOV	BYTE [SS:DSKSTCOM],DEVRD
 30019                                  	MOV	BYTE [SS:DSKSTCALL],DRDWRHL
 30020                                  	MOV	[SS:DSKCHRET],CL
 30021                                  	; 09/09/2018
 30022                                  	MOV	word [SS:DSKSTST],0
 30023                                  	MOV	word [SS:DSKSTCNT],1
 30024                                  %else
 30025                                  	; 29/02/2024
 30026 00004F6F A0[9F03]                	mov	al,[DSKCHRET]
 30027                                  
 30028 00004F72 3C03                    	cmp	al,"C"-"@" ; cmp al,3
 30029 00004F74 75F2                    	jnz	short RET36
 30030                                  
 30031 00004F76 C606[9403]04            	mov	byte [DSKSTCOM],DEVRD
 30032 00004F7B C606[9203]16            	mov	byte [DSKSTCALL],DRDWRHL
 30033 00004F80 880E[9F03]              	mov	[DSKCHRET],cl
 30034 00004F84 C706[9503]0000          	mov	word [DSKSTST],0
 30035 00004F8A C706[A403]0100          	mov	word [DSKSTCNT],1
 30036 00004F90 1F                      	pop	ds ; *
 30037                                  %endif
 30038                                  	
 30039 00004F91 E879F5                  	CALL	DEVIOCALL2              ; Eat the ^C
 30040                                  
 30041 00004F94 5E                              POP     SI
 30042 00004F95 1F                              POP     DS
 30043 00004F96 5B                              POP     BX                      ; Clean stack
 30044 00004F97 07                              POP     ES
 30045 00004F98 59                              POP     CX
 30046 00004F99 E9CF00                          JMP	CNTCHAND ; 10/08/2018
 30047                                  
 30048                                  	; 05/05/2019
 30049                                  NOSTOP:
 30050                                  	; MSDOS 6.0
 30051 00004F9C 3C10                    	CMP	AL,"P"-"@"
 30052 00004F9E 7509                    	JNZ	short check_next
 30053                                  				    	; SS override
 30054 00004FA0 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 30055 00004FA6 7405                    	JZ	short INCHKJ		; no
 30056                                  check_end:	; 24/09/2023
 30057 00004FA8 C3                      	retn
 30058                                  check_next:
 30059                                  	;IF	NOT TOGLPRN
 30060                                  	;CMP	AL,"N"-"@"
 30061                                  	;JZ	short INCHKJ
 30062                                  	;ENDIF
 30063                                  
 30064 00004FA9 3C03                    	CMP	AL,"C"-"@"
 30065                                  	; 24/09/2023
 30066                                  	;JZ	short INCHKJ
 30067                                  ;check_end:
 30068                                  	;retn
 30069 00004FAB 75FB                    	jnz	short check_end
 30070                                  
 30071                                  	; 24/09/2023
 30072                                  	; 08/09/2018
 30073                                  INCHKJ:	; 10/08/2018
 30074 00004FAD E9A500                  	jmp	INCHK
 30075                                  
 30076                                  	; MSDOS 3.3
 30077                                          ;CMP	AL,"P"-"@"  ; cmp al,16
 30078                                          ;JZ	short INCHKJ
 30079                                  
 30080                                  	; 15/04/2018
 30081                                          ;;IF	NOT TOGLPRN
 30082                                          ;CMP	AL,"N"-"@"
 30083                                          ;JZ	SHORT INCHKJ
 30084                                          ;;ENDIF
 30085                                  	
 30086                                  	;CMP	AL,"C"-"@"  ; cmp al,3
 30087                                          ;JZ	short INCHKJ
 30088                                  	;RETN
 30089                                  
 30090                                  ;	; 08/09/2018
 30091                                  ;INCHKJ:; 10/08/2018
 30092                                  ;	JMP	INCHK
 30093                                  
 30094                                  ;----------------------------------------------------------------------------
 30095                                  ;
 30096                                  ; Procedure Name : SpoolInt
 30097                                  ;
 30098                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 30099                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 30100                                  ; the middle of an INT 24.
 30101                                  ;
 30102                                  ;----------------------------------------------------------------------------
 30103                                  
 30104                                  SPOOLINT:
 30105 00004FB0 9C                      	PUSHF
 30106                                  	; 15/03/2018
 30107 00004FB1 36803E[5803]00          	CMP	BYTE [SS:IDLEINT],0	; SS override
 30108 00004FB7 7423                    	JZ	SHORT POPFRET
 30109 00004FB9 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0
 30110 00004FBF 751B                    	JNZ	SHORT POPFRET		; No spool ints in error mode
 30111                                  
 30112                                  	; 30/07/2018
 30113                                  
 30114                                  	; Note that we are going to allow an external program to issue system 
 30115                                  	; calls at this time. We MUST preserve IdleInt across this.
 30116                                  
 30117 00004FC1 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 30118                                  
 30119                                  	; 05/05/2019 - Retro DOS v4.0
 30120                                   
 30121                                  	; MSDOS 6.0
 30122 00004FC6 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30123 00004FCC 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 30124 00004FCE CD28                    	INT	int_spooler  ; int 28h	; N: Execute user int 28 handler
 30125 00004FD0 EB05                    	jmp	short spool_ret_addr
 30126                                  
 30127                                  do_low_int28:
 30128                                  	;call	far [ss:LowInt28Addr]
 30129 00004FD2 2EFF1E[2B4F]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 30130                                  
 30131                                  spool_ret_addr:
 30132                                  	;INT	int_spooler		; INT 28h
 30133                                  
 30134 00004FD7 368F06[5803]            	POP	WORD [SS:IDLEINT]
 30135                                  POPFRET:
 30136 00004FDC 9D                      	POPF
 30137                                  _RET18:  
 30138 00004FDD C3                      	RETN
 30139                                  
 30140                                  ; 05/05/2019 - Retro DOS v4.0
 30141                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 30142                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30143                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 30144                                  
 30145                                  ;----------------------------------------------------------------------------
 30146                                  ;
 30147                                  ; Procedure Name : STATCHK
 30148                                  ;
 30149                                  ;----------------------------------------------------------------------------
 30150                                  
 30151                                  STATCHK:
 30152 00004FDE E84EFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 30153                                                                          ; input redirection
 30154 00004FE1 53                              PUSH    BX
 30155 00004FE2 31DB                            XOR     BX,BX
 30156 00004FE4 E85EE5                          CALL	GET_IO_SFT
 30157 00004FE7 5B                              POP     BX
 30158 00004FE8 72F3                            JC      SHORT _RET18
 30159                                  
 30160 00004FEA B401                            MOV     AH,1
 30161 00004FEC E851F3                          CALL	IOFUNC
 30162 00004FEF 74BF                            JZ      SHORT SPOOLINT
 30163 00004FF1 3C13                            CMP     AL,'S'-'@'
 30164 00004FF3 75A7                            JNZ     SHORT NOSTOP
 30165                                  
 30166                                  	; 05/05/2019
 30167                                  	; MSDOS 6.0			; SS override
 30168 00004FF5 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 30169 00004FFB 75AB                    	JNZ	short check_end		; AN000; yes
 30170                                  
 30171 00004FFD 30E4                            XOR     AH,AH
 30172 00004FFF E83EF3                          CALL	IOFUNC                  ; Eat Cntrl-S
 30173 00005002 EB4A                            JMP     SHORT PAUSOSTRT
 30174                                  PRINTOFF:
 30175                                  PRINTON:
 30176 00005004 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 30177                                  
 30178                                  	; 30/07/2018 - Retro DOS v3.0
 30179 00005009 53                      	PUSH	BX
 30180 0000500A BB0400                  	MOV	BX,4
 30181 0000500D E835E5                  	call	GET_IO_SFT
 30182 00005010 5B                      	POP	BX
 30183 00005011 72CA                    	jc	short _RET18
 30184 00005013 06                      	PUSH	ES
 30185 00005014 57                      	PUSH	DI
 30186 00005015 1E                      	PUSH	DS
 30187 00005016 07                      	POP	ES
 30188 00005017 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 30189                                  	;test	word [es:di+5],800h
 30190                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 30191                                  	; 05/05/2019
 30192 00005019 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 30193 0000501E 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 30194                                  
 30195                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 30196                                  					; See if allowed
 30197 00005020 50                      	push	ax
 30198 00005021 B82611                  	mov	ax,1126h
 30199 00005024 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30200                                  			; Return: CF set on error, AX = error code
 30201                                  			; STACK unchanged
 30202 00005026 58                      	pop	ax
 30203                                  
 30204 00005027 730F                    	JNC	short NORM_PR 		; Echo is OK
 30205                                  
 30206                                  					; SS override
 30207 00005029 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 30208                                  
 30209                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 30210                                  
 30211 0000502F 50                      	push    ax
 30212 00005030 B82411                  	mov     ax,1124h
 30213 00005033 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 30214                                  			; ES:DI -> SFT, SS = DOS CS
 30215 00005035 58                      	pop     ax
 30216                                  
 30217 00005036 EB10                    	JMP	SHORT RETP6
 30218                                  NORM_PR:
 30219 00005038 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 30220 0000503E 7505                    	JNZ	short PRNOPN
 30221 00005040 E851F4                  	call	DEV_CLOSE_SFT
 30222 00005043 EB03                    	JMP	SHORT RETP6
 30223                                  PRNOPN:
 30224 00005045 E844F4                  	call	DEV_OPEN_SFT
 30225                                  RETP6:
 30226 00005048 5F                      	POP	DI
 30227 00005049 07                      	POP	ES
 30228                                  STATCHK_RETN:
 30229 0000504A C3                              RETN
 30230                                  PAUSOLP:
 30231 0000504B E862FF                          CALL    SPOOLINT
 30232                                  PAUSOSTRT:
 30233 0000504E B401                            MOV     AH,1
 30234 00005050 E8EDF2                          CALL	IOFUNC
 30235 00005053 74F6                            JZ      SHORT PAUSOLP
 30236                                  INCHK:
 30237 00005055 53                              PUSH    BX
 30238 00005056 31DB                            XOR     BX,BX
 30239 00005058 E8EAE4                          CALL	GET_IO_SFT
 30240 0000505B 5B                              POP     BX
 30241 0000505C 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 30242 0000505E 30E4                            XOR     AH,AH
 30243 00005060 E8DDF2                          CALL	IOFUNC
 30244                                  	; 30/07/2018
 30245                                  	; MSDOS 3.3
 30246                                          ;CMP	AL,'P'-'@' ;cmp al,16
 30247                                          ;JNZ	SHORT NOPRINT
 30248                                  
 30249                                  	;cmp	byte [SS:SCAN_FLAG],0
 30250                                  	;JZ	SHORT PRINTON	
 30251                                  	;mov	byte [ss:SCAN_FLAG],0
 30252                                  
 30253                                  	; 05/05/2019
 30254                                  	; MSDOS 6.0
 30255 00005063 3C10                    	CMP	AL,"P"-"@"
 30256                                  	;;;;  7/14/86	ALT_Q key fix
 30257 00005065 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 30258                                  ;NOPRINT:	
 30259                                  	;IF	NOT TOGLPRN
 30260                                  	;CMP	AL,"N"-"@"
 30261                                  	;JZ	short PRINTOFF
 30262                                  	;ENDIF
 30263 00005067 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 30264                                  	;retnz
 30265 00005069 75DF                    	jnz	short STATCHK_RETN
 30266                                  
 30267                                  	; !! NOTE: FALL THROUGH !!
 30268                                  
 30269                                  ;---------------------------------------------------------------------------
 30270                                  ;
 30271                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 30272                                  ;
 30273                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 30274                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 30275                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 30276                                  ; processing to continue; 2) the original interrupt return address to the code
 30277                                  ; that performed the function call in the first place. If the user CTRL-C
 30278                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 30279                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 30280                                  ; is simulated.
 30281                                  ;
 30282                                  ;---------------------------------------------------------------------------
 30283                                  
 30284                                  CNTCHAND:
 30285                                  	; MSDOS 6.0			; SS override
 30286                                  					; AN002; from RAWOUT
 30287                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 30288                                  	;JNZ	short around_deadlock 	; AN002;
 30289                                  
 30290                                  	; 05/05/2019 - Retro DOS v4.0
 30291                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 30292 0000506B 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 30293 00005071 7508                    	JNZ	short around_deadlock 	; AN002;
 30294                                  
 30295 00005073 B003                            MOV     AL,3			; Display "^C"
 30296 00005075 E853C6                          CALL	BUFOUT
 30297 00005078 E8F1C4                          CALL	CRLF
 30298                                  around_deadlock:
 30299 0000507B 16                              PUSH    SS
 30300 0000507C 1F                              POP     DS
 30301 0000507D 803E[5703]00                    CMP     BYTE [CONSWAP],0
 30302 00005082 7403                            JZ      SHORT NOSWAP
 30303 00005084 E851E1                          CALL	SWAPBACK
 30304                                  NOSWAP:
 30305 00005087 FA                      	CLI				; Prepare to play with stack
 30306 00005088 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 30307 0000508C 8B26[8405]              	MOV	SP,[USER_SP]
 30308 00005090 E8BCB3                          CALL	restore_world       ; User registers now restored
 30309                                  
 30310                                  	; 30/07/2018 - Retro DOS v3.0 
 30311                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 30312                                          ; 14/03/2018 - Retro DOS v2.0
 30313                                  	;MOV	BYTE [CS:INDOS],0	
 30314                                          ;MOV	BYTE [CS:ERRORMODE],0
 30315                                          ;MOV	[CS:ConC_Spsave],SP
 30316                                  	;clc	;30/07/2018
 30317                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 30318                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 30319                                  			; Return: return via RETF 2 with CF set
 30320                                  			; DOS will abort program with errorlevel 0
 30321                                  			; else
 30322                                  			; interrupted DOS call continues
 30323                                  
 30324                                  	; 05/05/2019 - Retro DOS v4.0
 30325                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 30326                                  
 30327                                  	; CS was used to address these variables. We have to use DOSDATA
 30328                                  	
 30329 00005093 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 30330                                  			; (pop es, after 'call restore_world')	
 30331 00005094 1E                      	push	ds
 30332                                  	;getdseg <ds>			; ds -> dosdata
 30333 00005095 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30334 0000509A C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 30335 0000509F C606[2003]00            	mov	byte [ERRORMODE],0
 30336 000050A4 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 30337                                  	; User SP has changed because of push. Adjust for it
 30338 000050A8 8306[3203]02            	add	word [ConC_Spsave],2
 30339                                  
 30340 000050AD 803E[1112]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 30341 000050B2 1F                       	pop	ds	; restore ds
 30342 000050B3 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 30343 000050B5 F8                      	CLC				
 30344 000050B6 CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 30345 000050B8 EB06                    	jmp	short ctrlc_ret_addr
 30346                                  
 30347                                  	; 05/05/2019
 30348                                  do_low_int23:
 30349 000050BA F8                      	clc
 30350 000050BB 2EFF1E[234F]            	call	far [cs:LowInt23Addr]	
 30351                                  
 30352                                  	; 30/07/2018 
 30353                                  
 30354                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 30355                                  
 30356                                  ; The user has returned to us. The circumstances we allow are:
 30357                                  ;
 30358                                  ;   IRET	We retry the operation by redispatching the system call
 30359                                  ;   CLC/RETF	POP the stack and retry
 30360                                  ;   ... 	Exit the current process with ^C exit
 30361                                  ;
 30362                                  ; User's may RETURN to us and leave interrupts on. 
 30363                                  ; Turn 'em off just to be sure
 30364                                  
 30365                                  ctrlc_ret_addr: ; 05/05/2019
 30366                                  
 30367 000050C0 FA                      	CLI
 30368                                  
 30369                                  	; MSDOS 3.3 
 30370                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 30371                                  	;PUSHF				; and the flags (maybe new call)
 30372                                  	;POP	AX
 30373                                  
 30374                                  	; 05/05/2019
 30375                                  	; MSDOS 6.0
 30376                                  
 30377                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 30378                                  
 30379 000050C1 50                      	push	ax
 30380 000050C2 8CD8                    	mov	ax,ds
 30381                                  	;getdseg <ds>			; ds -> dosdata
 30382 000050C4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 30383 000050C9 A3[0A0D]                	mov	[TEMPSEG],ax
 30384 000050CC 58                      	pop	ax
 30385 000050CD A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 30386 000050D0 9C                      	pushf				; and the flags (maybe new call)
 30387 000050D1 58                      	pop	ax
 30388                                  
 30389                                  ; See if the input stack is identical to the output stack
 30390                                  
 30391                                  	; MSDOS 3.3
 30392                                  	;CMP	SP,[CS:ConC_Spsave]
 30393                                  	;JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30394                                  
 30395                                  	; MSDOS 6.0
 30396 000050D2 3B26[3203]              	CMP	SP,[ConC_Spsave]
 30397 000050D6 750A                    	JNZ	SHORT ctrlc_try_new	; current SP not the same as saved SP
 30398                                  
 30399                                  ; Repeat the operation by redispatching the system call.
 30400                                  
 30401                                  ctrlc_repeat:
 30402                                  	; MSDOS 3.3
 30403                                  	;MOV	AX,[CS:USER_IN_AX]
 30404                                  	; 05/05/2019
 30405                                  	; MSDOS 6.0
 30406 000050D8 A1[3A03]                	mov	ax,[USER_IN_AX]
 30407 000050DB 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 30408                                  	; MSDOS 3.3 & MSDOS 6.0 
 30409                                  	;transfer COMMAND
 30410                                  COMMANDJ:
 30411 000050DF E925B2                  	JMP	COMMAND
 30412                                  
 30413                                  ; The current SP is NOT the same as the input SP. Presume that he 
 30414                                  ; RETF'd leaving some flags on the stack and examine the input
 30415                                  
 30416                                  ctrlc_try_new:
 30417                                  	; 29/02/2024
 30418                                  	;ADD	SP,2			; pop those flags
 30419                                  	;
 30420                                  	;;test	ax,1
 30421                                  	;TEST	AX,f_Carry		; did he return with carry?
 30422 000050E2 A801                    	test	al,f_Carry ; test al,1
 30423                                  	;
 30424                                  	; 29/02/2024
 30425 000050E4 58                      	pop	ax  ; (PCDOS 7.1 IBMDOS.COM)
 30426                                  	;
 30427 000050E5 74F1                    	JZ	short ctrlc_repeat	; no carry set, just retry
 30428                                  
 30429                                  	; MSDOS 6.0
 30430 000050E7 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 30431                                  
 30432                                  	; Well...  time to abort the user.  
 30433                                  	; Signal a ^C exit and use the EXIT system call..
 30434                                  
 30435                                  ctrlc_abort:
 30436                                  	; MSDOS 3.3
 30437                                          ;;MOV	AX,(EXIT SHL 8) + 0
 30438                                          ;MOV	AX,(EXIT*256) + 0 ; 4C00h
 30439                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 30440                                          ;transfer COMMAND	    ; give up by faking $EXIT
 30441                                  	;;JMP	SHORT COMMANDJ
 30442                                  	;JMP	COMMAND
 30443                                  
 30444                                  	; 05/05/2019 - Retro DOS v4.0
 30445                                  	; MSDOS 6.0
 30446 000050EB B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 30447 000050EE 1E                      	push	ds
 30448                                  	;getdseg <ds>			; ds -> dosdata
 30449 000050EF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 30450 000050F4 C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 30451 000050F9 1F                      	pop	ds
 30452                                  	;transfer COMMAND		; give up by faking $EXIT
 30453 000050FA EBE3                    	JMP	SHORT COMMANDJ
 30454                                  	;JMP	COMMAND
 30455                                  
 30456                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 30457                                  ;----------------------------------------------------------------------------
 30458                                  ;
 30459                                  ; Procedure Name : DIVOV
 30460                                  ;
 30461                                  ; Default handler for division overflow trap
 30462                                  ;
 30463                                  ;----------------------------------------------------------------------------
 30464                                  
 30465                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30466                                  DIVOV: 
 30467                                  	; 05/05/2019 - Retro DOS v4.0
 30468                                  	; 30/07/2018
 30469                                  	; 07/07/2018 - Retro DOS v3.0
 30470 000050FC BE[9C09]                	mov	si,DIVMES
 30471 000050FF 2E8B1E[AF09]            	mov	bx,[cs:DivMesLen]
 30472                                  	;mov	ax,cs
 30473                                  	;mov	ss,ax
 30474                                  	; 05/05/2019
 30475                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 30476 00005104 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 30477 00005109 BC[A007]                	mov     sp,AUXSTACK
 30478                                  	;call	RealDivOv ; MSDOS 3.3
 30479 0000510C E80200                  	call	_OUTMES ; MSDOS 6.0
 30480 0000510F EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 30481                                  
 30482                                  ; 30/07/2018
 30483                                  
 30484                                  ; MSDOS 6.0
 30485                                  ;---------------------------------------------------------------------------
 30486                                  ;
 30487                                  ; Procedure Name : OutMes
 30488                                  ;
 30489                                  ;
 30490                                  ; OutMes: perform message output
 30491                                  ; Inputs:   SS:SI points to message
 30492                                  ;	    BX has message length
 30493                                  ; Outputs:  message to BCON
 30494                                  ;
 30495                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30496                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30497                                  ;NB. This procedure is called only from DIVOV. -SR
 30498                                  ;
 30499                                  ;---------------------------------------------------------------------------
 30500                                  
 30501                                  ;MSDOS 3.3
 30502                                  ;---------------------------------------------------------------------------
 30503                                  ; RealDivOv: perform actual divide overflow stuff.
 30504                                  ; Inputs:   none
 30505                                  ; Outputs:  message to BCON
 30506                                  ;---------------------------------------------------------------------------
 30507                                  
 30508                                  	; 05/05/2019 - Retro DOS v4.0
 30509                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 30510                                  
 30511                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30512                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 30513                                  
 30514                                  ;---------------------------------------------------------------------------
 30515                                  ;
 30516                                  ; Procedure Name : OutMes
 30517                                  ;
 30518                                  ; OutMes: perform message output
 30519                                  ; Inputs:   SS:SI points to message
 30520                                  ;	    BX has message length
 30521                                  ; Outputs:  message to BCON
 30522                                  ;
 30523                                  ;Actually, cs:si points to the message now. The segment address is filled in
 30524                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 30525                                  ;NB. This procedure is called only from DIVOV. -SR
 30526                                  ;
 30527                                  ;---------------------------------------------------------------------------
 30528                                  
 30529                                  	; 30/07/2018
 30530                                  	; MSDOS 6.0
 30531                                  _OUTMES:
 30532                                  	; MSDOS 3.3
 30533                                  ;RealDivOv:
 30534                                  	; 07/07/2018 - Retro DOS v3.0
 30535                                          ;Context ES
 30536 00005111 16                      	push	ss ; 05/05/2019
 30537                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 30538 00005112 07                      	POP	ES
 30539                                          ;Context DS
 30540 00005113 16                      	push	ss ; 05/05/2019	
 30541                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 30542 00005114 1F                      	POP	DS
 30543 00005115 C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 30544 0000511A C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 30545 0000511F C706[9503]0000                  MOV     WORD [DSKSTST],0
 30546                                  	; BX = [DivMesLen] = 19
 30547 00005125 891E[A403]                      MOV     [DSKSTCNT],BX
 30548 00005129 BB[9203]                        MOV     BX,DSKSTCALL
 30549 0000512C 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 30550                                  	; 08/09/2018
 30551                                  	;mov	[DEVIOBUF_PTR],si
 30552                                  	; MSDOS 6.0
 30553                                  					; CS is used for string, fill in 
 30554                                  					; segment address
 30555                                  	;mov	[DOSSEG_INIT],cs ; 29/02/2024 
 30556 00005130 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 30557                                  
 30558 00005134 C536[3200]                      LDS     SI,[BCON]
 30559 00005138 E8D2F3                          CALL	DEVIOCALL2
 30560                                  
 30561                                  	;; 14/03/2018
 30562                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 30563                                  	;; 08/09/2018
 30564                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 30565                                          ;MOV	WORD [CS:DSKSTCNT],1
 30566                                          
 30567                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30568                                  
 30569                                  	; ES still points to DOSDATA. ES is
 30570                                  					; not destroyed by deviocall2. So use
 30571                                  					; ES override.
 30572                                  
 30573 0000513B 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 30574 00005142 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 30575                                  
 30576 00005149 C3                      	RETN
 30577                                  
 30578                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 30579                                  ;---------------------------------------------------------------------------
 30580                                  ;
 30581                                  ; Procedure Name : CHARHARD
 30582                                  ;
 30583                                  ;
 30584                                  ; Character device error handler
 30585                                  ; Same function as HARDERR
 30586                                  ;
 30587                                  ;---------------------------------------------------------------------------
 30588                                  
 30589                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30590                                  CHARHARD:
 30591                                  	; 05/05/2019 - Retro DOS v4.0
 30592                                  	; 30/07/2018
 30593                                  	; 08/07/2018 - Retro DOS v3.0
 30594                                  
 30595                                  	; MSDOS 6.0
 30596                                  		   			; M024 - start
 30597 0000514A 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 30598                                  	;jne	short @f		; Y: allow fail
 30599 00005150 750B                    	jne	short chard1
 30600                                  
 30601 00005152 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 30602                                  
 30603 00005155 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 30604 0000515B 7503                    	jnz	short ctrlp		; Y: 
 30605                                  ;@@:
 30606                                  chard1:					; M024 - end
 30607                                  	; MSDOS 6.0 & MSDOS 3.3
 30608                                  
 30609                                  ; Character device error handler
 30610                                  ; Same function as HARDERR
 30611                                  
 30612                                  	;or	ah,38h
 30613 0000515D 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 30614                                  ctrlp:			; SS override for Allowed and EXITHOLD
 30615 00005160 368826[4B03]            	mov	[SS:ALLOWED],ah
 30616                                  
 30617                                  	; 15/03/2018
 30618 00005165 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 30619 0000516A 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 30620 0000516F 56                              PUSH    SI
 30621                                  	;and	di,0FFh
 30622 00005170 81E7FF00                        AND     DI,STECODE
 30623 00005174 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 30624 00005176 E86400                          CALL    FATALC
 30625 00005179 5E                              POP     SI
 30626                                  	;return
 30627 0000517A C3                              RETN
 30628                                  
 30629                                  ;---------------------------------------------------------------------------
 30630                                  ;
 30631                                  ; Procedure Name : HardErr
 30632                                  ;
 30633                                  ; Hard disk error handler. Entry conditions:
 30634                                  ;	DS:BX = Original disk transfer address
 30635                                  ;	DX = Original logical sector number
 30636                                  ;	CX = Number of sectors to go (first one gave the error)
 30637                                  ;	AX = Hardware error code
 30638                                  ;	DI = Original sector transfer count	
 30639                                  ;	ES:BP = Base of drive parameters
 30640                                  ;	[READOP] = 0 for read, 1 for write
 30641                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 30642                                  ; Output:
 30643                                  ;	[FAILERR] will be set if user responded FAIL
 30644                                  ;
 30645                                  ;--------------------------------------------------------------------------
 30646                                  
 30647                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30648                                  HARDERR:
 30649                                  	; 05/05/2019 - Retro DOS v4.0
 30650                                  	; 30/07/2018
 30651                                  	; 08/07/2018 - Retro DOS v3.0
 30652 0000517B 97                      	XCHG    AX,DI			; Error code in DI, count in AX
 30653                                  	;and	di,0FFh
 30654 0000517C 81E7FF00                	AND	DI,STECODE		; And off status bits
 30655                                  	;CMP	DI,WRECODE		; Write Protect Error?
 30656                                  	;cmp	di,0
 30657 00005180 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 30658 00005183 750A                    	JNZ	short NOSETWRPERR
 30659 00005185 50                      	PUSH    AX
 30660                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30661                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30662                                  	;;MOV	AL,[ES:BP+0]
 30663                                  	; 15/12/2022
 30664 00005186 268A4600                	mov	al,[ES:BP]
 30665                                  		; 15/03/2018
 30666 0000518A 36A2[2203]              	MOV	[SS:WPERR],AL		; Flag drive with WP error
 30667 0000518E 58                      	POP	AX
 30668                                  NOSETWRPERR:
 30669 0000518F 29C8                    	SUB	AX,CX		  ; Number of sectors successfully transferred
 30670 00005191 01C2                    	ADD	DX,AX		  ; First sector number to retry
 30671 00005193 52                      	PUSH    DX
 30672                                  	; 08/07/2018
 30673                                  	;MUL	word [ES:BP+2] 		; Number of bytes transferred
 30674 00005194 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 30675 00005198 5A                      	POP	DX
 30676 00005199 01C3                    	ADD	BX,AX			; First address for retry
 30677 0000519B 30E4                    	XOR	AH,AH			; Flag disk section in error
 30678                                  	;CMP	DX,[ES:BP+6] 		; In reserved area?
 30679 0000519D 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 30680 000051A1 721A                    	JB	SHORT ERRINT
 30681 000051A3 FEC4                    	INC	AH			; Flag for FAT
 30682                                  	;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 30683                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019
 30684 000051A5 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 30685 000051A9 7308                    	JAE	short TESTDIR		; No
 30686                                  		; Err in FAT must force recomp of freespace
 30687                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 30688                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 30689 000051AB 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 30690 000051B1 EB0A                    	JMP	SHORT ERRINT
 30691                                  TESTDIR:
 30692 000051B3 FEC4                    	INC	AH
 30693                                  	;CMP	DX,[ES:BP+0BH]		; In directory?
 30694 000051B5 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR]
 30695 000051B9 7202                    	JB	SHORT ERRINT
 30696 000051BB FEC4                    	INC	AH			; Must be in data area
 30697                                  ERRINT:
 30698 000051BD D0E4                    	SHL	AH,1			; Make room for read/write bit
 30699 000051BF 360A26[7505]            	OR	AH,[SS:READOP] ; 15/03/2018
 30700                                  
 30701                                  	; 15/08/2018
 30702                                  					; SS override for allowed and EXITHOLD
 30703 000051C4 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 30704                                  
 30705                                  	;entry   FATAL
 30706                                  FATAL:
 30707                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30708                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 30709                                  	;;MOV	AL,[ES:BP+0]		; Get drive number
 30710                                  	; 15/12/2022
 30711 000051C9 268A4600                	MOV	AL,[ES:BP]
 30712                                  
 30713                                  	;entry   FATAL1
 30714                                  FATAL1:  
 30715                                  	; 15/03/2018	
 30716 000051CD 368C06[8205]            	MOV	[SS:EXITHOLD+2],ES
 30717 000051D2 36892E[8005]            	MOV	[SS:EXITHOLD],BP	; The only things we preserve
 30718                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 30719                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 30720 000051D7 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 30721 000051DB 8CC5                    	MOV	BP,ES		  ; BP:SI points to the device involved
 30722                                  
 30723                                  	; DI has the INT-24-style extended error. We now map the error code
 30724                                  	; for this into the normalized get extended error set by using the
 30725                                  	; ErrMap24 table as a translate table. Note that we translate ONLY
 30726                                  	; the device returned codes and leave all others beyond the look up
 30727                                  	; table alone.
 30728                                  
 30729                                  	; 08/07/2018 - Retro DOS v3.0
 30730                                  FATALC:
 30731 000051DD E89301                  	call	SET_I24_EXTENDED_ERROR
 30732                                  	;cmp	di,0Ch
 30733 000051E0 83FF0C                  	CMP	DI,error_I24_gen_failure
 30734 000051E3 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 30735 000051E5 BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 30736                                  					;  Only come via GetExtendedError
 30737                                  ;** ----------------------------------------------------------------
 30738                                  ;
 30739                                  ; Entry point used by REDIRector on Network I 24 errors.
 30740                                  ;
 30741                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 30742                                  ;
 30743                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 30744                                  ;	EXITHOLD set for restore of ES:BP.
 30745                                  ; ------------------------------------------------------------------
 30746                                  	;entry	NET_I24_ENTRY
 30747                                  NET_I24_ENTRY:
 30748                                  GOT_RIGHT_CODE:
 30749 000051E8 36803E[2003]00          	CMP	BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 30750 000051EE 7404                    	JZ	SHORT NoSetFail
 30751 000051F0 B003                    	MOV	AL,3
 30752 000051F2 EB6A                    	JMP	short FailRet
 30753                                  NoSetFail:
 30754 000051F4 368926[8805]            	MOV	[SS:CONTSTK],SP		; SS override
 30755 000051F9 16                      	PUSH	SS
 30756 000051FA 07                      	POP	ES
 30757                                      
 30758                                  	; Wango!!! We may need to free some user state info... In 
 30759                                  	; particular, we may have locked down a JFN for a user and he may
 30760                                  	; NEVER return to us. Thus,we need to free it here and then
 30761                                  	; reallocate it when we come back.
 30762                                  
 30763 000051FB 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 30764 00005201 740C                    	JZ	short _NoFree
 30765 00005203 1E                      	push	ds
 30766 00005204 56                      	push	si
 30767 00005205 36C536[AE05]            	LDS	SI,[SS:PJFN]
 30768 0000520A C604FF                  	MOV	BYTE [SI],0FFH
 30769 0000520D 5E                      	pop	si
 30770 0000520E 1F                      	pop	ds
 30771                                  
 30772                                  _NoFree:
 30773 0000520F FA                      	CLI
 30774                                  					; Prepare to play with stack
 30775 00005210 36FE06[2003]            	INC	BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 30776 00005215 36FE0E[2103]            	DEC	BYTE [SS:INDOS]		; INT 24 handler might not return
 30777                                  
 30778                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 30779                                  
 30780                                  	;; Extended Open hooks
 30781                                  					; AN000;IFS.I24 error disabled
 30782                                  	;test	byte [ss:EXTOPEN_ON],2
 30783 0000521A 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF
 30784 00005220 7404                    	JZ	short i24yes		; AN000;IFS.no
 30785                                  faili24:				; AN000;
 30786 00005222 B003                    	MOV	AL,3			; AN000;IFS.fake fail
 30787 00005224 EB27                    	JMP	short passi24 		; AN000;IFS.exit
 30788                                  i24yes: 				; AN000;
 30789                                  	;; Extended Open hooks
 30790                                  
 30791 00005226 368E16[8605]            	MOV	SS,[SS:USER_SS]
 30792 0000522B 268B26[8405]            	MOV	SP,[ES:USER_SP]	; User stack pointer restored
 30793                                  
 30794                                  	;;int	24h	
 30795                                  	;IN	int_fatal_abort		; Fatal error interrupt vector,
 30796                                  					; must preserve ES
 30797                                  	; 05/05/2019
 30798 00005230 26803E[1112]00          	cmp	byte [es:DosHasHMA],0	; Q: is dos running in HMA (M021)
 30799 00005236 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 30800 00005238 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 30801                                  					; must preserve ES
 30802 0000523A EB05                    	jmp	short criterr_ret_addr
 30803                                  
 30804                                  do_low_int24:
 30805                                  	; 05/05/2019
 30806                                  	; MSDOS 6.0
 30807 0000523C 2EFF1E[274F]            	call    far [cs:LowInt24Addr]
 30808                                  criterr_ret_addr:
 30809 00005241 268926[8405]            	MOV	[ES:USER_SP],SP	; restore our stack
 30810 00005246 268C16[8605]            	MOV	[ES:USER_SS],SS
 30811                                  	;MOV	BP,ES
 30812                                  	;MOV	SS,BP
 30813                                  	; 30/06/2024
 30814 0000524B 06                      	push	es
 30815 0000524C 17                      	pop	ss
 30816                                  passi24:
 30817 0000524D 368B26[8805]            	MOV	SP,[SS:CONTSTK]
 30818 00005252 36FE06[2103]            	INC	BYTE [SS:INDOS]		; Back in the DOS
 30819 00005257 36C606[2003]00          	MOV	BYTE [SS:ERRORMODE],0	; Back from INT 24
 30820 0000525D FB                      	STI
 30821                                  FailRet:
 30822 0000525E 36C42E[8005]            	LES	BP,[SS:EXITHOLD]
 30823                                  	
 30824                                  	; 08/07/2018
 30825                                  
 30826                                  	; Triage the user's reply.
 30827                                  
 30828 00005263 3C01                    	CMP	AL,1
 30829 00005265 723D                    	JB	short CheckIgnore	; 0 => ignore
 30830 00005267 7445                    	JZ	short CheckRetry	; 1 => retry
 30831 00005269 3C03                    	CMP	AL,3			; 3 => fail
 30832 0000526B 7549                    	JNZ	short DoAbort 		; 2, invalid => abort
 30833                                  
 30834                                  	; The reply was fail. See if we are allowed to fail.
 30835                                  
 30836                                  					; SS override for ALLOWED, EXTOPEN_ON,
 30837                                  					; ALLOWED, FAILERR, WPERR, SFN, pJFN
 30838                                  	;test	byte [ss:ALLOWED],8
 30839 0000526D 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 30840 00005273 7441                    	jz	short DoAbort		; No, do abort
 30841                                  DoFail:
 30842 00005275 B003                    	MOV	AL,3			; just in case...
 30843                                  					; AN000;EO. I24 error disabled
 30844                                  	; 05/05/2019
 30845                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 30846 00005277 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 30847 0000527D 7505                    	jnz	short CleanUp 		; AN000;EO. no
 30848                                  	
 30849 0000527F 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 30850                                  CleanUp:
 30851 00005284 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 30852 0000528A 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 30853                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30854                                  	;jnz	short CleanUp2
 30855                                  	;retn
 30856                                  	; 17/12/2022
 30857 00005290 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 30858                                  CleanUp2:
 30859 00005292 1E                      	push	ds
 30860 00005293 56                      	push	si
 30861 00005294 50                      	push	ax
 30862 00005295 36A1[AA05]              	MOV	AX,[ss:SFN]
 30863 00005299 36C536[AE05]            	LDS	SI,[ss:PJFN]
 30864 0000529E 8804                    	MOV	[SI],AL
 30865 000052A0 58                      	pop	ax
 30866 000052A1 5E                      	pop	si
 30867 000052A2 1F                      	pop	ds
 30868                                  Cleanup_retn:
 30869 000052A3 C3                      	retn
 30870                                  
 30871                                  	; The reply was IGNORE. See if we are allowed to ignore.
 30872                                  
 30873                                  CheckIgnore:
 30874                                  	;test	byte [ss:ALLOWED],20h
 30875 000052A4 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 30876                                  CheckRI:	; 29/02/2024
 30877 000052AA 74C9                    	jz	short DoFail			; No, do fail
 30878 000052AC EBD6                    	jmp	short CleanUp
 30879                                  
 30880                                  	; The reply was RETRY. See if we are allowed to retry.
 30881                                  
 30882                                  CheckRetry:
 30883                                  	;test	byte [ss:ALLOWED],10h
 30884 000052AE 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 30885                                  	;jz	short DoFail			; No, do fail
 30886                                  	;JMP	short CleanUp
 30887                                  	; 29/02/2024 (PCDOS 7.1 IBMDOS.COM)
 30888 000052B4 EBF4                    	jmp	short CheckRI
 30889                                  
 30890                                  	; The reply was ABORT.
 30891                                  DoAbort:
 30892 000052B6 16                      	push	ss
 30893 000052B7 1F                      	pop	ds
 30894                                  
 30895 000052B8 803E[5703]00            	CMP	byte [CONSWAP],0
 30896 000052BD 7403                    	JZ	short NOSWAP2
 30897 000052BF E816DF                  	call	SWAPBACK
 30898                                  NOSWAP2:
 30899                                  	; See if we are to truly abort. If we are in the process of aborting, 
 30900                                  	; turn this abort into a fail.
 30901                                  
 30902                                  	;test	[fAborting],0FFh
 30903                                  	;jnz	short DoFail
 30904                                  
 30905 000052C2 803E[5903]00            	cmp	byte [fAborting],0
 30906 000052C7 75AC                    	JNZ	short DoFail
 30907                                  
 30908                                  	; Set return code
 30909                                  
 30910 000052C9 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 30911 000052CE 30C0                    	XOR	AL,AL
 30912                                  
 30913                                  	; we are truly aborting the process. Go restore information from 
 30914                                  	; the PDB as necessary.
 30915                                  
 30916 000052D0 E97B0D                  	jmp	exit_inner
 30917                                  
 30918                                  ;** --------------------------------------------------------------------------
 30919                                  ;
 30920                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 30921                                  ; different, then an old-style return is performed. If they are the same,
 30922                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 30923                                  ; the source of the terminate addresses.
 30924                                  ;
 30925                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 30926                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 30927                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 30928                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 30929                                  ; flag that will indicate that if any abort code is seen, we just continue the
 30930                                  ; operation. In essence, we dis-allow the abort response.
 30931                                  ;
 30932                                  ; output:   none.
 30933                                  ; ----------------------------------------------------------------------------
 30934                                  
 30935                                  	;entry	reset_environment
 30936                                  	
 30937                                  reset_environment:
 30938                                  	; 30/07/2018 - Retro DOS v3.0
 30939                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 30940                                  
 30941                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 30942                                  
 30943 000052D3 1E                      	PUSH	DS			; save PDB of process
 30944                                  
 30945                                  	; There are no critical sections in force. Although we may enter
 30946                                  	; here with critical sections locked down, they are no longer 
 30947                                  	; relevant. We may safely free all allocated resources.
 30948                                  
 30949 000052D4 B482                    	MOV	AH,82h
 30950                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 30951                                  	;int	2Ah 	
 30952 000052D6 CD2A                    	INT	int_IBM
 30953                                  
 30954                                  					; SS override
 30955 000052D8 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 30956                                  
 30957                                  					; DOS 4.00 doesn't need it
 30958                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 30959                                  					; Allow REDIR to clear some stuff
 30960                                  					; On process exit.
 30961 000052DE B82211                  	mov	ax, 1122h
 30962 000052E1 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 30963                                  			; SS = DOS CS
 30964                                  	;mov	al,22h	
 30965 000052E3 B022                    	MOV	AL,int_terminate
 30966 000052E5 E88FBB                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 30967                                  
 30968 000052E8 59                      	POP	CX			; get ThisPDB
 30969 000052E9 06                      	push	es
 30970 000052EA 53                      	push	bx			; save return address
 30971                                  
 30972 000052EB 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 30973 000052F0 8EDB                    	MOV	DS,BX
 30974 000052F2 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 30975                                  
 30976                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 30977                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper
 30978                                  	; is not Exit_keep_process
 30979                                  	
 30980 000052F5 39D8                    	CMP	AX,BX
 30981 000052F7 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 30982 000052F9 39CB                    	CMP	BX,CX
 30983 000052FB 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 30984 000052FD 50                      	PUSH	AX			; save parent
 30985                                  
 30986                                  					; SS override
 30987                                  	;cmp	byte [SS:EXIT_TYPE],3
 30988 000052FE 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 30989 00005304 7406                    	JZ	short reset_to_parent 	; keeping this process
 30990                                  
 30991                                  	; We are truly removing a process. Free all allocation blocks
 30992                                  	; belonging to this PDB
 30993                                  
 30994                                  	;invoke	arena_free_process
 30995 00005306 E8840D                  	call	arena_free_process
 30996                                  
 30997                                  	; Kill off remainder of this process. Close file handles and signal
 30998                                  	; to relevant network folks that this process is dead. Remember that
 30999                                  	; CurrentPDB is STILL the current process!
 31000                                  
 31001                                  	;invoke	DOS_ABORT
 31002 00005309 E8F5DA                  	call	DOS_ABORT
 31003                                  
 31004                                  reset_to_parent:
 31005                                  					; SS override
 31006 0000530C 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 31007                                  
 31008                                  reset_return:				; come here for normal return
 31009                                  	;Context DS			; DS is used to refer to DOSDATA
 31010 00005311 16                      	push	ss
 31011 00005312 1F                      	pop	ds	
 31012                                  
 31013 00005313 B0FF                    	MOV	AL,-1
 31014                                  
 31015                                  	; make sure that everything is clean In this case ignore any errors,
 31016                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 31017                                  
 31018                                  	;EnterCrit critDisk
 31019 00005315 E8CFBF                  	call	ECritDisk
 31020                                  	;invoke	FLUSHBUF
 31021 00005318 E89E05                  	call	FLUSHBUF
 31022                                  	;LeaveCrit critDisk
 31023 0000531B E8E4BF                  	call	LCritDisk
 31024                                  
 31025                                  	; Decrement open ref. count if we had done a virtual open earlier.
 31026                                  
 31027 0000531E E897F7                  	call	CHECK_VIRT_OPEN
 31028 00005321 FA                      	CLI
 31029 00005322 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 31030 00005327 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 31031 0000532C C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 31032 00005331 8F06[8005]              	POP	WORD [EXITHOLD]
 31033 00005335 8F06[8205]              	POP	WORD [EXITHOLD+2]
 31034                                  
 31035                                  	; Snake into multitasking... Get stack from CurrentPDB person
 31036                                  
 31037 00005339 8E1E[3003]              	MOV	DS,[CurrentPDB]
 31038 0000533D 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 31039 00005341 8B262E00                	MOV	SP,[PDB.USER_STACK]
 31040                                  
 31041 00005345 E807B1                  	call	restore_world
 31042                                  
 31043                                  	; 05/05/2019
 31044 00005348 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 31045                                  
 31046                                  	; MSDOS 6.0
 31047 00005349 50                      	push	ax			; set up ds, but save ds in TEMPSEG
 31048 0000534A 8CD8                    	mov	ax,ds			; and not on stack.
 31049                                  	;getdseg <ds>			; ds -> dosdata
 31050 0000534C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 31051 00005351 A3[0A0D]                	mov	[TEMPSEG],ax
 31052 00005354 58                      	pop	ax
 31053                                  					; set up ds to DOSDATA
 31054                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 31055 00005355 A3[8405]                	mov	[USER_SP],ax
 31056                                  
 31057 00005358 58                      	POP	AX			; suck off CS:IP of interrupt...
 31058 00005359 58                      	POP	AX
 31059 0000535A 58                      	POP	AX
 31060                                  
 31061                                  ; M011 : BEGIN
 31062                                  
 31063                                  	; MSDOS 3.3
 31064                                  ;	MOV	AX,0F202h	; STI
 31065                                  
 31066                                  	; MSDOS 6.0
 31067 0000535B 9F                      	LAHF
 31068 0000535C 86E0                    	XCHG	AH,AL
 31069 0000535E 2402                    	AND	AL,2
 31070 00005360 B4F2                    	MOV	AH,0F2h
 31071                                  
 31072                                  ; M011 : END
 31073                                  
 31074                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31075 00005362 50                      	PUSH	AX
 31076                                   
 31077                                  	;PUSH	word [CS:EXITHOLD+2]
 31078                                  	;PUSH	word [CS:EXITHOLD]
 31079                                  	
 31080                                  	; MSDOS 6.0
 31081 00005363 FF36[8205]              	PUSH	word [EXITHOLD+2]
 31082 00005367 FF36[8005]              	PUSH	word [EXITHOLD]
 31083                                  
 31084                                  	;MOV	AX,[CS:USER_SP]
 31085                                  
 31086                                  	; MSDOS 6.0
 31087 0000536B A1[8405]                	MOV	AX,[USER_SP]
 31088 0000536E 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 31089                                  
 31090 00005372 CF                      	IRET			; Long return back to user terminate address
 31091                                  
 31092                                  ;---------------------------------------------------------------------------
 31093                                  ;
 31094                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 31095                                  ;
 31096                                  ; This routine handles extended error codes.
 31097                                  ; Input : DI = error code from device
 31098                                  ; Output: All EXTERR fields are set
 31099                                  ;
 31100                                  ;--------------------------------------------------------------------------
 31101                                  
 31102                                  SET_I24_EXTENDED_ERROR:
 31103 00005373 50                      	PUSH	AX
 31104                                  					; ErrMap24End is in DOSDATA
 31105 00005374 B8[BB0E]                	MOV	AX,ErrMap24End
 31106 00005377 2D[AB0E]                	SUB	AX,ErrMap24
 31107                                  					; Change to dosdata to access
 31108                                  					; ErrMap24 and EXTERR -SR
 31109                                  	; 05/05/2019 - Retro DOS v4.0
 31110                                  	
 31111                                  	; MSDOS 6.0
 31112 0000537A 1E                      	push	ds
 31113                                  	;getdseg <ds>			; ds ->dosdata
 31114 0000537B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 31115                                  
 31116                                  	; AX is the index of the first unavailable error. Do not translate
 31117                                  	; if greater or equal to AX.
 31118                                  
 31119 00005380 39C7                    	CMP	DI,AX
 31120 00005382 89F8                    	MOV	AX,DI
 31121 00005384 7306                    	JAE	short NoTrans
 31122                                  
 31123                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 31124 00005386 8A85[AB0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 31125 0000538A 30E4                    	XOR	AH,AH
 31126                                  NoTrans:
 31127                                  	;MOV	[CS:EXTERR],AX
 31128 0000538C A3[2403]                	mov	[EXTERR],AX
 31129 0000538F 1F                      	pop	ds
 31130                                  	;assume	ds:nothing
 31131 00005390 58                      	POP	AX
 31132                                  
 31133                                  	; Now Extended error is set correctly. Translate it to get correct
 31134                                  	; error locus class and recommended action.
 31135                                  
 31136 00005391 56                      	PUSH	SI
 31137                                  					; ERR_TABLE_24 is in DOSCODE 
 31138 00005392 BE[5B0E]                	MOV	SI,ERR_TABLE_24
 31139 00005395 E8E0B2                  	call	CAL_LK			; Set other extended error fields
 31140 00005398 5E                      	POP	SI
 31141 00005399 C3                      	retn
 31142                                  
 31143                                  ;============================================================================
 31144                                  ; FAT.ASM, MSDOS 6.0, 1991
 31145                                  ;============================================================================
 31146                                  ; 30/07/2018 - Retro DOS v3.0
 31147                                  ; 20/05/2019 - Retro DOS v4.0
 31148                                  
 31149                                  ;	TITLE	FAT - FAT maintenance routines
 31150                                  ;	NAME	FAT
 31151                                  
 31152                                  ;**	FAT.ASM
 31153                                  ;----------------------------------------------------------------------------
 31154                                  ;	Low level local device routines for performing disk change sequence,
 31155                                  ;	setting cluster validity, and manipulating the FAT
 31156                                  ;
 31157                                  ;	IsEof
 31158                                  ;	UNPACK
 31159                                  ;	PACK
 31160                                  ;	MAPCLUSTER
 31161                                  ;	FATREAD_SFT
 31162                                  ;	FATREAD_CDS
 31163                                  ;	FAT_operation
 31164                                  ;
 31165                                  ;	Revision history:
 31166                                  ;
 31167                                  ;	  AN000  version Jan. 1988
 31168                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 31169                                  ;
 31170                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 31171                                  ;	       from CL0FATENTRY rather than disk.
 31172                                  
 31173                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 31174                                  
 31175                                  ;Break <IsEOF - check the quantity in BX for EOF>
 31176                                  ;----------------------------------------------------------------------------
 31177                                  ;
 31178                                  ; Procedure Name : IsEOF
 31179                                  ;
 31180                                  ; IsEOF - check the fat value in BX for eof.
 31181                                  ;
 31182                                  ;   Inputs:	ES:BP point to DPB
 31183                                  ;		BX has fat value
 31184                                  ;   Outputs:	JAE eof
 31185                                  ;   Registers modified: none
 31186                                  ;
 31187                                  ;---------------------------------------------------------------------------
 31188                                  
 31189                                  IsEOF:
 31190                                  	;cmp	word [es:bp+0Dh],0FF6h
 31191 0000539A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 31192 000053A0 730B                    	JAE	short EOF16			; yes, check for eof there
 31193                                  
 31194                                  ;J.K. 8/27/86
 31195                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 31196                                  ;of any media that has "F0"(Other) as a MediaByte.
 31197                                  ;Hopely, this does not create any side effect for those who may use any value
 31198                                  ;other than "FF8-FFF" as an EOF for their own file.
 31199                                  
 31200 000053A2 81FBF00F                	cmp	bx,0FF0h
 31201 000053A6 7404                    	je	short IsEOF_other
 31202                                  
 31203 000053A8 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 31204                                  IsEOF_other:
 31205 000053AC C3                      	retn
 31206                                  EOF16:
 31207 000053AD 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 31208 000053B0 C3                      	retn
 31209                                  
 31210                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 31211                                  
 31212                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 31213                                  ;---------------------------------------------------------------------------
 31214                                  ;
 31215                                  ; Procedur Name : UNPACK
 31216                                  ;
 31217                                  ; Inputs:
 31218                                  ;	BX = Cluster number (may be full 16-bit quantity)
 31219                                  ;	ES:BP = Base of drive parameters
 31220                                  ; Outputs:
 31221                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 31222                                  ;	Zero set means DI=0 (free cluster)
 31223                                  ;	Carry set means error (currently user FAILed to I 24)
 31224                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 31225                                  ;
 31226                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 31227                                  ;
 31228                                  ;----------------------------------------------------------------------------
 31229                                  	
 31230                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31231                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 31232                                  
 31233                                  	; 20/05/2019 - Retro DOS v4.0
 31234                                  UNPACK:
 31235                                  	; MSDOS 6.0			; M014 - Start
 31236 000053B1 09DB                    	or	bx,bx			; Q: are we unpacking cluster 0
 31237 000053B3 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 31238 000053B5 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 31239 000053B9 09FF                    	or	di,di 			; return z if di=0
 31240 000053BB C3                      	retn				; done
 31241                                  up_cont:				; M014 - End
 31242                                  	; MSDOS 3.3 & MSDOS 6.0
 31243                                  	;cmp	bx,[es:bp+0Dh]
 31244 000053BC 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 31245 000053C0 7726                    	JA	short HURTFAT
 31246 000053C2 E8D500                  	CALL	MAPCLUSTER
 31247 000053C5 721E                    	jc	short _DoContext
 31248 000053C7 8B3D                    	MOV	DI,[DI]
 31249 000053C9 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 31250 000053CB 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 31251 000053CF 81FEF60F                	CMP	SI,4096-10
 31252 000053D3 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 31253 000053D5 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 31254 000053D7 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 31255                                  High12:
 31256 000053D9 D1EF                    	SHR	DI,1
 31257 000053DB D1EF                    	SHR	DI,1
 31258 000053DD D1EF                    	SHR	DI,1
 31259 000053DF D1EF                    	SHR	DI,1
 31260                                  Unpack12:
 31261 000053E1 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 31262                                  _DoContext:
 31263 000053E5 16                      	PUSH	SS
 31264 000053E6 1F                      	POP	DS
 31265 000053E7 C3                      	retn
 31266                                  HURTFAT:
 31267                                  	;;mov	word [es:bp+1Eh],0FFFFh
 31268                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31269 000053E8 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 31270 000053EE 50                      	PUSH	AX
 31271 000053EF B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 31272                                  
 31273                                  ;hkn; SS override
 31274 000053F1 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 31275                                  ;
 31276                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 31277                                  ;
 31278 000053F7 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 31279 000053FA E8CCFD                  	call	FATAL
 31280 000053FD 3C03                    	CMP	AL,3
 31281 000053FF F8                      	CLC
 31282 00005400 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 31283 00005402 F9                      	STC				; User said FAIL
 31284                                  OKU_RET:
 31285 00005403 58                      	POP	AX
 31286                                  hurtfat_retn:
 31287 00005404 C3                      	retn
 31288                                  
 31289                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 31290                                  
 31291                                  ;Break	<PACK -- PACK FAT ENTRIES>
 31292                                  ;----------------------------------------------------------------------------
 31293                                  ;
 31294                                  ; Procedure Name : PACK
 31295                                  ;
 31296                                  ; Inputs:
 31297                                  ;	BX = Cluster number
 31298                                  ;	DX = Data
 31299                                  ;	ES:BP = Pointer to drive DPB
 31300                                  ; Outputs:
 31301                                  ;	The data is stored in the FAT at the given cluster.
 31302                                  ;	SI,DX,DI all destroyed
 31303                                  ;	Carry set means error (currently user FAILed to I 24)
 31304                                  ;	No other registers affected
 31305                                  ;
 31306                                  ; NOTE: if BX = 0 then data in DX is stored in CL0FATENTRY.
 31307                                  ;
 31308                                  ;---------------------------------------------------------------------------
 31309                                  
 31310                                  	; 02/01/2024
 31311                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31312                                  	; 20/05/2019 - Retro DOS v4.0
 31313                                  PACK:
 31314                                  	; MSDOS 6.0			; M014 - start
 31315 00005405 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 31316 00005407 7505                    	jnz	short p_cont		; N: proceed with normal pack
 31317 00005409 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 31318 0000540D C3                      	retn				; done
 31319                                  p_cont:					; M014 - end
 31320                                  	; MSDOS 3.3 & MSDOS 6.0
 31321 0000540E E88900                  	CALL	MAPCLUSTER
 31322 00005411 72D2                    	JC	short _DoContext
 31323 00005413 8B35                    	MOV	SI,[DI]
 31324 00005415 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 31325 00005417 51                      	PUSH	CX			; move data to upper 12 bits
 31326 00005418 B104                    	MOV	CL,4
 31327 0000541A D3E2                    	SHL	DX,CL
 31328 0000541C 59                      	POP	CX
 31329 0000541D 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 31330 00005420 EB13                    	JMP	SHORT PACKIN
 31331                                  ALIGNED:
 31332                                  	;cmp	word [es:bp+0Dh],0FF6h
 31333 00005422 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 31334 00005428 7309                    	JAE	short Pack16		; MZ yes, go clobber original data
 31335 0000542A 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 31336                                  	;AND	DX,0FFFh		; MZ store only 12 bits
 31337                                  	; 01/07/2024
 31338 0000542E 80E60F                  	and	dh,0Fh
 31339 00005431 EB02                    	JMP	SHORT PACKIN		; MZ go store
 31340                                  Pack16:
 31341 00005433 31F6                    	XOR	SI,SI			; MZ no original data
 31342                                  PACKIN:
 31343 00005435 09D6                    	OR	SI,DX
 31344 00005437 8935                    	MOV	[DI],SI
 31345                                  
 31346                                  ;hkn; SS override
 31347 00005439 36C536[E205]            	LDS	SI,[SS:CURBUF]
 31348                                  	; MSDOS 6.0
 31349 0000543E F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31350                                  					;LB. if already dirty		  ;AN000;
 31351 00005442 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 31352                                  	; 10/06/2019
 31353 00005444 E88005                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 31354                                  	
 31355                                  	;or	byte [si+5],40h
 31356 00005447 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 31357                                  yesdirty11:				;LB.				;AN000;
 31358                                  ;hkn; SS override
 31359 0000544B 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 31360                                  ;hkn; SS is DOSDATA
 31361 00005451 16                      	push	ss
 31362 00005452 1F                      	pop	ds
 31363 00005453 74AF                    	jz	short hurtfat_retn	; Carry clear
 31364 00005455 50                      	PUSH	AX
 31365 00005456 53                      	PUSH	BX
 31366 00005457 51                      	PUSH	CX
 31367 00005458 A1[8E05]                	MOV	AX,[CLUSSAVE]
 31368 0000545B 8E1E[E405]              	MOV	DS,[CURBUF+2]
 31369                                  	;;add	si,16 ; MSDOS 3.3
 31370                                  	;add	si,20 ; MSDOS 6.0
 31371 0000545F 83C614                  	ADD	SI,BUFINSIZ
 31372 00005462 8824                    	MOV	[SI],AH
 31373                                  ;hkn; SS is DOSDATA
 31374                                  	;Context DS
 31375 00005464 16                      	push	ss
 31376 00005465 1F                      	pop	ds
 31377                                  	
 31378 00005466 50                      	PUSH	AX
 31379                                  	
 31380                                  	; MSDOS 6.0
 31381 00005467 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 31382 0000546B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 31383                                  
 31384                                  	; MSDOS 3.3 & MSDOS 6.0
 31385 0000546F 8B16[9005]              	MOV	DX,[CLUSSEC]
 31386                                  
 31387                                  	;MOV	SI,1	  ; *
 31388                                  	;XOR	AL,AL     ; *
 31389                                  	;call	GETBUFFRB ; *
 31390                                  	; 22/09/2023
 31391 00005473 E83803                  	call	GETBUFFRA ; *
 31392                                  
 31393 00005476 58                      	POP	AX
 31394 00005477 721B                    	JC	short POPP_RET
 31395 00005479 C53E[E205]              	LDS	DI,[CURBUF]
 31396                                  	
 31397                                  	; MSDOS 6.0
 31398 0000547D F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 31399                                  					;LB. if already dirty		  ;AN000;
 31400 00005481 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 31401 00005483 E84105                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 31402                                  	
 31403                                  	;or	byte [di+5],40h
 31404 00005486 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 31405                                  yesdirty12:
 31406                                  	;;add	di,16
 31407                                  	;add	di,20 ; MSDOS 6.0
 31408                                  	; 02/01/2024
 31409                                  	;ADD	DI,BUFINSIZ
 31410                                  	;DEC	DI
 31411 0000548A 83C713                  	add	di,BUFINSIZ-1 ; 19
 31412                                  
 31413                                  	;add	di,[es:bp+2]
 31414 0000548D 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 31415 00005491 8805                    	MOV	[DI],AL
 31416 00005493 F8                      	CLC
 31417                                  POPP_RET:
 31418 00005494 16                      	PUSH	SS
 31419 00005495 1F                      	POP	DS
 31420 00005496 59                      	POP	CX
 31421 00005497 5B                      	POP	BX
 31422 00005498 58                      	POP	AX
 31423 00005499 C3                      	retn
 31424                                  
 31425                                  ; 31/07/2018 - Retro DOS v3.0
 31426                                  
 31427                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 31428                                  ;---------------------------------------------------------------------------
 31429                                  ;
 31430                                  ; Procedure Name : MAPCLUSTER
 31431                                  ;
 31432                                  ; Inputs:
 31433                                  ;	ES:BP Points to DPB
 31434                                  ;	BX Is cluster number
 31435                                  ; Function:
 31436                                  ;	Get a pointer to the cluster
 31437                                  ; Outputs:
 31438                                  ;	DS:DI Points to contents of FAT for given cluster
 31439                                  ;	DS:SI Points to start of buffer
 31440                                  ;	Zero Not set if cluster data is in high 12 bits of word
 31441                                  ;	Zero set if cluster data is in low 12 or 16 bits
 31442                                  ;	Carry set if failed.
 31443                                  ; SI is destroyed.
 31444                                  ;
 31445                                  ;---------------------------------------------------------------------------
 31446                                  
 31447                                  	; 20/05/2019 - Retro DOS v4.0
 31448                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 31449                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31450                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 31451                                  
 31452                                  MAPCLUSTER:
 31453                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 31454 0000549A C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 31455                                  	;SAVE	<AX,BX,CX,DX>
 31456 0000549F 50                      	push	ax
 31457 000054A0 53                      	push	bx
 31458 000054A1 51                      	push	cx
 31459 000054A2 52                      	push	dx
 31460 000054A3 89D8                    	MOV	AX,BX			; AX = BX
 31461 000054A5 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 31462 000054AB 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 31463 000054AD D1E8                    	SHR	AX,1			; AX = BX/2
 31464                                  Map16:	
 31465                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 31466 000054AF 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 31467                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31468 000054B1 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 31469 000054B3 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 31470 000054B5 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 31471                                  
 31472                                  ;IF FastDiv
 31473                                  ;
 31474                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 31475                                  ; case and apply a really fast algorithm to get the desired results
 31476                                  ;
 31477                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 31478                                  ; Fast method takes 39+20*4=119
 31479                                  ;
 31480                                  ; This saves a bunch.
 31481                                  
 31482 000054B9 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 31483 000054BD 7510                    	jne	short _DoDiv		; 4  for no jump
 31484 000054BF 89C2                    	MOV	DX,AX			; 2  get set for remainder
 31485 000054C1 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 31486 000054C5 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 31487                                  	; MDOS 3.3
 31488                                  	;shr	al,1	
 31489                                  	; MDOS 6.0
 31490 000054C7 D1EF                    	shr	di,1			; 2
 31491 000054C9 D0D8                    	rcr	al,1			; 2
 31492                                  	; MDOS 3.3 (& MSDOS 6.0)
 31493 000054CB 30E4                    	xor	ah,ah			; 3
 31494 000054CD EB04                    	jmp	short DivDone		; 16
 31495                                  _DoDiv:
 31496                                  ;ENDIF
 31497                                  	; MSDOS 3.3
 31498                                  	;xor	dx,dx
 31499                                  	; MSDOS 6.0
 31500 000054CF 89FA                    	mov	dx,di			; 2
 31501                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31502 000054D1 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 31503                                  ;IF FastDiv
 31504                                  DivDone:
 31505                                  ;ENDIF
 31506                                  	;add	ax,[es:bp+6]
 31507 000054D3 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 31508 000054D7 49                      	DEC	CX			; CX is sector size - 1
 31509                                  	;SAVE	<AX,DX,CX>
 31510 000054D8 50                      	push	ax
 31511 000054D9 52                      	push	dx
 31512 000054DA 51                      	push	cx
 31513 000054DB 89C2                    	MOV	DX,AX
 31514                                  
 31515                                  	; MSDOS 6.0
 31516                                  	; 22/09/2023
 31517                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb  low sector #
 31518                                  	;
 31519                                  	; MDOS 3.3 (& MSDOS 6.0)
 31520                                  	;XOR	AL,AL	   ; *
 31521                                  	;MOV	SI,1	   ; *
 31522                                  	;;invoke GETBUFFRB ; *
 31523                                  	;call	GETBUFFRB  ; *
 31524                                  	; 22/09/2023
 31525 000054DD E8C802                  	call	GETBUFFRC  ; *!
 31526                                  
 31527                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 31528 000054E0 59                      	pop	cx
 31529 000054E1 58                      	pop	ax
 31530 000054E2 5A                      	pop	dx
 31531 000054E3 724C                    	JC	short MAP_POP
 31532                                  
 31533 000054E5 C536[E205]              	LDS	SI,[CURBUF]
 31534                                  	;;lea	di,[si+16]
 31535                                  	;lea	di,[si+20] ; MSDOS 6.0
 31536 000054E9 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31537 000054EC 01C7                    	ADD	DI,AX
 31538 000054EE 39C8                    	CMP	AX,CX
 31539 000054F0 752C                    	JNZ	short MAPRET
 31540 000054F2 8A05                    	MOV	AL,[DI]
 31541                                  	;Context DS		 	;hkn; SS is DOSDATA
 31542 000054F4 16                      	push	ss
 31543 000054F5 1F                      	pop	ds	
 31544 000054F6 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 31545 000054FA A2[8E05]                	MOV	[CLUSSAVE],AL
 31546 000054FD 8916[9005]              	MOV	[CLUSSEC],DX
 31547                                  	; MSDOS 6.0
 31548 00005501 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb	;AN000;
 31549 00005507 42                      	INC	DX
 31550                                  
 31551                                  	; 22/09/2023
 31552                                  	;MOV	word [HIGH_SECTOR],0 ; *! ;F.C. >32mb FAT sector <32mb ;AN000;
 31553                                  	;
 31554                                  	; MDOS 3.3 (& MSDOS 6.0)
 31555                                  	;XOR	AL,AL	   ; *
 31556                                  	;MOV	SI,1	   ; *
 31557                                  	;;invoke GETBUFFRB ; *
 31558                                  	;call	GETBUFFRB  ; *
 31559                                  	; 22/09/2023
 31560 00005508 E89D02                  	call	GETBUFFRC  ; *!
 31561 0000550B 7224                    	JC	short MAP_POP
 31562                                  
 31563 0000550D C536[E205]              	LDS	SI,[CURBUF]
 31564 00005511 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 31565 00005514 8A05                    	MOV	AL,[DI]
 31566                                  	;Context DS			;hkn; SS is DOSDATA
 31567 00005516 16                      	push	ss
 31568 00005517 1F                      	pop	ds
 31569 00005518 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 31570                                  
 31571                                  ;hkn; CLUSSAVE is in DOSDATA
 31572 0000551B BF[8E05]                	MOV	DI,CLUSSAVE
 31573                                  MAPRET:
 31574                                  	;RESTORE <DX,CX,BX>
 31575 0000551E 5A                      	pop	dx
 31576 0000551F 59                      	pop	cx
 31577 00005520 5B                      	pop	bx
 31578 00005521 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 31579 00005523 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 31580 00005529 7302                    	JAE	short MapSet		; MZ no, set flags
 31581 0000552B 89D8                    	MOV	AX,BX
 31582                                  MapSet:
 31583 0000552D A801                    	TEST	AL,1			; set zero flag if not on boundary
 31584                                  	;RESTORE <AX>
 31585 0000552F 58                      	pop	ax
 31586 00005530 C3                      	retn
 31587                                  
 31588                                  MAP_POP:
 31589                                  	;RESTORE <DX,CX,BX,AX>
 31590 00005531 5A                      	pop	dx
 31591 00005532 59                      	pop	cx
 31592 00005533 5B                      	pop	bx
 31593 00005534 58                      	pop	ax
 31594                                  fatread_sft_retn: ; 17/12/2022
 31595 00005535 C3                      	retn
 31596                                  
 31597                                  ; 20/05/2019 - Retro DOS v4.0
 31598                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 31599                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31600                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 31601                                  
 31602                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 31603                                  ;----------------------------------------------------------------------------
 31604                                  ;
 31605                                  ; Procedure Name : FATREAD_SFT
 31606                                  ;
 31607                                  ; Inputs:
 31608                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 31609                                  ;		giving a NET SFT will produce system crashing results).
 31610                                  ;	DS DOSDATA
 31611                                  ; Function:
 31612                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 31613                                  ;	if disk changed.
 31614                                  ;	In other respects, same as FATREAD_CDS.
 31615                                  ;	(note ES:DI destroyed!)
 31616                                  ; Outputs:
 31617                                  ;	Carry set if error (currently user FAILed to I 24)
 31618                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 31619                                  ;	as far as invalidating curdir_ID is concerned.
 31620                                  ;	Since getting a true disk changed on this call is a screw up
 31621                                  ;	anyway, that's the way it goes.
 31622                                  ;
 31623                                  ;---------------------------------------------------------------------------
 31624                                  
 31625                                  FATREAD_SFT:
 31626 00005536 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 31627                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31628                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31629                                  	; 15/12/2022
 31630 0000553A 268A4600                	mov	AL,[ES:BP]
 31631 0000553E A2[7605]                	MOV	[THISDRV],AL
 31632 00005541 E8E8B0                  	call	GOTDPB			;Set THISDPB
 31633                                  	;CALL	FAT_GOT_DPB
 31634                                  	; 17/12/2022
 31635 00005544 EB78                    	jmp	FAT_GOT_DPB
 31636                                  ;fatread_sft_retn:
 31637                                  	;retn
 31638                                  
 31639                                  ;----------------------------------------------------------------------------
 31640                                  ;
 31641                                  ; Procedure Name : FATREAD_CDS
 31642                                  ;
 31643                                  ; Inputs:
 31644                                  ;	DS:DOSDATA
 31645                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 31646                                  ;		giving a NET or NUL CDS will produce system crashing results).
 31647                                  ; Function:
 31648                                  ;	If disk may have been changed, media is determined and buffers are
 31649                                  ;	flagged invalid. If not, no action is taken.
 31650                                  ; Outputs:
 31651                                  ;	ES:BP = Drive parameter block
 31652                                  ;	THISDPB = ES:BP
 31653                                  ;	THISDRV set
 31654                                  ;	Carry set if error (currently user FAILed to I 24)
 31655                                  ; DS preserved , all other registers destroyed
 31656                                  ;
 31657                                  ;---------------------------------------------------------------------------
 31658                                  
 31659                                  	; 20/05/2019 - Retro DOS v4.0
 31660                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 31661                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31662                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 31663                                  
 31664                                  FATREAD_CDS:
 31665 00005546 06                      	PUSH	ES
 31666 00005547 57                      	PUSH	DI
 31667                                  	;les	bp,[es:di+45h]
 31668 00005548 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 31669                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31670                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 31671                                  	; 15/12/2022
 31672 0000554C 268A4600                	mov	AL,[ES:BP]
 31673 00005550 A2[7605]                	MOV	[THISDRV],AL
 31674 00005553 E8D6B0                  	call	GOTDPB			;Set THISDPB
 31675 00005556 E86500                  	CALL	FAT_GOT_DPB
 31676 00005559 5F                      	POP	DI			;Get back CDS pointer
 31677 0000555A 07                      	POP	ES
 31678 0000555B 72D8                    	jc	short fatread_sft_retn
 31679 0000555D 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 31680                                  
 31681                                  ;	Media changed. We now need to find all CDS structures which use this
 31682                                  ;	DPB and invalidate their ID pointers.
 31683                                  
 31684                                  MED_CHANGE:
 31685 0000555F 31C0                    	XOR	AX,AX
 31686 00005561 48                      	DEC	AX			; AX = -1
 31687 00005562 1E                      	PUSH	DS
 31688 00005563 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 31689 00005567 30ED                    	XOR	CH,CH			; CX is number of structures
 31690                                  	;lds	si,[es:di+45h]
 31691 00005569 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 31692                                  
 31693                                  ;hkn; SS override
 31694                                  
 31695                                  ;	Find all CDSs with this DevPtr
 31696                                  ;
 31697                                  ;	(ax) = -1
 31698                                  ;	(ds:si) = DevPtr
 31699                                  
 31700 0000556D 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 31701                                  frcd20: 
 31702                                  	;;test	word [es:di+43h],8000h
 31703                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 31704 00005572 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 31705 00005577 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 31706                                  
 31707                                  	; MSDOS 3.3
 31708                                  	;push	es
 31709                                  	;push	di
 31710                                  	;les	di,[es:di+45h]
 31711                                  	;;les	di,[ES:DI+curdir.devptr]
 31712                                  	;call	POINTCOMP
 31713                                  	;pop	di
 31714                                  	;pop	es
 31715                                  	;jnz	short frcd25
 31716                                  
 31717                                  	; MSDOS 6.0
 31718 00005579 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 31719 0000557D 7512                    	jne	short frcd25		; no match
 31720 0000557F 8CDB                    	mov	bx,ds
 31721 00005581 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 31722 00005585 750A                    	jne	short frcd25		; CDS not for this drive
 31723                                  
 31724                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31725                                  	;test	[es:di+49h],ax
 31726 00005587 26854549                	test	[ES:DI+curdir.ID],AX
 31727 0000558B 7404                    	JZ	short frcd25		; If root (0), leave root
 31728                                  	;mov	[es:di+49h],ax
 31729 0000558D 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 31730                                  frcd25:	
 31731                                  	;;add	di,81  ; MSDOS 3.3
 31732                                  	;add	di,88  ; MSDOS 6.0	 
 31733 00005591 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 31734 00005594 E2DC                    	LOOP	frcd20
 31735 00005596 1F                      	POP	DS
 31736                                  NO_CHANGE:
 31737 00005597 C42E[8A05]              	LES	BP,[THISDPB]
 31738 0000559B F8                      	CLC
 31739 0000559C C3                      	retn
 31740                                  
 31741                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 31742                                  ;----------------------------------------------------------------------------
 31743                                  ;
 31744                                  ; Procedure Name : FAT_operation
 31745                                  ;
 31746                                  ;----------------------------------------------------------------------------
 31747                                  
 31748                                  	; 03/01/2024
 31749                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31750                                  
 31751                                  FAT_operation:
 31752                                  	; 31/07/2018 - Retro DOS v3.0
 31753                                  FATERR:
 31754                                  	;mov	word [es:bp+1Eh],-1
 31755                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 31756 0000559D 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 31757                                  					; Err in FAT must force recomp of freespace
 31758                                  	;and	di,0FFh
 31759 000055A3 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 31760                                  	;mov	byte [ALLOWED],18h
 31761 000055A7 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31762                                  	;mov	ah,1Ah
 31763 000055AC B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 31764 000055AE A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 31765 000055B1 E819FC                  	call	FATAL1
 31766 000055B4 C42E[8A05]              	LES	BP,[THISDPB]
 31767 000055B8 3C03                    	CMP	AL,3
 31768 000055BA 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 31769 000055BC F9                      	STC				; User said FAIL
 31770 000055BD C3                      	retn
 31771                                  
 31772                                  FAT_GOT_DPB:
 31773                                  	;Context DS			;hkn; SS is DOSDATA
 31774 000055BE 16                      	push	ss			
 31775 000055BF 1F                      	pop	ds
 31776                                  	;mov	al,0Fh
 31777 000055C0 B00F                    	MOV	AL,DMEDHL
 31778                                  	;mov	ah,[es:bp+1]
 31779 000055C2 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 31780 000055C6 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 31781 000055C9 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 31782 000055CE C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 31783                                  	;;mov	al,[es:bp+16h]
 31784                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 31785 000055D4 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 31786 000055D8 A2[6703]                	MOV	[CALLMED],AL
 31787 000055DB 06                      	PUSH	ES
 31788 000055DC 1E                      	PUSH	DS
 31789                                  
 31790                                  ;hkn; DEVCALL is in DOSDATA
 31791 000055DD BB[5A03]                	MOV	BX,DEVCALL
 31792                                  	;;lds	si,[es:bp+12h]
 31793                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 31794 000055E0 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 31795 000055E4 07                      	POP	ES			; ES:BX Points to call header
 31796 000055E5 E825EF                  	call	DEVIOCALL2
 31797                                  	;Context DS		 	;hkn; SS is DOSDATA
 31798 000055E8 16                      	push	ss
 31799 000055E9 1F                      	pop	ds
 31800 000055EA 07                      	POP	ES			; Restore ES:BP
 31801 000055EB 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 31802                                  	;test	di,8000h
 31803                                  	;jnz	short FATERR
 31804 000055EF 09FF                    	or	di,di
 31805 000055F1 78AA                    	js	short FATERR		; have error
 31806 000055F3 30E4                    	XOR	AH,AH
 31807                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 31808                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 31809 000055F5 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 31810 000055F9 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 31811                                  ; See if we had changed volume id by creating one on the diskette
 31812 000055FC 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 31813 00005600 7508                    	jnz	short CHECK_BYT
 31814 00005602 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 31815 00005607 E9A300                  	jmp	GOGETBPB		; Need to get device driver to read in
 31816                                  					; new volume label.
 31817                                  CHECK_BYT:
 31818 0000560A 0A26[6803]              	OR	AH,[CALLRBYT]
 31819                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31820                                  	;JMP	short NEWDSK
 31821                                  	; 17/12/2022
 31822 0000560E 7861                    	js	short NEWDSK
 31823                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31824                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 31825                                  	;JMP	short NEWDSK
 31826                                  
 31827                                  CHECK_ZR:
 31828 00005610 743B                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 31829                                  	; 24/09/2023
 31830                                  	; cf=0 (after 'or' instruction)
 31831                                  	;CLC
 31832 00005612 C3                      	retn				; If Media not changed (NZ)
 31833                                  
 31834                                  DISK_CHNG_ERR:
 31835 00005613 06                      	PUSH	ES
 31836 00005614 55                      	PUSH	BP
 31837                                  	;;les	bp,[es:bp+12h]
 31838                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 31839 00005615 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 31840                                  	;;test	word [es:bp+4],800h
 31841                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 31842 00005619 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 31843 0000561E 5D                      	POP	BP
 31844 0000561F 07                      	POP	ES
 31845                                  	;JZ	short FAIL_OPJ2		; Nope, FAIL
 31846                                  	; 03/03/2024
 31847 00005620 7443                    	jz	short FAIL_OP
 31848 00005622 1E                      	PUSH	DS			; Save buffer pointer for ignore
 31849 00005623 57                      	PUSH	DI
 31850 00005624 16                      	push	ss			;hkn; SS is DOSDATA
 31851 00005625 1F                      	pop	ds
 31852                                  	;mov	byte [ALLOWED],18h
 31853 00005626 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 31854 0000562B 06                      	PUSH	ES
 31855 0000562C C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 31856 00005630 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 31857 00005634 07                      	POP	ES
 31858 00005635 893E[2803]              	MOV	[EXTERRPT],DI
 31859                                  	;mov	ax,0Fh
 31860 00005639 B80F00                  	MOV	AX,error_I24_wrong_disk
 31861 0000563C C606[7505]01            	MOV	byte [READOP],1		; Write
 31862                                  	;invoke	HARDERR
 31863 00005641 E837FB                  	call	HARDERR
 31864 00005644 5F                      	POP	DI			; Get back buffer for ignore
 31865 00005645 1F                      	POP	DS
 31866 00005646 3C03                    	CMP	AL,3
 31867                                  FAIL_OPJ2:
 31868 00005648 741B                    	JZ	short FAIL_OP
 31869 0000564A E971FF                  	JMP	FAT_GOT_DPB		; Retry
 31870                                  
 31871                                  CHKBUFFDIRT:
 31872                                  	; 20/05/2019 - Retro DOS v4.0
 31873                                  
 31874                                  	; MSDOS 3.3
 31875                                  	;lds	di,[BUFFHEAD]
 31876                                  
 31877                                  	; MSDOS 6.0
 31878                                  	;cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 31879                                  	; 03/03/2024
 31880                                  	; ds=ss
 31881                                  	;;;
 31882 0000564D 833E[7100]00            	cmp	word [DirtyBufferCount],0 ; (Win ME IO.SYS - BIOSCODE:0C7A7h)
 31883                                  	;;;
 31884 00005652 741D                    	je	short NEWDSK			; no, skip the check
 31885 00005654 E8EC00                  	call	GETCURHEAD			; get pointer to first buffer
 31886                                  nbuffer:
 31887                                  	;cmp	al,[di+4]
 31888 00005657 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 31889 0000565A 750C                    	jne	short lfnxt			; no, go for next buffer
 31890                                  	;test   byte [di+5],40h
 31891 0000565C F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 31892 00005660 7406                    	jz	short lfnxt			; no, go for next buffer
 31893                                  
 31894                                  FAIL_OP2:	; 03/03/2024
 31895                                  	;Context DS
 31896 00005662 16                      	push	ss
 31897 00005663 1F                      	pop	ds
 31898                                  	; 24/09/2023
 31899                                  	; cf=0 (after 'test' instruction)
 31900                                  	;clc
 31901 00005664 C3                      	retn
 31902                                  
 31903                                  FAIL_OP:					; This label & code is here
 31904                                  	;Context DS				;  for reachability
 31905                                  	;push	ss
 31906                                  	;pop	ds
 31907 00005665 F9                      	STC
 31908                                  	; 03/03/2024
 31909                                  	;retn
 31910 00005666 EBFA                    	jmp	short FAIL_OP2 ; cf=1
 31911                                  
 31912                                  lfnxt:
 31913                                  	; 15/08/2018 - Retro DOS v3.0
 31914                                  	; MSDOS 3.3
 31915                                  	;lds	di,[di]
 31916                                  
 31917                                  	; 20/05/2019 - Retro DOS v4.0
 31918 00005668 8B3D                    	mov	di,[di]
 31919                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 31920                                  	
 31921                                  	; MSDOS 3.3
 31922                                  	;cmp	di,-1
 31923                                  	;jne	short nbuffer
 31924                                  	
 31925                                  	; MSDOS 6.0
 31926 0000566A 36393E[BB0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 31927 0000566F 75E6                    	jne	short nbuffer			; no, check this guy also
 31928                                  
 31929                                  ; If no dirty buffers, assume Media changed
 31930                                  NEWDSK:
 31931                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 31932                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 31933 00005671 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 31934                                  						;  recompute
 31935                                  	; MSDOS 3.3
 31936                                  	;call	SETVISIT
 31937                                  	; MSDOS 6.0
 31938 00005677 E8C900                  	call	 GETCURHEAD
 31939                                  nxbuffer:
 31940                                  	; MSDOS 3.3
 31941                                  	;or 	byte [di+5],20h
 31942                                  	; MSDOS 3.3 & MSDOS 6.0
 31943                                  	;cmp	[di+4],al
 31944 0000567A 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 31945 0000567D 7510                    	jne	short lfnxt2
 31946                                  	;test	byte [di+5],40h
 31947 0000567F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31948 00005683 758E                    	jnz	short DISK_CHNG_ERR
 31949                                  	;mov	word [di+4],20FFh
 31950 00005685 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 31951 0000568A E8C800                  	call	SCANPLACE
 31952                                  	; MSDOS 6.0
 31953 0000568D EB02                    	jmp	short skpbuff
 31954                                  lfnxt2:
 31955 0000568F 8B3D                    	mov	di,[di]
 31956                                  	;mov	di,[di+BUFFINFO.buf_next]
 31957                                  skpbuff:
 31958                                  	; MSDOS 6.0
 31959 00005691 363B3E[BB0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 31960 00005696 75E2                    	jne	short nxbuffer
 31961                                  
 31962 00005698 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 31963 0000569E 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 31964 000056A0 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 31965 000056A5 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 31966 000056A7 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 31967                                  ;lfnxt2:
 31968                                  	; MSDOS 3.3
 31969                                  	;call	SKIPVISIT
 31970                                  	;jnz	short nxbuffer
 31971                                  GOGETBPB:
 31972                                  	; MSDOS 3.3 & MSDOS 6.0
 31973                                  	;;lds	di,[es:bp+12h]
 31974                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 31975 000056AD 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 31976                                  	; 20/05/2019
 31977                                  	;test	word [di+4],2000h
 31978                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 31979 000056B1 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 31980 000056B5 7510                    	JNZ	short GETFREEBUF
 31981                                  	;context DS	    		;hkn; SS is DOSDATA
 31982 000056B7 16                      	push	ss
 31983 000056B8 1F                      	pop	ds
 31984 000056B9 BB0200                  	MOV	BX,2
 31985 000056BC E8F2FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 31986                                  FAIL_OPJ:
 31987                                  	;JC	short FAIL_OP
 31988                                  	; 03/03/2024
 31989 000056BF 72A1                    	jc	short FAIL_OP2 ; cf=1
 31990 000056C1 C53E[E205]              	LDS	DI,[CURBUF]
 31991 000056C5 EB13                    	JMP	SHORT GOTGETBUF
 31992                                  
 31993                                  GETFREEBUF:
 31994 000056C7 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 31995 000056C8 55                      	PUSH	BP
 31996                                  	; MSDOS 3.3
 31997                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 31998                                  	; MSDOS 6.0
 31999 000056C9 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 32000                                  ;hkn; SS override
 32001 000056CB 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 32002 000056D0 E87000                  	call	GETCURHEAD		;LB.			  ;AN000;
 32003                                  	; MSDOS 3.3 & MSDOS 6.0
 32004 000056D3 E84B02                  	call	BUFWRITE
 32005 000056D6 5D                      	POP	BP
 32006 000056D7 07                      	POP	ES
 32007                                  	;;JC	short FAIL_OPJ
 32008                                  	;jc	short FAIL_OP
 32009                                  	; 03/03/2024
 32010 000056D8 7288                    	jc	short FAIL_OP2 ; cf=1
 32011                                  
 32012                                  GOTGETBUF:
 32013                                  	;;add	di,16
 32014                                  	;add	di,20 ; MSDOS 6.0
 32015 000056DA 83C714                  	ADD	DI,BUFINSIZ
 32016                                  
 32017                                  ;hkn; SS override
 32018 000056DD 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 32019                                  	;Context DS			;hkn; SS is DOSDATA
 32020 000056E2 16                      	push	ss
 32021 000056E3 1F                      	pop	ds
 32022 000056E4 893E[6803]              	MOV	[CALLXAD],DI
 32023                                  	;mov	al,16h
 32024 000056E8 B016                    	MOV	AL,DBPBHL
 32025                                  	;mov	ah,[es:bp+1]
 32026 000056EA 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 32027 000056EE A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 32028 000056F1 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 32029 000056F6 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 32030                                  	;;mov	al,[es:bp+16h]
 32031                                  	;mov	al,[es:bp+17h]
 32032 000056FC 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 32033 00005700 A2[6703]                	MOV	[CALLMED],AL
 32034 00005703 06                      	PUSH	ES ; **
 32035 00005704 1E                      	PUSH	DS ; *
 32036                                  	;;
 32037                                  ; 03/01/2024
 32038                                  %if 0
 32039                                  	;;push	word [es:bp+14h]
 32040                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 32041                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 32042                                  	;;push	word [es:bp+12h]
 32043                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 32044                                  	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 32045                                  
 32046                                  ;hkn; DEVCALL is in DOSDATA
 32047                                  	MOV	BX,DEVCALL
 32048                                  	POP	SI
 32049                                  	POP	DS			; DS:SI Points to device header
 32050                                  %endif
 32051                                  	; 03/01/2024
 32052 00005705 BB[5A03]                	mov	bx,DEVCALL
 32053                                  	;lds	si,[es:bp+13h]
 32054 00005708 26C57613                	lds	si,[es:bp+DPB.DRIVER_ADDR]
 32055                                  					; DS:SI Points to device header
 32056                                  	;;
 32057 0000570C 07                      	POP	ES ; *			; ES:BX Points to call header
 32058                                  	;invoke	DEVIOCALL2
 32059 0000570D E8FDED                  	call	DEVIOCALL2
 32060 00005710 07                      	POP	ES ; **			; Restore ES:BP
 32061                                  	;Context DS
 32062 00005711 16                      	push	ss		 	;hkn; SS is DOSDATA
 32063 00005712 1F                      	pop	ds
 32064 00005713 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 32065                                  	; MSDOS 3.3
 32066                                  	;test	di,8000h
 32067                                  	;jnz	short FATERRJ
 32068                                  	; MSDOS 6.0
 32069 00005717 09FF                    	or	di,di
 32070 00005719 7825                    	js	short FATERRJ 		; have error
 32071                                  
 32072                                  ; 04/03/2024
 32073                                  %if 0
 32074                                  	;;mov	al,[es:bp+16h]
 32075                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 32076                                  	MOV	AL,[ES:BP+DPB.MEDIA]
 32077                                  %endif
 32078                                  
 32079 0000571B C536[6C03]              	LDS	SI,[CALLBPB]
 32080                                  	;;mov	word [es:bp+1Ch],0
 32081                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 32082 0000571F 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 32083                                  	;invoke	$SETDPB
 32084 00005725 E88BB8                  	call	_$SETDPB
 32085                                  
 32086                                  ;hkn; SS override
 32087 00005728 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 32088                                  	;mov	al,[es:bp+8]
 32089 0000572D 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 32090                                  
 32091                                  	; MSDOS 3.3
 32092                                  	;;mov	ah,[es:bp+0Fh]
 32093                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32094                                  	;;mov	[DI-8],ax
 32095                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 32096                                  
 32097                                  	; MSDOS 6.0
 32098                                  	;mov	[di-0Ah],al
 32099 00005731 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 32100                                  						;>32mb		  ;AN000;
 32101                                  	;mov	ax,[es:bp+0Fh]
 32102 00005734 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 32103                                  	;mov	[di-9h],ax			  ;AC000;
 32104 00005738 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 32105                                  					;>32mb Correct buffer info ;AC000;
 32106                                  	;Context DS			;hkn; SS is DOSDATA
 32107 0000573B 16                      	push	ss
 32108 0000573C 1F                      	pop	ds
 32109 0000573D 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 32110 0000573F C3                      	retn
 32111                                  
 32112                                  FATERRJ: 
 32113 00005740 E95AFE                  	JMP	FATERR
 32114                                  
 32115                                  ;============================================================================
 32116                                  ; STDBUF.ASM
 32117                                  ;============================================================================
 32118                                  ; Retro DOS v2.0 - 12/03/2018
 32119                                  
 32120                                  ;
 32121                                  ; Standard buffer management for MSDOS
 32122                                  ;
 32123                                  
 32124                                  ;.xlist
 32125                                  ;.xcref
 32126                                  ;INCLUDE STDSW.ASM
 32127                                  ;.cref
 32128                                  ;.list
 32129                                  
 32130                                  ;TITLE	STDBUF - MSDOS buffer management
 32131                                  ;NAME	STDBUF
 32132                                  
 32133                                  ;INCLUDE BUF.ASM
 32134                                  
 32135                                  ;============================================================================
 32136                                  ; BUF.ASM
 32137                                  ;============================================================================
 32138                                  ; 31/07/2018 - Retro DOS v3.0
 32139                                  ; Retro DOS v2.0 - 12/03/2018
 32140                                  ;
 32141                                  ; buffer management for MSDOS
 32142                                  ;
 32143                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 32144                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 32145                                  ;
 32146                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 32147                                  ;
 32148                                  ;SETVISIT:
 32149                                  ;	; 31/07/2018 - Retro DOS v3.0
 32150                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 32151                                  ;; Inputs:
 32152                                  ;;      None
 32153                                  ;; Function:
 32154                                  ;;      Set up a scan of I/O buffers
 32155                                  ;; Outputs:
 32156                                  ;;      All visit flags = 0
 32157                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 32158                                  ;;                    may cause a scan to stop in the middle leaving some
 32159                                  ;;                    visit flags set, and some not set.
 32160                                  ;;      DS:DI Points to [BUFFHEAD]
 32161                                  ;; No other registers altered
 32162                                  ;
 32163                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32164                                  ;	PUSH    AX
 32165                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 32166                                  ;	;mov	al,0DFh
 32167                                  ;	mov	al,~buf_visit
 32168                                  ;SETLOOP:
 32169                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 32170                                  ;	;and	[DI+5],al
 32171                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 32172                                  ;       LDS     DI,[DI]
 32173                                  ;       CMP     DI,-1
 32174                                  ;       JNZ     SHORT SETLOOP
 32175                                  ;       POP     AX ; 09/09/2018
 32176                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 32177                                  ;SVISIT_RETN:
 32178                                  ;       RETN
 32179                                  ;
 32180                                  ;SKIPVISIT:
 32181                                  ;	; 31/07/2018 - Retro DOS v3.0
 32182                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 32183                                  ;
 32184                                  ;; Inputs:
 32185                                  ;;      DS:DI Points to a buffer
 32186                                  ;; Function:
 32187                                  ;;      Skip visited buffers
 32188                                  ;; Outputs:
 32189                                  ;;      DS:DI Points to next unvisited buffer
 32190                                  ;;      Zero is set if skip to LAST buffer
 32191                                  ;; No other registers altered
 32192                                  ;
 32193                                  ;       CMP     DI,-1
 32194                                  ;       ;retz
 32195                                  ;       JZ	SHORT SVISIT_RETN
 32196                                  ;
 32197                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 32198                                  ;       ;;;retnz
 32199                                  ;       ;;JNZ	SHORT SVISIT_RETN
 32200                                  ;
 32201                                  ;	;test	byte [di+5],20h
 32202                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 32203                                  ;	JNZ	short SKIPLOOP
 32204                                  ;	
 32205                                  ;	push	ax
 32206                                  ;	or	al,1
 32207                                  ;	pop	ax
 32208                                  ;	retn	
 32209                                  ;
 32210                                  ;SKIPLOOP:
 32211                                  ;	LDS     DI,[DI]
 32212                                  ;       JMP     SHORT SKIPVISIT
 32213                                  
 32214                                  ;============================================================================
 32215                                  ; BUF.ASM, MSDOS 6.0, 1991
 32216                                  ;============================================================================
 32217                                  ; 31/07/2018 - Retro DOS v3.0
 32218                                  ; 04/05/2019 - Retro DOS v4.0
 32219                                  
 32220                                  ;	TITLE	BUF - MSDOS buffer management
 32221                                  ;	NAME	BUF
 32222                                  
 32223                                  ;**	BUF.ASM - Low level routines for buffer cache management
 32224                                  ;
 32225                                  ;	GETCURHEAD
 32226                                  ;	ScanPlace
 32227                                  ;	PLACEBUF
 32228                                  ;	PLACEHEAD
 32229                                  ;	PointComp
 32230                                  ;	GETBUFFR
 32231                                  ;	GETBUFFRB
 32232                                  ;	FlushBuf
 32233                                  ;	BufWrite
 32234                                  ;	SET_RQ_SC_PARMS
 32235                                  ;
 32236                                  ;	Revision history:
 32237                                  ;
 32238                                  ;		AN000  version 4.00  Jan. 1988
 32239                                  ;		A004   PTM 3765 -- Disk reset failed
 32240                                  ;		M039 DB 10/17/90 - Disk write optimization
 32241                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 32242                                  
 32243                                  ;Break	<GETCURHEAD -- Get current buffer header>
 32244                                  ;----------------------------------------------------------------------------
 32245                                  ; Procedure Name : GetCurHead
 32246                                  ; Inputs:
 32247                                  ;	 No Inputs
 32248                                  ; Function:
 32249                                  ;	Returns the pointer to the first buffer in Queue
 32250                                  ;	and updates FIRST_BUFF_ADDR
 32251                                  ;       and invalidates LASTBUFFER (recency pointer)
 32252                                  ; Outputs:
 32253                                  ;	DS:DI = pointer to the first buffer in Queue
 32254                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 32255                                  ;       LASTBUFFER = -1
 32256                                  ; No other registers altered
 32257                                  ;----------------------------------------------------------------------------
 32258                                  
 32259                                  ; 04/05/2019 - Retro DOS v4.0
 32260                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 32261                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32262                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 32263                                  
 32264                                  GETCURHEAD:
 32265 00005743 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 32266 00005748 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 32267 0000574F 36893E[BB0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 32268 00005754 C3                      	retn
 32269                                  
 32270                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 32271                                  ;----------------------------------------------------------------------------
 32272                                  ; Procedure Name : ScanPlace
 32273                                  ; Inputs:
 32274                                  ;	Same as PLACEBUF
 32275                                  ; Function:
 32276                                  ;	Save scan location and call PLACEBUF
 32277                                  ; Outputs:
 32278                                  ;	DS:DI Points to saved scan location
 32279                                  ; All registers, except DS:DI, preserved.
 32280                                  ;----------------------------------------------------------------------------
 32281                                  ;M039: Rewritten to preserve registers.
 32282                                  
 32283                                  ;SCANPLACE:
 32284                                  ;	; 31/07/2018 - Retro DOS v3.0
 32285                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32286                                  ;	push	es
 32287                                  ;	les	si,[di]
 32288                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 32289                                  ;	call	PLACEBUF
 32290                                  ;	push	es
 32291                                  ;	pop	ds
 32292                                  ;	mov	di,si
 32293                                  ;	pop	es
 32294                                  ;scanplace_retn:
 32295                                  ;	retn	
 32296                                  	
 32297                                  	; MSDOS 6.0
 32298                                  SCANPLACE:
 32299 00005755 FF35                    	push	word [di]
 32300                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 32301 00005757 E80200                  	call	PLACEBUF
 32302 0000575A 5F                      	pop	di
 32303 0000575B C3                      	retn
 32304                                  
 32305                                  ;----------------------------------------------------------------------------
 32306                                  ; Procedure Name : PlaceBuf
 32307                                  ; Input:
 32308                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 32309                                  ; Function:
 32310                                  ;	Remove buffer from queue and re-insert it in proper place.
 32311                                  ; NO registers altered
 32312                                  ;----------------------------------------------------------------------------
 32313                                  
 32314                                  ;procedure PLACEBUF,NEAR
 32315                                  
 32316                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32317                                  	; 20/05/2019 - Retro DOS v4.0
 32318                                  PLACEBUF:
 32319                                  	; 31/07/2018 - Retro DOS v3.0
 32320                                  
 32321                                  	; MSDOS 6.0
 32322 0000575C 50                      	push	AX			;Save only regs we modify	;AN000;
 32323 0000575D 53                      	push	BX							;AN000;
 32324                                  	; 23/09/2023
 32325                                  	;push	SI							;AN000;
 32326                                  	
 32327 0000575E 8B05                    	mov	ax,[di]
 32328                                  	;mov	ax,[di+BUFFINFO.buf_next]
 32329 00005760 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 32330                                  	
 32331 00005765 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 32332 00005767 7422                    	je	short nret			;Yes, special case	;AN000;
 32333 00005769 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 32334 0000576B 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 32335 0000576D 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 32336 00005771 EB18                    	jmp	short nret 			;Continue with repositioning;AN000;
 32337                                  not_first:
 32338                                  	; 23/09/2023
 32339 00005773 56                      	push	si
 32340                                  	;mov	si,[di+2]
 32341 00005774 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 32342 00005777 8904                    	mov	[si],ax
 32343                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 32344 00005779 96                      	xchg	si,ax
 32345                                  	;mov	[si+2],ax
 32346 0000577A 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 32347                                  	
 32348 0000577D 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 32349 00005780 893C                    	mov	[si],di
 32350                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 32351 00005782 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 32352 00005785 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 32353 00005788 891D                    	mov	[di],bx
 32354                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 32355                                  	; 23/09/2023
 32356 0000578A 5E                      	pop	si
 32357                                  nret:	
 32358                                  	; 23/09/2023							;AN000;
 32359                                  	;pop	SI							;AN000;
 32360 0000578B 5B                      	pop	BX							;AN000;
 32361 0000578C 58                      	pop	AX							;AN000;
 32362                                  									;AN000;
 32363                                  	;cmp	byte [di+4],0FFh
 32364 0000578D 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 32365 00005791 7505                            jne	short pbx			; M039: -no, jump.
 32366 00005793 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 32367                                  pbx:	
 32368 00005798 C3                      	retn								;AN000;
 32369                                  
 32370                                  	; 31/07/2018 - Retro DOS v3.0
 32371                                  
 32372                                  	; MSDOS 3.3
 32373                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 32374                                  
 32375                                  ;PLACEBUF:
 32376                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32377                                  ;	
 32378                                  ;       CALL	save_world
 32379                                  ;       LES     CX,[DI]
 32380                                  ;       CMP     CX,-1           	; Buf is LAST?
 32381                                  ;       JZ      SHORT NRET		; Buffer already last
 32382                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 32383                                  ;       PUSH    DS
 32384                                  ;       POP     ES              	; Buf is ES:DI
 32385                                  ;	; 15/03/2018
 32386                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 32387                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 32388                                  ;       JNZ     SHORT BUFLOOP
 32389                                  ;       MOV     [SS:BUFFHEAD],CX
 32390                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 32391                                  ;       JMP     SHORT LOOKEND
 32392                                  ;BUFLOOP:
 32393                                  ;	; 31/07/2018
 32394                                  ;	mov	ax,ds
 32395                                  ;	mov	bx,si
 32396                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32397                                  ;       LDS     SI,[SI]
 32398                                  ;       CALL    POINTCOMP
 32399                                  ;       jnz	short BUFLOOP
 32400                                  ;	;
 32401                                  ;	mov	ds,ax
 32402                                  ;	mov	si,bx
 32403                                  ;	mov	[SI],cx
 32404                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 32405                                  ;	mov	[SI+2],bp
 32406                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 32407                                  ;LOOKEND:
 32408                                  ;	mov	ax,ds
 32409                                  ;	mov	bx,si
 32410                                  ;       LDS     SI,[SI]
 32411                                  ;       CMP     SI,-1
 32412                                  ;       jnz     short LOOKEND
 32413                                  ;GOTHEEND:
 32414                                  ;       mov	ds,ax
 32415                                  ;	mov	[BX],di
 32416                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 32417                                  ;       MOV     WORD [ES:DI],-1
 32418                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 32419                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 32420                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 32421                                  ;NRET:
 32422                                  ;       CALL	restore_world
 32423                                  ;	
 32424                                  ;	;cmp	byte [di+4],-1
 32425                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 32426                                  ;	jnz     short scanplace_retn
 32427                                  ;	call    PLACEHEAD
 32428                                  ;	retn
 32429                                  
 32430                                  ;EndProc PLACEBUF
 32431                                  
 32432                                  ;M039 - Removed PLACEHEAD.
 32433                                  ;----------------------------------------------------------------------------
 32434                                  ; places buffer at head
 32435                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 32436                                  ;	ONE IN THE LIST!!!!!!!
 32437                                  ; BUGBUG ---- this routine can be removed because it has only
 32438                                  ; BUGBUG ---- one instruction. This routine is called from
 32439                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 32440                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 32441                                  ; BUGBUG ---- But kept as it is for modularity
 32442                                  ;----------------------------------------------------------------------------
 32443                                  ;procedure   PLACEHEAD,NEAR
 32444                                  ;	mov	word ptr [BufferQueue], di
 32445                                  ;	ret
 32446                                  ;EndProc PLACEHEAD
 32447                                  ;M039
 32448                                  
 32449                                  ;----------------------------------------------------------------------------
 32450                                  ; Procedure Name : PLACEHEAD
 32451                                  ;
 32452                                  ; SAME AS PLACEBUF except places buffer at head
 32453                                  ;----------------------------------------------------------------------------
 32454                                  
 32455                                  	; MSDOS 3.3 (Retro DOS v3.0)
 32456                                  	; 05/09/2018
 32457                                  	; MSDOS 2.11 (Retro DOS v2.0)
 32458                                  ;PLACEHEAD:
 32459                                  ;	; 31/07/2018 - Retro DOS v3.0
 32460                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 32461                                  ;
 32462                                  ;       CALL	save_world
 32463                                  ;       PUSH	DS
 32464                                  ;       POP	ES
 32465                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 32466                                  ;       LDS     SI,[SS:BUFFHEAD]
 32467                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 32468                                  ;	CALL    POINTCOMP
 32469                                  ;       JZ      SHORT GOTHEEND2
 32470                                  ;	MOV	[ES:DI],SI
 32471                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 32472                                  ;       MOV	[ES:DI+2],DS
 32473                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 32474                                  ;       MOV	[SS:BUFFHEAD],DI
 32475                                  ;       MOV	[SS:BUFFHEAD+2],ES
 32476                                  ;LOOKEND2:
 32477                                  ;       mov	ax,ds
 32478                                  ;	mov	bx,si
 32479                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 32480                                  ;       LDS     SI,[SI]
 32481                                  ;       CALL    POINTCOMP
 32482                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 32483                                  ;       mov	ds,ax
 32484                                  ;	mov	word [bx],-1
 32485                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 32486                                  ;	mov	word [bx+2],-1
 32487                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 32488                                  ;GOTHEEND2:
 32489                                  ;      	call	restore_world
 32490                                  ;placehead_retn:
 32491                                  ;	retn
 32492                                  
 32493                                  ; 20/05/2019 - Retro DOS v4.0
 32494                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 32495                                  
 32496                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 32497                                  ;----------------------------------------------------------------------------
 32498                                  ;
 32499                                  ; Procedure Name : PointComp
 32500                                  ; Inputs:
 32501                                  ;         DS:SI & ES:DI
 32502                                  ; Function:
 32503                                  ;          Checks for ((SI==DI) && (ES==DS))
 32504                                  ;	   Assumes that pointers are normalized for the
 32505                                  ;	   same segment
 32506                                  ;
 32507                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 32508                                  ; DO NOT USE FOR < or >
 32509                                  ; No Registers altered
 32510                                  ;
 32511                                  ;----------------------------------------------------------------------------
 32512                                  
 32513                                  POINTCOMP:
 32514                                  	; 31/07/2018 - Retro DOS v3.0
 32515                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 32516 00005799 39FE                    	CMP	SI,DI
 32517 0000579B 750A                    	jnz	short _ret_label	; return if nz
 32518                                  	;jnz	short placehead_retn 
 32519 0000579D 51                      	PUSH	CX
 32520 0000579E 52                      	PUSH	DX
 32521 0000579F 8CD9                    	MOV	CX,DS
 32522 000057A1 8CC2                    	MOV	DX,ES
 32523 000057A3 39D1                    	CMP	CX,DX
 32524 000057A5 5A                      	POP	DX
 32525 000057A6 59                      	POP	CX
 32526                                  _ret_label:
 32527 000057A7 C3                      	retn
 32528                                  
 32529                                  ; 01/08/2018 - Retro DOS v3.0
 32530                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 32531                                  
 32532                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 32533                                  
 32534                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 32535                                  ;----------------------------------------------------------------------------
 32536                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 32537                                  ;	It gets the specified local sector into one of the I/O buffers
 32538                                  ;	and shuffles the queue
 32539                                  ; 
 32540                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32541                                  ;		       ELSE no pre-read
 32542                                  ;		(DX) = Desired physical sector number	      (LOW)
 32543                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32544                                  ;		(ES:BP) = Pointer to drive parameters
 32545                                  ;		ALLOWED set in case of INT 24
 32546                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32547                                  ;		'C' clear if OK
 32548                                  ;		CURBUF Points to the Buffer for the sector
 32549                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32550                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32551                                  ;----------------------------------------------------------------------------
 32552                                  
 32553                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 32554                                  ;----------------------------------------------------------------------------
 32555                                  ;	GetBuffrb reads a sector from the FAT file system's FAT table.
 32556                                  ;	It gets the specified sector into one of the I/O buffers
 32557                                  ;	and shuffles the queue. We need a special entry point so that
 32558                                  ;	we can read the alternate FAT sector if the first read fails, also
 32559                                  ;	so we can mark the buffer as a FAT sector.
 32560                                  ; 
 32561                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 32562                                  ;		       ELSE no pre-read
 32563                                  ;		(DX) = Desired physical sector number	     (LOW)
 32564                                  ;		(SI) != 0
 32565                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 32566                                  ;		(ES:BP) = Pointer to drive parameters
 32567                                  ;		ALLOWED set in case of INT 24
 32568                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 32569                                  ;		'C' clear if OK
 32570                                  ;		CUR ddBUF Points to the Buffer for the sector
 32571                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 32572                                  ;	USES	AX, BX, CX, SI, DI, Flags
 32573                                  ;----------------------------------------------------------------------------
 32574                                  
 32575                                  	; 22/09/2023 - RetroDOS v4.1 MSDOS.SYS (optimization)
 32576                                  GETBUFFRC:
 32577 000057A8 C706[0706]0000          	mov	word [HIGH_SECTOR],0
 32578                                  GETBUFFRA:
 32579 000057AE 30C0                    	xor	al,al
 32580 000057B0 BE0100                  	mov	si,1
 32581 000057B3 EB09                    	jmp	short GETBUFFRB
 32582                                  
 32583                                  	; 22/09/2023
 32584                                  GETBUFFER:
 32585 000057B5 30C0                    	xor	al,al
 32586                                  GETBUFFRD:
 32587                                  	;mov	byte [ALLOWED],18h
 32588 000057B7 C606[4B03]18            	mov	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 32589                                  
 32590                                  	; 20/05/2019 - Retro DOS v4.0
 32591                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 32592                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32593                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 32594                                  GETBUFFR:
 32595 000057BC 31F6                    	XOR	SI,SI
 32596                                  
 32597                                  ;	This entry point is called for FAT buffering with SI != 0
 32598                                  
 32599                                  GETBUFFRB:
 32600 000057BE A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 32601                                  	; 15/12/2022
 32602 000057C1 268A4600                	mov	al,[ES:BP]
 32603                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32604                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 32605 000057C5 C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 32606                                  	; MSDOS 6.0
 32607                                  ;hkn; SS override
 32608 000057C9 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb	;AN000;
 32609                                  
 32610                                  ;	See if this is the buffer that was most recently returned.
 32611                                  ;	A big performance win if it is.
 32612                                  
 32613 000057CE 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 32614 000057D1 7412                    	je	short getb5			; No
 32615                                  	;cmp	dx,[di+6]
 32616 000057D3 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32617 000057D6 750D                    	JNZ	short getb5			; Wrong sector
 32618                                  	
 32619                                  	; MSDOS 6.0
 32620                                  	;cmp	cx,[di+8]
 32621 000057D8 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb	;AN000;
 32622 000057DB 7508                    	JNZ	short getb5			; F.C. >32mb	;AN000;
 32623                                  	
 32624                                  	;cmp	al,[di+4]
 32625 000057DD 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32626                                  	;JZ	getb35				; Just asked for same buffer
 32627 000057E0 7503                    	jnz	short getb5
 32628                                  	;jmp	getb35
 32629                                  	; 17/12/2022
 32630                                  	; 28/07/2019
 32631 000057E2 E9C700                  	jmp	getb35x
 32632                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32633                                  	;jmp	getb35
 32634                                  
 32635                                  ;	It's not the buffer most recently returned. See if it's in the
 32636                                  ;	cache.
 32637                                  ;
 32638                                  ;	(cx:dx) = sector #
 32639                                  ;	(al) = drive #
 32640                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32641                                  ;	??? list may be incomplete ???
 32642                                  
 32643                                  getb5:	
 32644                                  	; MSDOS 3.3
 32645                                  	;lds	di,[SS:BUFFHEAD]
 32646                                  	; MSDOS 6.0
 32647 000057E5 E85BFF                  	CALL	GETCURHEAD			; get Q Head
 32648                                  getb10:	
 32649                                  	;cmp	dx,[di+6]
 32650 000057E8 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 32651 000057EB 750D                    	jne	short getb12			; wrong sector lo
 32652                                  	
 32653                                  	; MSDOS 6.0
 32654                                  	;cmp	cx,[di+8]
 32655 000057ED 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 32656 000057F0 7508                    	jne	short getb12			; wrong sector hi
 32657                                  	
 32658                                  	;cmp	al,[di+4]
 32659 000057F2 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 32660                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 32661 000057F5 7503                    	jne	short getb12
 32662 000057F7 E98C00                  	jmp	getb25
 32663                                  getb12:	
 32664                                  	; MSDOS 3.3
 32665                                  	;;mov	di,[DI]
 32666                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 32667                                  	;
 32668                                  	; 15/08/2018
 32669                                  	;lds	di,[di]
 32670                                  
 32671                                  	;cmp	di,-1 ; 0FFFFh
 32672                                  	;jne	short getb10
 32673                                  	;lds	di,[SS:BUFFHEAD]
 32674                                  
 32675                                  	; MSDOS 6.0
 32676 000057FA 8B3D                    	mov	di,[di]
 32677                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 32678 000057FC 363B3E[BB0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 32679 00005801 75E5                    	jne	short getb10			; no, continue looking
 32680                                  
 32681                                  ;	The requested sector is not available in the buffers. DS:DI now points
 32682                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 32683                                  ;	new sector into it.
 32684                                  ;
 32685                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 32686                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 32687                                  ;	him, we should take LRU. And the above lookup shouldn't be
 32688                                  ;	down a chain, but should be hashed.
 32689                                  ;
 32690                                  ;	(DS:DI) = first buffer in the queue
 32691                                  ;	(CX:DX) = sector # we want
 32692                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 32693                                  
 32694                                  	; MSDOS 3.3 & MSDOS 6.0
 32695                                  ;hkn; SS override
 32696 00005803 51                      	PUSH	CX  ; MSDOS 6.0
 32697 00005804 56                      	push	si
 32698 00005805 52                      	push	dx
 32699 00005806 55                      	push	bp
 32700 00005807 06                      	push	es
 32701 00005808 E81601                  	CALL	BUFWRITE			; Write out the dirty buffer
 32702 0000580B 07                      	pop	es
 32703 0000580C 5D                      	pop	bp
 32704 0000580D 5A                      	pop	dx
 32705 0000580E 5E                      	pop	si
 32706 0000580F 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 32707                                  	;jc	short getbx			; if got hard error
 32708 00005814 7303                    	jnc	short getb13
 32709 00005816 E99D00                  	jmp	getbx
 32710                                  
 32711                                  getb13:
 32712                                  	; MSDOS 6.0
 32713 00005819 E88C01                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 32714                                  
 32715                                  ;	We're ready to read in the buffer, if need be. If the caller
 32716                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 32717                                  
 32718 0000581C 30E4                    	XOR	AH,AH				; initial flags
 32719                                  ;hkn; SS override
 32720                                  	;test	byte [ss:PREREAD],0FFh
 32721                                  	;jnz	short getb20
 32722 0000581E 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 32723 00005823 7549                    	JNZ	short getb20			; no, we're done
 32724                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 32725                                  	;lea	bx,[di+20] ; MSDOS 6.0
 32726 00005825 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 32727                                  	;MOV	CX,1
 32728                                  	; 22/09/2023
 32729 00005828 29C9                    	sub	cx,cx ; 0
 32730 0000582A 56                      	push	si
 32731 0000582B 57                      	push	di
 32732 0000582C 52                      	push	dx
 32733                                  	; MSDOS 6.0
 32734 0000582D 06                      	push	es ; ***
 32735                                  
 32736                                  ; Note: As far as I can tell, all disk reads into buffers go through
 32737                                  ;	this point. -mrw 10/88
 32738                                  	
 32739                                  	;cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 32740                                  	; 22/09/2023
 32741 0000582E 36380E[7900]            	cmp	[ss:BuffInHMA],cl ; 0
 32742 00005833 7407                    	jz	short getb14
 32743 00005835 1E                      	push	ds ; **
 32744 00005836 53                      	push	bx ; *
 32745 00005837 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 32746                                  getb14:
 32747                                  ;M039: Eliminated redundant HMA code.
 32748                                  
 32749                                  	; 22/09/2023
 32750 0000583C 41                      	inc	cx ; cx = 1
 32751                                  
 32752                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32753 0000583D 09F6                    	OR	SI,SI			; FAT sector ?
 32754 0000583F 7407                    	JZ	short getb15		
 32755                                  
 32756 00005841 E88DDD                  	call	FATSECRD
 32757                                  	;mov	ah,2
 32758 00005844 B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 32759                                  
 32760 00005846 EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 32761                                  
 32762                                  getb15:
 32763 00005848 E8B2DD                  	call	DREAD			; Buffer is marked free if read barfs
 32764 0000584B B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 32765                                  getb17:
 32766                                  	; 17/12/2022	
 32767                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32768                                  ;%if 0
 32769                                  	; MSDOS 6.0							  ;I001
 32770 0000584D 9C                      	pushf								  ;I001
 32771 0000584E 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 32772 00005854 7411                    	jz	short not_in_hma	; no				  ;I001
 32773                                  	;mov	cx,[es:bp+2]
 32774 00005856 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 32775 0000585A D1E9                    	shr	cx,1							  ;I001
 32776 0000585C 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 32777 0000585D 89DE                    	mov	si,bx							  ;I001
 32778 0000585F 5F                      	pop	di ; *							  ;I001
 32779 00005860 07                      	pop	es ; **							  ;I001
 32780 00005861 FC                      	cld								  ;I001
 32781 00005862 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 32782 00005863 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 32783 00005865 06                      	push	es							  ;I001
 32784 00005866 1F                      	pop	ds							  ;I001
 32785                                  ;%endif
 32786                                  
 32787                                  ; 17/12/2022
 32788                                  %if 0
 32789                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32790                                  	; MSDOS 5.0
 32791                                  	pushf
 32792                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 32793                                  	jz	short not_in_hma	; no
 32794                                  	popf
 32795                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 32796                                  	shr	cx,1
 32797                                  	mov	si,bx
 32798                                  	pop	di ; *
 32799                                  	pop	es ; **
 32800                                  	cld
 32801                                  	rep	movsw
 32802                                  	push	es
 32803                                  	pop	ds
 32804                                  	jmp	short getb19 ; 27/11/2022
 32805                                  %endif
 32806                                  
 32807                                  not_in_hma:								  ;I001
 32808 00005867 9D                      	popf							 	  ;I001
 32809                                  getb19:
 32810 00005868 07                      	pop	es ; ***
 32811 00005869 5A                      	pop	dx
 32812 0000586A 5F                      	pop	di
 32813 0000586B 5E                      	pop	si
 32814 0000586C 7248                    	JC	short getbx
 32815                                  
 32816                                  ;	The buffer has the data setup in it (if we were to read)
 32817                                  ;	Setup the various buffer fields
 32818                                  ;
 32819                                  ;	(ds:di) = buffer address
 32820                                  ;	(es:bp) = DPB address
 32821                                  ;	(HIGH_SECTOR:DX) = sector #
 32822                                  ;	(ah) = BUF_FLAGS value
 32823                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 32824                                  
 32825                                  ;hkn; SS override
 32826                                  getb20:	; MSDOS 6.0
 32827 0000586E 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 32828                                  	;mov	[di+8],cx
 32829 00005873 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 32830                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 32831                                   	;mov	[di+6],dx
 32832 00005876 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 32833                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 32834                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 32835 00005879 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 32836                                  	;;mov	[di+0Ch],es
 32837                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 32838 0000587C 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 32839                                  	; 15/12/2022
 32840 0000587F 268A4600                	mov	al,[es:bp]
 32841                                  	;mov	al,[es:bp+0]
 32842                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 32843                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 32844                                  	;mov	[di+4],ax
 32845 00005883 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 32846                                  getb25:	
 32847                                  	; MSDOS 3.3
 32848                                  	;mov     ax,1
 32849                                  
 32850                                  	; MSDOS 6.0
 32851                                  	;mov	byte [di+0Ah],1
 32852 00005886 C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 32853 0000588A 31C0                    	XOR	AX,AX
 32854                                  
 32855                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32856 0000588C 09F6                    	OR	SI,SI				; FAT sector ?
 32857 0000588E 740B                    	JZ	short getb30
 32858                                  
 32859                                  	;mov	al,[es:bp+8]
 32860 00005890 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 32861                                  	
 32862                                  	; MSDOS 6.0
 32863 00005894 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 32864                                  	;mov	ax,[es:bp+0Fh]
 32865 00005897 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 32866                                  						;  sectors
 32867                                  	; MSDOS 3.3
 32868                                  	;;mov	ah,[es:bp+0Fh]
 32869                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 32870                                  
 32871                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 32872                                  ;		is set
 32873                                  
 32874                                  getb30:	
 32875                                  	; MSDOS 6.0
 32876                                  	;mov	[di+0Bh],ax
 32877 0000589B 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 32878                                  
 32879                                  	; MSDOS 3.3
 32880                                  	;;mov	[di+8],ax ; 15/08/2018	
 32881                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 32882                                  
 32883 0000589E E8BBFE                  	CALL	PLACEBUF
 32884                                  
 32885                                  ;hkn; SS override for next 4
 32886                                  getb35: 
 32887                                  	; 17/12/2022
 32888                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32889                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 32890                                  	;MOV	[SS:CURBUF+2],DS
 32891                                  	;MOV	[SS:LastBuffer+2],DS
 32892                                  	;MOV	[SS:CURBUF],DI
 32893                                  	;MOV	[SS:LastBuffer],DI
 32894                                  	;CLC
 32895                                  
 32896                                  	; 17/12/2022
 32897                                  	; 07/12/2022
 32898                                  	; Retro DOS v4.0
 32899 000058A1 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 32900 000058A6 36893E[1E00]            	mov	[ss:LastBuffer],di
 32901 000058AB F8                      	clc
 32902                                  getb35x: ; 28/07/2019
 32903 000058AC 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 32904 000058B1 36893E[E205]            	MOV	[ss:CURBUF],di
 32905                                  
 32906                                  ;	Return with 'C' set appropriately
 32907                                  ;	(dx) = caller's original value
 32908                                  
 32909                                  getbx:	
 32910 000058B6 16                      	push	ss
 32911 000058B7 1F                      	pop	ds
 32912                                  	;retn
 32913                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 32914                                  getbuffrb_retn:
 32915                                  ;flushbuf_retn:	; 17/12/2022
 32916 000058B8 C3                      	retn
 32917                                  
 32918                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 32919                                  ;----------------------------------------------------------------------------
 32920                                  ; Input:
 32921                                  ;	DS = DOSGROUP
 32922                                  ;	AL = Physical unit number local buffers only
 32923                                  ;	   = -1 for all units and all remote buffers
 32924                                  ; Function:
 32925                                  ;	Write out all dirty buffers for unit, and flag them as clean
 32926                                  ;	Carry set if error (user FAILed to I 24)
 32927                                  ;	    Flush operation completed.
 32928                                  ; DS Preserved, all others destroyed (ES too)
 32929                                  ;----------------------------------------------------------------------------
 32930                                  
 32931                                  	; 20/05/2019 - Retro DOS v4.0
 32932                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 32933                                  
 32934                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32935                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 32936                                  FLUSHBUF:
 32937                                  	; MSDOS 3.3
 32938                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 32939                                  	;lds	di,[BUFFHEAD]
 32940                                  
 32941                                  	; MSDOS 6.0
 32942 000058B9 E887FE                  	call	GETCURHEAD
 32943                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32944 000058BC 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32945 000058C2 7508                    	jnz	short scan_buf_queue
 32946 000058C4 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 32947 000058CA 7423                    	je	short end_scan
 32948                                  	
 32949                                  scan_buf_queue:
 32950 000058CC E82900                  	call	CHECKFLUSH
 32951                                  	;push	ax  ; MSDOS 3.3
 32952                                  	; MSDOS 6.0
 32953                                  	;mov	ah,[di+4]
 32954 000058CF 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 32955 000058D2 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 32956 000058D7 7408                    	je	short free_the_buf
 32957                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 32958 000058D9 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 32959 000058DF 7405                    	jz	short dont_free_the_buf
 32960                                  	; MSDOS 3.3
 32961                                  	;;mov	al,[di+4]
 32962                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 32963                                  	;cmp	[SS:WPERR],al					;hkn;
 32964                                  	; 15/08/2018
 32965                                  	;jne	short dont_free_the_buf	
 32966                                  free_the_buf:
 32967                                  	; MSDOS 6.0 (& MSDOS 3.3)
 32968 000058E1 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 32969                                  dont_free_the_buf:
 32970                                  	;pop	ax  ; MSDOS 3.3 	   	
 32971                                  
 32972                                  	; MSDOS 3.3
 32973                                  	;mov	di,[DI]
 32974                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 32975                                  	;
 32976                                  	; 15/08/2018
 32977                                  	;lds	di,[di]
 32978                                  	;
 32979                                  	;cmp	di,-1 ; 0FFFFh
 32980                                  	;jnz	short scan_buf_queue 
 32981                                  	
 32982                                  	; MSDOS 6.0
 32983 000058E6 8B3D                    	mov	di,[di]
 32984                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 32985 000058E8 363B3E[BB0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 32986 000058ED 75DD                    	jne	short scan_buf_queue
 32987                                  
 32988                                  end_scan:
 32989 000058EF 16                      	push	ss
 32990 000058F0 1F                      	pop	ds
 32991                                  	; 01/08/2018 - Retro DOS v3.0
 32992                                  	;cmp	byte [FAILERR],0
 32993                                  	;jne	short bad_flush
 32994                                  	;retn
 32995                                  ;bad_flush:
 32996                                  	;stc
 32997                                  	;retn
 32998                                  
 32999                                  	; 17/12/2022
 33000                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33001                                  	; 01/08/2018 - Retro DOS v3.0
 33002 000058F1 803E[4A03]01            	cmp	byte [FAILERR],1
 33003 000058F6 F5                      	cmc
 33004                                  flushbuf_retn:
 33005 000058F7 C3                      	retn
 33006                                  	
 33007                                  	; 17/12/2022
 33008                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33009                                  	;cmp	byte [FAILERR],0
 33010                                  	;jne	short bad_flush
 33011                                  	;retn
 33012                                  ;bad_flush:
 33013                                  	;stc
 33014                                  	;retn
 33015                                  
 33016                                  ;----------------------------------------------------------------------------
 33017                                  ;
 33018                                  ; Procedure Name : CHECKFLUSH
 33019                                  ;
 33020                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 33021                                  ;	   DS:DI - pointer to buffer
 33022                                  ;
 33023                                  ; Function : Write out a buffer if it is dirty
 33024                                  ;
 33025                                  ; Carry set if problem (currently user FAILed to I 24)
 33026                                  ;
 33027                                  ;----------------------------------------------------------------------------
 33028                                  
 33029                                  CHECKFLUSH:
 33030                                  	; MSDOS 6.0
 33031 000058F8 B4FF                    	mov	ah,-1 ; 01/08/2018 Retro DOS v3.0
 33032                                  	;cmp	[di+4],ah
 33033 000058FA 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 33034 000058FD 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 33035 000058FF 38C4                    	CMP	AH,AL			; 
 33036 00005901 7406                    	JZ	short DOBUFFER		; do this buffer
 33037                                  	;cmp	al,[di+4]
 33038 00005903 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 33039 00005906 F8                      	CLC
 33040 00005907 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 33041                                  DOBUFFER:
 33042                                  	;test	byte [di+5],40h
 33043 00005909 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 33044 0000590D 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 33045 0000590F 50                      	PUSH	AX
 33046                                  	;push	word [di+4]
 33047 00005910 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 33048 00005913 E80B00                  	CALL	BUFWRITE
 33049 00005916 58                      	POP	AX
 33050 00005917 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 33051                                  	;and	ah,0BFh
 33052 00005919 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 33053                                  	;mov	[di+4],ax
 33054 0000591C 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 33055                                  LEAVE_BUF:
 33056 0000591F 58                      	POP	AX			; Search info
 33057                                  checkflush_retn:
 33058 00005920 C3                      	retn
 33059                                  
 33060                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 33061                                  ;----------------------------------------------------------------------------
 33062                                  ;
 33063                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 33064                                  ;
 33065                                  ;	ENTRY	DS:DI Points to the buffer
 33066                                  ;
 33067                                  ;	EXIT	Buffer marked free
 33068                                  ;		Carry set if error (currently user FAILed to I 24)
 33069                                  ;
 33070                                  ;	USES	All buf DS:DI
 33071                                  ;		HIGH_SECTOR
 33072                                  ;----------------------------------------------------------------------------
 33073                                  
 33074                                  	; 20/05/2019 - Retro DOS v4.0
 33075                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 33076                                  
 33077                                  
 33078                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33079                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 33080                                  
 33081                                  BUFWRITE:
 33082                                  	; 10/09/2018
 33083                                  	; 01/08/2018 - Retro DOS v3.0
 33084                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 33085 00005921 B8FF00                  	MOV	AX,00FFH
 33086                                  	;xchg	ax,[di+4]
 33087 00005924 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 33088 00005927 3CFF                    	CMP	AL,0FFH
 33089 00005929 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 33090                                  	;test	ah,40h
 33091 0000592B F6C440                  	test	AH,buf_dirty
 33092 0000592E 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 33093                                  	; MSDOS 6.0
 33094 00005930 E89A00                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 33095                                  
 33096                                  ;hkn; SS override
 33097 00005933 363A06[2203]            	CMP	AL,[SS:WPERR]
 33098 00005938 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 33099                                  
 33100                                  ;hkn; SS override
 33101                                  	; MSDOS 6.0
 33102 0000593A 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 33103                                  	
 33104                                  	; 07/03/2024
 33105                                  	;;;les	bp,[di+10] ; MSDOS 3.3
 33106                                  	;;les	bp,[di+13] ; MSDOS 6.0
 33107                                  	;LES	BP,[DI+BUFFINFO.buf_DPB]
 33108                                  
 33109                                  	;;lea	bx,[di+16]
 33110                                  	;lea	bx,[di+20] ; MSDOS 6.0
 33111 0000593E 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 33112                                  
 33113                                  ; 07/03/2024
 33114                                  %if 0
 33115                                  	;mov	dx,[di+6]
 33116                                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 33117                                  	
 33118                                  	; MSDOS 6.0
 33119                                  	;mov	cx,[di+8]
 33120                                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 33121                                  
 33122                                  ;hkn; SS override
 33123                                  	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 33124                                  %else
 33125                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33126                                  	;;;
 33127                                  	;les	dx,[di+6]
 33128 00005941 C45506                  	les	dx,[di+BUFFINFO.buf_sector]
 33129 00005944 368C06[0706]            	mov	[ss:HIGH_SECTOR],es
 33130                                  
 33131                                  	;;les	bp,[di+10] ; MSDOS 3.3
 33132                                  	;les	bp,[di+13] ; MSDOS 6.0
 33133 00005949 C46D0D                  	les	bp,[di+BUFFINFO.buf_DPB]
 33134                                  	;;;
 33135                                  %endif
 33136                                  
 33137 0000594C 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 33138                                  	; MSDOS 3.3
 33139                                  	;;mov	cx,[DI+8]
 33140                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 33141                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 33142 0000594F 30ED                    	XOR	CH,CH
 33143                                  	;;mov	ah,ch ; MSDOS 3.3
 33144                                  
 33145                                  ;hkn; SS override for ALLOWED
 33146                                  	;mov	byte [SS:ALLOWED],18h
 33147 00005951 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 33148                                  	;test	byte [di+5],8
 33149                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 33150                                  	;test	ah,8
 33151 00005957 F6C408                  	test	AH,buf_isDATA
 33152 0000595A 7406                    	JZ	short NO_IGNORE
 33153                                  	;or	byte [SS:ALLOWED],20h
 33154 0000595C 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 33155                                  NO_IGNORE:
 33156                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 33157                                  	; MSDOS 6.0
 33158                                  	;mov	ax,[di+11]
 33159 00005962 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 33160                                  
 33161 00005965 57                      	PUSH	DI		; Save buffer pointer
 33162 00005966 31FF                    	XOR	DI,DI		; Indicate failure
 33163                                  
 33164 00005968 1E                      	push	ds ; *
 33165 00005969 53                      	push	bx ; **
 33166                                  WRTAGAIN:
 33167 0000596A 57                      	push	di ; ***
 33168 0000596B 51                      	push	cx ; ****
 33169 0000596C 50                      	push	ax ; *****
 33170                                  	;MOV	CX,1
 33171                                  	; 17/12/2022
 33172                                  	; ch = 0
 33173 0000596D B101                    	mov	cl,1 ; 24/07/2019
 33174                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33175                                  	;mov	cx,1
 33176 0000596F 53                      	push	bx ; ******
 33177 00005970 52                      	push	dx ; *******
 33178 00005971 1E                      	push	ds ; ********
 33179                                  
 33180                                  ; Note: As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 33181                                  
 33182                                  	; MSDOS 6.0
 33183                                  	;cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 33184                                  	; 22/09/2023
 33185 00005972 36382E[7900]            	cmp	[ss:BuffInHMA],ch ; 0
 33186 00005977 7418                    	jz	short NBUFFINHMA
 33187 00005979 51                      	push	cx
 33188 0000597A 06                      	push	es
 33189 0000597B 89DE                    	mov	si,bx
 33190 0000597D 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 33191 00005981 D1E9                    	shr	cx,1
 33192 00005983 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 33193 00005988 89FB                    	mov	bx,di
 33194 0000598A FC                      	cld
 33195 0000598B F3A5                    	rep	movsw
 33196 0000598D 06                      	push	es
 33197 0000598E 1F                      	pop	ds
 33198 0000598F 07                      	pop	es
 33199 00005990 59                      	pop	cx
 33200                                  NBUFFINHMA:
 33201 00005991 E8C9DC                  	call	DWRITE		; Write out the dirty buffer
 33202 00005994 1F                      	pop	ds ; ********
 33203 00005995 5A                      	pop	dx ; *******
 33204 00005996 5B                      	pop	bx ; ******
 33205 00005997 58                      	pop	ax ; *****
 33206 00005998 59                      	pop	cx ; ****
 33207 00005999 5F                      	pop	di ; ***
 33208 0000599A 7201                    	JC	short NOSET
 33209 0000599C 47                      	INC	DI		; If at least ONE write succeedes, the operation
 33210                                  NOSET:				;	succeedes.
 33211 0000599D 01C2                    	ADD	DX,AX
 33212 0000599F E2C9                    	LOOP	WRTAGAIN
 33213 000059A1 5B                      	pop	bx ; **
 33214 000059A2 1F                      	pop	ds ; *
 33215                                  	;OR	DI,DI		; Clears carry
 33216                                  	;JNZ	short BWROK	; At least one write worked
 33217                                  	;STC			; DI never got INCed, all writes failed.
 33218                                  	; 22/09/2023
 33219 000059A3 83FF01                  	cmp	di,1
 33220                                  BWROK:	
 33221 000059A6 5F                      	POP	DI
 33222 000059A7 C3                      	retn
 33223                                  
 33224                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 33225                                  ;----------------------------------------------------------------------------
 33226                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 33227                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 33228                                  ;	SC_DRIVE even if SC is disabled to save the testing
 33229                                  ;	code and time
 33230                                  ;
 33231                                  ;	ENTRY	ES:BP = drive parameter block
 33232                                  ;
 33233                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 33234                                  ;		[SC_DRIVE]= drive #
 33235                                  ;
 33236                                  ;	USES	Flags
 33237                                  ;----------------------------------------------------------------------------
 33238                                  
 33239                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33240                                  ; 04/05/2019 - Retro DOS v4.0
 33241                                  
 33242                                  SET_RQ_SC_PARMS:
 33243                                  ;hkn; SS override for all variables used in this procedure.
 33244 000059A8 50                      	push	ax
 33245                                  	;mov	ax,[es:bp+2]
 33246 000059A9 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 33247 000059AD 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 33248                                  	;;mov	al,[es:bp+0]
 33249                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 33250                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 33251                                  	; 15/12/2022
 33252 000059B1 268A4600                	mov	al,[ES:BP]
 33253 000059B5 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 33254 000059B9 58                      	pop	ax
 33255                                  srspx:	
 33256 000059BA C3                      	retn					;LB. return
 33257                                  
 33258                                  ; 07/07/2024 - Retro DOS v4.1
 33259                                  ; 01/02/2024 - Retro DOS v5.0
 33260                                  ;----------------------------------------------------------------------------
 33261                                  ; PCDOS 7.1 IBMDOS.COM - DOSCODE:AD58h
 33262                                  
 33263                                  SET_BUF_DIRTY:                          ; ...
 33264                                  	;test	byte [es:di+5],40h
 33265 000059BB 26F6450540              	test	byte [es:di+BUFFINFO.buf_flags],buf_dirty
 33266 000059C0 750A                    	jnz	short yesdirty2
 33267                                  	;or	byte [es:di+5],40h
 33268 000059C2 26804D0540              	or	byte [es:di+BUFFINFO.buf_flags],buf_dirty
 33269                                  
 33270                                  ;INC_DIRTY_COUNT:
 33271                                  ;	inc     word [ss:DirtyBufferCount]
 33272                                  ;yesdirty2:
 33273                                  ;	retn
 33274                                  
 33275                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 33276                                  ;----------------------------------------------------------------------------
 33277                                  ; Input:
 33278                                  ;	none
 33279                                  ; Function:
 33280                                  ;	increment dirty buffers count
 33281                                  ; Output:
 33282                                  ;	dirty buffers count is incremented
 33283                                  ;
 33284                                  ; All registers preserved
 33285                                  ;----------------------------------------------------------------------------
 33286                                  
 33287                                  INC_DIRTY_COUNT:
 33288                                  ;; BUGBUG  ---- remove this routine
 33289                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 33290 000059C7 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 33291                                  yesdirty2:	; 01/02/2024
 33292 000059CC C3                      	retn
 33293                                  
 33294                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 33295                                  ;----------------------------------------------------------------------------
 33296                                  ; Input:
 33297                                  ;	none
 33298                                  ; Function:
 33299                                  ;	decrement dirty buffers count
 33300                                  ; Output:
 33301                                  ;	dirty buffers count is decremented
 33302                                  ;
 33303                                  ; All registers preserved
 33304                                  ;----------------------------------------------------------------------------
 33305                                  
 33306                                  DEC_DIRTY_COUNT:
 33307 000059CD 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 33308 000059D3 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 33309 000059D5 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 33310                                  					; error condition to underflow here? ;hkn;
 33311                                  ddcx:	
 33312 000059DA C3                      	retn
 33313                                  
 33314                                  ;============================================================================
 33315                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 33316                                  ;============================================================================
 33317                                  ; 02/08/2018 - Retro DOS v3.0
 33318                                  ; 29/04/2019 - Retro DOS v4.0
 33319                                  
 33320                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 33321                                  
 33322                                  ; Pseudo EXEC system call for DOS
 33323                                  
 33324                                  ;	TITLE	MSPROC - process maintenance
 33325                                  ;	NAME	MSPROC
 33326                                  
 33327                                  ; =========================================================================
 33328                                  ;**	Process related system calls and low level routines for DOS 2.X.
 33329                                  ;	I/O specs are defined in DISPATCH.
 33330                                  ;
 33331                                  ;	$WAIT
 33332                                  ;	$EXEC
 33333                                  ;	$Keep_process
 33334                                  ;	Stay_resident
 33335                                  ;	$EXIT
 33336                                  ;	$ABORT
 33337                                  ;	abort_inner
 33338                                  ;
 33339                                  ;	Modification history:
 33340                                  ;
 33341                                  ;		Created: ARR 30 March 1983
 33342                                  ;		AN000	version 4.0 jan. 1988
 33343                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 33344                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 33345                                  ;
 33346                                  ;		M000	added support for loading programs into UMBs 7/9/90
 33347                                  ;
 33348                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 33349                                  ;		       dossym.inc. 7/30/90
 33350                                  ;		M005 - Support for EXE programs with out STACK segment and 
 33351                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 33352                                  ;		       stack is provided at the end of the program. Note that
 33353                                  ;		       only SP is changed.
 33354                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 33355                                  ;
 33356                                  ;		M028 - 4b04 implementation
 33357                                  ;
 33358                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 33359                                  ;			in memory block >= 64K, sp = 0. If memory block
 33360                                  ;			obtained is <64K, point sp at the end of the memory
 33361                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 33362                                  ;			added for a stack segment which may be needed if it
 33363                                  ;			is loaded in low memory situations.
 33364                                  ;
 33365                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 33366                                  ;
 33367                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 33368                                  ;			a bad environment if it reached 32767 bytes. Changed
 33369                                  ;			to allow 32768 bytes of environment.
 33370                                  ;
 33371                                  ;		M047 - Release the allocated UMB when we failed to load a 
 33372                                  ;		       COM file high. Also ensure that if the biggest block
 33373                                  ;		       into which we load the com file is less than 64K then
 33374                                  ;		       we provide atleast 256 bytes of stack to the user.
 33375                                  ;
 33376                                  ;		M050 - Made Lie table search CASE insensitive
 33377                                  ;
 33378                                  ;		M060 - Removed special version table from the kernal and
 33379                                  ;                      put it in a device drive which puts the address
 33380                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 33381                                  ;		       as a DWORD.
 33382                                  ;
 33383                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 33384                                  ;		       entry do not try to load low if there is no space in
 33385                                  ;		       UMBs.
 33386                                  ;
 33387                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 33388                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 33389                                  ;		       change return address to LeaveDos if AL=5.
 33390                                  ;
 33391                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 33392                                  ;                      controls building a version of MSDOS.SYS that only
 33393                                  ;                      runs programs from a fixed list (defined in the
 33394                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 33395                                  ;                      for details.  This feature is used to build a
 33396                                  ;                      "special" version of DOS that can be handed out to
 33397                                  ;                      OEM/ISV customers as part of a "service" disk.
 33398                                  ;
 33399                                  ; =========================================================================
 33400                                  
 33401                                  ;SAVEXIT  EQU  10
 33402                                  
 33403                                  ;BREAK	<$WAIT - return previous process error code>
 33404                                  ; =========================================================================
 33405                                  ;	$WAIT - Return previous process error code.
 33406                                  ;
 33407                                  ;	Assembler usage:
 33408                                  ;
 33409                                  ;	    MOV     AH, WaitProcess
 33410                                  ;	    INT     int_command
 33411                                  ;
 33412                                  ;	ENTRY	none
 33413                                  ;	EXIT	(ax) = exit code
 33414                                  ;	USES	all
 33415                                  ; =========================================================================
 33416                                  
 33417                                  	; 20/05/2019 - Retro DOS v4.0
 33418                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 33419                                  
 33420                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33421                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 33422                                  _$WAIT:
 33423                                  	; 02/08/2018 - Retro DOS v3.0
 33424                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 33425                                  
 33426 000059DB 31C0                    	xor	AX,AX
 33427 000059DD 368706[3403]            	xchg	AX,[ss:exit_code]
 33428 000059E2 E950AC                  	jmp	SYS_RET_OK
 33429                                  
 33430                                  ; =========================================================================
 33431                                  ;BREAK <$exec - load/go a program>
 33432                                  ;	EXEC.ASM - EXEC System Call
 33433                                  ;
 33434                                  ;
 33435                                  ; Assembler usage:
 33436                                  ;	    lds     DX, Name
 33437                                  ;	    les     BX, Blk
 33438                                  ;	    mov     AH, Exec
 33439                                  ;	    mov     AL, FUNC
 33440                                  ;	    int     INT_COMMAND
 33441                                  ;
 33442                                  ;	AL  Function
 33443                                  ;	--  --------
 33444                                  ;	 0  Load and execute the program.
 33445                                  ;	 1  Load, create the program header but do not
 33446                                  ;	    begin execution.
 33447                                  ;	 3  Load overlay. No header created.
 33448                                  ;
 33449                                  ;	    AL = 0 -> load/execute program
 33450                                  ;
 33451                                  ;	    +---------------------------+
 33452                                  ;	    | WORD segment address of	|
 33453                                  ;	    | environment.		|
 33454                                  ;	    +---------------------------+
 33455                                  ;	    | DWORD pointer to ASCIZ	|
 33456                                  ;	    | command line at 80h	|
 33457                                  ;	    +---------------------------+
 33458                                  ;	    | DWORD pointer to default	|
 33459                                  ;	    | FCB to be passed at 5Ch	|
 33460                                  ;	    +---------------------------+
 33461                                  ;	    | DWORD pointer to default	|
 33462                                  ;	    | FCB to be passed at 6Ch	|
 33463                                  ;	    +---------------------------+
 33464                                  ;
 33465                                  ;	    AL = 1 -> load program
 33466                                  ;
 33467                                  ;	    +---------------------------+
 33468                                  ;	    | WORD segment address of	|
 33469                                  ;	    | environment.		|
 33470                                  ;	    +---------------------------+
 33471                                  ;	    | DWORD pointer to ASCIZ	|
 33472                                  ;	    | command line at 80h	|
 33473                                  ;	    +---------------------------+
 33474                                  ;	    | DWORD pointer to default	|
 33475                                  ;	    | FCB to be passed at 5Ch	|
 33476                                  ;	    +---------------------------+
 33477                                  ;	    | DWORD pointer to default	|
 33478                                  ;	    | FCB to be passed at 6Ch	|
 33479                                  ;	    +---------------------------+
 33480                                  ;	    | DWORD returned value of	|
 33481                                  ;	    | CS:IP			|
 33482                                  ;	    +---------------------------+
 33483                                  ;	    | DWORD returned value of	|
 33484                                  ;	    | SS:IP			|
 33485                                  ;	    +---------------------------+
 33486                                  ;
 33487                                  ;	    AL = 3 -> load overlay
 33488                                  ;
 33489                                  ;	    +---------------------------+
 33490                                  ;	    | WORD segment address where|
 33491                                  ;	    | file will be loaded.	|
 33492                                  ;	    +---------------------------+
 33493                                  ;	    | WORD relocation factor to |
 33494                                  ;	    | be applied to the image.	|
 33495                                  ;	    +---------------------------+
 33496                                  ;
 33497                                  ; Returns:
 33498                                  ;	    AX = error_invalid_function
 33499                                  ;	       = error_bad_format
 33500                                  ;	       = error_bad_environment
 33501                                  ;	       = error_not_enough_memory
 33502                                  ;	       = error_file_not_found
 33503                                  ; =========================================================================
 33504                                  ;
 33505                                  ;   Revision history:
 33506                                  ;
 33507                                  ;	 A000	version 4.00  Jan. 1988
 33508                                  ;
 33509                                  ; =========================================================================
 33510                                  
 33511                                  Exec_Internal_Buffer		EQU	OPENBUF
 33512                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 33513                                  
 33514                                  ; =========================================================================
 33515                                  
 33516                                  ;IF1		; warning message on buffers
 33517                                  ;%out	Please make sure that the following are contiguous and of the
 33518                                  ;%out	following sizes:
 33519                                  ;%out
 33520                                  ;%out	OpenBuf     128
 33521                                  ;%out	RenBuf	    128
 33522                                  ;%out	SearchBuf    53
 33523                                  ;%out	DummyCDS    curdirLen
 33524                                  ;ENDIF
 33525                                  
 33526                                  ; =========================================================================
 33527                                  
 33528                                  ; =========================================================================
 33529                                  ;
 33530                                  ; =========================================================================
 33531                                  
 33532                                  	; 20/05/2019 - Retro DOS v4.0
 33533                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 33534                                  
 33535                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33536                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 33537                                  	
 33538                                  _$EXEC:
 33539                                  	; 02/08/2018 - Retro DOS v3.0
 33540                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 33541                                  
 33542                                  EXEC001S:
 33543                                  	;LocalVar    Exec_Blk		,DWORD
 33544                                  	;LocalVar    Exec_Func		,BYTE
 33545                                  	;LocalVar    Exec_Load_High	,BYTE
 33546                                  	;LocalVar    Exec_FH		,WORD
 33547                                  	;LocalVar    Exec_Rel_Fac	,WORD
 33548                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 33549                                  	;LocalVar    Exec_Environ	,WORD
 33550                                  	;LocalVar    Exec_Size		,WORD
 33551                                  	;LocalVar    Exec_Load_Block	,WORD
 33552                                  	;LocalVar    Exec_DMA		,WORD
 33553                                  	;LocalVar    ExecNameLen 	,WORD
 33554                                  	;LocalVar    ExecName		,DWORD
 33555                                  	;
 33556                                  	;LocalVar    Exec_DMA_Save	,WORD
 33557                                  	;LocalVar    Exec_NoStack	,BYTE
 33558                                  
 33559                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33560                                  	;%define	Exec_Blk	dword [bp-4]
 33561                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 33562                                  	%define		Exec_BlkL	word [bp-4]	
 33563                                  	%define		Exec_BlkH	word [bp-2]
 33564                                  	%define		Exec_Func	byte [bp-5]
 33565                                  	%define		Exec_Load_High	byte [bp-6]
 33566                                  	%define		Exec_FH		word [bp-8]
 33567                                  	%define		Exec_Rel_Fac	word [bp-10]
 33568                                  	%define		Exec_Res_Len_Para word [bp-12]
 33569                                  	%define		Exec_Environ	word [bp-14]
 33570                                  	%define		Exec_Size	word [bp-16]
 33571                                  	%define		Exec_Load_Block	word [bp-18]
 33572                                  	%define		Exec_DMA	word [bp-20]
 33573                                  	%define		ExecNameLen	word [bp-22]
 33574                                  	;%define	ExecName	dword [bp-26]
 33575                                  	%define		ExecName	[bp-26] ; 09/08/2018
 33576                                  	%define		ExecNameL	word [bp-26]	
 33577                                  	%define		ExecNameH	word [bp-24]
 33578                                  	; MSDOS 6.0
 33579                                  	%define		Exec_DMA_Save	word [bp-28]
 33580                                  	%define		Exec_NoStack	byte [bp-29]
 33581                                  	
 33582                                  	; ==================================================================
 33583                                  	; validate function
 33584                                  	; ==================================================================
 33585                                  		      	
 33586                                  	; M068 - Start
 33587                                  	;
 33588                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 33589                                  	; possibility that the count may not be decremented all the way to
 33590                                  	; 0. A typical case is if the program for which we intended to keep 
 33591                                  	; the A20 off for a sufficiently long time (A20OFF_COUNT int 21 
 33592                                  	; calls), exits pre-maturely due to error conditions.
 33593                                  
 33594                                  	; MSDOS 6.0
 33595 000059E5 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 33596                                  
 33597                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 33598                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 33599                                  	; bit set in DOS_FLAG by ExecReady is not cleared in msdisp.asm
 33600                                  
 33601 000059EB 3C05                    	cmp	al,5			; Q: is this ExecReady call
 33602                                  	;jne	short @f
 33603 000059ED 7505                    	jne	short Exec_@f		; N: continue
 33604                                  					; Y: change ret addr. to LeaveDos.
 33605 000059EF 59                      	pop	cx			; Note CX is not input to ExecReady
 33606 000059F0 B9[0804]                	mov	cx,LeaveDOS
 33607 000059F3 51                      	push	cx
 33608                                  ;@@:
 33609                                  Exec_@f:
 33610                                  	; M068 - End
 33611                                  	
 33612                                  	;Enter
 33613                                  
 33614 000059F4 55                      	push	bp
 33615 000059F5 89E5                    	mov	bp,sp
 33616                                  	;;sub	sp,26	; MSDOS 3.3
 33617                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 33618                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 33619                                  	; 17/12/2022
 33620                                  	; 20/05/2019
 33621 000059F7 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 33622                                  
 33623                                  	; MSDOS 6.0
 33624 000059FA 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 33625                                  					; M030
 33626 000059FC 7614                    	jna	short Exec_Check_2
 33627                                  
 33628                                  	; MSDOS 3.3
 33629                                  	;cmp	AL,3
 33630                                  	;jna	short Exec_Check_2
 33631                                  
 33632                                  Exec_Bad_Fun:
 33633 000059FE 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 33634                                  					; Extended Error Locus	;smr;SS Override
 33635                                  	;mov	al,1
 33636 00005A04 B001                    	mov	al,error_invalid_function
 33637                                  
 33638                                  Exec_Ret_Err:
 33639                                  	;Leave
 33640 00005A06 89EC                    	mov	sp,bp
 33641 00005A08 5D                      	pop	bp
 33642                                  	;transfer SYS_RET_ERR
 33643 00005A09 E932AC                  	jmp	SYS_RET_ERR
 33644                                  
 33645                                  	; MSDOS 6.0
 33646                                  ExecReadyJ:
 33647 00005A0C E88017                  	call	ExecReady		; M028
 33648 00005A0F E90204                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 33649                                  
 33650                                  Exec_Check_2:
 33651 00005A12 3C02                    	cmp	AL,2			
 33652 00005A14 74E8                    	je	short Exec_Bad_Fun
 33653                                  
 33654                                  	; MSDOS 6.0
 33655 00005A16 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 33656 00005A18 74E4                    	je	short Exec_Bad_Fun
 33657                                  	
 33658 00005A1A 3C05                    	cmp	al,5			; M028 ; M030
 33659 00005A1C 74EE                    	je	short ExecReadyJ	; M028
 33660                                  
 33661                                  	;mov	[bp-4],bx
 33662 00005A1E 895EFC                  	mov	Exec_BlkL,BX		; stash args
 33663                                  	;mov	[bp-2],es
 33664 00005A21 8C46FE                  	mov	Exec_BlkH,ES
 33665                                  	;mov	[bp-5],al
 33666 00005A24 8846FB                  	mov	Exec_Func,AL
 33667                                  	;mov	byte [bp-6],0
 33668 00005A27 C646FA00                	mov	Exec_Load_High,0
 33669                                  
 33670                                  	;mov	[bp-26],dx
 33671 00005A2B 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 33672                                  	;mov	[bp-24],ds
 33673 00005A2E 8C5EE8                  	mov	ExecNameH,DS
 33674 00005A31 89D6                    	mov	SI,DX			; move pointer to convenient place
 33675                                  	;invoke	DStrLen
 33676 00005A33 E8A6B7                  	call	DStrLen
 33677                                  	;mov	[bp-22],cx
 33678 00005A36 894EEA                  	mov	ExecNameLen,CX		; save length
 33679                                  
 33680                                  	; MSDOS 6.0
 33681 00005A39 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 33682 00005A3D 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 33683                                  
 33684 00005A41 30C0                    	xor	AL,AL			; open for reading
 33685 00005A43 55                      	push	BP
 33686                                  
 33687                                  	; MSDOS 6.0
 33688                                  	;or	byte [ss:DOS_FLAG],1
 33689 00005A44 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 33690                                  					; the redir that this open call is
 33691                                  					; due to an exec.
 33692                                  
 33693                                  	;invoke	$OPEN			; is the file there?
 33694 00005A4A E8CD12                  	call	_$OPEN
 33695                                  
 33696                                  	; MSDOS 6.0
 33697 00005A4D 9C                      	pushf
 33698                                  	; 02/06/2019
 33699                                  	;and	byte [ss:DOS_FLAG],0FEh
 33700 00005A4E 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 33701 00005A54 9D                      	popf
 33702                                  
 33703 00005A55 5D                      	pop	BP
 33704                                  
 33705                                  	; MSDOS 3.3 & MSDOS 6.0
 33706 00005A56 72AE                    	jc	short Exec_Ret_Err
 33707                                  
 33708                                  	;mov	[bp-8],ax
 33709 00005A58 8946F8                  	mov	Exec_FH,AX
 33710 00005A5B 89C3                    	mov	BX,AX
 33711 00005A5D 30C0                    	xor	AL,AL
 33712                                  	;invoke	$Ioctl
 33713 00005A5F E8A3C7                  	call	_$IOCTL
 33714 00005A62 7207                    	jc	short Exec_BombJ
 33715                                  
 33716                                  	;test	dl,80h
 33717 00005A64 F6C280                  	test	DL,devid_ISDEV
 33718 00005A67 740A                    	jz	short Exec_Check_Environ
 33719                                  
 33720                                  	;mov	al,2
 33721 00005A69 B002                    	mov	AL,error_file_not_found
 33722                                  Exec_BombJ:
 33723 00005A6B E9C800                  	jmp	Exec_Bomb
 33724                                  
 33725                                  BadEnv:
 33726                                  	;mov	al,0Ah
 33727 00005A6E B00A                    	mov	AL,error_bad_environment
 33728 00005A70 E9C300                  	jmp	Exec_Bomb
 33729                                  
 33730                                  Exec_Check_Environ:
 33731                                  	;mov	word [bp-18],0
 33732 00005A73 C746EE0000              	mov	Exec_Load_Block,0
 33733                                  	;mov	word [bp-14],0
 33734 00005A78 C746F20000              	mov	Exec_Environ,0
 33735                                  					; overlays... no environment
 33736                                  	;test	byte [bp-5],2
 33737 00005A7D F646FB02                	test	Exec_Func,exec_func_overlay
 33738 00005A81 7552                    	jnz	short Exec_Read_Header
 33739                                  
 33740                                  	;lds	si,[bp-4]
 33741 00005A83 C576FC                  	lds	SI,Exec_Blk		; get block
 33742 00005A86 8B04                    	mov	ax,[SI]
 33743                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 33744 00005A88 09C0                    	or	AX,AX
 33745 00005A8A 750C                    	jnz	short Exec_Scan_Env
 33746                                  
 33747 00005A8C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 33748                                  	;mov	ax,[44]
 33749 00005A91 A12C00                  	mov	AX,[PDB.ENVIRON]
 33750                                  
 33751                                  ; MSDOS 6.0
 33752                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 33753                                  ;
 33754                                  ; Exec_environ is being correctly initialized after the environment has been
 33755                                  ; allocated and copied form the parent's env. It must not be initialized here.
 33756                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 33757                                  ; parent's environment.
 33758                                  ;	mov	Exec_Environ,AX
 33759                                  ;
 33760                                  ;----------------------------------------------------------------------------
 33761                                  
 33762                                  	;mov	[bp-14],ax
 33763                                  	;mov	Exec_Environ,ax
 33764                                  
 33765 00005A94 09C0                    	or	AX,AX
 33766 00005A96 743D                    	jz	short Exec_Read_Header
 33767                                  
 33768                                  Exec_Scan_Env:
 33769 00005A98 8EC0                    	mov	ES,AX
 33770 00005A9A 31FF                    	xor	DI,DI
 33771                                  	;mov	cx,7FFFh ; MSDOS 3.3
 33772 00005A9C B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 33773 00005A9F 30C0                    	xor	AL,AL
 33774                                  
 33775                                  Exec_Get_Environ_Len:
 33776 00005AA1 F2AE                    	repnz	scasb			; find that nul byte
 33777 00005AA3 75C9                    	jnz	short BadEnv
 33778                                  
 33779 00005AA5 49                      	dec	CX			; Dec CX for the next nul byte test
 33780 00005AA6 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 33781                                  
 33782 00005AA8 AE                      	scasb				; is there another nul byte?
 33783 00005AA9 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 33784                                  
 33785 00005AAB 57                      	push	DI
 33786                                  	;lea	bx,[DI+11h]
 33787 00005AAC 8D5D11                  	lea	BX,[DI+0Fh+2]
 33788                                  	;add	bx,[bp-22]
 33789 00005AAF 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 33790                                  					; remember argv[0] length
 33791                                  					; round up and remember argc
 33792 00005AB2 B104                    	mov	CL,4
 33793 00005AB4 D3EB                    	shr	BX,CL			; number of paragraphs needed
 33794 00005AB6 06                      	push	ES
 33795                                  	;invoke	$Alloc			; can we get the space?
 33796 00005AB7 E83E06                  	call	_$ALLOC
 33797 00005ABA 1F                      	pop	DS
 33798 00005ABB 59                      	pop	CX
 33799                                  
 33800                                  	;jnc	short Exec_Save_Environ
 33801                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 33802                                  	; 17/12/2022
 33803 00005ABC 7272                    	jc	short Exec_No_Mem ; 02/06/2019
 33804                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33805                                  	;jnc	short Exec_Save_Environ
 33806                                  	;jmp	SHORT Exec_No_Mem
 33807                                  
 33808                                  Exec_Save_Environ:
 33809 00005ABE 8EC0                    	mov	ES,AX
 33810                                  	;mov	[bp-14],ax
 33811 00005AC0 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 33812 00005AC3 31F6                    	xor	SI,SI
 33813 00005AC5 89F7                    	mov	DI,SI
 33814 00005AC7 F3A4                    	rep	movsb			; copy the environment
 33815 00005AC9 B80100                  	mov	AX,1
 33816 00005ACC AB                      	stosw
 33817                                  	;lds	si,[bp-26]
 33818 00005ACD C576E6                  	lds	SI,ExecName
 33819                                  	;mov	cx,[bp-22]
 33820 00005AD0 8B4EEA                  	mov	CX,ExecNameLen
 33821 00005AD3 F3A4                    	rep	movsb
 33822                                  
 33823                                  Exec_Read_Header:
 33824                                  	; We read in the program header into the above data area and
 33825                                  	; determine where in this memory the image will be located.
 33826                                  
 33827                                  	;Context DS
 33828 00005AD5 16                      	push	ss
 33829 00005AD6 1F                      	pop	ds
 33830                                  	;mov	cx,26
 33831 00005AD7 B91A00                  	mov	CX,exec_header_len	; header size
 33832 00005ADA BA[C80F]                	mov	DX,exec_signature
 33833 00005ADD 06                      	push	ES
 33834 00005ADE 1E                      	push	DS
 33835 00005ADF E87704                  	call	ExecRead
 33836 00005AE2 1F                      	pop	DS
 33837 00005AE3 07                      	pop	ES
 33838 00005AE4 724E                    	jc	short Exec_Bad_File
 33839                                  
 33840 00005AE6 09C0                    	or	AX,AX
 33841 00005AE8 744A                    	jz	short Exec_Bad_File
 33842                                  	;cmp	ax,26
 33843 00005AEA 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 33844 00005AED 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 33845                                  
 33846 00005AEF F706[D40F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 33847 00005AF5 7504                    	jnz	short Exec_Check_Sig
 33848                                  
 33849                                  	;mov	byte [bp-6],0FFh
 33850 00005AF7 C646FAFF                	mov	Exec_Load_High,-1
 33851                                  
 33852                                  Exec_Check_Sig:
 33853 00005AFB A1[C80F]                	mov	AX,[exec_signature]	; rms;NSS
 33854                                  	;cmp	ax,5A4Dh ; 'MZ'
 33855 00005AFE 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 33856 00005B01 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33857                                  
 33858                                  	;cmp	ax,4D5Ah ; 'ZM'
 33859 00005B03 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 33860 00005B06 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 33861                                  
 33862                                  Exec_Com_Filej:
 33863 00005B08 E9E701                  	jmp	Exec_Com_File
 33864                                  
 33865                                  	; We have the program header... determine memory requirements
 33866                                  
 33867                                  Exec_Save_Start:
 33868 00005B0B A1[CC0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 33869 00005B0E B105                    	mov	CL,5			; convert to paragraphs
 33870 00005B10 D3E0                    	shl	AX,CL
 33871 00005B12 2B06[D00F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 33872                                  	;mov	[bp-12],ax
 33873 00005B16 8946F4                  	mov	Exec_Res_Len_Para,AX
 33874                                  
 33875                                  		; Do we need to allocate memory?
 33876                                  		; Yes if function is not load-overlay
 33877                                  
 33878                                  	;test	byte [bp-5],2
 33879 00005B19 F646FB02                	test	Exec_Func,exec_func_overlay
 33880 00005B1D 7443                    	jz	short Exec_Allocate	; allocation of space
 33881                                  
 33882                                  		; get load address from block
 33883                                  
 33884                                  	;les	di,[bp-4]
 33885 00005B1F C47EFC                  	les	DI,Exec_Blk
 33886                                  
 33887                                  ; 07/03/2024
 33888                                  %if 0
 33889                                  	mov	ax,[es:di]
 33890                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 33891                                  	;mov	[bp-20],ax
 33892                                  	mov	Exec_DMA,AX
 33893                                  
 33894                                  	; 17/12/2022
 33895                                  	;;mov	ax,[es:di+2]
 33896                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 33897                                  	;;mov	[bp-10],ax
 33898                                  	;mov	Exec_Rel_Fac,AX
 33899                                  
 33900                                  	; 17/12/2022
 33901                                  	; 30/11/2022 (!most proper code!)
 33902                                  	;mov	dx,[es:di+2]
 33903                                  	mov	dx,[ES:DI+EXEC3.reloc_fac]
 33904                                  	;mov	[bp-10],dx
 33905                                  	mov	Exec_Rel_Fac,dx
 33906                                  %else
 33907                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 33908                                  	;;;
 33909 00005B22 06                      	push	es
 33910 00005B23 26C405                  	les	ax,[es:di]
 33911                                  	;les	ax,[ES:DI+EXEC3.load_addr]
 33912                                  	;mov	[bp-20],ax
 33913 00005B26 8946EC                  	mov	Exec_DMA,ax
 33914                                  	;mov	[bp-10],es
 33915 00005B29 8C46F6                  	mov	Exec_Rel_Fac,es
 33916 00005B2C 07                      	pop	es
 33917                                  	;;;
 33918                                  %endif
 33919                                  	; ax = Exec_DMA
 33920 00005B2D E9DE00                  	jmp	Exec_Find_Res
 33921                                  
 33922                                  ; 17/12/2022
 33923                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33924                                  ; 27/09/2023
 33925                                  %if 0
 33926                                  	; 02/06/2019 - Retro DOS v4.0
 33927                                  	;mov	ax,[bp-20]  ; *+*
 33928                                  	mov	AX,Exec_DMA ; *+*
 33929                                  	; 10/08/2018
 33930                                  	jmp	Exec_Find_Res		; M000
 33931                                  %endif
 33932                                  
 33933                                  Exec_No_Mem:
 33934                                  	;mov	al,8
 33935 00005B30 B008                    	mov	AL,error_not_enough_memory
 33936 00005B32 EB02                    	jmp	short Exec_Bomb
 33937                                  
 33938                                  Exec_Bad_File:
 33939                                  	;mov	al,0Bh
 33940 00005B34 B00B                    	mov	AL,error_bad_format
 33941                                  
 33942                                  Exec_Bomb:
 33943                                  	;mov	bx,[bp-8]
 33944 00005B36 8B5EF8                  	mov	BX,Exec_FH
 33945 00005B39 E83604                  	call	Exec_Dealloc
 33946                                  	;LeaveCrit CritMem
 33947 00005B3C E8C3B7                  	call	LCritMEM
 33948                                  	;save	<AX,BP>
 33949 00005B3F 50                      	push	ax
 33950 00005B40 55                      	push	bp
 33951                                  	;invoke	$CLOSE
 33952 00005B41 E81F0A                  	call	_$CLOSE
 33953                                  	;restore <BP,AX>
 33954 00005B44 5D                      	pop	bp
 33955 00005B45 58                      	pop	ax
 33956 00005B46 E9BDFE                  	jmp	Exec_Ret_Err
 33957                                  
 33958                                  Exec_Chk_Mem: 
 33959                                  	
 33960                                  	; 24/09/2023
 33961                                  	; ds = DOSDATA
 33962                                  ; 17/12/2022
 33963                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33964                                  ;%if 0
 33965                                  	; MSDOS 6.0    			; M063 - Start
 33966                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33967                                  	; 10/06/2019
 33968 00005B49 A0[0203]                	mov	al,[AllocMethod]
 33969                                  	;mov	bl,[ss:ALLOCMSAVE]
 33970 00005B4C 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 33971                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 33972 00005B50 881E[0203]              	mov	[AllocMethod],bl
 33973                                  	
 33974 00005B54 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33975 00005B57 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33976                                  	;				; N: continue
 33977                                  	;
 33978 00005B59 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 33979 00005B5B 74D3                    	jz	short Exec_No_Mem	; N: no memory
 33980                                  	; 02/06/2019
 33981                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 33982 00005B5D A1[8A00]                	mov	ax,[SAVE_AX]
 33983                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 33984                                  					; M063 - End
 33985 00005B60 EB2B                    	jmp	short Exec_Norm_Alloc1
 33986                                  ;%endif
 33987                                  
 33988                                  ; 17/12/2022
 33989                                  %if 0
 33990                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 33991                                  	; MSDOS 6.0    			; M063 - Start
 33992                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 33993                                  	mov	bl,[ss:ALLOCMSAVE]
 33994                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 33995                                  
 33996                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 33997                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 33998                                  	;				; N: continue
 33999                                  	;
 34000                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34001                                  	jz	short Exec_No_Mem	; N: no memory
 34002                                  
 34003                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 34004                                  	jmp	short Exec_Norm_Alloc	;    Try again
 34005                                  					; M063 - End
 34006                                  %endif
 34007                                  
 34008                                  Exec_Allocate:
 34009                                  	; 09/09/2018
 34010                                  
 34011                                  	; M005 - START
 34012                                  	; If there is no STACK segment for this exe file and if this
 34013                                  	; not an overlay and the resident size is less than 64K - 
 34014                                  	; 256 bytes we shall add 256 bytes to the programs 
 34015                                  	; resident memory requirement and set Exec_SP to this value.
 34016                                  	
 34017                                  	; 17/12/2022
 34018 00005B62 29DB                    	sub	bx,bx ; 0	
 34019                                  
 34020                                  	; MSDOS 6.0
 34021                                  	;;mov	byte [bp-29],0
 34022                                  	;mov	Exec_NoStack,0
 34023                                  	; 17/12/2022
 34024 00005B64 885EE3                  	mov	Exec_NoStack,bl ; 0
 34025 00005B67 391E[D60F]              	cmp	[exec_SS],bx ; 0
 34026                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 34027 00005B6B 7511                    	jne	short ea1		; Y: continue normal processing
 34028 00005B6D 391E[D80F]              	cmp	[exec_SP],bx ; 0
 34029                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 34030 00005B71 750B                    	jne	short ea1		; Y: continue normal processing
 34031                                  
 34032                                  	;inc	byte [bp-29]
 34033 00005B73 FE46E3                  	inc	Exec_NoStack
 34034 00005B76 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 34035 00005B79 7303                    	jae	short ea1		; Y: don't set Exec_SP
 34036                                  
 34037 00005B7B 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 34038                                  ea1:
 34039                                  	; M005 - END
 34040                                  
 34041                                  	; MSDOS 6.0			; M000 - start
 34042                                  	; 20/05/2019
 34043                                  	; (ds = ss = DOSDATA)
 34044 00005B7E F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 34045                                  					; Q: is the alloc strat high_first
 34046 00005B83 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 34047                                  					; Y: set high_only bit
 34048 00005B85 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 34049                                  					; M000 - end
 34050                                  Exec_Norm_Alloc:
 34051 00005B8A A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd
 34052                                  Exec_Norm_Alloc1:	; 02/06/2019
 34053                                  					; M000: attempt at allocating memory
 34054                                  	; MSDOS 3.3
 34055                                  	;push	ax			; M000
 34056                                  
 34057 00005B8D BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 34058 00005B90 1E                      	push	DS
 34059                                  	;invoke	$Alloc			; should have carry set and BX has max
 34060 00005B91 E86405                  	call	_$ALLOC
 34061 00005B94 1F                      	pop	DS
 34062                                  
 34063                                  	; MSDOS 6.0
 34064 00005B95 A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 34065                                  	; MSDOS 3.3
 34066                                  	;pop	ax			; M000
 34067                                  
 34068 00005B98 83C010                  	add	AX,10h			; room for header
 34069 00005B9B 83FB11                  	cmp	BX,11h			; enough room for a header
 34070                                  	; MSDOS 6.0
 34071 00005B9E 72A9                    	jb	short Exec_Chk_Mem	; M000
 34072                                  	; MSDOS 3.3	
 34073                                  	;jb	short Exec_No_Mem
 34074                                  
 34075 00005BA0 39D8                    	cmp	AX,BX			; is there enough for bare image?
 34076                                  	; MSDOS 6.0
 34077 00005BA2 77A5                    	ja	short Exec_Chk_Mem	; M000
 34078                                  	; MSDOS 3.3
 34079                                  	;ja	short Exec_No_Mem
 34080                                  
 34081                                  	;test	byte [bp-6],0FFh
 34082 00005BA4 F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 34083 00005BA8 7518                    	jnz	short Exec_BX_Max	; use max
 34084                                  
 34085                                  	; 09/09/2018
 34086                                  
 34087 00005BAA 0306[D20F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 34088                                  	; MSDOS 6.0
 34089 00005BAE 7299                    	jc	short Exec_Chk_Mem	; M000
 34090                                  	; MSDOS 3.3
 34091                                  	;jc	short Exec_No_Mem
 34092                                  
 34093 00005BB0 39D8                    	cmp	AX,BX			; enough space?
 34094                                  	; MSDOS 6.0
 34095 00005BB2 7795                    	ja	short Exec_Chk_Mem	; M000: nope...
 34096                                  	; MSDOS 3.3
 34097                                  	;ja	short Exec_No_Mem
 34098                                  
 34099 00005BB4 2B06[D20F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 34100 00005BB8 0306[D40F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 34101 00005BBC 7204                    	jc	short Exec_BX_Max
 34102                                  
 34103 00005BBE 39D8                    	cmp	AX,BX
 34104 00005BC0 7602                    	jbe	short Exec_Got_Block
 34105                                  
 34106                                  Exec_BX_Max:
 34107 00005BC2 89D8                    	mov	AX,BX
 34108                                  
 34109                                  Exec_Got_Block:
 34110                                  	; 03/08/2018 - Retro DOS v3.0
 34111                                  
 34112 00005BC4 1E                      	push	DS
 34113 00005BC5 89C3                    	mov	BX,AX
 34114                                  	;mov	[bp-16],bx
 34115 00005BC7 895EF0                  	mov	Exec_Size,BX
 34116                                  	;invoke	$Alloc			; get the space
 34117 00005BCA E82B05                  	call	_$ALLOC
 34118 00005BCD 1F                      	pop	DS
 34119                                  	; MSDOS 6.0
 34120                                  	;jc	short Exec_Chk_Mem	; M000
 34121                                  	; MSDOS 3.3
 34122                                  	;;jc	short Exec_No_Mem
 34123                                  	; 20/05/2019
 34124 00005BCE 7303                    	jnc	short ea0
 34125 00005BD0 E976FF                  	jmp	Exec_Chk_Mem
 34126                                  ea0:
 34127                                  	; MSDOS 6.0
 34128 00005BD3 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 34129 00005BD7 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 34130                                  
 34131                                  ;M029; Begin changes
 34132                                  ; This code does special handling for programs with no stack segment. If so,
 34133                                  ;check if the current block is larger than 64K. If so, we do not modify
 34134                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 34135                                  ;case Exec_SS is not changed.
 34136                                  
 34137                                  	; MSDOS 6.0
 34138                                  	;cmp	byte [bp-29],0
 34139 00005BDB 807EE300                	cmp	Exec_NoStack,0
 34140                                  	;je	@f
 34141 00005BDF 7412                    	je	short ea2
 34142                                  
 34143 00005BE1 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 34144                                  	;jae	@f			; Y: Exec_SP = 0
 34145 00005BE5 730C                    	jae	short ea2
 34146                                  
 34147                                  ;Make Exec_SP point at the top of the memory block
 34148                                  
 34149 00005BE7 B104                    	mov	cl,4
 34150 00005BE9 D3E3                    	shl	bx,cl			; get byte offset
 34151 00005BEB 81EB0001                	sub	bx,100h			; take care of PSP
 34152 00005BEF 891E[D80F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 34153                                  ea2:
 34154                                  ;@@:
 34155                                  ;M029; end changes
 34156                                  
 34157                                  	;mov	[bp-18],ax
 34158 00005BF3 8946EE                  	mov	Exec_Load_Block,AX
 34159 00005BF6 83C010                  	add	AX,10h
 34160                                  	;test	byte [bp-6],0FFh
 34161 00005BF9 F646FAFF                	test	Exec_Load_High,-1
 34162 00005BFD 7409                    	jz	short Exec_Use_AX	; use ax for load info
 34163                                  
 34164                                  	;add	ax,[bp-16]
 34165 00005BFF 0346F0                  	add	AX,Exec_Size		; go to end
 34166                                  	;sub	ax,[bp-12]
 34167 00005C02 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 34168 00005C05 83E810                  	sub	AX,10h			; drop off pdb
 34169                                  
 34170                                  Exec_Use_AX:
 34171                                  	;mov	[bp-10],ax
 34172 00005C08 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 34173                                  	;mov	[bp-20],ax
 34174 00005C0B 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 34175                                  
 34176                                  	; Determine the location in the file of the beginning of
 34177                                  	; the resident
 34178                                  
 34179                                  ; 17/12/2022
 34180                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34181                                  ;%if 0
 34182                                  
 34183                                  Exec_Find_Res:
 34184                                  	; MSDOS 6.0
 34185                                  	;;mov	dx,[bp-20]
 34186                                  	;mov	DX,Exec_DMA ; *+*
 34187                                  	;;mov	[bp-28],dx
 34188                                  	;mov	Exec_DMA_Save,DX
 34189                                  
 34190                                  	; 17/12/2022
 34191                                  	; AX = Exec_DMA
 34192                                  
 34193                                  	; 02/06/2019 - Retro DOS v4.0
 34194                                  	;mov	[bp-28],ax ; *+*
 34195 00005C0E 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 34196                                  
 34197                                  ;%endif
 34198                                  
 34199                                  ; 17/12/2022
 34200                                  %if 0
 34201                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 34202                                  Exec_Find_Res:
 34203                                  	;mov	dx,[bp-20]
 34204                                  	mov	DX,Exec_DMA ; *+*
 34205                                  	;mov	[bp-28],dx
 34206                                  	mov	Exec_DMA_Save,DX
 34207                                  %endif
 34208                                  
 34209                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34210 00005C11 8B16[D00F]              	mov	DX,[exec_par_dir]
 34211 00005C15 52                      	push	DX
 34212 00005C16 B104                    	mov	CL,4
 34213 00005C18 D3E2                    	shl	DX,CL			; low word of location
 34214 00005C1A 58                      	pop	AX
 34215 00005C1B B10C                    	mov	CL,12
 34216 00005C1D D3E8                    	shr	AX,CL			; high word of location
 34217 00005C1F 89C1                    	mov	CX,AX			; CX <- high
 34218                                  
 34219                                  		; Read in the resident image (first, seek to it)
 34220                                  	;mov	bx,[bp-8]
 34221 00005C21 8B5EF8                  	mov	BX,Exec_FH
 34222 00005C24 1E                      	push	DS
 34223 00005C25 30C0                    	xor	AL,AL
 34224                                  	;invoke	$Lseek			; Seek to resident
 34225 00005C27 E8A30A                  	call	_$LSEEK
 34226 00005C2A 1F                      	pop	DS
 34227 00005C2B 7303                    	jnc	short Exec_Big_Read
 34228                                  
 34229 00005C2D E906FF                  	jmp	Exec_Bomb
 34230                                  
 34231                                  Exec_Big_Read:				; Read resident into memory
 34232                                  	;mov	bx,[bp-12]
 34233 00005C30 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 34234 00005C33 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 34235 00005C37 7203                    	jb	short Exec_Read_OK
 34236                                  
 34237 00005C39 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 34238                                  
 34239                                  Exec_Read_OK:
 34240                                  	;sub	[bp-12],bx
 34241 00005C3C 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 34242 00005C3F 53                      	push	BX
 34243 00005C40 B104                    	mov	CL,4
 34244 00005C42 D3E3                    	shl	BX,CL			; Get count in bytes from paras
 34245 00005C44 89D9                    	mov	CX,BX			; Count in correct register
 34246 00005C46 1E                      	push	DS
 34247                                  	;mov	ds,[bp-20]
 34248 00005C47 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 34249                                  
 34250 00005C4A 31D2                    	xor	DX,DX
 34251 00005C4C 51                      	push	CX			; Save our count
 34252 00005C4D E80903                  	call	ExecRead
 34253 00005C50 59                      	pop	CX			; Get old count to verify
 34254 00005C51 1F                      	pop	DS
 34255 00005C52 7248                    	jc	short Exec_Bad_FileJ
 34256                                  
 34257 00005C54 39C1                    	cmp	CX,AX			; Did we read enough?
 34258 00005C56 5B                      	pop	BX			; Get paragraph count back
 34259 00005C57 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 34260                                  
 34261                                  	; The read did not match the request. If we are off by 512
 34262                                  	; bytes or more then the header lied and we have an error.
 34263                                  
 34264 00005C59 29C1                    	sub	CX,AX
 34265 00005C5B 81F90002                	cmp	CX,512
 34266 00005C5F 733B                    	jae	short Exec_Bad_FileJ
 34267                                  
 34268                                  	; We've read in CX bytes... bump DTA location
 34269                                  
 34270                                  ExecCheckEnd:
 34271                                  	;add	[bp-20],bx
 34272 00005C61 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 34273                                  	;test	word [bp-12],0FFFFh
 34274 00005C64 F746F4FFFF              	test	Exec_Res_Len_Para,-1
 34275 00005C69 75C5                    	jnz	short Exec_Big_Read
 34276                                  
 34277                                  	; The image has now been read in. We must perform relocation
 34278                                  	; to the current location.
 34279                                  
 34280                                  exec_do_reloc:
 34281                                  	;mov	cx,[bp-10]
 34282 00005C6B 8B4EF6                  	mov	CX,Exec_Rel_Fac
 34283 00005C6E A1[D60F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 34284 00005C71 01C8                    	add	AX,CX			; and relocate him
 34285 00005C73 A3[C20F]                	mov	[exec_init_SS],AX 	; rms;NSS
 34286                                  
 34287 00005C76 A1[D80F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 34288 00005C79 A3[C00F]                	mov	[exec_init_SP],AX 	; rms;NSS
 34289                                  
 34290 00005C7C C406[DC0F]              	les	AX,[exec_IP]		; rms;NSS
 34291 00005C80 A3[C40F]                	mov	[exec_init_IP],AX 	; rms;NSS
 34292 00005C83 8CC0                    	mov	AX,ES			; rms;NSS
 34293 00005C85 01C8                    	add	AX,CX			; relocated...
 34294 00005C87 A3[C60F]                	mov	[exec_init_CS],AX 	; rms;NSS
 34295                                  
 34296 00005C8A 31C9                    	xor	CX,CX
 34297 00005C8C 8B16[E00F]              	mov	DX,[exec_rle_table]	; rms;NSS
 34298                                  	;mov	bx,[bp-8]
 34299 00005C90 8B5EF8                  	mov	BX,Exec_FH
 34300 00005C93 1E                      	push	DS
 34301 00005C94 31C0                    	xor	AX,AX
 34302                                  	;invoke	$Lseek
 34303 00005C96 E8340A                  	call	_$LSEEK
 34304 00005C99 1F                      	pop	DS
 34305 00005C9A 7303                    	jnc	short exec_get_entries
 34306                                  
 34307                                  Exec_Bad_FileJ:
 34308 00005C9C E995FE                  	jmp	Exec_Bad_File
 34309                                  
 34310                                  exec_get_entries:
 34311 00005C9F 8B16[CE0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 34312                                  
 34313                                  exec_read_reloc:
 34314 00005CA3 52                      	push	DX
 34315                                  	;mov	dx,OPENBUF
 34316 00005CA4 BA[BE03]                	mov	DX,Exec_Internal_Buffer
 34317                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 34318                                  	;mov	cx,396 ; MSDOS 6.0
 34319 00005CA7 B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 34320 00005CAA 1E                      	push	DS
 34321 00005CAB E8AB02                  	call	ExecRead
 34322 00005CAE 07                      	pop	ES
 34323 00005CAF 5A                      	pop	DX
 34324 00005CB0 72EA                    	jc	short Exec_Bad_FileJ
 34325                                  
 34326                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 34327                                  	;mov	cx,99 ;  MSDOS 6.0
 34328 00005CB2 B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 34329                                  					; Pointer to byte location in header
 34330                                  	;mov	di,OPENBUF
 34331 00005CB5 BF[BE03]                	mov	DI,Exec_Internal_Buffer
 34332                                  	;mov	si,[bp-10]
 34333 00005CB8 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 34334                                  
 34335                                  exec_reloc_one:
 34336 00005CBB 09D2                    	or	DX,DX			; Any more entries?
 34337 00005CBD 7416                    	jz	short Exec_Set_PDBJ
 34338                                  
 34339                                  exec_get_addr:
 34340 00005CBF 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 34341 00005CC2 8CD8                    	mov	AX,DS			; Relocate address of item
 34342                                  
 34343                                  	; MSDOS 6.0
 34344                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 34345                                  	;add	ax,[bp-28]
 34346 00005CC4 0346E4                  	add	AX,Exec_DMA_Save
 34347                                  
 34348 00005CC7 8ED8                    	mov	DS,AX
 34349 00005CC9 0137                    	add	[BX],SI
 34350 00005CCB 83C704                  	add	DI,4
 34351 00005CCE 4A                      	dec	DX
 34352 00005CCF E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 34353                                  
 34354                                  	; We've exhausted a single buffer's worth. Read in the next
 34355                                  	; piece of the relocation table.
 34356                                  
 34357 00005CD1 06                      	push	ES
 34358 00005CD2 1F                      	pop	DS
 34359 00005CD3 EBCE                    	jmp	short exec_read_reloc
 34360                                  
 34361                                  Exec_Set_PDBJ:
 34362                                  	; MSDOS 6.0
 34363                                  	
 34364                                  	; We now determine if this is a buggy exe packed file and if
 34365                                  	; so we patch in the right code. Note that fixexepatch will
 34366                                  	; point to a ret if dos loads low. The load segment as
 34367                                  	; determined above will be in exec_dma_save
 34368                                  	
 34369 00005CD5 06                      	push	es
 34370 00005CD6 50                      	push	ax			; M030
 34371 00005CD7 51                      	push	cx			; M030
 34372                                  	;mov	es,[bp-28]
 34373 00005CD8 8E46E4                  	mov	es,Exec_DMA_Save
 34374 00005CDB 36A1[C60F]              	mov	ax,[ss:exec_init_CS]	; M030
 34375 00005CDF 368B0E[C40F]            	mov	cx,[ss:exec_init_IP]	; M030
 34376 00005CE4 36FF16[1212]            	call	word [ss:FixExePatch]
 34377                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34378                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 34379                                  	;call	word [ss:Rational386PatchPtr]
 34380 00005CE9 59                      	pop	cx			; M030
 34381 00005CEA 58                      	pop	ax			; M030
 34382 00005CEB 07                      	pop	es
 34383                                  
 34384 00005CEC E9DD00                  	jmp	Exec_Set_PDB
 34385                                  
 34386                                  Exec_No_Memj:
 34387 00005CEF E93EFE                  	jmp	Exec_No_Mem
 34388                                  
 34389                                  	; we have a .COM file. First, determine if we are merely
 34390                                  	; loading an overlay.
 34391                                  
 34392                                  Exec_Com_File:
 34393                                  	;test	byte [bp-5],2
 34394 00005CF2 F646FB02                	test	Exec_Func,exec_func_overlay
 34395 00005CF6 742D                    	jz	short Exec_Alloc_Com_File
 34396                                  	;lds	si,[bp-4]
 34397 00005CF8 C576FC                  	lds	SI,Exec_Blk		; get arg block
 34398 00005CFB AD                      	lodsw				; get load address
 34399                                  	;mov	[bp-20],ax
 34400 00005CFC 8946EC                  	mov	Exec_DMA,AX
 34401 00005CFF B8FFFF                  	mov	AX,0FFFFh
 34402 00005D02 EB63                    	jmp	short Exec_Read_Block	; read it all!
 34403                                  
 34404                                  Exec_Chk_Com_Mem:			
 34405                                  	; MSDOS 6.0	     		; M063 - Start
 34406 00005D04 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 34407 00005D08 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 34408 00005D0D 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 34409 00005D12 F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 34410 00005D15 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 34411                                  					; N: continue
 34412                                  	
 34413 00005D17 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 34414 00005D19 74D4                    	jz	short Exec_No_Memj	; N: no memory
 34415                                  	
 34416                                  	;mov	ax,[bp-18]
 34417 00005D1B 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated
 34418 00005D1E 31DB                    	xor	bx,bx			; M047: bx => free arena
 34419 00005D20 E86B02                  	call	ChangeOwner		; M047: free this block
 34420                                  	
 34421 00005D23 EB0E                    	jmp	short Exec_Norm_Com_Alloc
 34422                                  					; M063 - End
 34423                                  	
 34424                                  	; We must allocate the max possible size block (ick!)
 34425                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 34426                                  	; size of block.
 34427                                  
 34428                                  Exec_Alloc_Com_File:
 34429                                  	; MSDOS 6.0			; M000 -start
 34430 00005D25 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 34431                                  					; Q: is the alloc strat high_first
 34432 00005D2B 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 34433                                  					; Y: set high_only bit
 34434 00005D2D 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 34435                                  					; M000 - end
 34436                                  Exec_Norm_Com_Alloc:			; M000
 34437                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34438 00005D33 BBFFFF                  	mov	BX,0FFFFh
 34439                                  	;invoke	$Alloc			; largest piece available as error
 34440 00005D36 E8BF03                  	call	_$ALLOC
 34441 00005D39 09DB                    	or	BX,BX
 34442                                  	; MSDOS 6.0
 34443 00005D3B 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 34444                                  	; MSDOS 3.3
 34445                                  	;jz	short Exec_No_Memj
 34446                                  
 34447                                  	;mov	[bp-16],bx
 34448 00005D3D 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 34449 00005D40 53                      	push	BX
 34450                                  	;invoke	$ALLOC			; largest piece available
 34451 00005D41 E8B403                  	call	_$ALLOC
 34452 00005D44 5B                      	pop	BX			; get size of block...
 34453                                  	;mov	[bp-18],ax
 34454 00005D45 8946EE                  	mov	Exec_Load_Block,AX
 34455                                  
 34456 00005D48 83C010                  	add	AX,10h			; increment for header
 34457                                  	;mov	[bp-20],ax
 34458 00005D4B 8946EC                  	mov	Exec_DMA,AX
 34459                                  
 34460 00005D4E 31C0                    	xor	AX,AX			; presume 64K read...
 34461 00005D50 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 34462 00005D54 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 34463                                  
 34464 00005D56 89D8                    	mov	AX,BX			; convert size to bytes
 34465 00005D58 B104                    	mov	CL,4
 34466 00005D5A D3E0                    	shl	AX,CL
 34467                                  	; 17/12/2022
 34468                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34469                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 34470                                  	; MSDOS 5.0
 34471                                  	;cmp	AX,100h   
 34472                                  	; 02/06/2019 - Retro DOS v4.0
 34473                                  	; MSDOS 6.0
 34474                                          ; 17/12/2022
 34475 00005D5C 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 34476 00005D5F 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34477                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 34478                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 34479                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 34480                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 34481                                  
 34482                                  					; M047: size of the block is < 64K
 34483 00005D61 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 34484                                  
 34485                                  Exec_Read_Com:
 34486                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34487 00005D64 2D0001                  	sub	AX,100h 		; remember size of psp
 34488                                  Exec_Read_Block:
 34489 00005D67 50                      	push	AX			; save number to read
 34490                                  	;mov	bx,[bp-8]
 34491 00005D68 8B5EF8                  	mov	BX,Exec_FH		; of com file
 34492 00005D6B 31C9                    	xor	CX,CX			; but seek to 0:0
 34493 00005D6D 31C0                    	xor	AX,AX			; seek relative to beginning
 34494                                  	;mov	DX,CX
 34495                                  	; 08/03/2024
 34496 00005D6F 99                      	cwd
 34497                                  	;invoke	$Lseek			; back to beginning of file
 34498 00005D70 E85A09                  	call	_$LSEEK
 34499 00005D73 59                      	pop	CX			; number to read
 34500                                  	;mov	ds,[bp-20]
 34501 00005D74 8E5EEC                  	mov	DS,Exec_DMA
 34502 00005D77 31D2                    	xor	DX,DX
 34503 00005D79 51                      	push	CX
 34504 00005D7A E8DC01                  	call	ExecRead
 34505 00005D7D 5E                      	pop	SI			; get number of bytes to read
 34506 00005D7E 7303                    	jnc	short OkRead
 34507 00005D80 E9B1FD                  	jmp	Exec_Bad_File
 34508                                  
 34509                                  	; 10/09/2018
 34510                                  OkRead:
 34511 00005D83 39F0                    	cmp	AX,SI			; did we read them all?
 34512                                  	; MSDOS 6.0
 34513                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no
 34514                                  	; MSDOS 3.3
 34515                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 34516 00005D85 7503                    	jne	short OkRead2
 34517 00005D87 E97AFF                  	jmp	Exec_Chk_Com_Mem
 34518                                  OkRead2:
 34519                                  	; MSDOS 6.0
 34520 00005D8A 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 34521 00005D8F 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 34522                                  
 34523                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34524                                  	;test	byte [bp-5],2
 34525 00005D94 F646FB02                	test	Exec_Func,exec_func_overlay
 34526 00005D98 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 34527                                  
 34528                                  	;mov	ax,[bp-20]
 34529 00005D9A 8B46EC                  	mov	AX,Exec_DMA
 34530 00005D9D 83E810                  	sub	AX,10h
 34531 00005DA0 36A3[C60F]              	mov	[SS:exec_init_CS],AX
 34532 00005DA4 36C706[C40F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 34533                                  
 34534                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 34535                                  	; of 0 on stack.
 34536                                  
 34537 00005DAB 81C6FE00                	add	SI,0FEh 		; make room for stack
 34538                                  
 34539                                  	; MSDOS 6.0
 34540 00005DAF 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 34541 00005DB2 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 34542 00005DB4 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 34543                                  
 34544                                  Exec_St_Ok:
 34545                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34546 00005DB8 368936[C00F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 34547 00005DBD 36A3[C20F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 34548 00005DC1 8ED8                    	mov	DS,AX
 34549 00005DC3 C7040000                	mov	WORD [SI],0		; 0 for return
 34550                                  
 34551                                  	; MSDOS 6.0
 34552                                  
 34553                                  	; M068
 34554                                  	;
 34555                                  	; We now determine if this is a Copy Protected App. If so the
 34556                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to
 34557                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 34558                                  
 34559 00005DC7 36FF16[6100]            	call	word [ss:ChkCopyProt]
 34560                                  
 34561                                  Exec_Set_PDB:
 34562                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34563                                  	;mov	bx,[bp-8]
 34564 00005DCC 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 34565 00005DCF E8A001                  	call	Exec_Dealloc
 34566 00005DD2 55                      	push	BP
 34567                                  	;invoke	$Close			; release the jfn
 34568 00005DD3 E88D07                  	call	_$CLOSE
 34569 00005DD6 5D                      	pop	BP
 34570 00005DD7 E88A01                  	call	Exec_Alloc
 34571                                  	;test	byte [bp-5],2
 34572 00005DDA F646FB02                	test	Exec_Func,exec_func_overlay
 34573 00005DDE 743A                    	jz	short Exec_Build_Header
 34574                                  
 34575                                  	; MSDOS 6.0
 34576 00005DE0 E8B901                  	call	Scan_Execname
 34577 00005DE3 E8CD01                  	call	Scan_Special_Entries
 34578                                  ;SR;
 34579                                  ;The current lie strategy uses the PSP to store the lie version. However,
 34580                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 34581                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 34582                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 34583                                  ;Sysinit and therefore must be a device driver load. We then get the lie
 34584                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 34585                                  ;issues the version check, it gets the lie version until the next overlay
 34586                                  ;call is issued.
 34587                                  
 34588 00005DE6 36803E[3F10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 34589 00005DEC 7426                    	je	short norm_ovl		;yes, no special handling
 34590 00005DEE 56                      	push	si
 34591 00005DEF 06                      	push	es
 34592 00005DF0 36C436[4010]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 34593                                  	 
 34594                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s)
 34595 00005DF5 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 34596 00005DF9 7411                    	je	short sysinit_done	;no, Sysinit is finished
 34597                                  	
 34598 00005DFB 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 34599 00005E00 36FF36[BD0E]            	push	word [ss:SPECIAL_VERSION]
 34600 00005E05 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 34601                                  		;;; PDB.VERSION
 34602 00005E0A EB06                    	jmp	short setver_done
 34603                                  sysinit_done:
 34604 00005E0C 36C606[3F10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 34605                                  setver_done:
 34606 00005E12 07                      	pop	es
 34607 00005E13 5E                      	pop	si
 34608                                  norm_ovl:
 34609                                  	;leave
 34610 00005E14 89EC                    	mov	sp,bp
 34611 00005E16 5D                      	pop	bp
 34612                                  
 34613                                  	;transfer SYS_RET_OK		; overlay load -> done
 34614 00005E17 E91BA8                  	jmp	SYS_RET_OK
 34615                                  
 34616                                  Exec_Build_Header:
 34617                                  	;mov	dx,[bp-18]
 34618 00005E1A 8B56EE                  	mov	DX,Exec_Load_Block
 34619                                  					; assign the space to the process
 34620                                  	;mov	si,1
 34621 00005E1D BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 34622                                  	;mov	ax,[bp-14]
 34623 00005E20 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 34624 00005E23 09C0                    	or	AX,AX
 34625 00005E25 7405                    	jz	short No_Owner		; no environment
 34626                                  
 34627 00005E27 48                      	dec	AX			; point to header
 34628 00005E28 8ED8                    	mov	DS,AX
 34629 00005E2A 8914                    	mov	[SI],DX 		; assign ownership
 34630                                  No_Owner:
 34631                                  	;mov	ax,[bp-18]
 34632                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 34633                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34634                                  	; 17/12/2022
 34635 00005E2C 89D0                    	mov	ax,dx ; 06/06/2019
 34636                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 34637                                  	
 34638 00005E2E 48                      	dec	AX
 34639 00005E2F 8ED8                    	mov	DS,AX			; point to header
 34640 00005E31 8914                    	mov	[SI],DX 		; assign ownership
 34641                                  
 34642                                  	; MSDOS 6.0
 34643 00005E33 1E                      	push	DS			;AN000;MS. make ES=DS
 34644 00005E34 07                      	pop	ES			;AN000;MS.
 34645                                  	;mov	di,8
 34646 00005E35 BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 34647 00005E38 E86101                  	call	Scan_Execname		;AN007;MS. parse execname
 34648                                  					;	   ds:si->name, cx=name length
 34649 00005E3B 51                      	push	CX			;AN007;;MS. save for fake version
 34650 00005E3C 56                      	push	SI			;AN007;;MS. save for fake version
 34651                                  
 34652                                  MoveName:				;AN000;
 34653 00005E3D AC                      	lodsb				;AN000;;MS. get char
 34654 00005E3E 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.', may be name.exe
 34655 00005E40 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 34656                                  					;AN000;
 34657 00005E42 AA                      	stosb				;AN000;;MS. move char
 34658                                  					; MSKK bug fix - limit length copied
 34659 00005E43 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 34660 00005E46 7302                    	jae	short Mem_Done		; jump if so
 34661                                  	;
 34662 00005E48 E2F3                    	loop	MoveName		;AN000;;MS. continue
 34663                                  Mem_Done:				;AN000;
 34664 00005E4A 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 34665                                  	;cmp	di,16
 34666 00005E4C 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 34667 00005E4F 7301                    	jae	short Fill8		;AN000;MS.
 34668                                  	
 34669 00005E51 AA                      	stosb				;AN000;MS.
 34670                                  	
 34671                                  Fill8:					;AN000;
 34672 00005E52 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 34673 00005E53 59                      	pop	CX			;AN007;MS.
 34674                                  	
 34675 00005E54 E85C01                  	call	Scan_Special_Entries	;AN007;MS.
 34676                                  
 34677                                  	; MSDOS 3.3 (& MSDOS 6.0)
 34678 00005E57 52                      	push	DX
 34679                                  	;mov	si,[bp-16]
 34680 00005E58 8B76F0                  	mov	SI,Exec_Size
 34681 00005E5B 01D6                    	add	SI,DX
 34682                                  	;Invoke	$Dup_PDB		; ES is now PDB
 34683 00005E5D E81AB2                  	call	_$DUP_PDB
 34684 00005E60 5A                      	pop	DX
 34685                                  
 34686                                  	;push	word [bp-14]
 34687 00005E61 FF76F2                  	push	Exec_Environ
 34688                                  	;pop	WORD [ES:2Ch]
 34689 00005E64 268F062C00              	pop	word [ES:PDB.ENVIRON]
 34690                                  
 34691                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 34692                                  					; version number in PSP
 34693 00005E69 36FF36[BD0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 34694 00005E6E 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 34695                                  		; PDB.VERSION
 34696                                  
 34697                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 34698                                  	;lds	si,[bp-4]
 34699 00005E73 C576FC                  	lds	SI,Exec_Blk		; get the block
 34700 00005E76 1E                      	push	DS			; save its location
 34701 00005E77 56                      	push	SI
 34702                                  	;lds	si,[si+6]
 34703 00005E78 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 34704                                  
 34705                                  	; DS points to user space 5C FCB
 34706                                  
 34707 00005E7B B90C00                  	mov	CX,12			; copy drive, name and ext
 34708 00005E7E 51                      	push	CX
 34709 00005E7F BF5C00                  	mov	DI,5Ch
 34710 00005E82 8A1C                    	mov	BL,[SI]
 34711 00005E84 F3A4                    	rep	movsb
 34712                                  
 34713                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 34714                                  
 34715                                  	;xor	AX,AX			; zero extent, etc for CPM
 34716 00005E86 91                      	xchg	ax,cx	; 08/03/2024
 34717 00005E87 AB                      	stosw
 34718 00005E88 AB                      	stosw
 34719                                  
 34720                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 34721                                  
 34722 00005E89 59                      	pop	CX
 34723 00005E8A 5E                      	pop	SI			; get block
 34724 00005E8B 1F                      	pop	DS
 34725 00005E8C 1E                      	push	DS			; save (again)
 34726 00005E8D 56                      	push	SI
 34727                                  	;lds	si,[si+0Ah]
 34728 00005E8E C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 34729                                  
 34730                                  	; DS points to user space 6C FCB
 34731                                  
 34732 00005E91 8A3C                    	mov	BH,[SI] 		; do same as above
 34733 00005E93 F3A4                    	rep	movsb
 34734 00005E95 AB                      	stosw
 34735 00005E96 AB                      	stosw
 34736 00005E97 5E                      	pop	SI			; get block (last time)
 34737 00005E98 1F                      	pop	DS
 34738                                  	;ld	si,[si+2]
 34739 00005E99 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 34740                                  
 34741                                  	; DS points to user space 80 command line
 34742                                  
 34743 00005E9C 80C980                  	or	CL,80h
 34744 00005E9F 89CF                    	mov	DI,CX
 34745 00005EA1 F3A4                    	rep	movsb			; Wham!
 34746                                  
 34747                                  	; Process BX into default AX (validity of drive specs on args).
 34748                                  	; We no longer care about DS:SI.
 34749                                  
 34750 00005EA3 FEC9                    	dec	CL			; get 0FFh in CL
 34751 00005EA5 88F8                    	mov	AL,BH
 34752 00005EA7 30FF                    	xor	BH,BH
 34753                                  	;invoke	GetVisDrv
 34754 00005EA9 E8100A                  	call	GetVisDrv
 34755 00005EAC 7302                    	jnc	short Exec_BL
 34756                                  
 34757 00005EAE 88CF                    	mov	BH,CL
 34758                                  
 34759                                  Exec_BL:
 34760 00005EB0 88D8                    	mov	AL,BL
 34761 00005EB2 30DB                    	xor	BL,BL
 34762                                  	;invoke	GetVisDrv
 34763 00005EB4 E8050A                  	call	GetVisDrv
 34764 00005EB7 7302                    	jnc	short Exec_Set_Return
 34765                                  
 34766 00005EB9 88CB                    	mov	BL,CL
 34767                                  
 34768                                  Exec_Set_Return:
 34769                                  	;invoke	Get_User_Stack			; get his return address
 34770 00005EBB E8C7A5                  	call	Get_User_Stack
 34771                                  
 34772                                  ; 08/03/2024
 34773                                  %if 0
 34774                                  	;push	word [si+14h]
 34775                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34776                                  	;push	word [si+12h]
 34777                                  	push	word [SI+user_env.user_IP]
 34778                                  	;push	word [si+14h]
 34779                                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 34780                                  	;push	word [si+12h]
 34781                                  	push	word [SI+user_env.user_IP]
 34782                                  	;pop	word [ES:0Ah]
 34783                                  	pop	WORD [ES:PDB.EXIT]
 34784                                  	;pop	word [ES:0Ch]
 34785                                  	pop	WORD [ES:PDB.EXIT+2]
 34786                                  %else
 34787                                  	; 07/03/2024 (PCDOS 7.1 IBMDOS.COM)
 34788                                  	;;;
 34789                                  	;lds	ax,[si+12h]
 34790 00005EBE C54412                  	lds	ax,[SI+user_env.user_IP] ; suck out the CS and IP
 34791 00005EC1 1E                      	push	ds              
 34792 00005EC2 50                      	push	ax
 34793                                  	;mov	[es:0Ah],ax
 34794 00005EC3 26A30A00                	mov	[ES:PDB.EXIT],ax
 34795                                  	;mov	[es:0Ch],ds
 34796 00005EC7 268C1E0C00              	mov	[ES:PDB.EXIT+2],ds
 34797                                  	;;;
 34798                                  %endif
 34799                                  	
 34800 00005ECC 31C0                    	xor	AX,AX
 34801 00005ECE 8ED8                    	mov	DS,AX
 34802                                  					; save them where we can get them
 34803                                  					; later when the child exits.
 34804                                  	;pop	word [88h]
 34805 00005ED0 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 34806                                  	;pop	word [90h]
 34807 00005ED4 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 34808                                  
 34809 00005ED8 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 34810 00005EDF 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 34811 00005EE4 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 34812                                  
 34813                                  	;test	byte [bp-5],1
 34814 00005EE9 F646FB01                	test	Exec_Func,exec_func_no_execute
 34815 00005EED 7427                    	jz	short exec_go
 34816                                  
 34817 00005EEF 36C536[C00F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 34818                                  	;les	di,[bp-4]
 34819 00005EF4 C47EFC                  	les	DI,Exec_Blk		; and block for return
 34820                                  	;mov	[es:di+10h],ds
 34821 00005EF7 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 34822                                  
 34823 00005EFB 4E                      	dec	SI			; 'push' default AX
 34824 00005EFC 4E                      	dec	SI
 34825 00005EFD 891C                    	mov	[SI],BX 		; save default AX reg
 34826                                  	;mov	[es:di+0Eh], si
 34827 00005EFF 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 34828                                  
 34829 00005F03 36C506[C40F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 34830                                  	;mov	[es:di+14h],ds
 34831 00005F08 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 34832                                  	;mov	[es:di+12h],ax
 34833 00005F0C 26894512                	mov	[ES:DI+EXEC1.IP],AX
 34834                                  	
 34835                                  	;leave
 34836 00005F10 89EC                    	mov	sp,bp
 34837 00005F12 5D                      	pop	bp	
 34838                                  
 34839                                  	;transfer SYS_RET_OK
 34840 00005F13 E91FA7                  	jmp	SYS_RET_OK
 34841                                  
 34842                                  exec_go:
 34843 00005F16 36C536[C40F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 34844 00005F1B 36C43E[C00F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 34845 00005F20 8CC0                    	mov	AX,ES
 34846                                  
 34847                                  	; MSDOS 6.0
 34848 00005F22 36803E[1112]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 34849 00005F28 741A                    	je	short Xfer_To_User	; N: transfer control to user
 34850                                  
 34851 00005F2A 1E                      	push	ds			; Y: control must go to low mem stub
 34852                                  		
 34853 00005F2B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 34854                                  					;    control to user 
 34855 00005F30 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 34856                                  					; M004: Set bit to signal int 21
 34857                                  					; ah = 25 & ah= 49. See dossym.inc 
 34858                                  					; under TAG M003 & M009 for 
 34859                                  					; explanation
 34860 00005F35 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 34861                                  					; M068: going to be turned OFF.
 34862                                  	
 34863 00005F39 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 34864 00005F3B 1F                      	pop	ds
 34865                                  	
 34866 00005F3C 50                      	push	ax			; ret far into the low mem stub
 34867 00005F3D B8[1511]                	mov	ax,disa20_xfer
 34868 00005F40 50                      	push	ax
 34869 00005F41 8CC0                    	mov	AX,ES			; restore ax
 34870 00005F43 CB                      	retf
 34871                                  
 34872                                  Xfer_To_User:
 34873                                  	; DS:SI points to entry point
 34874                                  	; AX:DI points to initial stack
 34875                                  	; DX has PDB pointer
 34876                                  	; BX has initial AX value
 34877                                  
 34878 00005F44 FA                      	cli
 34879                                  	; 15/08/2018
 34880 00005F45 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 34881                                  
 34882 00005F4B 8ED0                    	mov	SS,AX			; set up user's stack
 34883 00005F4D 89FC                    	mov	SP,DI			; and SP
 34884 00005F4F FB                      	sti
 34885                                  
 34886 00005F50 1E                      	push	DS			; fake long call to entry
 34887 00005F51 56                      	push	SI
 34888 00005F52 8EC2                    	mov	ES,DX			; set up proper seg registers
 34889 00005F54 8EDA                    	mov	DS,DX
 34890 00005F56 89D8                    	mov	AX,BX			; set up proper AX
 34891                                  
 34892 00005F58 CB                      	retf
 34893                                  
 34894                                  ; 04/08/2018 - Retro DOS v3.0
 34895                                  
 34896                                  ;----------------------------------------------------------------------------
 34897                                  ;
 34898                                  ;----------------------------------------------------------------------------
 34899                                  
 34900                                  ExecRead:
 34901 00005F59 E81600                  	CALL	Exec_Dealloc
 34902                                  	;mov	bx,[bp-8]
 34903 00005F5C 8B5EF8                  	MOV	bx,Exec_FH
 34904                                  
 34905 00005F5F 55                      	PUSH	BP
 34906 00005F60 E80807                  	call	_$READ
 34907 00005F63 5D                      	POP	BP
 34908                                  
 34909                                  	;CALL	Exec_Alloc
 34910                                  	;retn
 34911                                  	; 18/12/2022
 34912                                  	;jmp	short Exec_Alloc
 34913                                  
 34914                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 34915                                  
 34916                                  ;----------------------------------------------------------------------------
 34917                                  ;
 34918                                  ;----------------------------------------------------------------------------
 34919                                  
 34920                                  Exec_Alloc:
 34921 00005F64 53                      	push	BX
 34922                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34923                                  	; 20/05/2019 - Retro DOS v4.0
 34924                                  	; MSDOS 6.0
 34925 00005F65 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 34926 00005F6A E81000                  	call	ChangeOwners
 34927 00005F6D E892B3                  	call	LCritMEM
 34928 00005F70 5B                      	pop	BX
 34929 00005F71 C3                      	retn
 34930                                  
 34931                                  ;----------------------------------------------------------------------------
 34932                                  ;
 34933                                  ;----------------------------------------------------------------------------
 34934                                  
 34935                                  Exec_Dealloc:
 34936 00005F72 53                      	push	BX
 34937                                  	;mov	bx,0
 34938 00005F73 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 34939 00005F75 E86FB3                  	call	ECritMEM
 34940 00005F78 E80200                  	call	ChangeOwners
 34941 00005F7B 5B                      	pop	BX
 34942 00005F7C C3                      	retn
 34943                                  
 34944                                  ; 18/12/2022
 34945                                  %if 0
 34946                                  ;----------------------------------------------------------------------------
 34947                                  ;
 34948                                  ;----------------------------------------------------------------------------
 34949                                  
 34950                                  Exec_Alloc:
 34951                                  	push	BX
 34952                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 34953                                  	; 20/05/2019 - Retro DOS v4.0
 34954                                  	; MSDOS 6.0
 34955                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 34956                                  	call	ChangeOwners
 34957                                  	call	LCritMEM
 34958                                  	pop	BX
 34959                                  	retn
 34960                                  
 34961                                  %endif
 34962                                  
 34963                                  ;----------------------------------------------------------------------------
 34964                                  ;
 34965                                  ;----------------------------------------------------------------------------
 34966                                  
 34967                                  ChangeOwners:
 34968 00005F7D 9C                      	pushf
 34969 00005F7E 50                      	push	AX
 34970                                  	;mov	ax,[bp-14]
 34971 00005F7F 8B46F2                  	mov	AX,Exec_Environ
 34972 00005F82 E80900                  	call	ChangeOwner
 34973                                  	;mov	ax,[bp-18]
 34974 00005F85 8B46EE                  	mov	AX,Exec_Load_Block
 34975 00005F88 E80300                  	call	ChangeOwner
 34976 00005F8B 58                      	pop	AX
 34977 00005F8C 9D                      	popf
 34978                                  chgown_retn:
 34979 00005F8D C3                      	retn
 34980                                  
 34981                                  ;----------------------------------------------------------------------------
 34982                                  ;
 34983                                  ;----------------------------------------------------------------------------
 34984                                  
 34985                                  ChangeOwner:
 34986 00005F8E 09C0                    	or	AX,AX			; is area allocated?
 34987 00005F90 74FB                    	jz	short chgown_retn	; no, do nothing
 34988 00005F92 48                      	dec	AX
 34989 00005F93 1E                      	push	DS
 34990 00005F94 8ED8                    	mov	DS,AX
 34991 00005F96 891E0100                	mov	[ARENA.OWNER],BX
 34992 00005F9A 1F                      	pop	DS
 34993 00005F9B C3                      	retn
 34994                                  
 34995                                  ;----------------------------------------------------------------------------
 34996                                  ;
 34997                                  ;----------------------------------------------------------------------------
 34998                                  
 34999                                  ; 20/05/2019 - Retro DOS v4.0
 35000                                  
 35001                                  	; MSDOS 6.0
 35002                                  Scan_Execname:
 35003 00005F9C C576E6                  	lds	SI,ExecName		; DS:SI points to name
 35004                                  Scan_Execname1:				; M028
 35005                                  Save_Begin:				;
 35006 00005F9F 89F1                    	mov	CX,SI			; CX= starting addr
 35007                                  Scan0:					;
 35008 00005FA1 AC                      	lodsb				; get char
 35009                                  
 35010 00005FA2 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 35011 00005FA4 74F9                    	jz	short Save_Begin	; yes, save si
 35012 00005FA6 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 35013 00005FA8 74F5                    	jz	short Save_Begin	; yes, save si
 35014 00005FAA 3C00                    	cmp	AL,0			; is end of name
 35015 00005FAC 75F3                    	jnz	short Scan0		; no, continue scanning
 35016 00005FAE 29CE                    	sub	SI,CX			; get name's length
 35017 00005FB0 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 35018                                  
 35019 00005FB2 C3                      	retn
 35020                                  
 35021                                  ;----------------------------------------------------------------------------
 35022                                  ;
 35023                                  ;----------------------------------------------------------------------------
 35024                                  
 35025                                  ; 20/05/2019 - Retro DOS v4.0
 35026                                  
 35027                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35028                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 35029                                  
 35030                                  	; MSDOS 6.0
 35031                                  
 35032                                  Scan_Special_Entries:
 35033                                  
 35034 00005FB3 49                      	dec	CX			; cx= name length
 35035                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 35036                                  					;reset to current version
 35037                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 35038                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 35039                                  	;mov	word [ss:SPECIAL_VERSION],5
 35040                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 35041                                  
 35042                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 35043 00005FB4 36C706[BD0E]0500        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 35044                                  				; 0005h for Retro DOS v4.1 (MSDOS 5.0)
 35045                                  				; 24/09/2023
 35046                                  				; 1606h for Retro DOS v4.2 (MSDOS 6.22)
 35047                                  ;***	call	Reset_Version
 35048                                  
 35049                                  ;M060	push	SS
 35050                                  ;M060	pop	ES
 35051                                  
 35052 00005FBB 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 35053 00005FC0 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 35054 00005FC2 09F8                    	or	AX,DI			;M060; be sure the table exists
 35055 00005FC4 7427                    	jz	short End_List		;M060; If ZR then no table
 35056                                  
 35057                                  GetEntries:
 35058 00005FC6 268A05                  	mov	AL,[ES:DI]		; end of list
 35059 00005FC9 08C0                    	or	AL,AL
 35060 00005FCB 7420                    	jz	short End_List		; yes
 35061                                  
 35062 00005FCD 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 35063 00005FD2 38C8                    	cmp	AL,CL			; same length ?
 35064 00005FD4 751B                    	jnz	short SkipOne 		; no
 35065                                  
 35066 00005FD6 47                      	inc	DI			; es:di -> special name
 35067 00005FD7 51                      	push	CX			; save length and name addr
 35068 00005FD8 56                      	push	SI
 35069                                  
 35070                                  ; M050 - BEGIN
 35071                                  
 35072 00005FD9 50                      	push	ax			; save len
 35073                                  sse_next_char:
 35074 00005FDA AC                      	lodsb
 35075 00005FDB E8E3EE                  	call	UCase
 35076 00005FDE AE                      	scasb
 35077 00005FDF 750D                    	jne	short Not_Matched
 35078 00005FE1 E2F7                    	loop	sse_next_char
 35079                                  	
 35080                                  ;	repz	cmpsb			; same name ?
 35081                                  ;	jnz	short Not_Matched	; no
 35082                                  
 35083 00005FE3 58                      	pop	ax			; take len off the stack
 35084                                  
 35085                                  ; M050 - END
 35086                                  
 35087 00005FE4 268B05                  	mov	AX,[ES:DI]		; get special version
 35088 00005FE7 36A3[BD0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 35089                                  
 35090                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 35091                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 35092                                  
 35093 00005FEB 5E                      	pop	SI
 35094 00005FEC 59                      	pop	CX
 35095                                  	; 18/12/2022
 35096                                  	;jmp	SHORT End_List
 35097                                  
 35098                                  	; 18/12/2022
 35099                                  End_List:
 35100 00005FED C3                      	retn
 35101                                  
 35102                                  Not_Matched:
 35103 00005FEE 58                      	pop	ax			; get len from stack ; M050
 35104 00005FEF 5E                      	pop	SI			; restore si,cx
 35105 00005FF0 59                      	pop	CX
 35106                                  
 35107                                  SkipOne:
 35108 00005FF1 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 35109 00005FF6 30E4                    	xor	AH,AH			; position to next entry
 35110 00005FF8 01C7                    	add	DI,AX
 35111                                  
 35112 00005FFA 83C703                  	add	DI,3			; DI -> next entry length
 35113                                  ;***	add	DI,4			; DI -> next entry length
 35114                                  
 35115 00005FFD EBC7                    	jmp	short GetEntries
 35116                                  
 35117                                  	; 18/12/2022
 35118                                  ;End_List:
 35119                                  	;retn
 35120                                  
 35121                                  ; 04/08/2018 - Retro DOS v3.0
 35122                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 633Dh
 35123                                  
 35124                                  ;----------------------------------------------------------------------------
 35125                                  ;SUBTTL Terminate and stay resident handler
 35126                                  ;
 35127                                  ; Input:    DX is an offset from CurrentPDB at which to
 35128                                  ;	    truncate the current block.
 35129                                  ;
 35130                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 35131                                  ;	    paragraphs long. An exit is simulated via resetting CurrentPDB
 35132                                  ;	    and restoring the vectors.
 35133                                  ;
 35134                                  ;----------------------------------------------------------------------------
 35135                                  
 35136                                  	; 20/05/2019 - Retro DOS v4.0
 35137                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 35138                                  
 35139                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35140                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 35141                                  
 35142                                  _$KEEP_PROCESS:
 35143 00005FFF 50                      	push	AX			; keep exit code around
 35144                                  	;mov	byte [SS:EXIT_TYPE],3
 35145 00006000 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 35146 00006006 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 35147 0000600B 83FA06                  	cmp	DX,6h			; keep enough space around for system
 35148 0000600E 7303                    	jae	short Keep_Shrink	; info
 35149                                  
 35150 00006010 BA0600                  	mov	DX,6h
 35151                                  
 35152                                  Keep_Shrink:
 35153 00006013 89D3                    	mov	BX,DX
 35154 00006015 53                      	push	BX
 35155 00006016 06                      	push	ES
 35156 00006017 E82F02                  	call	_$SETBLOCK		; ignore return codes.
 35157 0000601A 1F                      	pop	DS
 35158 0000601B 5B                      	pop	BX
 35159 0000601C 7207                    	jc	short Keep_Done		; failed on modification
 35160                                  
 35161 0000601E 8CD8                    	mov	AX,DS
 35162 00006020 01D8                    	add	AX,BX
 35163                                  	;mov	[2],ax
 35164 00006022 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 35165                                  
 35166                                  Keep_Done:
 35167 00006025 58                      	pop	AX
 35168 00006026 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 35169                                  
 35170                                  ;----------------------------------------------------------------------------
 35171                                  ;
 35172                                  ;----------------------------------------------------------------------------
 35173                                  
 35174                                  STAY_RESIDENT:
 35175                                  	;mov	ax,3100h
 35176 00006028 B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 35177 0000602B 83C20F                  	add	DX,15
 35178 0000602E D1DA                    	rcr	DX,1
 35179 00006030 B103                    	mov	CL,3
 35180 00006032 D3EA                    	shr	DX,CL
 35181                                  
 35182 00006034 E9D0A2                  	jmp	COMMAND
 35183                                  
 35184                                  ;----------------------------------------------------------------------------
 35185                                  ;SUBTTL $EXIT - return to parent process
 35186                                  ;   Assembler usage:
 35187                                  ;	    MOV     AL, code
 35188                                  ;	    MOV     AH, Exit
 35189                                  ;	    INT     int_command
 35190                                  ;   Error return:
 35191                                  ;	    None.
 35192                                  ;
 35193                                  ;----------------------------------------------------------------------------
 35194                                  
 35195                                  	; 20/05/2019 - Retro DOS v4.0
 35196                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 35197                                  
 35198                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35199                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 35200                                  _$EXIT:
 35201                                  	; 04/08/2018 - Retro DOS v3.0
 35202                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 35203 00006037 30E4                    	xor	AH,AH
 35204 00006039 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 35205 0000603E 08E4                    	or	AH,AH
 35206                                  	;mov	BYTE [SS:EXIT_TYPE],0
 35207 00006040 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 35208 00006046 7406                    	jz	short exit_inner
 35209                                  	;mov	BYTE [SS:EXIT_TYPE],1
 35210 00006048 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 35211                                  
 35212                                  	;entry	Exit_inner
 35213                                  exit_inner:
 35214 0000604E E834A4                  	call	Get_User_Stack		;PBUGBUG
 35215                                  
 35216 00006051 36FF36[3003]            	push	word [ss:CurrentPDB]
 35217                                  	;pop	word [si+14h]
 35218 00006056 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 35219 00006059 EB08                    	jmp	short abort_inner
 35220                                  
 35221                                  ;BREAK <$ABORT -- Terminate a process>
 35222                                  ;----------------------------------------------------------------------------
 35223                                  ; Inputs:
 35224                                  ;	user_CS:00 must point to valid program header block
 35225                                  ; Function:
 35226                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 35227                                  ;	to the terminate address
 35228                                  ; Returns:
 35229                                  ;	TO THE TERMINATE ADDRESS
 35230                                  ;----------------------------------------------------------------------------
 35231                                  
 35232                                  _$ABORT:
 35233 0000605B 30C0                    	xor	AL,AL
 35234                                  	;mov	byte [SS:EXIT_TYPE],0
 35235                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 35236 0000605D 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 35237                                  
 35238                                  	; abort_inner must have AL set as the exit code! The exit type
 35239                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 35240                                  	; to be correct as the one that is terminating.
 35241                                  
 35242                                  abort_inner:
 35243 00006063 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 35244 00006068 36A3[3403]              	mov	[SS:exit_code],AX
 35245 0000606C E816A4                  	call	Get_User_Stack
 35246                                  
 35247                                  	;mov	ds,[si+14h]
 35248 0000606F 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 35249 00006072 31C0                    	xor	AX,AX
 35250 00006074 8EC0                    	mov	ES,AX
 35251                                  	;mov	si,10
 35252 00006076 BE0A00                  	mov	SI,SAVEXIT
 35253                                  	;mov	di,88h
 35254 00006079 BF8800                  	mov	DI,addr_int_terminate
 35255 0000607C A5                      	movsw
 35256 0000607D A5                      	movsw
 35257 0000607E A5                      	movsw
 35258 0000607F A5                      	movsw
 35259 00006080 A5                      	movsw
 35260 00006081 A5                      	movsw
 35261 00006082 E94EF2                  	jmp	reset_environment
 35262                                  
 35263                                  ;----------------------------------------------------------------------------
 35264                                  ;
 35265                                  ; fixexepatch will point to this is DOS loads low. 
 35266                                  ;
 35267                                  ;----------------------------------------------------------------------------
 35268                                  ; MSDOS 6.0
 35269                                  
 35270                                  ; 29/04/2019 - Retro DOS v4.0
 35271                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 35272                                  
 35273                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35274                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 35275                                  
 35276                                  RetExePatch: ; proc near
 35277                                  	
 35278 00006085 C3                      	retn
 35279                                  
 35280                                  ;============================================================================
 35281                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 35282                                  ;============================================================================
 35283                                  ; 04/08/2018 - Retro DOS v3.0
 35284                                  ; 14/05/2019 - Retro DOS v4.0
 35285                                  
 35286                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 35287                                  
 35288                                  ;**
 35289                                  ;	Microsoft Confidential
 35290                                  ;	Copyright (C) Microsoft Corporation 1991
 35291                                  ;	All Rights Reserved.
 35292                                  ;
 35293                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 35294                                  ;	I/O specs are defined in DISPATCH.
 35295                                  ;
 35296                                  ;	$ALLOC
 35297                                  ;	$SETBLOCK
 35298                                  ;	$DEALLOC
 35299                                  ;	$AllocOper
 35300                                  ;	arena_free_process
 35301                                  ;	arena_next
 35302                                  ;	check_signature
 35303                                  ;	Coalesce
 35304                                  ;
 35305                                  ;	Modification history:
 35306                                  ;
 35307                                  ;	    Created: ARR 30 March 1983
 35308                                  ;
 35309                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 35310                                  ;		      M003 - added support for link/unlink UMBs from
 35311                                  ;			     DOS arena chain. 7/18/90
 35312                                  ;		      M009 - Added error returns invalid function and 
 35313                                  ;			     arena trashed in set link state call.
 35314                                  ;		      M010 - Release UMB arenas allocated to current PDB
 35315                                  ;			     if UMB_HEAD is initialized.
 35316                                  ;
 35317                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 35318                                  ;			     support. Please see under M009 in 
 35319                                  ;			     ..\inc\dossym.inc. 8/31/90.
 35320                                  ;
 35321                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 35322                                  ;			     sure that umb_head arena is valid and also make
 35323                                  ;			     sure that the previous arena is pointing to 
 35324                                  ;			     umb_head.
 35325                                  ;
 35326                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 35327                                  ;			     set allloc strategy.
 35328                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 35329                                  ;			     bx in AllocSetStrat.
 35330                                  ;
 35331                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 35332                                  ;			     a bit to indicate to dos dispatcher to turn
 35333                                  ;			     a20 off before iret. See M016.
 35334                                  ;
 35335                                  
 35336                                  ;	BREAK	<memory allocation utility routines>
 35337                                  
 35338                                  
 35339                                  ; 15/04/2018 - Retro DOS v2.0
 35340                                  ;----------------------------------------------------------------------------
 35341                                  ; xenix memory calls for MSDOS
 35342                                  ;
 35343                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 35344                                  ; arena_owner_system are all equal to zero and are contained in DI.
 35345                                  ;
 35346                                  ;INCLUDE DOSSEG.ASM
 35347                                  
 35348                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 35349                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 35350                                  
 35351                                  ;.xlist
 35352                                  ;.xcref
 35353                                  ;INCLUDE DOSSYM.ASM
 35354                                  ;INCLUDE DEVSYM.ASM
 35355                                  ;.cref
 35356                                  ;.list
 35357                                  
 35358                                  ;TITLE ALLOC.ASM - memory arena manager
 35359                                  ;NAME Alloc
 35360                                  
 35361                                  ;SUBTTL memory allocation utility routines
 35362                                  ;PAGE
 35363                                  ;
 35364                                  ; arena data
 35365                                  ;
 35366                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 35367                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 35368                                  ;       i_need  FirstArena,WORD         ; first free block found
 35369                                  ;       i_need  BestArena,WORD          ; best free block found
 35370                                  ;       i_need  LastArena,WORD          ; last free block found
 35371                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 35372                                  
 35373                                  	; 07/07/2024 - Retro DOS v4.1
 35374                                  	; 10/03/2024 - Retro DOS v5.0 (Modified PCDOS 7.1 IBMDOS.COM)
 35375                                  	; PCDOS 7.1 IBMDOS.COM - DOSCODE:0B443h
 35376                                  	;;;
 35377                                  test_umb_flag:
 35378 00006086 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; 1 ; Q: are umb's linked
 35379 0000608C C3                      	retn                    ; ZF=1 -> N: scan from arena_head
 35380                                  				; ZF=0 -> Y: start_arena = umb_head
 35381                                  	;;;
 35382                                  
 35383                                  ;**	Arena_Free_Process
 35384                                  ;----------------------------------------------------------------------------
 35385                                  ;	Free all arena blocks allocated to a process
 35386                                  ;
 35387                                  ;	ENTRY	(bx) = PID of process
 35388                                  ;	EXIT	none
 35389                                  ;	USES	????? BUGBUG
 35390                                  ;----------------------------------------------------------------------------
 35391                                  
 35392                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35393                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 35394                                  
 35395                                  arena_free_process:
 35396                                  	; 14/05/2019 - Retro DOS v4.0
 35397                                  	; 04/08/2018 - Retro DOS v3.0
 35398 0000608D 36A1[2400]                      MOV	AX,[SS:arena_head]
 35399                                  arena_free_process_start:
 35400 00006091 BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 35401                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 35402 00006094 E82F00                          CALL	check_signature         ; ES <- AX, check for valid block
 35403                                  
 35404                                  arena_free_process_loop:
 35405                                          ;retc
 35406 00006097 7225                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 35407 00006099 06                      	PUSH    ES
 35408 0000609A 1F                              POP     DS
 35409                                  	;cmp	[1],bx 
 35410 0000609B 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 35411 0000609F 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 35412                                  	;mov	[1],di
 35413 000060A1 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 35414                                  
 35415                                  arena_free_next:
 35416                                  	;cmp	byte [di],5Ah ;'Z'
 35417 000060A5 803D5A                          CMP     BYTE [DI],arena_signature_end
 35418                                                                          ; end of road, Jack?
 35419                                          ;retz				; never come back no more
 35420                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 35421                                  	; 14/05/2019
 35422                                  	; MSDOS 6.0
 35423 000060A8 7405                    	jz	short arena_chk_umbs
 35424                                          
 35425 000060AA E81200                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 35426 000060AD EBE8                            JMP     SHORT arena_free_process_loop
 35427                                  
 35428                                  	; MSDOS 6.0
 35429                                  arena_chk_umbs:				; M010 - Start
 35430                                  	; 20/05/2019
 35431 000060AF 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 35432 000060B3 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 35433 000060B6 741D                    	je	short ret_label		; N: we're done
 35434                                  	
 35435 000060B8 8CDF                    	mov	di,ds			; di = last arena
 35436 000060BA 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 35437                                  	;jae	short ret_label		; Y: we've scanned umbs also. done.
 35438                                  	;jmp	short arena_free_process_start
 35439                                  					; M010 - End
 35440                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35441 000060BC 72D3                    	jb	short arena_free_process_start
 35442                                  
 35443                                  	; 10/03/2024
 35444                                  AFP_RETN:
 35445 000060BE C3                      	RETN
 35446                                  
 35447                                  ;	BREAK	<Arena Helper Routines>
 35448                                  
 35449                                  ;**	Arena_Next - Find Next item in Arena
 35450                                  ;----------------------------------------------------------------------------
 35451                                  ;	ENTRY	DS - pointer to block head
 35452                                  ;		(di) = 0
 35453                                  ;	EXIT	AX,ES - pointers to next head
 35454                                  ;		'C' set iff arena damaged
 35455                                  ;----------------------------------------------------------------------------
 35456                                  
 35457                                  arena_next:
 35458 000060BF 8CD8                            MOV     AX,DS                   ; AX <- current block
 35459 000060C1 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 35460 000060C5 40                              INC     AX                      ; remember that header!
 35461                                  
 35462                                  ;       fall into check_signature and return
 35463                                  ;
 35464                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 35465                                  ;       RETN
 35466                                  
 35467                                  ;**	Check_Signature - Check Memory Block Signature
 35468                                  ;----------------------------------------------------------------------------
 35469                                  ;	ENTRY	(AX) = address of block header
 35470                                  ;		(di) = 0
 35471                                  ;	EXIT	 ES = AX
 35472                                  ;		'C' clear if signature good
 35473                                  ;		'C' set if signature bad
 35474                                  ;	USES	ES, Flags
 35475                                  ;----------------------------------------------------------------------------
 35476                                  
 35477                                  check_signature:        
 35478                                  
 35479 000060C6 8EC0                    	MOV     ES,AX                   ; ES <- AX
 35480                                  	;cmp	byte [es:di],4Dh ; 'M'
 35481 000060C8 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 35482                                                                          ; IF next signature = not_end THEN
 35483 000060CC 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 35484                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 35485 000060CE 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 35486                                                                          ; IF next signature = end then
 35487 000060D2 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 35488 000060D4 F9                              STC                             ; set error
 35489                                  ret_label: ; MSDOS 6.0
 35490                                  ;AFP_RETN:	; 10/03/2024
 35491                                   	; Retro DOS v2.0 - 05/03/2018
 35492                                  check_signature_ok:
 35493                                  COALESCE_RETN:
 35494 000060D5 C3                      	RETN
 35495                                  
 35496                                  ;**	Coalesce - Combine free blocks ahead with current block
 35497                                  ;----------------------------------------------------------------------------
 35498                                  ;	Coalesce adds the block following the argument to the argument block,
 35499                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 35500                                  ;	some callers (such as $setblock) use it to join a free block to it's
 35501                                  ;	preceeding allocated block.
 35502                                  ;
 35503                                  ;	ENTRY	(ds) = pointer to the head of a free block
 35504                                  ;		(di) = 0
 35505                                  ;	EXIT	'C' clear if OK
 35506                                  ;		  (ds) unchanged, this block updated
 35507                                  ;		  (ax) = address of next block, IFF not at end
 35508                                  ;		'C' set if arena trashed
 35509                                  ;	USES	(cx)
 35510                                  ;----------------------------------------------------------------------------
 35511                                          
 35512                                  Coalesce:
 35513                                  	;cmp	byte [di],5Ah ; 'Z'
 35514 000060D6 803D5A                  	CMP     BYTE [DI],arena_signature_end
 35515                                                                          ; IF current signature = END THEN
 35516                                          ;retz				;   GOTO ok
 35517 000060D9 74FA                            jz	short COALESCE_RETN
 35518 000060DB E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 35519                                          ;retc				; IF no error THEN GOTO check
 35520 000060DE 72F5                    	jc	short COALESCE_RETN
 35521                                  
 35522                                  coalesce_check:
 35523                                  	;cmp	[es:1],di
 35524 000060E0 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 35525                                          ;retnz				; IF next block isnt free THEN return
 35526 000060E5 75EE                            JNZ	SHORT COALESCE_RETN
 35527                                  	;mov	cx,[ES:3]
 35528 000060E7 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 35529 000060EC 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 35530                                          ;ADD	[3],CX
 35531 000060ED 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 35532 000060F1 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 35533 000060F4 880D                            MOV     [DI],CL
 35534 000060F6 EBDE                            JMP     SHORT Coalesce		; try again
 35535                                  
 35536                                  ; 04/08/2018 - Retro DOS v3.0
 35537                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 35538                                  
 35539                                  ;	BREAK  <$Alloc - allocate space in memory>
 35540                                  
 35541                                  ; MSDOS 6.0
 35542                                  ;----------------------------------------------------------------------------
 35543                                  ;**	$Alloc - Allocate Memory Space
 35544                                  ;
 35545                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 35546                                  ;	Alloc returns a pointer to a free block of memory that
 35547                                  ;	has the requested size in paragraphs.
 35548                                  ;
 35549                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 35550                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 35551                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 35552                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 35553                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 35554                                  ;
 35555                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 35556                                  ;	starts from arena_head.
 35557                                  ;
 35558                                  ;	Assembler usage:
 35559                                  ;           MOV     BX,size
 35560                                  ;           MOV     AH,Alloc
 35561                                  ;           INT     21h
 35562                                  ;
 35563                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 35564                                  ;	so that we start searching the arena at it's first non-trivial free
 35565                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 35566                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 35567                                  ;	doesn't have too many memory objects in it beyond the first free one.
 35568                                  ;	verify that this is true; if so, this can stay as is
 35569                                  ;
 35570                                  ;	ENTRY	(bx) = requested size, in bytes
 35571                                  ;		(DS) = (ES) = DOSGROUP
 35572                                  ;	EXIT	'C' clear if memory allocated
 35573                                  ;		  (ax:0) = address of requested memory
 35574                                  ;		'C' set if request failed
 35575                                  ;		  (AX) = error_not_enough_memory
 35576                                  ;		    (bx) = max size we could have allocated
 35577                                  ;		  (ax) = error_arena_trashed
 35578                                  ;	USES	All
 35579                                  ;----------------------------------------------------------------------------
 35580                                  
 35581                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35582                                  ;----------------------------------------------------------------------------
 35583                                  ;SUBTTL $Alloc - allocate space in memory
 35584                                  ;
 35585                                  ;   Assembler usage:
 35586                                  ;           MOV     BX,size
 35587                                  ;           MOV     AH,Alloc
 35588                                  ;           INT     21h
 35589                                  ;         AX:0 is pointer to allocated memory
 35590                                  ;         BX is max size if not enough memory
 35591                                  ;
 35592                                  ;   Description:
 35593                                  ;           Alloc returns  a  pointer  to  a  free  block of
 35594                                  ;       memory that has the requested  size  in  paragraphs.
 35595                                  ;
 35596                                  ;   Error return:
 35597                                  ;           AX = error_not_enough_memory
 35598                                  ;              = error_arena_trashed
 35599                                  ;----------------------------------------------------------------------------
 35600                                  
 35601                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 35602                                  
 35603                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 35604                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 35605                                  
 35606                                  _$ALLOC:
 35607                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 35608                                  	; 14/05/2019 - Retro DOS v4.0
 35609                                  	; 04/08/2018 - Retro DOS v3.0
 35610                                  	;EnterCrit critMem
 35611 000060F8 E8ECB1                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35612                                  
 35613                                  ; 17/12/2022
 35614                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35615                                  ;%if 0
 35616                                  	; 14/05/2019
 35617 000060FB 16                      	push	ss
 35618 000060FC 1F                      	pop	ds
 35619                                  
 35620                                  	; MSDOS 6.0
 35621                                  	;mov	ax,[ss:arena_head]
 35622                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35623                                  
 35624 000060FD A1[2400]                	mov	ax,[arena_head]
 35625 00006100 A3[8E00]                	mov	[START_ARENA],ax
 35626                                  	
 35627                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35628 00006103 F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 35629                                  					; Q: should we start scanning from 
 35630                                  					;    UMB's
 35631 00006108 740B                    	jz	short norm_alloc	; N: scan from arena_head
 35632                                  
 35633                                  ; 07/07/2024
 35634                                  %if 0
 35635                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35636                                  	;cmp	word [UMB_HEAD],-1
 35637                                  	;je	short norm_alloc	; N: scan from arena_head
 35638                                  
 35639                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35640                                  	test	byte [UMBFLAG],LINKSTATE ; 1
 35641                                  	jz	short norm_alloc	; N: scan from arena_head
 35642                                  %else
 35643                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35644                                  	;;;
 35645 0000610A E879FF                  	call	test_umb_flag
 35646 0000610D 7406                    	jz      short norm_alloc
 35647                                  	;;;
 35648                                  %endif
 35649                                  
 35650                                  	;mov	ax,[ss:UMB_HEAD]
 35651                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35652 0000610F A1[8C00]                	mov	ax,[UMB_HEAD]
 35653 00006112 A3[8E00]                	mov	[START_ARENA],ax
 35654                                  					; M000 - end
 35655                                  norm_alloc:
 35656 00006115 31C0                            XOR     AX,AX
 35657 00006117 89C7                            MOV     DI,AX
 35658                                  	; 15/03/2018
 35659                                          ;MOV	[SS:FirstArena],AX	; init the options
 35660                                          ;MOV	[SS:BestArena],AX
 35661                                          ;MOV	[SS:LastArena],AX
 35662                                  	; 14/05/2019
 35663 00006119 A3[4003]                	MOV	[FirstArena],AX		; init the options
 35664 0000611C A3[4203]                        MOV	[BestArena],AX
 35665 0000611F A3[4403]                        MOV	[LastArena],AX
 35666 00006122 50                              PUSH    AX                      ; alloc_max <- 0
 35667                                  	; 04/08/2018
 35668                                  start_scan:
 35669                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35670                                  	;MOV	AX,[arena_head]
 35671                                  
 35672                                  	; 14/05/2019	
 35673                                  	; MSDOS 6.0
 35674                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35675 00006123 A1[8E00]                	mov	ax,[START_ARENA]
 35676                                  
 35677                                  	; 27/09/2023 (BugFix) (*)
 35678                                  	; ( jump from 'alloc_chk' (ds<>ss, ax = [SS:START_ARENA]))
 35679                                  start_scan_x:
 35680                                  
 35681 00006126 E89DFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 35682 00006129 7233                            JC      SHORT alloc_err		; IF error THEN GOTO err
 35683                                  
 35684                                  ;%endif
 35685                                  
 35686                                  ; 17/12/2022
 35687                                  %if 0
 35688                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35689                                  
 35690                                  	; MSDOS 6.0
 35691                                  	mov	ax,[ss:arena_head]
 35692                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 35693                                  
 35694                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 35695                                  					; Q: should we start scanning from
 35696                                  					;    UMB's
 35697                                  	jz	short norm_alloc	; N: scan from arena_head
 35698                                  		
 35699                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 35700                                  	;je	short norm_alloc	; N: scan from arena_head
 35701                                  
 35702                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35703                                  	jz	short norm_alloc	; N: scan from arena_head
 35704                                  	
 35705                                  	mov	ax,[ss:UMB_HEAD]
 35706                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 35707                                  					; M000 - end
 35708                                  norm_alloc:
 35709                                          XOR     AX,AX
 35710                                          MOV     DI,AX
 35711                                  	; 15/03/2018
 35712                                  	MOV	[SS:FirstArena],AX	; init the options
 35713                                  	MOV	[SS:BestArena],AX
 35714                                  	MOV	[SS:LastArena],AX
 35715                                          PUSH    AX                      ; alloc_max <- 0
 35716                                  	; 04/08/2018
 35717                                  start_scan:
 35718                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 35719                                  	; 14/05/2019	
 35720                                  	; MSDOS 6.0
 35721                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 35722                                  	CALL    check_signature         ; ES <- AX, carry set if error
 35723                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 35724                                  %endif
 35725                                  
 35726                                  alloc_scan:
 35727 0000612B 06                              PUSH    ES
 35728 0000612C 1F                              POP     DS                      ; DS <- ES
 35729 0000612D 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 35730 00006131 7466                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 35731                                  
 35732                                  alloc_next:
 35733                                  
 35734                                  ; 07/07/2024
 35735                                  %if 0
 35736                                  	; MSDOS 6.0			; M000 - start
 35737                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 35738                                  	jz	short norm_strat	; N: see if we reached last arena
 35739                                  %else
 35740                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 35741                                  	;;;
 35742 00006133 E850FF                  	call	test_umb_flag
 35743 00006136 741C                    	jz      short norm_strat
 35744                                  	;;;
 35745                                  %endif
 35746 00006138 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 35747                                  					; Q: is alloc strategy high_first
 35748 0000613E 7414                    	jz	short norm_strat	; N: see if we reached last arena
 35749 00006140 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 35750 00006144 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 35751                                  					;    arena_head
 35752 00006149 7509                    	jne	short norm_strat	; N: see if we reached last arena
 35753 0000614B 8CD8                    	mov	ax,ds			; ax = current block
 35754 0000614D 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 35755 00006152 EB03                    	jmp	short alloc_chk_end
 35756                                  
 35757                                  norm_strat:
 35758                                  	;cmp	byte [di],5Ah ; 'Z'
 35759 00006154 803D5A                          CMP     BYTE [DI],arena_signature_end
 35760                                                                          ; IF current block is last THEN
 35761                                  alloc_chk_end:
 35762 00006157 740E                            JZ      SHORT alloc_end		;   GOTO end
 35763 00006159 E863FF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 35764 0000615C 73CD                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 35765                                  
 35766                                  alloc_err:
 35767 0000615E 58                              POP     AX
 35768                                  
 35769                                  alloc_trashed:
 35770                                  	;LeaveCrit critMem
 35771 0000615F E8A0B1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35772                                          ;error	error_arena_trashed
 35773                                  	;mov	al,7
 35774 00006162 B007                    	MOV	AL,error_arena_trashed
 35775                                  alloc_errj:
 35776 00006164 E9D7A4                  	JMP	SYS_RET_ERR
 35777                                  
 35778                                  alloc_end:
 35779                                  	; 18/05/2019
 35780 00006167 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 35781 0000616D 7403                    	jz	short alloc_chk 
 35782 0000616F E98400                  	jmp	alloc_do_split
 35783                                  
 35784                                  alloc_chk:
 35785                                  	; MSDOS 6.0
 35786 00006172 36A1[2400]              	mov	ax,[ss:arena_head]
 35787 00006176 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 35788 0000617B 740E                    	je	short alloc_fail	; Y: not enough memory
 35789                                  					; N:
 35790                                  					; Q: is the alloc strat HIGH_ONLY
 35791 0000617D 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 35792 00006183 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 35793                                  	
 35794 00006185 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 35795                                  	; 27/09/2023 (*)
 35796 00006189 EB9B                    	jmp	short start_scan_x ; (*) ; (BugFix)
 35797                                  	;jmp	short start_scan
 35798                                  					; M000 - end
 35799                                  
 35800                                  alloc_fail:
 35801                                          ;invoke Get_User_Stack
 35802 0000618B E8F7A2                          CALL	Get_User_Stack
 35803 0000618E 5B                      	POP     BX
 35804                                          ;MOV	[SI].user_BX,BX
 35805                                  	;MOV	[SI+2],BX
 35806 0000618F 895C02                  	mov	[SI+user_env.user_BX],bx
 35807                                  	;LeaveCrit critMem
 35808 00006192 E86DB1                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35809                                  	;error	error_not_enough_memory
 35810                                  	;mov	al,8
 35811 00006195 B008                    	MOV	AL,error_not_enough_memory
 35812                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35813 00006197 EBCB                    	jmp	short alloc_errj
 35814                                  	;JMP	SYS_RET_ERR
 35815                                  
 35816                                  alloc_free:
 35817 00006199 E83AFF                          CALL    Coalesce		; add following free block to current
 35818 0000619C 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 35819 0000619E 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35820 000061A2 5A                              POP     DX                      ; check for max found size
 35821 000061A3 39D1                            CMP     CX,DX
 35822 000061A5 7602                            JNA     SHORT alloc_test
 35823 000061A7 89CA                            MOV     DX,CX
 35824                                  
 35825                                  alloc_test:
 35826 000061A9 52                              PUSH    DX
 35827 000061AA 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 35828 000061AC 7785                    	JA      SHORT alloc_next	;   GOTO next
 35829                                  
 35830                                  	; 15/03/2018
 35831 000061AE 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 35832 000061B4 7505                    	JNZ	SHORT alloc_best
 35833 000061B6 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found
 35834                                  alloc_best:
 35835 000061BB 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 35836 000061C1 740E                            JZ      SHORT alloc_make_best	; initial best
 35837 000061C3 06                              PUSH	ES
 35838 000061C4 368E06[4203]                    MOV     ES,[SS:BestArena]
 35839 000061C9 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 35840 000061CE 07                              POP	ES
 35841 000061CF 7605                            JBE     SHORT alloc_last
 35842                                  alloc_make_best:
 35843 000061D1 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 35844                                  alloc_last:
 35845 000061D6 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 35846 000061DB E955FF                          JMP     alloc_next
 35847                                  ;
 35848                                  ; split the block high
 35849                                  ;
 35850                                  alloc_do_split_high:
 35851 000061DE 368E1E[4403]                    MOV     DS,[SS:LastArena]
 35852 000061E3 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35853 000061E7 29D9                            SUB     CX,BX
 35854 000061E9 8CDA                            MOV     DX,DS
 35855 000061EB 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 35856 000061ED 01CA                            ADD     DX,CX                   ; point to next block
 35857 000061EF 8EC2                            MOV     ES,DX                   ; no decrement!
 35858 000061F1 49                              DEC     CX
 35859 000061F2 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 35860 000061F4 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 35861                                  ;
 35862                                  ; we have scanned memory and have found all appropriate blocks
 35863                                  ; check for the type of allocation desired; first and best are identical
 35864                                  ; last must be split high
 35865                                  ;
 35866                                  alloc_do_split:
 35867                                  
 35868                                  ; 17/12/2022
 35869                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35870                                  ;%if 0
 35871                                  	; 14/05/2019
 35872                                  	; MSDOS 6.0			; M000 - start
 35873                                  	;xor	cx,cx
 35874 000061F6 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 35875                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35876 000061FB 80E13F                  	and	cl,3Fh
 35877                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35878 000061FE 80F901                  	cmp	cl,BEST_FIT
 35879 00006201 77DB                    	ja	short alloc_do_split_high
 35880                                  ;%endif
 35881                                  
 35882                                  	; 17/12/2022
 35883                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35884                                  	; MSDOS 6.0 & MSDOS 5.0
 35885                                  	;xor	cx,cx
 35886                                  	;mov	cl,[ss:AllocMethod]
 35887                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 35888                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 35889                                  	;ja	short alloc_do_split_high
 35890                                  
 35891                                  	; 15/03/2018
 35892                                          ;;CMP	BYTE [SS:AllocMethod], 1
 35893                                  	; 04/08/2018
 35894                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 35895                                          ;JA	SHORT alloc_do_split_high
 35896                                          
 35897 00006203 368E1E[4003]            	MOV     DS,[SS:FirstArena]
 35898 00006208 7205                    	JB      SHORT alloc_get_size
 35899 0000620A 368E1E[4203]            	MOV     DS,[SS:BestArena]
 35900                                  
 35901                                  alloc_get_size:
 35902 0000620F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 35903 00006213 29D9                            SUB     CX,BX                   ; get room left over
 35904 00006215 8CD8                            MOV     AX,DS
 35905 00006217 89C2                            MOV     DX,AX                   ; save for owner setting
 35906 00006219 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 35907 0000621B 01D8                            ADD     AX,BX
 35908 0000621D 40                              INC     AX                      ; remember the header
 35909 0000621E 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 35910 00006220 49                              DEC     CX                      ; CX <- size of split block
 35911                                  alloc_set_sizes:
 35912 00006221 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 35913 00006225 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 35914                                  	;mov	bl,4Dh ; 'M'
 35915 0000622A B34D                            MOV     BL,arena_signature_normal
 35916 0000622C 861D                            XCHG    BL,[DI]			; current signature <- 4D
 35917 0000622E 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 35918 00006231 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 35919                                  
 35920                                  alloc_set_owner:
 35921 00006236 8EDA                            MOV     DS,DX
 35922 00006238 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 35923 0000623C A30100                          MOV     [ARENA.OWNER],AX
 35924 0000623F 8CD8                            MOV     AX,DS
 35925 00006241 40                              INC     AX
 35926 00006242 5B                              POP     BX
 35927                                  	;LeaveCrit critMem
 35928 00006243 E8BCB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 35929                                  	
 35930                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35931                                  alloc_ok:
 35932                                          ;transfer SYS_RET_OK
 35933 00006246 E9ECA3                  	JMP	SYS_RET_OK
 35934                                  
 35935                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 35936                                  
 35937                                  ; MSDOS 6.0
 35938                                  ;----------------------------------------------------------------------------
 35939                                  ;**	$SETBLOCK - Change size of an Allocated Block
 35940                                  ;
 35941                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 35942                                  ;	any following free space onto this block; then we try to trim the
 35943                                  ;	block down to the size requested.
 35944                                  ;
 35945                                  ;	Note that if the guy wants to grow the block but that growth fails,
 35946                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 35947                                  ;	Thus the maximum-size-possible value that we return has already
 35948                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 35949                                  ;
 35950                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 35951                                  ;		finish it's work. For this reason we build the allocsf
 35952                                  ;		structure on the frame, to make us compatible with $ALLOCs
 35953                                  ;		code.
 35954                                  ;
 35955                                  ;	ENTRY	(es) = segment of old block
 35956                                  ;		(bx) = newsize
 35957                                  ;		(ah) = SETBLOCK
 35958                                  ;
 35959                                  ;	EXIT	'C' clear if OK
 35960                                  ;		'C' set if error
 35961                                  ;		  (ax) = error_invalid_block
 35962                                  ;		       = error_arena_trashed
 35963                                  ;		       = error_not_enough_memory
 35964                                  ;		       = error_invalid_function
 35965                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 35966                                  ;	USES	???? BUGBUG
 35967                                  ;----------------------------------------------------------------------------
 35968                                  
 35969                                  ; MSDOS 2.11 (& MSDOS 3.3)
 35970                                  ;----------------------------------------------------------------------------
 35971                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 35972                                  ;
 35973                                  ;   Assembler usage:
 35974                                  ;           MOV     ES,block
 35975                                  ;           MOV     BX,newsize
 35976                                  ;           MOV     AH,setblock
 35977                                  ;           INT     21h
 35978                                  ;         if setblock fails for growing, BX will have the maximum
 35979                                  ;         size possible
 35980                                  ;   Error return:
 35981                                  ;           AX = error_invalid_block
 35982                                  ;              = error_arena_trashed
 35983                                  ;              = error_not_enough_memory
 35984                                  ;              = error_invalid_function
 35985                                  ;----------------------------------------------------------------------------
 35986                                  
 35987                                  _$SETBLOCK:        
 35988                                  	; 04/08/2018 - Retro DOS v3.0
 35989                                  	;EnterCrit   critMem
 35990 00006249 E89BB0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 35991                                  
 35992 0000624C BF0000                  	MOV     DI,ARENA.SIGNATURE
 35993 0000624F 8CC0                            MOV     AX,ES
 35994 00006251 48                              DEC     AX
 35995 00006252 E871FE                          CALL    check_signature
 35996 00006255 7303                            JNC     SHORT setblock_grab
 35997                                  
 35998                                  setblock_bad:
 35999 00006257 E905FF                          JMP     alloc_trashed
 36000                                  
 36001                                  setblock_grab:
 36002 0000625A 8ED8                            MOV     DS,AX
 36003 0000625C E877FE                          CALL    Coalesce
 36004 0000625F 72F6                            JC      SHORT setblock_bad
 36005 00006261 8B0E0300                        MOV     CX,[ARENA.SIZE]
 36006 00006265 51                              PUSH    CX
 36007 00006266 39CB                            CMP     BX,CX
 36008 00006268 76A5                            JBE     SHORT alloc_get_size
 36009 0000626A E91EFF                          JMP     alloc_fail
 36010                                  
 36011                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 36012                                  
 36013                                  ; MSDOS 6.0
 36014                                  ;----------------------------------------------------------------------------
 36015                                  ;**	$DEALLOC - Free Heap Memory
 36016                                  ;
 36017                                  ;	ENTRY	(es) = address of item
 36018                                  ;
 36019                                  ;	EXIT	'C' clear of OK
 36020                                  ;		'C' set if error
 36021                                  ;		  (AX) = error_invalid_block
 36022                                  ;	USES	???? BUGBUG
 36023                                  
 36024                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36025                                  ;----------------------------------------------------------------------------
 36026                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 36027                                  ;
 36028                                  ;   Assembler usage:
 36029                                  ;           MOV     ES,block
 36030                                  ;           MOV     AH,dealloc
 36031                                  ;           INT     21h
 36032                                  ;
 36033                                  ;   Error return:
 36034                                  ;           AX = error_invalid_block
 36035                                  ;              = error_arena_trashed
 36036                                  ;---------------------------------------------------------------------------- 
 36037                                  
 36038                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36039                                  _$DEALLOC:
 36040                                  	; 14/05/2019 - Retro DOS v4.0    
 36041                                  	; 04/08/2018 - Retro DOS v3.0
 36042                                  	;EnterCrit   critMem
 36043 0000626D E877B0                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 36044                                  
 36045                                  	; MSDOS 6.0			; M016, M068 - Start
 36046 00006270 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 36047                                  					; Q: was the previous call an int 21
 36048                                  					;    exec call
 36049 00006276 740D                    	jz	short deallocate	; N: continue
 36050 00006278 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 36051 0000627E 7505                    	jne	short deallocate	; N: continue
 36052                                  	;mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 36053                                  	; 25/09/2023
 36054 00006280 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]
 36055                                  deallocate:				; M016, M068 - End
 36056 00006285 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 36057 00006288 8CC0                            MOV     AX,ES
 36058 0000628A 48                              DEC     AX
 36059 0000628B E838FE                          CALL    check_signature
 36060 0000628E 720A                            JC      SHORT dealloc_err
 36061 00006290 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 36062                                  	;LeaveCrit critMem
 36063 00006295 E86AB0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 36064                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36065                                          ;transfer SYS_RET_OK
 36066                                  dealloc_ok:
 36067 00006298 EBAC                    	jmp	short alloc_ok
 36068                                  	;JMP	SYS_RET_OK
 36069                                  
 36070                                  dealloc_err:
 36071                                  	;LeaveCrit critMem
 36072 0000629A E865B0                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 36073                                          ;error	error_invalid_block
 36074                                  	;mov	al,9
 36075 0000629D B009                    	MOV	AL,error_invalid_block
 36076                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36077                                  dealloc_errj:
 36078                                  AllocOperErrj:	; 17/12/2022
 36079 0000629F E99CA3                  	JMP	SYS_RET_ERR
 36080                                  
 36081                                  ;	BREAK $AllocOper - get/set allocation mechanism
 36082                                  
 36083                                  ; MSDOS 6.0
 36084                                  ;----------------------------------------------------------------------------
 36085                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 36086                                  ;
 36087                                  ;	Assembler usage:
 36088                                  ;           MOV     AH,AllocOper
 36089                                  ;           MOV     BX,method
 36090                                  ;           MOV     AL,func
 36091                                  ;           INT     21h
 36092                                  ;
 36093                                  ;	ENTRY	
 36094                                  ;		(al) = 0
 36095                                  ;		  Get allocation Strategy in (ax)
 36096                                  ;
 36097                                  ;		(al) = 1, (bx) = method = zw0000xy
 36098                                  ;		  Set allocation strategy.
 36099                                  ;		   w  = 1  => HIGH_ONLY
 36100                                  ;		   z  = 1  => HIGH_FIRST
 36101                                  ;		   xy = 00 => FIRST_FIT
 36102                                  ;		      = 01 => BEST_FIT
 36103                                  ;		      = 10 => LAST_FIT
 36104                                  ;
 36105                                  ;		(al) = 2
 36106                                  ;		  Get UMB link state in (al)
 36107                                  ;
 36108                                  ;		(al) = 3
 36109                                  ;		  Set UMB link state
 36110                                  ;		   (bx) = 0 => Unlink UMBs
 36111                                  ;		   (bx) = 1 => Link UMBs
 36112                                  ;
 36113                                  ;
 36114                                  ;	EXIT	'C' clear if OK
 36115                                  ;
 36116                                  ;		 if (al) = 0
 36117                                  ;		  (ax) = existing method
 36118                                  ;		 if (al) = 1
 36119                                  ;		  Sets allocation strategy
 36120                                  ;		 if (al) = 2
 36121                                  ;		  (al) = 0 => UMBs not linked
 36122                                  ;		  (al) = 1 => UMBs linked in
 36123                                  ;		 if (al) = 3
 36124                                  ;		  Links/Unlinks the UMBs into DOS chain
 36125                                  ;
 36126                                  ;		'C' set if error
 36127                                  ;		  AX = error_invalid_function
 36128                                  ;
 36129                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 36130                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 36131                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 36132                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 36133                                  ;		    arena' if an arena sig is damaged.
 36134                                  ;----------------------------------------------------------------------------
 36135                                  
 36136                                  ; MSDOS 2.11 (& MSDOS 3.3)
 36137                                  ;----------------------------------------------------------------------------
 36138                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 36139                                  ;
 36140                                  ;   Assembler usage:
 36141                                  ;           MOV     AH,AllocOper
 36142                                  ;           MOV     BX,method
 36143                                  ;           MOV     AL,func
 36144                                  ;           INT     21h
 36145                                  ;
 36146                                  ;   Error return:
 36147                                  ;           AX = error_invalid_function
 36148                                  ;----------------------------------------------------------------------------
 36149                                  
 36150                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36151                                  _$ALLOCOPER:
 36152                                  	; 14/05/2019 - Retro DOS v4.0
 36153                                  	; MSDOS 6.0
 36154 000062A2 08C0                    	or	al,al ; 0
 36155 000062A4 741E                    	jz	short AllocGetStrat
 36156                                  	; 17/12/2022
 36157                                  	;cmp	al,1
 36158                                  	;jz	short AllocSetStrat
 36159                                  
 36160                                  	; 01/12/2022
 36161                                  	;cmp	al, 2
 36162                                  	;jb	short AllocSetStrat
 36163                                  	;ja	short AllocSetLink
 36164                                  	;;jmp	short AllocGetLink
 36165                                  ;AllocGetLink:
 36166                                  	; MSDOS 6.0
 36167                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 36168                                  	;and 	al,LINKSTATE
 36169                                  	;;transfer SYS_RET_OK
 36170                                  	;jmp	SYS_RET_OK
 36171                                  
 36172 000062A6 3C02                    	cmp	al,2
 36173                                  	; 17/12/2022
 36174 000062A8 7223                    	jb	short AllocSetStrat ; al = 1
 36175 000062AA 7432                    	je	short AllocGetLink
 36176                                  
 36177                                  	;cmp	al,2
 36178                                  	;jz	short AllocGetLink
 36179 000062AC 3C03                    	cmp	al,3
 36180 000062AE 7436                    	jz	short AllocSetLink
 36181                                  
 36182                                  	; 15/04/2018
 36183                                  	;CMP	AL,1
 36184                                          ;JB	SHORT AllocOperGet
 36185                                          ;JZ	SHORT AllocOperSet
 36186                                  
 36187                                  AllocOperError:
 36188                                  	; 04/08/2018 - Retro DOS v3.0
 36189                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus
 36190                                  	;mov	byte [ss:EXTERR_LOCUS],5
 36191 000062B0 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36192                                  	;error	error_invalid_function
 36193                                  	;mov	al,1
 36194 000062B6 B001                    	MOV	AL,error_invalid_function
 36195                                  	; 17/12/2022
 36196                                  ;AllocOperErrj:
 36197                                  	;JMP	SYS_RET_ERR
 36198                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36199                                  	;jmp	short dealloc_errj
 36200                                  	; 17/12/2022
 36201 000062B8 EBE5                    	jmp	short AllocOperErrj
 36202                                  
 36203                                  AllocArenaError:
 36204                                  	; MSDOS 6.0
 36205 000062BA 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 36206                                  					; M009: Extended Error Locus
 36207                                  	;error	error_arena_trashed	; M009:
 36208                                  	;mov	al,7
 36209 000062C0 B007                    	MOV	AL,error_arena_trashed
 36210                                  	;JMP	SYS_RET_ERR
 36211 000062C2 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 36212                                  
 36213                                  AllocGetStrat: 
 36214                                  	; MSDOS 6.0
 36215                                  AllocOperGet:
 36216 000062C4 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 36217 000062C8 30E4                            XOR     AH,AH
 36218                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36219                                  	;transfer SYS_RET_OK
 36220                                  AllocOperOk:
 36221                                  	; 17/12/2022
 36222                                  	;jmp	short dealloc_ok
 36223 000062CA E968A3                  	JMP	SYS_RET_OK
 36224                                  
 36225                                  AllocSetStrat: 
 36226                                  	; 14/05/2019
 36227                                  	; MSDOS 6.0
 36228 000062CD 53                      	push	bx			; M000 - start
 36229                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36230                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 36231                                  	; 17/12/2022
 36232 000062CE 80E33F                  	and	bl,3Fh
 36233 000062D1 83FB02                  	cmp	bx,2			; BX must be 0-2
 36234                                  	;cmp	bl,2
 36235 000062D4 5B                      	pop	bx			; M000 - end
 36236 000062D5 77D9                    	ja	short AllocOperError
 36237                                  
 36238                                  AllocOperSet:
 36239 000062D7 36881E[0203]                    MOV     [SS:AllocMethod],BL
 36240                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36241                                  	;transfer SYS_RET_OK
 36242                                  AllocOperOkj:
 36243 000062DC EBEC                    	jmp	short AllocOperOk
 36244                                  	;JMP	SYS_RET_OK
 36245                                  
 36246                                  AllocGetLink:
 36247                                  	; MSDOS 6.0
 36248 000062DE 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 36249                                  	;and	al,1
 36250 000062E2 2401                    	and 	al,LINKSTATE
 36251                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36252                                  	;transfer SYS_RET_OK
 36253                                  AllocOperOkj2:
 36254                                  	; 17/12/2022
 36255 000062E4 EBE4                    	jmp	short AllocOperOk
 36256                                  	;jmp	short AllocOperOkj
 36257                                  	;;JMP	SYS_RET_OK
 36258                                  
 36259                                  AllocSetLink:
 36260                                  	; MSDOS 6.0			; M009 - start
 36261 000062E6 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 36262 000062EB 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 36263 000062EE 74C0                    	je	short AllocOperError	; N: error
 36264                                  					; Y: continue
 36265                                  					; M009 - end
 36266 000062F0 83FB01                  	cmp	bx,1
 36267                                  	;jb	short UnlinkUmbs
 36268                                  	;jz	short LinkUmbs
 36269                                  	;jmp	short AllocOperError
 36270                                  	; 10/03/2024
 36271 000062F3 7417                    	jz	short LinkUmbs
 36272 000062F5 77B9                    	ja	short AllocOperError
 36273                                  
 36274                                  UnlinkUmbs:
 36275                                  
 36276                                  ; 07/07/2024
 36277                                  %if 0
 36278                                  	;test	byte [ss:UMBFLAG],1
 36279                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 36280                                  	jz	short unlinked		; Y: return
 36281                                  	
 36282                                  	call	GetLastArena		; get arena before umb_head in DS
 36283                                  	jc	short AllocArenaError	; M009: arena trashed
 36284                                  %else
 36285                                  	; 10/03/2024 - Retro DOS v5.0
 36286                                  	; (PCDOS 7.1 IBMDOS.COM)
 36287                                  	;;;
 36288 000062F7 E88CFD                  	call	test_umb_flag	; test byte [ss:UMBFLAG],LINKSTATE
 36289                                  				; Q: umbs unlinked?
 36290 000062FA 740E                    	jz	short unlinked	; Y: return
 36291 000062FC E82200                  	call	GetLastArena	; get arena before umb_head in DS
 36292                                  	;;;	
 36293                                  %endif
 36294                                  					; make it last
 36295 000062FF C60600005A              	mov	byte [0],arena_signature_end
 36296                                  	
 36297                                  	;and	byte [ss:UMBFLAG],0FEh
 36298 00006304 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 36299                                  	
 36300                                  unlinked:
 36301                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36302                                  	;transfer SYS_RET_OK
 36303                                  	; 17/12/2022
 36304 0000630A EBBE                    	jmp	short AllocOperOk
 36305                                  	;jmp	short AllocOperOkj2
 36306                                  	;;JMP	SYS_RET_OK
 36307                                  
 36308                                  LinkUmbs:
 36309                                  
 36310                                  ; 07/07/2024
 36311                                  %if 0
 36312                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 36313                                  	jnz	short linked		; Y: return
 36314                                  	
 36315                                  	call	GetLastArena		; get arena before umb_head
 36316                                  	jc	short AllocArenaError	; M009: arena trashed
 36317                                  %else
 36318                                  	; 10/03/2024 - Retro DOS v5.0
 36319                                  	; (PCDOS 7.1 IBMDOS.COM)
 36320                                  	;;;
 36321 0000630C E877FD                  	call	test_umb_flag	; Q: umbs linked?
 36322 0000630F 750E                    	jnz	short linked	; Y: return
 36323 00006311 E80D00                  	call	GetLastArena	; get arena before umb_head
 36324                                  	;;;
 36325                                  %endif
 36326                                  					; make it normal. M061: ds points to
 36327                                  					; arena before umb_head
 36328 00006314 C60600004D              	mov	byte [0],arena_signature_normal
 36329                                  	
 36330 00006319 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 36331                                  linked:
 36332                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36333                                  	;transfer SYS_RET_OK
 36334                                  	; 17/12/2022
 36335 0000631F EBA9                    	jmp	short AllocOperOk
 36336                                  	;jmp	short unlinked
 36337                                  	;;JMP	SYS_RET_OK
 36338                                  
 36339                                  ; MSDOS 6.0
 36340                                  ;--------------------------------------------------------------------------
 36341                                  ; Procedure Name : GetLastArena		-  M003
 36342                                  ;
 36343                                  ; Inputs	 : cx = umb_head
 36344                                  ;
 36345                                  ;
 36346                                  ; Outputs	 : If UMBs are linked
 36347                                  ;			ES = umb_head
 36348                                  ;			DS = arena before umb_head
 36349                                  ;		   else
 36350                                  ;			DS = last arena
 36351                                  ;			ES = next arena. will be umb_head if NC.
 36352                                  ;
 36353                                  ;		   CY if error
 36354                                  ;
 36355                                  ; Uses		 : DS, ES, DI, BX
 36356                                  ;--------------------------------------------------------------------------
 36357                                  
 36358                                  ; 14/05/2019 - Retro DOS v4.0
 36359                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 36360                                  
 36361                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36362                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 36363                                  	
 36364                                  GetLastArena:
 36365 00006321 50                      	push	ax			; save ax
 36366                                  
 36367 00006322 36A1[2400]              	mov	ax,[ss:arena_head]
 36368 00006326 8EC0                    	mov	es,ax			; es = arena_head
 36369 00006328 31FF                    	xor	di,di
 36370                                  
 36371 0000632A 26803D5A                	cmp     byte [es:di],arena_signature_end
 36372                                  					; Q: is this the last arena
 36373 0000632E 7416                    	je	short GLA_done		; Y: return last arena in ES
 36374                                  
 36375                                  GLA_next:
 36376 00006330 8ED8                    	mov	ds,ax
 36377 00006332 E88AFD                  	call	arena_next		; ax, es -> next arena
 36378                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36379                                  	;jc	short GLA_err
 36380                                  	; 17/12/2022
 36381 00006335 7222                    	jc	short GLA_err2
 36382                                  
 36383                                  ; 07/07/2024
 36384                                  %if 0
 36385                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36386                                  	jnz	short GLA_chkumb	; Y: terminating condition is
 36387                                  					;    umb_head
 36388                                  					; N: terminating condition is 05Ah
 36389                                  %else
 36390                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 36391                                  	;;;
 36392 00006337 E84CFD                  	call	test_umb_flag
 36393 0000633A 7506                    	jnz	short GLA_chkumb
 36394                                  	;;;
 36395                                  %endif
 36396 0000633C 26803D5A                	cmp     byte [es:di],arena_signature_end
 36397                                  					; Q: is this the last arena
 36398 00006340 EB02                    	jmp	short GLA_@f
 36399                                  GLA_chkumb:
 36400 00006342 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36401                                  GLA_@f:
 36402 00006344 75EA                    	jne	short GLA_next		; N: get next arena
 36403                                  
 36404                                  GLA_done:
 36405                                  
 36406                                  ; 07/07/2024
 36407                                  %if 0
 36408                                  					; M061 - Start
 36409                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 36410                                  	jnz	short GLA_ret		; Y: we're done
 36411                                  					; N: let us confirm that the next
 36412                                  					;    arena is umb_head
 36413                                  %else
 36414                                  	; 10/03/2024 (PCDOS 7.1 IBMDOS.COM)
 36415                                  	;;;
 36416 00006346 E83DFD                  	call	test_umb_flag
 36417 00006349 750B                    	jnz	short GLA_ret ; cf=0
 36418                                  	;;;
 36419                                  %endif
 36420 0000634B 8ED8                    	mov	ds,ax
 36421 0000634D E86FFD                  	call	arena_next		; ax, es -> next arena
 36422                                  	;jc	short GLA_err
 36423 00006350 7207                    	jc	short GLA_err2
 36424 00006352 39C8                    	cmp	ax,cx			; Q: is this umb_head
 36425 00006354 7502                    	jne	short GLA_err		; N: error
 36426                                  					; M061 - End
 36427                                  GLA_ret:
 36428                                  	; 17/12/2022
 36429                                  	;clc
 36430                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36431                                  	;clc
 36432 00006356 58                      	pop	ax			; M061
 36433 00006357 C3                      	retn				; M061
 36434                                  
 36435                                  GLA_err:
 36436 00006358 F9                      	stc				; M061
 36437                                  GLA_err2:
 36438 00006359 58                      	pop	ax
 36439 0000635A C3                      	retn
 36440                                  
 36441                                  ;============================================================================
 36442                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 36443                                  ;============================================================================
 36444                                  ; 04/08/2018 - Retro DOS v3.0
 36445                                  
 36446                                  ;	TITLE SRVCALL - Server DOS call
 36447                                  ;	NAME  SRVCALL
 36448                                  
 36449                                  ;**	SRVCALL.ASM - Server DOS call functions
 36450                                  ;
 36451                                  ;
 36452                                  ;	$ServerCall
 36453                                  ;
 36454                                  ;	Modification history:
 36455                                  ;
 36456                                  ;	    Created: ARR 08 August 1983
 36457                                  
 36458                                  ;AsmVars <Installed>
 36459                                  
 36460                                  ;include dpl.asm
 36461                                  
 36462                                  ;Installed = TRUE
 36463                                  
 36464                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 36465                                  ; ---------------------------------------------------------------------------
 36466                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36467                                  
 36468                                  ;BREAK <ServerCall -- Server DOS call>
 36469                                  
 36470                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 36471                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 36472                                  
 36473                                  ;hkn; TABLE	SEGMENT
 36474                                  ;Public SRVC001S,SRVC001E
 36475                                  ;SRVC001S label byte
 36476                                  
 36477                                  SRVC001S:
 36478                                  
 36479 0000635B [5F63]                  SERVERTAB:	dw	SERVER_DISP
 36480 0000635D [B163]                  SERVERLEAVE:	dw	SERVERRETURN
 36481 0000635F 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 36482 00006360 [1764]                  		dw	SRV_CALL	; 0
 36483 00006362 [B263]                  		dw	COMMIT_ALL	; 1
 36484 00006364 [E863]                  		dw	CLOSE_NAME	; 2
 36485 00006366 [F163]                  		dw	CLOSE_UID	; 3
 36486 00006368 [F863]                  		dw	CLOSE_UID_PID	; 4
 36487 0000636A [FF63]                  		dw	GET_LIST	; 5
 36488 0000636C [5864]                  		dw	GET_DOS_DATA	; 6
 36489 0000636E [7C64]                  		dw	SPOOL_OPER	; 7
 36490 00006370 [7C64]                  		dw	SPOOL_OPER	; 8
 36491 00006372 [7C64]                  		dw	SPOOL_OPER	; 9
 36492 00006374 [8864]                  		dw	_$SetExtendedError  ; 10
 36493                                  
 36494                                  SERVER_DISP_END:  ;  LABEL BYTE
 36495                                  
 36496                                  ;SRVC001E label byte
 36497                                  
 36498                                  SRVC001E:
 36499                                  
 36500                                  ;hkn; TABLE	ENDS
 36501                                  
 36502                                  ;----------------------------------------------------------------------------
 36503                                  ;
 36504                                  ; Procedure Name : $ServerCall
 36505                                  ;
 36506                                  ; Inputs:
 36507                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 36508                                  ; Function:
 36509                                  ;	AL=0	Server DOS call
 36510                                  ;	AL=1	Commit All files
 36511                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 36512                                  ;	AL=3	Close all files for DPL_UID
 36513                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 36514                                  ;	AL=5	Get open file list entry
 36515                                  ;		    IN: BX File Index
 36516                                  ;			CX User Index
 36517                                  ;		    OUT:ES:DI -> Name
 36518                                  ;			BX = UID
 36519                                  ;		    CX = # locked blocks held by this UID
 36520                                  ;	AL=6	Get DOS data area
 36521                                  ;		    OUT: DS:SI -> Start
 36522                                  ;			CX size in bytes of swap if indos
 36523                                  ;			DX size in bytes of swap always
 36524                                  ;	AL=7	Get truncate flag
 36525                                  ;	AL=8	Set truncate flag
 36526                                  ;	AL=9	Close all spool files
 36527                                  ;	AL=10	SetExtendedError
 36528                                  ;
 36529                                  ;----------------------------------------------------------------------------
 36530                                  
 36531                                  _$ServerCall:
 36532                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36533                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 36534                                  	; 10/06/2019
 36535                                  	; 29/04/2019 - Retro DOS v4.0
 36536                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 36537                                  
 36538                                  	; 05/08/2018 - Retro DOS v3.0
 36539                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 36540 00006376 3C07                    	CMP	AL,7
 36541 00006378 7204                    	JB	short SET_STUFF
 36542 0000637A 3C09                    	CMP	AL,9
 36543 0000637C 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 36544                                  SET_STUFF:
 36545 0000637E 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 36546                                  	;mov	bx,[si+12h]
 36547 00006380 8B5C12                  	MOV	BX,[SI+DPL.UID]
 36548                                  
 36549                                  	; MSDOS 6.0
 36550                                  ;SR;
 36551                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 36552                                  ; of USER_ID
 36553                                  
 36554 00006383 36F606[3010]01          	test	byte [SS:IsWin386],1
 36555 00006389 7505                    	jnz	short skip_win386
 36556                                  
 36557                                  ;hkn; SS override for user_id and proc_id
 36558                                  	; 15/08/2018
 36559 0000638B 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 36560                                  
 36561                                  skip_win386:
 36562 00006390 8B5C14                  	MOV	BX,[SI+DPL.PID]
 36563 00006393 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 36564                                  NO_SET_ID:
 36565                                  	; 10/06/2019 - Retro DOS v4.0
 36566 00006398 2EFF36[5D63]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 36567 0000639D 2EFF36[5B63]            	PUSH	word [cS:SERVERTAB]	; push table address
 36568 000063A2 50                      	PUSH	AX
 36569 000063A3 E85DAE                  	call	TableDispatch
 36570                                  
 36571                                  ;hkn; SS override
 36572                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 36573 000063A6 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36574                                  	;error	error_invalid_function
 36575                                  	;mov	al,1
 36576 000063AC B001                    	MOV	AL,error_invalid_function
 36577                                  servercall_error:
 36578 000063AE E98DA2                  	JMP	SYS_RET_ERR
 36579                                  
 36580                                  SERVERRETURN:
 36581 000063B1 C3                      	retn
 36582                                  
 36583                                  ; Commit - iterate through the open file list and make sure that the
 36584                                  ; directory entries are correctly updated.
 36585                                  
 36586                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36587                                  COMMIT_ALL:
 36588 000063B2 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 36589 000063B4 16                      	push	ss
 36590 000063B5 1F                      	pop	ds
 36591 000063B6 E82EAF                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 36592                                  CommitLoop:
 36593 000063B9 53                      	push	bx
 36594 000063BA E82201                  	call	SFFromSFN
 36595 000063BD 7222                    	JC	short CommitDone
 36596 000063BF 26833D00                	cmp	word [es:di],0
 36597                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 36598                                  					; if (ThisSFT->refcount != 0)
 36599 000063C3 7418                    	JZ	short CommitNext
 36600                                  	;cmp	word [es:di],0FFFFh ; -1
 36601 000063C5 26833DFF                	cmp	word [ES:DI],sf_busy
 36602                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 36603                                  					; BUSY SFTs have god knows what
 36604 000063C9 7412                    	JZ	short CommitNext	;   in them.
 36605                                  	; 17/12/2022
 36606 000063CB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 36607                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 36608 000063D0 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 36609                                  					;	doesn't deadlock
 36610 000063D2 893E[9E05]              	MOV	[THISSFT],DI
 36611 000063D6 8C06[A005]              	MOV	[THISSFT+2],ES
 36612 000063DA E8D1CB                  	call	DOS_COMMIT		;	DOSCommit ();
 36613                                  CommitNext:
 36614 000063DD 5B                      	pop	bx
 36615 000063DE 43                      	INC	BX
 36616 000063DF EBD8                    	JMP	short CommitLoop
 36617                                  CommitDone:
 36618 000063E1 E81EAF                  	call	LCritSFT
 36619 000063E4 5B                      	pop	bx
 36620                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36621                                  Commit_Ok:
 36622 000063E5 E94DA2                  	jmp	SYS_RET_OK
 36623                                  	
 36624                                  CLOSE_NAME:
 36625                                  
 36626                                  ;if installed
 36627                                  
 36628                                  ;hkn; SS override
 36629                                  	;call	far [ss:MFTcloN]
 36630 000063E8 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 36631                                  ;else
 36632                                  ;	Call	MFTcloN
 36633                                  ;endif
 36634                                  
 36635                                  CheckReturns:
 36636                                  
 36637                                  ; 10/03/2024
 36638                                  %if 0
 36639                                  	JC	short func_err
 36640                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36641                                  	;transfer SYS_RET_OK
 36642                                  Commit_Okj:
 36643                                  	jmp	short Commit_Ok
 36644                                  	;jmp	SYS_RET_OK
 36645                                  %else
 36646 000063ED 73F6                    	jnc	short Commit_Ok
 36647                                  %endif
 36648                                  
 36649                                  func_err:
 36650                                  	;transfer SYS_RET_ERR
 36651                                  	;jmp	SYS_RET_ERR
 36652 000063EF EBBD                    	jmp	short servercall_error
 36653                                  
 36654                                  CLOSE_UID:
 36655                                  
 36656                                  ;if installed
 36657                                  ;hkn; SS override
 36658                                  	;call	far [ss:MFTclU]
 36659 000063F1 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 36660                                  ;else
 36661                                  ;	Call	MFTclU
 36662                                  ;endif
 36663 000063F6 EBF5                    	JMP	short CheckReturns
 36664                                  
 36665                                  CLOSE_UID_PID:
 36666                                  
 36667                                  ;if installed
 36668                                  ;hkn; SS override
 36669                                  	;call	far [ss:MFTCloseP]
 36670 000063F8 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP
 36671                                  ;else
 36672                                  ;	Call	MFTCloseP
 36673                                  ;endif
 36674 000063FD EBEE                    	JMP	short CheckReturns
 36675                                  
 36676                                  GET_LIST:
 36677                                  
 36678                                  ;if installed
 36679                                  ;hkn; SS override
 36680                                  	;call	far [ss:MFT_get]
 36681 000063FF 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 36682                                  ;else
 36683                                  ;	Call	MFT_get
 36684                                  ;endif
 36685 00006404 72E9                    	JC	short func_err
 36686 00006406 E87CA0                  	call	Get_User_Stack
 36687                                  	;mov	[si+2],bx
 36688 00006409 895C02                  	MOV	[SI+user_env.user_BX],BX
 36689                                  	;mov	[si+10],di
 36690 0000640C 897C0A                  	MOV	[SI+user_env.user_DI],DI
 36691                                  	;mov	[si+16],es
 36692 0000640F 8C4410                  	MOV	[SI+user_env.user_ES],ES
 36693                                  SetCXOK:
 36694                                  	;mov	[si+4],cx
 36695 00006412 894C04                  	MOV	[SI+user_env.user_CX],CX
 36696                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36697                                  	;transfer SYS_RET_OK
 36698                                  Commit_Okj2:
 36699                                  	; 17/12/2022
 36700 00006415 EBCE                    	jmp	short Commit_Ok
 36701                                  	;jmp	short Commit_Okj
 36702                                  	;;jmp	SYS_RET_OK
 36703                                  
 36704                                  SRV_CALL:
 36705 00006417 58                      	POP	AX			; get rid of call to $srvcall
 36706 00006418 1E                      	push	ds
 36707 00006419 56                      	push	si
 36708 0000641A E868A0                  	call	Get_User_Stack
 36709 0000641D 5F                      	pop	di
 36710 0000641E 07                      	pop	es
 36711                                  
 36712                                  ; DS:SI point to stack
 36713                                  ; ES:DI point to DPL
 36714                                  
 36715 0000641F E8C0AD                  	call	XCHGP
 36716                                  
 36717                                  ; DS:SI point to DPL
 36718                                  ; ES:DI point to stack
 36719                                  ;
 36720                                  ; We now copy the registers from DPL to save stack
 36721                                  
 36722 00006422 56                      	push	si
 36723 00006423 B90600                  	MOV	CX,6
 36724 00006426 F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 36725 00006428 47                      	INC	DI
 36726 00006429 47                      	INC	DI			; Skip user_BP
 36727 0000642A A5                      	MOVSW				; DS
 36728 0000642B A5                      	MOVSW				; ES
 36729 0000642C 5E                      	pop	si			; DS:SI -> DPL
 36730 0000642D 8B04                    	mov	ax,[SI]
 36731                                  	;MOV	AX,[SI+DPL.AX]
 36732                                  	;mov	bx,[si+2]
 36733 0000642F 8B5C02                  	MOV	BX,[SI+DPL.BX]
 36734                                  	;mov	cx,[si+4]
 36735 00006432 8B4C04                  	MOV	CX,[SI+DPL.CX]
 36736                                  	;mov	dx,[si+6]
 36737 00006435 8B5406                  	MOV	DX,[SI+DPL.DX]
 36738                                  	;mov	di,[si+10]
 36739 00006438 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 36740                                  	;mov	es,[si+14]
 36741 0000643B 8E440E                  	MOV	ES,[SI+DPL.ES]
 36742                                  	;push	word [si+8]
 36743 0000643E FF7408                  	PUSH	word [SI+DPL.SI]
 36744                                  	;mov	ds,[si+12]
 36745 00006441 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 36746 00006444 5E                      	POP	SI
 36747                                  
 36748                                  ;hkn; SS override for next 3
 36749 00006445 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 36750 0000644A 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 36751 0000644F 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 36752 00006455 E92F9F                  	jmp	REDISP
 36753                                  
 36754                                  GET_DOS_DATA:
 36755 00006458 16                      	push	ss
 36756 00006459 07                      	pop	es
 36757 0000645A BF[2003]                	MOV     DI,SWAP_START
 36758 0000645D B9[AC0A]                	MOV     CX,SWAP_END
 36759 00006460 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 36760 00006463 29F9                    	SUB     CX,DI
 36761 00006465 29FA                    	SUB     DX,DI
 36762 00006467 D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 36763 00006469 83D100                  	ADC     CX,0                    ; div by 2 + round up
 36764 0000646C D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 36765 0000646E E814A0                  	call	Get_User_Stack
 36766                                  	;mov	[si+14],es
 36767 00006471 8C440E                  	MOV     [SI+user_env.user_DS],ES
 36768                                  	;mov	[si+8],di
 36769 00006474 897C08                  	MOV     [SI+user_env.user_SI],DI
 36770                                  	;mov	[si+6],dx
 36771 00006477 895406                  	MOV     [SI+user_env.user_DX],DX
 36772 0000647A EB96                    	JMP	short SetCXOK
 36773                                  
 36774                                  SPOOL_OPER:
 36775                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 36776                                  
 36777 0000647C 50                      	push    ax
 36778 0000647D B82511                  	mov     ax,1125h
 36779 00006480 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 36780                                  			; STACK: WORD subfunction
 36781                                  			; Return: CF set on error, AX = error code
 36782                                  			; STACK unchanged
 36783 00006482 5B                      	pop	bx
 36784                                  	; 17/12/2022
 36785                                  	;JC	short func_err2
 36786 00006483 7390                    	jnc	short Commit_Okj2
 36787                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36788                                  	;;jmp	SYS_RET_OK
 36789                                  	;jmp	short Commit_Okj2
 36790                                  	
 36791                                  func_err2:
 36792 00006485 E9B6A1                  	jmp	SYS_RET_ERR
 36793                                  
 36794                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 36795                                  ;--------------------------------------------------------------------------
 36796                                  ;
 36797                                  ; Procedure Name : $SetExtendedError
 36798                                  ;
 36799                                  ; $SetExtendedError takes extended error information and loads it up for the
 36800                                  ; next extended error call. This is used by interrupt-level proccessors to
 36801                                  ; mask their actions.
 36802                                  ;
 36803                                  ;   Inputs: DS:SI points to DPL which contains all registers
 36804                                  ;   Outputs: none
 36805                                  ;
 36806                                  ;---------------------------------------------------------------------------
 36807                                  
 36808                                  _$SetExtendedError:
 36809                                  
 36810                                  ;hkn; SS override for all variables used
 36811                                  
 36812 00006488 8B04                    	mov	ax,[si]
 36813                                  	;MOV	AX,[SI+DPL.AX]
 36814 0000648A 36A3[2403]              	MOV	[SS:EXTERR],AX
 36815                                  	;mov	ax,[si+10]
 36816 0000648E 8B440A                  	MOV	AX,[SI+DPL.DI]
 36817 00006491 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 36818                                  	;mov	ax,[si+14]
 36819 00006495 8B440E                  	MOV	AX,[SI+DPL.ES]
 36820 00006498 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 36821                                  	;mov	ax,[si+2]
 36822 0000649C 8B4402                  	MOV	AX,[SI+DPL.BX]
 36823 0000649F 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 36824                                  	;mov	ax,[si+4]
 36825 000064A3 8B4404                  	MOV	AX,[SI+DPL.CX]
 36826 000064A6 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 36827 000064AB C3                      	retn
 36828                                  
 36829                                  ;============================================================================
 36830                                  ; UTIL.ASM, MSDOS 6.0, 1991
 36831                                  ;============================================================================
 36832                                  ; 05/08/2018 - Retro DOS v3.0
 36833                                  ; 05/05/2019 - Retro DOS v4.0
 36834                                  
 36835                                  ;**	Handle related utilities for MSDOS 2.X.
 36836                                  ;----------------------------------------------------------------------------
 36837                                  ;	pJFNFromHandle	written
 36838                                  ;	SFFromHandle	written
 36839                                  ;	SFFromSFN	written
 36840                                  ;	JFNFree 	written
 36841                                  ;	SFNFree 	written
 36842                                  ;
 36843                                  ;	Modification history:
 36844                                  ;
 36845                                  ;	    Created: MZ 1 April 1983
 36846                                  ;----------------------------------------------------------------------------
 36847                                  
 36848                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 36849                                  
 36850                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 36851                                  ;----------------------------------------------------------------------------
 36852                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 36853                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 36854                                  ;
 36855                                  ;	NOTE:
 36856                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36857                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 36858                                  ;
 36859                                  ;	ENTRY	(bx) = handle
 36860                                  ;	EXIT	'C' clear if ok
 36861                                  ;		  (es:di) = address of JFN value
 36862                                  ;		'C' set if error
 36863                                  ;		  (ax) = error code
 36864                                  ;	USES	AX, DI, ES, Flags
 36865                                  ;----------------------------------------------------------------------------
 36866                                  
 36867                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36868                                  
 36869                                  pJFNFromHandle:
 36870                                  	; 05/05/2019 - Retro DOS v4.0
 36871                                  	;getdseg <es>			; es -> dosdata
 36872 000064AC 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36873                                  	
 36874                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 36875 000064B1 268E06[3003]            	mov	es,[es:CurrentPDB]
 36876                                  
 36877                                  	;cmp	bx,[ES:32h]
 36878 000064B6 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 36879 000064BB 7204                    	JB	short pjfn10		; no, get offset
 36880                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 36881                                  	;mov	al,6
 36882 000064BD B006                    	MOV     AL,error_invalid_handle ; appropriate error
 36883                                  ReturnCarry:
 36884 000064BF F9                      	STC                             ; signal error
 36885 000064C0 C3                      	retn				; go back
 36886                                  pjfn10: 
 36887                                  	;les	di,[es:34h]
 36888 000064C1 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 36889 000064C6 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 36890                                  	;clc
 36891                                  pJFNFromHandle_error:
 36892 000064C8 C3                      	retn
 36893                                  
 36894                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 36895                                  ;----------------------------------------------------------------------------
 36896                                  ;
 36897                                  ; Procedure Name : SFFromHandle
 36898                                  ;
 36899                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 36900                                  ;
 36901                                  ;   Input:      BX has handle
 36902                                  ;   Output:     Carry Set
 36903                                  ;                   AX has error code
 36904                                  ;               Carry Reset
 36905                                  ;                   ES:DI has pointer to SF entry
 36906                                  ;   Registers modified: If error, AX,ES, else ES:DI
 36907                                  ; NOTE:
 36908                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 36909                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36910                                  ;
 36911                                  ;----------------------------------------------------------------------------
 36912                                  
 36913                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36914                                  
 36915                                  SFFromHandle:
 36916 000064C9 E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 36917                                  	;retc				; return if error
 36918 000064CC 72FA                    	jc	short pJFNFromHandle_error
 36919 000064CE 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 36920                                  	;JNZ	short GetSF		; nope, suck out SF
 36921                                  	;;mov	al,6
 36922                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36923                                  	;jmp	short ReturnCarry	; signal it
 36924                                  	; 17/12/2022
 36925                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36926 000064D2 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 36927                                  	;JNZ	short GetSF		; nope, suck out SF
 36928                                  	;;mov	al,6
 36929                                  	;MOV	AL,error_invalid_handle ; appropriate error
 36930                                  	;jmp	short ReturnCarry	; signal it
 36931                                  GetSF:
 36932 000064D4 53                      	push	bx			; save handle
 36933 000064D5 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 36934 000064D8 30FF                    	XOR     BH,BH                   ; ignore upper half
 36935 000064DA E80200                  	CALL    SFFromSFN               ; get real sf spot
 36936 000064DD 5B                      	pop	bx			; restore
 36937 000064DE C3                      	retn                        	; say goodbye
 36938                                  
 36939                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 36940                                  
 36941                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 36942                                  ;----------------------------------------------------------------------------
 36943                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 36944                                  ;	is more than just a simple index instruction because the SF table
 36945                                  ;	can be made up of multiple pieces chained together. We follow the
 36946                                  ;	chain to the right piece and then do the index operation.
 36947                                  ;
 36948                                  ;   NOTE:
 36949                                  ;	This routine is called from SFFromHandle which is called
 36950                                  ;       at DOSINIT time with SS NOT DOSGROUP
 36951                                  ;
 36952                                  ;	ENTRY	BX has SF index
 36953                                  ;	EXIT	'C' clear if OK
 36954                                  ;		  ES:DI points to SF entry
 36955                                  ;		'C' set if index too large
 36956                                  ;	USES	BX, DI, ES
 36957                                  ;----------------------------------------------------------------------------
 36958                                  
 36959                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36960                                  
 36961                                  SFFromSFN:
 36962                                  	; 05/05/2019 - Retro DOS v4.0
 36963                                  	;getdseg <es>			; es -> dosdata
 36964 000064DF 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 36965                                  
 36966                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 36967 000064E4 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 36968                                  sfsfn5:	
 36969                                  	;cmp	bx,[es:di+4]
 36970 000064E9 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 36971 000064ED 720E                    	JB	short sfsfn7		; yes, go grab it
 36972                                  	;sub	bx,[es:di+4]
 36973 000064EF 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 36974 000064F3 26C43D                  	les	di,[es:di] ; 14/08/2018
 36975                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 36976 000064F6 83FFFF                  	CMP     DI,-1                   ; end of tables?
 36977 000064F9 75EE                    	JNZ	short sfsfn5		; no, try again
 36978 000064FB F9                      	STC
 36979 000064FC C3                      	retn				; return with error, not found
 36980                                  sfsfn7:
 36981 000064FD 50                      	push	ax
 36982                                  	;mov	ax,53 ; MSDOS 3.3
 36983                                  	;mov	ax,59 ; MSDOS 6.0
 36984                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 36985                                  	
 36986                                  	; 17/12/2022
 36987 000064FE B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 36988                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36989                                  	;mov	ax,SF_ENTRY.size ; 59
 36990                                  	
 36991 00006500 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 36992 00006502 01C7                    	ADD	DI,AX			; add base of SF block
 36993 00006504 58                      	pop	ax
 36994                                  	;add	di,6
 36995 00006505 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 36996 00006508 C3                      	retn				; return with 'C' clear
 36997                                  
 36998                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 36999                                  
 37000                                  ;**	JFNFree - Find a Free JFN Slot
 37001                                  ;----------------------------------------------------------------------------
 37002                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 37003                                  ;
 37004                                  ;	ENTRY	(ss) = DOSDATA
 37005                                  ;	EXIT	'C' clear if OK
 37006                                  ;		  (bx) = new handle
 37007                                  ;		  (es:di) = pointer to JFN slot
 37008                                  ;		'C' set if error
 37009                                  ;		  (al) = error code
 37010                                  ;	USES	bx, di, es, flags
 37011                                  ;----------------------------------------------------------------------------
 37012                                  
 37013                                  JFNFree:
 37014 00006509 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 37015                                  jfnf1:	
 37016 0000650B E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 37017 0000650E 7209                    	JC	short jfnf5		; no more handles
 37018 00006510 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 37019 00006514 7405                    	je	short jfnfx		; yes, carry is clear
 37020 00006516 43                      	INC     BX                      ; no, next handle
 37021 00006517 EBF2                    	JMP	short jfnf1		; and try again
 37022                                  
 37023                                  	; Error. 'C' set
 37024                                  jfnf5:	
 37025                                  	;mov	al,4
 37026 00006519 B004                    	MOV	AL,error_too_many_open_files
 37027                                  jfnfx:	
 37028 0000651B C3                      	retn				; bye
 37029                                  
 37030                                  ;	BREAK <SFNFree - Allocate a free SFN>
 37031                                  
 37032                                  ;**	SFNFree - Allocate a Free SFN/SFT
 37033                                  ;----------------------------------------------------------------------------
 37034                                  ;	SFNFree scans through the sf table looking for a free entry
 37035                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 37036                                  ;
 37037                                  ;	The problem is that we want to mark the SFT busy so that other threads
 37038                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 37039                                  ;	we can't just mark it busy because we may get blown out of our open
 37040                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 37041                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 37042                                  ;	an SFT with this value we look to see if it belongs to this user
 37043                                  ;	and process.  If it does belong to us then it must be an orphan
 37044                                  ;	and we reclaim it.
 37045                                  ;
 37046                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 37047                                  ;		over and over, but we could at least set a high water mark...
 37048                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 37049                                  ;		even though this is not a frequently called routine - jgl
 37050                                  ;
 37051                                  ;	ENTRY	(ss) = DOSDATA
 37052                                  ;	EXIT	'C' clear if no error
 37053                                  ;		  (bx) = SFN
 37054                                  ;		  (es:di) = pointer to SFT
 37055                                  ;		  es:[di].SFT_REF_COUNT = -1
 37056                                  ;		'C' set if error
 37057                                  ;		  (al) = error code
 37058                                  ;	USES	bx, di, es, Flags
 37059                                  ;----------------------------------------------------------------------------
 37060                                  
 37061                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37062                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 37063                                  
 37064                                  SFNFree:
 37065                                  	; 12/08/2018
 37066                                  	; 05/08/2018 - Retro DOS v3.0
 37067                                  	;
 37068                                  	; MSDOS 6.0
 37069 0000651C 50                      	push	ax
 37070 0000651D 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 37071                                  sfnf5:	
 37072 0000651F 53                      	push	bx
 37073 00006520 E8BCFF                  	call	SFFromSFN		; get the potential handle
 37074 00006523 5B                      	pop	bx
 37075 00006524 723A                    	jc	short sfnf95		; no more free SFNs
 37076 00006526 26833D00                	cmp	word [ES:DI],0
 37077                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 37078 0000652A 741D                    	je	short sfnf20			; yep, got one
 37079                                  	
 37080                                  	;cmp	word [es:di],0FFFFh ; -1
 37081 0000652C 26833DFF                	cmp	word [ES:DI],sf_busy
 37082                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 37083 00006530 7403                    	je	short sfnf10		; special busy mark
 37084                                  sfnf7:	
 37085 00006532 43                      	inc	bx			; try the next one
 37086 00006533 EBEA                    	jmp	short sfnf5
 37087                                  
 37088                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 37089                                  ;	it was abandoned during a earlier call and we can use it.
 37090                                  ;
 37091                                  ;	(bx)	= SFN
 37092                                  ;	(es:di) = pointer to SFT
 37093                                  ;	(TOS)	= caller's (ax)
 37094                                  
 37095                                  sfnf10:	
 37096 00006535 36A1[3E03]              	mov	ax,[SS:USER_ID]
 37097                                  	;cmp	[es:di+2Fh],ax
 37098 00006539 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 37099 0000653D 75F3                    	jnz	short sfnf7		; not ours
 37100 0000653F 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 37101                                  	;cmp	[es:di+31h],ax
 37102 00006543 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 37103 00006547 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 37104                                  
 37105                                  ;	We have an SFT to allocate
 37106                                  ;
 37107                                  ;	(bx)	= SFN
 37108                                  ;	(es:di) = pointer to SFT
 37109                                  ;	(TOS)	= caller's (ax)
 37110                                  
 37111                                  sfnf20:
 37112                                  	; cf = 0 ;; Retro DOS v3.0
 37113                                  
 37114                                  	;mov	word [es:di],0FFFFh
 37115 00006549 26C705FFFF              	mov	word [ES:DI],sf_busy
 37116                                  					; make sure that this is allocated
 37117                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 37118                                  
 37119 0000654E 36A1[3E03]              	mov	ax,[SS:USER_ID]
 37120                                  	;mov	[es:di+2Fh],ax
 37121 00006552 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 37122 00006556 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 37123                                  	;mov	[es:di+31h],ax
 37124 0000655A 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 37125                                  sfnf21: ;; Retro DOS v3.0
 37126                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37127                                  	;pop	ax
 37128                                  	;;clc
 37129                                  	;retn				; return with no error
 37130                                  	; 17/12/2022
 37131 0000655E 58                      	pop	ax
 37132                                  	;clc
 37133 0000655F C3                      	retn
 37134                                  
 37135                                  ;**	Error - no more free SFNs
 37136                                  ;
 37137                                  ;	'C' set
 37138                                  ;	(TOS) = saved ax
 37139                                  
 37140                                  sfnf95: 
 37141 00006560 58                      	pop	ax
 37142                                  
 37143                                  ; 11/03/2024
 37144                                  %if 0
 37145                                  	;mov	al,4
 37146                                  	mov	al,error_too_many_open_files
 37147                                  	retn				; return with 'C' and error
 37148                                  %else
 37149                                  	; 11/03/2024
 37150 00006561 EBB6                    	jmp	short jfnf5
 37151                                  %endif
 37152                                  
 37153                                  ;============================================================================
 37154                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 37155                                  ;============================================================================
 37156                                  ; 13/07/2018 - Retro DOS v3.0
 37157                                  ; 20/05/2019 - Retro DOS v4.0
 37158                                  
 37159                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 37160                                  
 37161                                  ;	BREAK <$Close - return a handle to the system>
 37162                                  ;----------------------------------------------------------------------------
 37163                                  ;
 37164                                  ;**	$Close - Close a file Handle
 37165                                  ;
 37166                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 37167                                  ;		path
 37168                                  ;
 37169                                  ;	Assembler usage:
 37170                                  ;	    MOV     BX, handle
 37171                                  ;	    MOV     AH, Close
 37172                                  ;	    INT     int_command
 37173                                  ;
 37174                                  ;	ENTRY	(bx) = handle
 37175                                  ;	EXIT	<normal INT21 return convention>
 37176                                  ;	USES	all
 37177                                  ;
 37178                                  ;----------------------------------------------------------------------------
 37179                                  
 37180                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37181                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 37182                                  
 37183                                  _$CLOSE:
 37184                                  ;	Grab the SFT pointer from the JFN.
 37185                                  
 37186 00006563 E84802                  	call	CheckOwner		; get system file entry
 37187 00006566 722B                    	jc	short CloseError	; error return
 37188 00006568 16                      	push	ss
 37189 00006569 1F                      	pop	ds			; For DOS_CLOSE
 37190 0000656A 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37191 0000656E 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37192                                  
 37193                                  ; DS:SI point to JFN table entry.
 37194                                  ; ES:DI point to SFT
 37195                                  ;
 37196                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 37197                                  ; FCB, we examine the ref count on the SFT; if it was 1, we free the JFN.
 37198                                  ; If the file was not a net FCB, we free the JFN too.
 37199                                  
 37200                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 37201 00006572 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 37202 00006576 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 37203                                  	;mov	al,[ES:DI+2]
 37204 00006578 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 37205                                  	;and	al,0F0h
 37206 0000657C 24F0                    	AND	AL,SHARING_MASK
 37207                                  	;cmp	al,70h
 37208 0000657E 3C70                    	CMP	AL,SHARING_NET_FCB
 37209 00006580 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 37210                                  
 37211                                  ; The JFN must be freed. Get the pointer to it and replace the contents with
 37212                                  ; -1.
 37213                                  
 37214                                  FreeJFN:
 37215 00006582 E827FF                  	call	pJFNFromHandle		; d = pJFN (handle);
 37216 00006585 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 37217                                  PostFree:
 37218                                  
 37219                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 37220                                  
 37221 00006589 E8E1C8                  	call	DOS_CLOSE
 37222                                  
 37223                                  ; DOS_Close may return an error. If we see such an error, we report it but
 37224                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 37225                                  
 37226 0000658C 7205                    	JC	short CloseError
 37227                                  	;mov	ah,3Eh
 37228 0000658E B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 37229                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37230                                  CloseOk:
 37231 00006590 E9A2A0                  	jmp	SYS_RET_OK
 37232                                  CloseError:
 37233                                  CommitError:	; 11/03/2024
 37234 00006593 E9A8A0                  	jmp	SYS_RET_ERR
 37235                                  
 37236                                  ;	BREAK <$Commit - commit the file>
 37237                                  ;----------------------------------------------------------------------------
 37238                                  ;
 37239                                  ;**	$Commit - Commit a File
 37240                                  ;
 37241                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 37242                                  ;	flushed out. BUGBUG - I'm pretty sure that $Commit doesn't update
 37243                                  ;	the directory entry, etc., so this commit is pretty useless. check
 37244                                  ;	and fix this!! jgl
 37245                                  ;
 37246                                  ;	Assembler usage:
 37247                                  ;	    MOV     BX, handle
 37248                                  ;	    MOV     AH, Commit
 37249                                  ;	    INT     int_command
 37250                                  ;
 37251                                  ;	ENTRY	(bx) = handle
 37252                                  ;	EXIT	none
 37253                                  ;	USES	all
 37254                                  ;;----------------------------------------------------------------------------
 37255                                  
 37256                                  _$COMMIT:
 37257                                  ;	Grab the SFT pointer from the JFN.
 37258                                  
 37259 00006596 E81502                  	call	CheckOwner		; get system file entry
 37260                                  	;JC	short CommitError	; error return
 37261                                  	; 11/03/2024
 37262 00006599 72F8                    	jc	short CommitError
 37263                                  
 37264 0000659B 16                      	push	ss
 37265 0000659C 1F                      	pop	ds			; For DOS_COMMIT
 37266 0000659D 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 37267 000065A1 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 37268                                  
 37269                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 37270                                  ;
 37271                                  ;	ES:DI point to SFT
 37272                                  
 37273 000065A5 E806CA                  	call	DOS_COMMIT
 37274 000065A8 72E9                    	JC	short CommitError
 37275                                  	; 07/12/2022
 37276                                  	;jc	short CloseError
 37277                                  	;mov	ah,68h
 37278 000065AA B468                    	MOV	AH,COMMIT
 37279                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37280                                  	;jmp	SYS_RET_OK
 37281                                  CommitOk:
 37282 000065AC EBE2                    	jmp	short CloseOk
 37283                                  
 37284                                  ; 11/03/2024
 37285                                  ;CommitError:
 37286                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37287                                  ;	;jmp	SYS_RET_ERR
 37288                                  ;	jmp	short CloseError
 37289                                  
 37290                                  ;	BREAK <$ExtHandle - extend handle count>
 37291                                  
 37292                                  ;**	$ExtHandle - Extend Handle Count
 37293                                  ;----------------------------------------------------------------------------
 37294                                  ;	Assembler usage:
 37295                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 37296                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 37297                                  ;	    INT     int_command 		 busy )
 37298                                  ;
 37299                                  ;	ENTRY	(bx) = new number of handles
 37300                                  ;	EXIT	'C' clear if OK
 37301                                  ;		'C' set iff err
 37302                                  ;		  (ax) = error code
 37303                                  ;			 AX = error_not_enough_memory
 37304                                  ;			      error_too_many_open_files
 37305                                  ;	USES	all
 37306                                  ;----------------------------------------------------------------------------
 37307                                  
 37308                                  _$ExtHandle:
 37309 000065AE 31ED                    	XOR	BP,BP			; 0: enlarge  1: shrink  2:psp
 37310                                  	;cmp	bx,20
 37311 000065B0 83FB14                  	CMP	BX,FILPERPROC
 37312 000065B3 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 37313 000065B5 BB1400                  	MOV	BX,FILPERPROC
 37314                                  exth2:	
 37315 000065B8 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 37316                                  	;mov	cx,[ES:32h]
 37317 000065BD 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 37318 000065C2 39CB                    	CMP	BX,CX			; the requested == current
 37319                                  	;JE	short ok_done 		; yes and exit
 37320                                  	; 11/03/2024
 37321 000065C4 74CA                    	je	short CloseOk
 37322 000065C6 771E                    	JA	short larger		; go allocate new table
 37323                                  
 37324                                  ;	We're going to shrink the # of handles available
 37325                                  
 37326                                  	;MOV	BP,1			; shrink
 37327                                  	; 11/03/2024
 37328 000065C8 45                      	inc	bp
 37329                                  	;mov	ds,[ES:36h]
 37330 000065C9 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 37331 000065CE 89DE                    	MOV	SI,BX			;
 37332 000065D0 29D9                    	SUB	CX,BX			; get difference
 37333                                  
 37334                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 37335                                  chck_handles:
 37336 000065D2 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 37337 000065D5 753A                    	JNZ	short too_many_files	; status
 37338 000065D7 46                      	INC	SI
 37339 000065D8 E2F8                    	LOOP	chck_handles
 37340 000065DA 83FB14                  	CMP	BX,FILPERPROC		; = 20
 37341 000065DD 7707                    	JA	short larger		; no
 37342                                  
 37343                                  	;MOV	BP,2			; psp
 37344                                  	; 11/03/2024
 37345 000065DF 45                      	inc	bp
 37346                                  	;mov	di,24
 37347 000065E0 BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 37348 000065E3 53                      	PUSH	BX
 37349 000065E4 EB1C                    	JMP	short movhandl
 37350                                  
 37351                                  larger:
 37352 000065E6 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 37353 000065E9 747C                    	JZ	short invalid_func	; 10/08/2018
 37354 000065EB F8                      	CLC
 37355 000065EC 53                      	PUSH	BX			; save requested number
 37356 000065ED 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 37357 000065F0 B104                    	MOV	CL,4
 37358                                  	;ror	bx,cl			; MSDOS 3.3
 37359 000065F2 D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 37360                                  	;AND	BX,1FFFH		; clear most 3 bits
 37361                                  	; 01/07/2024
 37362 000065F4 80E71F                  	and	bh,1Fh
 37363                                  
 37364 000065F7 55                      	PUSH	BP
 37365 000065F8 E8FDFA                  	call	_$ALLOC			; allocate memory
 37366 000065FB 5D                      	POP	BP
 37367 000065FC 7264                    	JC	short no_memory		; not enough memory
 37368                                  
 37369 000065FE 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 37370 00006600 31FF                    	XOR	DI,DI
 37371                                  movhandl:
 37372 00006602 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 37373                                  
 37374 00006607 F7C50300                	test	BP,3			; enlarge ?
 37375 0000660B 7409                    	JZ	short enlarge 		; yes
 37376 0000660D 59                      	POP	CX			; cx = the amount you shrink
 37377 0000660E 51                      	PUSH	CX
 37378 0000660F EB09                    	JMP	short copy_hand
 37379                                  
 37380                                  ;	Done.  'C' clear
 37381                                  
 37382                                  ; 17/12/2022
 37383                                  ;ok_done:
 37384                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37385                                  ;	;jmp	short CommitOk
 37386                                  ;	; 17/12/2022
 37387                                  ;	jmp	SYS_RET_OK
 37388                                  
 37389                                  too_many_files:
 37390                                  	;mov	al,4
 37391 00006611 B004                    	MOV	AL,error_too_many_open_files
 37392                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37393                                  	;jmp	SYS_RET_ERR
 37394                                  CommitErrorj:
 37395                                  	;jmp	short CommitError
 37396                                  	; 17/12/2022
 37397 00006613 E928A0                  	jmp	SYS_RET_ERR
 37398                                  
 37399                                  ; 11/03/2024
 37400                                  ; 17/12/2022
 37401                                  ;ok_done:
 37402                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37403                                  ;	;jmp	short CommitOk
 37404                                  ;	; 17/12/2022
 37405                                  ;	jmp	SYS_RET_OK
 37406                                  
 37407                                  enlarge:
 37408                                  	;mov	cx,[32h]
 37409 00006616 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 37410                                  copy_hand:
 37411 0000661A 89CA                    	MOV	DX,CX
 37412                                  	;lds	si,[34h]
 37413 0000661C C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 37414 00006620 F3A4                    	REP	MOVSB			; copy information to new table
 37415 00006622 59                      	POP	CX			; get new number of handles
 37416 00006623 51                      	PUSH	CX			; save it again
 37417 00006624 29D1                    	SUB	CX,DX			; get the difference
 37418 00006626 B0FF                    	MOV	AL,-1			; set availability to handles
 37419 00006628 F3AA                    	REP	STOSB
 37420 0000662A 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 37421                                  	;cmp	word [34h],0
 37422 0000662F 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 37423 00006634 750D                    	JNZ	short update_info	; yes, go update PDB entries
 37424 00006636 55                      	PUSH	BP
 37425 00006637 1E                      	PUSH	DS			; save old table segment
 37426 00006638 06                      	PUSH	ES			; save new table segment
 37427 00006639 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 37428 0000663D E82DFC                  	call	_$DEALLOC		; deallocate old table memory
 37429 00006640 07                      	POP	ES			; restore new table segment
 37430 00006641 1F                      	POP	DS			; restore old table segment
 37431 00006642 5D                      	POP	BP
 37432                                  
 37433                                  update_info:
 37434 00006643 F7C50200                	test	BP,2			; psp?
 37435 00006647 7408                    	JZ	short non_psp 		; no
 37436                                  	;mov	word [34h],18h ; 24
 37437 00006649 C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 37438 0000664F EB06                    	JMP	short final
 37439                                  non_psp:
 37440                                  	;mov	word [34h],0
 37441 00006651 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 37442                                  final:
 37443                                  	;mov	[36h],es	
 37444 00006657 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 37445                                  	;pop	word [32h]
 37446 0000665B 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 37447                                  	; 11/03/2024
 37448                                  ok_done:
 37449                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37450 0000665F E9D39F                  	jmp	SYS_RET_OK
 37451                                  ;ok_done_j:
 37452                                  ;	jmp	short ok_done
 37453                                  
 37454                                  no_memory:
 37455 00006662 5B                      	POP	BX			; clean stack
 37456                                  	;mov	al,8
 37457 00006663 B008                    	MOV	AL,error_not_enough_memory
 37458                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37459                                  	;jmp	SYS_RET_ERR
 37460                                  CommitErrorj2:
 37461 00006665 EBAC                    	jmp	short CommitErrorj
 37462                                  
 37463                                  invalid_func:
 37464                                  	;mov	al,1
 37465 00006667 B001                    	MOV	AL,error_invalid_function
 37466                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37467                                  	;jmp	SYS_RET_ERR
 37468                                  CommitErrorj3:
 37469                                  	;jmp	short CommitErrorj2
 37470                                  	; 17/12/2022
 37471 00006669 EBA8                    	jmp	short CommitErrorj
 37472                                  
 37473                                  ; 20/05/2019 - Retro DOS v4.0
 37474                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 37475                                  
 37476                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37477                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 37478                                  
 37479                                  ;	BREAK <$READ - Read from a file handle>
 37480                                  ;----------------------------------------------------------------------------
 37481                                  ;
 37482                                  ;**	$Read - Read from a File Handle
 37483                                  ;
 37484                                  ;   Assembler usage:
 37485                                  ;
 37486                                  ;	LDS	DX, buf
 37487                                  ;	MOV	CX, count
 37488                                  ;	MOV	BX, handle
 37489                                  ;	MOV	AH, Read
 37490                                  ;	INT	int_command
 37491                                  ;	  AX has number of bytes read
 37492                                  ;
 37493                                  ;	ENTRY	(bx) = file handle
 37494                                  ;		(cx) = byte count
 37495                                  ;		(ds:dx) = buffer address
 37496                                  ;	EXIT	Through system call return so that to user:
 37497                                  ;		  'C' clear if OK
 37498                                  ;		    (ax) = bytes read
 37499                                  ;		  'C' set if error
 37500                                  ;		    (ax) = error code
 37501                                  ;
 37502                                  ;----------------------------------------------------------------------------
 37503                                  
 37504                                  	; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37505                                  	; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A83Ah
 37506                                  
 37507                                  	; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA2Eh)
 37508                                  
 37509                                  _$READ:
 37510 0000666B BE[F231]                	MOV	SI,DOS_READ
 37511                                  ReadDo:
 37512 0000666E E83BFE                  	call	pJFNFromHandle
 37513 00006671 7208                    	JC	short ReadError
 37514                                  
 37515 00006673 268A05                  	MOV	AL,[ES:DI]
 37516 00006676 E83501                  	call	CheckOwner		; get the handle
 37517 00006679 7303                    	JNC	short ReadSetup		; no errors do the operation
 37518                                  
 37519                                  ;	Have an error. 'C' set
 37520                                  
 37521                                  ReadError:
 37522                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37523                                  	;;jmp	SYS_RET_ERR		; go to error traps
 37524                                  	;jmp	short CommitErrorj3
 37525                                  	; 17/12/2022
 37526 0000667B E9C09F                  	jmp	SYS_RET_ERR
 37527                                  
 37528                                  ReadSetup:
 37529 0000667E 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 37530 00006683 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 37531                                  	; 20/05/2019 - Retro DOS v4.0
 37532                                  	; MSDOS 6.0 
 37533                                  ;; Extended Open
 37534                                  	;test	byte [es:di+3],20h
 37535 00006688 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 37536                                  						 ;AN000;;EO. need i24
 37537 0000668D 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 37538 0000668F 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 37539                                  					;AN000;;EO. set it off;smr;SS Override
 37540                                  needi24:				;AN000;
 37541                                  
 37542                                  ; 12/03/2024
 37543                                  %if 0
 37544                                  
 37545                                  ;; Extended Open
 37546                                  	push	word [SS:DMAADD]
 37547                                  	push	word [SS:DMAADD+2]	;smr;SS Override
 37548                                  
 37549                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37550                                  
 37551                                  	; 26/07/2019
 37552                                  
 37553                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37554                                  	;
 37555                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 37556                                  	; there is not another caller; it is better to put the code in this proc
 37557                                   	; here instead of calling it as a subroutine; but I have modified code
 37558                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 37559                                  
 37560                                  	; MSDOS 6.0
 37561                                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 37562                                  	
 37563                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37564                                  	; MSDOS 3.3
 37565                                  	;MOV	BX,DX			; copy offset
 37566                                  	;push	cx			; don't stomp on count
 37567                                  	;MOV	CL,4			; bits to shift bytes->para
 37568                                  	;SHR	BX,CL			; get number of paragraphs
 37569                                  	;pop	cx			; get count back
 37570                                  	;MOV	AX,DS			; get original segment
 37571                                  	;ADD	AX,BX			; get new segment
 37572                                  	;MOV	DS,AX			; in seg register
 37573                                  	;AND	DX,0Fh			; normalize offset
 37574                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37575                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37576                                  						;smr;SS Override
 37577                                  %else
 37578                                  	; 12/03/2024 (PCDOS 7.1 IBMDOS.COM)
 37579                                  	;;;
 37580 00006695 8CD8                    	mov	ax,ds			; original segment
 37581 00006697 36C51E[2C03]            	lds	bx,[ss:DMAADD]
 37582 0000669C 53                      	push	bx
 37583 0000669D 1E                      	push	ds
 37584 0000669E 89D3                    	mov	bx,dx
 37585 000066A0 D1EB                    	shr	bx,1
 37586 000066A2 D1EB                    	shr 	bx,1
 37587 000066A4 D1EB                    	shr	bx,1
 37588 000066A6 D1EB                    	shr	bx,1
 37589 000066A8 01D8                    	add	ax,bx			; new segment
 37590 000066AA 83E20F                  	and	dx,0Fh			; normalize offset
 37591                                  	;mov	[ss:DMAADD],dx		; use user DX as offset
 37592                                  	; 23/03/2024
 37593 000066AD 36A3[2E03]              	mov	[ss:DMAADD+2],ax 	; use user DS as segment for DMA
 37594                                  	;;;
 37595                                  
 37596                                  %endif
 37597                                  
 37598                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 37599                                  	
 37600 000066B1 16                      	push	ss			; go for DOS addressability
 37601 000066B2 1F                      	pop	ds
 37602                                  
 37603                                  	; 12/03/2024 - Retro DOS v4.1
 37604                                  	;;;
 37605 000066B3 8916[2C03]              	mov	[DMAADD],dx	
 37606                                  	;;;
 37607                                  
 37608 000066B7 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 37609                                  
 37610 000066B9 8F06[2E03]              	pop	word [DMAADD+2]
 37611 000066BD 8F06[2C03]              	pop	word [DMAADD]
 37612                                  	;JNC	short READ_OK		;AN002;
 37613                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 37614                                  	; 17/12/2022
 37615 000066C1 72B8                    	jc	short ReadError
 37616                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37617                                  	;jnc	short READ_OK		;AN002;
 37618                                  	;jmp	short ReadError
 37619                                  
 37620                                  READ_OK:
 37621 000066C3 89C8                    	MOV	AX,CX			; get correct return in correct reg
 37622                                  Read_Okj:
 37623                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37624                                  	;;jmp	SYS_RET_OK		; successful return
 37625                                  	;jmp	short ok_done_j
 37626                                  	; 17/12/2022
 37627 000066C5 E96D9F                  	jmp	SYS_RET_OK
 37628                                  
 37629                                  ; 13/07/2018 - Retro DOS v3.0
 37630                                  
 37631                                  ;----------------------------------------------------------------------------
 37632                                  
 37633                                  ; 12/03/2024
 37634                                  %if 0
 37635                                  
 37636                                  ;   Input: DS:DX points to user's buffer addr
 37637                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 37638                                  ;   Output: [DMAADD] set
 37639                                  
 37640                                  ; 20/05/2019 - Retro DOS v4.0
 37641                                  ; 26/07/2019
 37642                                  ;	; MSDOS 6.0
 37643                                  ;Align_Buffer:
 37644                                  ;	MOV	BX,DX			; copy offset
 37645                                  ;	push	cx			; don't stomp on count
 37646                                  ;	MOV	CL,4			; bits to shift bytes->para
 37647                                  ;	SHR	BX,CL			; get number of paragraphs
 37648                                  ;	pop	cx			; get count back
 37649                                  ;	MOV	AX,DS			; get original segment
 37650                                  ;	ADD	AX,BX			; get new segment
 37651                                  ;	MOV	DS,AX			; in seg register
 37652                                  ;	AND	DX,0Fh			; normalize offset
 37653                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37654                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37655                                  ;						;smr;SS Override
 37656                                  ;	retn
 37657                                  
 37658                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37659                                  Align_Buffer:
 37660                                  	MOV	BX,DX			; copy offset
 37661                                  	push	cx			; don't stomp on count
 37662                                  	MOV	CL,4			; bits to shift bytes->para
 37663                                  	SHR	BX,CL			; get number of paragraphs
 37664                                  	pop	cx			; get count back
 37665                                  	MOV	AX,DS			; get original segment
 37666                                  	ADD	AX,BX			; get new segment
 37667                                  	MOV	DS,AX			; in seg register
 37668                                  	AND	DX,0Fh			; normalize offset
 37669                                  	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 37670                                  	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 37671                                  						;smr;SS Override
 37672                                  	retn
 37673                                  
 37674                                  %endif
 37675                                  
 37676                                  ; 20/05/2019 - Retro DOS v4.0
 37677                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 37678                                  
 37679                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37680                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 37681                                  
 37682                                  ; 12/03/2024 - Retro DOS v4.1 (Modified MSDOS 5.0 MSDOS.SYS)
 37683                                  ; MSDOS 6.22 MSDOS.SYS - DOSCODE:0A8A0h
 37684                                  
 37685                                  ; (PCDOS 7.1 IBMDOS.COM - DOSCODE:0BA8Ch)
 37686                                  
 37687                                  ;BREAK <$WRITE - write to a file handle>
 37688                                  ;----------------------------------------------------------------------------
 37689                                  ;
 37690                                  ;   Assembler usage:
 37691                                  ;	    LDS     DX, buf
 37692                                  ;	    MOV     CX, count
 37693                                  ;	    MOV     BX, handle
 37694                                  ;	    MOV     AH, Write
 37695                                  ;	    INT     int_command
 37696                                  ;	  AX has number of bytes written
 37697                                  ;   Errors:
 37698                                  ;	    AX = write_invalid_handle
 37699                                  ;	       = write_access_denied
 37700                                  ;
 37701                                  ;   Returns in register AX
 37702                                  ;
 37703                                  ;----------------------------------------------------------------------------
 37704                                  
 37705                                  _$WRITE:
 37706 000066C8 BE[F333]                	MOV	SI,DOS_WRITE
 37707 000066CB EBA1                    	JMP	short ReadDo
 37708                                  
 37709                                  ;BREAK <$LSEEK - move r/w pointer>
 37710                                  ;----------------------------------------------------------------------------
 37711                                  ;
 37712                                  ;   Assembler usage:
 37713                                  ;	    MOV     DX, offsetlow
 37714                                  ;	    MOV     CX, offsethigh
 37715                                  ;	    MOV     BX, handle
 37716                                  ;	    MOV     AL, method
 37717                                  ;	    MOV     AH, LSeek
 37718                                  ;	    INT     int_command
 37719                                  ;	  DX:AX has the new location of the pointer
 37720                                  ;   Error returns:
 37721                                  ;	    AX = error_invalid_handle
 37722                                  ;	       = error_invalid_function
 37723                                  ;   Returns in registers DX:AX
 37724                                  ;
 37725                                  ;----------------------------------------------------------------------------
 37726                                  
 37727                                  ; 21/05/2019 - Retro DOS v4.0
 37728                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 37729                                  
 37730                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37731                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 37732                                  
 37733                                  _$LSEEK:
 37734 000066CD E8DE00                  	call	CheckOwner		; get system file entry
 37735                                  
 37736                                  	; 17/12/2022
 37737                                  ;LSeekError:
 37738                                  	;JNC	short CHKOWN_OK		;AN002;
 37739                                  	;JMP	short ReadError		;AN002; error return
 37740                                  	; 17/12/2022
 37741                                  	; 02/06/2019
 37742 000066D0 72A9                    	jc	short ReadError
 37743                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37744                                  	;JNC	short CHKOWN_OK		;AN002;
 37745                                  	;JMP	short ReadError		;AN002; error return
 37746                                  
 37747                                  CHKOWN_OK:
 37748                                  					;AN002;
 37749 000066D2 3C02                    	CMP	AL,2			; is the seek value correct?
 37750 000066D4 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 37751                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 37752 000066D6 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37753                                  					;smr;SS Override
 37754                                  	;mov	al,1
 37755 000066DC B001                    	mov	al,error_invalid_function ; invalid method
 37756                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37757                                  LSeekError2:
 37758 000066DE EB9B                    	jmp	short ReadError
 37759                                  
 37760                                  LSeekDisp:
 37761 000066E0 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 37762 000066E2 720A                    	JB	short LSeekStore	; just store CX:DX
 37763 000066E4 771B                    	JA	short LSeekEOF		; seek from end of file
 37764                                  	;add	dx,[es:di+21]
 37765 000066E6 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 37766                                  	;adc	cx,[es:di+23]
 37767 000066EA 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 37768                                  LSeekStore:
 37769 000066EE 89C8                    	MOV	AX,CX			; AX:DX
 37770 000066F0 92                      	XCHG	AX,DX			; DX:AX is the correct value
 37771                                  LSeekSetpos:
 37772                                  	;mov	[es:di+21],ax
 37773 000066F1 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 37774                                  	;mov	[es:di+23],dx
 37775 000066F5 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 37776 000066F9 E8899D                  	call	Get_User_Stack
 37777                                  	;mov	[si+6],dx
 37778 000066FC 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 37779                                  	;jmp	SYS_RET_OK		; successful return
 37780                                  	; 25/06/2019
 37781                                  	;jmp	SYS_RET_OK_clc
 37782                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37783                                  	;jmp	SYS_RET_OK_clc
 37784                                  LSeekOk:
 37785 000066FF EBC4                    	jmp     short Read_Okj
 37786                                  
 37787                                  LSeekEOF:
 37788                                  	;;test	word [es:di+5],8000h
 37789                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 37790                                  	; 21/05/2019 - Retro DOS v4.0
 37791 00006701 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 37792 00006706 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 37793                                  LOCAL_LSeek:
 37794                                  	;add	dx,[es:di+17]
 37795 00006708 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 37796                                  	;adc	cx,[es:di+19]
 37797 0000670C 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 37798 00006710 EBDC                    	JMP	short LSeekStore	; go and set the position
 37799                                  
 37800                                  Check_LSeek_Mode:
 37801                                  	;;test	word [es:di+2],8000h
 37802                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 37803                                  	; 21/05/2019
 37804 00006712 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 37805 00006717 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 37806                                  	;mov	ax,[es:di+2]
 37807 00006719 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 37808                                  	;and	ax,0F0h
 37809 0000671D 25F000                  	AND	AX,SHARING_MASK
 37810                                  	;cmp	ax,40h
 37811 00006720 83F840                  	CMP	AX,SHARING_DENY_NONE
 37812 00006723 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 37813                                  	;cmp	ax,30h
 37814 00006725 83F830                  	CMP	AX,SHARING_DENY_READ
 37815 00006728 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 37816                                  NET_LSEEK:
 37817                                  ;	JMP	short LOCAL_LSeek
 37818                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 37819                                  	;CallInstall Net_Lseek,MultNET,33
 37820                                  	;JNC	short LSeekSetPos
 37821                                  
 37822 0000672A B82111                  	mov     ax,1121h
 37823 0000672D CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 37824                                  			; CX:DX = offset (in bytes) from end
 37825                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 37826                                  			; SS = DOS CS
 37827                                  			; Return: CF set on error
 37828                                  			; CF clear if successful, DX:AX = new file position
 37829 0000672F 73C0                    	jnb     short LSeekSetpos
 37830                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37831                                  	;jmp	SYS_RET_ERR
 37832                                  ;LSeekError3:
 37833                                  	; 17/12/2022
 37834                                  LSeekError:
 37835                                  	;jmp	short LSeekError2
 37836                                  DupErr:	; 17/12/2022
 37837 00006731 E90A9F                  	jmp	SYS_RET_ERR
 37838                                  
 37839                                  ;BREAK <FileTimes - modify write times on a handle>
 37840                                  ;----------------------------------------------------------------------------
 37841                                  ;
 37842                                  ;   Assembler usage:
 37843                                  ;	    MOV AH, FileTimes (57H)
 37844                                  ;	    MOV AL, func
 37845                                  ;	    MOV BX, handle
 37846                                  ;	; if AL = 1 then then next two are mandatory
 37847                                  ;	    MOV CX, time
 37848                                  ;	    MOV DX, date
 37849                                  ;	    INT 21h
 37850                                  ;	; if AL = 0 then CX/DX has the last write time/date
 37851                                  ;	; for the handle.
 37852                                  ;
 37853                                  ;	AL=02		 get extended attributes
 37854                                  ;	   BX=handle
 37855                                  ;	   CX=size of buffer (0, return max size )
 37856                                  ;	   DS:SI query list (si=-1, selects all EA)
 37857                                  ;	   ES:DI buffer to hold EA list
 37858                                  ;
 37859                                  ;	AL=03		 get EA name list
 37860                                  ;	   BX=handle
 37861                                  ;	   CX=size of buffer (0, return max size )
 37862                                  ;	   ES:DI buffer to hold name list
 37863                                  ;
 37864                                  ;	AL=04		 set extended attributes
 37865                                  ;	   BX=handle
 37866                                  ;	   ES:DI buffer of EA list
 37867                                  ;
 37868                                  ;
 37869                                  ;   Error returns:
 37870                                  ;	    AX = error_invalid_function
 37871                                  ;	       = error_invalid_handle
 37872                                  ;
 37873                                  ;----------------------------------------------------------------------------
 37874                                  
 37875                                  ; 21/05/2019 - Retro DOS v4.0
 37876                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 37877                                  
 37878                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37879                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 37880                                  
 37881                                  _$FILE_TIMES:
 37882                                  	; 13/07/2018 - Retro DOS v3.0
 37883                                  
 37884                                  	; MSDOS 3.3
 37885                                  	;cmp	al,2			; correct subfunction ?
 37886                                  	;jb	short ft1
 37887                                  
 37888                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 37889                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37890                                  						;SS Overr
 37891                                  	;;mov	al,1
 37892                                  	;mov	al,error_invalid_function ; give bad return
 37893                                  	;jmp	SYS_RET_ERR
 37894                                  
 37895                                  	; MSDOS 6.0
 37896 00006734 3C02                    	cmp	al,2			; correct subfunction ?
 37897 00006736 7340                    	jae	short inval_func
 37898                                  ;ft1:
 37899 00006738 E87300                  	call	CheckOwner		; get sft
 37900                                  	; 17/12/2022
 37901 0000673B 72F4                    	jc	short LSeekError	; bad handle
 37902                                  
 37903 0000673D 08C0                    	or	al,al			; get time/date ?
 37904 0000673F 7515                    	jnz	short ft_set_time
 37905                                  
 37906                                  ;------ here we get the time & date from the sft for the user
 37907                                  
 37908 00006741 FA                      	cli				; is this cli/sti reqd ? BUGBUG
 37909                                  	;mov	cx,[es:di+13]
 37910 00006742 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 37911                                  	;mov	dx,[es:di+15]
 37912 00006746 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 37913 0000674A FB                      	sti
 37914 0000674B E8379D                  	call	Get_User_Stack
 37915                                  	;mov	[si+4],cx
 37916 0000674E 894C04                  	mov	[si+user_env.user_CX],cx
 37917                                  	;mov	[si+6],dx
 37918 00006751 895406                  	mov	[si+user_env.user_DX],dx
 37919 00006754 EB1F                    	jmp	short ok_ret
 37920                                  
 37921                                  ;------ here we set the time in sft
 37922                                  
 37923                                  ft_set_time:
 37924 00006756 E88EAB                  	call    ECritSFT
 37925                                  	;mov	[es:di+13],cx
 37926 00006759 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 37927                                  	;mov	[es:di+15],dx
 37928 0000675D 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 37929                                  
 37930 00006761 31C0                    	xor	ax, ax
 37931 00006763 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 37932                                  
 37933                                  ;------ set the flags in SFT entry
 37934                                  	;and	word [es:di+5],0FFBFh
 37935                                  	; 18/12/2022
 37936                                  	;and	byte [es:di+5],0BFh
 37937 00006768 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 37938                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 37939                                  							; mark file as dirty
 37940                                  	;or	word [es:di+5],4000h
 37941                                  	; 17/12/2022
 37942                                  	;or	byte [es:di+6],40h
 37943 0000676D 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 37944                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 37945                                  							; ask close not to
 37946                                  							;   bother about date
 37947                                  							;   and time
 37948 00006772 E88DAB                  	call	LCritSFT
 37949                                  ok_ret:
 37950                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37951                                  	; 17/12/2022
 37952 00006775 E9BD9E                  	jmp	SYS_RET_OK
 37953                                  	;jmp	short LSeekOk
 37954                                  
 37955                                  inval_func:
 37956                                  	;mov	byte [ss:EXTERR_LOCUS],1
 37957 00006778 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 37958                                  						;SS Overr
 37959                                  	;mov	al,1
 37960 0000677E B001                    	mov	al,error_invalid_function ; give bad return
 37961                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37962                                  ft_error:
 37963                                  	;;jmp	SYS_RET_ERR
 37964                                  	;jmp	short LSeekError3
 37965                                  	; 17/12/2022
 37966 00006780 EBAF                    	jmp	short LSeekError
 37967                                  
 37968                                  ; 21/05/2019 - Retro DOS v4.0
 37969                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 37970                                  
 37971                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37972                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 37973                                  
 37974                                  ;BREAK <$DUP - duplicate a jfn>
 37975                                  ;----------------------------------------------------------------------------
 37976                                  ;
 37977                                  ;   Assembler usage:
 37978                                  ;	    MOV     BX, fh
 37979                                  ;	    MOV     AH, Dup
 37980                                  ;	    INT     int_command
 37981                                  ;	  AX has the returned handle
 37982                                  ;   Errors:
 37983                                  ;	    AX = dup_invalid_handle
 37984                                  ;	       = dup_too_many_open_files
 37985                                  ;
 37986                                  ;----------------------------------------------------------------------------
 37987                                  
 37988                                  _$DUP:
 37989 00006782 89D8                    	MOV	AX,BX			; save away old handle in AX
 37990 00006784 E882FD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 37991                                  DupErrorCheck:
 37992 00006787 72A8                    	JC	short DupErr		; nope, bye
 37993 00006789 06                      	push	es
 37994 0000678A 57                      	push	di			; save away SFT
 37995 0000678B 5E                      	pop	si			; into convenient place DS:SI
 37996 0000678C 1F                      	pop	ds
 37997 0000678D 93                      	XCHG	AX,BX			; get back old handle
 37998 0000678E E81D00                  	call	CheckOwner		; get sft in ES:DI
 37999 00006791 729E                    	JC	short DupErr		; errors go home
 38000 00006793 E8F0C1                  	call	DOS_Dup_Direct
 38001 00006796 E813FD                  	call	pJFNFromHandle		; get pointer
 38002 00006799 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 38003 0000679C 881C                    	MOV	[SI],BL			; stuff in new SFT
 38004                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38005                                  	;jmp	SYS_RET_OK		; and go home
 38006 0000679E EBD5                    	jmp	short ok_ret
 38007                                  
 38008                                  	; 17/12/2022
 38009                                  ;DupErr:
 38010                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38011                                  	;;jmp	SYS_RET_ERR
 38012                                  	;jmp	short ft_error
 38013                                  
 38014                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 38015                                  ;----------------------------------------------------------------------------
 38016                                  ;
 38017                                  ;   Assembler usage:
 38018                                  ;	    MOV     BX, fh
 38019                                  ;	    MOV     CX, newfh
 38020                                  ;	    MOV     AH, Dup2
 38021                                  ;	    INT     int_command
 38022                                  ;   Error returns:
 38023                                  ;	    AX = error_invalid_handle
 38024                                  ;
 38025                                  ;----------------------------------------------------------------------------
 38026                                  
 38027                                  _$DUP2:
 38028 000067A0 53                      	push	bx
 38029 000067A1 51                      	push	cx			; save source
 38030 000067A2 89CB                    	MOV	BX,CX			; get one to close
 38031 000067A4 E8BCFD                  	call	_$CLOSE			; close destination handle
 38032 000067A7 5B                      	pop	bx
 38033 000067A8 58                      	pop	ax			; old in AX, new in BX
 38034 000067A9 E800FD                  	call	pJFNFromHandle		; get pointer
 38035 000067AC EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 38036                                  
 38037                                  ;Break	<CheckOwner - verify ownership of handles from server>
 38038                                  ;----------------------------------------------------------------------------
 38039                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 38040                                  ;   process without the process knowing it (delete/rename of open files, for
 38041                                  ;   example), it is possible for the redirector to issue a call to a handle
 38042                                  ;   that it soes not rightfully own. We check here to make sure that the
 38043                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 38044                                  ;   SFFromHandle to really make sure that the SFT is good.
 38045                                  ;
 38046                                  ;	ENTRY	BX has the handle
 38047                                  ;		User_ID is the current user
 38048                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 38049                                  ;		Carry Set => AX has error code
 38050                                  ;	USES	none
 38051                                  ;----------------------------------------------------------------------------
 38052                                  
 38053                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38054                                  	; 21/05/2019 - Retro DOS v4.0
 38055                                  CheckOwner:
 38056                                  	; 13/07/2018 - Retro DOS v3.0
 38057                                  
 38058 000067AE E818FD                  	call	SFFromHandle
 38059 000067B1 721B                    	jc	short co_ret_label	; retc
 38060                                  
 38061 000067B3 50                      	push	ax
 38062                                  
 38063                                  	; MSDOS 6.0
 38064                                  
 38065                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 38066                                  ;SR; are shared across multiple VMs in win386.
 38067                                  
 38068 000067B4 36F606[3010]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 38069 000067BA 7404                    	jz	short no_win386		;win386 is not present
 38070 000067BC 31C0                    	xor	ax,ax			;set the zero flag
 38071 000067BE EB08                    	jmp	short _skip_win386	
 38072                                  
 38073                                  no_win386:
 38074 000067C0 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 38075                                  	;cmp	ax,[es:di+47]
 38076 000067C4 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 38077                                  
 38078                                  _skip_win386:
 38079 000067C8 58                      	pop	ax
 38080                                  	
 38081                                  	; 17/12/2022
 38082 000067C9 7403                    	jz	short co_ret_label
 38083                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38084                                  	;jnz	short CheckOwner_err
 38085                                  	;retn
 38086                                  	
 38087                                  CheckOwner_err:
 38088                                  	;mov	al,6
 38089 000067CB B006                    	mov	al,error_invalid_handle
 38090 000067CD F9                      	stc
 38091                                  
 38092                                  co_ret_label:
 38093 000067CE C3                      	retn
 38094                                  
 38095                                  ;============================================================================
 38096                                  ; MACRO.ASM, MSDOS 6.0, 1991
 38097                                  ;============================================================================
 38098                                  ; Retro	DOS v3.0 - 11/07/2018
 38099                                  ; 21/05/2019 - Retro DOS v4.0
 38100                                  
 38101                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 38102                                  ;	NAME	MACRO
 38103                                  
 38104                                  ;	Microsoft Confidential
 38105                                  ;	Copyright (C) Microsoft Corporation 1991
 38106                                  ;	All Rights Reserved.
 38107                                  
 38108                                  ;**	MACRO.ASM
 38109                                  ;
 38110                                  ;	$AssignOper
 38111                                  ;	FIND_DPB
 38112                                  ;	InitCDS
 38113                                  ;	$UserOper
 38114                                  ;	GetVisDrv
 38115                                  ;	GetThisDrv
 38116                                  ;	GetCDSFromDrv
 38117                                  ;
 38118                                  ;   Revision history:
 38119                                  ;
 38120                                  ;	Created: MZ 4 April 1983
 38121                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 38122                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 38123                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 38124                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 38125                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 38126                                  ;				    aliasing.
 38127                                  ;
 38128                                  ;   MSDOS performs several types of name translation. First, we maintain for
 38129                                  ;   each valid drive letter the text of the current directory on that drive.
 38130                                  ;   For invalid drive letters, there is no current directory so we pretend to
 38131                                  ;   be at the root. A current directory is either the raw local directory
 38132                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 38133                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 38134                                  ;
 38135                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 38136                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 38137                                  ;   this and all * are expanded into ?'s.
 38138                                  ;
 38139                                  ;   The second part of name translation involves subtree aliasing. A list of
 38140                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 38141                                  ;   the previous 'canonicalization' are then examined to see if any of the
 38142                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 38143                                  ;   replaced with the other subtree in the pair.
 38144                                  ;
 38145                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 38146                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 38147                                  ;   The output of the previous translation is examined to see if any of the
 38148                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 38149                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 38150                                  ;   'mount' one device under another.
 38151                                  ;
 38152                                  ;   The final form of name translation involves the mapping of a user's
 38153                                  ;   logical drive number into the internal physical drive. This is
 38154                                  ;   accomplished by converting the drive number into letter:CON, performing
 38155                                  ;   the above translation and then converting the character back into a drive
 38156                                  ;   number.
 38157                                  ;
 38158                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 38159                                  ;   take a path and form the real text of the pathname with all . and ..
 38160                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 38161                                  ;   TransPath.
 38162                                  ;
 38163                                  ;	A000	version 4.00  Jan. 1988
 38164                                  
 38165                                  ;Installed = TRUE
 38166                                  
 38167                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 38168                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 38169                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 38170                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 38171                                  ;					; current drive)
 38172                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 38173                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 38174                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 38175                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 38176                                  ;	I_need	MYNAME,16		; machine name
 38177                                  ;	I_need	MYNUM,WORD		; machine number
 38178                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 38179                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 38180                                  ;	I_need	DrvErr,BYTE		; drive error
 38181                                  
 38182                                  ;BREAK <$AssignOper -- Set up a Macro>
 38183                                  ;----------------------------------------------------------------------------
 38184                                  ; Inputs:
 38185                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 38186                                  ;	AL = 01 set assign mode 		    (SetMode)
 38187                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 38188                                  ;	AL = 03 Define Macro (attch start)
 38189                                  ;	    BL = Macro type
 38190                                  ;	       = 0 alias
 38191                                  ;	       = 1 file/device
 38192                                  ;	       = 2 drive
 38193                                  ;	       = 3 Char device -> network
 38194                                  ;	       = 4 File device -> network
 38195                                  ;	    DS:SI -> ASCIZ source name
 38196                                  ;	    ES:DI -> ASCIZ destination name
 38197                                  ;	AL = 04 Cancel Macro
 38198                                  ;	    DS:SI -> ASCIZ source name
 38199                                  ;	AL = 05 Modified get attach list entry
 38200                                  ;	AL = 06 Get ifsfunc item
 38201                                  ;	AL = 07 set in_use of a drive's CDS
 38202                                  ;	     DL = drive number, 0=default  0=A,,
 38203                                  ;	AL = 08 reset in_use of a drive's CDS
 38204                                  ;	     DL = drive number, 0=A, 1=B,,,
 38205                                  ; Function:
 38206                                  ;	Do macro stuff
 38207                                  ; Returns:
 38208                                  ;	Std Xenix style error return
 38209                                  ;----------------------------------------------------------------------------
 38210                                  
 38211                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38212                                  	; 21/05/2019 - Retro DOS v4.0
 38213                                  _$AssignOper:
 38214                                  	; MSDOS 6.0
 38215 000067CF 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 38216 000067D1 7525                    	JNZ	short chk08		      ; no			;AN000;
 38217                                  srinuse:								;AN000;
 38218 000067D3 50                      	PUSH	AX			      ; save al 		;AN000;
 38219 000067D4 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 38220 000067D6 E85401                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 38221 000067D9 58                      	POP	AX			      ; 			;AN000;
 38222 000067DA 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 38223                                  	;cmp	word [si+45h],0
 38224 000067DC 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 38225 000067E0 7410                    	JZ	short baddrv		      ;     no			;AN000;
 38226 000067E2 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 38227 000067E4 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 38228                                  	;or	word [si+43h],4000h
 38229                                  	; 17/12/2022
 38230                                  	;or	byte [si+44h],40h
 38231 000067E6 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38232                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 38233 000067EA EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 38234                                  resetdrv:
 38235                                  	;and	word [si+43h],0BFFFh									;AN000;
 38236                                  	; 18/12/2022
 38237 000067EC 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 38238                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 38239 000067F0 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 38240                                  
 38241                                  	; 17/12/2022
 38242                                  baddrv: 								;AN000;
 38243 000067F2 B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 38244                                  
 38245                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38246                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 38247                                  	; 17/12/2022
 38248                                  	; 21/05/2019
 38249                                  ASS_ERR:
 38250 000067F5 E9469E                  	jmp	SYS_RET_ERR
 38251                                  
 38252                                  chk08:									;AN000;
 38253 000067F8 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 38254 000067FA 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 38255                                  
 38256                                    ;IF	NOT INSTALLED
 38257                                  	;transfer NET_ASSOPER
 38258                                    ;ELSE
 38259                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38260 000067FC 50                      	PUSH	AX
 38261                                  	;mov	ax,111Eh
 38262                                  	;MOV	AX,(MultNET SHL 8) OR 30
 38263 000067FD B81E11                  	mov	ax,(MultNET*256)+30
 38264 00006800 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 38265                                  			; SS = DOS CS
 38266                                  			; STACK: WORD function to execute
 38267                                  			; Return: CF set on error, AX = error code
 38268                                  			; STACK unchanged
 38269 00006802 5B                      	POP	BX			; Don't zap error code in AX
 38270 00006803 72F0                    	JC	short ASS_ERR
 38271                                  okdone:
 38272 00006805 E92D9E                  	jmp	SYS_RET_OK
 38273                                  
 38274                                  	; 17/12/2022
 38275                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38276                                  ;ASS_ERR:
 38277                                  	;jmp	SYS_RET_ERR
 38278                                  
 38279                                    ;ENDIF
 38280                                  
 38281                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 38282                                  ;----------------------------------------------------------------------------
 38283                                  ;**	FIND_DPB - Find a DPB from a Drive #
 38284                                  ;
 38285                                  ;	ENTRY	AL has drive number A = 0
 38286                                  ;	EXIT	'C' set
 38287                                  ;		    No DPB for this drive number
 38288                                  ;		'C' clear
 38289                                  ;		    DS:SI points to DPB for drive
 38290                                  ;	USES	SI, DS, Flags
 38291                                  ;----------------------------------------------------------------------------
 38292                                  
 38293                                  	; 21/05/2019 - Retro DOS v4.0
 38294                                  FIND_DPB:
 38295 00006808 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 38296                                  fdpb5:	
 38297 0000680D 83FEFF                  	CMP	SI,-1
 38298 00006810 7409                    	JZ	short fdpb10
 38299 00006812 3A04                    	cmp	al,[si]
 38300                                  	;CMP	AL,[SI+DPB.DRIVE]
 38301 00006814 7406                    	jz	short ret_label15	; Carry clear (retz)
 38302                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 38303                                  	;lds	si,[si+19h] ; MSDOS 6.0
 38304 00006816 C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 38305 00006819 EBF2                    	JMP	short fdpb5
 38306                                  fdpb10:	
 38307 0000681B F9                      	STC
 38308                                  ret_label15:
 38309 0000681C C3                      	retn
 38310                                  
 38311                                  ;	Break <InitCDS - set up an empty CDS>
 38312                                  ;----------------------------------------------------------------------------
 38313                                  ;**	InitCDS - Setup an Empty CDS
 38314                                  ;
 38315                                  ;	ENTRY	ThisCDS points to CDS
 38316                                  ;		AL has uppercase drive letter
 38317                                  ;	EXIT	ThisCDS is now empty
 38318                                  ;		(ES:DI) = CDS
 38319                                  ;		'C' set if no DPB associated with drive
 38320                                  ;	USES	AH,ES,DI, Flags
 38321                                  ;----------------------------------------------------------------------------
 38322                                  
 38323                                  ; 21/05/2019 - Retro DOS v4.0
 38324                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 38325                                  
 38326                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38327                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 38328                                  
 38329                                  InitCDS:
 38330                                  	; 19/08/2018
 38331                                  	; 05/08/2018 - Retro DOS v3.0
 38332                                  	; MSDOS 6.0
 38333 0000681D 50                      	push	ax			; save (AL) for caller
 38334 0000681E 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 38335                                  	;mov	word [es:di+67],0
 38336 00006823 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 38337 00006829 2C40                    	SUB	AL,"A"-1                ; A = 1
 38338 0000682B 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 38339 00006830 7236                    	JC	short icdsx		; Drive does not map a physical drive
 38340 00006832 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 38341 00006833 50                      	PUSH	AX			; save drive number for later
 38342 00006834 0441                    	add	al,"A"
 38343 00006836 B43A                    	MOV	AH,':'
 38344 00006838 268905                  	mov	[ES:DI],ax
 38345                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 38346                                  	;mov	ax,"\"
 38347                                  	;mov	[es:di+2],ax
 38348                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 38349 0000683B 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 38350                                  	;or	word [es:di+67],4000h
 38351                                  	;or	byte [es:di+68],40h
 38352 00006841 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38353 00006846 29C0                    	sub	ax,ax
 38354                                  	;MOV	[es:di+73],ax ; 0
 38355 00006848 26894549                	MOV	[ES:DI+curdir.ID],ax
 38356                                  	;mov	[es:di+75],ax ; 0
 38357 0000684C 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 38358 00006850 B002                    	mov	al,2
 38359                                  	;mov	[es:di+79],aX ; 2
 38360 00006852 2689454F                	MOV	[ES:DI+curdir.end],ax
 38361 00006856 58                      	POP	AX			; (al) = drive number
 38362 00006857 1E                      	push	ds
 38363 00006858 56                      	push	si
 38364 00006859 E8ACFF                  	call	FIND_DPB
 38365 0000685C 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 38366                                  	;mov	[es:di+69],si
 38367 0000685E 26897545                	MOV	[ES:DI+curdir.devptr],SI
 38368                                  	;mov	[es:di+71],ds
 38369 00006862 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 38370                                  icds5:	
 38371 00006866 5E                      	pop	si
 38372 00006867 1F                      	pop	ds
 38373                                  icdsx:	
 38374 00006868 58                      	pop	ax
 38375                                  RET45:
 38376 00006869 C3                      	retn
 38377                                  
 38378                                  ;Break <$UserOper - get/set current user ID (for net)>
 38379                                  ;----------------------------------------------------------------------------
 38380                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 38381                                  ;	maintain this string and do no verifications.
 38382                                  ;
 38383                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 38384                                  ;				      4-printer-set-flags,5-printer-get-flags)
 38385                                  ;		DS:DX is user string pointer (calls 1,2)
 38386                                  ;		ES:DI is user buffer (call 3)
 38387                                  ;		BX is assign index (calls 2,3,4,5)
 38388                                  ;		CX is user number (call 1)
 38389                                  ;		DX is flag word (call 4)
 38390                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 38391                                  ;			and user CX is set to the user number
 38392                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 38393                                  ;		If AL = 5 then DX is flag word
 38394                                  ;----------------------------------------------------------------------------
 38395                                  
 38396                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38397                                  	; 21/05/2019 - Retro DOS v4.0
 38398                                  _$UserOper:
 38399                                  	; 05/08/2018 - Retro DOS v3.0
 38400                                  	; MSDOS 6.0 (& MSDOS 3.3)
 38401                                  	;PUSH	AX
 38402                                  	;SUB	AL,1			; quick dispatch on 0,1
 38403                                  	;POP	AX
 38404                                  	; 01/07/2024
 38405 0000686A 3C01                    	cmp	al,1
 38406 0000686C 7211                    	JB	short UserGet 		; return to user the string
 38407 0000686E 742E                    	JZ	short UserSet 		; set the current user
 38408 00006870 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 38409 00006872 763D                    	JBE	short UserPrint		; yep
 38410                                  	;mov	byte [ss:EXTERR_LOCUS],1
 38411 00006874 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 38412                                  					; Extended Error Locus
 38413                                  	;error	error_invalid_function	; not 0,1,2,3
 38414                                  	;mov	al,1
 38415 0000687A B001                    	MOV	AL,error_invalid_function
 38416                                  useroper_error:
 38417                                  	; 17/12/2022
 38418                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38419 0000687C E9BF9D                  	JMP	SYS_RET_ERR
 38420                                  	;jmp	short ASS_ERR
 38421                                  
 38422                                  UserGet:
 38423                                  ; Transfer MYNAME to DS:DX
 38424                                  ; Set Return CX to MYNUM
 38425 0000687F 1E                      	PUSH	DS			; switch registers
 38426 00006880 07                      	POP	ES
 38427 00006881 89D7                    	MOV	DI,DX			; destination
 38428 00006883 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 38429 00006888 E8FA9B                  	call	Get_User_Stack
 38430                                  	;mov	[si+4],cx
 38431 0000688B 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 38432 0000688E 16                      	push	ss			; point to DOSDATA
 38433 0000688F 1F                      	pop	ds
 38434 00006890 BE[0503]                	MOV	SI,MYNAME		; point source to user string
 38435                                  UserMove:
 38436 00006893 B90F00                  	MOV	CX,15
 38437 00006896 F3A4                    	REP	MOVSB			; blam.
 38438 00006898 31C0                    	XOR	AX,AX			; 16th byte is 0
 38439 0000689A AA                      	STOSB
 38440                                  UserBye:
 38441 0000689B E9979D                  	jmp	SYS_RET_OK		; no errors here
 38442                                  
 38443                                  UserSet:
 38444                                  ; Transfer DS:DX to MYNAME
 38445                                  ; CX to MYNUM
 38446 0000689E 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 38447 000068A3 89D6                    	MOV	SI,DX			; user space has source
 38448 000068A5 16                      	push	ss
 38449 000068A6 07                      	pop	es
 38450 000068A7 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 38451 000068AA 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 38452 000068AF EBE2                    	JMP	short UserMove
 38453                                  
 38454                                  UserPrint:
 38455                                  
 38456                                    ;IF NOT Installed
 38457                                    ;	transfer PRINTER_GETSET_STRING
 38458                                    ;ELSE
 38459 000068B1 50                      	PUSH	AX
 38460                                  	;mov	ax,111Fh
 38461                                  	;MOV	AX,(MultNET SHL 8) OR 31
 38462 000068B2 B81F11                  	mov	ax,(MultNET<<8)|31
 38463 000068B5 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 38464                                  			; STACK: WORD function
 38465                                  			; Return: CF set on error, AX = error code
 38466                                  			; STACK unchanged
 38467 000068B7 5A                      	POP	DX			; Clean stack
 38468                                  	;JNC	short OKPA
 38469 000068B8 73E1                    	jnc	short UserBye ; 21/05/2019
 38470                                  	; 17/12/2022
 38471 000068BA EBC0                    	jmp	short useroper_error
 38472                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38473                                  	;jnb     short OKPA
 38474                                  	;jmp     short useroper_error
 38475                                  
 38476                                  	; 17/12/2022
 38477                                  ;OKPA:
 38478                                  ;	jmp	short UserBye
 38479                                  
 38480                                    ;ENDIF
 38481                                  
 38482                                  
 38483                                  ;Break	<GetVisDrv - return visible drive>
 38484                                  ;----------------------------------------------------------------------------
 38485                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 38486                                  ;
 38487                                  ;   Inputs:	AL has drive identifier (0=default)
 38488                                  ;   Outputs:	Carry Set - invalid drive/macro
 38489                                  ;		Carry Clear - AL has physical drive (0=A)
 38490                                  ;		    ThisCDS points to CDS
 38491                                  ;   Registers modified: AL
 38492                                  ;----------------------------------------------------------------------------
 38493                                  
 38494                                  	; 21/05/2019 - Retro DOS v4.0
 38495                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 38496                                  
 38497                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38498                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 38499                                  GetVisDrv:
 38500                                  	; 05/08/2018 - Retro DOS v3.0
 38501                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 38502 000068BC E81900                  	CALL	GETTHISDRV		; get inuse drive
 38503 000068BF 72A8                    	jc	short RET45
 38504 000068C1 1E                      	push	ds
 38505 000068C2 56                      	push	si
 38506 000068C3 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 38507                                  	;test	word [si+67],2000h
 38508                                  	; 17/12/2022
 38509                                  	;test	byte [si+68],20h
 38510 000068C8 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 38511                                  	;TEST	word [SI+curdir.flags],curdir_splice
 38512 000068CC 5E                      	pop	si
 38513 000068CD 1F                      	pop	ds
 38514 000068CE 7499                    	jz	short RET45		; if not spliced, return OK
 38515                                  	; MSDOS 6.0
 38516                                  	;mov	byte [ss:DrvErr],0Fh
 38517 000068D0 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 38518 000068D6 F9                      	STC				; signal error
 38519 000068D7 C3                      	retn
 38520                                  
 38521                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 38522                                  ;----------------------------------------------------------------------------
 38523                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 38524                                  ;	macro pointer
 38525                                  ;
 38526                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 38527                                  ;   Outputs:
 38528                                  ;		Carry Set - invalid drive/macro
 38529                                  ;		Carry Clear - AL has physical drive (0=A)
 38530                                  ;		   ThisCDS points to macro
 38531                                  ;   Registers modified: AL
 38532                                  ;----------------------------------------------------------------------------
 38533                                  
 38534                                  	; 21/05/2019 - Retro DOS v4.0
 38535                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 38536                                  
 38537                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38538                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 38539                                  GETTHISDRV:
 38540                                  	; 05/08/2018
 38541                                  	; 12/07/2018 - Retro DOS v3.0
 38542                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 38543                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38544 000068D8 08C0                    	OR	AL,AL			; are we using default drive?
 38545 000068DA 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 38546 000068DC 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 38547                                  	;INC	ax			; Counteract next instruction
 38548                                  	; 04/09/2018
 38549                                  	;inc	al
 38550                                  	; 07/12/2022
 38551 000068E0 40                      	inc	ax
 38552                                  GTD10:	
 38553                                  	;DEC	AX
 38554                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38555 000068E1 48                      	dec	ax			; 0 = A
 38556                                  	;dec	al
 38557 000068E2 1E                      	PUSH	DS			; save world
 38558 000068E3 56                      	PUSH	SI
 38559                                  	;mov	byte [ss:EXTERR_LOCUS],2
 38560 000068E4 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 38561                                  
 38562                                  	;TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 38563                                  	;JZ	SHORT GTD20		; Logical
 38564                                  	; 13/03/2024 (PCDOS71. IBMDOS.COM)
 38565                                  	;;;
 38566 000068EA 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38567 000068F0 7420                    	jz	short GTD20
 38568                                  	;;;
 38569                                  
 38570 000068F2 50                      	PUSH	AX
 38571 000068F3 06                      	PUSH	ES
 38572 000068F4 57                      	PUSH	DI
 38573 000068F5 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 38574                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 38575 000068FC 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 38576 00006901 0441                    	ADD	AL,'A'
 38577 00006903 E817FF                  	CALL	InitCDS			; InitCDS(c);
 38578                                  	;test	word [es:di+67],4000h
 38579                                  	; 17/12/2022
 38580                                  	;test	byte [es:di+68],40h
 38581 00006906 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 38582                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 38583 0000690B 5F                      	POP	DI
 38584 0000690C 07                      	POP	ES
 38585 0000690D 58                      	POP	AX
 38586 0000690E 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 38587 00006910 EB18                    	JMP	SHORT GTDX		; carry clear
 38588                                  GTD20:
 38589 00006912 E81800                  	CALL	GetCDSFromDrv
 38590 00006915 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 38591                                  	;test	word [si+43h],4000h
 38592                                  	; 17/12/2022
 38593                                  	;test	byte [si+44h],40h
 38594 00006917 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 38595                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 38596 0000691B 750D                    	JNZ	SHORT GTDX		; carry clear
 38597                                  GTD30:	
 38598                                  	; 21/05/2019
 38599                                  	; MSDOS 6.0
 38600 0000691D B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 38601 0000691F 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 38602                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 38603 00006923 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 38604 00006929 F9                      	STC
 38605                                  GTDX:	
 38606 0000692A 5E                      	POP	SI			; restore world
 38607 0000692B 1F                      	POP	DS
 38608 0000692C C3                      	RETN
 38609                                  
 38610                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 38611                                  ;----------------------------------------------------------------------------
 38612                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 38613                                  ;	pointer, returning an error if the drive number is greater than the
 38614                                  ;	number of CDS's
 38615                                  ;
 38616                                  ;   Inputs:	AL is physical unit # A=0...
 38617                                  ;   Outputs:	Carry Set if Bad Drive
 38618                                  ;		Carry Clear
 38619                                  ;		    DS:SI -> CDS
 38620                                  ;		    [THISCDS] = DS:SI
 38621                                  ;   Registers modified: DS,SI
 38622                                  ;----------------------------------------------------------------------------
 38623                                  
 38624                                  	; 21/05/2019 - Retro DOS v4.0
 38625                                  GetCDSFromDrv:
 38626 0000692D 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 38627                                  	;JB	SHORT GetCDS	; cf=1	; yes, go get the macro
 38628                                  	;STC				; signal error
 38629                                  	;RETN				; bye
 38630                                  	; 23/09/2023
 38631 00006932 F5                      	cmc	; cf=1 <-> cf=0
 38632 00006933 7217                    	jc	short GetCDS_retn
 38633                                  GetCDS:
 38634                                  	; 23/09/2023
 38635                                  	;PUSH	BX
 38636 00006935 50                      	PUSH	AX
 38637 00006936 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 38638                                  	;mov	bl,81 ; MSDOS 3.3
 38639                                  	;mov	bl,88 ; MSDOS 6.0 
 38640                                  	; 23/09/2023
 38641                                  	;MOV	BL,curdir.size		; size in convenient spot
 38642                                  	;MUL	BL			; get net offset
 38643 0000693B B458                    	mov	ah,curdir.size
 38644 0000693D F6E4                    	mul	ah
 38645 0000693F 01C6                    	ADD	SI,AX ; *		; convert to true pointer
 38646 00006941 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 38647 00006946 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 38648 0000694B 58                      	POP	AX
 38649                                  	; 23/09/2023
 38650                                  	;POP	BX
 38651                                  	; (cf must be 0 here) ; *
 38652                                  	;CLC				; no error
 38653                                  GetCDS_retn:
 38654 0000694C C3                      	RETN				; bye!
 38655                                  
 38656                                  ;============================================================================
 38657                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 38658                                  ;============================================================================
 38659                                  ; Retro	DOS v3.0 - 12/07/2018
 38660                                  ; 22/05/2019 - Retro DOS v4.0
 38661                                  
 38662                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 38663                                  ;----------------------------------------------------------------------------
 38664                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 38665                                  ;       gritty substitution.
 38666                                  ;
 38667                                  ;   Inputs:     DS:DX - pointer to FCB
 38668                                  ;               ES:DI - point to destination
 38669                                  ;   Outputs:    Carry Set - invalid path in final map
 38670                                  ;               Carry Clear - FCB has been mapped into ES:DI
 38671                                  ;                   Sattrib is set from possibly extended FCB
 38672                                  ;                   ExtFCB set if extended FCB found
 38673                                  ;   Registers modified: most
 38674                                  ;----------------------------------------------------------------------------
 38675                                  
 38676                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38677                                  TransFCB:
 38678                                  	; 22/05/2019 - Retro DOS v4.0
 38679                                  	; 12/07/2018 - Retro DOS v3.0
 38680                                  	;LocalVar FCBTmp,16
 38681                                  	;ENTER
 38682 0000694D 55                      	push	bp
 38683 0000694E 89E5                    	mov	bp,sp
 38684                                  	;sub	sp,15	; MSDOS 3.3
 38685 00006950 83EC10                  	sub	sp,16	; MSDOS 6.0
 38686 00006953 16                      	push	ss
 38687 00006954 07                      	pop	es
 38688 00006955 06                      	push	es
 38689 00006956 57                      	push	di
 38690                                  	;lea	di,[bp-15] ; MSDOS 3.3
 38691                                  	;LEA	DI,FCBTmp 
 38692 00006957 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 38693 0000695A 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 38694 00006960 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 38695 00006966 E8B6B2                  	call	GetExtended             ; get FCB, extended or not
 38696                                  	; 06/12/2022
 38697 00006969 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 38698 0000696B 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 38699 0000696E 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 38700 00006972 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 38701                                  GetDrive:
 38702 00006978 AC                      	lodsb				; get drive byte
 38703 00006979 E85CFF                  	call	GETTHISDRV
 38704 0000697C 722A                    	jc	short BadPack
 38705 0000697E E86F03                  	call	TextFromDrive           ; convert 0-based drive to text
 38706                                  
 38707                                  ; Scan the source to see if there are any illegal chars
 38708                                  
 38709                                  	;mov	bx,CharType		; load lookup table
 38710 00006981 B90B00                  	mov	cx,11
 38711 00006984 56                      	push	si			; back over name, ext
 38712                                  FCBScan:
 38713 00006985 AC                      	lodsb				; get a byte
 38714                                  	
 38715                                  	; 09/08/2018
 38716                                  	;;xlat	byte [es:bx]
 38717                                  	;es	xlat
 38718                                  
 38719                                  	; 22/05/2019 - Retro DOS v4.0	
 38720 00006986 E870E5                  	call	GetCharType		; get flags
 38721                                  
 38722                                  	;test	al,8	
 38723 00006989 A808                    	test	al,FFCB
 38724 0000698B 741B                    	jz	short BadPack
 38725                                  NextCh: 
 38726 0000698D E2F6                    	loop	FCBScan
 38727 0000698F 5E                      	pop	si
 38728 00006990 89FB                    	mov	bx,di
 38729 00006992 E8C5B6                  	call	PackName                ; crunch the path
 38730 00006995 5F                      	pop	di			; get original destination
 38731 00006996 07                      	pop	es
 38732 00006997 16                      	push	ss			; get DS addressability
 38733 00006998 1F                      	pop	ds
 38734                                  	;lea	si,[bp-15] ; MSDOS 3.3
 38735                                  	;LEA	SI,FCBTmp		; point at new pathname
 38736 00006999 8D76F0                  	lea	si,[bp-16]
 38737 0000699C 803F00                  	cmp	byte [bx],0
 38738 0000699F 7407                    	jz	short BadPack
 38739 000069A1 55                      	push	bp
 38740 000069A2 E80E00                  	call	TransPathSet            ; convert the path
 38741 000069A5 5D                      	pop	bp
 38742 000069A6 7303                    	jnc	short FCBRet		; bye with transPath error code
 38743                                  BadPack:
 38744 000069A8 F9                      	STC
 38745                                  	;mov	al,3
 38746 000069A9 B003                    	MOV     AL,error_path_not_found
 38747                                  FCBRet: 
 38748                                  	;LEAVE
 38749 000069AB 89EC                    	mov	sp,bp
 38750 000069AD 5D                      	pop	bp
 38751                                  TransPath_retn:
 38752 000069AE C3                      	retn
 38753                                  
 38754                                  ; 12/07/2018 - Retro DOS v3.0
 38755                                  
 38756                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 38757                                  ;----------------------------------------------------------------------------
 38758                                  ;
 38759                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 38760                                  ;       substitution, insertion of current directory and fixing . and ..
 38761                                  ;       entries. Perform splicing. Allow input string to match splice
 38762                                  ;       exactly.
 38763                                  ;
 38764                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 38765                                  ;       matches splice.
 38766                                  ;
 38767                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 38768                                  ;
 38769                                  ;   The following anomalous behaviour is required:
 38770                                  ;
 38771                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 38772                                  ;       Paths on devices are ignored. (truncate to 0-length)
 38773                                  ;       Raw net I/O sets ThisCDS => NULL.
 38774                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 38775                                  ;
 38776                                  ;   Other behaviour:
 38777                                  ;
 38778                                  ;       ThisCDS set up.
 38779                                  ;       FatRead done on local CDS.
 38780                                  ;       ValidateCDS done on local CDS.
 38781                                  ;
 38782                                  ;   Brief flowchart:
 38783                                  ;
 38784                                  ;       if fSharing then
 38785                                  ;           set up DummyCDS (ThisCDS)
 38786                                  ;           canonicalize (sets cMeta)
 38787                                  ;           splice
 38788                                  ;           fatRead
 38789                                  ;           return
 38790                                  ;       if \\ or d:\\ lead then
 38791                                  ;           set up null CDS (ThisCDS)
 38792                                  ;           canonicalize (sets cMeta)
 38793                                  ;           return
 38794                                  ;       if device then
 38795                                  ;           set up dummyCDS (ThisCDS)
 38796                                  ;           canonicalize (sets cMeta)
 38797                                  ;           return
 38798                                  ;       if file then
 38799                                  ;           getCDS (sets (ThisCDS) from name)
 38800                                  ;           validateCDS (may reset current dir)
 38801                                  ;           Copy current dir
 38802                                  ;           canonicalize (set cMeta)
 38803                                  ;           splice
 38804                                  ;           generate correct CDS (ThisCDS)
 38805                                  ;           if local then
 38806                                  ;               fatread
 38807                                  ;           return
 38808                                  ;
 38809                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 38810                                  ;               DI - point to buffer in DOSDATA
 38811                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 38812                                  ;                   syntax, etc. or user FAILed to I 24.
 38813                                  ;               WFP_Start - points to beginning of buffer
 38814                                  ;               Curr_Dir_End - points to end of current dir in path
 38815                                  ;               DS - DOSDATA
 38816                                  ;   Registers modified: most
 38817                                  ;
 38818                                  ;----------------------------------------------------------------------------
 38819                                  
 38820                                  ; 22/05/2019
 38821                                  ; 13/05/2019 - Retro DOS v4.0
 38822                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 38823                                  
 38824                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38825                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 38826                                  
 38827                                  TransPath:
 38828 000069AF 30C0                    	XOR     AL,AL
 38829 000069B1 EB02                    	JMP     SHORT SetSplice
 38830                                  TransPathSet:
 38831 000069B3 B0FF                    	MOV     AL,-1
 38832                                  SetSplice:
 38833 000069B5 36A2[4C03]              	MOV	[SS:NoSetDir],AL	; NoSetDir = !fExact;	;smr;SS Override
 38834 000069B9 B0FF                    	MOV     AL,-1
 38835                                  TransPathNoSet:
 38836 000069BB 36A2[7105]              	MOV	[SS:FSPLICE],AL		; fSplice = TRUE;	;smr;SS Override
 38837 000069BF 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 38838 000069C5 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 38839 000069CA 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 38840 000069D1 16                      	push	ss
 38841 000069D2 07                      	pop	es
 38842                                  	;lea	bp,[di+134]
 38843 000069D3 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 38844                                  ;
 38845                                  ; if this is through the server dos call, fsharing is set. We set up a
 38846                                  ; dummy cds and let the operation go.
 38847                                  ;
 38848                                  	;TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 38849                                  	;JZ	short CheckUNC		; skip to UNC check
 38850                                  	; 13/03/2024 (PCDOS 7.1 IBMDOS.COM)
 38851                                  	;;;
 38852 000069D7 36803E[7205]00          	cmp	byte [ss:FSHARING],0
 38853 000069DD 7435                    	jz	short CheckUNC
 38854                                  	;;;
 38855                                  ;
 38856                                  ; ES:DI point to buffer
 38857                                  ;
 38858 000069DF E8F802                  	CALL	DriveFromText           ; get drive and advance DS:SI
 38859 000069E2 E8F3FE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 38860 000069E5 722A                    	jc	short NoPath
 38861 000069E7 E80603                  	CALL	TextFromDrive		; drop in new
 38862 000069EA 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 38863 000069ED E83401                  	CALL	Canonicalize            ; copy and canonicalize
 38864 000069F0 72BC                    	jc	short TransPath_retn	; errors
 38865                                  ;
 38866                                  ; Perform splices for net guys.
 38867                                  ;
 38868 000069F2 16                      	push	ss
 38869 000069F3 1F                      	pop	ds
 38870 000069F4 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 38871 000069F8 F606[7105]FF            	TEST	byte [FSPLICE],-1
 38872 000069FD 7403                    	JZ	short NoServerSplice
 38873 000069FF E82D02                  	CALL    Splice
 38874                                  NoServerSplice:
 38875 00006A02 16                      	push	ss
 38876 00006A03 1F                      	pop	ds                      ; for FATREAD
 38877 00006A04 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 38878 00006A08 E8DCA8                  	call	ECritDisk
 38879 00006A0B E838EB                  	call	FATREAD_CDS
 38880 00006A0E E8F1A8                  	call	LCritDisk
 38881                                  NoPath:
 38882                                  	;mov	al,3
 38883 00006A11 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 38884 00006A13 C3                      	retn				; any errors are in Carry flag
 38885                                  
 38886                                  ; Let the network decide if the name is for a spooled device. It will map
 38887                                  ; the name if so.
 38888                                  
 38889                                  CheckUNC:
 38890 00006A14 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 38891                                  	;CallInstall NetSpoolCheck,MultNET,35
 38892 00006A1B B82311                  	mov	ax,1123h
 38893 00006A1E CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 38894                                  			; DS:SI -> ASCIZ filename to canonicalize
 38895                                  			; ES:DI -> 128-byte buffer for qualified name
 38896                                  			; Return: CF set if not resolved
 38897 00006A20 7329                    	JNC	short UNCDone
 38898                                  
 38899                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 38900                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 38901                                  ; input, then the name has been changed to the remote spooler by the above net
 38902                                  ; call. Also, there may be a drive in front of the \\.
 38903                                  
 38904                                  NO_CHECK:
 38905 00006A22 E8B502                  	CALL    DriveFromText		; eat drive letter
 38906 00006A25 50                      	PUSH    AX                      ; save it
 38907 00006A26 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 38908 00006A28 E8EBE4                  	call    PATHCHRCMP              ; convert to normal form
 38909 00006A2B 86E0                    	XCHG    AH,AL                   ; swap for second byte
 38910 00006A2D E8E6E4                  	call    PATHCHRCMP              ; convert to normal form
 38911 00006A30 751F                    	JNZ	short CheckDevice	; not a path char
 38912 00006A32 38C4                    	CMP     AH,AL                   ; are they same?
 38913 00006A34 751B                    	JNZ	short CheckDevice	; nope
 38914                                  
 38915                                  ; We have a UNC request. We must copy the string up to the beginning of the
 38916                                  ; local machine root path
 38917                                  
 38918 00006A36 58                      	POP     AX
 38919 00006A37 A5                      	MOVSW                           ; get the lead \\.
 38920                                  UNCCpy:
 38921 00006A38 AC                      	LODSB                           ; get a byte
 38922 00006A39 E885E4                   	call	UCase                   ;AN000;; convert the char
 38923 00006A3C 08C0                    	OR      AL,AL
 38924 00006A3E 740E                    	JZ	short UNCTerm		; end of string. All done.
 38925 00006A40 E8D3E4                  	call    PATHCHRCMP              ; is it a path char?
 38926 00006A43 89FB                    	MOV     BX,DI                   ; backup position
 38927 00006A45 AA                      	STOSB
 38928 00006A46 75F0                    	JNZ	short UNCCpy		; no, go copy
 38929 00006A48 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 38930                                  UNCDone:
 38931 00006A4B 16                      	push	ss
 38932 00006A4C 1F                      	pop	ds
 38933 00006A4D C3                       	retn				; return error code
 38934                                  UNCTerm:
 38935 00006A4E AA                      	STOSB                           ;AN000;
 38936 00006A4F EBFA                    	JMP	short UNCDone		;AN000;
 38937                                  
 38938                                  CheckDevice:
 38939                                  
 38940                                  ; Check DS:SI for device. First eat any path stuff
 38941                                  
 38942 00006A51 58                      	POP     AX                      ; retrieve drive info
 38943 00006A52 803C00                  	CMP     BYTE [SI],0		; check for null file
 38944 00006A55 7504                    	JNZ	short CheckPath
 38945                                  	;mov	al,2 
 38946 00006A57 B002                    	MOV     AL,error_file_not_found ; bad file error
 38947 00006A59 F9                      	STC                             ; signal error on null input
 38948 00006A5A C3                      	RETN				; bye!
 38949                                  CheckPath:
 38950 00006A5B 50                      	push	ax
 38951 00006A5C 55                      	push	bp			; save drive number
 38952                                  
 38953                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38954                                  %if 0
 38955                                  	; MSDOS 6.0
 38956                                  ;;;BUGBUG BUG 10-26-1992 scottq
 38957                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 38958                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 38959                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 38960                                  ;;;end up having a 5D in the opcode's displacement field. The
 38961                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 38962                                  ;;;
 38963                                  ;;;What we do here is do a call to a function that is less than 5Dh
 38964                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 38965                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 38966                                  ;;;
 38967                                  ;;;More info:
 38968                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 38969                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 38970                                  ;;;
 38971                                  	call	no5Dshere
 38972                                  start5Dhack:
 38973                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice
 38974                                  backfrom5Dhack:
 38975                                  
 38976                                  %endif
 38977                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38978                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 38979 00006A5D E864D7                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 38980                                  
 38981 00006A60 5D                      	pop	bp
 38982 00006A61 58                      	pop	ax			; get drive letter back
 38983 00006A62 731C                    	JNC	short DoFile		; yes we have a file.
 38984                                  
 38985                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 38986                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 38987                                  ; call.
 38988                                  
 38989 00006A64 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 38990 00006A6A E86BFE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 38991 00006A6D 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 38992                                  
 38993                                  ; Now that we have noted that we have a device, we put it into a form that
 38994                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 38995                                  ; string. We relax this to state that if the d:\ is present then the path
 38996                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 38997                                  ; a device.
 38998                                  
 38999 00006A73 E87A02                  	CALL    TextFromDrive
 39000 00006A76 B02F                    	MOV     AL,'/'                  ; path sep.
 39001 00006A78 AA                      	STOSB
 39002 00006A79 E83AA7                  	call	StrCpy			; move remainder of string
 39003                                  
 39004 00006A7C F8                      	CLC                             ; everything OK.
 39005 00006A7D 16                      	push	ss
 39006 00006A7E 1F                      	pop	ds                      ; remainder of OK stuff
 39007                                  DoFile_retn:
 39008 00006A7F C3                      	retn
 39009                                  
 39010                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39011                                  %if 0
 39012                                  
 39013                                  no5Dshere:
 39014                                  	; 10/08/2018
 39015                                  	jmp	CheckThisDevice		; snoop for device
 39016                                  %endif
 39017                                  
 39018                                  ;.erre (no5Dshere - start5Dhack - 5D)
 39019                                  
 39020                                  ; We have a file. Get the raw CDS.
 39021                                  
 39022                                  DoFile:
 39023                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39024                                  
 39025 00006A80 E839FE                  	call	GetVisDrv               ; get proper CDS
 39026                                  	;mov	al,3 
 39027 00006A83 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 39028 00006A85 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 39029                                  
 39030                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 39031                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 39032                                  ; Use the one that we are going to use (ES:DI).
 39033                                  
 39034                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 39035 00006A87 1E                      	push	ds
 39036 00006A88 56                      	push	si
 39037 00006A89 06                      	push	es
 39038 00006A8A 57                      	push	di
 39039 00006A8B E87FD6                  	call	ValidateCDS             ; poke CDS and make everything OK
 39040                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 39041 00006A8E 5F                      	pop	di
 39042 00006A8F 07                      	pop	es
 39043 00006A90 5E                      	pop	si
 39044 00006A91 1F                      	pop	ds
 39045                                  	;mov	al,3
 39046 00006A92 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39047                                  	;retc				; someone failed an operation
 39048 00006A94 72E9                    	jc	short DoFile_retn
 39049                                  
 39050                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 39051                                  ; current directory. Copy it in.
 39052                                  
 39053 00006A96 1E                      	push	ds
 39054 00006A97 56                      	push	si
 39055 00006A98 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 39056 00006A9D 89FB                    	MOV     BX,DI                   ; point to destination
 39057                                  	;add	bx,[si+79] ; MSDOS 6.0
 39058 00006A9F 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 39059                                  	;lea	bp,[di+134]
 39060 00006AA2 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 39061                                  					;AN000;
 39062 00006AA6 E81CA7                  	call	FStrCpy                 ; copy string. ES:DI point to end
 39063 00006AA9 4F                      	DEC     DI                      ; point to NUL byte
 39064                                  
 39065                                  ; Make sure that there is a path char at end.
 39066                                  
 39067 00006AAA B05C                    	MOV     AL,'\'
 39068 00006AAC 263845FF                	CMP     [ES:DI-1],AL
 39069 00006AB0 7401                    	JZ	short GetOrig
 39070 00006AB2 AA                      	STOSB
 39071                                  
 39072                                  ; Now get original string.
 39073                                  
 39074                                  GetOrig:
 39075 00006AB3 4F                      	DEC     DI                      ; point to path char
 39076 00006AB4 5E                      	pop	si
 39077 00006AB5 1F                      	pop	ds
 39078                                  
 39079                                  ; BX points to the end of the root part of the CDS (at where a path char
 39080                                  ; should be). Now, we decide whether we use this root or extend it with the
 39081                                  ; current directory. See if the input string begins with a leading 
 39083 00006AB6 E8CE00                  	CALL    PathSep                 ; is DS:SI a path sep?
 39084 00006AB9 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 39085 00006ABB 08C0                    	OR      AL,AL                   ; end of string?
 39086 00006ABD 7410                    	JZ	short DoCanon		; yes, skip.
 39087                                  ;
 39088                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 39089                                  ; to this root. Make sure that there is a path char there and advance the
 39090                                  ; source string over all leading \'s.
 39091                                  ;
 39092 00006ABF 89DF                    	MOV     DI,BX                   ; back up to root point.
 39093                                  SkipPath:
 39094 00006AC1 AC                      	LODSB
 39095 00006AC2 E851E4                  	call    PATHCHRCMP
 39096 00006AC5 74FA                    	JZ	short SkipPath
 39097 00006AC7 4E                      	DEC     SI
 39098 00006AC8 08C0                    	OR      AL,AL
 39099 00006ACA 7403                    	JZ	short DoCanon
 39100                                  
 39101                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 39102                                  ; for yucks.
 39103                                  
 39104                                  PathAssure:
 39105 00006ACC B05C                    	MOV     AL,'\'	; 5Ch
 39106 00006ACE AA                      	STOSB
 39107                                  
 39108                                  ; ES:DI point to the correct spot for canonicalization to begin.
 39109                                  ; BP is the max extent to advance DI
 39110                                  ; BX is the backup limit for ..
 39111                                  
 39112                                  DoCanon:
 39113 00006ACF E85200                  	CALL    Canonicalize            ; wham.
 39114                                  	;retc				; badly formatted path.
 39115 00006AD2 72AB                    	jc	short DoFile_retn
 39116                                  
 39117                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 39118                                  ; to wfp_start and do string substitution. BP is still the max position in
 39119                                  ; buffer.
 39120                                  
 39121 00006AD4 16                      	push	ss
 39122 00006AD5 1F                      	pop	ds
 39123 00006AD6 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 39124 00006ADA C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 39125 00006ADE E81702                  	CALL    PathPref                ; is there a prefix?
 39126 00006AE1 7514                    	JNZ	short DoSplice		; no, do splice
 39127                                  
 39128                                  ; We have a match. Check to see if we ended in a path char.
 39129                                  
 39130 00006AE3 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 39131 00006AE6 E82DE4                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 39132 00006AE9 740C                    	JZ	short DoSplice		; yes, no current dir here.
 39133                                  Pathline:                               ; 2/13/KK
 39134 00006AEB 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 39135 00006AEF 7406                    	JZ	short DoSplice
 39136 00006AF1 47                      	INC     DI                      ; point to after current path char
 39137 00006AF2 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 39138                                  
 39139                                  ; Splice the result.
 39140                                  
 39141                                  DoSplice:
 39142 00006AF7 16                      	push	ss
 39143 00006AF8 1F                      	pop	ds			; back to DOSDATA
 39144 00006AF9 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 39145 00006AFD 31C9                    	XOR     CX,CX
 39146 00006AFF F606[7105]FF            	TEST	byte [FSPLICE],-1
 39147 00006B04 7403                    	JZ	short SkipSplice
 39148 00006B06 E82601                  	CALL    Splice                  ; replaces in place.
 39149                                  SkipSplice:
 39150                                  
 39151                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 39152                                  ; device.
 39153                                  
 39154 00006B09 16                      	push	ss
 39155 00006B0A 1F                      	pop	ds
 39156 00006B0B C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 39157                                  	;test	word [es:di+67],8000h
 39158                                  	; 17/12/2022
 39159                                  	;test	byte [es:di+68],80h
 39160 00006B0F 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 39161                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 39162 00006B14 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 39163 00006B16 E30B                    	JCXZ    Done
 39164 00006B18 E8CCA7                  	call	ECritDisk
 39165 00006B1B E828EA                  	call	FATREAD_CDS
 39166 00006B1E E8E1A7                  	call	LCritDisk
 39167                                  	;mov	al, 3
 39168 00006B21 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 39169                                  Done:   
 39170 00006B23 C3                      	retn                         ; any errors in carry flag.
 39171                                  
 39172                                  ; 13/07/2018
 39173                                  
 39174                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 39175                                  ;----------------------------------------------------------------------------
 39176                                  ;   Canonicalize - copy path removing . and .. entries.
 39177                                  ;
 39178                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 39179                                  ;               ES:DI - point to buffer
 39180                                  ;               BX - backup limit (offset from ES) points to slash
 39181                                  ;               BP - end of buffer
 39182                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 39183                                  ;                   syntax, etc.
 39184                                  ;               Carry Clear -
 39185                                  ;                   DS:DI - advanced to end of string
 39186                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 39187                                  ;   Registers modified: AX CX DX (in addition to those above)
 39188                                  ;----------------------------------------------------------------------------
 39189                                  
 39190                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39191                                  
 39192                                  Canonicalize:
 39193                                  
 39194                                  ; We copy all leading path separators.
 39195                                  
 39196 00006B24 AC                      	LODSB                           ;   while (PathChr (*s))
 39197 00006B25 E8EEE3                  	call    PATHCHRCMP
 39198 00006B28 7507                    	JNZ	short CanonDec
 39199 00006B2A 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 39200 00006B2C 7319                    	JAE	short CanonBad		;           goto error;
 39201 00006B2E AA                      	STOSB
 39202 00006B2F EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 39203                                  CanonDec:
 39204 00006B31 4E                      	DEC     SI
 39205                                  
 39206                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 39207                                  ; component (no leading path separators) and ES:DI being the destination
 39208                                  ; buffer.
 39209                                  
 39210                                  CanonLoop:
 39211                                  
 39212                                  ; If we are at the end of the source string, then we need to check to see that
 39213                                  ; a potential drive specifier is correctly terminated with a path sep char.
 39214                                  ; Otherwise, do nothing
 39215                                  
 39216 00006B32 31C0                    	XOR     AX,AX
 39217 00006B34 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 39218 00006B36 751A                    	JNZ	short DoComponent
 39219 00006B38 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 39220 00006B3D 7505                    	JNZ	short DoTerminate
 39221 00006B3F B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 39222 00006B41 AA                      	STOSB
 39223 00006B42 88E0                    	MOV     AL,AH
 39224                                  DoTerminate:
 39225 00006B44 AA                      	STOSB                           ;           *d++ = 0;
 39226 00006B45 F8                      	CLC                             ;           return (0);
 39227 00006B46 C3                      	retn
 39228                                  
 39229                                  CanonBad:
 39230 00006B47 E8C701                  	CALL	ScanPathChar            ; check for path chars in rest of string
 39231                                  	;mov	al,3
 39232 00006B4A B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 39233 00006B4C 7402                    	JZ	short PathEnc		; path character encountered in string
 39234                                  	;mov	al,2
 39235 00006B4E B002                    	MOV     AL,error_file_not_found ; Set bad file error
 39236                                  PathEnc:
 39237 00006B50 F9                      	STC
 39238                                  CanonBad_retn:
 39239 00006B51 C3                      	retn
 39240                                  
 39241                                  ; We have a textual component that we must copy. We uppercase it and truncate
 39242                                  ; it to 8.3
 39243                                  
 39244                                  DoComponent:                            ;           }
 39245 00006B52 E84C00                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 39246 00006B55 72FA                    	jc	short CanonBad_retn	;           return (-1);
 39247                                  
 39248                                  ; We special case the . and .. cases. These will be backed up.
 39249                                  
 39250                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 39251 00006B57 26833D2E                	CMP	WORD [ES:DI],002Eh
 39252 00006B5B 7408                    	JZ	short Skip1
 39253                                  	;CMP	WORD PTR ES:[DI],'..'
 39254 00006B5D 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 39255 00006B62 7508                    	JNZ	short CanonNormal
 39256 00006B64 4F                      	DEC     DI                      ;           d--;
 39257                                  Skip1:  
 39258 00006B65 E82800                  	CALL    SkipBack                ;           SkipBack ();
 39259                                  	;;mov	al,3
 39260                                  	; 07/07/2024 (*)
 39261                                  	;MOV    AL,error_path_not_found ; Set up for possible bad path error
 39262 00006B68 72E7                    	jc	short CanonBad_retn ; AL=3 (*)
 39263 00006B6A EB02                    	JMP     short CanonPath         ;           }
 39264                                  
 39265                                  ; We have a normal path. Advance destination pointer over it.
 39266                                  
 39267                                  CanonNormal:                            ;       else
 39268 00006B6C 01CF                    	ADD     DI,CX                   ;           d += ct;
 39269                                  
 39270                                  ; We have successfully copied a component. We are now pointing at a path
 39271                                  ; sep char or are pointing at a nul or are pointing at something else.
 39272                                  ; If we point at something else, then we have an error.
 39273                                  
 39274                                  CanonPath:
 39275 00006B6E E81600                  	CALL    PathSep
 39276 00006B71 75D4                    	JNZ	short CanonBad		; something else...
 39277                                  
 39278                                  ; Copy the first path char we see.
 39279                                  
 39280 00006B73 AC                      	LODSB                           ; get the char
 39281 00006B74 E89FE3                  	call    PATHCHRCMP              ; is it path char?
 39282 00006B77 75B8                    	JNZ	short CanonDec		; no, go test for nul
 39283 00006B79 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 39284 00006B7B 73CA                    	JAE	short CanonBad		; yep, error.
 39285 00006B7D AA                      	STOSB                           ; copy the one byte
 39286                                  
 39287                                  ; Skip all remaining path chars
 39288                                  
 39289                                  CanonPathLoop:
 39290 00006B7E AC                      	LODSB                           ; get next byte
 39291 00006B7F E894E3                  	call    PATHCHRCMP              ; path char again?
 39292 00006B82 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 39293 00006B84 4E                      	DEC     SI                      ; back up
 39294 00006B85 EBAB                    	JMP	short  CanonLoop	; go copy component
 39295                                  
 39296                                  ;BREAK <PathSep - determine if char is a path separator>
 39297                                  ;----------------------------------------------------------------------------
 39298                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 39299                                  ;   Inputs:     DS:SI - point to a char
 39300                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 39301                                  ;               Zero set if AL is / \ or NUL
 39302                                  ;               Zero reset otherwise
 39303                                  ;   Registers modified: AL
 39304                                  ;----------------------------------------------------------------------------
 39305                                  
 39306                                  PathSep:
 39307 00006B87 8A04                    	MOV     AL,[SI]                 ; get the character
 39308                                  PathSepGotCh:				; already have character
 39309 00006B89 08C0                    	OR      AL,AL                   ; test for zero
 39310 00006B8B 74C4                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 39311                                  	;call	PATHCHRCMP              ; check for path character
 39312                                  	;retn				; and return HIS determination
 39313                                  	; 18/12/2022
 39314 00006B8D E986E3                  	jmp	PATHCHRCMP
 39315                                  
 39316                                  ;BREAK <SkipBack - move backwards to a path separator>
 39317                                  ;----------------------------------------------------------------------------
 39318                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 39320                                  ;               BX has current directory back up limit (point to a / \)
 39321                                  ;   Outputs:    ES:DI backed up to point to a path char
 39322                                  ;               AL has char from output ES:DI (path sep if carry clear)
 39323                                  ;               Carry set if illegal backup
 39324                                  ;               Carry Clear if ok
 39325                                  ;   Registers modified: DI,AL
 39326                                  ;----------------------------------------------------------------------------
 39327                                  
 39328                                  SkipBack:
 39329 00006B90 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 39330 00006B92 720A                    	JB	short SkipBad		;       if (d < dlim)
 39331 00006B94 4F                      	DEC     DI                      ;           goto err;
 39332 00006B95 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 39333 00006B98 E87BE3                  	call    PATHCHRCMP              ;           break;
 39334 00006B9B 75F3                    	JNZ	short SkipBack		;       }
 39335                                  	;CLC				;   return (0);
 39336                                  	; 01/07/2024
 39337                                  	; cf=0
 39338 00006B9D C3                      	retn				;
 39339                                  SkipBad:                                ;err:
 39340                                  	;mov	al,3
 39341 00006B9E B003                    	MOV     AL,error_path_not_found ; bad path error
 39342                                  	;STC				;   return (-1);
 39343                                  	; 01/07/2024
 39344                                  	; cf=1
 39345 00006BA0 C3                      	retn
 39346                                  
 39347                                  ;Break <CopyComponent - copy out a file path component>
 39348                                  ;----------------------------------------------------------------------------
 39349                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 39350                                  ;
 39351                                  ;   Inputs:     DS:SI - source path
 39352                                  ;               ES:DI - destination
 39353                                  ;               ES:BP - end of buffer
 39354                                  ;   Outputs:    Carry Set - too long
 39355                                  ;               Carry Clear - DS:SI moved past component
 39356                                  ;                   CX has length of destination
 39357                                  ;   Registers modified: AX,CX,DX
 39358                                  ;----------------------------------------------------------------------------
 39359                                  
 39360                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39361                                  
 39362                                  CopyComponent:
 39363                                  
 39364                                  %define CopyBP	 [BP]		; word
 39365                                  %define CopyD	 [BP+2]		; dword
 39366                                  %define CopyDoff [BP+2]		; word
 39367                                  %define CopyS	 [BP+6]		; dword
 39368                                  %define CopySoff [BP+6]		; word
 39369                                  %define CopyTemp [BP+10]	; byte
 39370                                  
 39371 00006BA1 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 39372 00006BA4 1E                      	push	ds
 39373 00006BA5 56                      	push	si
 39374 00006BA6 06                      	push	es
 39375 00006BA7 57                      	push	di
 39376 00006BA8 55                      	push	bp
 39377 00006BA9 89E5                    	MOV     BP,SP
 39378 00006BAB B42E                    	MOV     AH,'.'
 39379 00006BAD AC                      	LODSB
 39380 00006BAE AA                      	STOSB
 39381 00006BAF 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 39382 00006BB1 7518                    	JNZ	short NormalComp
 39383 00006BB3 E8D1FF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 39384 00006BB6 740B                    	JZ	short NulTerm
 39385                                  TryTwoDot:
 39386 00006BB8 AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 39387 00006BB9 AA                      	STOSB
 39388 00006BBA 38E0                    	CMP     AL,AH
 39389 00006BBC 7557                    	JNZ	short CopyBad
 39390 00006BBE E8C6FF                  	CALL    PathSep
 39391 00006BC1 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 39392                                  NulTerm:                                ;               return -1;
 39393 00006BC3 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 39394 00006BC5 AA                      	STOSB
 39395 00006BC6 897606                  	MOV     CopySoff,SI
 39396 00006BC9 EB47                    	JMP     SHORT _GoodRet		;       }
 39397                                  NormalComp:                             ;   else {
 39398 00006BCB 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 39399 00006BCE E887E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 39400 00006BD1 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 39401 00006BD4 743F                    	JZ	short CopyBad		;           return (-1);
 39402 00006BD6 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 39403 00006BDC 7510                    	JNZ	short DoPack
 39404 00006BDE 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 39405 00006BE1 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 39406 00006BE6 7F2D                    	JG	short CopyBad		;               return (-1);
 39407 00006BE8 7504                    	JNZ	short DoPack		;           else
 39408 00006BEA 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 39409 00006BEC 742F                    	JZ	short CopyBadPath	;               return (-1);
 39410                                  DoPack:                                 ;           }
 39411 00006BEE 897606                  	MOV     CopySoff,SI ; [bp+6]
 39412 00006BF1 16                      	push	ss
 39413 00006BF2 1F                      	pop	ds
 39414 00006BF3 BE[4B05]                	MOV     SI,NAME1
 39415 00006BF6 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 39416 00006BF9 57                      	push	di
 39417 00006BFA E85DB4                  	call	PackName                ;       PackName (Name1, temp);
 39418 00006BFD 5F                      	pop	di
 39419 00006BFE E8CDA5                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 39420 00006C01 49                      	DEC     CX
 39421 00006C02 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 39422                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39423                                  	;cmp	cx,[bp+0]
 39424                                  	; 15/12/2022
 39425                                  	;cmp	cx,[bp]
 39426 00006C05 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 39427 00006C08 730B                    	JAE	short CopyBad		;           return (-1);
 39428 00006C0A 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 39429 00006C0C C47E02                  	LES     DI,CopyD    ; [bp+2]	
 39430 00006C0F E8B3A5                  	call	FStrCpy
 39431                                  _GoodRet:				;       }
 39432 00006C12 F8                      	CLC
 39433 00006C13 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 39434                                  CopyBad:
 39435 00006C15 F9                      	STC
 39436 00006C16 E8F800                  	CALL    ScanPathChar            ; check for path chars in rest of string
 39437                                  	;mov	al,2
 39438 00006C19 B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 39439 00006C1B 7503                    	JNZ	short CopyEnd
 39440                                  CopyBadPath:
 39441 00006C1D F9                      	STC
 39442                                  	;mov	al,3
 39443 00006C1E B003                    	MOV     AL,error_path_not_found ; Set bad path error
 39444                                  CopyEnd:
 39445 00006C20 5D                      	pop	bp
 39446 00006C21 5F                      	pop	di
 39447 00006C22 07                      	pop	es
 39448 00006C23 5E                      	pop	si
 39449 00006C24 1F                      	pop	ds
 39450 00006C25 9F                      	LAHF
 39451 00006C26 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 39452 00006C29 E8A2A5                  	call	StrLen
 39453 00006C2C 49                      	DEC     CX
 39454 00006C2D 9E                      	SAHF
 39455 00006C2E C3                      	retn
 39456                                  
 39457                                  ; 14/05/2019 - Retro DOS v4.0
 39458                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 39459                                  
 39460                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39461                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 39462                                  
 39463                                  ;Break <Splice - pseudo mount by string substitution>
 39464                                  ;----------------------------------------------------------------------------
 39465                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 39466                                  ;       ThisCDS to point to physical drive CDS.
 39467                                  ;   Inputs:     DS:SI point to string
 39468                                  ;               NoSetDir = TRUE => exact matches with splice fail
 39469                                  ;   Outputs:    DS:SI points to thisCDS
 39470                                  ;               ES:DI points to DPB
 39471                                  ;               String at DS:SI may be reduced in length by removing prefix
 39472                                  ;               and substituting drive letter.
 39473                                  ;               CX = 0 If no splice done
 39474                                  ;               CX <> 0 otherwise
 39475                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 39476                                  ;                   left alone
 39477                                  ;               ThisDPB points to proper DPB
 39478                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 39479                                  ;----------------------------------------------------------------------------
 39480                                  
 39481                                  Splice:
 39482 00006C2F 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 39483 00006C35 7469                    	JZ	short AllDone
 39484 00006C37 36FF36[A205]            	push	word [SS:THISCDS]
 39485 00006C3C 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 39486 00006C41 1E                      	push	ds
 39487 00006C42 56                      	push	si
 39488 00006C43 5F                      	pop	di
 39489 00006C44 07                      	pop	es
 39490 00006C45 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 39491                                  SpliceScan:
 39492 00006C47 E8E3FC                  	call	GetCDSFromDrv
 39493 00006C4A 724A                    	JC	short SpliceDone
 39494 00006C4C FEC0                    	INC     AL
 39495                                  	; 17/12/2022
 39496                                  	;test	byte [si+68],20h
 39497 00006C4E F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 39498                                  	;;test	word [si+67],2000h
 39499                                  	;TEST	word [SI+curdir.flags],curdir_splice
 39500 00006C52 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 39501 00006C54 57                      	push	di
 39502 00006C55 E8A000                  	CALL    PathPref                ;           if (!PathPref (s, d))
 39503 00006C58 7403                    	JZ	short SpliceFound	;
 39504                                  SpliceSkip:
 39505 00006C5A 5F                      	pop	di
 39506 00006C5B EBEA                    	JMP	short SpliceScan	;               continue;
 39507                                  SpliceFound:
 39508 00006C5D 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 39509 00006C61 7508                    	JNZ	short SpliceDo
 39510 00006C63 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 39511 00006C69 75EF                    	JNZ	short SpliceSkip
 39512                                  SpliceDo:
 39513 00006C6B 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 39514 00006C6D 06                      	push	es
 39515 00006C6E 1F                      	pop	ds
 39516 00006C6F 5F                      	pop	di
 39517 00006C70 E87F00                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 39518 00006C73 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 39519 00006C77 09C0                    	OR      AX,AX
 39520 00006C79 7808                    	JS	short NoPoke
 39521 00006C7B 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 39522 00006C7D 29F0                    	SUB     AX,SI
 39523 00006C7F 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 39524                                  NoPoke:
 39525 00006C83 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 39526 00006C86 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 39527 00006C88 B05C                    	MOV     AL,"\"
 39528 00006C8A AA                      	STOSB
 39529                                  SpliceCopy:                             ;               strcpy (src, p);
 39530 00006C8B E837A5                  	call	FStrCpy
 39531 00006C8E 83C404                  	ADD     SP,4                    ; throw away saved stuff
 39532 00006C91 80C901                  	OR      CL,1                    ; signal splice done.
 39533 00006C94 EB0C                    	JMP     SHORT DoSet             ;               return;
 39534                                  SpliceDone:                             ;               }
 39535 00006C96 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 39536 00006C9B 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 39537                                  AllDone:
 39538 00006CA0 31C9                    	XOR     CX,CX
 39539                                  DoSet:
 39540 00006CA2 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 39541                                  	;les	di,[si+69]
 39542 00006CA7 C47C45                  	LES     DI,[SI+curdir.devptr]	
 39543 00006CAA 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 39544 00006CAF 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 39545                                  Splice_retn:
 39546 00006CB4 C3                      	retn
 39547                                  
 39548                                  ; 15/05/2019 - Retro DOS v4.0
 39549                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 39550                                  
 39551                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39552                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 39553                                  
 39554                                  ;Break <$NameTrans - partially process a name>
 39555                                  ;----------------------------------------------------------------------------
 39556                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 39557                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 39558                                  ;   to Transpath playing games with devices, we need to insure that the output
 39559                                  ;   has drive letter and : in it.
 39560                                  ;
 39561                                  ;   Inputs:     DS:SI - source string for translation
 39562                                  ;               ES:DI - pointer to buffer
 39563                                  ;   Outputs:
 39564                                  ;       Carry Clear
 39565                                  ;               Buffer at ES:DI is filled in with data
 39566                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 39567                                  ;       Carry Set
 39568                                  ;               AX = error_path_not_found
 39569                                  ;   Registers modified: all
 39570                                  ;----------------------------------------------------------------------------
 39571                                  
 39572                                  _$NameTrans:
 39573 00006CB5 1E                      	push	ds
 39574 00006CB6 56                      	push	si
 39575 00006CB7 06                      	push	es
 39576 00006CB8 57                      	push	di
 39577 00006CB9 51                      	push	cx ; MSDOS 6.0
 39578                                  	
 39579                                  	; MSDOS 6.0	
 39580                                  ; M027 - Start
 39581                                  ;
 39582                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 39583                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 39584                                  ; device if the old call set the volume attribute bit. Note that devname in
 39585                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 39586                                  ; and restore CX.
 39587                                  
 39588                                  	;mov	ch,16h
 39589 00006CBA B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 39590 00006CBC E8B102                  	call	SetAttrib
 39591                                  
 39592                                  ; M027 - End
 39593                                  
 39594                                  	; MSDOS 3.3 (& MSDOS 6.0)
 39595 00006CBF BF[BE03]                	MOV     DI,OPENBUF
 39596 00006CC2 E8EAFC                  	CALL    TransPath               ; to translation (everything)
 39597 00006CC5 59                      	pop	cx ; MSDOS 6.0
 39598 00006CC6 5F                      	pop     di
 39599 00006CC7 07                      	pop	es
 39600 00006CC8 5E                      	pop     si
 39601 00006CC9 1F                      	pop     ds
 39602 00006CCA 7303                    	JNC	short TransOK
 39603 00006CCC E96F99                  	jmp	SYS_RET_ERR
 39604                                  TransOK:
 39605 00006CCF BE[BE03]                	MOV     SI,OPENBUF
 39606 00006CD2 16                      	push	ss
 39607 00006CD3 1F                      	pop	ds
 39608                                  ;GotText:
 39609 00006CD4 E8EEA4                  	call	FStrCpy
 39610 00006CD7 E95B99                  	jmp	SYS_RET_OK
 39611                                  
 39612                                  ;Break   <DriveFromText - return drive number from a text string>
 39613                                  ;----------------------------------------------------------------------------
 39614                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 39615                                  ;   pointer.
 39616                                  ;
 39617                                  ;   Inputs:     DS:SI point to a text string
 39618                                  ;   Outputs:    AL has drive number
 39619                                  ;               DS:SI advanced
 39620                                  ;   Registers modified: AX,SI.
 39621                                  ;----------------------------------------------------------------------------
 39622                                  
 39623                                  DriveFromText:
 39624 00006CDA 30C0                    	XOR     AL,AL                   ;       drive = 0;
 39625                                  	;CMP	BYTE [SI],0		;       if (*s &&
 39626                                  	; 23/09/2023
 39627 00006CDC 3804                    	cmp	[si],al ; 0
 39628 00006CDE 74D4                    	jz	short Splice_retn
 39629 00006CE0 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 39630 00006CE4 75CE                    	jnz	short Splice_retn
 39631 00006CE6 AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 39632 00006CE7 0C20                    	OR      AL,20h
 39633                                  	;sub	al,60h
 39634 00006CE9 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 39635 00006CEB 75C7                    	jnz	short Splice_retn
 39636 00006CED B0FF                    	MOV	AL,-1                   ; nuke AL...
 39637                                  	; 23/09/2023
 39638                                  	;dec	al ; -1
 39639 00006CEF C3                      	retn				;           }
 39640                                  
 39641                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 39642                                  ;----------------------------------------------------------------------------
 39643                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 39644                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 39645                                  ;
 39646                                  ;   Inputs:     AL has 0-based drive number
 39647                                  ;   Outputs:    ES:DI advanced
 39648                                  ;   Registers modified: AX
 39649                                  ;----------------------------------------------------------------------------
 39650                                  
 39651                                  TextFromDrive:
 39652 00006CF0 FEC0                    	INC     AL
 39653                                  TextFromDrive1:
 39654                                  	;add	al,40h
 39655 00006CF2 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 39656 00006CF4 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 39657 00006CF6 AB                      	STOSW
 39658                                  PathPref_retn:
 39659 00006CF7 C3                      	retn
 39660                                  
 39661                                  ;Break   <PathPref - see if one path is a prefix of another>
 39662                                  ;----------------------------------------------------------------------------
 39663                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 39664                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 39665                                  ;   prefix: A:\ and A:\FOO
 39666                                  ;
 39667                                  ;   Inputs:     DS:SI potential prefix
 39668                                  ;               ES:DI string
 39669                                  ;   Outputs:    Zero set => prefix found
 39670                                  ;                   DI/SI advanced past matching part
 39671                                  ;               Zero reset => no prefix, DS/SI garbage
 39672                                  ;   Registers modified: CX
 39673                                  ;----------------------------------------------------------------------------
 39674                                  
 39675                                  PathPref:
 39676 00006CF8 E8E1A4                  	call	DStrLen                 ; get length
 39677 00006CFB 49                      	DEC     CX                      ; do not include nul byte
 39678 00006CFC F3A6                    	REPZ    CMPSB                   ; compare
 39679 00006CFE 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 39680 00006D00 50                      	push	ax			; save char register
 39681 00006D01 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 39682 00006D04 E80FE2                  	call    PATHCHRCMP              ; is it a path char (Root!)
 39683 00006D07 7406                    	JZ	short Prefix		; yes, match root (I hope)
 39684                                  NotSep:                                 ; 2/13/KK
 39685 00006D09 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 39686 00006D0C E87AFE                  	CALL    PathSepGotCh            ; was it a pathchar?
 39687                                  Prefix:
 39688 00006D0F 58                      	pop	ax			; get back original
 39689 00006D10 C3                      	retn
 39690                                  
 39691                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 39692                                  ;----------------------------------------------------------------------------
 39693                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 39694                                  ;     a path separator.
 39695                                  ;
 39696                                  ;     Input:    DS:SI target string (null terminated)
 39697                                  ;     Output:   Zero set => path separator encountered in string
 39698                                  ;               Zero clear => null encountered
 39699                                  ;     Registers modified: SI
 39700                                  ;----------------------------------------------------------------------------
 39701                                  
 39702                                  ScanPathChar:
 39703 00006D11 AC                      	LODSB                           ; fetch a character
 39704 00006D12 E874FE                  	call    PathSepGotCh
 39705 00006D15 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 39706                                  	;call	PATHCHRCMP              ; path separator?
 39707                                  	;retn
 39708                                  	; 18/12/2022
 39709 00006D17 E9FCE1                  	jmp	PATHCHRCMP
 39710                                  
 39711                                  ;============================================================================
 39712                                  ; FILE.ASM, MSDOS 6.0, 1991
 39713                                  ;============================================================================
 39714                                  ; 14/07/2018 - Retro DOS v3.0
 39715                                  
 39716                                  ; 13/05/2019 - Retro DOS v4.0
 39717                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 39718                                  
 39719                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39720                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 39721                                  
 39722                                  ; MSDOS 2.11
 39723                                  ;BREAK <$Open - open a file handle>
 39724                                  ;----------------------------------------------------------------------------
 39725                                  ;   Assembler usage:
 39726                                  ;           LDS     DX, Name
 39727                                  ;           MOV     AH, Open
 39728                                  ;           MOV     AL, access
 39729                                  ;           INT     int_command
 39730                                  ;
 39731                                  ;       ACCESS          Function
 39732                                  ;       ------          --------
 39733                                  ;       open_for_read   file is opened for reading
 39734                                  ;       open_for_write  file is opened for writing
 39735                                  ;       open_for_both   file is opened for both reading and writing.
 39736                                  ;
 39737                                  ;   Error returns:
 39738                                  ;           AX = error_invalid_access
 39739                                  ;              = error_file_not_found
 39740                                  ;              = error_access_denied
 39741                                  ;              = error_too_many_open_files
 39742                                  ;----------------------------------------------------------------------------
 39743                                  
 39744                                  ; MSDOS 6.0
 39745                                  ;	BREAK <$Open - open a file from a path string>
 39746                                  ;----------------------------------------------------------------------------
 39747                                  ;
 39748                                  ;**	$OPen - Open a File
 39749                                  ;
 39750                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 39751                                  ;	file and and returns a handle
 39752                                  ;
 39753                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 39754                                  ;		(AL) = open mode
 39755                                  ;	EXIT	'C' clear if OK
 39756                                  ;		  (ax) = file handle
 39757                                  ;		'C' set if error
 39758                                  ;		  (ax) = error code
 39759                                  ;	USES	all
 39760                                  ;
 39761                                  ;----------------------------------------------------------------------------
 39762                                  
 39763                                  ; 13/05/2019 - Retro DOS v4.0
 39764                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39765                                  
 39766                                  ; 14/03/2024 - Retro DOS v4.1
 39767                                  
 39768                                  _$OPEN:       
 39769 00006D1A 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 39770                                  _$Open2:
 39771                                  	;mov	ch,16h
 39772 00006D1C B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 39773 00006D1E E84F02                  	call	SetAttrib
 39774 00006D21 B9[B82A]                	mov	cx,DOS_OPEN
 39775                                  
 39776                                  	;xor	ah,ah  ; MSDOS 3.3
 39777                                  
 39778 00006D24 50                      	push	ax
 39779                                  
 39780                                  ;*	General file open/create code. The $CREATE call and the various
 39781                                  ;	$OPEN calls all come here.
 39782                                  ;
 39783                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 39784                                  ;	path names, etc., and then dispatch to our individual handlers.
 39785                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 39786                                  ;
 39787                                  ;	(TOS) = create mode
 39788                                  ;	(CX) = address of routine to call to do actual function
 39789                                  ;	(DS:DX) = ASCIZ name
 39790                                  ;	SAttrib = Attribute mask
 39791                                  
 39792                                  ;	Get a free SFT and mark it "being allocated"
 39793                                  
 39794                                  AccessFile:
 39795 00006D25 E8BFA5                  	call	ECritSFT
 39796 00006D28 E8F1F7                  	call	SFNFree			; get a free sfn
 39797 00006D2B E8D4A5                  	call	LCritSFT
 39798                                  	;jc	short OpenFailJ		; oops, no free sft's
 39799                                  	; 14/03/2024
 39800 00006D2E 7248                    	jc	short OpenFail
 39801                                  
 39802 00006D30 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 39803 00006D35 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 39804 00006D3A 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 39805                                  
 39806                                  ;	Find a free area in the user's JFN table.
 39807                                  
 39808 00006D3F E8C7F7                  	call	JFNFree			; get a free jfn
 39809                                  	;jnc	short SaveJFN
 39810                                  	; 14/03/2024
 39811 00006D42 7234                    	jc	short OpenFail
 39812                                  	;
 39813                                  ;OpenFailJ:
 39814                                  	;JMP	OpenFail		; there were free JFNs... try SFN
 39815                                  
 39816                                  SaveJFN:
 39817 00006D44 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 39818 00006D49 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 39819 00006D4E 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 39820                                  
 39821                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 39822                                  ;	reusing the same JFN.
 39823                                  
 39824 00006D53 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 39825 00006D58 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 39826 00006D5B 89D6                    	MOV	SI,DX			; get name in appropriate place
 39827 00006D5D BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 39828 00006D60 51                      	push	cx			; save routine to call
 39829 00006D61 E84BFC                  	call	TransPath		; convert the path
 39830 00006D64 5B                      	pop	bx			; (bx) = routine to call
 39831                                  
 39832 00006D65 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 39833                                  	;JC	short OpenCleanJ	; no error, go and open file
 39834                                  	; 14/03/2024
 39835 00006D6A 7260                    	jc	short OpenClean
 39836                                  
 39837 00006D6C 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 39838 00006D72 7408                    	JZ	short SetSearch
 39839                                  	;mov	al,2
 39840 00006D74 B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 39841                                  OpenCleanJ:
 39842 00006D76 EB54                    	JMP	short OpenClean
 39843                                  
 39844                                  	; 14/03/2024 (PCDOS 7.1 IBMDOS.COM)
 39845                                  	;;;
 39846                                  OpenFail:
 39847 00006D78 FB                      	STI
 39848 00006D79 59                      	pop	cx			; Clean stack
 39849                                  	;
 39850 00006D7A EB5D                    	jmp	short OpenCritLeave
 39851                                  	;;;
 39852                                  
 39853                                  SetSearch:
 39854 00006D7C 58                      	pop	ax			; Mode (Open), Attributes (Create)
 39855                                  
 39856                                  ;	We need to get the new inheritance bits.
 39857                                  
 39858 00006D7D 31C9                    	xor	cx,cx
 39859                                  	; MSDOS 6.0
 39860                                  	;mov	[si+2],cx ; 0
 39861 00006D7F 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 39862                                  	;mov    [si+51],cx ; 0
 39863 00006D82 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 39864                                  	;
 39865 00006D85 81FB[B82A]              	CMP	BX,DOS_OPEN
 39866 00006D89 7509                    	JNZ	short _DoOper
 39867                                  	;test   al,80h
 39868 00006D8B A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 39869 00006D8D 7405                    	JZ	short _DoOper ; 10/08/2018
 39870 00006D8F 247F                    	AND	AL,7Fh			; mask off inherit bit
 39871                                  	;mov	cx,1000h
 39872 00006D91 B90010                  	MOV	CX,sf_no_inherit
 39873                                  _DoOper:
 39874                                  	;; MSDOS 3.3
 39875                                  	;;mov	word [si+2], 0
 39876                                  	;;mov	word [si+33h], 0
 39877                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 39878                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 39879                                  
 39880                                  	; MSDOS 6.0
 39881                                  ;**	Check if this is an extended open. If so you must set the
 39882                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 39883                                  ;	Set_EXT_mode in creat.asm
 39884                                  
 39885                                  	; MSDOS 6.0
 39886                                  	;SAVE	<di, es>                ;M022 conditional removed here
 39887 00006D94 57                      	push	di
 39888 00006D95 06                      	push	es
 39889 00006D96 1E                      	push	ds
 39890 00006D97 07                      	pop	es
 39891 00006D98 56                      	push	si
 39892 00006D99 5F                      	pop	di			; (es:di) = SFT address
 39893 00006D9A E807BD                  	call	Set_EXT_mode
 39894                                  	;RESTORE <es, di>
 39895 00006D9D 07                      	pop	es
 39896 00006D9E 5F                      	pop	di
 39897                                  
 39898                                  	;Context DS
 39899 00006D9F 16                      	push	ss
 39900 00006DA0 1F                      	pop	ds	
 39901                                  
 39902 00006DA1 51                      	push	cx
 39903 00006DA2 FFD3                    	CALL	BX			; blam!
 39904 00006DA4 59                      	pop	cx
 39905 00006DA5 C536[9E05]              	LDS	SI,[THISSFT]
 39906 00006DA9 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 39907                                  	;jc	short OpenE ; MSDOS 3.3
 39908                                  
 39909                                  ;	The SFT was successfully opened. Remove busy mark.
 39910                                  
 39911                                  OpenOK:
 39912                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 39913 00006DAB C7040100                	mov	word [SI],1
 39914                                  	;or	[SI+5],cx
 39915 00006DAF 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 39916                                  
 39917                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 39918                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 39919                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 39920                                  ;
 39921                                  ; Since this is only relevant on sharer systems, we stick this code into the
 39922                                  ; sharer.
 39923                                  
 39924 00006DB2 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 39925 00006DB6 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 39926                                  
 39927 00006DBB 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 39928                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39929                                  OpenOkj:
 39930 00006DC2 E97098                  	jmp	SYS_RET_OK		; bye with no errors
 39931                                  
 39932                                  	; MSDOS 6.0
 39933                                  ;Extended Open hooks check
 39934                                  OpenE2:					;AN000;;EO.
 39935 00006DC5 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 39936 00006DC8 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 39937 00006DCA EB0D                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 39938                                  
 39939                                  ;	Extended Open hooks check
 39940                                  ;
 39941                                  ;	AL has error code. Stack has argument to dos_open/dos_create.
 39942                                  
 39943                                  OpenClean:
 39944 00006DCC 5B                      	pop	bx			; clean off stack
 39945                                  OpenE:
 39946                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 39947 00006DCD C7040000                	mov	word [SI],0
 39948 00006DD1 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 39949 00006DD6 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 39950                                  
 39951                                  	; 14/03/2024
 39952                                  	;JMP	SHORT OpenCritLeave
 39953                                  	;
 39954                                  ;OpenFail:
 39955                                  	;STI
 39956                                  	;pop	cx			; Clean stack
 39957                                  
 39958                                  OpenCritLeave:
 39959 00006DD9 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 39960                                  
 39961                                  	; MSDOS 6.0
 39962                                  ; File Tagging DOS 4.00
 39963 00006DE0 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 39964                                  					;AN000;;FT. code page mismatch
 39965 00006DE6 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 39966 00006DE8 E95B98                  	jmp	From_GetSet		;AN000;;FT. yes
 39967                                  NORERR: 				;AN000;
 39968                                  ; File Tagging DOS 4.00
 39969                                  
 39970 00006DEB E95098                  	jmp	SYS_RET_ERR		; no free, return error
 39971                                  
 39972                                  ; MSDOS 2.11
 39973                                  ;BREAK <$CREAT - create a new file and open him for input>
 39974                                  ;----------------------------------------------------------------------------
 39975                                  ;   Assembler usage:
 39976                                  ;           LDS     DX, name
 39977                                  ;           MOV     AH, Creat
 39978                                  ;           MOV     CX, access
 39979                                  ;           INT     21h
 39980                                  ;       ; AX now has the handle
 39981                                  ;
 39982                                  ;   Error returns:
 39983                                  ;           AX = error_access_denied
 39984                                  ;              = error_path_not_found
 39985                                  ;              = error_too_many_open_files
 39986                                  ;----------------------------------------------------------------------------
 39987                                  
 39988                                  ; MSDOS 6.0
 39989                                  ;	BREAK <$Creat - create a brand-new file>
 39990                                  ;----------------------------------------------------------------------------
 39991                                  ;
 39992                                  ;**	$Creat - Create a File
 39993                                  ;
 39994                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 39995                                  ;	initial attributes contained in CX
 39996                                  ;
 39997                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 39998                                  ;		(CX) = initial attributes
 39999                                  ;	EXIT	'C' set if error
 40000                                  ;		  (ax) = error code
 40001                                  ;		'C' clear if OK
 40002                                  ;		  (ax) = file handle
 40003                                  ;	USES	all
 40004                                  ;
 40005                                  ;----------------------------------------------------------------------------
 40006                                  
 40007                                  _$CREAT:
 40008 00006DEE 51                      	push	cx			; Save attributes on stack
 40009 00006DEF B9[9229]                	mov	CX,DOS_CREATE		; routine to call
 40010                                  AccessSet:
 40011                                  	;mov	byte [ss:SATTRIB],6
 40012 00006DF2 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 40013                                  	; 10/08/2018
 40014 00006DF8 E92AFF                  	JMP	AccessFile		; use good ol' open
 40015                                  
 40016                                  ; MSDOS 6.0 (MSDOS 3.3)
 40017                                  ;	BREAK <$CHMOD - change file attributes>
 40018                                  ;----------------------------------------------------------------------------
 40019                                  ;
 40020                                  ;**	$CHMOD - Change File Attributes
 40021                                  ;
 40022                                  ;   Assembler usage:
 40023                                  ;	    LDS     DX, name
 40024                                  ;	    MOV     CX, attributes
 40025                                  ;	    MOV     AL,func (0=get, 1=set)
 40026                                  ;	    INT     21h
 40027                                  ;   Error returns:
 40028                                  ;	    AX = error_path_not_found
 40029                                  ;	    AX = error_access_denied
 40030                                  ;
 40031                                  ;----------------------------------------------------------------------------
 40032                                  
 40033                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40034                                  _$CHMOD:
 40035                                  	; 05/08/2018 - Retro DOS v3.0
 40036                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh
 40037 00006DFB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 40038 00006DFE 50                      	push	ax
 40039 00006DFF 51                      	push	cx			; save function and attributes
 40040 00006E00 89D6                    	MOV	SI,DX			; get things in appropriate places
 40041 00006E02 E8AEFB                  	call	TransPathSet		; get correct path
 40042 00006E05 59                      	pop	cx
 40043 00006E06 58                      	pop	ax			; and get function and attrs back
 40044 00006E07 7257                    	JC	short ChModErr		; errors get mapped to path not found
 40045 00006E09 16                      	push	ss			; set up for later possible calls
 40046 00006E0A 1F                      	pop	ds
 40047 00006E0B 803E[7A05]FF            	CMP	byte [CMETA],-1
 40048 00006E10 754E                    	JNZ	short ChModErr
 40049                                  	;mov	byte [SATTRIB],16h
 40050 00006E12 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 40051 00006E17 2C01                    	SUB	AL,1			; fast way to discriminate
 40052 00006E19 720B                    	JB	short ChModGet		; 0 -> go get value
 40053 00006E1B 7417                    	JZ	short ChModSet		; 1 -> go set value
 40054                                  	;mov	byte [EXTERR_LOCUS],1
 40055 00006E1D C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 40056                                  	;mov	al,1
 40057 00006E22 B001                    	mov	al,error_invalid_function ; bad value
 40058                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40059                                  chmod_errj:	
 40060                                  	;;jmp	SYS_RET_ERR
 40061                                  	;jmp	short ChModE	
 40062 00006E24 EBC5                    	jmp	short NORERR	; 06/12/2022
 40063                                  ChModGet:
 40064 00006E26 E860BA                  	call	GET_FILE_INFO		; suck out the ol' info
 40065 00006E29 7237                    	JC	short ChModE		; error codes are already set for ret
 40066 00006E2B E85796                  	call	Get_User_Stack		; point to user saved vaiables
 40067                                  	;mov	[SI+4],ax
 40068 00006E2E 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 40069                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 40070                                  OpenOkj2:
 40071                                  	; 17/12/2022
 40072                                  	;;jmp	SYS_RET_OK		; say sayonara
 40073                                  	;jmp	short OpenOkj
 40074                                  	; 25/06/2019
 40075 00006E31 E90498                  	jmp	SYS_RET_OK_clc
 40076                                  
 40077                                  ChModSet:
 40078 00006E34 89C8                    	MOV	AX,CX			; get attrs in position
 40079 00006E36 E8AEBA                  	call	SET_FILE_ATTRIBUTE	; go set
 40080 00006E39 7227                    	JC	short ChModE		; errors are set
 40081                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 40082                                  	;jmp	SYS_RET_OK
 40083                                  OpenOkj3:
 40084                                  	;jmp	short OpenOkj2
 40085                                  	; 17/12/2022
 40086 00006E3B E9F797                  	jmp	SYS_RET_OK
 40087                                  
 40088                                  ; 17/12/2022
 40089                                  %if 0
 40090                                  ChModErr:
 40091                                  NotFound:	; 17/12/2022
 40092                                  	;mov	al,3
 40093                                  	mov	al,error_path_not_found
 40094                                  ChModE:
 40095                                  UnlinkE:	; 17/12/2022
 40096                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40097                                  	;;jmp	SYS_RET_ERR
 40098                                  	;jmp	short chmod_errj
 40099                                  	; 17/12/2022
 40100                                  	jmp	short NORERR
 40101                                  %endif
 40102                                  
 40103                                  ; 22/05/2019 - Retro DOS v4.0
 40104                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 40105                                  
 40106                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40107                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 40108                                  
 40109                                  ;	BREAK <$UNLINK - delete a file entry>
 40110                                  ;----------------------------------------------------------------------------
 40111                                  ;
 40112                                  ;**	$UNLINK - Delete a File
 40113                                  ;
 40114                                  ;
 40115                                  ;	Assembler usage:
 40116                                  ;	    LDS     DX, name
 40117                                  ;	    IF VIA SERVER DOS CALL
 40118                                  ;	     MOV     CX,SEARCH_ATTRIB
 40119                                  ;	    MOV     AH, Unlink
 40120                                  ;	    INT     21h
 40121                                  ;
 40122                                  ;	ENTRY	(ds:dx) = path name
 40123                                  ;		(cx) = search_attribute, if via server_dos
 40124                                  ;	EXIT	'C' clear if no error
 40125                                  ;		'C' set if error
 40126                                  ;		  (ax) = error code
 40127                                  ;			= error_file_not_found
 40128                                  ;			= error_access_denied
 40129                                  ;
 40130                                  ;----------------------------------------------------------------------------
 40131                                  
 40132                                  _$UNLINK:
 40133 00006E3E 51                      	push	cx			; Save possible CX input parm
 40134 00006E3F 89D6                    	MOV	SI,DX			; Point at input string
 40135 00006E41 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 40136 00006E44 E86CFB                  	call	TransPathSet		; go get normalized path
 40137 00006E47 59                      	pop	cx
 40138 00006E48 7216                    	JC	short ChModErr		; badly formed path
 40139 00006E4A 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 40140 00006E50 750E                    	JNZ	short NotFound
 40141 00006E52 16                      	push	ss
 40142 00006E53 1F                      	pop	ds
 40143                                  	;mov	ch,6
 40144 00006E54 B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 40145 00006E56 E81701                  	call	SetAttrib
 40146 00006E59 E847B6                  	call	DOS_DELETE		; remove that file
 40147                                  	;JC	short UnlinkE 		; error is there
 40148                                  	; 17/12/2022
 40149 00006E5C 728D                    	jc	short NORERR
 40150                                  
 40151                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40152                                  UnlinkOk:
 40153                                  	;jmp	SYS_RET_OK		; okey doksy
 40154 00006E5E EBDB                    	jmp	short OpenOkj3
 40155                                  
 40156                                  	; 17/12/2022
 40157                                  ChModErr:	; 17/12/2022
 40158                                  NotFound:
 40159                                  	;mov	al,3
 40160 00006E60 B003                    	MOV	AL,error_path_not_found
 40161                                  ChModE:		; 17/12/2022
 40162                                  UnlinkE:
 40163                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40164                                  	;;jmp	SYS_RET_ERR		; bye
 40165                                  	;jmp	short ChModE
 40166                                  	; 17/12/2022
 40167 00006E62 EB87                    	jmp	short NORERR
 40168                                  
 40169                                  ;BREAK <$RENAME - move directory entries around>
 40170                                  ;----------------------------------------------------------------------------
 40171                                  ;
 40172                                  ;   Assembler usage:
 40173                                  ;	    LDS     DX, source
 40174                                  ;	    LES     DI, dest
 40175                                  ;	    IF VIA SERVER DOS CALL
 40176                                  ;	      MOV   CX,SEARCH_ATTRIB
 40177                                  ;	    MOV     AH, Rename
 40178                                  ;	    INT     21h
 40179                                  ;
 40180                                  ;   Error returns:
 40181                                  ;	    AX = error_file_not_found
 40182                                  ;	       = error_not_same_device
 40183                                  ;	       = error_access_denied
 40184                                  ;
 40185                                  ;----------------------------------------------------------------------------
 40186                                  
 40187                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40188                                  _$RENAME:
 40189                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40190 00006E64 51                      	push	cx
 40191 00006E65 1E                      	push	ds
 40192 00006E66 52                      	push	dx			; save source and possible CX arg
 40193 00006E67 06                      	PUSH	ES
 40194 00006E68 1F                      	POP	DS			; move dest to source
 40195 00006E69 89FE                    	MOV	SI,DI			; save for offsets
 40196 00006E6B BF[3E04]                	MOV	DI,RENBUF
 40197 00006E6E E842FB                  	call	TransPathSet		; munge the paths
 40198 00006E71 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 40199 00006E76 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 40200 00006E7B 5E                      	pop	si
 40201 00006E7C 1F                      	pop	ds
 40202 00006E7D 59                      	pop	cx			; get back source and possible CX arg
 40203                                  epjc2:	
 40204 00006E7E 72E0                    	JC	short ChModErr		; get old error
 40205 00006E80 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 40206 00006E86 75D8                    	JNZ	short NotFound
 40207 00006E88 51                      	push	cx			; Save possible CX arg
 40208 00006E89 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 40209 00006E8C E824FB                  	call	TransPathSet		; wham
 40210 00006E8F 59                      	pop	cx
 40211                                  	;JC	short epjc2
 40212                                  	; 15/03/2024
 40213 00006E90 72CE                    	jc	short ChModErr
 40214                                  	
 40215 00006E92 16                      	push	ss
 40216 00006E93 1F                      	pop	ds
 40217 00006E94 803E[7A05]FF            	CMP	byte [CMETA],-1
 40218 00006E99 72C5                    	JB	short NotFound
 40219                                  
 40220                                  	; MSDOS 6.0
 40221                                  	;PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 40222                                  	;PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 40223                                  	; 15/03/2024
 40224                                  	;;;
 40225 00006E9B C43E[A205]              	les	di,[THISCDS]
 40226 00006E9F 57                      	push	di
 40227 00006EA0 06                      	push	es
 40228                                  	;;;
 40229                                  
 40230 00006EA1 BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 40231 00006EA4 16                      	PUSH	SS			   ;AN000;;MS.
 40232 00006EA5 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 40233 00006EA6 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 40234                                  rnloop: 				   ;AN000;
 40235 00006EA8 E882FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 40236 00006EAB 720F                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 40237 00006EAD E8E4A2                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 40238 00006EB0 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 40239 00006EB2 FEC0                    	INC	AL			   ;AN000;;MS.	next
 40240 00006EB4 EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 40241                                  rnerr:					   ;AN000;
 40242                                  	;ADD	SP,4			   ;AN000;;MS. pop thiscds
 40243                                  	; 15/03/2024 (PCDOS 7.1 IBMDOS.COM)
 40244 00006EB6 58                      	pop	ax
 40245 00006EB7 58                      	pop	ax
 40246                                  
 40247                                  	;error	error_current_directory    ;AN000;;MS.
 40248 00006EB8 B010                    	mov	al,error_current_directory
 40249                                  	;jmp	SYS_RET_ERR
 40250                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40251 00006EBA EBA6                    	jmp	short UnlinkE
 40252                                  dorn:
 40253                                  
 40254                                  ; 15/03/2024
 40255                                  %if 0					   ;AN000;
 40256                                  	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40257                                  	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 40258                                  %endif
 40259 00006EBC 16                      	push	ss
 40260 00006EBD 1F                      	pop	ds
 40261                                  
 40262                                  ; 15/03/2024
 40263                                  %if 1
 40264 00006EBE 8F06[A405]              	pop	word [THISCDS+2]
 40265 00006EC2 8F06[A205]              	pop	word [THISCDS]
 40266                                  %endif
 40267                                  	; MSDOS 3.3 (& MSDOS 6.0)
 40268                                  	;mov	ch,16h
 40269 00006EC6 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 40270                                  					; rename appropriate files
 40271 00006EC8 E8A500                  	call	SetAttrib
 40272 00006ECB E8A9B7                  	call	DOS_RENAME		; do the deed
 40273 00006ECE 7292                    	JC	short UnlinkE 		; errors
 40274                                  
 40275                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40276                                  	;jmp	SYS_RET_OK
 40277 00006ED0 EB8C                    	jmp	short UnlinkOk
 40278                                  
 40279                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40280                                  
 40281                                  ; 14/07/2018 - Retro DOS v3.0
 40282                                  ; MSDOS 3.3 (& MSDOS 6.0)
 40283                                  
 40284                                  ;Break <$CreateNewFile - Create a new directory entry>
 40285                                  ;----------------------------------------------------------------------------
 40286                                  ;   CreateNew - Create a new directory entry. Return a file handle if there
 40287                                  ;	was no previous directory entry, and fail if a directory entry with
 40288                                  ;	the same name existed previously.
 40289                                  ;
 40290                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 40291                                  ;		CX contains default file attributes
 40292                                  ;   Outputs:	Carry Clear:
 40293                                  ;		    AX has file handle opened for read/write
 40294                                  ;		Carry Set:
 40295                                  ;		    AX has error code
 40296                                  ;   Registers modified: All
 40297                                  ;----------------------------------------------------------------------------
 40298                                  
 40299                                  _$CreateNewFile:
 40300 00006ED2 51                      	push	cx			; Save attributes on stack
 40301 00006ED3 B9[5B2A]                	MOV	CX,DOS_Create_New	; routine to call
 40302 00006ED6 E919FF                  	JMP	AccessSet		; use good ol' open
 40303                                  
 40304                                  ;**	BinToAscii - convert a number to a string.
 40305                                  ;----------------------------------------------------------------------------
 40306                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 40307                                  ;	This routine is used to generate temp file names so we don't spend
 40308                                  ;	the time and code needed for a true hex number, we just use
 40309                                  ;	A thorugh O.
 40310                                  ;
 40311                                  ;	ENTRY	(ax) = value
 40312                                  ;		(es:di) = destination
 40313                                  ;	EXIT	(es:di) updated by 4
 40314                                  ;	USES	cx, di, flags
 40315                                  ;----------------------------------------------------------------------------
 40316                                  
 40317                                  ; MSDOS 3.3
 40318                                  ;BinToAscii:
 40319                                  ;	mov     cx,4
 40320                                  ;bta5:
 40321                                  ;	push    cx
 40322                                  ;	mov     cl,4
 40323                                  ;	rol     ax,cl
 40324                                  ;	push    ax
 40325                                  ;	and     al,0Fh
 40326                                  ;	add     al,'0'
 40327                                  ;	cmp     al,'9'
 40328                                  ;	jbe     short bta6
 40329                                  ;	add     al,7
 40330                                  ;bta6: 
 40331                                  ;	stosb
 40332                                  ;	pop     ax
 40333                                  ;	pop     cx
 40334                                  ;	loop    bta5
 40335                                  ;	retn
 40336                                  
 40337                                  ; MSDOS 6.0
 40338                                  BinToAscii:
 40339 00006ED9 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 40340                                  bta5:	
 40341 00006EDC D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 40342 00006EDE 50                      	push	ax			; preserve remainder of digits
 40343 00006EDF 240F                    	AND	AL,0Fh			; grab low nibble
 40344 00006EE1 0441                    	ADD	AL,'A'			; turn into ascii
 40345 00006EE3 AA                      	STOSB				; drop in the character
 40346 00006EE4 58                      	pop	ax			; (ax) = shifted number
 40347 00006EE5 FECD                    	dec	ch
 40348 00006EE7 75F3                    	jnz	short bta5		; process 4 digits
 40349 00006EE9 C3                      	retn
 40350                                  
 40351                                  ;Break	<$CreateTempFile - create a unique name>
 40352                                  ;----------------------------------------------------------------------------
 40353                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 40354                                  ;	Method used is to get the current time, convert to a name and attempt
 40355                                  ;	a create new. Repeat until create new succeeds.
 40356                                  ;
 40357                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 40358                                  ;		CX  contains default attributes
 40359                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 40360                                  ;		AX has handle
 40361                                  ;   Registers modified: all
 40362                                  ;----------------------------------------------------------------------------
 40363                                  
 40364                                  	; 09/07/2024
 40365                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40366                                  
 40367                                  _$CreateTempFile:
 40368                                  	;Enter
 40369 00006EEA 55                      	push	bp
 40370 00006EEB 89E5                    	mov	bp,sp
 40371                                  
 40372                                  	;LocalVar  EndPtr,DWORD
 40373                                  	;LocalVar  FilPtr,DWORD
 40374                                  	;LocalVar  Attr,WORD
 40375                                  
 40376 00006EED 83EC0A                  	sub	sp,10
 40377                                  
 40378                                  	;test	cx,0FFD8h
 40379 00006EF0 F7C1D8FF                	test	CX,~attr_changeable
 40380 00006EF4 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 40381                                  
 40382                                  ; We need this "hook" here to detect these cases (like user sets one both of
 40383                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 40384                                  ; below. The code loops on error_access_denied, but if one of the non
 40385                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 40386                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 40387                                  ; need to detect these cases before getting to the loop.
 40388                                  
 40389                                  	;mov	ax, 5
 40390 00006EF6 B80500                  	MOV	AX,error_access_denied
 40391 00006EF9 EB69                    	JMP	SHORT SETTMPERR
 40392                                  
 40393                                  OKatts:
 40394                                  	;MOV	attr,CX 		; save attribute
 40395 00006EFB 894EF6                  	mov     [bp-10],cx
 40396                                  	;MOV	FilPtrL,DX		; pointer to file
 40397 00006EFE 8956F8                  	mov	[bp-8],dx
 40398                                  	;MOV	FilPtrH,DS
 40399 00006F01 8C5EFA                  	mov	[bp-6],ds
 40400                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 40401 00006F04 8C5EFE                  	mov	[bp-2],ds
 40402 00006F07 1E                      	PUSH	DS
 40403 00006F08 07                      	POP	ES			; destination for nul search
 40404 00006F09 89D7                    	MOV	DI,DX
 40405 00006F0B 89F9                    	MOV	CX,DI
 40406 00006F0D F7D9                    	NEG	CX			; number of bytes remaining in segment
 40407                                  	; MSDOS 6.0
 40408 00006F0F 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 40409 00006F11 7501                    	JNZ	short okok		;AN000;MS. no
 40410                                  	;MOV	CX,-1			;AN000;MS.
 40411                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40412                                  	; 17/12/2022
 40413 00006F13 49                      	dec	cx  ; mov cx,-1
 40414                                  	;mov	cx,-1 ; 0FFFh
 40415                                  okok:					;AN000;
 40416 00006F14 31C0                    	XOR	AX,AX			;AN000;
 40417 00006F16 F2AE                    	REPNZ	SCASB			;AN000;
 40418                                  					;AN000;
 40419 00006F18 4F                      	DEC	DI			; point back to the null
 40420 00006F19 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 40421 00006F1D E8F6DF                  	call	PATHCHRCMP		; Is it a path separator?
 40422 00006F20 7403                    	JZ	short SETENDPTR		; Yes
 40423                                  STOREPTH:
 40424 00006F22 B05C                    	MOV	AL,'\'
 40425 00006F24 AA                      	STOSB				; Add a path separator (and INC DI)
 40426                                  SETENDPTR:
 40427                                  	;MOV	EndPtrL,DI		; pointer to the tail
 40428                                  	; 09/07/2024 (Retro DOS v4 BugFix - Erdogan Tan - Istanbul)
 40429                                  	; (Note: I find this Retro DOS v4 Kernel bug while searching the reason
 40430                                  	;  of the AutoCAD R12 running/startup problem. Now it is solved here.)
 40431                                  	;mov	[bp-4],dl ; (Retro DOS v4 !Bug!)
 40432 00006F25 897EFC                  	mov	[bp-4],di ; !Fix!
 40433                                  CreateLoop:
 40434 00006F28 16                      	push	ss			; let ReadTime see variables
 40435 00006F29 1F                      	pop	ds
 40436 00006F2A 55                      	push	bp
 40437 00006F2B E8E19B                  	call	READTIME		; go get time
 40438 00006F2E 5D                      	pop	bp
 40439                                  ;
 40440                                  ; Time is in CX:DX. Go drop it into the string.
 40441                                  ;
 40442                                  	;les	di,EndPtr		; point to the string
 40443 00006F2F C47EFC                  	les	di,[BP-4]
 40444 00006F32 89C8                    	mov	ax,cx
 40445 00006F34 E8A2FF                  	call	BinToAscii		; store upper word
 40446 00006F37 89D0                    	mov	ax,dx
 40447 00006F39 E89DFF                  	call	BinToAscii		; store lower word
 40448 00006F3C 30C0                    	xor	al,al
 40449 00006F3E AA                      	STOSB				; nul terminate
 40450                                  	;LDS	DX,FilPtr		; get name
 40451 00006F3F C556F8                  	lds	dx,[bp-8]
 40452                                  	;MOV	CX,Attr 		; get attr
 40453 00006F42 8B4EF6                  	mov	cx,[bp-10]
 40454 00006F45 55                      	push	bp
 40455 00006F46 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 40456 00006F49 5D                      	pop	bp
 40457 00006F4A 7319                    	JNC	short CreateDone	; failed, go try again
 40458                                  
 40459                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 40460                                  ; error and figure out what to do.
 40461                                  
 40462                                  	;; MSDOS 3.3			; M049 - start
 40463                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 40464                                  ;;	cmp	al,error_file_exists
 40465                                  ;;	jz	short CreateLoop	; file existed => try with new name
 40466                                  ;;	cmp	al,error_access_denied
 40467                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 40468                                  
 40469                                  	; MSDOS 6.0
 40470                                  	;cmp	al,50h
 40471 00006F4C 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 40472 00006F4E 74D8                    	JZ	short CreateLoop	; Y: try again
 40473                                  	;cmp	al,5
 40474 00006F50 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 40475 00006F52 7510                    	JNZ	short SETTMPERR		; N: Error out
 40476                                  					; Y: Check to see if we got this due
 40477                                  					;    to the network drive. Note that
 40478                                  					;    the redir will set the exterr
 40479                                  					;    to error_cannot_make if this is 
 40480                                  					;    so. 
 40481 00006F54 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 40482                                  					; See if it's REALLY an att mismatch
 40483 00006F5A 7408                    	je	short SETTMPERR		; no, network error, stop
 40484                                  ;M070
 40485                                  ; If the user failed on an I24, we do not want to try again
 40486                                  ;
 40487 00006F5C 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 40488                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 40489                                  
 40490                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 40491                                  	; 17/12/2022
 40492 00006F62 75C4                    	jne	short CreateLoop ; 10/06/2019 
 40493                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40494                                  	;jz	short SETTMPERR
 40495                                  	;jmp	short CreateLoop
 40496                                  
 40497                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 40498                                  					; M049 - end
 40499                                  SETTMPERR:
 40500 00006F64 F9                      	STC
 40501                                  CreateDone:
 40502                                  	;Leave
 40503 00006F65 89EC                    	mov	sp,bp
 40504 00006F67 5D                      	pop	bp
 40505 00006F68 7203                    	JC	short CreateFail
 40506 00006F6A E9C896                  	jmp	SYS_RET_OK		; success!
 40507                                  CreateFail:
 40508 00006F6D E9CE96                  	jmp	SYS_RET_ERR
 40509                                  
 40510                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 40511                                  ;   (CH) or to the value in CL if the current system call is through
 40512                                  ;   serverdoscall.
 40513                                  ;
 40514                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 40515                                  ;		fSharing == TRUE => set sattrib to CL
 40516                                  ;   Outputs:	none
 40517                                  ;   Registers changed:	CX
 40518                                  
 40519                                  SetAttrib:
 40520 00006F70 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 40521 00006F76 7502                    	jnz	short Set
 40522 00006F78 88E9                    	mov	cl,ch
 40523                                  Set:
 40524 00006F7A 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 40525 00006F7F C3                      	retn
 40526                                  
 40527                                  ;----------------------------------------------------------------------------
 40528                                  	; 16/03/2024 - Retro DOS v4.1
 40529                                  ext_inval2:
 40530                                  	;mov	al,1
 40531 00006F80 B001                    	mov	al,error_invalid_function
 40532                                  eo_err:
 40533                                  	;jmp	SYS_RET_ERR
 40534 00006F82 EBE9                    	jmp	short CreateFail
 40535                                  
 40536                                  ; 14/07/2018 - Retro DOS v3.0
 40537                                  ; MSDOS 6.0
 40538                                  
 40539                                  ; 29/04/2019 - Retro DOS v4.0
 40540                                  
 40541                                  ;Break	<Extended_Open- Extended open the file>
 40542                                  ;----------------------------------------------------------------------------
 40543                                  ; Input: AL= 0 reserved  AH=6CH
 40544                                  ;	 BX= mode
 40545                                  ;	 CL= create attribute  CH=search attribute (from server)
 40546                                  ;	 DX= flag
 40547                                  ;	 DS:SI = file name
 40548                                  ;	 ES:DI = parm list
 40549                                  ;			   DD  SET EA list (-1) null
 40550                                  ;			   DW  n  parameters
 40551                                  ;			   DB  type (TTTTTTLL)
 40552                                  ;			   DW  IOMODE
 40553                                  ; Function: Extended Open
 40554                                  ; Output: carry clear
 40555                                  ;		     AX= handle
 40556                                  ;		     CX=1 file opened
 40557                                  ;			2 file created/opened
 40558                                  ;			3 file replaced/opened
 40559                                  ;	  carry set: AX has error code
 40560                                  ;----------------------------------------------------------------------------
 40561                                  
 40562                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40563                                  _$Extended_Open:			  ;AN000;
 40564                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 40565 00006F84 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 40566 00006F89 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 40567                                  	; 17/12/2022
 40568 00006F90 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 40569                                  	;;test	dx,0FE00h
 40570                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0 ?
 40571 00006F93 75EB                    	JNZ	short ext_inval2	  ;AN000;EO. no
 40572 00006F95 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 40573 00006F97 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 40574 00006F9A 74E4                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 40575                                  	;and	dl,0Fh
 40576 00006F9C 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 40577 00006F9F 80FA02                  	CMP	DL,2			  ;AN000;EO, > 2
 40578 00006FA2 77DC                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40579                                  	;and	ah,0F0h
 40580 00006FA4 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 40581 00006FA7 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 40582 00006FAA 77D4                    	JA	short ext_inval2	  ;AN000;EO. yes, error
 40583                                  
 40584 00006FAC 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 40585 00006FB1 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 40586 00006FB6 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 40587 00006FBB 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 40588 00006FC0 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 40589 00006FC5 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 40590 00006FCA 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 40591 00006FCF 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 40592 00006FD4 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 40593 00006FD6 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 40594                                  ; 16/03/2024
 40595                                  %if 0
 40596                                  	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 40597                                  ext_inval2:				  ;AN000;;EO.
 40598                                  	;mov	al,1
 40599                                  	mov	al,error_invalid_function ;AN000;EO.. invalid function
 40600                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40601                                  eo_err:
 40602                                  	;jmp	SYS_RET_ERR
 40603                                  	jmp	short CreateFail
 40604                                  %endif
 40605                                  
 40606                                  ; 16/03/2024
 40607                                  %if 0
 40608                                  ext_inval_parm:				  ;AN000;EO..
 40609                                  	POP	CX			  ;AN000;EO..  pop up satck
 40610                                  	POP	SI			  ;AN000;EO..
 40611                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 40612                                  	;mov	al,13
 40613                                  	mov	al,error_invalid_data
 40614                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40615                                  	;;jmp	SYS_RET_ERR
 40616                                  	;jmp	short eo_err
 40617                                  	; 17/12/2022
 40618                                  	jmp	short CreateFail
 40619                                  %endif
 40620                                  
 40621                                  	; 17/12/2022	
 40622                                  ;error_return:				  ;AN000;EO.
 40623                                  ;	retn				  ;AN000;EO.. return with error
 40624                                  
 40625                                  goopen2:				  ;AN000;
 40626                                  	; 17/12/2022
 40627                                  	;test	bh,20h				 
 40628 00006FD8 F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 40629                                  	;;test	bx,2000h
 40630                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 40631 00006FDB 7406                    	JZ	short goopen		  ;AN000;EO.. no
 40632                                  	;or	byte [SS:EXTOPEN_ON],2
 40633 00006FDD 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 40634                                  goopen:					  ;AN000;
 40635                                  	;or	byte [SS:EXTOPEN_ON],1 
 40636 00006FE3 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 40637                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 40638                                  	; 18/12/2022
 40639 00006FE9 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 40640                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 40641 00006FEF 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 40642 00006FF5 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 40643 00006FF7 E8D8FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 40644 00006FFA 723F                    	JC	short error_return	  ;AN000;;EO. error
 40645                                  
 40646 00006FFC 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40647 00007002 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40648                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40649 00007004 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. created/opened;smr;SS Override
 40650 0000700B EB7F                    	JMP	short setXAttr ; 16/03/2024 ;AN000;;EO. set XAs
 40651                                  
 40652                                  	; 17/12/2022
 40653                                  ;ok_return2:
 40654                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 40655                                  
 40656                                  chknext:
 40657                                  	; 17/12/2022
 40658 0000700D 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 40659                                  	;;test	word [SS:EXTOPEN_FLAG],1
 40660                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 40661 00007013 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 40662 00007015 E8D6FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 40663 00007018 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 40664 0000701A 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 40665 00007020 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 40666 00007022 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. presume create/open;smr;SS Override
 40667 00007029 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 40668 0000702F 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 40669 00007031 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 40670 00007038 EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40671                                  error_return2:
 40672 0000703A F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 40673                                  error_return:	 ; 17/12/2022
 40674 0000703B C3                      	retn				  ;AN000;;EO. return with error
 40675                                  
 40676                                  	; 17/12/2022
 40677                                  ok_return:
 40678                                  ok_return2:
 40679 0000703C E9F695                  	jmp	SYS_RET_OK
 40680                                  
 40681                                  exist_open:				  ;AN000;
 40682                                  	;test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 40683                                  	;jz	short noserver		  ;AN000;;EO. no
 40684                                  	; 16/03/2024
 40685                                  	;;;
 40686 0000703F 36803E[7205]00          	cmp	byte [ss:FSHARING],0	; server doscall?
 40687 00007045 7402                    	jz	short noserver		; no
 40688                                  	;;;
 40689 00007047 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 40690                                  noserver:
 40691 00007049 E8D0FC                  	call	_$Open2			  ;AN000;;EO. do open
 40692 0000704C 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 40693 0000704E 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 40694 00007054 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 40695                                  local_extopen:
 40696                                  	;cmp	ax,2
 40697 00007056 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 40698 00007059 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 40699                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 40700                                  	; 17/12/2022
 40701 0000705B 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 40702                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 40703                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 40704                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 40705                                  	; 17/12/2022
 40706 00007061 7446                    	jz	short extexit ; 10/06/2019
 40707                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40708                                  	;jnz	short do_creat
 40709                                  	;jmp	short extexit
 40710                                  do_creat:
 40711 00007063 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 40712 00007068 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 40713 0000706D 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 40714 0000706F E87CFD                  	call	_$CREAT			  ;AN000;;EO. do create
 40715 00007072 7235                    	JC	short extexit 		  ;AN000;;EO. error
 40716                                  	;mov	word [SS:EXTOPEN_FLAG],2
 40717 00007074 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40718                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 40719 0000707B EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 40720                                  
 40721                                  ext_ok:
 40722 0000707D 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 40723 00007083 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 40724                                  	;mov	word [SS:EXTOPEN_FLAG],1
 40725 00007085 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 40726                                  setXAttr:
 40727                                  	; 29/04/2019
 40728 0000708C 50                      	push	ax
 40729 0000708D E8F593                  	call	Get_User_Stack		  ;AN000;;EO.
 40730 00007090 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 40731                                  	;mov	[si+4],ax
 40732 00007094 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 40733 00007097 58                      	pop	ax			  ;AN000;;EO.
 40734 00007098 8904                    	mov	[si],ax
 40735                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 40736                                  	; 17/12/2022
 40737 0000709A EBA0                    	jmp	short ok_return
 40738                                  ;ok_return:				  ;AN000;
 40739                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 40740                                  
 40741                                  ; 16/03/2024
 40742                                  %if 0
 40743                                  extexit2:				  ;AN000; ERROR RECOVERY
 40744                                  	POP	BX			  ;AN000;EO. close the handle
 40745                                  	PUSH	AX			  ;AN000;EO. save error code from set XA
 40746                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 40747                                  	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 40748                                  					  ;AN000;EO. from create;smr;SS Override
 40749                                  	JNZ	short justopen		  ;AN000;EO.
 40750                                  	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 40751                                  	LDS	DX,[SI]			  ;AN000;EO.
 40752                                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 40753                                  	JMP	SHORT reserror		  ;AN000;EO.
 40754                                  
 40755                                  justopen:				  ;AN000;
 40756                                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 40757                                  reserror:				  ;AN000;
 40758                                  	POP	AX			  ;AN000;EO. restore error code from set XA
 40759                                  
 40760                                  	JMP	SHORT extexit		  ;AN000;EO.
 40761                                  
 40762                                  ext_file_unfound:			  ;AN000;
 40763                                  	;mov	ax,2
 40764                                  	MOV	AX,error_file_not_found   ;AN000;EO.
 40765                                  	JMP	SHORT extexit		  ;AN000;EO.
 40766                                  ext_inval:				  ;AN000;
 40767                                  	;mov	ax,1
 40768                                  	MOV	AX,error_invalid_function ;AN000;EO.
 40769                                  
 40770                                  lockoperr:	; 17/12/2022
 40771                                  extexit:
 40772                                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 40773                                  
 40774                                  %endif
 40775                                  
 40776                                  ;============================================================================
 40777                                  ; LOCK.ASM, MSDOS 6.0, 1991
 40778                                  ;============================================================================
 40779                                  ; 14/07/2018 - Retro DOS v3.0
 40780                                  ; 22/05/2019 - Retro DOS v4.0
 40781                                  
 40782                                  ;BREAK <$LockOper - Lock Calls>
 40783                                  ;----------------------------------------------------------------------------
 40784                                  ;
 40785                                  ;   Assembler usage:
 40786                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 40787                                  ;	    MOV     CX, OffsetHigh
 40788                                  ;	    MOV     DX, OffsetLow
 40789                                  ;	    MOV     SI, LengthHigh
 40790                                  ;	    MOV     DI, LengthLow
 40791                                  ;	    MOV     AH, LockOper
 40792                                  ;	    MOV     AL, Request
 40793                                  ;	    INT     21h
 40794                                  ;
 40795                                  ;   Error returns:
 40796                                  ;	    AX = error_invalid_handle
 40797                                  ;	       = error_invalid_function
 40798                                  ;	       = error_lock_violation
 40799                                  ;
 40800                                  ;   Assembler usage:
 40801                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 40802                                  ;
 40803                                  ;				    0? lock all
 40804                                  ;				    8? lock write
 40805                                  ;				    ?2 lock multiple
 40806                                  ;				    ?3 unlock multiple
 40807                                  ;				    ?4 lock/read
 40808                                  ;				    ?5 write/unlock
 40809                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 40810                                  ;	    MOV     BX, Handle
 40811                                  ;	    MOV     CX, count or size
 40812                                  ;	    LDS     DX, buffer
 40813                                  ;	    INT     21h
 40814                                  ;
 40815                                  ;   Error returns:
 40816                                  ;	    AX = error_invalid_handle
 40817                                  ;	       = error_invalid_function
 40818                                  ;	       = error_lock_violation
 40819                                  ;
 40820                                  ;----------------------------------------------------------------------------
 40821                                  
 40822                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40823                                  
 40824                                  	; 17/03/2024
 40825                                  	; 16/03/2024 - Retro DOS v4.1
 40826                                  _$LockOper:
 40827 0000709C 3C01                    	CMP	AL,1
 40828 0000709E 770C                    	JA	short lock_bad_func
 40829                                  
 40830 000070A0 57                      	PUSH	DI			       ; Save LengthLow
 40831 000070A1 E825F4                  	call	SFFromHandle		       ; ES:DI -> SFT
 40832 000070A4 731E                    	JNC	short lock_do 		       ; have valid handle
 40833 000070A6 5F                      	POP	DI			       ; Clean stack
 40834                                  	;mov	al,6
 40835 000070A7 B006                    	mov	al,error_invalid_handle
 40836                                  
 40837                                  	; 16/03/2024
 40838                                  extexit:
 40839                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40840                                  lockoperr:
 40841 000070A9 E99295                  	jmp	SYS_RET_ERR
 40842                                  	; 17/12/2022
 40843                                  	;jmp	short lockoperr ; jmp SYS_RET_ERR
 40844                                  
 40845                                  lock_bad_func:
 40846                                  	;mov	byte [ss:EXTERR_LOCUS],1
 40847 000070AC 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 40848                                  	;mov	al,1
 40849 000070B2 B001                    	mov	al,error_invalid_function
 40850                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40851                                  lockoperrj:
 40852                                  	;jmp	SYS_RET_ERR
 40853 000070B4 EBF3                    	jmp	short lockoperr
 40854                                  
 40855                                  	; 22/05/2019 - Retro DOS v4.0
 40856                                  
 40857                                  	; MSDOS 6.0 
 40858                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 40859                                  ; Dead code deleted, MD, 23 Mar 90
 40860                                  
 40861                                  ;lock_do:
 40862                                  ;	; MSDOS 3.3
 40863                                  ;	or	al,al
 40864                                  ;	pop	ax
 40865                                  ;	jz	short DOS_Lock
 40866                                  ;DOS_Unlock:
 40867                                  ;	;test	word [es:di+5],8000h
 40868                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40869                                  ;	JZ	short LOCAL_UNLOCK
 40870                                  ;	push    ax
 40871                                  ;	mov     ax,110Bh
 40872                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40873                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40874                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40875                                  ;			; SFT DPB field -> DPB of drive containing file
 40876                                  ;			; Return: CF set error
 40877                                  ;	pop     bx
 40878                                  ;	jmp     short ValChk
 40879                                  ;
 40880                                  ;LOCAL_UNLOCK:
 40881                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40882                                  ;ValChk:
 40883                                  ;	JNC	short Lock_OK
 40884                                  ;lockerror:
 40885                                  ;	jmp	SYS_RET_ERR
 40886                                  ;Lock_OK:
 40887                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40888                                  ;	jmp	SYS_RET_OK
 40889                                  ;DOS_Lock:
 40890                                  ;	;test	word [es:di+5],8000h
 40891                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40892                                  ;	JZ	short LOCAL_LOCK
 40893                                  ;	;CallInstall NET_XLock,MultNET,10
 40894                                  ;	mov     ax, 110Ah
 40895                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40896                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40897                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 40898                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40899                                  ;			; Return: CF set error
 40900                                  ;	JMP	short ValChk
 40901                                  ;
 40902                                  ;LOCAL_LOCK:
 40903                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 40904                                  ;	JMP	short ValChk
 40905                                  
 40906                                  ; 17/12/2022
 40907                                  LOCAL_UNLOCK:
 40908                                  	; MSDOS 3.3
 40909                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40910                                  	; MSDOS 6.0
 40911 000070B6 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 40912                                  ValChk:
 40913 000070BA 7302                    	JNC	short Lock_OK
 40914                                  lockerror:
 40915                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40916                                  	;;jmp	SYS_RET_ERR
 40917                                  	;jmp	short lockoperrj
 40918                                  	; 17/12/2022
 40919 000070BC EBEB                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 40920                                  Lock_OK:
 40921                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 40922                                  	; 10/06/2019
 40923 000070BE A1[0C06]                	mov	ax,[TEMP_VAR]
 40924 000070C1 E97195                  	jmp	SYS_RET_OK
 40925                                  
 40926                                  	; 22/05/2019
 40927                                  lock_do:
 40928                                  	; MSDOS 6.0
 40929 000070C4 89C3                    	MOV	BX,AX				; save AX
 40930 000070C6 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 40931                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40932                                  	;;mov	[bp+0],dx
 40933                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 40934                                  	; 15/12/2022
 40935 000070C9 895600                  	mov	[bp],dx
 40936                                  	;mov	[bp+2],cx
 40937 000070CC 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 40938                                  
 40939                                  	; 16/03/2024
 40940                                  	;POP	CX				; get low length
 40941                                  	;;mov	[bp+4],cx
 40942                                  	;MOV	[BP+LockBuf.Lock_length],CX	; set low length
 40943 000070CF 8F4604                  	pop	word [bp+LockBuf.Lock_length]
 40944                                  
 40945                                  	;mov	[bp+6],si
 40946 000070D2 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 40947 000070D5 B90100                  	MOV	CX,1				; one range
 40948                                  
 40949                                  ;	PUSH	CS				;
 40950                                  ;	POP	DS				; DS:DX points to
 40951                                  
 40952 000070D8 16                      	push	ss
 40953 000070D9 1F                      	pop	ds
 40954                                  
 40955 000070DA 89EA                    	MOV	DX,BP				; Lock_Buffer
 40956                                  	;test	al,1
 40957 000070DC A801                    	TEST	AL,UNLOCK_ALL			; function 1
 40958                                  	;JNZ	short DOS_Unlock		; yes
 40959                                  	;JMP	short DOS_Lock			; function 0
 40960                                  	; 17/12/2022
 40961                                  	; 10/06/2019
 40962 000070DE 740E                    	jz	short DOS_Lock
 40963                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 40964                                  	;JNZ	short DOS_Unlock
 40965                                  	;JMP	short DOS_Lock
 40966                                  
 40967                                  DOS_Unlock:
 40968                                  	;;test	word [es:di+5],8000h
 40969                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 40970 000070E0 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 40971 000070E5 74CF                    	JZ	short LOCAL_UNLOCK
 40972                                  
 40973                                  ; 17/03/2024
 40974                                  ;lock_unlock: ; 22/05/2019
 40975                                  
 40976                                  	;CallInstall Net_Xlock,MultNET,10
 40977                                  ;	
 40978                                  ;	; MSDOS 3.3
 40979                                  ;	;mov     ax,110Bh
 40980                                  ;	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 40981                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40982                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 40983                                  ;			; SFT DPB field -> DPB of drive containing file
 40984                                  ;			; Return: CF set error
 40985                                  
 40986                                  ; 17/03/2024 - Retro DOS v4.1
 40987                                  lock_unlock:
 40988                                  
 40989                                  	; MSDOS 6.0
 40990 000070E7 B80A11                  	mov     ax,110Ah
 40991 000070EA CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 40992                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 40993                                  			; STACK: WORD low word of size, ES:DI -> SFT
 40994                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 40995                                  			; Return: CF set error
 40996                                  
 40997 000070EC EBCC                    	JMP	SHORT ValChk
 40998                                  
 40999                                  ; 17/12/2022
 41000                                  %if 0
 41001                                  LOCAL_UNLOCK:
 41002                                  	; MSDOS 3.3
 41003                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 41004                                  	; MSDOS 6.0
 41005                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 41006                                  ValChk:
 41007                                  	JNC	short Lock_OK
 41008                                  lockerror:
 41009                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41010                                  	;jmp	SYS_RET_ERR
 41011                                  	jmp	short lockoperrj
 41012                                  Lock_OK:
 41013                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 41014                                  	; 10/06/2019
 41015                                  	mov	ax,[TEMP_VAR]
 41016                                  	jmp	SYS_RET_OK
 41017                                  %endif
 41018                                  
 41019                                  DOS_Lock:
 41020                                  	;;test	word [es:di+5],8000h
 41021                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 41022 000070EE 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 41023                                  	;JZ	short LOCAL_LOCK
 41024                                  	; 17/03/2024
 41025 000070F3 75F2                    	jnz	short lock_unlock
 41026                                  
 41027                                  ; 17/03/2024
 41028                                  %if 0
 41029                                  	;CallInstall NET_XLock,MultNET,10
 41030                                  
 41031                                  	mov     ax,110Ah
 41032                                  	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 41033                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 41034                                  			; STACK: WORD low word of size, ES:DI -> SFT
 41035                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 41036                                  			; Return: CF set error
 41037                                  
 41038                                  	JMP	short ValChk
 41039                                  %endif
 41040                                  
 41041                                  LOCAL_LOCK:
 41042                                  	; MSDOS 3.3
 41043                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 41044                                  	; MSDOS 6.0
 41045 000070F5 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 41046                                  
 41047 000070F9 EBBF                    	JMP	short ValChk
 41048                                  
 41049                                  ; 14/07/2018 - Retro DOS v3.0
 41050                                  ; LOCK_CHECK
 41051                                  ;MSDOS 6.0 (& MSDOS 3.3)
 41052                                  
 41053                                  ;----------------------------------------------------------------------------
 41054                                  ; Inputs:
 41055                                  ;	Outputs of SETUP
 41056                                  ;	[USER_ID] Set
 41057                                  ;	[PROC_ID] Set
 41058                                  ; Function:
 41059                                  ;	Check for lock violations on local I/O
 41060                                  ;	Retries are attempted with sleeps in between
 41061                                  ; Outputs:
 41062                                  ;    Carry clear
 41063                                  ;	Operation is OK
 41064                                  ;    Carry set
 41065                                  ;	A lock violation detected
 41066                                  ; Outputs of SETUP preserved
 41067                                  ;----------------------------------------------------------------------------
 41068                                  
 41069                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41070                                  	; 22/05/2019 - Retro DOS v4.0
 41071                                  LOCK_CHECK:
 41072 000070FB 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 41073                                  LockRetry:
 41074 000070FF 53                      	push	bx		; save regs
 41075 00007100 50                      	push	ax ; MSDOS 6.0
 41076                                  
 41077                                  	;MSDOS 3.3
 41078                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 41079                                  	;MSDOS 6.0
 41080 00007101 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 41081                                  
 41082 00007105 58                      	pop	ax ; MSDOS 6.0
 41083 00007106 5B                      	pop	bx		; restrore regs
 41084 00007107 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 41085                                  LockN:
 41086 00007109 E8DDA0                  	call	Idle		; wait a while
 41087 0000710C 4B                      	DEC	BX		; remember a retry
 41088 0000710D 75F0                    	JNZ	short LockRetry	; more retries left...
 41089 0000710F F9                      	STC
 41090                                  lc_ret_label:
 41091 00007110 C3                      	retn
 41092                                  
 41093                                  ; 14/07/2018 - Retro DOS v3.0
 41094                                  ; LOCK_VIOLATION
 41095                                  ;MSDOS 6.0 (& MSDOS 3.3)
 41096                                  
 41097                                  ;----------------------------------------------------------------------------
 41098                                  ; Inputs:
 41099                                  ;	[THISDPB] set
 41100                                  ;	[READOP] indicates whether error on read or write
 41101                                  ; Function:
 41102                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 41103                                  ; Outputs:
 41104                                  ;	Carry set if user says FAIL, causes error_lock_violation
 41105                                  ;	Carry clear if user wants a retry
 41106                                  ;
 41107                                  ; DS, ES, DI, CX preserved, others destroyed
 41108                                  ;----------------------------------------------------------------------------
 41109                                  
 41110                                  LOCK_VIOLATION:
 41111 00007111 1E                      	PUSH	DS
 41112 00007112 06                      	PUSH	ES
 41113 00007113 57                      	PUSH	DI
 41114 00007114 51                      	PUSH	CX
 41115                                  	;mov	ax,21h
 41116 00007115 B82100                  	MOV	AX,error_lock_violation
 41117                                  	;mov	byte [ALLOWED],18h
 41118 00007118 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41119 0000711D C42E[8A05]              	LES	BP,[THISDPB]
 41120 00007121 BF0100                  	MOV	DI,1		; Fake some registers
 41121 00007124 89F9                    	MOV	CX,DI
 41122                                  	;mov	dx,[es:bp+11]
 41123 00007126 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 41124 0000712A E84EE0                  	call	HARDERR
 41125 0000712D 59                      	POP	CX
 41126                                  share_v_@:	; 01/07/2024
 41127 0000712E 5F                      	POP	DI
 41128 0000712F 07                      	POP	ES
 41129 00007130 1F                      	POP	DS
 41130 00007131 3C01                    	CMP	AL,1
 41131 00007133 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 41132 00007135 F9                      	STC
 41133 00007136 C3                      	retn
 41134                                  
 41135                                  ; 14/07/2018 - Retro DOS v3.0
 41136                                  
 41137                                  ;----------------------------------------------------------------------------
 41138                                  
 41139                                  ;	do a retz to return error
 41140                                  
 41141                                  	; 22/05/2019 - Retro DOS v4.0
 41142                                  CheckShare:
 41143                                  	; MSDOS 3.3
 41144                                  	;cmp	byte [cs:fShare],0
 41145                                  	;retn
 41146                                  
 41147                                  	; MSDOS 6.0
 41148 00007137 1E                      	push	ds			;smr;
 41149                                  	;getdseg <ds>			; ds -> dosdata
 41150 00007138 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 41151 0000713D 803E[0303]00            	cmp	byte [fShare],0
 41152 00007142 1F                      	pop	ds			;smr;
 41153 00007143 C3                      	retn
 41154                                  	
 41155                                  ;============================================================================
 41156                                  ; SHARE.ASM, MSDOS 6.0, 1991
 41157                                  ;============================================================================
 41158                                  ; 14/07/2018 - Retro DOS v3.0
 41159                                  ; 22/05/2019 - Retro DOS v4.0
 41160                                  
 41161                                  ; SHARE_CHECK
 41162                                  ;----------------------------------------------------------------------------
 41163                                  ; Inputs:
 41164                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 41165                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 41166                                  ;       [WFP_START] has full path of name
 41167                                  ;       [USER_ID] Set
 41168                                  ;       [PROC_ID] Set
 41169                                  ; Function:
 41170                                  ;       Check for sharing violations on local file/device access
 41171                                  ; Outputs:
 41172                                  ;    Carry clear
 41173                                  ;       Sharing approved
 41174                                  ;    Carry set
 41175                                  ;       A sharing violation detected
 41176                                  ;           AX is error code
 41177                                  ; USES    ALL but DS
 41178                                  ;----------------------------------------------------------------------------
 41179                                  
 41180                                  	; 22/05/2019 - Retro DOS v4.0
 41181                                  SHARE_CHECK:
 41182                                  	; 26/07/2019
 41183 00007144 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 41184                                  shchk_retn:
 41185 00007148 C3                      	retn
 41186                                  
 41187                                  ; SHARE_VIOLATION
 41188                                  ;----------------------------------------------------------------------------
 41189                                  ; Inputs:
 41190                                  ;       [THISDPB] Set
 41191                                  ;       AX has error code
 41192                                  ; Function:
 41193                                  ;       Handle Sharing errors
 41194                                  ; Outputs:
 41195                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 41196                                  ;       Carry clear if user wants a retry
 41197                                  ;
 41198                                  ; DS, ES, DI preserved, others destroyed
 41199                                  ;----------------------------------------------------------------------------
 41200                                  
 41201                                  SHARE_VIOLATION:
 41202 00007149 1E                      	PUSH    DS
 41203 0000714A 06                      	PUSH	ES
 41204 0000714B 57                      	PUSH    DI
 41205 0000714C C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 41206                                  	;mov	byte [ALLOWED],18h
 41207 00007151 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 41208 00007156 C42E[8A05]              	LES     BP,[THISDPB]
 41209 0000715A BF0100                  	MOV     DI,1			; Fake some registers
 41210 0000715D 89F9                    	MOV     CX,DI
 41211                                  	;mov	dx,[es:bp+17]
 41212 0000715F 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 41213 00007163 E815E0                  	call	HARDERR
 41214                                  ; 01/07/2024
 41215                                  %if 0
 41216                                  	POP	DI
 41217                                  	POP	ES
 41218                                  	POP	DS
 41219                                  	CMP	AL,1
 41220                                  	jz	short shchk_retn	; 1 = retry, carry clear
 41221                                  	STC
 41222                                  	retn
 41223                                  %else
 41224 00007166 EBC6                    	jmp	short share_v_@
 41225                                  %endif
 41226                                  
 41227                                  ;----------------------------------------------------------------------------
 41228                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 41229                                  ;       NOT perform a close, it merely asserts that the sharing information
 41230                                  ;       for the SFT/UID/PID may be safely released.
 41231                                  ;
 41232                                  ;   Inputs:     ES:DI points to an SFT
 41233                                  ;   Outputs:    None
 41234                                  ;   Registers modified: all except DS,ES,DI
 41235                                  ;----------------------------------------------------------------------------
 41236                                  
 41237                                  ShareEnd:
 41238                                  	; 26/07/2019
 41239 00007168 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 41240 0000716C C3                      	retn
 41241                                  
 41242                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 41243                                  ;----------------------------------------------------------------------------
 41244                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 41245                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 41246                                  ;
 41247                                  ;   Inputs:     ThisSFT points to the SFT
 41248                                  ;               WFP_Start points to the WFP
 41249                                  ;   Outputs:    Carry clear => successful entry
 41250                                  ;               Carry set => failed system call
 41251                                  ;   Registers modified: all
 41252                                  ;----------------------------------------------------------------------------
 41253                                  
 41254                                  ShareEnter:
 41255 0000716D 51                      	push	cx
 41256                                  retry:
 41257 0000716E 8B0E[1A00]              	mov     cx,[RetryCount]
 41258                                  attempt:
 41259 00007172 C43E[9E05]              	les     di,[THISSFT]		; grab sft
 41260 00007176 31C0                    	XOR     AX,AX
 41261                                   	;mov	[es:di+51],ax
 41262 00007178 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 41263 0000717C 51                      	push	cx
 41264 0000717D E8C4FF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 41265 00007180 59                      	pop	cx
 41266 00007181 730A                    	jnc	short done		; success, let the user see this
 41267 00007183 E863A0                  	call	Idle                    ; wait a while
 41268 00007186 E2EA                    	loop    attempt                 ; go back for another attempt
 41269 00007188 E8BEFF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 41270 0000718B 73E1                    	jnc	short retry		; user said to retry, go do it
 41271                                  done:
 41272 0000718D 59                      	pop	cx
 41273 0000718E C3                      	retn
 41274                                  
 41275                                  ;============================================================================
 41276                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 41277                                  ;============================================================================
 41278                                  ; 29/04/2019 - Retro DOS 4.0
 41279                                  
 41280                                  ;** EXEPATCH.ASM 
 41281                                  ;----------------------------------------------------------------------------
 41282                                  ;	Contains the foll:
 41283                                  ;
 41284                                  ;		- code to find and overlay buggy unpack code
 41285                                  ;		- new code to be overlayed on buggy unpack code 
 41286                                  ;		- old code sequence to identify buggy unpack code
 41287                                  ;
 41288                                  ;	Revision history:
 41289                                  ;
 41290                                  ;		Created: 5/14/90
 41291                                  ;----------------------------------------------------------------------------
 41292                                  
 41293                                  ;----------------------------------------------------------------------------
 41294                                  ;
 41295                                  ; M020 : Fix for rational bug - for details see routine header
 41296                                  ; M028 : 4b04 implementation
 41297                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 41298                                  ; M032 : set turnoff bit only if DOS in HMA.
 41299                                  ; M033 : if IP < 2 then not exepacked.
 41300                                  ; M046 : support for a 4th version of exepacked files.
 41301                                  ; M068 : support for copy protected apps.
 41302                                  ; M071 : use A20OFF_COUNT of 10.
 41303                                  ;
 41304                                  ;----------------------------------------------------------------------------
 41305                                  
 41306                                  PATCH1_COM_OFFSET	EQU	06CH
 41307                                  PATCH1_OFFSET		EQU	028H
 41308                                  PATCH1_CHKSUM		EQU	0EF4EH
 41309                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 41310                                  
 41311                                  PATCH2_COM_OFFSET	EQU	076H
 41312                                  PATCH2_OFFSET		EQU	032H
 41313                                  
 41314                                  	; The strings that start at offset 076h have two possible 
 41315                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 41316                                  
 41317                                  PATCH2_CHKSUM		EQU	78B2H
 41318                                  CHKSUM2_LEN		EQU	119H/2
 41319                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 41320                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 41321                                  
 41322                                  PATCH3_COM_OFFSET	EQU	074H
 41323                                  PATCH3_OFFSET		EQU	032H
 41324                                  PATCH3_CHKSUM		EQU	4EDEH
 41325                                  CHKSUM3_LEN		EQU	117H/2
 41326                                  
 41327                                  ;**	Data structure passed for ExecReady call
 41328                                  ;
 41329                                  ;struc ERStruc
 41330                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 41331                                  ; .ER_Flags:	resw	1
 41332                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 41333                                  ; .ER_PSP:	resw	1	; PSP of the program
 41334                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 41335                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 41336                                  ; .size:
 41337                                  ;endstruc
 41338                                  
 41339                                  ;DOSCODE SEGMENT
 41340                                  
 41341                                  	; 22/05/2019 - Retro DOS v4.0
 41342                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 41343                                  
 41344                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41345                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 41346                                  
 41347                                  ; M028 - BEGIN
 41348                                  
 41349                                  ;--------------------------------------------------------------------------
 41350                                  ;
 41351                                  ;	Procedure Name		: ExecReady
 41352                                  ;
 41353                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 41354                                  ;
 41355                                  ;--------------------------------------------------------------------------
 41356                                  
 41357                                  ExecReady:
 41358 0000718F 89D6                    	mov	si,dx			; move the pointer into a friendly one
 41359                                  	;;test	word [si+2],1
 41360                                  	; 17/12/2022
 41361 00007191 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41362                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 41363 00007195 7413                    	jz	short er_setver		; only setver for .COM files
 41364                                  
 41365                                  	;mov	ax,[si+8]
 41366 00007197 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 41367 0000719A 83C010                  	add	ax,10h
 41368 0000719D 8EC0                    	mov	es,ax
 41369                                  
 41370                                  	;mov	cx,[si+10]
 41371 0000719F 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 41372                                  	;mov	ax,[si+12]	; 11/04/2024
 41373 000071A2 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 41374                                  
 41375                                  	;call	[ss:FixExePatch]
 41376 000071A5 36FF16[1212]            	call	word [ss:FixExePatch] ; 28/12/2022
 41377                                  	
 41378                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41379                                  	;call	[ss:Rational386PatchPtr]
 41380                                  
 41381                                  er_setver:
 41382                                  	;;test	word [si+2],2		; Q: is this an overlay
 41383                                  	; 17/12/2022
 41384 000071AA F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 41385                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 41386 000071AE 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 41387                                  					; N: set up lie version first
 41388 000071B0 1E                      	push	ds
 41389 000071B1 56                      	push	si
 41390                                  	;lds	si,[si+4]
 41391 000071B2 C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 41392 000071B5 E8E7ED                  	call	Scan_Execname1
 41393 000071B8 E8F8ED                  	call	Scan_Special_Entries
 41394 000071BB 5E                      	pop	si
 41395 000071BC 1F                      	pop	ds
 41396                                  	;mov	es,[si+8]
 41397 000071BD 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 41398 000071C0 36A1[BD0E]              	mov	ax,[ss:SPECIAL_VERSION]
 41399 000071C4 26A34000                	mov	[es:PDB.Version],ax
 41400                                  
 41401                                  er_chkdoshi:
 41402 000071C8 36803E[1112]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 41403 000071CE 741F                    	je	short er_done		; M032: N: done
 41404                                  
 41405                                  					; M068 - Start
 41406                                  	;mov	ax,[si+8]
 41407 000071D0 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 41408                                  
 41409                                  	;or	byte [ss:DOS_FLAG],4
 41410 000071D3 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 41411                                  					; ah = 25 & ah= 49. See dossym.inc 
 41412                                  					; under TAG M003 & M009 for 
 41413                                  					; explanation
 41414                                  	;;test	word [si+2],1
 41415                                  	; 17/12/2022
 41416 000071D9 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 41417                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 41418 000071DD 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 41419                                  					;    a20off_psp and ret
 41420 000071DF 1E                         	push	ds
 41421 000071E0 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 41422 000071E2 E87D02                  	call	IsCopyProt		; check if copy protected
 41423 000071E5 1F                      	pop	ds
 41424                                  
 41425                                  er_setA20:
 41426                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 41427                                  	; is non-zero at this point it indicates that the A20 is to be 
 41428                                  	; turned off for that many int 21 calls made by the app. In 
 41429                                  	; addition the A20 has to be turned off when we exit from this 
 41430                                  	; call. Hence the inc.
 41431                                  
 41432 000071E6 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 41433 000071EB 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 41434                                  					; turned OFF.
 41435                                  er_done:				; M068 - End
 41436 000071EF 31C0                    	xor	ax,ax
 41437 000071F1 C3                      	retn
 41438                                  
 41439                                  ; M028 - END
 41440                                  
 41441                                  ; 23/03/2024
 41442                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41443                                  %if 0
 41444                                  
 41445                                  ;----------------------------------------------------------------------------
 41446                                  ;
 41447                                  ; procedure : Rational386Patch
 41448                                  ;
 41449                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 41450                                  ; 386 registers (usually just the high word of 32 bit registers) during
 41451                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 41452                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 41453                                  ;
 41454                                  ; This routine applies patches to the Rational DOS Extender to work around
 41455                                  ; most of the register trashing bugs.
 41456                                  ;
 41457                                  ; Note that there are additional register trashing bugs not fixed by these
 41458                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 41459                                  ; may be modified on interrupts.
 41460                                  ;
 41461                                  ; There are two different Rational DOS Extender patchs in this module.
 41462                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 41463                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 41464                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 41465                                  ; or not.
 41466                                  ;
 41467                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 41468                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 41469                                  ; running in the HMA.
 41470                                  ;
 41471                                  ; This patch detection and replacement is based on an example supplied by
 41472                                  ; Ben Williams at Rational.
 41473                                  ;
 41474                                  ;----------------------------------------------------------------------------
 41475                                  
 41476                                  ; 22/05/2019 - Retro DOS v4.0
 41477                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 41478                                  
 41479                                  ;----------------------------------------------------------------------------
 41480                                  ;
 41481                                  ; INPUT : ES = segment where program got loaded
 41482                                  ;
 41483                                  ;----------------------------------------------------------------------------
 41484                                  
 41485                                  rpFind1:
 41486                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 41487                                  
 41488                                  rpFind1Len equ	$ - rpFind1
 41489                                  
 41490                                  ;	cli
 41491                                  ;	in	al, 21h
 41492                                  ;	pusha
 41493                                  ;	xor	ax, ax
 41494                                  ;	out	43h, al
 41495                                  ;	mov	dx, ...
 41496                                  
 41497                                  rpFind1a:
 41498                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 41499                                  
 41500                                  rpFind1aLen equ	$ - rpFind1a
 41501                                  
 41502                                  ;	mov	al, 0Eh
 41503                                  ;	out	37h, al
 41504                                  ;	xor	ax, ax
 41505                                  ;	out	0F2h, al
 41506                                  
 41507                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41508                                  
 41509                                  rpFind2:
 41510                                  	db	0Fh, 20h, 0C0h
 41511                                  
 41512                                  rpFind2Len equ	$ - rpFind2
 41513                                  
 41514                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 41515                                  
 41516                                  rpFind3:
 41517                                  	db	0Fh, 22h, 0C0h, 0EAh
 41518                                  
 41519                                  rpFind3Len equ	$ - rpFind3
 41520                                  
 41521                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 41522                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 41523                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 41524                                  
 41525                                  ; note, there is no rpRepl1 string
 41526                                  
 41527                                  rpRepl2:
 41528                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 41529                                  
 41530                                  rpRepl2Len equ	$ - rpRepl2
 41531                                  
 41532                                  ;	push	eax
 41533                                  ;	push	cx
 41534                                  ;	mov	eax, cr0
 41535                                  
 41536                                  rpRepl3:
 41537                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 41538                                  
 41539                                  rpRepl3Len equ	$ - rpRepl3
 41540                                  
 41541                                  ;	mov	ss, bx
 41542                                  ;	pop	cx
 41543                                  ;	pop	eax
 41544                                  
 41545                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 41546                                  
 41547                                  rpFind4:
 41548                                  	db	93h, 58h, 8Bh, 0CCh
 41549                                  
 41550                                  rpFind4Len equ	$ - rpFind4
 41551                                  
 41552                                  ;	xchg	bx, ax
 41553                                  ;	pop	ax
 41554                                  ;	mov	cx, sp
 41555                                  
 41556                                  rpFind5:
 41557                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 41558                                  
 41559                                  rpFind5Len equ	$ - rpFind5
 41560                                  
 41561                                  ;	mov	ax, DE0Ch
 41562                                  ;	int	67h
 41563                                  ;	mov	sp, cx
 41564                                  ;	jmp	bx
 41565                                  
 41566                                  rpRepl4:
 41567                                  	db	93h, 58h, 8Bh, 0CCh
 41568                                  	db	02Eh, 066h, 0A3h
 41569                                  
 41570                                  rpRepl4o1Len equ $ - rpRepl4
 41571                                  
 41572                                  	db	00h, 00h
 41573                                  	db	02Eh, 066h, 89h, 36h
 41574                                  
 41575                                  rpRepl4o2Len equ $ - rpRepl4
 41576                                  
 41577                                  	db	00h, 00h
 41578                                  
 41579                                  rpRepl4Len equ	$ - rpRepl4
 41580                                  
 41581                                  ;	xchg	bx, ax
 41582                                  ;	pop	ax
 41583                                  ;	mov	cx, sp
 41584                                  ;	mov	dword ptr cs:[xxxx], eax
 41585                                  ;	mov	dword ptr cs:[xxxx], esi
 41586                                  
 41587                                  rpRepl5:
 41588                                  	db	8Bh, 0E1h
 41589                                  	db	2Eh, 66h, 0A1h
 41590                                  
 41591                                  rpRepl5o1Len equ $ - rpRepl5
 41592                                  
 41593                                  	db	00h, 00h
 41594                                  	db	2Eh, 66h, 8Bh, 36h
 41595                                  
 41596                                  rpRepl5o2Len equ $ - rpRepl5
 41597                                  
 41598                                  	db	00h, 00h
 41599                                  	db	0FFh, 0E3h
 41600                                  
 41601                                  rpRepl5Len equ	$ - rpRepl5
 41602                                  
 41603                                  ;	mov	sp, cx
 41604                                  ;	mov	eax, dword ptr cs:[xxxx]
 41605                                  ;	mov	esi, dword ptr cs:[xxxx]
 41606                                  ;	jmp	bx
 41607                                  
 41608                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 41609                                  
 41610                                  rpFind6:
 41611                                  	db	0FAh, 52h, 51h
 41612                                  
 41613                                  rpFind6Len equ	$ - rpFind6
 41614                                  
 41615                                  ;	cli
 41616                                  ;	push	dx
 41617                                  ;	push	cx
 41618                                  
 41619                                  rpFind7a:
 41620                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 41621                                  
 41622                                  rpFind7aLen equ	$ - rpFind7a
 41623                                  
 41624                                  ;	mov	ax, 0DE0Ch
 41625                                  ;	call	fword ptr es:[xxxx]
 41626                                  
 41627                                  rpFind7b:
 41628                                  	db	59h, 5Ah, 5Bh
 41629                                  
 41630                                  rpFind7bLen equ	$ - rpFind7b
 41631                                  
 41632                                  ;	pop	cx
 41633                                  ;	pop	dx
 41634                                  ;	pop	bx
 41635                                  
 41636                                  rpRepl6:
 41637                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 41638                                  
 41639                                  rpRepl6Len equ	$ - rpRepl6
 41640                                  
 41641                                  ;	cli
 41642                                  ;	push	eax
 41643                                  ;	push	ebx
 41644                                  ;	push	ecx
 41645                                  ;	push	edx
 41646                                  
 41647                                  rpRepl7:
 41648                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 41649                                  
 41650                                  rpRepl7Len equ	$ - rpRepl7
 41651                                  
 41652                                  ;	pop	edx
 41653                                  ;	pop	ecx
 41654                                  ;	pop	ebx
 41655                                  ;	pop	eax
 41656                                  ;	pop	bx
 41657                                  
 41658                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 41659                                  
 41660                                  rpFind8:
 41661                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 41662                                  
 41663                                  rpFind8Len equ	$ - rpFind8
 41664                                  
 41665                                  ;	pusha
 41666                                  ;	push	es
 41667                                  ;	push	ds
 41668                                  ;	mov	ax, dgroup	;jump back to here from replace8
 41669                                  ;	mov	ds, ax
 41670                                  
 41671                                  rpFind9 :
 41672                                  	db	1Fh, 07h, 61h
 41673                                  
 41674                                  rpFind9Len equ	$ - rpFind9
 41675                                  
 41676                                  ;	pop	ds
 41677                                  ;	pop	es
 41678                                  ;	popa
 41679                                  
 41680                                  rpRepl8:
 41681                                   	db	66h, 60h, 06h, 1Eh
 41682                                  
 41683                                  rpRepl8Len equ	$ - rpRepl8
 41684                                  
 41685                                  ;	pushad
 41686                                  ;	push	es
 41687                                  ;	push	ds
 41688                                  
 41689                                  rpRepl9:
 41690                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 41691                                  
 41692                                  rpRepl9Len equ	$ - rpRepl9
 41693                                  
 41694                                  ;	pop	ds
 41695                                  ;	pop	es
 41696                                  ;	popad
 41697                                  ;	retn			;no need to jmp back to main-line
 41698                                  
 41699                                  ;----------------------------------------------------------------------------
 41700                                  
 41701                                  struc SearchPair
 41702                                   .sp_off1: resw 1	; offset of 1st search string
 41703                                   .sp_len1: resw 1	; length of 1st search string
 41704                                   .sp_off2: resw 1	; 2nd string
 41705                                   .sp_len2: resw 1	; 2nd string
 41706                                   .sp_diff: resw 1	; max difference between offsets
 41707                                   .size:
 41708                                  endstruc
 41709                                  
 41710                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 41711                                  
 41712                                  rpBug1Strs:
 41713                                  	dw	rpFind2
 41714                                  	dw	rpFind2Len ; 3
 41715                                  	dw	rpFind3
 41716                                  	dw	rpFind3Len ; 4
 41717                                  	dw	20h
 41718                                  
 41719                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 41720                                  
 41721                                  rpBug2Strs:
 41722                                  	dw	rpFind4
 41723                                  	dw	rpFind4Len ; 4
 41724                                  	dw	rpFind5
 41725                                  	dw	rpFind5Len ; 9
 41726                                  	dw	80h
 41727                                  
 41728                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 41729                                  
 41730                                  rpBug3Strs:
 41731                                  	dw	rpFind6
 41732                                  	dw	rpFind6Len ; 3
 41733                                  	dw	rpFind7a
 41734                                  	dw	rpFind7aLen ; 7
 41735                                  	dw	80h
 41736                                  
 41737                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 41738                                  
 41739                                  rpBug4Strs:
 41740                                  	dw	rpFind8
 41741                                  	dw	4
 41742                                  	dw	rpFind9
 41743                                  	dw	rpFind9Len ; 3
 41744                                  	dw	80h
 41745                                  
 41746                                  ;----------------------------------------------------------------------------
 41747                                  
 41748                                  struc StackVars
 41749                                   .sv_wVersion:	resw 1		; Rational extender version #
 41750                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 41751                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 41752                                   .size:
 41753                                  endstruc
 41754                                  
 41755                                  ;----------------------------------------------------------------------------
 41756                                  
 41757                                  ; 22/05/2019 - Retro DOS v4.0
 41758                                  
 41759                                  Rational386Patch:
 41760                                  	; Do a few quick checks to see if this looks like a Rational
 41761                                  	; Extended application. Hopefully this will quickly weed out
 41762                                  	; most non Rational apps.
 41763                                  
 41764                                  	cmp	word [es:0],395		; version number goes here - versions
 41765                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 41766                                  
 41767                                  	cmp	word [es:0Ch],20h	; always has this value here
 41768                                  	jne	short rp3QuickOut
 41769                                  
 41770                                  	push	ax
 41771                                  
 41772                                  	mov	ax,18h 			; extender has 18h at
 41773                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 41774                                  	jne	short rp3QO_ax
 41775                                  	cmp	[es:28],ax
 41776                                  	jne	short rp3QO_ax
 41777                                  	cmp	[es:36],ax
 41778                                  	je	short rp3Maybe
 41779                                  rp3QO_ax:
 41780                                  	pop	ax
 41781                                  rp3QuickOut:
 41782                                  	retn
 41783                                  
 41784                                  ; It might be the rational extender, do more extensive checking
 41785                                  
 41786                                  rp3Maybe:
 41787                                  	cld
 41788                                  	push	bx			; note ax pushed above
 41789                                  	push	cx
 41790                                  	push	dx
 41791                                  	push	si
 41792                                  	push	di
 41793                                  	push	es
 41794                                  	push	ds			; we use all of them
 41795                                  	push	bp
 41796                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 41797                                  	mov	bp,sp
 41798                                  
 41799                                  	push	cs
 41800                                  	pop	ds
 41801                                  
 41802                                  	mov	ax,[es:0]		; save version #
 41803                                  	;mov	[bp+StackVars.sv_wVersion],ax
 41804                                  	mov	[bp],ax	
 41805                                  					; check that binary version # matches
 41806                                  	call	VerifyVersion		;   ascii string
 41807                                  	jne	short rp3Exit_j
 41808                                  
 41809                                  ; Looks like this is it, find where to put the patch code.  The
 41810                                  ; patch will be located on top of Rational code specific to 80286
 41811                                  ; processors, so these patchs MUST NOT be applied if running on
 41812                                  ; an 80286 system.
 41813                                  
 41814                                  	; Rational says the code to patch will never be beyond offset 46xxh
 41815                                  
 41816                                  	mov	cx,4500h		; force search len to 4700h (searches
 41817                                  	;mov	[bp+2],cx
 41818                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 41819                                  
 41820                                  	mov	es,[es:20h]		; es=code segment
 41821                                  
 41822                                  	mov	si,rpFind1		; string to find
 41823                                  	mov	dx,rpFind1Len ; 10	; length to match
 41824                                  	call	ScanCodeSeq		; look for code seq
 41825                                  	jz	short rpGotPatch
 41826                                  
 41827                                  ; According to Rational, some very old versions of the extender may not
 41828                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 41829                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 41830                                  
 41831                                  	mov	si,rpFind1a
 41832                                  	mov	dx,rpFind1aLen  ;8
 41833                                  	call	ScanCodeSeq
 41834                                  	jz	short rpGotPatch
 41835                                  
 41836                                  rp3Exit_j:
 41837                                  	jmp	rp3Exit
 41838                                  
 41839                                  ; Found the location to write patch code! DI = offset in code seg.
 41840                                  
 41841                                  rpGotPatch:
 41842                                  	;mov	[bp+4],di
 41843                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 41844                                  
 41845                                  ;----------------------------------------------------------------------------
 41846                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 41847                                  
 41848                                  	;cmp	word [bp+0],381
 41849                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 41850                                  	cmp	word [bp],381
 41851                                  	jae	short rpBug2			;   < 3.81
 41852                                  
 41853                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 41854                                  	call	FindBadCode
 41855                                  	jc	short rpBug2
 41856                                  
 41857                                  ; si = rpFind2 offset, di = rpFind3 offset
 41858                                  
 41859                                  	push	di
 41860                                  	mov	di,si				; rpFind2 offset
 41861                                  	mov	dx,rpFind2Len ; 3
 41862                                  
 41863                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 41864                                  	jne	short rp_no_cx
 41865                                  
 41866                                  	dec	di				;   yes, gobble up push cx too
 41867                                  	inc	dx
 41868                                  rp_no_cx:
 41869                                  	mov	si,rpRepl2			; patch out find2 sequence
 41870                                  	mov	cx,rpRepl2Len  ; 6
 41871                                  	call	GenPatch
 41872                                  
 41873                                  	pop	di				; rpFind3 offset
 41874                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 41875                                  	jne	short rp_no_cx2
 41876                                  
 41877                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 41878                                  rp_no_cx2:
 41879                                  	;mov	ax,[bp+4]
 41880                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 41881                                  	;mov	[es:di+4],ax
 41882                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 41883                                  
 41884                                  	push	di				; save find3 offset
 41885                                  	mov	si,rpRepl3			; copy repl3 to patch area
 41886                                  	mov	cx,rpRepl3Len ; 5
 41887                                  	call	CopyPatch
 41888                                  
 41889                                  	pop	bx				; find3 offset
 41890                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 41891                                  	call	GenJump 			; jmp back from patch area
 41892                                  	;mov	[bp+4],di
 41893                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 41894                                  						;   area pointer
 41895                                  
 41896                                  ;----------------------------------------------------------------------------
 41897                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 41898                                  
 41899                                  rpBug2:
 41900                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 41901                                  	call	FindBadCode
 41902                                  	jc	short rpBug3
 41903                                  
 41904                                  ; si = rpFind4 offset, di = rpFind5 offset
 41905                                  
 41906                                  	;push	word [bp+4]
 41907                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 41908                                  						;   (where repl4 goes)
 41909                                  	push	di				; save find5 offset
 41910                                  
 41911                                  	mov	di,si
 41912                                  	mov	dx,rpFind4Len ; 4
 41913                                  	mov	si,rpRepl4
 41914                                  	mov	cx,rpRepl4Len ; 15
 41915                                  	call	GenPatch			; patch out find4 code
 41916                                  
 41917                                  	pop	di				; find5 offset
 41918                                  	add	di,5				; keep 5 bytes of find5 code
 41919                                  	;mov	bx,[bp+4]
 41920                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 41921                                  	push	bx				; save repl5 location
 41922                                  	call	GenJump
 41923                                  
 41924                                  	mov	si,rpRepl5			; copy repl5 code to patch
 41925                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 41926                                  	call	CopyPatch			;   so no need to jmp back to
 41927                                  						;   main-line code
 41928                                  
 41929                                  ; patches have been made, now update the patch code to store/load dwords just
 41930                                  ; after the code in the patch area
 41931                                  
 41932                                  	pop	di				; repl5 location
 41933                                  	pop	si				; repl4 location
 41934                                  
 41935                                  	;mov	ax,[bp+4]
 41936                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 41937                                  
 41938                                  	;mov	[es:si+7],ax
 41939                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 41940                                  	;mov	[es:di+5],ax
 41941                                  	mov	[es:di+rpRepl5o1Len],ax
 41942                                  	add	ax,4
 41943                                  	;mov	[es:si+0Dh],ax
 41944                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 41945                                  	;mov	[es:di+0Bh],ax
 41946                                  	mov	[es:di+rpRepl5o2Len],ax
 41947                                  
 41948                                  	;add	word [bp+4],8
 41949                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 41950                                  						; patch area
 41951                                  
 41952                                  ;----------------------------------------------------------------------------
 41953                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 41954                                  
 41955                                  rpBug3:
 41956                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 41957                                  	call	FindBadCode
 41958                                  	jc	short rpBug4
 41959                                  
 41960                                  	;add	di,9
 41961                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 41962                                  	push	si				;   code and locate find7b
 41963                                  	mov	si,rpFind7b			;   sequence
 41964                                  	mov	dx,rpFind7bLen ; 3
 41965                                  	call	ScanCodeSeq_di
 41966                                  	pop	si
 41967                                  	jnz	short rpBug4
 41968                                  
 41969                                  	push	di				; save find7b code offset
 41970                                  
 41971                                  	mov	di,si
 41972                                  	mov	dx,rpFind6Len ; 3
 41973                                  	mov	si,rpRepl6
 41974                                  	mov	cx,rpRepl6Len ; 9
 41975                                  	call	GenPatch			; patch out find6 code
 41976                                  
 41977                                  	pop	di
 41978                                  	mov	dx,rpFind7bLen ; 3
 41979                                  	mov	si,rpRepl7
 41980                                  	mov	cx,rpRepl7Len ; 9
 41981                                  	call	GenPatch			; patch out find7b code
 41982                                  
 41983                                  ;----------------------------------------------------------------------------
 41984                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 41985                                  
 41986                                  rpBug4:
 41987                                  	;cmp	word [bp+0],360
 41988                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 41989                                  	cmp	word [bp],360
 41990                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 41991                                  
 41992                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 41993                                  	call	FindBadCode
 41994                                  	jc	short rp3Exit
 41995                                  
 41996                                  	push	di				; save find9 code offset
 41997                                  
 41998                                  	mov	di,si
 41999                                  	mov	dx,3
 42000                                  	mov	si,rpRepl8
 42001                                  	mov	cx,rpRepl8Len ; 4
 42002                                  	call	GenPatch			; patch out find8 code
 42003                                  
 42004                                  	pop	di				; find9 offset
 42005                                  	;mov	bx,[bp+4]
 42006                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 42007                                  	call	GenJump 			;   patch area
 42008                                  
 42009                                  	mov	si,rpRepl9			; copy replacement code to
 42010                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 42011                                  	call	CopyPatch			;   so no jmp back to main-line
 42012                                  
 42013                                  rp3Exit:
 42014                                  	add	sp,StackVars.size
 42015                                  	pop	bp
 42016                                  	pop	ds
 42017                                  	pop	es
 42018                                  	pop	di
 42019                                  	pop	si
 42020                                  	pop	dx
 42021                                  	pop	cx
 42022                                  	pop	bx
 42023                                  	pop	ax
 42024                                  	retn
 42025                                  
 42026                                  ;----------------------------------------------------------------------------
 42027                                  ;
 42028                                  ; FindBadCode
 42029                                  ;
 42030                                  ; Searches Rational code segment looking for a pair of find strings (all
 42031                                  ; patches have at least two find strings).
 42032                                  ;
 42033                                  ; Entry:
 42034                                  ;	ES    = code segment to search
 42035                                  ;	DS:BX = search pair structure for this search
 42036                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 42037                                  ;
 42038                                  ; Exit:
 42039                                  ;	CY flag clear if both strings found, and
 42040                                  ;	SI    = offset in ES of 1st string
 42041                                  ;	DI    = offset in ES of 2nd string
 42042                                  ;	CY set if either string not found, or strings too far apart
 42043                                  ;
 42044                                  ; Used:
 42045                                  ;	CX
 42046                                  ;
 42047                                  ;----------------------------------------------------------------------------
 42048                                  
 42049                                  ;struc SearchPair
 42050                                  ; .sp_off1: resw 1	; offset of 1st search string
 42051                                  ; .sp_len1: resw 1	; length of 1st search string
 42052                                  ; .sp_off2: resw 1	; 2nd string
 42053                                  ; .sp_len2: resw 1	; 2nd string
 42054                                  ; .sp_diff: resw 1	; max difference between offsets
 42055                                  ; .size:
 42056                                  ;endstruc
 42057                                  
 42058                                  FindBadCode:
 42059                                  	;mov	cx,[bp+2]
 42060                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 42061                                  
 42062                                  	mov	si,[bx]	; mov si,[bx+0]
 42063                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 42064                                  	
 42065                                  	;mov	dx,[bx+2]
 42066                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 42067                                  	call	ScanCodeSeq
 42068                                  	jnz	short fbc_error		; done if 1st not found
 42069                                  
 42070                                  	push	di			; save 1st string offset
 42071                                  
 42072                                  	;mov	si,[bx+4]
 42073                                  	mov	si,[bx+SearchPair.sp_off2]
 42074                                  	;mov	dx,[bx+6]
 42075                                  	mov	dx,[bx+SearchPair.sp_len2]
 42076                                  	call	ScanCodeSeq_di		; don't change flags after this!
 42077                                  
 42078                                  	pop	si			; restore 1st string offset
 42079                                  	jnz	short fbc_error
 42080                                  
 42081                                  	mov	ax,di			; sanity check that
 42082                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 42083                                  	jc	short fbc_error
 42084                                  	;cmp	ax,[bx+8]
 42085                                  	cmp	ax,[bx+SearchPair.sp_diff]
 42086                                  	ja	short fbc_error
 42087                                  
 42088                                  	clc
 42089                                  	retn
 42090                                  
 42091                                  fbc_error:
 42092                                  	stc
 42093                                  	retn
 42094                                  
 42095                                  ;----------------------------------------------------------------------------
 42096                                  ;
 42097                                  ; GenPatch
 42098                                  ;
 42099                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 42100                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 42101                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 42102                                  ; code.
 42103                                  ;
 42104                                  ; Entry:
 42105                                  ;	ES:DI = start of buggy code to be patched
 42106                                  ;	DX    = length of buggy code to be patched
 42107                                  ;	DS:SI = replacement patch code
 42108                                  ;	CX    = length of replacement patch code
 42109                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 42110                                  ;
 42111                                  ; Exit:
 42112                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 42113                                  ;
 42114                                  ; Used:
 42115                                  ;	AX, BX, SI, Flags
 42116                                  ;
 42117                                  ;----------------------------------------------------------------------------
 42118                                  
 42119                                  GenPatch:
 42120                                  	push	di			;save offset of buggy code
 42121                                  
 42122                                  	;mov	bx,[bp+4]
 42123                                  	mov	bx,[bp+StackVars.sv_pPatch]
 42124                                  					;jump from buggy code to patch area
 42125                                  	call	GenJump
 42126                                  
 42127                                  	call	CopyPatch		;copy replacement code to patch area
 42128                                  
 42129                                  	pop	bx			;offset of buggy code + buggy code
 42130                                  	add	bx,dx			;  length = return from patch offset
 42131                                  
 42132                                  	call	GenJump 		;jump from patch area back to main-
 42133                                  	;mov	[bp+4],di
 42134                                  	mov	[bp+StackVars.sv_pPatch],di
 42135                                  					;  line code, update patch pointer
 42136                                  	retn
 42137                                  
 42138                                  ;----------------------------------------------------------------------------
 42139                                  ;
 42140                                  ; CopyPatch
 42141                                  ;
 42142                                  ; Copies patch code to patch location.
 42143                                  ;
 42144                                  ; Entry:
 42145                                  ;	DS:SI = patch code to be copied
 42146                                  ;	ES    = segment of code to patch
 42147                                  ;	CX    = length of code to copy
 42148                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 42149                                  ;
 42150                                  ; Exit:
 42151                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 42152                                  ;
 42153                                  ; Used:
 42154                                  ;	SI, Flags
 42155                                  ;
 42156                                  ;----------------------------------------------------------------------------
 42157                                  
 42158                                  CopyPatch:
 42159                                  	push	cx
 42160                                  	;mov	di,[bp+4]
 42161                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 42162                                  	cld
 42163                                  	rep movsb
 42164                                  	pop	cx
 42165                                  	;mov	[bp+4],di
 42166                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 42167                                  	retn
 42168                                  
 42169                                  ;----------------------------------------------------------------------------
 42170                                  ;
 42171                                  ; GenJump
 42172                                  ;
 42173                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 42174                                  ;
 42175                                  ; Entry:
 42176                                  ;	ES:DI = from location (where to put jmp instruction)
 42177                                  ;	BX    = to location (where to jump to)
 42178                                  ;
 42179                                  ; Exit:
 42180                                  ;	DI = byte after generated jump
 42181                                  ;
 42182                                  ; Used:
 42183                                  ;	AX
 42184                                  ;
 42185                                  ;----------------------------------------------------------------------------
 42186                                  
 42187                                  GenJump:
 42188                                  	mov	al,0E9h		; jmp rel16 opcode
 42189                                  	stosb
 42190                                  
 42191                                  	mov	ax,bx		; calc offset to 'to' location
 42192                                  	sub	ax,di
 42193                                  	sub	ax,2
 42194                                  
 42195                                  	stosw			; output offset
 42196                                  
 42197                                  	retn
 42198                                  
 42199                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42200                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42201                                  
 42202                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 42203                                  
 42204                                  ;----------------------------------------------------------------------------
 42205                                  ;
 42206                                  ; ScanCodeSeq
 42207                                  ;
 42208                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 42209                                  ;
 42210                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 42211                                  ;
 42212                                  ;----------------------------------------------------------------------------
 42213                                  
 42214                                  ScanCodeSeq:
 42215                                  	mov	di,200h
 42216                                  ScanCodeSeq_di:
 42217                                  	push	cx
 42218                                  	sub	cx,dx
 42219                                  	inc	cx
 42220                                  scsagain:
 42221                                  	push	si
 42222                                  	push	di
 42223                                  	push	cx
 42224                                  	mov	cx,dx
 42225                                  	rep	cmpsb
 42226                                  	pop	cx
 42227                                  	pop	di
 42228                                  	pop	si
 42229                                  	je	short scsfound
 42230                                  	inc	di
 42231                                  	loop	scsagain
 42232                                  scsfound:
 42233                                  	pop	cx
 42234                                  vvexit:		; 18/12/2022
 42235                                  	retn
 42236                                  
 42237                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42238                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 42239                                  
 42240                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 42241                                  	
 42242                                  ;----------------------------------------------------------------------------
 42243                                  ;
 42244                                  ; VerifyVersion
 42245                                  ;
 42246                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 42247                                  ; from ES:2A.
 42248                                  ;
 42249                                  ;       Entry: AX = binary version number 
 42250                                  ;       Exit : Z flag set if version numbers match
 42251                                  ;
 42252                                  ;----------------------------------------------------------------------------
 42253                                  
 42254                                  VerifyVersion:
 42255                                  	mov	si,[es:2Ah]		; offset of version number
 42256                                  					;  in ascii
 42257                                  	mov	bl,10
 42258                                  	add	si,3			; point to last digit
 42259                                  
 42260                                  	call	VVDigit
 42261                                  	jne	short vvexit
 42262                                  	call	VVDigit
 42263                                  	jne	short vvexit
 42264                                  	cmp	byte [es:si],'.'
 42265                                  	jne	short vvexit
 42266                                  	dec	si
 42267                                  	;call	VVDigit
 42268                                  	; 18/12/2022
 42269                                  	;jmp	short VVDigit
 42270                                  ;vvexit:
 42271                                  	;retn
 42272                                  VVDigit:
 42273                                  	div	bl
 42274                                  	add	ah,'0'
 42275                                  	dec	si
 42276                                  	cmp	[es:si+1],ah
 42277                                  	mov	ah,0			; do not xor or sub we need Z
 42278                                  	retn
 42279                                  
 42280                                  %endif
 42281                                  
 42282                                  ;-----------------------------------------------------------------------
 42283                                  
 42284                                  ; 23/05/2019 - Retro DOS v4.0
 42285                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 42286                                  
 42287                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42288                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 42289                                  
 42290                                  exepatch_start:	 ; label byte
 42291                                  
 42292                                  	; The following is the code that'll be layed over the buggy unpack
 42293                                  	; code.
 42294                                  str1:
 42295 000071F2 06                      	db  06h	  		;push	es
 42296 000071F3 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42297                                  
 42298                                  first_stop equ	$-str1
 42299                                  			
 42300 000071F5 2BC2                    	db  2Bh, 0C2h		;sub	ax,dx
 42301                                  
 42302                                  first:  ; label	byte
 42303                                  
 42304 000071F7 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42305 000071F9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42306 000071FB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42307 000071FE 57                      	db  57h	    		;push	di
 42308 000071FF B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42309 00007202 B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH
 42310 00007204 F3AE                    	db  0F3h,0AEh 		;repz	scasb
 42311 00007206 47                      	db  47h	    		;inc	di
 42312 00007207 8BF7                    	db  8Bh,0F7h  		;mov	si,di
 42313 00007209 5F                      	db  5Fh	    		;pop	di
 42314 0000720A 58                      	db  58h	    		;pop	ax
 42315                                  
 42316                                  second_stop equ	$-first
 42317                                  
 42318 0000720B 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx
 42319                                  
 42320                                  second: ; label	byte
 42321                                  
 42322 0000720D 8EC0                    	db  8Eh,0C0h  		;mov	es,ax
 42323                                  		    		;NextRec:
 42324 0000720F B90402                  	db  0B9h,04h,02h	;mov	cx,0204h
 42325                                  		    		;norm_agn:
 42326 00007212 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42327 00007214 F7D0                    	db  0F7h,0D0h		;not	ax
 42328 00007216 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42329 00007218 7413                    	db  74h,13h		;jz	short SI_ok
 42330 0000721A 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42331 0000721C 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42332 0000721F 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42333 00007221 7308                    	db  73h,08h		;jnc	short SItoDS
 42334 00007223 F7DA                    	db  0F7h,0DAh		;neg	dx
 42335 00007225 D3E2                    	db  0D3h,0E2h		;shl	dx,cl
 42336 00007227 2BF2                    	db  2Bh,0F2h		;sub	si,dx
 42337 00007229 33D2                    	db  33h,0D2h		;xor	dx,dx
 42338                                  				;SItoDS:
 42339 0000722B 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42340                                  				;SI_ok:
 42341 0000722D 87F7                    	db  87h,0F7h		;xchg	si,di
 42342 0000722F 1E                      	db  1Eh			;push	ds
 42343 00007230 06                      	db  06h			;push	es
 42344 00007231 1F                      	db  1Fh			;pop	ds
 42345 00007232 07                      	db  07h			;pop	es
 42346 00007233 FECD                    	db  0FEh,0CDh		;dec	ch
 42347 00007235 75DB                    	db  75h,0DBh		;jnz	short norm_agn
 42348 00007237 AC                      	db  0ACh		;lodsb
 42349 00007238 92                      	db  92h			;xchg	dx,ax
 42350 00007239 4E                      	db  4Eh			;dec	si
 42351 0000723A AD                      	db  0ADh		;lodsw
 42352 0000723B 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42353 0000723D 46                      	db  46h			;inc	si
 42354 0000723E 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42355 00007240 24FE                    	db  24h,0FEh		;and	al,0FEH
 42356 00007242 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42357 00007244 7505                    	db  75h,05h		;jne	short TryEnum
 42358 00007246 AC                      	db  0ACh		;lodsb
 42359 00007247 F3AA                    	db  0F3h,0AAh		;rep stosb
 42360                                  
 42361                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 42362 00007249 EB06                    	db  0EBh,06h		;jmp	short TryNext
 42363                                  
 42364                                  				;TryEnum:
 42365 0000724B 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42366 0000724D 756C                    	db  75h,6Ch		;jne	short CorruptExe
 42367 0000724F F3A4                    	db  0F3h,0A4h		;rep movsb
 42368                                  				;TryNext:
 42369                                  
 42370 00007251 92                      	db  92h			;xchg	dx,ax
 42371                                  ;	db  8Ah,0C2h		;mov	al,dl
 42372                                  
 42373 00007252 A801                    	db  0A8h,01h		;test	al,1
 42374 00007254 74B9                    	db  74h,0B9h		;jz	short NextRec
 42375 00007256 9090                    	db  90h,90h		;nop,nop
 42376                                  	
 42377                                  last_stop equ $-second
 42378                                  size_str1 equ $-str1
 42379                                  
 42380                                  	; The following is the code that we need to look for in the exe
 42381                                  	; file.
 42382                                  
 42383                                  scan_patch1: ; label byte
 42384                                  
 42385 00007258 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42386 0000725A 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42387 0000725C 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 42388 0000725E 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42389 00007260 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42390 00007262 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42391 00007265 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42392 00007268 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42393 0000726A F3AE                    	db  0F3h,0AEh		;repz	scasb
 42394 0000726C 47                      	db  47h			;inc	di
 42395 0000726D 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42396 0000726F 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42397 00007271 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 42398 00007273 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42399 00007275 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42400                                  				;NextRec:
 42401 00007278 B104                    	db  0B1h,04h		;mov	cl,4
 42402 0000727A 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42403 0000727C F7D0                    	db  0F7h,0D0h		;not	ax
 42404 0000727E D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42405 00007280 7409                    	db  74h,09h		;jz	short SI_ok
 42406 00007282 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42407 00007284 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42408 00007286 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42409 00007288 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42410                                  	       			;SI_ok:
 42411 0000728B 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42412 0000728D F7D0                    	db  0F7h,0D0h		;not	ax
 42413 0000728F D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42414 00007291 7409                    	db  74h,09h		;jz	short DI_ok
 42415 00007293 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42416 00007295 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42417 00007297 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42418 00007299 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42419                                  				;DI_ok:
 42420                                  
 42421                                  size_scan_patch1 equ $-scan_patch1
 42422                                  
 42423                                  scan_patch2: ; label byte
 42424                                  			
 42425 0000729C 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42426 0000729E 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42427 000072A0 48                      	db  48h			;dec	ax
 42428 000072A1 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42429 000072A3 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42430 000072A5 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42431 000072A8 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42432 000072AB B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42433 000072AD F3AE                    	db  0F3h,0AEh		;repz	scasb
 42434 000072AF 47                      	db  47h			;inc	di
 42435 000072B0 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42436 000072B2 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42437 000072B4 48                      	db  48h			;dec	ax
 42438 000072B5 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42439 000072B7 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42440                                  				;NextRec:
 42441 000072BA B104                    	db  0B1h,04h		;mov	cl,4
 42442 000072BC 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42443 000072BE F7D0                    	db  0F7h,0D0h		;not	ax
 42444 000072C0 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42445 000072C2 740A                    	db  74h,0Ah		;jz	short SI_ok
 42446 000072C4 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42447 000072C6 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42448 000072C8 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42449 000072CA 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 42450                                  				;or	si,0FFF0H
 42451                                  				;SI_ok:
 42452 000072CE 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42453 000072D0 F7D0                    	db  0F7h,0D0h		;not	ax
 42454 000072D2 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42455 000072D4 740A                    	db  74h,0Ah		;jz	short DI_ok
 42456 000072D6 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42457 000072D8 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42458 000072DA 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42459 000072DC 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 42460                                  				;or	di,0FFF0H
 42461                                  				;DI_ok:
 42462                                  
 42463                                  size_scan_patch2 equ $-scan_patch2
 42464                                  
 42465                                  scan_patch3: ; label byte
 42466                                  
 42467 000072E0 8CC3                    	db  8Ch,0C3h		;mov	bx,es
 42468 000072E2 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 42469 000072E4 48                      	db  48h			;dec	ax
 42470 000072E5 8ED8                    	db  8Eh,0D8h		;mov	ds,ax
 42471 000072E7 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42472 000072E9 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42473 000072EC B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 42474 000072EF B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 42475 000072F1 F3AE                    	db  0F3h,0AEh		;repz	scasb
 42476 000072F3 47                      	db  47h			;inc	di
 42477 000072F4 8BF7                    	db  8Bh,0F7h		;mov	si,di
 42478 000072F6 8BC3                    	db  8Bh,0C3h		;mov	ax,bx
 42479 000072F8 48                      	db  48h			;dec	ax
 42480 000072F9 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 42481 000072FB BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 42482                                  				;NextRec:
 42483 000072FE B104                    	db  0B1h,04h		;mov	cl,4
 42484 00007300 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 42485 00007302 F7D0                    	db  0F7h,0D0h		;not	ax
 42486 00007304 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42487 00007306 7409                    	db  74h,09h		;jz	short SI_ok
 42488 00007308 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 42489 0000730A 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42490 0000730C 8EDA                    	db  8Eh,0DAh		;mov	ds,dx
 42491 0000730E 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 42492                                  				;SI_ok:
 42493 00007311 8BC7                    	db  8Bh,0C7h		;mov	ax,di
 42494 00007313 F7D0                    	db  0F7h,0D0h		;not	ax
 42495 00007315 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 42496 00007317 7409                    	db  74h,09h		;jz	short DI_ok
 42497 00007319 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 42498 0000731B 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 42499 0000731D 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 42500 0000731F 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 42501                                  				;DI_ok:
 42502                                  
 42503                                  size_scan_patch3 equ $-scan_patch3
 42504                                  
 42505                                  scan_com: ; label byte
 42506                                  
 42507 00007322 AC                      	db  0ACh		;lodsb
 42508 00007323 8AD0                    	db  8Ah,0D0h		;mov	dl,al
 42509 00007325 4E                      	db  4Eh			;dec	si
 42510 00007326 AD                      	db  0ADh		;lodsw
 42511 00007327 8BC8                    	db  8Bh,0C8h		;mov	cx,ax
 42512 00007329 46                      	db  46h			;inc	si
 42513 0000732A 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42514 0000732C 24FE                    	db  24h,0FEh		;and	al,0FEH
 42515 0000732E 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 42516 00007330 7506                    	db  75h,06h		;jne	short TryEnum
 42517 00007332 AC                      	db  0ACh		;lodsb
 42518 00007333 F3AA                    	db  0F3h,0AAh		;rep stosb
 42519 00007335 EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 42520                                  				;TryEnum:
 42521 00007338 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 42522 0000733A 756B                    	db  75h,6Bh		;jne	short CorruptExe
 42523 0000733C F3A4                    	db  0F3h,0A4h		;rep movsb
 42524                                  				;TryNext:
 42525 0000733E 8AC2                    	db  8Ah,0C2h		;mov	al,dl
 42526 00007340 A801                    	db  0A8h,01h		;test	al,1
 42527                                  ;	db  74h,0BAh		;jz	short NextRec
 42528                                  
 42529                                  size_scan_com	equ	$-scan_com
 42530                                  
 42531                                  ;-----------------------------------------------------------------------
 42532                                  
 42533                                  ; 23/05/2019 - Retro DOS v4.0
 42534                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 42535                                  
 42536                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42537                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 42538                                  
 42539                                  ExePatch:
 42540                                  	; 28/12/2022 - Retro DOS v4.1
 42541                                  	;call	ExePackPatch
 42542                                  	;;call	word [ss:RationalPatchPtr]
 42543                                  	;retn
 42544                                  	; 28/12/2022
 42545                                  	;jmp	short ExePackPatch
 42546                                  
 42547                                  ;-----------------------------------------------------------------------
 42548                                  ;
 42549                                  ; Procedure Name 	: ExePackPatch
 42550                                  ;
 42551                                  ; Inputs	 	: DS 			-> DOSDATA
 42552                                  ;			  ES:0 			-> read in image
 42553                                  ;			  ax:cx = start cs:ip of program
 42554                                  ; Output		:		
 42555                                  ;
 42556                                  ;	1. If ES <= 0fffh
 42557                                  ;	   2. if exepack signature ('RB') found
 42558                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 42559                                  ;	       	 4. if rest of the code & checksum compares
 42560                                  ;	  	    5. overlay buggy code with code in 
 42561                                  ;		       doscode:str1.
 42562                                  ;		 6. endif
 42563                                  ;	      7. endif
 42564                                  ;	   8. endif
 42565                                  ;	9. endif
 42566                                  ;
 42567                                  ;
 42568                                  ; Uses			: NONE
 42569                                  ;
 42570                                  ;-----------------------------------------------------------------------
 42571                                  
 42572                                  	; 21/03/2024 - Retro DOS v4.1
 42573                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42574                                  	; 23/05/2019 - Retro DOS v4.0	
 42575                                  ExePackPatch:
 42576 00007342 53                      	push	bx
 42577 00007343 8CC3                    	mov	bx,es			; bx has load segment
 42578 00007345 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 42579 00007349 7602                    	jbe	short ep_cont		; N: 
 42580 0000734B 5B                      	pop	bx			; Y: no need to patch
 42581 0000734C C3                      	retn
 42582                                  ep_cont:
 42583 0000734D 1E                      	push	ds
 42584 0000734E 06                      	push	es
 42585 0000734F 50                      	push	ax
 42586 00007350 51                      	push	cx
 42587 00007351 56                      	push	si
 42588 00007352 57                      	push	di
 42589                                  	
 42590                                  		; M033 - start
 42591                                  		; exepacked programs have an IP of 12h (>=2)
 42592                                  
 42593 00007353 83E902                  	sub	cx,2			; Q: is IP >=2
 42594 00007356 7303                    	jnb	short epp_1		; N: exit
 42595 00007358 E9B500                  	jmp	ep_notpacked
 42596                                  					; ax:cx now points to location of
 42597                                  					; 'RB' if this is an exepacked file.
 42598                                  		; M033 - end
 42599                                  epp_1:
 42600 0000735B 89CF                    	mov	di,cx
 42601 0000735D 8EC0                    	mov	es,ax
 42602 0000735F 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in
 42603                                  					; unpack_offset
 42604                                  
 42605 00007364 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 42606                                  	;ljne	ep_notpacked
 42607 00007369 7403                    	je	short epp_2
 42608 0000736B E9A200                  	jmp	ep_notpacked
 42609                                  epp_2:
 42610 0000736E 0E                      	push	cs
 42611 0000736F 1F                      	pop	ds			; set ds to cs
 42612                                  
 42613                                  	;add	di,6Ch
 42614 00007370 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed
 42615                                  					;          file where we hope to find
 42616                                  					;	   scan string. 
 42617                                  
 42618 00007373 E8A200                  	call	chk_common_str		; check for match
 42619                                  
 42620 00007376 7521                    	jnz	short ep_chkpatch2	; Q: does the patch match
 42621                                  					; N: check at patch2_offset
 42622                                  					; Y: check for rest of patch string
 42623 00007378 BE[5872]                	mov	si,scan_patch1
 42624                                  					; ds:si -> scan string 
 42625 0000737B 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 42626                                  
 42627                                  	;add	di,28h
 42628                                  	; 07/12/2022
 42629 00007380 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed
 42630                                  					;          file where we hope to find
 42631                                  					;	   scan string. 
 42632                                  	;;mov	cx,68
 42633                                  	;mov	cx,size_scan_patch1
 42634                                  	; 21/03/2024
 42635 00007383 B144                    	mov	cl,size_scan_patch1 ; 68
 42636                                  
 42637                                  	;mov	bx,142
 42638 00007385 BB8E00                  	mov	bx,CHKSUM1_LEN
 42639                                  	;mov	ax,0EF4Eh
 42640 00007388 B84EEF                  	mov	ax,PATCH1_CHKSUM
 42641 0000738B E89E00                  	call	chk_patchsum		; check if patch and chk sum compare
 42642 0000738E 7207                    	jc	short ep_done1		; Q: did we pass the test
 42643                                  					; N: exit
 42644                                  					; Y: overlay code with new 
 42645 00007390 BE[F271]                	mov	si,str1
 42646                                  	;;mov	cx,102
 42647                                  	;mov	cx,size_str1
 42648                                  	; 21/03/2024
 42649 00007393 B166                    	mov	cl,size_str1 ; 102
 42650                                  
 42651 00007395 F3A4                    	rep	movsb
 42652                                  ep_done1:
 42653 00007397 EB77                    	jmp	short ep_done ; 21/03/2024
 42654                                  
 42655                                  ep_chkpatch2:
 42656                                  	;mov	di,76h
 42657 00007399 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 42658                                  					; in another version of unpack
 42659 0000739C E87900                  	call	chk_common_str		; check for match
 42660                                  
 42661 0000739F 753D                    	jnz	short ep_chkpatch3	; Q: does the patch match
 42662                                  					; N: check for patch3_offset
 42663                                  					; Y: check for rest of patch string
 42664                                  
 42665 000073A1 BE[9C72]                	mov	si,scan_patch2
 42666                                  					; ds:si -> scan string
 42667                                  	;mov	di,32h
 42668 000073A4 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed
 42669                                  					;          file where we hope to find
 42670                                  	;;mov	cx,68			;	   scan string.
 42671                                  	;mov	cx,size_scan_patch2
 42672                                  	; 21/03/2024
 42673 000073A7 B144                    	mov	cl,size_scan_patch2 ; 68
 42674                                  	;mov	bx,140
 42675 000073A9 BB8C00                  	mov	bx,CHKSUM2_LEN
 42676                                  	;mov	ax,78B2h
 42677 000073AC B8B278                  	mov	ax,PATCH2_CHKSUM
 42678 000073AF E87A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42679                                  
 42680                                  					; M046 - Start
 42681                                  					; Q: did we pass the test
 42682 000073B2 7310                    	jnc	short ep_patchcode2	; Y: overlay code with new
 42683                                  					; N: try with a different chksum
 42684                                  
 42685 000073B4 BE[9C72]                	mov	si,scan_patch2
 42686                                  					; ds:si -> scan string
 42687                                  	;;mov	cx,68
 42688                                  	;mov	cx,size_scan_patch2
 42689                                  	; 21/03/2024
 42690 000073B7 B144                    	mov	cl,size_scan_patch2 ; 68
 42691                                  	;mov	bx,129
 42692 000073B9 BB8100                  	mov	bx,CHKSUM2A_LEN
 42693                                  	;mov	ax,1C47h
 42694 000073BC B8471C                  	mov	ax,PATCH2A_CHKSUM
 42695 000073BF E86A00                  	call	chk_patchsum		; check if patch and chk sum compare
 42696                                  					; Q: did we pass the test
 42697 000073C2 724C                    	jc	short ep_notpacked	; N: try with a different chksum
 42698                                  					; Y: overlay code with new
 42699                                  						
 42700                                  ep_patchcode2:			       	; M046 - End
 42701 000073C4 BE[F271]                	mov	si,str1
 42702                                  	;;mov	cx,3
 42703                                  	;mov	cx,first_stop
 42704                                  	; 21/03/2024
 42705 000073C7 B103                    	mov	cl,first_stop ; 3
 42706 000073C9 F3A4                    	rep	movsb
 42707 000073CB B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 42708 000073CE AB                      	stosw
 42709                                  	;add	si,2
 42710                                  	; 21/03/2024
 42711 000073CF 46                      	inc	si
 42712 000073D0 46                      	inc	si	
 42713                                  	;;mov	cx,20
 42714                                  	;mov	cx,second_stop
 42715                                  	; 21/03/2024
 42716 000073D1 B114                    	mov	cl,second_stop ; 20
 42717 000073D3 F3A4                    	rep	movsb
 42718 000073D5 AB                      	stosw				; put in dec ax and nop
 42719                                  	;add	si,2
 42720                                  	; 21/03/2024
 42721 000073D6 46                      	inc	si
 42722 000073D7 46                      	inc	si
 42723                                  	;;mov	cx,75
 42724                                  	;mov	cx,last_stop
 42725                                  	; 21/03/2024
 42726 000073D8 B14B                    	mov	cl,last_stop ; 75
 42727 000073DA F3A4                    	rep	movsb
 42728 000073DC EB32                    	jmp	short ep_done
 42729                                  
 42730                                  ep_chkpatch3:
 42731                                  	;mov	di,74h
 42732 000073DE BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 42733                                  					; in another version of unpack
 42734 000073E1 E83400                  	call	chk_common_str		; check for match
 42735                                  
 42736 000073E4 752A                    	jnz	short ep_notpacked	; Q: does the patch match
 42737                                  					; N: exit
 42738                                  					; Y: check for rest of patch string
 42739 000073E6 BE[E072]                	mov	si,scan_patch3
 42740                                  					; ds:si -> scan string
 42741                                  	;mov	di,32h
 42742 000073E9 BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed
 42743                                  					;          file where we hope to find
 42744                                  					;	   scan string. 
 42745                                  	;;mov	cx,66
 42746                                  	;mov	cx,size_scan_patch3
 42747                                  	; 21/03/2024
 42748 000073EC B142                    	mov	cl,size_scan_patch3 ; 66
 42749                                  	;mov	bx,139
 42750 000073EE BB8B00                  	mov	bx,CHKSUM3_LEN
 42751                                  	;mov	ax,4EDEh
 42752 000073F1 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 42753 000073F4 E83500                  	call	chk_patchsum		; check if patch and chk sum compare
 42754 000073F7 7217                    	jc	short ep_notpacked	; Q: did we pass the test
 42755                                  					; N: exit
 42756                                  					; Y: overlay code with new
 42757 000073F9 BE[F271]                	mov	si,str1
 42758                                  	;;mov	cx,3
 42759                                  	;mov	cx,first_stop
 42760                                  	; 21/03/2024
 42761 000073FC B103                    	mov	cl,first_stop ; 3
 42762 000073FE F3A4                    	rep	movsb
 42763 00007400 B048                    	mov	al,48h			; al = opcode for dec ax
 42764 00007402 AA                      	stosb
 42765                                  	;add	si,2
 42766                                  	; 21/03/2024
 42767 00007403 46                      	inc	si
 42768 00007404 46                      	inc	si
 42769                                  	;;mov	cx,20
 42770                                  	;mov	cx,second_stop
 42771                                  	; 21/03/2024
 42772 00007405 B114                    	mov	cl,second_stop ; 20
 42773 00007407 F3A4                    	rep	movsb
 42774 00007409 AA                      	stosb				; put in dec ax
 42775                                  	;add	si,2
 42776                                  	; 21/03/2024
 42777 0000740A 46                      	inc	si
 42778 0000740B 46                      	inc	si
 42779                                  	;;mov	cx,75
 42780                                  	;mov	cx,last_stop
 42781                                  	; 21/03/2024
 42782 0000740C B14B                    	mov	cl,last_stop ; 75
 42783 0000740E F3A4                    	rep	movsb
 42784                                  
 42785                                  ep_notpacked:
 42786                                  	;stc
 42787                                  ep_done:
 42788 00007410 5F                      	pop	di
 42789 00007411 5E                      	pop	si
 42790 00007412 59                      	pop	cx
 42791 00007413 58                      	pop	ax
 42792 00007414 07                      	pop	es
 42793 00007415 1F                      	pop	ds
 42794 00007416 5B                      	pop	bx
 42795 00007417 C3                      	retn
 42796                                  
 42797                                  ;-------------------------------------------------------------------------
 42798                                  ;
 42799                                  ; 	Procedure Name	: chk_common_str
 42800                                  ;
 42801                                  ;	Input		: DS = DOSCODE
 42802                                  ;			; ES:DI points to string in packed file
 42803                                  ;
 42804                                  ;	Output		; Z if match else NZ
 42805                                  ;
 42806                                  ;-------------------------------------------------------------------------
 42807                                  
 42808                                  	; 23/05/2019 - Retro DOS v4.0
 42809                                  chk_common_str:
 42810 00007418 BE[2273]                	mov	si,scan_com
 42811                                  					; ds:si -> scan string
 42812                                  	;mov	cx,32
 42813 0000741B B92000                  	mov	cx,size_scan_com
 42814                                  
 42815 0000741E F3A6                    	repe	cmpsb
 42816                                  
 42817                                  					; M046 - start
 42818                                  	; a fourth possible version of these exepacked programs have a
 42819                                  	; 056h instead of 06Bh. See scan_com above
 42820                                  	;
 42821                                  	; 	db  75h, 6Bh		;jne CorruptExe
 42822                                  	;
 42823                                  	; If the mismatch at this point is due to a 56h instead of 6Bh
 42824                                  	; we shall try to match the rest of the string
 42825                                  	;
 42826                                  
 42827 00007420 7409                    	jz	short ccs_done
 42828 00007422 26807DFF56              	cmp	byte [es:di-1],56h
 42829 00007427 7502                    	jnz	short ccs_done
 42830                                  
 42831 00007429 F3A6                    	repe	cmpsb
 42832                                  ccs_done:				; M046 - end
 42833 0000742B C3                      	retn
 42834                                  
 42835                                  ;-------------------------------------------------------------------------
 42836                                  ;
 42837                                  ;	Procedure Name	: chk_patchsum
 42838                                  ;
 42839                                  ;	Input		: DS:SI -> string we're looking for
 42840                                  ;			: ES:DI -> offset in packed file
 42841                                  ;			: CX 	= scan length
 42842                                  ;			: BX	= length of check sum
 42843                                  ;			: AX 	= value of check sum
 42844                                  ;
 42845                                  ;	Output		: if patch & check sum compare
 42846                                  ;				NC
 42847                                  ;			  else
 42848                                  ;				CY
 42849                                  ;
 42850                                  ;	Uses		: AX, BX, CX, SI
 42851                                  ;
 42852                                  ;-------------------------------------------------------------------------
 42853                                  
 42854                                  	; 23/05/2019 - Retro DOS v4.0
 42855                                  chk_patchsum:
 42856 0000742C 57                      	push	di
 42857                                  
 42858 0000742D F3A6                    	repe	cmpsb
 42859                                  
 42860 0000742F 7517                    	jnz	short cp_fail		; Q: does the patch match
 42861                                  					; N: exit
 42862                                  					; Y:
 42863                                  
 42864                                  		; we do a check sum starting from the location of the
 42865                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 42866                                  		; unpacking code.
 42867                                  
 42868 00007431 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 42869 00007436 89D9                    	mov	cx,bx			; cx = length of check sum
 42870                                  
 42871 00007438 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 42872 0000743A 31C0                    	xor	ax,ax
 42873                                  ep_chksum:
 42874 0000743C 260305                  	add	ax,[es:di]
 42875                                  	;add	di,2
 42876                                  	; 01/07/2024
 42877 0000743F 47                      	inc	di
 42878 00007440 47                      	inc	di
 42879 00007441 E2F9                    	loop	ep_chksum
 42880                                  
 42881 00007443 5F                      	pop	di			; restore di
 42882                                  
 42883 00007444 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 42884                                  	;jne	short cp_fail		; N: exit
 42885                                  					; Y:
 42886                                  	; 25/09/2023
 42887                                  	;clc	
 42888                                  	;retn
 42889 00007446 74E3                    	je	short ccs_done ; cf=0
 42890                                  	
 42891                                  cp_fail:
 42892 00007448 F9                      	stc
 42893 00007449 C3                      	retn
 42894                                  
 42895                                  ; 28/12/2022 - Retro DOS v4.1
 42896                                  %if 0
 42897                                  ;--------------------------------------------------------------------------- 
 42898                                  
 42899                                  
 42900                                  ; M020 : BEGIN
 42901                                  ;
 42902                                  ;---------------------------------------------------------------------------
 42903                                  ;
 42904                                  ; procedure : RationalPatch
 42905                                  ;
 42906                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 42907                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 42908                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 42909                                  ;
 42910                                  ; THE BUG is in the following code sequence:
 42911                                  ;
 42912                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 42913                                  ;90		even				; word align
 42914                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 42915                                  ;e8 xx xx	call	set_A20			; enable A20
 42916                                  ;
 42917                                  ; This patch routine replaces the mov & the loop with a far call into a
 42918                                  ; routine in DOS data segment which is in low memory (because A20 line
 42919                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 42920                                  ; a mov & loop.
 42921                                  ;
 42922                                  ; Identification of Buggy Rational EXE
 42923                                  ; ====================================
 42924                                  ;
 42925                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 42926                                  ;
 42927                                  ; OFFSET				Contains
 42928                                  ; ------				--------
 42929                                  ; 0000h			100 times Version number in binary
 42930                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 42931                                  ;
 42932                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 42933                                  ;
 42934                                  ; 002ah			offset where version number is stored in ASCII
 42935                                  ;				e.g. '3.48A'
 42936                                  ;
 42937                                  ; 0030h			offset of copyright string. Copyright strings either
 42938                                  ;			start with "DOS/16M Copyright...." or
 42939                                  ;			"Copyright.....". The string contains
 42940                                  ;			"Rational Systems, Inc."
 42941                                  ;
 42942                                  ; 0020h			word : Paragraph offset of the buggy code segment
 42943                                  ;				from the program image
 42944                                  ; 0016h			word : size of buggy code segment
 42945                                  ;
 42946                                  ;	Buggy code is definite to start after offset 200h in its segment
 42947                                  ;
 42948                                  ;----------------------------------------------------------------------------
 42949                                  
 42950                                  ; 23/05/2019 - Retro DOS v4.0
 42951                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 42952                                  
 42953                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42954                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 42955                                  
 42956                                  RScanPattern1:
 42957                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 42958                                  
 42959                                  RLen1 equ $ - RScanPattern1
 42960                                  
 42961                                  RScanPattern2:
 42962                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 42963                                  
 42964                                  RLen2 equ $ - RScanPattern2
 42965                                  
 42966                                  RScanPattern3:
 42967                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 42968                                  
 42969                                  RLen3 equ $ - RScanPattern2
 42970                                  
 42971                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 42972                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 42973                                  
 42974                                  ;----------------------------------------------------------------------------
 42975                                  ;
 42976                                  ; INPUT : ES = segment where program got loaded
 42977                                  ;
 42978                                  ;----------------------------------------------------------------------------
 42979                                  
 42980                                  RationalPatch:
 42981                                  	cld
 42982                                  
 42983                                  ; 21/03/2024
 42984                                  %if 0
 42985                                  	push	ax
 42986                                  	push	bx
 42987                                  	push	cx
 42988                                  	push	dx
 42989                                  	push	si
 42990                                  	push	di
 42991                                  %else
 42992                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 42993                                  	;;;
 42994                                  	pusha
 42995                                  	;;;
 42996                                  %endif
 42997                                  	push	es
 42998                                  	push	ds			; we use all of them
 42999                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 43000                                  	push	cs
 43001                                  	pop	ds
 43002                                  	
 43003                                  	mov	si,RScanPattern1
 43004                                  	;mov	cx,10
 43005                                  	mov	cx,RLen1
 43006                                  	rep	cmpsb			; do we have the pattern ?
 43007                                  	jne	short rpexit
 43008                                  	mov	ax,[es:0]
 43009                                  	cmp	ax,348			; is it a buggy version ?
 43010                                  	jb	short rpexit
 43011                                  	cmp	ax,383			; is it a buggy version ?
 43012                                  	ja	short rpexit
 43013                                  
 43014                                  	call	VerifyVersion
 43015                                  	jne	short rpexit
 43016                                  
 43017                                  	mov	cx,[es:16h]		; Length of buggy code seg
 43018                                  	sub	cx,200h			; Length we search (we start
 43019                                  					;  at offset 200h)
 43020                                  	mov	es,[es:20h]		; es=buggy code segment
 43021                                  	mov	si,RScanPattern2
 43022                                  	;mov	dx,8	
 43023                                  	mov	dx,RLen2
 43024                                  	call	ScanCodeSeq		; look for code seq with nop
 43025                                  	jz	short rpfound
 43026                                  
 43027                                  	mov	si,RScanPattern3
 43028                                  	;mov	dx,15
 43029                                  	mov	dx,RLen3
 43030                                  	call	ScanCodeSeq		; look for code seq w/o nop
 43031                                  	jnz	short rpexit
 43032                                  
 43033                                  rpfound:
 43034                                  	
 43035                                  ;	we set up a far call into DOS data
 43036                                  ;	dx has the length of the code seq we were searching for
 43037                                  
 43038                                  	mov	al,9Ah			; far call opcode
 43039                                  	stosb
 43040                                  	mov	ax,RatBugCode
 43041                                  	stosw
 43042                                  	mov	ax,ss
 43043                                  	stosw
 43044                                  	mov	cx,dx
 43045                                  	sub	cx,6			; filler (with NOPs)
 43046                                  	mov	al,90h
 43047                                  	rep	stosb
 43048                                  rpexit:
 43049                                  	pop	ds
 43050                                  	pop	es
 43051                                  
 43052                                  ; 21/03/2024
 43053                                  %if 0
 43054                                  	pop	di
 43055                                  	pop	si
 43056                                  	pop	dx
 43057                                  	pop	cx
 43058                                  	pop	bx
 43059                                  	pop	ax
 43060                                  %else
 43061                                  	; 21/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43062                                  	;;;
 43063                                  	popa
 43064                                  	;;;
 43065                                  %endif
 43066                                  	retn
 43067                                  
 43068                                  ; M020 END
 43069                                  
 43070                                  ;--------------------------------------------------------------------------- 
 43071                                  %endif	; 28/12/2022
 43072                                  
 43073                                  ;---------------------------------------------------------------------------
 43074                                  ;
 43075                                  ;	M068
 43076                                  ;
 43077                                  ; 	Procedure Name	: IsCopyProt
 43078                                  ;
 43079                                  ;	Inputs		: DS:100 -> start of com file just read in
 43080                                  ;
 43081                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 43082                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 43083                                  ;			  copy protect scheme that relies on the A20 line
 43084                                  ;			  being turned off for it's scheme to work.
 43085                                  ;
 43086                                  ;			  Note: The int 21 function dispatcher will turn 
 43087                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 43088                                  ;				and dec the A20OFF_COUNT before	iretting 
 43089                                  ;				to the user. 
 43090                                  ;
 43091                                  ;	Uses		: ES, DI, SI, CX
 43092                                  ;
 43093                                  ;---------------------------------------------------------------------------
 43094                                  
 43095                                  ; 23/05/2019 - Retro DOS v4.0
 43096                                  
 43097                                  CPStartOffset	EQU	0175h
 43098                                  CPID1Offset	EQU	011Bh
 43099                                  CPID2Offset	EQU	0173h
 43100                                  CPID3Offset	EQU	0146h
 43101                                  CPID4Offset	EQU	0124h
 43102                                  ID1		EQU	05343h
 43103                                  ID2		EQU	05044h
 43104                                  ID3		EQU	0F413h
 43105                                  ID4		EQU	08000h
 43106                                  
 43107                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 43108                                  
 43109                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43110                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 43111                                  
 43112                                  CPScanPattern:
 43113 0000744A 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 43114 0000744E 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 43115 00007452 C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 43116 00007458 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 43117 0000745C B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 43118 0000745F BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 43119                                  
 43120                                  CPSPlen	EQU $ - CPScanPattern
 43121                                  
 43122                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 43123                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 43124                                  
 43125                                  IsCopyProt:
 43126 00007462 813E1B014353            	cmp	word [CPID1Offset],ID1
 43127 00007468 752D                    	jne	short CP_done
 43128                                  
 43129 0000746A 813E73014450            	cmp	word [CPID2Offset],ID2
 43130 00007470 7525                    	jne	short CP_done
 43131                                  
 43132 00007472 813E460113F4            	cmp	word [CPID3Offset],ID3
 43133 00007478 751D                    	jne	short CP_done
 43134                                  
 43135 0000747A 813E24010080            	cmp	word [CPID4Offset],ID4
 43136 00007480 7515                    	jne	short CP_done
 43137                                  
 43138 00007482 0E                      	push	cs
 43139 00007483 07                      	pop	es
 43140 00007484 BF[4A74]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 43141                                  
 43142 00007487 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 43143                                  					; of pattern
 43144                                  
 43145 0000748A B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 43146 0000748D F3A6                    	repe	cmpsb
 43147 0000748F 7506                    	jnz	short CP_done
 43148                                  
 43149 00007491 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 43150                                  CP_done:
 43151 00007497 C3                      	retn
 43152                                  	
 43153                                  ;DOSCODE ENDS
 43154                                  
 43155                                  	;END
 43156                                  
 43157                                  ;----------------------------------------------------------------------------
 43158                                  
 43159                                  ;align 2 ; 05/09/2018 (Error!)
 43160                                  
 43161                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43162                                  ;align 16 ; 08/09/2018 (OK.)
 43163                                  align 2
 43164                                  
 43165                                  ; 06/08/2018 - Retro DOS v3.0
 43166                                  ;============================================================================
 43167                                  ; MSINIT.ASM
 43168                                  ;============================================================================
 43169                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 43170                                  ;
 43171                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43172                                  ;
 43173                                  	; 15/07/2018 - Retro DOS v3.0
 43174                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 43175                                  
 43176                                  ; temp iret instruction
 43177                                  
 43178                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43179                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 43180                                  
 43181                                  initiret: ; MSDOS 6.0
 43182                                  SYSBUF:
 43183                                  ;IRETT: ; 06/05/2019
 43184 00007498 CF                      	iret
 43185                                  
 43186                                  ; 22/04/2019 - Retro DOS v4.0
 43187                                  
 43188                                  ; pointer to the BIOS data segment that will be available just to the
 43189                                  ; initialization code
 43190                                  
 43191 00007499 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 43192                                  
 43193                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43194                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 43195                                  
 43196                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 43197                                  
 43198                                  ParaRound:
 43199 0000749B 83C00F                  	add	ax, 15
 43200 0000749E D1D8                    	rcr	ax, 1
 43201 000074A0 D1E8                    	shr	ax, 1
 43202 000074A2 D1E8                    	shr	ax, 1
 43203 000074A4 D1E8                    	shr	ax, 1
 43204 000074A6 C3                      	retn
 43205                                  
 43206                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 43207                                  
 43208                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43209                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 43210                                  	
 43211                                  	; 30/05/2019
 43212                                  	; 22/04/2019 - Retro DOS v4.0
 43213                                  	; 07/07/2018 - Retro DOS v3.0
 43214                                  	; Retro DOS v2.0 - 03/03/2018
 43215                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43216                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 43217                                  DOSINIT:
 43218                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 43219                                  	;
 43220                                  	; Far call from SYSINIT
 43221                                  	; DX = Memory size in paragraphs
 43222                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 43223                                  	;	  (Retro DOS v2.0, 16/03/2018)
 43224                                  	;
 43225                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 43226                                  	;	  (Retro DOS v4.0, 20/04/2019)
 43227                                  
 43228 000074A7 FA                              CLI
 43229 000074A8 FC                              CLD
 43230                                  
 43231                                  	; 03/11/2022
 43232                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 43233                                  	
 43234                                  	; 17/12/2022
 43235                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43236                                  	;push	dx ; =*=		; save parameters from BIOS
 43237                                  	
 43238 000074A9 56                      	push	si
 43239 000074AA 1E                      	push	ds
 43240 000074AB 57                      	push	di			;save di (ptr to BiosComBlock)
 43241                                  
 43242 000074AC 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 43243                                  
 43244                                  ; First, move the DOS data segment to its final location in low memory
 43245                                  
 43246                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 43247                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h
 43248 000074AE B8[1D79]                	mov	ax,MEMSTRT		; get offset of end of init code
 43249                                  
 43250                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 43251                                  	;and	ax,~15	; 0FFF0h	; boundary
 43252                                  
 43253                                  	;mov	si,ax			; si = offset of DOSDATA in current
 43254                                  					; code segment
 43255                                  
 43256                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43257 000074B1 83C00F                  	add	ax,15			; round to nearest paragraph
 43258                                  	;and	ax,~15			; boundary
 43259                                  	; 12/04/2024
 43260 000074B4 24F0                    	and	al,0F0h
 43261                                  
 43262 000074B6 89C6                    	mov	si,ax			; si = offset of DOSDATA in current
 43263                                  					; code segment
 43264                                  	; 05/12/2022
 43265                                  	; 30/04/2019 - Retro DOS v4.0
 43266                                  	;xor	si,si
 43267                                  	
 43268                                  	;mov	ax,cs
 43269                                  	;mov	ds,ax			; ds = current code segment
 43270                                  					; DS:SI now points to dosdata
 43271                                  	; 22/03/2024
 43272 000074B8 0E                      	push	cs
 43273 000074B9 1F                      	pop	ds
 43274                                  
 43275                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 43276                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 43277                                  					;  BData segment. Cannot use
 43278                                  					;  getdseg macro here!!!
 43279                                  	; 17/12/2022
 43280 000074BA 8E06[9974]              	mov	es,[InitBioDataSeg]
 43281                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43282                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 43283                                  
 43284                                  	;mov	es,[es:3]
 43285 000074BE 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 43286                                  
 43287 000074C3 31FF                    	xor	di,di			; ES:DI now points to RAM data
 43288                                  
 43289                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 43290                                  	;mov	cx,4976  ; 25/05/2019
 43291                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43292                                  	;mov	cx,4962
 43293                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 43294 000074C5 B9CF12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 43295 000074C8 F3A4                    	rep	movsb			; move data to final location
 43296                                  	
 43297 000074CA 5F                      	pop	di			; restore ptr to BiosComBlock
 43298 000074CB 1F                      	pop	ds			; restore parms from BIOS
 43299 000074CC 5E                      	pop	si
 43300                                  	; 17/12/2022
 43301                                  	;pop	dx ; 30/05/2019
 43302                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43303                                  	;pop	dx ; =*=
 43304                                  
 43305 000074CD 06                      	push	es
 43306 000074CE 1E                      	push	ds
 43307 000074CF 07                      	pop	es			; es:si -> device chain
 43308 000074D0 1F                      	pop	ds			; ds points to dosdata
 43309                                  
 43310                                  ;SR;
 43311                                  ;We get a ptr to the BIOS exchange data block. This has been setup right
 43312                                  ;now so that the EXEC call knows when SysInit is present to do the special
 43313                                  ;lie table handling for device drivers. This can be expanded later on to
 43314                                  ;establish a communication block from the BIOS to the DOS.
 43315                                  
 43316                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 43317                                  	;mov	[1042h],bx
 43318 000074D1 893E[4010]              	mov	[BiosDataPtr],di
 43319 000074D5 891E[4210]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 43320                                  
 43321 000074D9 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 43322                                  
 43323                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 43324                                  
 43325 000074DE 2E8C1E[254F]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 43326 000074E3 2E8C1E[294F]            	mov	[cs:LowInt24Addr+2],ds
 43327 000074E8 2E8C1E[2D4F]            	mov	[cs:LowInt28Addr+2],ds
 43328                                  
 43329                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 43330                                  	;mov	[584h],sp
 43331                                  	;mov	[586h],ss
 43332 000074ED 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 43333 000074F1 8926[8405]              	mov	[USER_SP],sp
 43334 000074F5 8C16[8605]              	mov	[USER_SS],ss
 43335                                  
 43336                                  	;mov	ax,ds		; set up ss:sp to dosdata:dskstack
 43337                                  	;mov	ss,ax
 43338                                  	; 01/07/2024
 43339 000074F9 1E                      	push	ds
 43340 000074FA 17                      	pop	ss
 43341                                  
 43342                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 43343                                  	;mov	sp,offset dosdata:dskstack
 43344 000074FB BC[2009]                	mov	sp,DSKSTACK
 43345                                  
 43346                                  ;M023
 43347                                  ; Init patch ptrs to default values
 43348                                  
 43349                                  ; 22/03/2024
 43350                                  %if 0
 43351                                  	;mov	word [1212h],RetExePatch
 43352                                  	;mov	word [1214h],RetExePatch
 43353                                  	;mov	word [61h],RetExePatch
 43354                                  	mov	word [FixExePatch],RetExePatch	; M023
 43355                                  	; 28/12/2022 - Retro DOS v4.1
 43356                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 43357                                  	mov	word [ChkCopyProt],RetExePatch	; M068
 43358                                  %else
 43359                                  	; 22/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43360                                  	;;;	
 43361 000074FE B8[8560]                	mov	ax,RetExePatch
 43362 00007501 A3[1212]                	mov	[FixExePatch],ax
 43363                                  	;mov	[RationalPatchPtr],ax
 43364 00007504 A3[6100]                	mov	[ChkCopyProt],ax
 43365                                  	;;;
 43366                                  %endif
 43367                                  
 43368                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43369                                  %if 0	
 43370                                  
 43371                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 43372                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 43373                                  ; running in the HMA.
 43374                                  
 43375                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 43376                                  	cmp	al,2		;   386 or later?
 43377                                  	mov	ax,Rational386Patch
 43378                                  	jae	short di_set_patch
 43379                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 43380                                  di_set_patch:
 43381                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 43382                                  
 43383                                  %endif
 43384                                  	; Set up the variable temp_dosloc to point to the dos code segment
 43385                                  
 43386 00007507 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 43387                                  
 43388                                  	; ax now holds segment of DOS code
 43389 00007509 A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 43390                                  
 43391 0000750C 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 43392 00007510 8936[4800]              	mov	word [NULDEV],si
 43393                                  ;SR;
 43394                                  ; There are some locations in the Win386 instance data structures
 43395                                  ; which need to be set up with the DOS data segment. First, initialize
 43396                                  ; the segment part of the instance table pointer in the SIS.
 43397                                  
 43398                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]
 43399 00007514 8C1E[F20F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 43400                                  
 43401                                  ; Now initialize the segment part of the pointer to the data in each
 43402                                  ; instance table entry.
 43403                                  
 43404 00007518 56                      	push	si		; preserve pointer to device chain
 43405                                  	; 18/12/2022
 43406                                  	; cx = 0
 43407 00007519 B107                    	mov	cl,7
 43408                                  	;mov	cx,7		; There are 7 entries in the instance table
 43409                                  				; M019
 43410                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 43411 0000751B BE[F60F]                	mov	si,Instance_Table+2 ; point si to segment field
 43412                                  Instance_init_loop:
 43413 0000751E 8C1C                    	mov	[si],ds		; set offset in instance entry
 43414                                  	;add	si,6
 43415 00007520 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 43416 00007523 E2F9                    	loop	Instance_init_loop
 43417                                  
 43418                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 43419                                  
 43420                                  	; 18/12/2022
 43421 00007525 B105                    	mov	cl,5
 43422                                  	;mov	cx,5		; There are five entries in the instance table
 43423                                  
 43424                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 43425                                  	;mov	si,11EDh	; point si to segment field
 43426 00007527 BE[ED11]                	mov	si,OldInstanceJunk+6
 43427                                  OldInstance_init_loop:
 43428 0000752A 8C1C                    	mov	[si],ds		; set offset in instance entry
 43429 0000752C 83C606                  	add	si,6		; move on to next entry
 43430 0000752F E2F9                    	loop	OldInstance_init_loop
 43431 00007531 5E                      	pop	si		; restore pointer to device chain
 43432                                  
 43433                                  ; End of WIN386 2.xx compatibility bullshit
 43434                                  
 43435                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43436                                  %if 0	
 43437                                     	; 30/04/2019
 43438                                  	;push	es
 43439                                  	;pop	ds
 43440                                  			; ds:si points to console device
 43441                                  
 43442                                  	; 24/04/2019 - Retro DOS v4.0
 43443                                  
 43444                                  	; 15/07/2018
 43445                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 43446                                  	; (Set INT 2Ah handler address to an 'IRET')
 43447                                  
 43448                                  	; need crit vector inited to use deviocall
 43449                                  	;push	ds			; preserve segment of device chain
 43450                                  	push	es ; 30/04/2019
 43451                                  
 43452                                  %endif
 43453                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43454 00007532 06                      	push	es
 43455                                  	; 17/12/2022
 43456                                  	;pop	ds
 43457                                  	;push	ds
 43458                                  
 43459 00007533 31C0                    	xor	ax,ax
 43460 00007535 8ED8                    	mov	ds,ax			; point DS to int vector table
 43461 00007537 B8[9874]                	mov	ax,initiret
 43462                                  	;mov	[0A8h],ax  ; [2Ah*4]
 43463 0000753A A3A800                  	mov	[addr_int_ibm],ax
 43464 0000753D 8CC8                    	mov	ax,cs
 43465                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2]
 43466 0000753F A3AA00                  	mov	[addr_int_ibm+2],ax
 43467 00007542 1F                      	pop	ds			; restore segment of device chain
 43468                                  
 43469 00007543 E81A02                  	call	CHARINIT  		; initialize console driver
 43470 00007546 56                      	push	si			; save pointer to header
 43471                                  
 43472 00007547 16                      	push	ss			; move pointer to dos data...
 43473 00007548 07                      	pop	es			; ...into ES
 43474                                  
 43475                                  	;initialize sft for file 0 (CON)
 43476                                  
 43477                                          ; 07/07/2018 - Retro DOS v3.0
 43478                                  	; 24/04/2019 - Retro DOS v4.0
 43479                                  	;mov	di,SFTABL+6 
 43480 00007549 BF[D200]                	MOV	DI,SFTABL+SFT.SFTable	; Point to sft 0
 43481 0000754C B80300                  	MOV	AX,3
 43482 0000754F AB                      	STOSW           	; Refcount
 43483                                          ;DEC	AL
 43484                                  	; 22/03/2024
 43485 00007550 48                      	dec	ax
 43486 00007551 AB                      	STOSW			; Access rd/wr, compatibility
 43487 00007552 30C0                    	XOR	AL,AL
 43488 00007554 AA                      	STOSB           	; attribute
 43489                                  	;mov	al,0C3h
 43490 00007555 B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 43491 00007557 AB                      	STOSW			; flags
 43492 00007558 89F0                    	mov	ax,si
 43493 0000755A AB                      	stosw			; device pointer in devptr
 43494 0000755B 8CD8                    	mov	ax,ds
 43495 0000755D AB                      	stosw
 43496 0000755E 31C0                    	xor	ax,ax	; 0
 43497 00007560 AB                      	stosw			; firclus
 43498 00007561 AB                      	stosw			; time
 43499 00007562 AB                      	stosw			; date
 43500 00007563 48                      	dec	ax	; -1
 43501 00007564 AB                      	stosw			; size
 43502 00007565 AB                      	stosw
 43503 00007566 40                      	inc	ax	; 0
 43504 00007567 AB                      	stosw			; position
 43505 00007568 AB                      	stosw
 43506                                  	;add	di,7
 43507 00007569 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 43508                                  				; point at name
 43509                                  	;add	si,10
 43510 0000756C 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 43511                                  				; point to name
 43512 0000756F B90400                  	mov	cx,4
 43513 00007572 F3A5                    	rep	movsw		; name
 43514 00007574 B103                    	mov	cl,3
 43515 00007576 B020                    	mov	al," "
 43516 00007578 F3AA                    	rep	stosb		; extension
 43517                                  
 43518 0000757A 5E                      	pop	si		; get back pointer to header
 43519                                  
 43520                                  				; mark device as CON I/O
 43521                                  	; 15/07/2018
 43522                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 43523 0000757B 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 43524                                  	; 12/03/2018
 43525                                  	;mov	[ss:32h],si
 43526 0000757F 368936[3200]            	MOV     [SS:BCON],SI
 43527                                  	;mov	[ss:34h],ds
 43528 00007584 368C1E[3400]                    MOV     [SS:BCON+2],DS
 43529                                  
 43530                                  	; initialize each device until the clock device is found
 43531                                  
 43532                                  CHAR_INIT_LOOP:
 43533 00007589 C534                            LDS     SI,[SI]			; AUX device
 43534 0000758B E8D201                  	call	CHARINIT 
 43535                                         	;15/07/2018
 43536                                  	;test	byte [SI+4],8
 43537 0000758E F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 43538 00007592 74F5                            JZ      SHORT CHAR_INIT_LOOP
 43539                                  	; 12/03/2018
 43540                                  	;mov	[ss:2Eh],si
 43541 00007594 368936[2E00]                    MOV     [SS:BCLOCK],SI
 43542                                  	;mov	[ss:30h],ds
 43543 00007599 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 43544                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 43545                                  
 43546                                  	;mov	bp,4970			; bp = pointer to free mem
 43547                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 43548                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 43549                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 43550 0000759E BDCF12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 43551                                  
 43552 000075A1 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 43553 000075A6 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 43554                                  PERDRV:
 43555                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 43556 000075AB C534                            LDS	SI,[SI]			; Next device
 43557 000075AD 83FEFF                          CMP	SI,-1	; 0FFFFh
 43558 000075B0 7479                    	JZ	SHORT CONTINIT
 43559                                  
 43560 000075B2 E8AB01                          call	CHARINIT
 43561                                  
 43562                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 43563                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 43564                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 43565                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 43566                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 43567                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 43568                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 43569                                  
 43570                                          ; 15/07/2018
 43571                                  	;test	word [SI+4],8000h		; DEVTYP
 43572                                          ; 17/12/2022
 43573                                  	;test	byte [SI+5],80h
 43574 000075B5 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 43575                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 43576 000075B9 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 43577                                  
 43578 000075BB 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 43579 000075C0 30ED                    	XOR     CH,CH
 43580                                          ; 07/07/2018
 43581                                  	;MOV	[SI+10],CL		; Number of units in name field
 43582 000075C2 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname
 43583 000075C5 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 43584 000075CA 30F6                    	XOR     DH,DH
 43585 000075CC 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 43586 000075D1 1E                      	PUSH    DS
 43587 000075D2 56                              PUSH    SI
 43588 000075D3 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 43589                                  
 43590                                  PERUNIT:
 43591 000075D8 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 43592 000075DA 43                              INC     BX
 43593 000075DB 43                              INC     BX                      ; On to next BPB
 43594                                  	; 15/12/2022
 43595                                  	; 07/07/2018
 43596                                          ;mov	[ES:BP+DPB.DRIVE],DL
 43597 000075DC 26885600                	MOV     [ES:BP],DL
 43598                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43599                                  	;;mov	[ES:BP+0],DL
 43600                                  	;mov	[ES:BP+DPB.DRIVE],DL
 43601                                  
 43602                                  	;MOV	[ES:BP+1],DH
 43603 000075E0 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 43604 000075E4 53                              PUSH    BX
 43605 000075E5 51                              PUSH    CX
 43606 000075E6 52                              PUSH    DX
 43607                                  
 43608                                          ;invoke	$SETDPB
 43609 000075E7 E8C999                          CALL	_$SETDPB		; build DPB!
 43610                                  
 43611                                  	; 07/07/2018
 43612                                  	;MOV	AX,[ES:BP+2]
 43613 000075EA 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 43614                                          ; 12/03/2018
 43615 000075EE 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 43616 000075F3 7604                    	JBE     SHORT NOTMAX		; N:
 43617 000075F5 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 43618                                  NOTMAX:					
 43619                                  	; set the next dpb field in the currently built bpb
 43620                                  	; and mark as never accessed
 43621                                          
 43622                                  	; 24/04/2019
 43623 000075F9 89E8                    	mov	ax,bp			; get pointer to DPB
 43624                                  	;add	ax,33
 43625 000075FB 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 43626                                  					; set seg & offset of next DPB
 43627                                  	;mov	[es:bp+25],ax
 43628 000075FE 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 43629                                  	;mov	[es:bp+27],es
 43630 00007602 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 43631                                  					; mark as never accessed
 43632                                  	;mov	byte [es:bp+24],0FFh
 43633 00007606 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 43634                                  
 43635 0000760B 5A                      	POP     DX
 43636 0000760C 59                              POP     CX
 43637 0000760D 5B                              POP     BX
 43638 0000760E 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 43639 00007610 5E                              POP     SI
 43640 00007611 1F                              POP     DS
 43641                                  					; ds:si -> device header
 43642                                  					; store it in the corresponding dpb
 43643                                  	; 07/07/2018
 43644                                  	;MOV	[ES:BP+19],SI ; 24/04/2019
 43645 00007612 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 43646                                  	;MOV	[ES:BP+21],DS ; 24/04/2019
 43647 00007616 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 43648                                  
 43649 0000761A 1E                      	PUSH	DS			; save pointer to device header
 43650 0000761B 56                      	PUSH	SI
 43651 0000761C FEC6                    	INC	DH			; inc unit #
 43652 0000761E FEC2                    	INC	DL			; inc drive #
 43653 00007620 8ED8                    	MOV	DS,AX			; restore segment of BPB array
 43654                                  	;add	bp,33 ; 24/04/2019
 43655 00007622 83C521                  	ADD	BP,DPBSIZ		; advance pointer to next dpb
 43656 00007625 E2B1                    	LOOP	PERUNIT			; process all units in each driver
 43657                                  
 43658 00007627 5E                      	POP     SI			; restore pointer to device header
 43659 00007628 1F                      	POP     DS
 43660 00007629 EB80                    	JMP	PERDRV			; process all drivers in chain
 43661                                  
 43662                                  CONTINIT:
 43663                                  	; 24/04/2019
 43664                                  	;sub	bp,33			; set link in last DPB to -1
 43665 0000762B 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 43666                                  					; set last link offset & segment
 43667                                  ; 23/03/2024 - Retro DOS v4.1
 43668                                  %if 0
 43669                                  	;mov	word [bp+25],0FFFFh
 43670                                  	mov	word [bp+DPB.NEXT_DPB],-1
 43671                                  	;mov	word [bp+27],0FFFFh
 43672                                  	mov	word [bp+DPB.NEXT_DPB+2],-1
 43673                                  %else
 43674                                  	; 23/03/2024 (PCDOS 7.1 IBMDOS.COM)
 43675                                  	;;;
 43676 0000762E B8FFFF                  	mov	ax,0FFFFh ; -1
 43677                                  	;mov	word [bp+25],ax
 43678 00007631 894619                  	mov	word [bp+DPB.NEXT_DPB],ax ; -1
 43679                                  	;mov	word [bp+27],ax
 43680 00007634 89461B                  	mov	word [bp+DPB.NEXT_DPB+2],ax ; -1
 43681                                  	;;;
 43682                                  %endif
 43683                                  	;add	bp,33
 43684 00007637 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 43685                                  					; the DPB chain is done.
 43686 0000763A 16                      	push	ss
 43687 0000763B 1F                      	pop	ds
 43688                                  
 43689 0000763C 89E8                    	mov	ax,bp
 43690 0000763E E85AFE                  	call	ParaRound		; round up to segment
 43691                                  
 43692 00007641 8CDA                    	mov	dx,ds			; dx = dosdata segment
 43693 00007643 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 43694                                  
 43695 00007645 BB0F00                  	mov	bx,0Fh
 43696                                  	
 43697                                  	; 24/05/2019
 43698                                  	;mov	cx,[ENDMEM]
 43699                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43700                                  	; 17/12/2022
 43701                                  	;mov	cx,[ENDMEM]
 43702                                  					; set seg inpacketto dosdata
 43703 00007648 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds
 43704                                  
 43705                                  ; Patch in the segments of the interrupt vectors with current code segment.
 43706                                  ; Also patch in the segment of the pointers in the dosdata area.
 43707                                  ;
 43708                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 43709                                  ; calls were done. The procedure patch_misc_segments is called multiple
 43710                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 43711                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 43712                                  
 43713 0000764C 52                      	push	dx			; preserve first free segment
 43714                                  
 43715 0000764D A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 43716 00007650 8EC0                    	mov	es,ax			; es = segment of DOS
 43717 00007652 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 43718                                  
 43719 00007658 E8AF01                  	call	patch_vec_segments	; uses AX as doscode segment
 43720 0000765B E8E401                  	call	patch_misc_segments	; patch in segments for sharer and 
 43721                                  					; other tables with seg in ES.
 43722                                  	; 17/12/2022
 43723                                  	; cx = 0
 43724 0000765E 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 43725                                  
 43726 00007662 5A                      	pop	dx			; restore first free segment
 43727                                  
 43728                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 43729                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 43730                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 43731                                  ; low_mem_stub by seg_reinit.
 43732                                  
 43733                                  	;xor	ax,ax ; 0
 43734                                  	;mov	ds,ax
 43735                                  	;mov	es,ax
 43736                                  	; 17/12/2022
 43737                                  	; cx = 0
 43738                                  	;xor	cx,cx ; 0
 43739 00007663 8ED9                    	mov	ds,cx
 43740 00007665 8EC1                    	mov	es,cx
 43741                                  
 43742                                  	; set the segment of int 24 vector that was
 43743                                  	; left out by patch_vec_segments above.
 43744                                  
 43745                                  	; 17/12/2022
 43746                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43747                                  ;%if 0
 43748                                  	; 24/05/2019
 43749                                  	;;mov	di,90h
 43750                                  	;;mov	di,4*int_fatal_abort
 43751                                  	;mov	di,addr_int_fatal_abort
 43752 00007667 BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 43753                                  
 43754 0000766A 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 43755                                  	;mov	[di+2],ax  ; int 24h segment
 43756 0000766E 8905                    	mov	[di],ax ; 24/05/2019
 43757                                  
 43758                                  	;;mov	di,82h
 43759                                  	;mov	di,INTBASE+2
 43760                                  
 43761                                  ;%endif
 43762                                  	; 17/12/2022
 43763                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43764                                  	;;mov	di,90h
 43765                                  	;;mov	di,4*int_fatal_abort
 43766                                  	;mov	di,addr_int_fatal_abort
 43767                                  	;mov	ax,[ss:TEMP_DOSLOC]
 43768                                  	;mov	[di+2],ax  ; int 24h segment
 43769                                  	;;mov	di,82h
 43770                                  	;mov	di,INTBASE+2
 43771                                  
 43772                                  	; set default divide trap offset
 43773                                  
 43774                                  	;mov	word ptr ds:[0],offset doscode:divov
 43775 00007670 C7060000[FC50]          	mov	word [0],DIVOV
 43776                                  
 43777                                  	; set vectors 20-28 and 2a-3f to point to iret.
 43778                                  
 43779                                  	;mov	di,80h
 43780 00007676 BF8000                  	mov	di,INTBASE
 43781                                  	;mov	ax,offset doscode:irett
 43782 00007679 B8[E102]                	mov	ax,IRETT
 43783                                  
 43784                                  	; 17/12/2022
 43785                                  	; cx = 0
 43786 0000767C B109                    	mov	cl,9
 43787                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 43788                                  					;   sets offsets for ints 20h-28h
 43789                                  iset1:
 43790 0000767E AB                      	stosw
 43791                                  	;add	di,2
 43792                                  	; 20/06/2023
 43793 0000767F 47                      	inc	di
 43794 00007680 47                      	inc	di
 43795 00007681 E2FB                    	loop	iset1
 43796                                  
 43797 00007683 83C704                  	add	di,4			; skip vector 29h
 43798                                  
 43799                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 43800                                  ;					;   sets offsets for ints 2ah-2fh
 43801                                  ;iset2:
 43802                                  ;	stosw
 43803                                  ;	add	di,2
 43804                                  ;	loop	iset2
 43805                                  
 43806                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 43807                                  ; patch_vec_segments above. So skip it.
 43808                                  
 43809                                  ;	add	di,8			; skip vector 30h & 31h 
 43810                                  
 43811                                  	;;;
 43812                                  	; 06/05/2019 - Retro DOS v4.0
 43813                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 43814                                  	; 17/12/2022
 43815 00007686 B105                    	mov	cl,5 ; 28/06/2019
 43816                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43817                                  	;mov	cx,6
 43818                                  iset2:
 43819 00007688 AB                      	stosw
 43820                                  	;add	di,2
 43821                                  	; 20/09/2023
 43822 00007689 47                      	inc	di
 43823 0000768A 47                      	inc	di
 43824 0000768B E2FB                    	loop	iset2
 43825                                  
 43826                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43827                                  	; 17/12/2022
 43828 0000768D 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 43829                                  	;add	di,8
 43830                                  	;;;
 43831                                  
 43832                                  	; 17/12/2022
 43833 00007690 B10E                    	mov	cl,14
 43834                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 43835                                  					;   sets offsets for ints 32h-3fh
 43836                                  iset3:
 43837 00007692 AB                      	stosw
 43838                                  	;add	di,2
 43839                                  	; 20/09/2023
 43840 00007693 47                      	inc	di
 43841 00007694 47                      	inc	di
 43842 00007695 E2FB                    	loop	iset3
 43843                                  
 43844                                  ;if installed
 43845                                  	; set the offset of int2f handler
 43846                                  	;mov	word [0BCh],INT2F
 43847 00007697 C706BC00[0107]          	mov	word [02Fh*4],INT2F
 43848                                  	; set segment to doscode as we have to do int 2f to check for XMS
 43849 0000769D 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 43850                                  	;mov	[0BEh],ax
 43851 000076A1 A3BE00                  	mov	[(02Fh*4)+2],ax
 43852                                  ;endif
 43853                                  	; set up entry point call at vectors 30-31h. Note the segment of the
 43854                                  	; long jump will be patched in by seg_reinit
 43855                                  
 43856                                  	;mov	byte [C0h],0EAh
 43857 000076A4 C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 43858                                  	;mov	byte [C1h],CALL_ENTRY
 43859 000076A9 C706C100[E202]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 43860                                  
 43861 000076AF C7068000[DB02]          	mov	word [addr_int_abort],QUIT	; INT 20h
 43862 000076B5 C7068400[0703]          	mov	word [addr_int_command],COMMAND ; INT 21h
 43863 000076BB C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 43864 000076C1 89168A00                	mov	word [addr_int_terminate+2],dx
 43865 000076C5 C7069400[3105]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 43866 000076CB C7069800[B805]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 43867 000076D1 C7069C00[2860]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 43868                                  
 43869 000076D7 16                      	push	ss
 43870 000076D8 1F                      	pop	ds
 43871                                  	
 43872                                  	; 24/05/2019
 43873                                  	;push	ss
 43874                                  	;pop	es
 43875                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43876                                  	; 17/12/2022
 43877                                  	;push	ss
 43878                                  	;pop	es
 43879                                  
 43880 000076D9 52                      	push	dx			; remember address of arena
 43881                                  
 43882 000076DA 42                      	inc	dx			; leave room for arena header
 43883                                  	;mov	[330h],dx
 43884 000076DB 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 43885                                  
 43886 000076DF 31FF                    	xor	di,di			; point es:di at end of memory
 43887 000076E1 8EC2                    	mov	es,dx			; ...where psp will be
 43888 000076E3 31C0                    	xor	ax,ax
 43889                                  	;mov	cx,80h			; psp is 128 words
 43890                                  	; 17/12/2022
 43891 000076E5 B180                    	mov	cl,128 ; 28/06/2019
 43892                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43893                                  	;mov	cx,128
 43894                                  
 43895 000076E7 F3AB                    	rep	stosw			; zero out psp area
 43896 000076E9 A1[4603]                        mov     ax,[ENDMEM]
 43897                                  	
 43898                                  	; 17/12/2022
 43899                                  	; cx = 0
 43900 000076EC E8129A                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 43901                                  
 43902                                  	; ds, es now point to PSP
 43903                                  
 43904 000076EF 16                      	push	ss
 43905 000076F0 1F                      	pop	ds
 43906                                  
 43907                                  	;mov	di,24
 43908 000076F1 BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 43909 000076F4 31C0                    	xor	ax,ax
 43910 000076F6 AB                      	stosw
 43911 000076F7 AA                      	stosb				; 0,1 and 2 are con device
 43912 000076F8 B0FF                    	mov	al,0FFh
 43913                                  	;mov	cx,FILPERPROC-3 ; 17
 43914                                  	; 17/12/2022
 43915                                  	; cx = 4
 43916 000076FA B111                    	mov	cl,FILPERPROC-3 ; 17
 43917 000076FC F3AA                    	rep	stosb			; rest are unused
 43918                                  
 43919 000076FE 16                      	push	ss
 43920 000076FF 07                      	pop	es
 43921                                  					; must be set to print messages
 43922 00007700 8C1E[2C00]              	mov	[SFT_ADDR+2],ds
 43923                                  
 43924                                  ; after this point the char device functions for con will work for
 43925                                  ; printing messages
 43926                                  
 43927                                  	; 24/04/2019 - Retro DOS v4.0
 43928                                  
 43929                                  ; 12/05/2019
 43930                                  ;
 43931                                  ;write_version_msg:
 43932                                  ;
 43933                                  ;	;if	(not ibm)
 43934                                  ;	;mov	si,offset doscode:header
 43935                                  ;	mov	si,HEADER
 43936                                  ;outmes:
 43937                                  ;	;lods	cs:byte ptr [si]
 43938                                  ;	cs
 43939                                  ;	lodsb
 43940                                  ;	cmp	al,"$"
 43941                                  ;	je	short outdone
 43942                                  ;	call	OUTT
 43943                                  ;	jmp	short outmes
 43944                                  ;outdone:
 43945                                  ;	push	ss			; out stomps on segments
 43946                                  ;	pop	ds
 43947                                  ;	push	ss
 43948                                  ;	pop	es
 43949                                  ;	;endif
 43950                                  
 43951                                  	; at this point es is dosdata
 43952                                  
 43953                                  	; Fill in the segment addresses of sysinitvar and country_cdpg
 43954                                  	; in sysinittable (ms_data.asm)
 43955                                  
 43956                                  	;mov	si,0D28h
 43957 00007704 BE[280D]                	mov	si,SysInitTable
 43958                                  
 43959                                  	; 17/12/2022
 43960                                  	; ds = es = ss
 43961                                  
 43962                                  	; 17/12/2022
 43963                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43964                                  ;%if 0
 43965                                  	;;mov	[es:si+6],es
 43966                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43967                                  	;;mov	[es:si+2],es
 43968                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 43969                                  	
 43970 00007707 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 43971 0000770A 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 43972                                  
 43973                                  	; buffhead -> dosdata:hashinitvar
 43974                                  
 43975                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 43976 0000770D 8C06[3A00]              	mov	[BUFFHEAD+2],es
 43977                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 43978                                  	;mov	si,6Dh
 43979 00007711 BE[6D00]                	mov	si,HASHINITVAR
 43980                                  	;mov	[es:BUFFHEAD],si
 43981 00007714 8936[3800]              	mov	[BUFFHEAD],si
 43982                                  
 43983 00007718 5A                              pop     dx                      ; restore address of arena
 43984                                  
 43985                                  	;mov	[032Ch+2],dx
 43986 00007719 8916[2E03]                      mov     [DMAADD+2],dx
 43987                                  
 43988                                  	;mov	[es:arena_head],dx
 43989 0000771D 8916[2400]              	mov	[arena_head],dx
 43990                                  
 43991                                  ;%endif
 43992                                  
 43993                                  ; 17/12/2022
 43994                                  %if 0
 43995                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43996                                  	;;;
 43997                                  	;mov	[es:si+6],es
 43998                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 43999                                  	;mov	[es:si+2],es
 44000                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 44001                                  
 44002                                  	; buffhead -> dosdata:hashinitvar
 44003                                  
 44004                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 44005                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 44006                                  	;mov	si,6Dh
 44007                                  	mov	si,HASHINITVAR
 44008                                  	mov	[es:BUFFHEAD],si
 44009                                  
 44010                                          pop     dx                      ; restore address of arena
 44011                                  
 44012                                  	;mov	[032Ch+2],dx
 44013                                          mov     [DMAADD+2],dx
 44014                                  
 44015                                  	mov	[es:arena_head],dx
 44016                                  	;;;
 44017                                  %endif
 44018                                  
 44019 00007721 8EDA                            mov     ds,dx
 44020                                  
 44021                                  	;mov	byte [0],'Z'
 44022 00007723 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 44023                                          ;mov	word [1],0
 44024 00007728 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 44025                                  
 44026 0000772E 36A1[4603]                      mov     ax,[ss:ENDMEM]
 44027 00007732 29D0                    	sub	ax,dx
 44028 00007734 48                              dec     ax
 44029 00007735 A30300                          mov     [ARENA.SIZE],ax
 44030                                  
 44031                                  	; point to sft 0
 44032                                  
 44033                                  	;mov	di,offset dosdata:sftabl + sftable
 44034                                  	;mov	di,SFTABL+6
 44035 00007738 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 44036 0000773B B80300                          mov     ax,3
 44037 0000773E AB                              stosw           		; adjust refcount
 44038                                  
 44039                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 44040                                  
 44041                                  	;mov	di,offset dosdata:sysinittable
 44042                                  	;mov	di,0D28h
 44043 0000773F BF[280D]                	mov	di,SysInitTable
 44044                                  
 44045 00007742 42                      	inc	dx			; advance dx from arena to psp
 44046 00007743 8EDA                    	mov	ds,dx			; point ds to psp
 44047                                  
 44048                                  					; pass the address os seg_reinit
 44049                                  					; in dx
 44050 00007745 BA[B377]                	mov	dx,seg_reinit
 44051 00007748 B9[F271]                	mov	cx,exepatch_start
 44052 0000774B 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 44053                                  
 44054 0000774F B8[9874]                	mov	ax,SYSBUF
 44055 00007752 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 44056                                  	
 44057 00007755 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 44058 0000775A 368E16[8605]                    mov     ss,[ss:USER_SS]
 44059                                  
 44060 0000775F CB                              retf
 44061                                  
 44062                                  ;
 44063                                  ; END OF DOSINIT
 44064                                  ;
 44065                                  ;--------------------------------------------------------------------------
 44066                                  
 44067                                  CHARINIT:
 44068                                  	; 24/04/2019 - Retro DOS v4.0
 44069                                  	; 07/07/2018 - Retro DOS v3.0
 44070                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 44071 00007760 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 44072                                  	;mov	byte [ss:035Bh],0
 44073 00007766 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 44074                                  	;mov	byte [ss:035Ch],0
 44075 0000776C 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 44076                                  	;mov	word [ss:035BD],0
 44077 00007772 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 44078 00007779 06                              PUSH	ES
 44079 0000777A 53                              PUSH	BX
 44080 0000777B 50                              PUSH	AX
 44081 0000777C BB[5A03]                        MOV	BX,DEVCALL
 44082                                          ;PUSH	CS
 44083 0000777F 16                      	PUSH	SS ; 30/04/2019
 44084 00007780 07                              POP	ES
 44085 00007781 E889CD                          CALL	DEVIOCALL2
 44086 00007784 58                      	POP	AX
 44087 00007785 5B                              POP	BX
 44088 00007786 07                              POP	ES
 44089 00007787 C3                              RETN
 44090                                  
 44091                                  ; 25/04/2019 - Retro DOS v4.0
 44092                                  
 44093                                  ;-----------------------------------------------------------------------------
 44094                                  ;
 44095                                  ;	check_XMM: routine to check presence of XMM driver
 44096                                  ;
 44097                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 44098                                  ;
 44099                                  ;	USED:	none
 44100                                  ;
 44101                                  ;-----------------------------------------------------------------------------
 44102                                  
 44103                                  check_XMM: ; proc near
 44104                                  ;
 44105                                  ; determine whether or not an XMM driver is installed
 44106                                  ;
 44107 00007788 50                      	push	ax
 44108                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 44109 00007789 B80043                  	mov	ax,4300h
 44110 0000778C CD2F                    	int	2Fh
 44111                                  		; - Multiplex - XMS - INSTALLATION CHECK
 44112                                  		; Return: AL = 80h XMS driver installed
 44113                                  		; AL <> 80h no driver
 44114 0000778E 3C80                    	cmp	al,80h			; Q: installed
 44115 00007790 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 44116                                  ;
 44117                                  ; get the XMM control functions entry point, save it, we
 44118                                  ; need to call it later.
 44119                                  ;
 44120 00007792 53                      	push	bx
 44121 00007793 52                      	push	dx
 44122 00007794 1E                      	push	ds
 44123 00007795 06                      	push	es
 44124                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 44125 00007796 B81043                  	mov	ax,4310h
 44126 00007799 CD2F                    	int	2Fh
 44127                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 44128                                  		; Return: ES:BX -> driver entry point
 44129                                  
 44130 0000779B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44131                                  
 44132 000077A0 891E[6311]              	mov	[XMMcontrol],bx
 44133 000077A4 8C06[6511]              	mov	[XMMcontrol+2],es
 44134                                  cXMMexit:
 44135 000077A8 F8                      	clc
 44136 000077A9 07                      	pop	es
 44137 000077AA 1F                      	pop	ds
 44138 000077AB 5A                      	pop	dx
 44139 000077AC 5B                      	pop	bx
 44140 000077AD 58                      	pop	ax
 44141 000077AE C3                      	retn				; done
 44142                                  ;
 44143                                  ; set carry if XMM driver not present
 44144                                  ;
 44145                                  cXMM_no_driver:
 44146 000077AF F9                      	stc
 44147 000077B0 58                      	pop	ax
 44148 000077B1 C3                      	retn
 44149                                  
 44150                                  ;-----------------------------------------------------------------------------
 44151                                  ;
 44152                                  ; Procedure Name : seg_reinit
 44153                                  ;
 44154                                  ; Inputs	 : ES has final dos code location
 44155                                  ;		   AX = 0 / 1
 44156                                  ;
 44157                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 44158                                  ;		   if AX =0
 44159                                  ;		      if first entry
 44160                                  ;			 patch segment & offset of vectors with stub
 44161                                  ;			 and stub with segment in ES
 44162                                  ;		      else
 44163                                  ;			 patch stub with segment in ES
 44164                                  ;
 44165                                  ;		   else if AX = 1
 44166                                  ;			patch segment of vectors with segment in ES	
 44167                                  ;
 44168                                  ; NOTE		 : This routine can be called at most twice!
 44169                                  ;
 44170                                  ; Regs Mod.	 : es, ax, di, cx, bx
 44171                                  ;-----------------------------------------------------------------------------
 44172                                  
 44173 000077B2 00                      num_entry: db	0		; keeps track of the # of times this routine
 44174                                  				; has been called. (0 or 1)
 44175                                  
 44176                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 44177                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 44178                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 44179                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 44180                                  
 44181                                  seg_reinit:	; proc	far
 44182 000077B3 1E                      	push	ds
 44183                                  
 44184 000077B4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 44185                                  
 44186 000077B9 E88600                  	call	patch_misc_segments	; patch in segments for sharer and 
 44187                                  					; other tables with seg in ES.
 44188                                  	; 17/12/2022
 44189                                  	; cx = 0
 44190 000077BC 39C8                    	cmp	ax,cx ; 0
 44191                                  	;cmp	ax,0
 44192 000077BE 753D                    	jne	short patch_vec_seg	; patch vectors with segment in es
 44193                                  
 44194                                  	; 17/12/2022
 44195 000077C0 2E380E[B277]            	cmp	[cs:num_entry],cl ; 0
 44196                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 44197 000077C5 7508                    	jne	short second_entry	; N: just patch the stub with 
 44198                                  					;    segment in ES
 44199                                  					; Y: patch the vectors with stub 
 44200 000077C7 8CD8                    	mov	ax,ds
 44201 000077C9 E83E00                  	call	patch_vec_segments	; patch the segment of vectors
 44202 000077CC E8BD00                  	call	patch_offset		; patch the offsets of vectors 
 44203                                  					; with those in the stub.
 44204                                  	; 17/12/2022
 44205                                  	; cx = 0
 44206                                  second_entry:
 44207 000077CF 8CC0                    	mov	ax,es			; patch the stub with segment in es
 44208                                  
 44209                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 44210                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 44211 000077D1 BF[6210]                	mov	di,DOSINTTABLE
 44212                                  	; 17/12/2022
 44213                                  	; cx = 0
 44214                                  	;mov	cx,9
 44215 000077D4 B109                    	mov	cl,9
 44216 000077D6 1E                      	push	ds			
 44217 000077D7 07                      	pop	es			; es:di -> DOSINTTABLE
 44218                                  
 44219                                  dosinttabloop:
 44220                                  	;add	di,2
 44221                                  	; 19/09/2023
 44222 000077D8 47                      	inc	di
 44223 000077D9 47                      	inc	di
 44224 000077DA AB                      	stosw
 44225 000077DB E2FB                    	loop	dosinttabloop	
 44226                                  
 44227                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 44228                                  ; use the HMA, so we don't want to check CS
 44229                                  
 44230                                  ;ifndef ROMDOS
 44231 000077DD 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 44232 000077E0 7220                    	jb	short sr_done		; N: done
 44233                                  ;endif
 44234 000077E2 E8A3FF                  	call	check_XMM		; Y: set up the XMS entry point
 44235 000077E5 721B                    	jc	short sr_done		; failed to set up XMS do not do
 44236                                  					; A20 toggling in the stub.
 44237                                  	; 17/12/2022
 44238                                  	; cx = 0
 44239 000077E7 E81D01                  	call	patch_in_nops		; enable the stub to check A20 state
 44240                                  ; M021-
 44241                                  	;mov	byte [1211h],1
 44242 000077EA C606[1112]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 44243                                  				
 44244                                  					; set pointer to the routine that 
 44245                                  					; patches buggy exepacked code.
 44246                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 44247 000077EF C706[1212][4273]        	mov	word [FixExePatch],ExePatch
 44248                                  					; M068: set pointer to the routine 
 44249                                  					; M068: that detects copy protected
 44250                                  					; M068: apps
 44251                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 44252 000077F5 C706[6100][6274]        	mov	word [ChkCopyProt],IsCopyProt
 44253                                  
 44254                                  ; 28/12/2022 - Retro DOS v4.1
 44255                                  %if 0
 44256                                  ;----------------------------------------------------------------------------
 44257                                  
 44258                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 44259                                  
 44260                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44261                                  ;
 44262                                  ;; M020 - begin
 44263                                  ;
 44264                                  ;	call	WhatCPUType
 44265                                  ;	cmp	al,1
 44266                                  ;	jne	short sr_done 		; we need Rational Patch only
 44267                                  ;					;  on 286 systems
 44268                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 44269                                  ;	mov	word [RationalPatchPtr],RationalPatch
 44270                                  ;
 44271                                  ;; M020 - end
 44272                                  ;
 44273                                  ;	jmp	short sr_done
 44274                                  ;
 44275                                  ;patch_vec_seg:				; patch vectors with segment in es
 44276                                  ;	mov	ax,es
 44277                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 44278                                  ;					; NOTE we don't have to patch the 
 44279                                  ;					; offsets as they have been already
 44280                                  ;					; set to the doscode offsets at
 44281                                  ;					; DOSINIT.
 44282                                  ;sr_done:
 44283                                  ;	mov	byte [cs:num_entry],1
 44284                                  ;	pop	ds
 44285                                  ;	retf	; ! far return !
 44286                                  
 44287                                  ;----------------------------------------------------------------------------
 44288                                  ;
 44289                                  ; Procedure Name : WhatCPUType
 44290                                  ;
 44291                                  ; Inputs	 : none
 44292                                  ;
 44293                                  ; Outputs	 : AL = 0 if CPU <  286
 44294                                  ;		      = 1 if CPU == 286
 44295                                  ;		      = 2 if CPU >= 386
 44296                                  ;
 44297                                  ; Regs. Mod.	 : AX
 44298                                  ;
 44299                                  ;----------------------------------------------------------------------------
 44300                                  
 44301                                  WhatCPUType:
 44302                                  	; 25/04/2019 - Retro DOS v4.0
 44303                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 44304                                  
 44305                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 44306                                  
 44307                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 44308                                  ; 	it is called from both CODE and SYSINITSEG.
 44309                                  ;
 44310                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 44311                                  ;  Returns: AX = 0 if 8086 or 8088
 44312                                  ;              = 1 if 80286
 44313                                  ;              = 2 if 80386
 44314                                  
 44315                                  	; 04/11/2022
 44316                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 44317                                  
 44318                                  Get_CPU_Type:	;macro
 44319                                  	pushf
 44320                                  	push	bx			; preserve bx
 44321                                  	xor	bx,bx			; init bx to zero
 44322                                  
 44323                                  	xor	ax,ax			; 0000 into AX
 44324                                  	push	ax			; put it on the stack...
 44325                                  	popf				; ...then shove it into the flags
 44326                                  	pushf				; get it back out of the flags...
 44327                                  	pop	ax			; ...and into ax
 44328                                  	and	ax,0F000h		; mask off high four bits
 44329                                  	cmp	ax,0F000h		; was it all 1's?
 44330                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 44331                                  
 44332                                  	mov	ax,0F000h		; now try to set the high four bits..
 44333                                  	push	ax
 44334                                  	popf
 44335                                  	pushf
 44336                                  	pop	ax			; ...and see what happens
 44337                                  	and	ax,0F000h		; any high bits set ?
 44338                                  	jz	short cpu_286		; nay; it's an 80286
 44339                                  
 44340                                  cpu_386:				; bx starts as zero
 44341                                  	inc	bx			; inc twice if 386
 44342                                  cpu_286:				; just inc once if 286
 44343                                  	inc	bx
 44344                                  cpu_8086:				; don't inc at all if 086
 44345                                  	mov	ax,bx			; put CPU type value in ax
 44346                                  	pop	bx			; restore original bx
 44347                                  	popf
 44348                                  	
 44349                                  	;endm
 44350                                  
 44351                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 44352                                  	;retn
 44353                                  
 44354                                  	; 04/11/2022
 44355                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 44356                                  	cmp	al,1
 44357                                  	jne	short sr_done 		; we need Rational Patch only
 44358                                  					;  on 286 systems
 44359                                  	mov	word [RationalPatchPtr],RationalPatch
 44360                                  
 44361                                  ;----------------------------------------------------------------------------
 44362                                  %endif	; 28/12/2022
 44363                                  
 44364 000077FB EB05                    	jmp	short sr_done
 44365                                  
 44366                                  patch_vec_seg:				; patch vectors with segment in es
 44367 000077FD 8CC0                    	mov	ax,es
 44368 000077FF E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 44369                                  					; NOTE we don't have to patch the 
 44370                                  					; offsets as they have been already
 44371                                  					; set to the doscode offsets at
 44372                                  					; DOSINIT.
 44373                                  sr_done:
 44374 00007802 2EC606[B277]01          	mov	byte [cs:num_entry],1
 44375 00007808 1F                      	pop	ds
 44376 00007809 CB                      	retf	; ! far return !
 44377                                  
 44378                                  ;----------------------------------------------------------------------------
 44379                                  ;
 44380                                  ; Procedure Name : patch_vec_segments
 44381                                  ;
 44382                                  ; Inputs	 : ax -> has segment address to patch in
 44383                                  ;		   ds -> DOSDATA
 44384                                  ;
 44385                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 44386                                  ;			
 44387                                  ;			0,20-28,3a-3f
 44388                                  ;
 44389                                  ; Regs. Mod.	 : DI,CX,DX,AX
 44390                                  ;
 44391                                  ;----------------------------------------------------------------------------
 44392                                  
 44393                                  patch_vec_segments:
 44394                                  
 44395 0000780A 06                      	push	es
 44396                                  
 44397 0000780B 31C9                    	xor	cx,cx ; 0
 44398 0000780D 8EC1                    	mov	es,cx
 44399                                  
 44400                                  	;mov	di,82h
 44401 0000780F BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 44402                                  
 44403 00007812 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 44404                                  
 44405                                  					; set vectors 20 & 21
 44406                                  	; 04/11/2022
 44407                                  	;mov	cx,2
 44408                                  	; 17/12/2022
 44409                                  	;mov	cl,2
 44410                                  ps_set1:
 44411 00007816 AB                      	stosw
 44412                                  	;add	di,2
 44413                                  	; 17/12/2022
 44414 00007817 47                      	inc	di
 44415 00007818 47                      	inc	di
 44416                                  	;loop	ps_set1
 44417                                  
 44418                                  	; 17/12/2022
 44419 00007819 AB                      	stosw	; int 21h segment
 44420                                  	;inc	di
 44421                                  	;inc	di
 44422                                  
 44423                                  	;add	di,4			; skip int 22h vector
 44424 0000781A 83C706                  	add	di,6 ; *
 44425                                  
 44426 0000781D AB                      	stosw				; set int 23h
 44427 0000781E 83C706                  	add	di,6			; skip int 24h
 44428                                  
 44429                                  					; set vectors 25-28 and 2a-3f
 44430                                  	; 04/11/2022
 44431                                  	;mov	cx,4			; set 4 segments
 44432                                  	; 17/12/2022
 44433 00007821 B104                    	mov	cl,4
 44434                                  ps_set2:
 44435 00007823 AB                      	stosw
 44436                                  	;add	di,2
 44437                                  	; 17/12/2022
 44438 00007824 47                      	inc	di
 44439 00007825 47                      	inc	di
 44440 00007826 E2FB                    	loop	ps_set2
 44441                                  
 44442 00007828 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 44443                                  					;   already be set.
 44444                                  	; 04/11/2022
 44445                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 44446                                  	; 17/12/2022
 44447 0000782B B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 44448                                  ps_set3:
 44449 0000782D AB                      	stosw
 44450                                  	;add	di,2
 44451                                  	; 17/12/2022
 44452 0000782E 47                      	inc	di
 44453 0000782F 47                      	inc	di
 44454 00007830 E2FB                    	loop	ps_set3
 44455                                  
 44456                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 44457                                  ; below. So skip it.
 44458                                  
 44459 00007832 83C708                  	add	di,8			; skip vector 30h & 31h 
 44460                                  	
 44461                                  	; 04/11/2022
 44462                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 44463                                  	; 17/12/2022
 44464 00007835 B10E                    	mov	cl,14			;  sets segs for ints 32h-3fh
 44465                                  ps_set4:
 44466 00007837 AB                      	stosw
 44467                                  	;add	di,2
 44468                                  	; 17/12/2022
 44469 00007838 47                      	inc	di
 44470 00007839 47                      	inc	di
 44471 0000783A E2FB                    	loop	ps_set4
 44472                                  
 44473                                  ; set offset of int2f
 44474                                  
 44475                                  ;if installed
 44476                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 44477                                  ;endif
 44478                                  	;mov	[es:0C3h],ax
 44479 0000783C 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 44480                                  	; 17/12/2022
 44481                                  	; cx = 0
 44482 00007840 07                      	pop	es
 44483 00007841 C3                      	retn
 44484                                  
 44485                                  ;---------------------------------------------------------------------------
 44486                                  ;
 44487                                  ; Procedure Name : patch_misc_segments
 44488                                  ;
 44489                                  ; Inputs	 : es = segment to patch in
 44490                                  ;		   ds = dosdata
 44491                                  ;
 44492                                  ; outputs	 : patches in the sharer and other tables in the dos
 44493                                  ;		   with right dos code segment in es
 44494                                  ;
 44495                                  ; Regs Mod	 : DI,SI,CX
 44496                                  ;
 44497                                  ;---------------------------------------------------------------------------
 44498                                  
 44499                                  patch_misc_segments:
 44500                                  
 44501 00007842 53                      	push	bx
 44502 00007843 06                      	push	es
 44503 00007844 50                      	push	ax
 44504                                  
 44505 00007845 8CC0                    	mov	ax,es			; ax - > DOS segment
 44506                                  	
 44507 00007847 1E                      	push	ds
 44508 00007848 07                      	pop	es			; es -> DOSDATA
 44509                                  	
 44510                                  ; initialize the jump table for the sharer...
 44511                                  
 44512                                  	;mov	di,offset dosdata:jshare
 44513                                  	;mov	di,90h
 44514 00007849 BF[9000]                	mov	di,JShare
 44515                                  	;mov	bx,[0AAAh]
 44516 0000784C 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 44517                                  					; table was patched during the first
 44518                                  					; call to this routine
 44519 00007850 B90F00                  	mov	cx,15
 44520                                  jumptabloop:
 44521                                  	;add	di,2			; skip offset
 44522                                  	; 17/12/2022
 44523 00007853 47                      	inc	di
 44524 00007854 47                      	inc	di
 44525 00007855 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 44526 00007858 7405                    	je	short share_patch	; Y: patch in sharer table
 44527                                  					; N: 
 44528 0000785A 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 44529 0000785D 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 44530                                  share_patch:
 44531 0000785F AB                      	stosw				; drop in segment
 44532                                  no_share_patch:
 44533 00007860 E2F1                    	loop	jumptabloop
 44534                                  					; BUGBUG patching the country info 
 44535                                  					; with dosdata can be done inline
 44536                                  					; in dosinit.
 44537                                  					; for dos 3.3 country info
 44538                                  					; table address
 44539                                  
 44540                                  	;mov	si,offset dosdata:country_cdpg
 44541                                  	;mov	si,122Ah   
 44542 00007862 BE[2A12]                	mov	si,COUNTRY_CDPG
 44543                                  					; initialize double word
 44544                                  					; pointers with dosdata in ds
 44545                                  	;mov	[si+4Fh],ds
 44546                                  	;mov	[si+54h],ds
 44547                                  	;mov	[si+59h],ds
 44548                                  	;mov	[si+5Eh],ds
 44549                                  	;mov	[si+80h],ds
 44550                                  	;mov	[si+63h],ds
 44551 00007865 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 44552 00007868 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 44553 0000786B 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 44554 0000786E 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 44555 00007871 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 44556 00007875 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 44557                                  
 44558                                  					; fastopen routines are in doscode
 44559                                  					; so patch with doscode seg in ax
 44560                                  
 44561                                  	;mov	si,offset dosdata:fastopentable
 44562                                  	;mov	si,0D30h
 44563 00007878 BE[300D]                	mov	si,FastOpenTable
 44564                                  
 44565                                  	; 17/12/2022
 44566                                  	; bx = [TEMP_DOSLOC]
 44567 0000787B 83FBFF                  	cmp	bx,-1
 44568                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 44569 0000787E 7405                    	je	short fast_patch	; Y: patch segment
 44570                                  	;mov	cx,[TEMP_DOSLOC]
 44571                                  					; Q: has fastopen patched in it's
 44572                                  					;    segment
 44573                                  	; 17/12/2022
 44574 00007880 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 44575                                  	;;cmp	cx,[si+4]
 44576                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 44577 00007883 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 44578                                  
 44579                                  fast_patch:
 44580                                  	;mov	[si+4],ax
 44581 00007885 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 44582                                  no_fast_patch:
 44583                                  	; 17/12/2022
 44584                                  	; cx = 0
 44585 00007888 58                      	pop	ax
 44586 00007889 07                      	pop	es
 44587 0000788A 5B                      	pop	bx
 44588                                  
 44589 0000788B C3                      	retn
 44590                                  
 44591                                  ;--------------------------------------------------------------------------
 44592                                  ;
 44593                                  ; Procedure Name : patch_offset
 44594                                  ; 
 44595                                  ; Inputs	 : NONE
 44596                                  ;
 44597                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 44598                                  ;		   0,20-28,3a-3f, and 30,31
 44599                                  ;
 44600                                  ;
 44601                                  ; Regs. Mod	 : AX,DI,CX
 44602                                  ;--------------------------------------------------------------------------
 44603                                  
 44604                                  patch_offset:
 44605 0000788C 06                      	push	es		; preserve es
 44606                                  
 44607 0000788D 31C0                    	xor	ax,ax
 44608 0000788F 8EC0                    	mov	es,ax
 44609                                  				; set default divide trap address
 44610                                  	;mov	word ptr es:[0],offset dosdata:ldivov
 44611                                  	;mov	word [es:0],108Ah
 44612 00007891 26C7060000[8A10]        	mov	word [es:0],ldivov
 44613                                  
 44614                                  	;mov	di,80h
 44615 00007898 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 44616                                  	;mov	ax,offset dosdata:lirett
 44617                                  	;mov	ax,10DAh
 44618 0000789B B8[DA10]                	mov	ax,lirett
 44619                                  				; set vectors 20 & 21 to point to iret.
 44620                                  	; 17/12/2022
 44621                                  	; cx = 0
 44622                                  
 44623                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 44624                                  po_iset1:
 44625 0000789E AB                      	stosw	; int 20h offset
 44626                                  	;add	di,2 ; *
 44627                                  	;loop	po_iset1
 44628                                  	; 17/12/2022
 44629 0000789F 47                      	inc	di
 44630 000078A0 47                      	inc	di
 44631 000078A1 AB                      	stosw	; int 21h offset
 44632                                  
 44633                                  	;add	di,4		; skip vector 22h
 44634                                  	; 17/12/2022
 44635 000078A2 83C706                  	add	di,6 ; *
 44636                                  
 44637 000078A5 AB                      	stosw			; set offset of 23h
 44638                                  	;add	di,6		; skip 24h
 44639                                  	; 19/09/2023
 44640 000078A6 83C712                  	add	di,18		; skip 23h segment and int 24-25-26-27h
 44641                                  
 44642                                  				; set vectors 25-28 and 2a-3f to iret.
 44643                                  	; 04/11/2022
 44644                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 44645                                  	; 19/09/2023
 44646                                  	; 17/12/2022
 44647                                  	;mov	cl,4		; sets offsets for ints 25h-28h
 44648                                  po_iset2:
 44649 000078A9 AB                      	stosw		; set offset for int 28h ; 19/09/2023
 44650                                  	;add	di,2
 44651                                  	; 19/09/2023
 44652                                  	; 17/12/2022
 44653                                  	;inc	di
 44654                                  	;inc	di
 44655                                  	; 19/09/2023
 44656                                  	;loop	po_iset2
 44657                                  
 44658                                  	;add	di,4		; skip vector 29h
 44659                                  	; 19/09/2023
 44660 000078AA 83C706                  	add	di,6	; skip int 28h segment and int 29h ; 19/09/2023
 44661                                  
 44662                                  	; 04/11/2022
 44663                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 44664                                  	; 17/12/2022
 44665                                  	;mov	cl,6		; sets offsets for ints 2ah-2fh
 44666 000078AD B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 44667                                  po_iset3:
 44668 000078AF AB                      	stosw
 44669                                  	;add	di,2
 44670                                  	; 17/12/2022
 44671 000078B0 47                      	inc	di
 44672 000078B1 47                      	inc	di
 44673 000078B2 E2FB                    	loop	po_iset3
 44674                                  
 44675                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 44676                                  ; below. So skip it.
 44677                                  
 44678                                  	;add	di,8		; skip vector 30h & 31h
 44679                                  	; 17/12/2022
 44680 000078B4 83C70C                  	add	di,12		; skip vector 2Fh, 30h & 31h
 44681                                  
 44682                                  	; 04/11/2022
 44683                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 44684                                  				;  sets offsets for ints 32h-3fh
 44685                                  	; 17/12/2022
 44686 000078B7 B10E                    	mov	cl,14 ; 26/06/2019
 44687                                  po_iset4:
 44688 000078B9 AB                      	stosw
 44689                                  	;add	di,2
 44690                                  	; 17/12/2022
 44691 000078BA 47                      	inc	di
 44692 000078BB 47                      	inc	di
 44693 000078BC E2FB                    	loop	po_iset4
 44694                                  
 44695                                  ;if installed
 44696                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 44697                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 44698 000078BE 26C706BC00[C610]        	mov	word [es:(2Fh*4)],lint2f
 44699                                  ;endif
 44700                                  
 44701                                  ; set up entry point call at vectors 30-31h
 44702                                  	;mov	byte [es:0C0h],0EAh
 44703 000078C5 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 44704                                  	;mov	word [es:0C1h],10D0h
 44705                                  
 44706 000078CB 26C706C100[D010]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 44707                                  
 44708                                  							; 19/09/2023
 44709                                  	;mov	word [es:80h],1094h
 44710 000078D2 26C7068000[9410]        	mov	word [es:addr_int_abort],lquit		; int 20h
 44711                                  	;mov	word [es:84h],109Eh
 44712 000078D9 26C7068400[9E10]        	mov	word [es:addr_int_command],lcommand	; int 21h
 44713                                  	;mov	word [es:94h],10A8h
 44714 000078E0 26C7069400[A810]        	mov	word [es:addr_int_disk_read],labsdrd	; int 25h  
 44715                                  	;mov	word [es:98h],10B2h
 44716 000078E7 26C7069800[B210]        	mov	word [es:addr_int_disk_write],labsdwrt	; int 26h
 44717                                  	;mov	word [es:9Ch],10BCh
 44718 000078EE 26C7069C00[BC10]        	mov	word [es:addr_int_keep_process],lstay_resident	; int 27h
 44719                                  
 44720                                  	; 17/12/2022
 44721                                  	; CX = 0
 44722 000078F5 07                      	pop	es		; restore es
 44723 000078F6 C3                      	retn
 44724                                  
 44725                                  ;--------------------------------------------------------------------------
 44726                                  ;
 44727                                  ; 	Procedure Name	:	patch_in_nops
 44728                                  ;
 44729                                  ; 	Entry		: 	ES -> DOSDATA
 44730                                  ;
 44731                                  ;	Regs Mod	: 	cx, di
 44732                                  ;
 44733                                  ;	Description:
 44734                                  ;		This routine patches in 2 nops at the offsets specified in 
 44735                                  ;	patch_table. This basically enables the low mem stub to start 
 44736                                  ;	making XMS calls.
 44737                                  ;
 44738                                  ;--------------------------------------------------------------------------
 44739                                  
 44740                                  	; 04/11/2022
 44741                                  	; (MSDOS 5.0 MSDOS.SYS)
 44742                                  	; DOSCODE:0BC50h
 44743                                  
 44744                                  patch_table:	; label	byte
 44745                                  	;dw	offset dosdata:i0patch
 44746                                  	;dw	offset dosdata:i20patch
 44747                                  	;dw	offset dosdata:i21patch
 44748                                  	;dw	offset dosdata:i25patch
 44749                                  	;dw	offset dosdata:i26patch
 44750                                  	;dw	offset dosdata:i27patch
 44751                                  	;dw	offset dosdata:i2fpatch
 44752                                  	;dw	offset dosdata:cpmpatch
 44753 000078F7 [8A10]                  	dw	i0patch
 44754 000078F9 [9410]                  	dw	i20patch
 44755 000078FB [9E10]                  	dw	i21patch
 44756 000078FD [A810]                  	dw	i25patch
 44757 000078FF [B210]                  	dw	i26patch
 44758 00007901 [BC10]                  	dw	i27patch
 44759 00007903 [C610]                  	dw	i2fpatch
 44760 00007905 [D010]                  	dw	cpmpatch
 44761                                  
 44762                                  patch_table_size equ ($-patch_table)/2
 44763                                  
 44764                                  patch_in_nops:
 44765 00007907 50                      	push	ax
 44766 00007908 56                      	push	si
 44767 00007909 BE[F778]                	mov	si,patch_table
 44768 0000790C B89090                  	mov	ax,9090h ; nop, nop
 44769                                  	; 17/12/2022
 44770                                  	; cx = 0
 44771                                  	;mov	cx,8
 44772                                  	;mov	cx,patch_table_size ; 8
 44773 0000790F B108                    	mov	cl,patch_table_size ; 8
 44774                                  pin_loop:
 44775 00007911 2E8B3C                  	mov	di,[cs:si]
 44776 00007914 AB                      	stosw
 44777                                  	;add	si,2
 44778                                  	; 17/12/2022
 44779 00007915 46                      	inc	si
 44780 00007916 46                      	inc	si
 44781 00007917 E2F8                    	loop	pin_loop
 44782 00007919 5E                      	pop	si
 44783 0000791A 58                      	pop	ax
 44784 0000791B C3                      	retn
 44785                                  
 44786                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 44787                                  ; ---------------------------------------------------------------------------
 44788                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 44789                                  ; ---------------------------------------------------------------------------
 44790                                  
 44791                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 44792                                  DOSCODE_END:
 44793                                  	;times	9 db 0	; db 9 dup(0)
 44794                                  	; 18/12/2022
 44795                                  	;dw	0	; times 2 db 0
 44796                                  	
 44797                                  	; 01/07/2024
 44798                                  	; 23/03/2024 - Retro DOS v4.1
 44799                                  	;times	7 db 0
 44800                                  
 44801                                  ;align 16
 44802                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 44803                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 44804                                  
 44805                                  	; 01/07/2024
 44806 0000791C 00                      	db	0
 44807                                  ; ---------------------------------------------------------------------------
 44808                                  
 44809                                  ;memstrt label word
 44810                                  ; ---------------------------------------------------------------------------
 44811                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 44812                                  ; ---------------------------------------------------------------------------
 44813                                  
 44814                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 44815                                  
 44816                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 44817                                  ; the dos initialization segment
 44818                                  
 44819                                  ;ifndef ROMDOS
 44820                                  
 44821                                  ;doscode ends
 44822                                  
 44823                                  ;else
 44824                                  
 44825                                  ;;dosinitseg ends
 44826                                  
 44827                                  ;endif ; ROMDOS
 44828                                  
 44829                                  ;============================================================================
 44830                                  
 44831                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 44832                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 44833                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 44834                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 44835                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 44836                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 44837                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 44838                                  
 44839                                  ;; burasý doscode sonu
 44840                                  
 44841                                  ;============================================================================
 44842                                  ; DOSDATA
 44843                                  ;============================================================================
 44844                                  ; 29/04/2019 - Retro DOS 4.0
 44845                                  
 44846                                  ;[BITS 16]
 44847                                  
 44848                                  ;[ORG 0]
 44849                                  
 44850                                  ; 25/04/2019 - Retro DOS v4.0
 44851                                  
 44852                                  ;============================================================================
 44853                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 44854                                  ;============================================================================
 44855                                  
 44856                                  ;align 16
 44857                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 44858                                  	; (4970 bytes for MSDOS 6.21)
 44859                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 44860                                  
 44861                                  ;============================================================================
 44862                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 44863                                  ;============================================================================
 44864                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44865                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 44866                                  ; 16/07/2018 - Retro DOS 3.0	
 44867                                  
 44868                                  ;Break <Initialized data and data used at DOS initialization>
 44869                                  ;----------------------------------------------------------------------------
 44870                                  
 44871                                  ; We need to identify the parts of the data area that are relevant to tasks
 44872                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 44873                                  ; data will be gathered with the system code. The process data under 2.x will
 44874                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 44875                                  ;
 44876                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 44877                                  ; describing that data item.
 44878                                  
 44879                                  ;DOSDATA SEGMENT
 44880                                  
 44881                                  ; 04/11/2022
 44882                                  ;[ORG 0]
 44883                                  
 44884                                  ; ----------------------------------------------------------------------------
 44885                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44886                                  ; ----------------------------------------------------------------------------
 44887                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 44888                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 44889                                  ; ----------------------------------------------------------------------------
 44890                                  
 44891                                  ; 04/11/2022
 44892                                  
 44893                                  ;DOSDATA:0000h
 44894                                  
 44895 0000791D 90<rep 3h>              align 16
 44896                                  
 44897                                  ; ----------------------------------------------------------------------------
 44898                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44899                                  ; ----------------------------------------------------------------------------
 44900                                  
 44901                                  segment .data  vstart=0 ; 06/12/2022
 44902                                  								
 44903                                  ; ============================================================================
 44904                                  
 44905                                  ; 06/12/2022
 44906                                  ;DOSDATASTART equ $
 44907                                  DOSDATASTART:
 44908                                  
 44909                                  
 44910                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 44911                                  
 44912                                  	;; 03/11/2022
 44913                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 44914                                  
 44915                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 44916                                  	;db	4 dup (?)	
 44917 00000000 00<rep 4h>              	times	4 db 0
 44918                                  
 44919                                  	; 29/04/2019 - Retro DOS v4.0 modification
 44920                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 44921                                  	;dw	0
 44922                                  
 44923                                  	;EVEN
 44924                                  
 44925                                  ;align 2
 44926                                  
 44927                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 44928                                  ; area compatability. This location must be incremented EACH TIME the data
 44929                                  ; area here gets mucked with.
 44930                                  ;
 44931                                  ; Also, do NOT change this position relative to DOSDATA:0.
 44932                                  
 44933                                  MSCT001S:	; LABEL BYTE
 44934                                  	
 44935                                  DataVersion:	
 44936 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 44937                                  
 44938                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 44939                                  ;hkn; been removed to DOSCODE above
 44940                                  
 44941                                  ;M044
 44942                                  ; First part of save area for saving last para of Window memory
 44943                                  
 44944                                  WinoldPatch1:	; db 8 dup (?)	;M044
 44945 00000006 00<rep 8h>              	times	8 db 0
 44946                                  
 44947                                  	; MSDOS 6.21 DOSDATA:000Eh
 44948                                  MYNUM:			; Offset 000Eh
 44949 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 44950                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 44951 00000010 0000                    	dw	0
 44952                                  OpenLRU:
 44953 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 44954                                  OEM_HANDLER: 		
 44955 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 44956                                  
 44957                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 44958                                  ;;			way that we leave DOS???? - jgl
 44959                                  
 44960                                  LeaveAddr:
 44961 00000018 [0804]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 44962                                  RetryCount:		
 44963 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 44964                                  RetryLoop:
 44965 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 44966                                  LastBuffer:
 44967 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 44968                                  CONTPOS:
 44969 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 44970                                  arena_head:
 44971 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 44972                                  
 44973                                  ;; 16/07/2018
 44974                                  ;;***************************************************************************
 44975                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 44976                                  ;;***************************************************************************
 44977                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 44978                                  ;;
 44979                                  ;;	AH = 52h
 44980                                  ;;
 44981                                  ;;	on return:
 44982                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 44983                                  ;;		Known "invars" fields follow (varies with DOS version):
 44984                                  ;;
 44985                                  ;;	Offset Size		 Description
 44986                                  ;;
 44987                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 44988                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 44989                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 44990                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 44991                                  ;;		      0 indicates no unread input (DOS 3.x)
 44992                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 44993                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 44994                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 44995                                  ;;	  08   dword  pointer to $CLOCK device driver
 44996                                  ;;	  0C   dword  pointer to CON device driver
 44997                                  ;;	  10   byte   number of logical drives in system
 44998                                  ;;	  11   word   maximum bytes/block of any block device
 44999                                  ;;	  13   dword  pointer to DOS cache buffer header
 45000                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 45001                                  ;;		      point to the next device in device chain
 45002                                  ;;
 45003                                  ;;***************************************************************************
 45004                                  
 45005                                  ; The following block of data is used by SYSINIT. 
 45006                                  ; Do not change the order or size of this block
 45007                                  
 45008                                  ;SYSINITVAR:
 45009                                  ;----------------------------------------------------------------------------
 45010                                  SYSINITVARS:
 45011                                  DPBHEAD:
 45012 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 45013                                  SFT_ADDR:
 45014 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 45015                                  BCLOCK:
 45016 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 45017                                  BCON:
 45018 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 45019                                  MAXSEC:
 45020 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 45021                                  BUFFHEAD:
 45022 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 45023                                  CDSADDR:
 45024 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 45025                                  SFTFCB:
 45026 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 45027                                  KEEPCOUNT:
 45028 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 45029                                  NUMIO:
 45030 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 45031                                  CDSCOUNT:
 45032 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 45033                                  
 45034                                  ; A fake header for the NUL device
 45035                                  NULDEV:
 45036 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 45037                                  	;dw	8004h
 45038 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 45039 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 45040 00000050 [CC0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 45041 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 45042                                  SPLICES:
 45043 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 45044                                  
 45045                                  Special_Entries:
 45046 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 45047                                  UU_IFS_DOS_CALL:
 45048 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 45049                                  ; 
 45050                                  ; UU_IFS_HEADER:
 45051                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 45052                                  
 45053                                  ChkCopyProt:
 45054 00000061 0000                    	dw	0	; M068
 45055                                  A20OFF_PSP:
 45056 00000063 0000                    	dw	0	; M068
 45057                                  BUFFERS_PARM1:
 45058 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 45059                                  BUFFERS_PARM2:
 45060 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 45061                                  BOOTDRIVE:
 45062 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 45063                                  DDMOVE:
 45064 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 45065                                  EXT_MEM_SIZE:
 45066 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 45067                                  
 45068                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 45069                                  ;
 45070                                  ; Replaced by next two declarations
 45071                                  ;
 45072                                  ;UU_BUF_HASH_PTR:
 45073                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 45074                                  ;UU_BUF_HASH_COUNT:
 45075                                  ;	dw	1	; [SYSTEM] number of Hash entries
 45076                                  
 45077                                  BufferQueue:
 45078 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 45079                                  DirtyBufferCount:
 45080 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 45081                                  			; BUGBUG ---- change to byte
 45082                                  SC_CACHE_PTR:
 45083 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 45084                                  SC_CACHE_COUNT:
 45085 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 45086                                  BuffInHMA:
 45087 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 45088                                  LoMemBuff:
 45089 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 45090                                  			;  in Low mem when buffs are in HMA
 45091                                  ;
 45092                                  ; All variables which have UU_ as prefix can be reused for other
 45093                                  ; purposes and can be renamed. All these variables were used for
 45094                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 45095                                  ; manager ---- MOHANS
 45096                                  ;
 45097                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 45098                                  UU_BUF_EMS_FIRST_PAGE:	
 45099 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 45100                                  
 45101                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 45102                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 45103                                  ;	dw	0			
 45104                                  
 45105                                  CL0FATENTRY:
 45106 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 45107                                  			; is used in pack/unpack rts.
 45108                                  			; in fat.asm if cluster 0 is specified.
 45109                                  			; SR;
 45110                                  IoStatFail:
 45111 00000083 00                      	db	0	; IoStatFail has been added to 
 45112                                  			; record a fail on an I24 
 45113                                  			; issued from IOFUNC on a status call. 
 45114                                  
 45115                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 45116                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 45117                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 45118                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 45119                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 45120                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 45121                                  ;
 45122                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 45123                                  						; state of the 	buffers page.
 45124                                  						; This one byte is retained to 
 45125                                  						; keep the size of this data 
 45126                                  						; block the same.;
 45127                                  ALLOCMSAVE:
 45128 00000084 00                      	db	0	; M063: temp var. used to 
 45129                                  			; M063: save alloc method in
 45130                                  			; M063: msproc.asm
 45131                                  A20OFF_COUNT:
 45132 00000085 00                      	db	0	; M068: indiactes the # of 
 45133                                  			; M068: int 21 calls for 
 45134                                  			; M068: which A20 is off
 45135                                  DOS_FLAG:
 45136 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 45137                                  			; definitions
 45138                                  UNPACK_OFFSET:
 45139 00000087 0000                    	dw	0	; saves pointer to the start
 45140                                  			; of unpack code in exepatch.
 45141                                  			; asm.
 45142                                  UMBFLAG:
 45143 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 45144                                  			; M003: link state of the UMBs
 45145                                  			; M003: whether linked or not 
 45146                                  			; M003: to the DOS arena chain
 45147                                  SAVE_AX:
 45148 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 45149                                  			; M000: in msproc.asm
 45150                                  UMB_HEAD:
 45151 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 45152                                  			; M000: the first umb arena by 
 45153                                  			; M000: BIOS sysinit.
 45154                                  START_ARENA:
 45155 0000008E 0100                    	dw	1	; M000: this is the first arena 
 45156                                  			; M000: from which DOS will 
 45157                                  			; M000: start its scan for alloc.
 45158                                  
 45159                                  ; End of SYSINITVar block
 45160                                  ;----------------------------------------------------------------------------
 45161                                  
 45162                                  ; 25/04/2019 - Retro DOS v4.0
 45163                                  
 45164                                  ; 16/07/2018
 45165                                  ; MSDOS 3.3 (& MDOS 6.0)
 45166                                  
 45167                                  ;
 45168                                  ; Sharer jump table
 45169                                  ;
 45170                                  
 45171                                  ;PUBLIC	JShare
 45172                                  	;EVEN
 45173                                  
 45174                                  ;JShare	LABEL	DWORD
 45175                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 45176                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 45177                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 45178                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 45179                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 45180                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 45181                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 45182                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 45183                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 45184                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 45185                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 45186                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 45187                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 45188                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 45189                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 45190                                  
 45191                                  align 2
 45192                                  
 45193                                  JShare:
 45194 00000090 [FB06]0000              		DW	BadCall,0
 45195 00000094 [FF06]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 45196 00000098 [FF06]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 45197 0000009C [FB06]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 45198 000000A0 [FB06]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 45199 000000A4 [FB06]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 45200 000000A8 [FB06]0000              set_block:	DW	BadCall,0  ; 6   set_block
 45201 000000AC [FB06]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 45202 000000B0 [FF06]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 45203 000000B4 [FB06]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 45204 000000B8 [FB06]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 45205 000000BC [FB06]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 45206 000000C0 [FF06]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 45207 000000C4 [FB06]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 45208 000000C8 [FB06]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 45209                                  
 45210                                  
 45211                                  ;============================================================================
 45212                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 45213                                  ;============================================================================
 45214                                  ; 25/04/2019 - Retro DOS 4.0 
 45215                                  ; 16/07/2018 - Retro DOS 3.0	
 45216                                  
 45217                                  ;Break <Initialized data and data used at DOS initialization>
 45218                                  ;----------------------------------------------------------------------------
 45219                                  
 45220                                  ; We need to identify the parts of the data area that are relevant to tasks
 45221                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 45222                                  ; data will be gathered with the system code.  The process data under 2.x will
 45223                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 45224                                  ;
 45225                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 45226                                  ; describing that data item.
 45227                                  
 45228                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 45229                                  
 45230                                  ;
 45231                                  ; Table of routines for assignable devices
 45232                                  ;
 45233                                  ; MSDOS allows assignment if the following standard devices:
 45234                                  ;   stdin  (usually CON input)
 45235                                  ;   stdout (usually CON output)
 45236                                  ;   auxin  (usually AUX input)
 45237                                  ;   auxout (usually AUX output)
 45238                                  ;   stdlpt (usually PRN output)
 45239                                  ;
 45240                                  ; SPECIAL NOTE:
 45241                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 45242                                  ;   If we're not at end-of-file, then we always say that we have a character.
 45243                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 45244                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 45245                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 45246                                  ;   as EOF).
 45247                                  
 45248                                  ; Default SFTs for boot up
 45249                                  
 45250                                  		;PUBLIC	SFTABL
 45251                                  
 45252                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 45253 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 45254 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 45255 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 45256                                  		;times 295 db 0 ; MSDOS 6.0
 45257 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 45258                                  
 45259                                  ; the next two variables relate to the position of the logical stdout/stdin
 45260                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 45261                                  ; console.
 45262                                  		; DOSDATA:01F9h (MSDOS 6.21)
 45263 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 45264 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 45265                                  					;	   of buffered input call
 45266 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 45267 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 45268                                  		; DOSDATA:02FEh (MSDOS 6.21)
 45269 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 45270 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 45271 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 45272                                  switch_character:
 45273 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 45274 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 45275 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 45276 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 45277 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 45278                                  
 45279                                  ; The following table is a list of addresses that the sharer patches to be
 45280                                  ; PUSH AX to enable the critical sections
 45281                                  
 45282                                  		; DOSDATA:0315h (MSDOS 6.21)
 45283                                  
 45284                                  ;PUBLIC	CritPatch
 45285                                  
 45286                                  CritPatch:	; LABEL WORD
 45287                                  
 45288                                  ;IRP sect,<critDisk,critDevice>
 45289                                  
 45290                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 45291                                  ;
 45292                                  ;SR; Change code patch address to a variable in data segment
 45293                                  ;
 45294                                  ;       dw OFFSET DOSDATA: redir_patch
 45295                                  ;       dw OFFSET DOSDATA: redir_patch
 45296                                  ;
 45297                                  ;;hkn	Short_Addr  E&sect
 45298                                  ;;hkn	Short_Addr  L&sect
 45299                                  ;
 45300                                  ;ELSE
 45301                                  ;	DW	0
 45302                                  ;	DW	0
 45303                                  ;ENDIF
 45304                                  ;ENDM
 45305                                  ;	DW	0
 45306                                  
 45307                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 45308                                   
 45309 00000315 [0C0D]                  	dw 	redir_patch
 45310 00000317 [0C0D]                  	dw 	redir_patch			
 45311 00000319 [0C0D]                  	dw	redir_patch
 45312 0000031B [0C0D]                  	dw 	redir_patch
 45313                                  
 45314 0000031D 0000                    	dw	0
 45315                                  
 45316                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 45317                                  ; Also, IBM server 1.0 requires this also.
 45318                                  
 45319                                  	;EVEN			; Force swap area to start on word boundry
 45320 0000031F 90                      align 2
 45321                                  	;PUBLIC	SWAP_START
 45322                                  SWAP_START:	; LABEL BYTE
 45323 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 45324 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 45325 00000322 FF                      WPERR:		db -1		; Write protect error flag
 45326 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 45327 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 45328                                  
 45329                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 45330 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 45331 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 45332                                  ; end warning
 45333                                   
 45334 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 45335                                  
 45336 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 45337 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 45338 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 45339 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 45340 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 45341 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 45342                                  ;				; F.C. 2/17/86
 45343 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 45344 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 45345                                  ;align 2
 45346                                  SWAP_ALWAYS:	; 05/08/2018
 45347 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 45348                                  				;   extended error type stuff.
 45349                                  				;   NOTE: does not have Correct value on
 45350                                  				;   1-12, OEM, Get/Set CurrentPDB,
 45351                                  				;   GetExtendedError system calls)
 45352 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 45353 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 45354 00000340 0000                    FirstArena:	dw 0		; first free block found
 45355 00000342 0000                    BestArena:	dw 0		; best free block found
 45356 00000344 0000                    LastArena:	dw 0		; last free block found
 45357 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 45358 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 45359 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 45360 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 45361 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 45362 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 45363 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 45364                                  
 45365                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 45366                                  	;EVEN
 45367 0000034F 90                      align 2
 45368                                  		; DOSDATA:0350h (MSDOS 6.21)
 45369 00000350 00                      DAY:		db 0		; Day of month
 45370 00000351 00                      MONTH:		db 0		; Month of year
 45371 00000352 0000                    YEAR:		dw 0		; Year (with century)
 45372 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 45373 00000356 00                      WEEKDAY:	db 0		; Day of week
 45374                                  ; end warning
 45375                                  
 45376 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 45377 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 45378 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 45379                                  
 45380                                  ; Combination of all device call parameters
 45381                                  	;PUBLIC	DEVCALL 	;
 45382                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 45383                                  DEVCALL: ; 08/08/2018
 45384 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 45385 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 45386 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 45387 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 45388 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 45389                                  
 45390                                  	;PUBLIC	CALLUNIT
 45391                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 45392                                  CALLFLSH: ; LABEL   WORD	;
 45393 00000367 00                      CALLMED:	db 0		; media byte
 45394                                  CALLBR:	  ; LABEL   DWORD	;
 45395                                  	;PUBLIC	CALLXAD 	;
 45396                                  CALLXAD:  ; LABEL   DWORD	;
 45397 00000368 00                      CALLRBYT:	db 0		;
 45398                                  	;PUBLIC	CALLVIDM	;
 45399                                  CALLVIDM: ; LABEL   DWORD	;
 45400 00000369 00<rep 3h>              	times 3 db 0	;
 45401                                  	;PUBLIC CallBPB		;
 45402                                  CALLBPB:  ; LABEL   DWORD	;
 45403                                  CALLSCNT:			;
 45404 0000036C 0000                    		dw 0		;
 45405                                  	;PUBLIC	CALLSSEC	;
 45406                                  CALLSSEC: ; LABEL   WORD	;
 45407 0000036E 0000                    		dw 0		;
 45408 00000370 00000000                CALLVIDRW:	dd 0		;
 45409                                  ;MSDOS 6.0
 45410 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 45411 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 45412                                  
 45413                                  ; Same as above for I/O calls	;
 45414                                  				;
 45415                                  	;PUBLIC	IOCall		;
 45416                                  ;IOCALL	SRHEAD	<>		;
 45417                                  IOCALL:	; 07/08/2018
 45418 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 45419 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 45420 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 45421 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 45422 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 45423                                  IOFLSH:	  ; LABEL   WORD	;
 45424                                          ;PUBLIC  IORCHR		;
 45425                                  IORCHR:	  ; LABEL   BYTE	;
 45426 00000389 00                      IOMED:		db 0		;
 45427 0000038A 00000000                IOXAD:		dd 0		;
 45428 0000038E 0000                    IOSCNT:		dw 0		;	
 45429 00000390 0000                    IOSSEC:		dw 0		;
 45430                                  
 45431                                  ; Call struct for DSKSTATCHK	;
 45432 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 45433 00000393 00                      		db 0
 45434 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 45435 00000395 0000                    DSKSTST:	dw 0		;
 45436 00000397 00<rep 8h>              	times 8	db 0		;
 45437 0000039F 00                      DSKCHRET:	db 0		;
 45438                                  
 45439                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 45440                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 45441                                  ;hkn   short_addr  DEVIOBUF	;
 45442                                  	
 45443 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 45444 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 45445 000003A4 0100                    DSKSTCNT:	dw 1		;
 45446 000003A6 0000                    		dw 0		;
 45447                                  
 45448 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 45449                                  
 45450                                  ;MSDOS 6.0
 45451                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 45452 000003A9 00000000                		dd 0		;MS. position
 45453 000003AD 00000000                		dd 0		;MS. length
 45454                                  
 45455                                  ;hkn; the foll. was moved from dosmes.asm.
 45456                                  
 45457                                  	;EVEN
 45458 000003B1 90                      align 2				; needed to maintain offsets
 45459                                  
 45460                                  		; DOSDATA:03B2h (MSDOS 6.21)
 45461                                  USERNUM:
 45462 000003B2 0000                     		dw 0		; 24 bit user number
 45463 000003B4 00                      		db 0
 45464                                  ;IF IBM
 45465                                  ;IF IBMCOPYRIGHT
 45466                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 45467                                  ;ELSE
 45468                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 45469                                  ;ENDIF
 45470                                  ;ELSE
 45471 000003B5 FF                      OEMNUM:		DB 0FFh
 45472                                  ;ENDIF
 45473                                  
 45474                                  ;============================================================================
 45475                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 45476                                  ;============================================================================
 45477                                  ; 25/04/2019 - Retro DOS 4.0
 45478                                  
 45479                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 45480                                  ; ----------------------------------------------------------
 45481                                  ; This data section which was named as uninitialized data
 45482                                  ; (as overlayed by initialization code) but follows 
 45483                                  ; initialized data section from DOSDATA:03B6h address
 45484                                  ; (in otherwords, the method is different than MSDOS 3.3,
 45485                                  ; and there is not overlaying..)
 45486                                  ; **********************************************************
 45487                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 45488                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 45489                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 45490                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 45491                                  ; TIMEBUF is at offset 03B6h.
 45492                                  ; **********************************************************	
 45493                                  
 45494                                  ;Break <Uninitialized data overlayed by initialization code>
 45495                                  ;----------------------------------------------------------------------------
 45496                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 45497                                  ; Init code overlaps with data area below
 45498                                  
 45499                                  ; 	ORG     0
 45500                                  
 45501                                  MSDAT001S:	; label byte
 45502                                  
 45503                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 45504                                  TIMEBUF: ;	times 6 db 0
 45505 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 45506 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 45507                                  
 45508                                  ; The following areas are used as temp buffer in EXEC system call
 45509                                  
 45510                                  ; DOSDATA:03BEh
 45511                                  OPENBUF: ;times 64  dw	0
 45512 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 45513                                  RENBUF:	
 45514 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 45515                                  
 45516                                  ; Buffer for search calls
 45517                                  SEARCHBUF:	
 45518 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 45519                                  DUMMYCDS:  ;times 88 db 0
 45520 000004F3 00<rep 58h>             	times	curdirLen db 0
 45521                                  
 45522                                  ; End of contiguous buffer
 45523                                   
 45524                                  ; Temporary directory entry for use by many routines. Device directory
 45525                                  ; entries (bogus) are built here.
 45526                                  
 45527                                  ; DOSDATA:054Bh
 45528                                  
 45529                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 45530                                  
 45531                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 45532                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 45533                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 45534                                  
 45535                                  NAME1:	
 45536 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 45537                                  NAME2:
 45538 00000557 00<rep Dh>              	times	13 db	0 		;
 45539                                  DESTSTART:
 45540 00000564 0000                    	dw	0			;
 45541                                          ;DB	((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 45542                                  	;times	5  db	0
 45543 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 45544                                  
 45545                                  ; End Temporary directory entry.
 45546                                  
 45547 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 45548                                  EXTFCB:	
 45549 0000056C 00                      	db	0		; TRUE => extended FCB in use
 45550                                  SATTRIB:
 45551 0000056D 00                      	db	0		; Storage for search attributes
 45552                                  OPEN_ACCESS:
 45553 0000056E 00                      	db	0		; access of open system call
 45554                                  FOUNDDEL:
 45555 0000056F 00                      	db	0		; true => file was deleted
 45556                                  FOUND_DEV:
 45557 00000570 00                      	db	0		; true => search found a device
 45558                                  FSPLICE:
 45559 00000571 00                      	db	0		; true => do a splice in transpath
 45560                                  FSHARING:
 45561 00000572 00                      	db	0		; TRUE => no redirection
 45562                                  SECCLUSPOS:
 45563 00000573 00                      	db	0		; Position of first sector within cluster
 45564 00000574 00                      TRANS:	db	0		;
 45565 00000575 00                      READOP:	db	0		;
 45566                                  THISDRV:
 45567 00000576 00                      	db	0		;
 45568                                  CLUSFAC:
 45569 00000577 00                      	db	0		;
 45570                                  CLUSSPLIT:
 45571 00000578 00                      	db	0		;
 45572                                  INSMODE:
 45573 00000579 00                      	db	0		; true => insert mode in buffered read
 45574 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 45575 0000057B 00                      VOLID:	db	0		;
 45576                                  EXIT_TYPE:
 45577 0000057C 00                      	db	0		; type of exit...
 45578                                   
 45579                                  	;EVEN
 45580                                  
 45581 0000057D 90                      align 2
 45582                                  
 45583                                  ; DOSDATA:057Eh
 45584                                  
 45585                                  ; WARNING - the following two items are accessed as a word
 45586                                  
 45587                                  CREATING:
 45588 0000057E 00                      	db	0		; true => creating a file
 45589 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 45590                                  				; = DIRFREE iff BUGBUG
 45591                                  EXITHOLD:
 45592 00000580 00000000                	dd	0		; Temp location for proc terminate
 45593                                  USER_SP:
 45594 00000584 0000                    	dw	0		; User SP for system call
 45595                                  USER_SS:
 45596 00000586 0000                    	dw	0		; User SS for system call
 45597                                  CONTSTK:
 45598 00000588 0000                    	dw	0		;
 45599                                  THISDPB:
 45600 0000058A 00000000                	dd	0		;
 45601                                  CLUSSAVE:
 45602 0000058E 0000                    	dw	0		;
 45603                                  CLUSSEC:
 45604 00000590 00000000                	dd	0		;>32mb			AC0000
 45605                                  PREREAD:
 45606 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 45607 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 45608                                  FATBYTE:
 45609 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 45610                                  ; DOSDATA:059Ah
 45611 0000059A 00000000                DEVPT:	dd	0		;
 45612                                  THISSFT:
 45613 0000059E 00000000                	dd	0		; Address of user SFT
 45614                                  THISCDS:
 45615 000005A2 00000000                	dd	0		; Address of current CDS
 45616                                  THISFCB:
 45617 000005A6 00000000                	dd	0		; Address of user FCB
 45618 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 45619 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 45620 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 45621                                  WFP_START:
 45622 000005B2 0000                    	dw	0		;
 45623                                  REN_WFP:
 45624 000005B4 0000                    	dw	0		;
 45625                                  CURR_DIR_END:
 45626 000005B6 0000                    	dw	0		;
 45627                                  NEXTADD:
 45628 000005B8 0000                    	dw	0		;
 45629                                  LASTPOS:
 45630 000005BA 0000                    	dw	0		;
 45631                                  CLUSNUM:
 45632 000005BC 0000                    	dw	0		;
 45633 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 45634                                  DIRSTART:
 45635 000005C2 0000                    	dw	0		;
 45636 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 45637 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 45638                                                                  ; sectors
 45639                                  BYTSECPOS:
 45640 000005CC 0000                    	dw	0		; Position of first byte within sector
 45641                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 45642 000005CE 0000<rep 2h>                    times	2 dw 0
 45643                                  BYTCNT1:
 45644 000005D2 0000                    	dw	0		; No. of bytes in first sector
 45645                                  BYTCNT2:
 45646 000005D4 0000                    	dw	0		; No. of bytes in last sector
 45647 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 45648                                  ; DOSDATA:05D8h
 45649                                  ENTFREE:
 45650 000005D8 0000                    	dw	0		;
 45651                                  ENTLAST:
 45652 000005DA 0000                    	dw	0		;
 45653                                  NXTCLUSNUM:
 45654 000005DC 0000                    	dw	0		;
 45655                                  GROWCNT:
 45656 000005DE 00000000                	dd	0		;
 45657 000005E2 00000000                CURBUF:	dd	0		;
 45658 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 45659 000005EA 0000                    SAVEBX:	dw	0		;
 45660 000005EC 0000                    SAVEDS:	dw	0		;
 45661                                  RESTORE_TMP:
 45662 000005EE 0000                    	dw	0		; return address for restore world
 45663 000005F0 0000                    NSS:	dw	0
 45664 000005F2 0000                    NSP:	dw	0
 45665                                  ; DOSDATA:05F4h
 45666                                  EXTOPEN_FLAG:
 45667 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 45668                                  EXTOPEN_ON:
 45669 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 45670                                  EXTOPEN_IO_MODE:
 45671 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 45672                                  SAVE_DI:
 45673 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 45674                                  SAVE_ES:
 45675 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 45676                                  SAVE_DX:
 45677 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 45678                                  SAVE_CX:
 45679 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 45680                                  SAVE_BX:
 45681 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 45682                                  SAVE_SI:
 45683 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 45684                                  SAVE_DS:
 45685 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 45686                                  
 45687                                  ; DOSDATA:0607h
 45688                                  
 45689                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 45690                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 45691                                  ; the high 16, the low 16 are still in the register.
 45692                                  
 45693                                  HIGH_SECTOR:	
 45694 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 45695                                  ;OffsetMagicPatch:
 45696                                  ;	dw	MagicPatch ;scottq 8/6/92
 45697                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45698 00000609 0000                    	dw	0
 45699                                  				;see dos\mpatch.asm
 45700                                  DISK_FULL:
 45701 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 45702                                  TEMP_VAR:
 45703 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 45704                                  TEMP_VAR2:
 45705 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 45706 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 45707                                  DOS34_FLAG:
 45708 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 45709                                  NO_FILTER_PATH:
 45710 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 45711                                  NO_FILTER_DPATH:
 45712 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 45713                                  ; M008
 45714                                  AbsRdWr_SS:
 45715 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 45716                                  AbsRdWr_SP:
 45717 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 45718                                  
 45719                                  	; I_am  UU_Callback_flag,BYTE,<0>  ; Unused
 45720                                  ; M008
 45721                                  	; 24/03/2024
 45722                                  	; MSDOS 5.0 MSDOS.SYS - DOSDATA:061Fh
 45723                                  	; MSDOS 6.22 MSDOS.SYS - DOSDATA:061Fh
 45724 0000061F 00                      	db 	0
 45725                                   
 45726                                  ; make those pushes fast!!!
 45727                                  ;EVEN
 45728                                  
 45729                                  align 2
 45730                                  
 45731                                  StackSize   equ 180h  ; 384	; gross but effective
 45732                                  
 45733                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 45734                                  ;				; made up their minds about
 45735                                   
 45736                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 45737                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 45738                                  
 45739                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 45740                                   
 45741 00000620 00<rep 180h>                    times	StackSize db	0	;
 45742                                  AUXSTACK:			; LABEL   BYTE
 45743                                   
 45744 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 45745                                  DSKSTACK:			; LABEL   BYTE
 45746                                   
 45747 00000920 00<rep 180h>                    times	StackSize db	0	;
 45748                                  IOSTACK:			; LABEL   BYTE
 45749                                  
 45750                                  ; DOSDATA:0AA0h 
 45751                                   
 45752                                  ; patch space for Boca folks.
 45753                                  ; Say What????!!! This does NOT go into the swappable area!
 45754                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 45755                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 45756                                   
 45757                                  IBMPATCH: ; label byte
 45758                                  PRINTER_FLAG:
 45759 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 45760                                  VOLCHNG_FLAG:
 45761 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 45762                                  VIRTUAL_OPEN:
 45763 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 45764                                   
 45765                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 45766                                  
 45767                                  FSeek_drive:
 45768 00000AA3 00                      	db	0		;AN000; fastseek drive #
 45769                                  FSeek_firclus:
 45770 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 45771                                  FSeek_logclus:
 45772 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 45773                                  FSeek_logsave:
 45774 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 45775                                  
 45776                                  ; DOSDATA:0AAAh
 45777                                  
 45778                                  TEMP_DOSLOC:
 45779 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 45780                                  				;at SYSINIT time.
 45781                                  SWAP_END:  ; LABEL   BYTE
 45782                                   
 45783                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 45784                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 45785                                  ; to include this byte.
 45786                                   
 45787 00000AAC 00                      	db	0
 45788                                  
 45789                                  ; DOSDATA:0AADh
 45790                                   
 45791                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 45792                                  
 45793                                  ;DOSDATA    ENDS
 45794                                  
 45795                                  ;============================================================================
 45796                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 45797                                  ;============================================================================
 45798                                  ; 27/04/2019 - Retro DOS 4.0
 45799                                  ; 16/07/2018 - Retro DOS 3.0
 45800                                  
 45801                                  ;DOSDATA Segment
 45802                                  
 45803                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 45804                                  
 45805                                  ;
 45806                                  ; upper case table
 45807                                  ; ---------------------------------------------------------------------------
 45808                                  UCASE_TAB:	; label   byte
 45809 00000AAD 8000                    	dw	128
 45810 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 45811 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45812 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45813 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45814 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45815 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45816 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45817 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45818 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45819 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45820 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45821 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45822 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45823 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45824 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45825 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45826                                  ;
 45827                                  ; file upper case table
 45828                                  ; ---------------------------------------------------------------------------
 45829                                  FILE_UCASE_TAB:	; label  byte
 45830 00000B2F 8000                    	dw	128
 45831 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 45832 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 45833 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 45834 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 45835 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 45836 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 45837 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45838 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45839 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45840 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45841 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45842 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45843 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 45844 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45845 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45846 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45847                                  ;
 45848                                  ; file char list
 45849                                  ; ---------------------------------------------------------------------------
 45850                                  FILE_CHAR_TAB:	; label  byte
 45851 00000BB1 1600                    	dw	22				; length
 45852 00000BB3 0100FF                  	db	1,0,255 			; include all
 45853 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 45854 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 45854 00000BC2 7C3C3E2B3D3B2C     
 45855                                  	;db	24 dup (?)			; reserved
 45856 00000BC9 00<rep 18h>             	times	24 db 0
 45857                                  
 45858                                  ;
 45859                                  ; collate table
 45860                                  ; ---------------------------------------------------------------------------
 45861                                  COLLATE_TAB:	; label   byte
 45862 00000BE1 0001                    	dw	256
 45863 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 45864 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 45865 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 45866 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 45867 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 45868 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 45869 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 45870 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 45871 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 45872 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45873 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45874 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 45875 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 45876 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 45877 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 45878 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 45879 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 45880 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 45881 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 45882 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 45883 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 45884 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 45885 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 45886 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 45887 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 45888 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 45889 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 45890 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 45891 00000CC3 E053                    	db	224,"S"
 45892 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 45893 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 45894 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 45895 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 45896                                  
 45897                                  ; ------------------------------------------------<MSKK01>----------------------
 45898                                  
 45899                                  ; DOSDATA:0CE3h
 45900                                  
 45901                                  ; 29/04/2019
 45902                                  
 45903                                  ; dbcs is not supported in DOS 3.3
 45904                                  ;		   DBCS_TAB	    CC_DBCS <>
 45905                                  ;
 45906                                  ; DBCS for DOS 4.00			   2/12/KK
 45907                                  
 45908                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 45909                                  ; ------------------------------------------------<MSKK01>----------------------
 45910                                  ;ifdef	DBCS
 45911                                  ; ifdef	  JAPAN
 45912                                  ;		dw	6		; <MSKK01>
 45913                                  ;		db	081h,09fh	; <MSKK01>
 45914                                  ;		db	0e0h,0fch	; <MSKK01>
 45915                                  ;		db	0,0		; <MSKK01>
 45916                                  ;
 45917                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 45918                                  ; endif
 45919                                  ; ifdef	  TAIWAN
 45920                                  ;		dw	4		; <TAIWAN>
 45921                                  ;		db	081h,0FEh	; <TAIWAN>
 45922                                  ;		db	0,0		; <TAIWAN>
 45923                                  ;
 45924                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45925                                  ; endif
 45926                                  ; ifdef   KOREA                         ; Keyl
 45927                                  ;               dw      4               ; <KOREA>
 45928                                  ;               db      0A1h,0FEh       ; <KOREA>
 45929                                  ;               db      0,0             ; <KOREA>
 45930                                  ;
 45931                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 45932                                  ;  endif
 45933                                  ;else
 45934 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 45935                                  		;db	16 dup(0)	;AN000;  2/12/KK
 45936 00000CE5 00<rep 10h>             		times	16 db 0
 45937                                  
 45938                                  ;		dw	6		;  2/12/KK
 45939                                  ;		db	081h,09Fh	;  2/12/KK
 45940                                  ;		db	0E0h,0FCh	;  2/12/KK
 45941                                  ;		db	0,0		;  2/12/KK
 45942                                  ;
 45943                                  ;endif
 45944                                  ; ------------------------------------------------<MSKK01>----------------------
 45945                                  
 45946                                  ; DOSDATA:0CF5h
 45947                                  
 45948                                  ; ---------------------------------------------------------------------------
 45949                                  ;
 45950                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 45951                                  ;     ENTRY: AL = Character to map
 45952                                  ;     EXIT:  AL = The converted character
 45953                                  ; Alters no registers except AL and flags.
 45954                                  ; The routine should do nothing to chars below 80H.
 45955                                  ; ---------------------------------------------------------------------------
 45956                                  ; Example:
 45957                                  
 45958                                  MAP_CASE:
 45959                                  ;Procedure MAP_CASE,FAR
 45960                                  
 45961 00000CF5 3C80                    	CMP	AL,80h
 45962 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 45963 00000CF9 CB                      	RETF
 45964                                  Map1:
 45965 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 45966 00000CFC 1E                      	PUSH	DS
 45967 00000CFD 53                      	PUSH	BX
 45968 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 45969                                  FINISH:
 45970 00000D01 0E                      	PUSH	CS		;Move to DS
 45971 00000D02 1F                      	POP	DS
 45972 00000D03 D7                      	XLAT			;Get upper case character
 45973 00000D04 5B                      	POP	BX
 45974 00000D05 1F                      	POP	DS
 45975                                  L_RET:	
 45976 00000D06 CB                      	RETF
 45977                                  
 45978                                  ;EndProc MAP_CASE
 45979                                  
 45980                                  ; ---------------------------------------------------------------------------
 45981                                  
 45982                                  ; The variables for ECS version are moved here for the same data alignments
 45983                                  ; as IBM-DOS and MS-DOS.
 45984                                  
 45985                                  InterChar:
 45986 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 45987                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 45988                                  DUMMY:	; LABEL   WORD
 45989                                  InterCon:  
 45990 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 45991                                  SaveCurFlg:
 45992 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 45993                                  
 45994                                  ; ---------------------------------------------------------------------------
 45995                                  
 45996 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 45997                                  redir_patch:
 45998 00000D0C 00                      	  db	0
 45999                                  
 46000                                  ; DOSDATA:0D0Dh
 46001                                  
 46002                                  Mark1:	; label byte
 46003                                  
 46004                                  ;IF2
 46005                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 46006                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46007                                  ;	ENDIF
 46008                                  ;ENDIF
 46009                                  
 46010 00000D0D 00<rep 5h>              	  times 5 db 0
 46011                                  
 46012                                  ;############################################################################
 46013                                  ;
 46014                                  ; ** HACK FOR DOS 4.0 REDIR **
 46015                                  ; 
 46016                                  ; The redir requires the following:
 46017                                  ;
 46018                                  ;	MSVERS	offset D12H
 46019                                  ;	YRTAB	offset D14H
 46020                                  ; 	MONTAB	offset D1CH
 46021                                  ;
 46022                                  ; WARNING! WARNING!
 46023                                  ; 
 46024                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 46025                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 46026                                  ;
 46027                                  ; CURRENTLY MARK1 = 0D0DH
 46028                                  ;
 46029                                  ;############################################################################
 46030                                  
 46031                                  	;ORG	0D12h
 46032                                  
 46033                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 46034                                  
 46035                                  	;db	6
 46036                                  	;db	20
 46037                                  
 46038                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 46039                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 46040 00000D12 05                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 46041 00000D13 00                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 46042                                  
 46043                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 46044                                  ;
 46045                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>
 46046                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31>
 46047                                  
 46048                                  ; Days in year
 46049                                  
 46050                                  YRTAB:   
 46051 00000D14 C8A6                    	DB	200,166			; Leap year
 46052 00000D16 C8A5                    	DB	200,165
 46053 00000D18 C8A5                    	DB	200,165
 46054 00000D1A C8A5                    	DB	200,165
 46055                                  
 46056                                  ; Days of each month
 46057                                  
 46058                                  MONTAB:        
 46059 00000D1C 1F                      	DB      31                      ; January
 46060                                  february:
 46061 00000D1D 1C                      	DB	28 			; February--reset each
 46062                                  					; time year changes
 46063 00000D1E 1F                              DB      31                      ; March
 46064 00000D1F 1E                              DB      30                      ; April
 46065 00000D20 1F                              DB      31                      ; May
 46066 00000D21 1E                              DB      30                      ; June
 46067 00000D22 1F                              DB      31                      ; July
 46068 00000D23 1F                              DB      31                      ; August
 46069 00000D24 1E                              DB      30                      ; September
 46070 00000D25 1F                              DB      31                      ; October
 46071 00000D26 1E                              DB      30                      ; November
 46072 00000D27 1F                              DB      31                      ; December
 46073                                  
 46074                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 46075                                  
 46076                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 46077                                  
 46078                                  SysInitTable:
 46079                                  	;dw	SYSINITVAR
 46080 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 46081 00000D2A 0000                            dw      0		; segment
 46082 00000D2C [2A12]                          dw	COUNTRY_CDPG	; pointer to country tabl
 46083 00000D2E 0000                            dw      0		; segment of pointer
 46084                                  
 46085                                  ; DOS 3.3 F.C. 6/12/86
 46086                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 46087                                  
 46088                                  FastTable:				; a better name
 46089                                  FastOpenTable:
 46090 00000D30 0200                    	dw      2                       ; number of entries
 46091 00000D32 [8712]                  	dw      FastRet			; pointer to ret instr.
 46092 00000D34 0000                    	dw      0                       ; and will be modified by
 46093 00000D36 [8712]                  	dw      FastRet			; FASTxxx when loaded in
 46094 00000D38 0000                    	dw      0
 46095                                  
 46096                                  ; DOS 3.3 F.C. 6/12/86
 46097                                  
 46098                                  FastFlg:				; flags
 46099                                  FastOpenFlg:
 46100 00000D3A 00                      	db	0			; don't change the foll: order
 46101                                  
 46102                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 46103                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 46104                                  ; or filled by FastOPen when calling FastOpen Lookup
 46105                                  
 46106                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 46107                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 46108                                  	;times	11 db 0
 46109 00000D3B 00<rep Bh>              	times	FEI.size db 0
 46110                                  
 46111                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 46112                                  ; when calling FastOpen Lookup
 46113                                  
 46114                                  Dir_Info_Buff:	; label  byte
 46115                                  	;db   	SIZE dir_entry dup (0)
 46116                                  	;times	32 db 0
 46117 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 46118                                  
 46119                                  Next_Element_Start:
 46120 00000D66 0000                    	dw	0			; save next element start offset
 46121                                  Del_ExtCluster:
 46122 00000D68 0000                    	dw	0			; for dos_delete
 46123                                  
 46124                                  ; The following is a stack and its pointer for interrupt 2F which is used
 46125                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 46126                                  ; not to destroy the INT 21 stack saved for the user.
 46127                                  
 46128                                  USER_SP_2F:	; LABEL  WORD
 46129 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 46130                                  
 46131                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 46132                                  DOS_TEMP:	; label  word		; temporary word
 46133                                  FAKE_STACK_2F:  
 46134                                  	; dw  14 dup (0)		; 12 register temporary storage
 46135 00000D6C 0000<rep Eh>            	times 14 dw 0
 46136                                  
 46137                                  Hash_Temp: 	;label  word		; temporary word
 46138                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 46139 00000D88 0000<rep 4h>            	times 4 dw 0
 46140                                  
 46141                                  SCAN_FLAG:
 46142 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 46143                                  DATE_FLAG:
 46144 00000D91 0000                    	dw     0                	; flag to update the date
 46145                                  
 46146                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 46147 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 46148                                  
 46149                                  MSG_EXTERROR:	; label  DWORD		; for system message addr
 46150 00000D95 00000000                	dd     0               		; for extended error
 46151 00000D99 00000000                	dd     0			; for parser
 46152 00000D9D 00000000                	dd     0			; for critical errror
 46153 00000DA1 00000000                	dd     0			; for IFS
 46154 00000DA5 00000000                	dd     0			; for code reduction
 46155                                  
 46156                                  SEQ_SECTOR:	; label  DWORD 		; last sector read
 46157 00000DA9 FFFFFFFF                	dd     -1
 46158                                  SC_SECTOR_SIZE:
 46159 00000DAD 0000                    	dw	0			; sector size for SC
 46160                                  SC_DRIVE:
 46161 00000DAF 00                      	db	0			; drive # for secondary cache
 46162                                  CurSC_DRIVE:
 46163 00000DB0 FF                      	db	-1			; current SC drive
 46164                                  CurSC_SECTOR:
 46165 00000DB1 00000000                	dd	0			; current SC starting sector
 46166                                  SC_STATUS:
 46167 00000DB5 0000                    	dw	0			; SC status word
 46168                                  SC_FLAG:
 46169 00000DB7 00                      	db	0			; SC flag
 46170                                  AbsDskErr:
 46171 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 46172                                  
 46173                                  NO_NAME_ID:	; label byte
 46174 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id
 46174 00000DC3 2020               
 46175                                  
 46176                                  ;hkn; moved from TABLE segment in kstrin.asm
 46177                                  
 46178                                  KISTR001S:	; label	byte		; 2/17/KK
 46179 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 46180                                  KISTR001E:	; label	byte		; 2/17/KK
 46181                                  
 46182                                  ; the nul device driver used to be part of the code. However, since the 
 46183                                  ; header is in the data, and the entry points are only given as an offset,
 46184                                  ; the strategy and interrupt entry points must also be in the data now.
 46185                                  
 46186                                  ; DOSDATA:0DC6h
 46187                                  
 46188                                  SNULDEV:
 46189                                  ;procedure snuldev,far
 46190                                  	;or	word [es:bx+3],100h
 46191                                  	; 17/12/2022
 46192                                  	;or	byte [es:bx+4],01h
 46193                                  	; 05/01/2024 (Original MSDOS and RetroDOS DATA address compatibility)
 46194                                  	;or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 46195 00000DC6 26814F030001            	or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 46196                                  INULDEV:
 46197 00000DCC CB                      	retf				; must not be a return!
 46198                                  ;endproc snuldev
 46199                                  
 46200                                  ;M044
 46201                                  ; Second part of save area for saving last para of Windows memory
 46202                                  
 46203                                  WinoldPatch2:
 46204                                  	;db	8 dup (?)	; M044
 46205 00000DCD 00<rep 8h>              	times	8 db 0	
 46206                                  UmbSave2:
 46207                                  	;db	5 dup (?)	; M062
 46208 00000DD5 00<rep 5h>              	times	5 db 0
 46209                                  UmbSaveFlag:
 46210 00000DDA 00                      	db	0		; M062
 46211                                  
 46212                                  ; DOSDATA:0DDBh
 46213                                  
 46214                                  Mark2:	; label byte
 46215                                  
 46216                                  ;IF2
 46217                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 46218                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 46219                                  ;	ENDIF
 46220                                  ;ENDIF
 46221                                  
 46222                                  ;############################################################################
 46223                                  ;
 46224                                  ; ** HACK FOR DOS 4.0 REDIR **
 46225                                  ; 
 46226                                  ; The redir requires the following:
 46227                                  ;
 46228                                  ;	ERR_TABLE_21	offset DDBH
 46229                                  ;	ERR_TABLE_24	offset E5BH
 46230                                  ; 	ErrMap24	offset EABH
 46231                                  ;
 46232                                  ; WARNING! WARNING!
 46233                                  ;
 46234                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 46235                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 46236                                  ;
 46237                                  ; CURRENTLY MARK2 = 0DD0H
 46238                                  ;
 46239                                  ;############################################################################
 46240                                  
 46241                                  	;ORG	0DDBh
 46242                                  
 46243                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 46244                                  
 46245                                  ; ---------------------------------------------------------------------------
 46246                                  ;
 46247                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 46248                                  ; errors. Each entry is 4 bytes long:
 46249                                  ;
 46250                                  ;       Err#,Class,Action,Locus
 46251                                  ;
 46252                                  ; A value of 0FFh indicates a call specific value (ie. should already
 46253                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46254                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 46255                                  ;
 46256                                  ; ---------------------------------------------------------------------------
 46257                                  
 46258                                  ;ErrTab  Macro   err,class,action,locus
 46259                                  ;ifidn <locus>,<0FFh>
 46260                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 46261                                  ;ELSE
 46262                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 46263                                  ;ENDIF
 46264                                  ;ENDM
 46265                                  
 46266                                  ERR_TABLE_21: ; LABEL   BYTE
 46267 00000DDB 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 46268 00000DDF 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46269 00000DE3 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46270 00000DE7 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 46271 00000DEB 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 46272 00000DEF 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46273 00000DF3 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 46274 00000DF7 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46275 00000DFB 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46276 00000DFF 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 46277 00000E03 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46278 00000E07 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46279 00000E0B 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 46280 00000E0F 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46281 00000E13 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 46282 00000E17 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 46283 00000E1B 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 46284 00000E1F 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 46285 00000E23 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46286 00000E27 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46287 00000E2B 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 46288 00000E2F 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 46289 00000E33 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 46290 00000E37 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46291 00000E3B 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 46292 00000E3F 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 46293 00000E43 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 46294 00000E47 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46295                                      ; MSDOS 6.0
 46296 00000E4B 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46297 00000E4F 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 46298 00000E53 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 46299 00000E57 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 46300                                  
 46301                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 46302                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 46303                                  ;		db 2,8,3,2
 46304                                  ;		db 3,8,3,2
 46305                                  ;		db 4,1,4,1
 46306                                  ;		db 5,3,3,0FFh
 46307                                  ;		db 6,7,4,1
 46308                                  ;		db 7,7,5,5
 46309                                  ;		db 8,1,4,5
 46310                                  ;		db 9,7,4,5
 46311                                  ;		db 0Ah,7,4,5
 46312                                  ;		db 0Bh,9,3,1
 46313                                  ;		db 0Ch,7,4,1
 46314                                  ;		db 0Dh,9,4,1
 46315                                  ;		db 0Fh,8,3,2
 46316                                  ;		db 10h,3,3,2
 46317                                  ;		db 11h,0Dh,3,2
 46318                                  ;		db 12h,8,3,2
 46319                                  ;		db 50h,0Ch,3,2
 46320                                  ;		db 20h,0Ah,2,2
 46321                                  ;		db 21h,0Ah,2,2
 46322                                  ;		db 54h,1,4,0FFh
 46323                                  ;		db 56h,3,3,1
 46324                                  ;		db 52h,1,4,2
 46325                                  ;		db 32h,9,3,3
 46326                                  ;		db 55h,0Ch,3,3
 46327                                  ;		db 57h,9,3,1
 46328                                  ;		db 53h,0Dh,4,1
 46329                                  ;		db 24h,1,4,5
 46330                                  ; MSDOS 6.0 (MSDOS 6.21)
 46331                                  ;		db 26h,1,4,1
 46332                                  ;		db 27h,1,4,1
 46333                                  ;		db 5Ah,0Dh,4,2
 46334                                  ; MSDOS 6.0 & MSDOS 3.3
 46335                                  ;		db 0FFh,0FFh,0FFh,0FFh
 46336                                  
 46337                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 46338                                  
 46339                                  ; ---------------------------------------------------------------------------
 46340                                  ;
 46341                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 46342                                  ; errors. Each entry is 4 bytes long:
 46343                                  ;
 46344                                  ;       Err#,Class,Action,Locus
 46345                                  ;
 46346                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 46347                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 46348                                  ; THE END.
 46349                                  ;
 46350                                  ; ---------------------------------------------------------------------------
 46351                                  
 46352                                  ERR_TABLE_24: ; LABEL   BYTE
 46353 00000E5B 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46354 00000E5F 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46355 00000E63 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 46356 00000E67 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46357 00000E6B 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46358 00000E6F 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 46359 00000E73 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 46360 00000E77 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46361 00000E7B 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 46362 00000E7F 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 46363 00000E83 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 46364 00000E87 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 46365 00000E8B 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 46366 00000E8F 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46367 00000E93 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 46368 00000E97 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 46369 00000E9B 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 46370 00000E9F 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 46371 00000EA3 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 46372 00000EA7 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 46373                                  
 46374                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 46375                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 46376                                  ;		db 14h,4,5,1
 46377                                  ;		db 15h,5,7,0FFh
 46378                                  ;		db 16h,4,5,1
 46379                                  ;		db 17h,0Bh,4,2
 46380                                  ;		db 18h,4,5,1
 46381                                  ;		db 19h,5,1,2
 46382                                  ;		db 1Ah,0Bh,7,2
 46383                                  ;		db 1Bh,0Bh,4,2
 46384                                  ;		db 1Ch,2,7,4
 46385                                  ;		db 1Dh,5,4,0FFh
 46386                                  ;		db 1Eh,5,4,0FFh
 46387                                  ;		db 1Fh,0Dh,4,0FFh
 46388                                  ;		db 20h,0Ah,2,2
 46389                                  ;		db 21h,0Ah,2,2
 46390                                  ;		db 22h,0Bh,7,2
 46391                                  ;		db 32h,9,3,3
 46392                                  ;		db 23h,7,4,1
 46393                                  ;		db 24h,1,4,5
 46394                                  ;		db 0FFh,0Dh,5,0FFh
 46395                                  
 46396                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 46397                                  
 46398                                  ; ---------------------------------------------------------------------------
 46399                                  ;
 46400                                  ; We need to map old int 24 errors and device driver errors into the new set
 46401                                  ; of errors. The following table is indexed by the new errors
 46402                                  ;
 46403                                  ; ---------------------------------------------------------------------------
 46404                                  
 46405                                  ;Public  ErrMap24
 46406                                  ErrMap24: ; Label   BYTE
 46407 00000EAB 13                          DB  error_write_protect	; 0
 46408 00000EAC 14                          DB  error_bad_unit		; 1
 46409 00000EAD 15                          DB  error_not_ready		; 2
 46410 00000EAE 16                          DB  error_bad_command	; 3
 46411 00000EAF 17                          DB  error_CRC		; 4
 46412 00000EB0 18                          DB  error_bad_length	; 5
 46413 00000EB1 19                          DB  error_seek		; 6
 46414 00000EB2 1A                          DB  error_not_DOS_disk	; 7
 46415 00000EB3 1B                          DB  error_sector_not_found	; 8
 46416 00000EB4 1C                          DB  error_out_of_paper	; 9
 46417 00000EB5 1D                          DB  error_write_fault	; A
 46418 00000EB6 1E                          DB  error_read_fault	; B
 46419 00000EB7 1F                          DB  error_gen_failure	; C
 46420 00000EB8 1F                          DB  error_gen_failure	; D  RESERVED
 46421 00000EB9 1F                          DB  error_gen_failure	; E  RESERVED
 46422 00000EBA 22                          DB  error_wrong_disk	; F
 46423                                  
 46424                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 46425                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 46426                                  	
 46427                                  ErrMap24End: ; LABEL   BYTE
 46428                                  
 46429                                  ; DOSDATA:0EBBh (MSDOS 6.21, MSDOS.SYS)
 46430                                  
 46431                                  ; ---------------------------------------------------------------------------
 46432                                  
 46433                                  ; 27/04/2019 - Retro DOS v4.0
 46434                                  
 46435                                  FIRST_BUFF_ADDR:
 46436 00000EBB 0000                    	dw	0			; first buffer address
 46437                                  SPECIAL_VERSION:
 46438 00000EBD 0000                    	dw	0			;AN006; used by INT 2F 47H
 46439                                  FAKE_COUNT:
 46440 00000EBF 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 46441                                  OLD_FIRSTCLUS:
 46442 00000FBE 0000                    	dw	0			;AN011; save old first cluster for fastopen
 46443                                  
 46444                                  ; ---------------------------------------------------------------------------
 46445                                  
 46446                                  ;smr; moved from TABLE segment in exec.asm
 46447                                  
 46448 00000FC0 0000                    exec_init_SP: dw 0
 46449 00000FC2 0000                    exec_init_SS: dw 0
 46450 00000FC4 0000                    exec_init_IP: dw 0
 46451 00000FC6 0000                    exec_init_CS: dw 0
 46452                                  
 46453                                  exec_signature:
 46454 00000FC8 0000                    	dw	0	; must contain 4D5A (yay zibo!)
 46455                                  exec_len_mod_512:
 46456 00000FCA 0000                    	dw	0	; low 9 bits of length
 46457                                  exec_pages:
 46458 00000FCC 0000                    	dw	0	; number of 512b pages in file
 46459                                  exec_rle_count:
 46460 00000FCE 0000                    	dw	0	; count of reloc entries
 46461                                  exec_par_dir:
 46462 00000FD0 0000                    	dw	0	; number of paragraphs before image
 46463                                  exec_min_BSS:
 46464 00000FD2 0000                    	dw	0	; minimum number of para of BSS
 46465                                  exec_max_BSS:
 46466 00000FD4 0000                    	dw	0	; max number of para of BSS
 46467                                  exec_SS:
 46468 00000FD6 0000                    	dw	0	; stack of image
 46469                                  exec_SP:
 46470 00000FD8 0000                    	dw	0	; SP of image
 46471                                  exec_chksum:
 46472 00000FDA 0000                    	dw	0	; checksum of file (ignored)
 46473                                  exec_IP:
 46474 00000FDC 0000                    	dw	0	; IP of entry
 46475                                  exec_CS:
 46476 00000FDE 0000                    	dw	0	; CS of entry
 46477                                  exec_rle_table:
 46478 00000FE0 0000                    	dw	0	; byte offset of reloc table
 46479                                  
 46480                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 46481                                  
 46482                                  ;smr; eom
 46483                                  
 46484                                  ; ---------------------------------------------------------------------------
 46485                                  
 46486                                  ;SR;
 46487                                  ; WIN386 instance table for DOS
 46488                                  
 46489                                  Win386_Info:
 46490 00000FE2 0300                    	db	3, 0
 46491 00000FE4 000000000000000000-     	dd	0, 0, 0
 46491 00000FED 000000             
 46492 00000FF0 [F40F]0000              	dw	Instance_Table, 0
 46493                                  
 46494                                  Instance_Table:
 46495 00000FF4 [2200]00000200          	dw	CONTPOS, 0, 2
 46496 00000FFA [3200]00000400          	dw	BCON, 0, 4
 46497 00001000 [F901]00000601          	dw	CARPOS, 0, 106h
 46498 00001006 [0003]00000100          	dw	CHARCO, 0, 1
 46499 0000100C [C00F]00002200          	dw	exec_init_SP, 0, 34	; M074
 46500 00001012 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 46501 00001018 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 46502 0000101E 00000000                	dw	0, 0
 46503                                  
 46504                                  ; M001; SR;
 46505                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 46506                                  ; M001; some DOS variables. Note that the only really important variable in 
 46507                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 46508                                  ; M001; which does not need to be done in DOS 5.0. 
 46509                                  
 46510                                  ; 29/12/2022
 46511                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 46512                                  
 46513                                  Win386_DOSVars:
 46514 00001022 05                      	db	5	;Major version 5 ; M001
 46515 00001023 00                      	db	0	;Minor version 0 ; M001
 46516 00001024 [EC05]                  	dw	SAVEDS	; M001
 46517 00001026 [EA05]                  	dw	SAVEBX	; M001
 46518 00001028 [2103]                  	dw	INDOS	; M001
 46519 0000102A [3E03]                  	dw	USER_ID	; M001
 46520 0000102C [1503]                  	dw	CritPatch ; M001
 46521 0000102E [8C00]                  	dw	UMB_HEAD ; M012
 46522                                  
 46523                                  ;SR;
 46524                                  ; Flag to indicate whether WIN386 is running or not
 46525                                  
 46526 00001030 00                      IsWin386: db	0
 46527                                  
 46528                                  ;M018
 46529                                  ; This variable contains the path to the VxD device needed for Win386
 46530                                  
 46531 00001031 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 46531 0000103A 2E33383600         
 46532                                  
 46533                                  ;End WIN386 support
 46534                                  
 46535                                  ; ---------------------------------------------------------------------------
 46536                                  
 46537                                  ;SR;
 46538                                  ; These variables have been added for the special lie support for device
 46539                                  ;drivers.
 46540                                  ;
 46541                                  
 46542                                  DriverLoad:	
 46543 0000103F 01                      	db	1	;initialized to do special handling
 46544                                  BiosDataPtr:
 46545 00001040 00000000                	dd	0
 46546                                  
 46547                                  ; 25/03/2024
 46548                                  %if 1
 46549                                  ; 29/12/2022 - Retro DOS v4.1
 46550                                  ;%if 0
 46551                                  
 46552                                  ; 27/04/2019 - Retro DOS v4.0
 46553                                  ; 04/11/2022
 46554                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 46555                                  
 46556                                  ;------------------------------------------------------------------------
 46557                                  ; Patch for Sidekick
 46558                                  ;
 46559                                  ; A documented method for finding the offset of the Errormode flag in the 
 46560                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 46561                                  ; for the following sequence of instructions.
 46562                                  ;
 46563                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 46564                                  ;
 46565                                  ; The Offset of Errormode flag is 0320h
 46566                                  ;
 46567                                  ;------------------------------------------------------------------------
 46568                                  
 46569 00001044 36F6062003FF            	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 46570 0000104A 750C                    	db	075h, 0Ch			 ; jnz  NearLabel
 46571 0000104C 36FF365803              	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 46572 00001051 CD28                    	db	0CDh, 028h			 ; int  28h
 46573                                  
 46574                                  ;--------------------------------------------------------------------------
 46575                                  ; Patch for PortOfEntry - M036
 46576                                  ;
 46577                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 46578                                  ; the offset of Errormode flag. The following patch is to support them in 
 46579                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 46580                                  ;
 46581                                  ;---------------------------------------------------------------------------
 46582                                  
 46583 00001053 803E200300              	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 46584 00001058 7537                    	db	075h, 037h			 ; jnz	NearLabel
 46585 0000105A BCA00A                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 46586                                  
 46587                                  %endif ; 29/12/2022
 46588                                  
 46589                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 46590                                  
 46591                                  ;--------------------------------------------------------------------------
 46592                                  
 46593                                  ;*** New FCB Implementation
 46594                                  ; This variable is used as a cache in the new FCB implementation to remember
 46595                                  ;the address of a local SFT that can be recycled for a regenerate operation
 46596                                  
 46597 0000105D 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 46598                                  
 46599                                  ;DOSDATA ENDS
 46600                                  
 46601                                  ;============================================================================
 46602                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 46603                                  ;============================================================================
 46604                                  ; 27/04/2019 - Retro DOS 4.0
 46605                                  
 46606                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 46607                                  
 46608                                  ;---------------------------------------------------------------------------
 46609                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 46610                                  ;----------------------------------------------------------------------------
 46611                                  	
 46612                                  	;db	90h
 46613                                  
 46614                                  	;EVEN
 46615 00001061 90                      align 2
 46616                                  
 46617                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 46618                                  
 46619                                  DOSINTTABLE:	; LABEL	DWORD
 46620                                  
 46621                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 46622                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 46623                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 46624                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 46625                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 46626                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 46627                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 46628                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 46629                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 46630                                  	
 46631 00001062 [FC50]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 46632 00001066 [DB02]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4
 46633 0000106A [0703]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 46634 0000106E [3105]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 46635 00001072 [B805]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 46636 00001076 [2860]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 46637 0000107A [0107]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 46638 0000107E [E202]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 46639 00001082 [E102]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 46640                                  
 46641 00001086 0000                    SS_Save: dw	0		; save user's stack segment
 46642 00001088 0000                    SP_Save: dw	0		; save user's stack offset
 46643                                  
 46644                                  ;-------------------------------------------------------------------------
 46645                                  ;
 46646                                  ; LOW MEM STUB:
 46647                                  ;
 46648                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 46649                                  ; handled by DOS. This stub is installed if the user specifies that the 
 46650                                  ; DOS load in HIMEM. Each entry point does this.
 46651                                  ;
 46652                                  ; 	1. if jmp to 8 has been patched out
 46653                                  ;	   2. if A20 OFF
 46654                                  ;	      3. Enable A20
 46655                                  ;	   4. else 
 46656                                  ;	      5. just go to dos entry
 46657                                  ;	   6. endif
 46658                                  ;	7. else
 46659                                  ;	   8. just go to dos entry
 46660                                  ;	9. endif
 46661                                  ;
 46662                                  ;--------------------------------------------------------------------------
 46663                                  
 46664                                  ; 27/04/2019 - Retro DOS v4.0
 46665                                  
 46666                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 46667                                  
 46668                                  ;--------------------------------------------------------------------------
 46669                                  ;
 46670                                  ; DIVIDE BY 0 handler
 46671                                  ;
 46672                                  ;--------------------------------------------------------------------------
 46673                                  
 46674                                  ldivov:
 46675                                  	; The following jump, skipping the XMS calls will be patched to
 46676                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46677                                  	; needed because the stub is installed even before the XMS driver
 46678                                  	; is loaded if the user specifies dos=high in the config.sys
 46679                                  i0patch:
 46680 0000108A EB03                    	jmp	short divov_cont
 46681                                  
 46682 0000108C E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46683                                  divov_cont:
 46684 0000108F 2EFF2E[6210]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 46685                                  
 46686                                  ;------------------------------------------------------------------------
 46687                                  ;
 46688                                  ; INT 20 Handler
 46689                                  ;
 46690                                  ; Here we do not have to set up the stack to return here as the abort call
 46691                                  ; will return to the address after the int 21 ah=4b call. This would be the
 46692                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 46693                                  ; will be restored then.
 46694                                  ;
 46695                                  ;-------------------------------------------------------------------------
 46696                                  
 46697                                  lquit:
 46698                                  	; The following jump, skipping the XMS calls will be patched to
 46699                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46700                                  	; needed because the stub is installed even before the XMS driver
 46701                                  	; is loaded if the user specifies dos=high in the config.sys
 46702                                  i20patch:
 46703 00001094 EB03                    	jmp	short quit_cont	
 46704                                  
 46705 00001096 E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46706                                  quit_cont:
 46707 00001099 2EFF2E[6610]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 46708                                  
 46709                                  ;--------------------------------------------------------------------------
 46710                                  ;
 46711                                  ; INT 21 Handler
 46712                                  ;
 46713                                  ;--------------------------------------------------------------------------
 46714                                  
 46715                                  lcommand:
 46716                                  	; The following jump, skipping the XMS calls will be patched to
 46717                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46718                                  	; needed because the stub is installed even before the XMS driver
 46719                                  	; is loaded if the user specifies dos=high in the config.sys
 46720                                  i21patch:
 46721 0000109E EB03                    	jmp	short command_cont
 46722                                  
 46723 000010A0 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46724                                  command_cont:
 46725 000010A3 2EFF2E[6A10]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 46726                                  
 46727                                  ;------------------------------------------------------------------------
 46728                                  ;
 46729                                  ; INT 25 
 46730                                  ;
 46731                                  ;----------------------------------------------------------------------------
 46732                                  
 46733                                  labsdrd:
 46734                                  	; The following jump, skipping the XMS calls will be patched to
 46735                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46736                                  	; needed because the stub is installed even before the XMS driver
 46737                                  	; is loaded if the user specifies dos=high in the config.sys
 46738                                  i25patch:
 46739 000010A8 EB03                    	jmp	short absdrd_cont
 46740                                  
 46741 000010AA E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46742                                  absdrd_cont:
 46743 000010AD 2EFF2E[6E10]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 46744                                  
 46745                                  ;-------------------------------------------------------------------------
 46746                                  ;
 46747                                  ; INT 26
 46748                                  ;
 46749                                  ;-----------------------------------------------------------------------
 46750                                  
 46751                                  labsdwrt:
 46752                                  	; The following jump, skipping the XMS calls will be patched to
 46753                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46754                                  	; needed because the stub is installed even before the XMS driver
 46755                                  	; is loaded if the user specifies dos=high in the config.sys
 46756                                  i26patch:
 46757 000010B2 EB03                    	jmp	short absdwrt_cont
 46758                                  
 46759 000010B4 E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46760                                  absdwrt_cont:
 46761 000010B7 2EFF2E[7210]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 46762                                  
 46763                                  ;------------------------------------------------------------------------
 46764                                  ;
 46765                                  ; INT 27
 46766                                  ;
 46767                                  ;-----------------------------------------------------------------------
 46768                                  
 46769                                  lstay_resident:
 46770                                  	; The following jump, skipping the XMS calls will be patched to
 46771                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46772                                  	; needed because the stub is installed even before the XMS driver
 46773                                  	; is loaded if the user specifies dos=high in the config.sys
 46774                                  i27patch:
 46775 000010BC EB03                    	jmp	short sr_cont
 46776                                  
 46777 000010BE E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46778                                  sr_cont:
 46779 000010C1 2EFF2E[7610]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 46780                                  
 46781                                  ;-----------------------------------------------------------------------------
 46782                                  ;
 46783                                  ; INT 2f
 46784                                  ;
 46785                                  ;-------------------------------------------------------------------------
 46786                                  
 46787                                  lint2f:
 46788                                  	; The following jump, skipping the XMS calls will be patched to
 46789                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46790                                  	; needed because the stub is installed even before the XMS driver
 46791                                  	; is loaded if the user specifies dos=high in the config.sys
 46792                                  i2fpatch:
 46793 000010C6 EB03                    	jmp	short int2f_cont
 46794                                  
 46795 000010C8 E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46796                                  int2f_cont:
 46797 000010CB 2EFF2E[7A10]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 46798                                  
 46799                                  ;-----------------------------------------------------------------------------
 46800                                  ;
 46801                                  ; CPM entry
 46802                                  ;
 46803                                  ;------------------------------------------------------------------------
 46804                                  
 46805                                  lcall_entry:
 46806                                  	; The following jump, skipping the XMS calls will be patched to
 46807                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is
 46808                                  	; needed because the stub is installed even before the XMS driver
 46809                                  	; is loaded if the user specifies dos=high in the config.sys
 46810                                  cpmpatch:
 46811 000010D0 EB03                    	jmp	short callentry_cont
 46812                                  
 46813 000010D2 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF
 46814                                  callentry_cont:
 46815 000010D5 2EFF2E[7E10]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 46816                                  
 46817                                  ;--------------------------------------------------------------------------
 46818                                  
 46819                                  lirett:
 46820 000010DA CF                      	iret
 46821                                  
 46822                                  ;---------------------------------------------------------------------------
 46823                                  ;
 46824                                  ; LowIntXX:
 46825                                  ;
 46826                                  ; Interrupts from DOS that pass control to a user program must be done from
 46827                                  ; low memory, as the user program may change the state of the A20 line or
 46828                                  ; they may require that the A20 line be OFF. The following piece of code is
 46829                                  ; far call'd from the following places in DOS:
 46830                                  ;
 46831                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 46832                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 46833                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 46834                                  ;
 46835                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 46836                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 46837                                  ; before doing the ints and then do a far junp back into DOS.
 46838                                  ;
 46839                                  ;---------------------------------------------------------------------------
 46840                                  
 46841 000010DB 00000000                DosRetAddr23:	dd	0
 46842 000010DF 00000000                DosRetAddr24:	dd	0
 46843 000010E3 00000000                DosRetAddr28:	dd	0
 46844                                  
 46845                                  	; Execute int 23h from low memory
 46846                                  LowInt23:
 46847                                  					; save the return address that is on
 46848                                  					; the stack
 46849 000010E7 2E8F06[DB10]            	pop	word [cs:DosRetAddr23]
 46850 000010EC 2E8F06[DD10]            	pop	word [cs:DosRetAddr23+2]
 46851                                  
 46852 000010F1 CD23                    	int	23h			; ctrl C
 46853                                  					; turn on A20 it has been turned OFF
 46854                                  					; by int 28/23/24 handler.
 46855                                  
 46856 000010F3 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 46857                                  
 46858 000010F6 2EFF2E[DB10]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 46859                                  
 46860                                  
 46861                                  	; Execute int 24h from low memory
 46862                                  LowInt24:
 46863                                  					; save the return address that is on
 46864                                  					; the stack
 46865 000010FB 2E8F06[DF10]            	pop	word [cs:DosRetAddr24]
 46866 00001100 2E8F06[E110]            	pop	word [cs:DosRetAddr24+2]
 46867                                  
 46868 00001105 CD24                    	int	24h			; crit error
 46869                                  					; turn on A20 it has been turned OFF
 46870                                  					; by int 28/23/24 handler.
 46871                                  
 46872 00001107 E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46873                                  
 46874 0000110A 2EFF2E[DF10]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 46875                                  
 46876                                  
 46877                                   
 46878                                  	; Execute int 28h from low memory
 46879                                  LowInt28:
 46880 0000110F CD28                    	int	28h			; idle int
 46881                                  					; turn on A20 it has been turned OFF
 46882                                  					; by int 28/23/24 handler.
 46883                                  
 46884 00001111 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF
 46885                                  
 46886 00001114 CB                      	retf
 46887                                  
 46888                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 46889                                  
 46890                                  ;-------------------------------------------------------------------------
 46891                                  ;
 46892                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 46893                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 46894                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 46895                                  ; This is so because exepac'd programs rely on address wrap.
 46896                                  ;
 46897                                  ;-------------------------------------------------------------------------
 46898                                  
 46899                                  disa20_xfer:
 46900 00001115 E83F00                  	call	XMMDisableA20		; disable A20
 46901                                  
 46902                                  	; Look at msproc.asm at label exec_go for understanding the following:
 46903                                  
 46904                                  	; DS:SI points to entry point
 46905                                  	; AX:DI points to initial stack
 46906                                  	; DX has PDB pointer
 46907                                  	; BX has initial AX value
 46908                                  
 46909 00001118 FA                      	cli
 46910 00001119 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 46911                                  
 46912 0000111F 8ED0                    	mov	SS,AX			; set up user's stack
 46913 00001121 89FC                    	mov	SP,DI			; and SP
 46914 00001123 FB                      	sti
 46915                                  
 46916 00001124 1E                      	push	DS			; fake long call to entry
 46917 00001125 56                      	push	SI
 46918 00001126 8EC2                    	mov	ES,DX			; set up proper seg registers
 46919 00001128 8EDA                    	mov	DS,DX
 46920 0000112A 89D8                    	mov	AX,BX			; set up proper AX
 46921 0000112C CB                      	retf
 46922                                  
 46923                                  ;-------------------------------------------------------------------------
 46924                                  ;
 46925                                  ; M003:
 46926                                  ;
 46927                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 46928                                  ; come here, turn A20 OFF restore user stack and registers before returning
 46929                                  ; to user. This is done in dos\msdisp.asm. This has been done to support
 46930                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for
 46931                                  ; more info.	
 46932                                  ;
 46933                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that
 46934                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 46935                                  ; stack to avoid additional stack overhead for the user.
 46936                                  ;
 46937                                  ; -------------------------------------------------------------------------
 46938                                  
 46939                                  disa20_iret:
 46940 0000112D E82700                  	call	XMMDisableA20
 46941 00001130 FE0E[2103]              	dec	byte [INDOS]
 46942 00001134 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 46943 00001138 8B26[8405]              	mov	SP,[USER_SP]
 46944 0000113C 89E5                    	mov	BP,SP
 46945                                  	;mov	[BP+user_env.user_AX],AL
 46946 0000113E 884600                  	mov	[bp],al
 46947 00001141 A1[F205]                	mov	AX,[NSP]
 46948 00001144 A3[8405]                	mov	[USER_SP],AX
 46949 00001147 A1[F005]                	mov	AX,[NSS]
 46950 0000114A A3[8605]                	mov	[USER_SS],AX
 46951                                  
 46952 0000114D 58                      	pop	AX			; restore user regs
 46953 0000114E 5B                      	pop	BX
 46954 0000114F 59                      	pop	CX
 46955 00001150 5A                      	pop	DX
 46956 00001151 5E                      	pop	SI
 46957 00001152 5F                      	pop	DI
 46958 00001153 5D                      	pop	BP
 46959 00001154 1F                      	pop	DS
 46960 00001155 07                      	pop	ES
 46961 00001156 CF                      	iret
 46962                                  
 46963                                  ;**************************************************************************
 46964                                  ;***	XMMDisableA20 - switch 20th address line
 46965                                  ;
 46966                                  ;	This routine is used to disable the 20th address line in
 46967                                  ;	the system using XMM calls.
 46968                                  ;
 46969                                  ;	ENTRY	none		;ds = _DATA
 46970                                  ;	EXIT	A20 line disabled
 46971                                  ;	USES	NOTHING
 46972                                  ;
 46973                                  ;**************************************************************************
 46974                                  
 46975                                  XMMDisableA20:
 46976 00001157 53                      	push	bx
 46977 00001158 50                      	push	ax
 46978                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 46979 00001159 B406                    	mov	ah,6
 46980 0000115B 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 46981 00001160 58                      	pop	ax
 46982 00001161 5B                      	pop	bx
 46983 00001162 C3                      	retn
 46984                                  
 46985                                  ; The entry point in the BIOS XMS driver is defined here.
 46986                                  
 46987                                  XMMcontrol:
 46988 00001163 00000000                	dd	0
 46989                                  
 46990                                  ;--------------------------------------------------------------------------
 46991                                  ;
 46992                                  ;***	EnsureA20ON - Ensures that A20 is ON
 46993                                  ;
 46994                                  ;	This routine is used to query the A20 state in
 46995                                  ;	the system using XMM calls.
 46996                                  ;
 46997                                  ;	ENTRY: none
 46998                                  ;
 46999                                  ;	EXIT : A20 will be ON
 47000                                  ;
 47001                                  ; 	USES : NONE
 47002                                  ;
 47003                                  ;--------------------------------------------------------------------------
 47004                                  
 47005                                  LowMemory:	; label dword		; Set equal to 0000:0080
 47006 00001167 8000                    	dw	00080h
 47007 00001169 0000                    	dw	00000h
 47008                                  
 47009                                  HighMemory:	; label dword
 47010 0000116B 9000                    	dw	00090h			; Set equal to FFFF:0090
 47011 0000116D FFFF                    	dw	0FFFFh
 47012                                  
 47013                                  EnsureA20ON:
 47014 0000116F 9C                      	pushf
 47015 00001170 1E                      	push    ds
 47016 00001171 06                      	push	es
 47017 00001172 51                      	push	cx
 47018 00001173 56                      	push	si
 47019 00001174 57                      	push	di
 47020                                  
 47021 00001175 2EC536[6711]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 47022 0000117A 2EC43E[6B11]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 47023 0000117F B90400                  	mov	cx,4
 47024 00001182 FC                      	cld
 47025 00001183 F3A7                    	repe    cmpsw
 47026                                  
 47027 00001185 7407                    	jz	short EA20_OFF
 47028                                  EA20_RET:
 47029 00001187 5F                      	pop	di
 47030 00001188 5E                      	pop	si
 47031 00001189 59                      	pop	cx
 47032 0000118A 07                      	pop	es
 47033 0000118B 1F                      	pop	ds
 47034 0000118C 9D                      	popf
 47035 0000118D C3                      	retn
 47036                                  
 47037                                  EA20_OFF:
 47038                                  	; We are going to do the XMS call on the DOS's AuxStack.
 47039                                  	; NOTE: ints are disabled at this point.
 47040                                  
 47041 0000118E 53                      	push	bx
 47042 0000118F 50                      	push	ax
 47043                                  
 47044 00001190 8CD0                    	mov	ax,ss			; save user's stack pointer
 47045 00001192 2EA3[8610]              	mov	[cs:SS_Save],ax
 47046 00001196 2E8926[8810]            	mov	[cs:SP_Save],sp
 47047 0000119B 8CC8                    	mov	ax,cs
 47048 0000119D 8ED0                    	mov	ss,ax
 47049 0000119F BC[A007]                	mov	sp,AUXSTACK
 47050                                  					; ss:sp -> DOSDATA:AuxStack
 47051                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 47052 000011A2 B405                    	mov	ah,5
 47053 000011A4 2EFF1E[6311]            	call	far [cs:XMMcontrol]
 47054 000011A9 09C0                    	or	ax,ax
 47055 000011AB 740F                    	jz	short XMMerror		; AX = 0 fatal error
 47056                                  
 47057 000011AD 2EA1[8610]              	mov	ax,[cs:SS_Save]		; restore user stack
 47058 000011B1 8ED0                    	mov	ss,ax
 47059 000011B3 2E8B26[8810]            	mov	sp,[cs:SP_Save]
 47060                                  
 47061 000011B8 58                      	pop	ax
 47062 000011B9 5B                      	pop	bx
 47063                                  
 47064 000011BA EBCB                    	jmp	short EA20_RET
 47065                                  
 47066                                  XMMerror:				; M006 - Start
 47067 000011BC B40F                    	mov	ah,0Fh			; get video mode
 47068 000011BE CD10                    	int	10h
 47069 000011C0 3C07                    	cmp	al,7			; Q: are we an MDA
 47070 000011C2 7406                    	je	short XMMcont		; Y: do not change mode
 47071 000011C4 30E4                    	xor	ah,ah ; 0		; set video mode
 47072 000011C6 B002                    	mov	al,02h			; 80 X 25 text
 47073 000011C8 CD10                    	int	10h
 47074                                  XMMcont:
 47075 000011CA B405                    	mov	ah,05h			; set display page
 47076 000011CC 30C0                    	xor	al,al			; page 0
 47077 000011CE CD10                    	int	10h
 47078                                  	
 47079 000011D0 BE[B812]                	mov	si,XMMERRMSG
 47080 000011D3 0E                      	push	cs
 47081 000011D4 1F                      	pop	ds
 47082 000011D5 FC                      	cld				; clear direction flag
 47083                                  XMMprnt:
 47084 000011D6 AC                      	lodsb
 47085 000011D7 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 47086 000011D9 7409                    	jz	short XMMStall		; function 0Eh	
 47087 000011DB B40E                    	mov	ah,0Eh
 47088 000011DD BB0700                  	mov	bx,7
 47089 000011E0 CD10                    	int	10h
 47090 000011E2 EBF2                    	jmp	short XMMprnt
 47091                                  
 47092                                  XMMStall:
 47093 000011E4 FB                      	sti				; allow the user to warm boot
 47094 000011E5 EBFD                    	jmp	short XMMStall		; M006 - End
 47095                                  
 47096                                  ;---------------------------------------------------------------------------
 47097                                  
 47098                                  ; 27/04/2019 - Retro DOS v4.0
 47099                                  
 47100                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 47101                                  ALTAH	equ 0Ch
 47102                                  
 47103                                  ;This has been put in for WIN386 2.XX support. The format of the instance
 47104                                  ;table was different for this. Segments will be patched in at init time.
 47105                                  
 47106                                  OldInstanceJunk:
 47107 000011E7 7000                    	dw	70h	;segment of BIOS
 47108 000011E9 0000                    	dw	0	;indicate stacks in SYSINIT area
 47109 000011EB 0600                    	dw	6	;5 instance items
 47110                                  
 47111                                  	;dw	0,offset dosdata:contpos, 2
 47112                                  	;dw	0,offset dosdata:bcon, 4
 47113                                  	;dw	0,offset dosdata:carpos,106h
 47114                                  	;dw	0,offset dosdata:charco, 1
 47115                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 47116                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 47117                                  
 47118 000011ED 0000[2200]0200          	dw	0,CONTPOS,2
 47119 000011F3 0000[3200]0400          	dw	0,BCON,4
 47120 000011F9 0000[F901]0601          	dw	0,CARPOS,106h
 47121 000011FF 0000[0003]0100          	dw	0,CHARCO,1
 47122 00001205 0000[C00F]2200          	dw	0,exec_init_SP,34
 47123 0000120B 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 47124                                  
 47125                                  ;---------------------------------------------------------------------------
 47126                                  
 47127                                  ; M021-
 47128                                  ;
 47129                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 47130                                  ; 	takes control of the HMA. When running, this word is a reliable
 47131                                  ;	indicator that the DOS is actually using HMA. You can't just use
 47132                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 47133                                  
 47134                                  DosHasHMA:
 47135 00001211 00                      	db	0
 47136                                  FixExePatch:
 47137 00001212 0000                    	dw	0		; M012
 47138                                  
 47139                                  ; 25/03/2024
 47140                                  ;; 28/12/2022 - Retro DOS v4.1
 47141                                  RationalPatchPtr:
 47142 00001214 0000                    	dw	0		; M012
 47143                                  
 47144                                  ; End M021
 47145                                  
 47146                                  ;---------------------------------------------------------------------------
 47147                                  
 47148                                  ; 25/03/2024
 47149                                  %if 1
 47150                                  ; 28/12/2022 - Retro DOS v4.1
 47151                                  ;%if 0
 47152                                  ; M020 Begin
 47153                                  
 47154                                  RatBugCode:	; proc	far
 47155 00001216 51                      	push	cx
 47156 00001217 8B0E1000                	mov	cx,[10h]
 47157                                  rbc_loop:
 47158                                  	;loop	$
 47159 0000121B E2FE                    	loop	rbc_loop
 47160 0000121D 59                      	pop	cx
 47161 0000121E CB                      	retf
 47162                                  
 47163                                  ; M020 End
 47164                                  %endif
 47165                                  
 47166                                  ;---------------------------------------------------------------------------
 47167                                  	
 47168                                  UmbSave1:
 47169                                  	;db	11 dup (?)	; M023
 47170 0000121F 00<rep Bh>              	times	11 db 0	
 47171                                  
 47172                                  ; DOSDATA:122Ah
 47173                                  
 47174                                  Mark3:	; label byte
 47175                                  
 47176                                  ;IF2
 47177                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 47178                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 47179                                  ;	ENDIF
 47180                                  ;ENDIF
 47181                                  
 47182                                  ;############################################################################
 47183                                  ;
 47184                                  ; ** HACK FOR DOS 4.0 REDIR **
 47185                                  ;
 47186                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 47187                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 47188                                  ; COUNTRY_CDPG if it can. 
 47189                                  ;
 47190                                  ; MARK3 SHOULD NOT BE > 122AH 
 47191                                  ;
 47192                                  ; As of 9/6/90, this area is FULL!
 47193                                  ;
 47194                                  ;############################################################################
 47195                                   
 47196                                  	;ORG	0122Ah
 47197                                  
 47198                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 47199                                  
 47200                                  ; The following table is used for DOS 3.3
 47201                                  ;DOS country and code page information is defined here for DOS 3.3.
 47202                                  ;The initial value for ccDosCountry is 1 (USA).
 47203                                  ;The initial value for ccDosCodepage is 850.
 47204                                  
 47205                                  ; country and code page information
 47206                                  ; ---------------------------------------------------------------------------
 47207                                  COUNTRY_CDPG:	; label  byte
 47208 0000122A 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 47209 00001232 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 47209 0000123B 53595300           
 47210                                  	;db   51 dup (?)
 47211 0000123F 00<rep 33h>             	times 51 db 0
 47212                                  ; ------------------------------------------------<MSKK01>-------------------
 47213                                  ;ifdef	DBCS
 47214                                  ;  ifdef JAPAN
 47215                                  ;	dw   932			; system code page id (JAPAN)
 47216                                  ;  endif
 47217                                  ;  ifdef TAIWAN
 47218                                  ;	dw   938			; system code page id (TAIWAN)
 47219                                  ;  endif
 47220                                  ;  ifdef KOREA
 47221                                  ;	dw   934			; system code page id (KOREA IBM)
 47222                                  ;  endif
 47223                                  ;else
 47224 00001272 B501                    	dw   437			; system code page id
 47225                                  ;endif
 47226                                  ; ------------------------------------------------<MSKK01>-------------------
 47227 00001274 0600                    	dw   6				; number of entries
 47228 00001276 02                      	db   SetUcase  ; 2		; Ucase type
 47229 00001277 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 47230 00001279 0000                    	dw   0				; segment of poiter
 47231 0000127B 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 47232 0000127C [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 47233 0000127E 0000                    	dw   0				; segment of poiter
 47234 00001280 05                      	db   SetFileList ; 5		; valid file chars type
 47235 00001281 [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 47236 00001283 0000                    	dw   0				; segment of poiter
 47237 00001285 06                      	db   SetCollate	; 6		; collate type
 47238 00001286 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 47239 00001288 0000                    	dw   0				; segment of poiter
 47240 0000128A 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 47241 0000128B [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 47242 0000128D 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 47243 0000128F 01                      	db   SetCountryInfo  ; 1	; country info type
 47244 00001290 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 47245                                  ; ------------------------------------------------<MSKK01>-------------------
 47246                                  ;ifdef	DBCS
 47247                                  ;	...... 
 47248                                  ;else
 47249 00001292 0100                    	dw   1				; USA country id
 47250 00001294 B501                    	dw   437			; USA system code page id
 47251 00001296 0000                    	dw   0 				; date format
 47252 00001298 2400000000              	db   '$',0,0,0,0		; currency symbol
 47253 0000129D 2C00                    	db   ',',0			; thousand separator
 47254 0000129F 2E00                    	db   '.',0			; decimal separator
 47255 000012A1 2D00                    	db   '-',0			; date separator
 47256 000012A3 3A00                    	db   ':',0			; time separator
 47257 000012A5 00                      	db   0				; currency format flag
 47258 000012A6 02                      	db   2				; # of digits in currency
 47259 000012A7 00                      	db   0 				; time format
 47260 000012A8 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 47261 000012AA 0000                    	dw   0				; segment of entry point
 47262 000012AC 2C00                    	db   ',',0			; data list separator
 47263 000012AE 000000000000000000-     	dw   0,0,0,0,0			; reserved
 47263 000012B7 00                 
 47264                                  ;endif
 47265                                  ; ------------------------------------------------<MSKK01>-------------------
 47266                                  
 47267                                  ; 27/04/2019 - Retro DOS v4.0
 47268                                  
 47269                                  ;include msdos.cl2			; XMMERRMSG
 47270                                  
 47271                                  ; DOSDATA:12B8h (MSDOS 6.21, MSDOS.SYS) ; 17/01/2024
 47272                                  
 47273                                  XMMERRMSG:
 47274 000012B8 0D0A                    	db	0Dh,0Ah
 47275 000012BA 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 47275 000012C3 617265204572726F72-
 47275 000012CC 0D0A24             
 47276                                  
 47277                                  ; DOSDATA ends
 47278                                  
 47279                                  ; 05/11/2022
 47280                                  ;----------------------------------------------------------------------------
 47281                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 47282                                  ;----------------------------------------------------------------------------
 47283                                  
 47284                                  ; 28/12/2022 - Retro DOS v4.1
 47285                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 47286                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 47287                                  ;----------------------------------------------------------------------------
 47288                                  %if 0
 47289                                  ;----------------------------------------------------------------------------
 47290                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47291                                  
 47292                                  ;============================================================================
 47293                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 47294                                  ;============================================================================
 47295                                  ; 27/04/2019 - Retro DOS 4.0
 47296                                  
 47297                                  ;DOSDATA Segment
 47298                                  
 47299                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 47300                                  
 47301                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47302                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 47303                                  
 47304                                  ; first and second DOS patches
 47305                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 47306                                  ;
 47307                                  ; Code in disk.asm, 2 locations, one for read, one for write
 47308                                  ;	DVRDLP:
 47309                                  ;	DVWRTLP:
 47310                                  ;
 47311                                  ;
 47312                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 47313                                  ;	lds	si,si+7 				  ; sf_devptr
 47314                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 47315                                  
 47316                                  DOSP1_ID:	db	036h,0C5h,036h
 47317                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47318                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 47319                                  
 47320                                  		db	90h, 90h
 47321                                  
 47322                                  DOSP12_ID:	db	036h,0C5h,036h
 47323                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 47324                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 47325                                  
 47326                                  ; DOSDATA:12E3h
 47327                                  
 47328                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 47329                                  ;
 47330                                  ; Code in disk.asm, 1 location
 47331                                  ;	GETBUF:
 47332                                  ;
 47333                                  ; 051h	push	cx	<- begin special int28 mode
 47334                                  ;	push	es
 47335                                  ;	push	di
 47336                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 47337                                  ;	call	????	; $STD_CON_STRING_INPUT
 47338                                  ;	pop	di
 47339                                  ;	pop	es
 47340                                  ; 059h	pop	cx	<- end special int28 mode
 47341                                  
 47342                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 47343                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 47344                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 47345                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 47346                                  DOSP4_ID:	db	059h			; pop cx
 47347                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 47348                                  	
 47349                                  ; DOSDATA:12EFh
 47350                                  
 47351                                  ; Fifth DOS patch - System call 40h (Write) to console
 47352                                  ;
 47353                                  ; Code in disk.asm, 1 location
 47354                                  ;
 47355                                  ;		push	cx
 47356                                  ;      WRCONLP: lodsb
 47357                                  ;		cmp	al,1Ah
 47358                                  ;		jz	????
 47359                                  ;		call	????	<- "simulate" int28 event
 47360                                  ;		loop	WRCONLP
 47361                                  ;      CONEOF:	pop	ax
 47362                                  
 47363                                  DOSP5_ID:	db	051h			; push cx
 47364                                  		db	0ACh,03Ch,01Ah,074h,005h
 47365                                  		db	0E8h			; call
 47366                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 47367                                  
 47368                                  ; DOSDATA:12F6h
 47369                                  
 47370                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 47371                                  ;
 47372                                  ; Code in disp.asm, 1 location
 47373                                  ;
 47374                                  ;
 47375                                  ;	mov [SaveDS],ds
 47376                                  ;	mov [SaveBX],bx
 47377                                  ;	mov bx,cs
 47378                                  ;	mov ds,bx
 47379                                  ;	inc [indos]
 47380                                  ;	xor ax,ax
 47381                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 47382                                  
 47383                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 47384                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 47385                                  		db	02Eh,089h,01Eh
 47386                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 47387                                  		db	08Ch,0CBh		; mov bx,cs
 47388                                  		db	08Eh,0DBh		; mov ds,bx
 47389                                  		db	0FEh,006h
 47390                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 47391                                  		db	033h,0C0h		; xor ax,ax
 47392                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 47393                                  
 47394                                  ; DOSDATA:130Ah
 47395                                  
 47396                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 47397                                  ;
 47398                                  ; Code in handle.asm, 1 location in routine CheckOwner
 47399                                  ;
 47400                                  ;
 47401                                  ;
 47402                                  ;	push	ax
 47403                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 47404                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 47405                                  ;	pop	ax
 47406                                  ;	jz	????
 47407                                  
 47408                                  DOSP8_ID:	db	050h			; push ax
 47409                                  		db	036h,0A1h
 47410                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 47411                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 47412                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 47413                                  		db	02Fh,058h		; pop  ax
 47414                                  
 47415                                  ; DOSDATA:1314h
 47416                                  
 47417                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 47418                                  ;
 47419                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 47420                                  ;   a yeild when a character is not ready to be read.
 47421                                  ;
 47422                                  ; Code in disk.asm, 3 locations
 47423                                  ;
 47424                                  ;   DVRDRAW:
 47425                                  ;	    PUSH    ES
 47426                                  ;	    POP     DS
 47427                                  ;   ReadRawRetry:				<- Patch 10
 47428                                  ;	    MOV     BX,DI
 47429                                  ;	    XOR     AX,AX			<- Reenter #2
 47430                                  ;	    MOV     DX,AX
 47431                                  ;	    call    SETREAD
 47432                                  ;	    PUSH    DS				<- Reenter #1
 47433                                  ;	    LDS     SI,[THISSFT]
 47434                                  ;	    call    DEVIOCALL
 47435                                  ;	    MOV     DX,DI
 47436                                  ;	    MOV     AH,86H
 47437                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 47438                                  ;	    TEST    DI,STERR
 47439                                  ;	    JZ	    CRDROK
 47440                                  ;	    call    CHARHARD
 47441                                  ;	    MOV     DI,DX
 47442                                  ;	    OR	    AL,AL
 47443                                  ;	    JZ	    CRDROK
 47444                                  ;	    CMP     AL,3
 47445                                  ;	    JZ	    CRDFERR
 47446                                  ;	    POP     DS
 47447                                  ;	    JMP     ReadRawRetry
 47448                                  ;
 47449                                  ;   CRDFERR:
 47450                                  ;	    POP     DI				<- Patch 11
 47451                                  ;   DEVIOFERR:
 47452                                  ;	    LES     DI,[THISSFT]
 47453                                  ;	    jmp     SET_ACC_ERR_DS
 47454                                  ;
 47455                                  ;   CRDROK:
 47456                                  ;	    POP     DI				<- Patch 12
 47457                                  ;	    MOV     DI,DX
 47458                                  ;	    ADD     DI,[CALLSCNT]
 47459                                  ;	    JMP     SHORT ENDRDDEVJ3
 47460                                  
 47461                                  DOSP10_ID:		db	006H,01FH
 47462                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 47463                                  DOSP10_LOC:		db	08BH,0DFH
 47464                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 47465                                  			db	033H,0C0H,08BH,0D0H,0E8H
 47466                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 47467                                  			db	0DFH,00EH
 47468                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 47469                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 47470                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 47471                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 47472                                  			db	009H,003H
 47473                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 47474                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 47475                                  			db	01FH,0EBH,0CFH
 47476                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 47477                                  			db	05FH
 47478                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 47479                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 47480                                  
 47481                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 47482                                  			db	05FH,08BH,0FAH
 47483                                  ; DOSDATA:1353h
 47484                                  
 47485                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 47486                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 47487                                  ;
 47488                                  ;	    Sets focus to current VM so user can see fatal message.
 47489                                  ;
 47490                                  ;
 47491                                  ;	l0: lodsb		<- Setfocus here
 47492                                  ;	    cmp al, '$'
 47493                                  ;	    je l1
 47494                                  ;	    mov bl, 7
 47495                                  ;	    mov ah, 0Eh
 47496                                  ;	    int 10h
 47497                                  ;	    jmp l0
 47498                                  ;	l1: jmp $
 47499                                  
 47500                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 47501                                  		db	03Ch,024h		;     cmp al, '$'
 47502                                  		db	074h,008h		;     je l1
 47503                                  		db	0B3h,007h		;     mov bl, 7
 47504                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 47505                                  		db	0CDh,010h		;     int 10h
 47506                                  		db	0EBh,0F3h		;     jmp l0
 47507                                  		db	0EBh,0FEh		; l1: jmp $
 47508                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 47509                                  
 47510                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47511                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 47512                                  
 47513                                  ; 06/12/2022
 47514                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 47515                                  
 47516                                  ; DOSDATA ends
 47517                                  
 47518                                  ;============================================================================
 47519                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 47520                                  ;============================================================================
 47521                                  ; 27/04/2019 - Retro DOS 4.0
 47522                                  
 47523                                  ;mpatch.asm -- holds data patch location for callouts 
 47524                                  ; -- allocate cluster in rom.asm
 47525                                  ;
 47526                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 47527                                  ; Currently, this location is used only by magicdrv.sys's patch to
 47528                                  ; cluster allocation, however it can be expanded to be used by other
 47529                                  ; patches. This is important since we have an easy-access pointer to
 47530                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 47531                                  ; only patch out a far call/retf, so any space after that could be
 47532                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 47533                                  ; to call out here.
 47534                                  ;
 47535                                  ; Currently, we allocate only the minimum space required for the 6
 47536                                  ; byte magicdrv patch, so if you change the dos data, you may want
 47537                                  ; to reserve space here if your new data will be position dependent
 47538                                  ; and would prohibit growing of this table.
 47539                                  ;       
 47540                                  ;history	-	created 8-7-92 by scottq
 47541                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 47542                                  ;
 47543                                  ;Exported Functions
 47544                                  ;==================
 47545                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 47546                                  
 47547                                  ; DosData Segment
 47548                                  
 47549                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 47550                                  
 47551                                  ; ---------------------------------------------------------------------------
 47552                                  
 47553                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 47554                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 47555                                  ; greater). Added to this file because it needed to be somewhere and is
 47556                                  ; 'patch' related.
 47557                                  
 47558                                  Rational386PatchPtr:
 47559                                  	dw	0	; points to patch routine or RET instr.
 47560                                  ; ---------------------------------------------------------------------------
 47561                                  
 47562                                  MagicPatch:
 47563                                  ;MagicPatch proc far
 47564                                          retf            ;default is to just return to allocate
 47565                                          nop             ;however, this code will be patched
 47566                                          nop             ;by magicdrv.sys to
 47567                                          nop             ; call far ?:?     
 47568                                          nop             ; retf or perhaps just jmp far
 47569                                          nop             ;retf/nop take one byte, so we need six instructions
 47570                                                          ;for 6 byte patch
 47571                                  ;MagicPatch endp
 47572                                  
 47573                                  ; ---------------------------------------------------------------------------
 47574                                  
 47575                                  ;DosData Ends
 47576                                  
 47577                                  ; DOSDATA:136Ah
 47578                                  
 47579                                  ;----------------------------------------------------------------------------
 47580                                  
 47581                                  ;DOSDATALAST SEGMENT
 47582                                  
 47583                                  ; 29/04/2019 - Retro DOS v4.0
 47584                                  
 47585                                  ;----------------------------------------------------------------------------
 47586                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 47587                                  
 47588                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 47589                                  
 47590                                  ;align 16
 47591                                  
 47592                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 47593                                  
 47594                                  ;----------------------------------------------------------------------------
 47595                                  
 47596                                  %endif	; 05/11/2022
 47597                                  
 47598                                  ; 05/12/2022
 47599                                  ;MSDAT001E:	; label byte
 47600                                  
 47601                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 47602                                  DOSDATAEND equ $
 47603                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 47604                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 47605                                  
 47606                                  ;DOSDATALAST ENDS
 47607                                  
 47608                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 47609                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 47610                                  ;============================================================================
 47611                                  ;	END
 47612                                  ;============================================================================
 47613                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 47614                                  ; -----------------------------
 47615                                  ; MAY 2019, ISTANBUL - TURKIYE.
